
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00003796  0000382a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a2  008020c6  008020c6  000038f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058fc  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031cd  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eaf  00000000  00000000  0000c699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0000e548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e81  00000000  00000000  0000eca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002811  00000000  00000000  00011b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0001433a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 02 	jmp	0x536	; 0x536 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_25>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      70:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_28>
      74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      78:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      7c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      80:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      84:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      8c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      90:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      94:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      98:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      9c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c4:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_49>
      c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_58>
      ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     100:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     104:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     108:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     10c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     110:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     114:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     118:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     11c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     120:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     124:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     128:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     12c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     130:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     134:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     138:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     13c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     140:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     144:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     148:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     14c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     150:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     154:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     158:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     15c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     160:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_88>
     164:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     168:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     16c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_91>
     170:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     174:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     178:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     17c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     180:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     184:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     188:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     18c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     190:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     194:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     198:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     19c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1fc:	48 03       	fmul	r20, r16
     1fe:	4b 03       	fmul	r20, r19
     200:	4e 03       	fmul	r20, r22
     202:	51 03       	mulsu	r21, r17
     204:	54 03       	mulsu	r21, r20
     206:	57 03       	mulsu	r21, r23
     208:	59 03       	fmul	r21, r17
     20a:	6a 03       	fmul	r22, r18
     20c:	72 03       	mulsu	r23, r18
     20e:	7c 03       	fmul	r23, r20
     210:	7a 03       	fmul	r23, r18

00000212 <__trampolines_start>:
     212:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_ZN18task_motor_encoder3runEv>
     216:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <prvIdleTask>
     21a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN8emstreamlsE15ser_manipulator+0x24>
     21e:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_ZN8emstreamlsE15ser_manipulator+0x62>
     222:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_ZN8emstream12clear_screenEv>
     226:	0c 94 bb 03 	jmp	0x776	; 0x776 <_ZN8emstream7getcharEv>
     22a:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_ZN8emstreamlsE15ser_manipulator+0x72>
     22e:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <_GLOBAL__sub_I_counter>
     232:	0c 94 48 03 	jmp	0x690	; 0x690 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     236:	0c 94 4e 03 	jmp	0x69c	; 0x69c <_ZN8emstreamlsE15ser_manipulator+0x2a>
     23a:	0c 94 07 08 	jmp	0x100e	; 0x100e <_ZN9task_user3runEv>
     23e:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_ZN5rs2327getcharEv>
     242:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <_call_static_run_method>
     246:	0c 94 b8 03 	jmp	0x770	; 0x770 <_ZN8emstream12transmit_nowEv>
     24a:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_ZN14frt_text_queue14check_for_charEv>
     24e:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <_ZN18task_motor_command3runEv>
     252:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <_ZN8emstreamlsE15ser_manipulator+0x3c>
     256:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <_ZN5rs23214check_for_charEv>
     25a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_ZN8emstreamlsE15ser_manipulator+0x36>
     25e:	0c 94 15 03 	jmp	0x62a	; 0x62a <_ZN5rs2327putcharEc>
     262:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_ZN8emstreamlsE15ser_manipulator+0x30>
     266:	0c 94 b9 03 	jmp	0x772	; 0x772 <_ZN8emstream14check_for_charEv>
     26a:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <_ZN21task_pendulum_encoder3runEv>
     26e:	0c 94 c0 03 	jmp	0x780	; 0x780 <__cxa_pure_virtual>
     272:	0c 94 be 03 	jmp	0x77c	; 0x77c <_ZN8emstream13ready_to_sendEv>
     276:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_ZN14frt_text_queue7putcharEc>
     27a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_ZN8emstreamlsE15ser_manipulator+0x40>
     27e:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_ZN8emstreamlsE15ser_manipulator+0x82>
     282:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     286:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <_ZN17task_limit_switch3runEv>
     28a:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <_ZN22task_system_controller3runEv>
     28e:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <_ZN14frt_text_queue7getcharEv>
     292:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_ZN8frt_task12print_statusER8emstream>
     296:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_ZN5rs23212clear_screenEv>

0000029a <__trampolines_end>:
     29a:	09 09       	sbc	r16, r9
	...

0000029d <_ZZ15print_task_listP8emstreamE3__c_8>:
     29d:	2f 00                                               /.

0000029f <_ZZ15print_task_listP8emstreamE3__c_7>:
     29f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002aa <_ZZ15print_task_listP8emstreamE3__c_6>:
     2aa:	09 2d 2d 2d 2d 00                                   .----.

000002b0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2b0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002bc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2bc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000002cd <_ZZ15print_task_listP8emstreamE3__c_3>:
     2cd:	09 52 75 6e 73 00                                   .Runs.

000002d3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     2d3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000002df <_ZZ15print_task_listP8emstreamE3__c_1>:
     2df:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000002f0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     2f0:	09 53 74 61 63 6b 00                                .Stack.

000002f7 <_ZZ15print_task_listP8emstreamE3__c>:
     2f7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000302 <_ZZN9task_user11show_statusEvE3__c_4>:
     302:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000030d <_ZZN9task_user11show_statusEvE3__c_3>:
     30d:	2f 00                                               /.

0000030f <_ZZN9task_user11show_statusEvE3__c_2>:
     30f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000031d <_ZZN9task_user11show_statusEvE3__c_1>:
     31d:	54 69 6d 65 3a 20 00                                Time: .

00000324 <_ZZN9task_user11show_statusEvE3__c_0>:
     324:	46 65 62 20 32 32 20 32 30 32 35 00                 Feb 22 2025.

00000330 <_ZZN9task_user11show_statusEvE3__c>:
     330:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     340:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000034f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     34f:	1b 5b 32 32 6d 00                                   .[22m.

00000355 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     355:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000360 <_ZZ17print_task_stacksP8emstreamE3__c>:
     360:	1b 5b 31 6d 00                                      .[1m.

00000365 <_ZZN9task_user3runEvE3__c_3>:
     365:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     375:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000382 <_ZZN9task_user3runEvE3__c_2>:
     382:	3a 57 54 46 3f 00                                   :WTF?.

00000388 <_ZZN9task_user3runEvE3__c_1>:
     388:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     398:	65 00                                               e.

0000039a <_ZZN9task_user3runEvE3__c_0>:
     39a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003a8 <_ZZN9task_user3runEvE3__c>:
     3a8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3b8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000003c6 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3c6:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000003d5 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     3d5:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     3e5:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000003f0 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     3f0:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     400:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     40e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     41e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     42e:	6d 61 74 69 6f 6e 00                                mation.

00000435 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     435:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     445:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000456 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     456:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     466:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_4>:
     46e:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     47e:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000048a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     48a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     49a:	68 65 20 41 56 52 00                                he AVR.

000004a1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4a1:	20 68 65 6c 70 00                                    help.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4a7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4b7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004c6 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4c6:	1b 5b 33 30 6d 00                                   .[30m.

000004cc <_ZZN9task_user18print_help_messageEvE3__c>:
     4cc:	1b 5b 34 36 6d 00                                   .[46m.

000004d2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4d2:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     4e2:	61 73 6b 20 00                                      ask .

000004e7 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     4e7:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     4f5:	20 63 72 65 61 74 65 64 00                           created.

000004fe <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     4fe:	54 61 73 6b 20 00                                   Task .

00000504 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     504:	1b 5b 32 32 6d 00                                   .[22m.

0000050a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     50a:	54 61 73 6b 3a 20 00                                Task: .

00000511 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     511:	1b 5b 31 6d 00                                      .[1m.

00000516 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     516:	09 00                                               ..

00000518 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     518:	09 00                                               ..

0000051a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     51a:	2f 00                                               /.

0000051c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     51c:	09 00                                               ..

0000051e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     51e:	09 00                                               ..

00000520 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     520:	1b 5b 32 32 6d 00                                   .[22m.

00000526 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     526:	1b 5b 31 6d 00                                      .[1m.

0000052b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     52b:	1b 5b 31 6d 00                                      .[1m.

00000530 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     530:	20 20 00 00                                           ..

00000534 <__ctors_start>:
     534:	f6 0a       	sbc	r15, r22

00000536 <__ctors_end>:
     536:	11 24       	eor	r1, r1
     538:	1f be       	out	0x3f, r1	; 63
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df e3       	ldi	r29, 0x3F	; 63
     540:	de bf       	out	0x3e, r29	; 62
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0c bf       	out	0x3c, r16	; 60
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	1a be       	out	0x3a, r1	; 58
     54c:	1b be       	out	0x3b, r1	; 59

0000054e <__do_copy_data>:
     54e:	10 e2       	ldi	r17, 0x20	; 32
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	e6 e9       	ldi	r30, 0x96	; 150
     556:	f7 e3       	ldi	r31, 0x37	; 55
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	a6 3c       	cpi	r26, 0xC6	; 198
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_clear_bss>:
     56a:	21 e3       	ldi	r18, 0x31	; 49
     56c:	a6 ec       	ldi	r26, 0xC6	; 198
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 c0       	rjmp	.+2      	; 0x574 <.do_clear_bss_start>

00000572 <.do_clear_bss_loop>:
     572:	1d 92       	st	X+, r1

00000574 <.do_clear_bss_start>:
     574:	a8 36       	cpi	r26, 0x68	; 104
     576:	b2 07       	cpc	r27, r18
     578:	e1 f7       	brne	.-8      	; 0x572 <.do_clear_bss_loop>

0000057a <__do_global_ctors>:
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	cb e9       	ldi	r28, 0x9B	; 155
     57e:	d2 e0       	ldi	r29, 0x02	; 2
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <__do_global_ctors+0x16>
     584:	21 97       	sbiw	r28, 0x01	; 1
     586:	01 09       	sbc	r16, r1
     588:	80 2f       	mov	r24, r16
     58a:	fe 01       	movw	r30, r28
     58c:	0e 94 a6 1b 	call	0x374c	; 0x374c <__tablejump2__>
     590:	ca 39       	cpi	r28, 0x9A	; 154
     592:	d1 07       	cpc	r29, r17
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 07       	cpc	r16, r24
     598:	a9 f7       	brne	.-22     	; 0x584 <__do_global_ctors+0xa>
     59a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <main>
     59e:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <_ZN5rs23212clear_screenEv>:
     5a6:	dc 01       	movw	r26, r24
     5a8:	ed 91       	ld	r30, X+
     5aa:	fc 91       	ld	r31, X
     5ac:	02 80       	ldd	r0, Z+2	; 0x02
     5ae:	f3 81       	ldd	r31, Z+3	; 0x03
     5b0:	e0 2d       	mov	r30, r0
     5b2:	6c e0       	ldi	r22, 0x0C	; 12
     5b4:	19 95       	eicall
     5b6:	08 95       	ret

000005b8 <_ZN5rs23214check_for_charEv>:
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	a9 8d       	ldd	r26, Y+25	; 0x19
     5c0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     5c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5c4:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	4d 91       	ld	r20, X+
     5ca:	5c 91       	ld	r21, X
     5cc:	20 81       	ld	r18, Z
     5ce:	31 81       	ldd	r19, Z+1	; 0x01
     5d0:	42 17       	cp	r20, r18
     5d2:	53 07       	cpc	r21, r19
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <_ZN5rs23214check_for_charEv+0x20>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <_ZN5rs2327getcharEv>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	fc 01       	movw	r30, r24
     5e4:	c1 8d       	ldd	r28, Z+25	; 0x19
     5e6:	d2 8d       	ldd	r29, Z+26	; 0x1a
     5e8:	28 81       	ld	r18, Y
     5ea:	39 81       	ldd	r19, Y+1	; 0x01
     5ec:	a3 8d       	ldd	r26, Z+27	; 0x1b
     5ee:	b4 8d       	ldd	r27, Z+28	; 0x1c
     5f0:	4d 91       	ld	r20, X+
     5f2:	5c 91       	ld	r21, X
     5f4:	24 17       	cp	r18, r20
     5f6:	35 07       	cpc	r19, r21
     5f8:	e9 f3       	breq	.-6      	; 0x5f4 <_ZN5rs2327getcharEv+0x16>
     5fa:	a7 89       	ldd	r26, Z+23	; 0x17
     5fc:	b0 8d       	ldd	r27, Z+24	; 0x18
     5fe:	0d 90       	ld	r0, X+
     600:	bc 91       	ld	r27, X
     602:	a0 2d       	mov	r26, r0
     604:	a2 0f       	add	r26, r18
     606:	b3 1f       	adc	r27, r19
     608:	8c 91       	ld	r24, X
     60a:	2f 5f       	subi	r18, 0xFF	; 255
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	28 83       	st	Y, r18
     610:	39 83       	std	Y+1, r19	; 0x01
     612:	24 36       	cpi	r18, 0x64	; 100
     614:	31 05       	cpc	r19, r1
     616:	28 f0       	brcs	.+10     	; 0x622 <_ZN5rs2327getcharEv+0x44>
     618:	01 8c       	ldd	r0, Z+25	; 0x19
     61a:	f2 8d       	ldd	r31, Z+26	; 0x1a
     61c:	e0 2d       	mov	r30, r0
     61e:	10 82       	st	Z, r1
     620:	11 82       	std	Z+1, r1	; 0x01
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <_ZN5rs2327putcharEc>:
     62a:	dc 01       	movw	r26, r24
     62c:	50 96       	adiw	r26, 0x10	; 16
     62e:	ed 91       	ld	r30, X+
     630:	fc 91       	ld	r31, X
     632:	51 97       	sbiw	r26, 0x11	; 17
     634:	80 81       	ld	r24, Z
     636:	54 96       	adiw	r26, 0x14	; 20
     638:	4c 91       	ld	r20, X
     63a:	54 97       	sbiw	r26, 0x14	; 20
     63c:	84 23       	and	r24, r20
     63e:	29 f0       	breq	.+10     	; 0x64a <_ZN5rs2327putcharEc+0x20>
     640:	09 c0       	rjmp	.+18     	; 0x654 <_ZN5rs2327putcharEc+0x2a>
     642:	21 50       	subi	r18, 0x01	; 1
     644:	31 09       	sbc	r19, r1
     646:	19 f4       	brne	.+6      	; 0x64e <_ZN5rs2327putcharEc+0x24>
     648:	12 c0       	rjmp	.+36     	; 0x66e <_ZN5rs2327putcharEc+0x44>
     64a:	21 e2       	ldi	r18, 0x21	; 33
     64c:	3e e4       	ldi	r19, 0x4E	; 78
     64e:	90 81       	ld	r25, Z
     650:	94 23       	and	r25, r20
     652:	b9 f3       	breq	.-18     	; 0x642 <_ZN5rs2327putcharEc+0x18>
     654:	90 81       	ld	r25, Z
     656:	56 96       	adiw	r26, 0x16	; 22
     658:	8c 91       	ld	r24, X
     65a:	56 97       	sbiw	r26, 0x16	; 22
     65c:	89 2b       	or	r24, r25
     65e:	80 83       	st	Z, r24
     660:	1e 96       	adiw	r26, 0x0e	; 14
     662:	ed 91       	ld	r30, X+
     664:	fc 91       	ld	r31, X
     666:	1f 97       	sbiw	r26, 0x0f	; 15
     668:	60 83       	st	Z, r22
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	08 95       	ret
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 95       	ret

00000672 <_ZN8emstreamlsE15ser_manipulator>:
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	86 2f       	mov	r24, r22
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	8b 30       	cpi	r24, 0x0B	; 11
     67e:	91 05       	cpc	r25, r1
     680:	d8 f5       	brcc	.+118    	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     682:	fc 01       	movw	r30, r24
     684:	88 27       	eor	r24, r24
     686:	e2 50       	subi	r30, 0x02	; 2
     688:	ff 4f       	sbci	r31, 0xFF	; 255
     68a:	8f 4f       	sbci	r24, 0xFF	; 255
     68c:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__tablejump2__>
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	8a 83       	std	Y+2, r24	; 0x02
     694:	31 c0       	rjmp	.+98     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	8a 83       	std	Y+2, r24	; 0x02
     69a:	2e c0       	rjmp	.+92     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     69c:	8a e0       	ldi	r24, 0x0A	; 10
     69e:	8a 83       	std	Y+2, r24	; 0x02
     6a0:	2b c0       	rjmp	.+86     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6a2:	80 e1       	ldi	r24, 0x10	; 16
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	28 c0       	rjmp	.+80     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	25 c0       	rjmp	.+74     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6ae:	1b 82       	std	Y+3, r1	; 0x03
     6b0:	23 c0       	rjmp	.+70     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6b2:	e8 81       	ld	r30, Y
     6b4:	f9 81       	ldd	r31, Y+1	; 0x01
     6b6:	02 80       	ldd	r0, Z+2	; 0x02
     6b8:	f3 81       	ldd	r31, Z+3	; 0x03
     6ba:	e0 2d       	mov	r30, r0
     6bc:	6d e0       	ldi	r22, 0x0D	; 13
     6be:	ce 01       	movw	r24, r28
     6c0:	19 95       	eicall
     6c2:	e8 81       	ld	r30, Y
     6c4:	f9 81       	ldd	r31, Y+1	; 0x01
     6c6:	02 80       	ldd	r0, Z+2	; 0x02
     6c8:	f3 81       	ldd	r31, Z+3	; 0x03
     6ca:	e0 2d       	mov	r30, r0
     6cc:	6a e0       	ldi	r22, 0x0A	; 10
     6ce:	ce 01       	movw	r24, r28
     6d0:	19 95       	eicall
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6d4:	e8 81       	ld	r30, Y
     6d6:	f9 81       	ldd	r31, Y+1	; 0x01
     6d8:	02 84       	ldd	r0, Z+10	; 0x0a
     6da:	f3 85       	ldd	r31, Z+11	; 0x0b
     6dc:	e0 2d       	mov	r30, r0
     6de:	ce 01       	movw	r24, r28
     6e0:	19 95       	eicall
     6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6e4:	e8 81       	ld	r30, Y
     6e6:	f9 81       	ldd	r31, Y+1	; 0x01
     6e8:	00 84       	ldd	r0, Z+8	; 0x08
     6ea:	f1 85       	ldd	r31, Z+9	; 0x09
     6ec:	e0 2d       	mov	r30, r0
     6ee:	ce 01       	movw	r24, r28
     6f0:	19 95       	eicall
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_ZN8emstreamlsE15ser_manipulator+0x86>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	8c 83       	std	Y+4, r24	; 0x04
     6f8:	ce 01       	movw	r24, r28
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <_ZN8emstream4putsEPKc>:
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	8c 01       	movw	r16, r24
     70a:	fb 01       	movw	r30, r22
     70c:	dc 01       	movw	r26, r24
     70e:	14 96       	adiw	r26, 0x04	; 4
     710:	8c 91       	ld	r24, X
     712:	81 11       	cpse	r24, r1
     714:	04 c0       	rjmp	.+8      	; 0x71e <_ZN8emstream4putsEPKc+0x1e>
     716:	60 81       	ld	r22, Z
     718:	61 11       	cpse	r22, r1
     71a:	17 c0       	rjmp	.+46     	; 0x74a <_ZN8emstream4putsEPKc+0x4a>
     71c:	23 c0       	rjmp	.+70     	; 0x764 <_ZN8emstream4putsEPKc+0x64>
     71e:	d8 01       	movw	r26, r16
     720:	14 96       	adiw	r26, 0x04	; 4
     722:	1c 92       	st	X, r1
     724:	eb 01       	movw	r28, r22
     726:	21 96       	adiw	r28, 0x01	; 1
     728:	64 91       	lpm	r22, Z
     72a:	66 23       	and	r22, r22
     72c:	d9 f0       	breq	.+54     	; 0x764 <_ZN8emstream4putsEPKc+0x64>
     72e:	d8 01       	movw	r26, r16
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	02 80       	ldd	r0, Z+2	; 0x02
     736:	f3 81       	ldd	r31, Z+3	; 0x03
     738:	e0 2d       	mov	r30, r0
     73a:	c8 01       	movw	r24, r16
     73c:	19 95       	eicall
     73e:	fe 01       	movw	r30, r28
     740:	64 91       	lpm	r22, Z
     742:	21 96       	adiw	r28, 0x01	; 1
     744:	61 11       	cpse	r22, r1
     746:	f3 cf       	rjmp	.-26     	; 0x72e <_ZN8emstream4putsEPKc+0x2e>
     748:	0d c0       	rjmp	.+26     	; 0x764 <_ZN8emstream4putsEPKc+0x64>
     74a:	ef 01       	movw	r28, r30
     74c:	21 96       	adiw	r28, 0x01	; 1
     74e:	d8 01       	movw	r26, r16
     750:	ed 91       	ld	r30, X+
     752:	fc 91       	ld	r31, X
     754:	02 80       	ldd	r0, Z+2	; 0x02
     756:	f3 81       	ldd	r31, Z+3	; 0x03
     758:	e0 2d       	mov	r30, r0
     75a:	c8 01       	movw	r24, r16
     75c:	19 95       	eicall
     75e:	69 91       	ld	r22, Y+
     760:	61 11       	cpse	r22, r1
     762:	f5 cf       	rjmp	.-22     	; 0x74e <_ZN8emstream4putsEPKc+0x4e>
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <_ZN8emstream12clear_screenEv>:
     76e:	08 95       	ret

00000770 <_ZN8emstream12transmit_nowEv>:
     770:	08 95       	ret

00000772 <_ZN8emstream14check_for_charEv>:
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret

00000776 <_ZN8emstream7getcharEv>:
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	08 95       	ret

0000077c <_ZN8emstream13ready_to_sendEv>:
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	08 95       	ret

00000780 <__cxa_pure_virtual>:
     780:	08 95       	ret

00000782 <_ZN8frt_task20print_status_in_listEP8emstream>:
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
     78c:	8b 01       	movw	r16, r22
     78e:	e8 81       	ld	r30, Y
     790:	f9 81       	ldd	r31, Y+1	; 0x01
     792:	02 80       	ldd	r0, Z+2	; 0x02
     794:	f3 81       	ldd	r31, Z+3	; 0x03
     796:	e0 2d       	mov	r30, r0
     798:	19 95       	eicall
     79a:	66 e0       	ldi	r22, 0x06	; 6
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	9d 81       	ldd	r25, Y+5	; 0x05
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     7aa:	b8 01       	movw	r22, r16
     7ac:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN8frt_task20print_status_in_listEP8emstream>
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <_ZN9task_user18print_help_messageEv>:
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	8e 81       	ldd	r24, Y+6	; 0x06
     7c8:	9f 81       	ldd	r25, Y+7	; 0x07
     7ca:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     7ce:	8c 01       	movw	r16, r24
     7d0:	6c ec       	ldi	r22, 0xCC	; 204
     7d2:	74 e0       	ldi	r23, 0x04	; 4
     7d4:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     7d8:	6a e0       	ldi	r22, 0x0A	; 10
     7da:	c8 01       	movw	r24, r16
     7dc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     7e0:	8c 01       	movw	r16, r24
     7e2:	66 ec       	ldi	r22, 0xC6	; 198
     7e4:	74 e0       	ldi	r23, 0x04	; 4
     7e6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     7ea:	67 e0       	ldi	r22, 0x07	; 7
     7ec:	c8 01       	movw	r24, r16
     7ee:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     7f2:	6a e0       	ldi	r22, 0x0A	; 10
     7f4:	8e 81       	ldd	r24, Y+6	; 0x06
     7f6:	9f 81       	ldd	r25, Y+7	; 0x07
     7f8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     7fc:	8c 01       	movw	r16, r24
     7fe:	67 ea       	ldi	r22, 0xA7	; 167
     800:	74 e0       	ldi	r23, 0x04	; 4
     802:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     806:	6a e0       	ldi	r22, 0x0A	; 10
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     80e:	8c 01       	movw	r16, r24
     810:	61 ea       	ldi	r22, 0xA1	; 161
     812:	74 e0       	ldi	r23, 0x04	; 4
     814:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     818:	66 e0       	ldi	r22, 0x06	; 6
     81a:	c8 01       	movw	r24, r16
     81c:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     820:	6a e0       	ldi	r22, 0x0A	; 10
     822:	8e 81       	ldd	r24, Y+6	; 0x06
     824:	9f 81       	ldd	r25, Y+7	; 0x07
     826:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     82a:	8c 01       	movw	r16, r24
     82c:	6a e8       	ldi	r22, 0x8A	; 138
     82e:	74 e0       	ldi	r23, 0x04	; 4
     830:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     834:	66 e0       	ldi	r22, 0x06	; 6
     836:	c8 01       	movw	r24, r16
     838:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     83c:	6a e0       	ldi	r22, 0x0A	; 10
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     846:	8c 01       	movw	r16, r24
     848:	6e e6       	ldi	r22, 0x6E	; 110
     84a:	74 e0       	ldi	r23, 0x04	; 4
     84c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     850:	66 e0       	ldi	r22, 0x06	; 6
     852:	c8 01       	movw	r24, r16
     854:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     858:	6a e0       	ldi	r22, 0x0A	; 10
     85a:	8e 81       	ldd	r24, Y+6	; 0x06
     85c:	9f 81       	ldd	r25, Y+7	; 0x07
     85e:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     862:	8c 01       	movw	r16, r24
     864:	66 e5       	ldi	r22, 0x56	; 86
     866:	74 e0       	ldi	r23, 0x04	; 4
     868:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     86c:	66 e0       	ldi	r22, 0x06	; 6
     86e:	c8 01       	movw	r24, r16
     870:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     874:	6a e0       	ldi	r22, 0x0A	; 10
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     87e:	8c 01       	movw	r16, r24
     880:	65 e3       	ldi	r22, 0x35	; 53
     882:	74 e0       	ldi	r23, 0x04	; 4
     884:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     888:	66 e0       	ldi	r22, 0x06	; 6
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     890:	6a e0       	ldi	r22, 0x0A	; 10
     892:	8e 81       	ldd	r24, Y+6	; 0x06
     894:	9f 81       	ldd	r25, Y+7	; 0x07
     896:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     89a:	8c 01       	movw	r16, r24
     89c:	6e e0       	ldi	r22, 0x0E	; 14
     89e:	74 e0       	ldi	r23, 0x04	; 4
     8a0:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     8a4:	66 e0       	ldi	r22, 0x06	; 6
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8ac:	6a e0       	ldi	r22, 0x0A	; 10
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	9f 81       	ldd	r25, Y+7	; 0x07
     8b2:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8b6:	8c 01       	movw	r16, r24
     8b8:	60 ef       	ldi	r22, 0xF0	; 240
     8ba:	73 e0       	ldi	r23, 0x03	; 3
     8bc:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     8c0:	66 e0       	ldi	r22, 0x06	; 6
     8c2:	c8 01       	movw	r24, r16
     8c4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8c8:	6a e0       	ldi	r22, 0x0A	; 10
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	9f 81       	ldd	r25, Y+7	; 0x07
     8ce:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8d2:	8c 01       	movw	r16, r24
     8d4:	65 ed       	ldi	r22, 0xD5	; 213
     8d6:	73 e0       	ldi	r23, 0x03	; 3
     8d8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     8dc:	66 e0       	ldi	r22, 0x06	; 6
     8de:	c8 01       	movw	r24, r16
     8e0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8e4:	6a e0       	ldi	r22, 0x0A	; 10
     8e6:	8e 81       	ldd	r24, Y+6	; 0x06
     8e8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ea:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     8ee:	ec 01       	movw	r28, r24
     8f0:	66 ec       	ldi	r22, 0xC6	; 198
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     8f8:	66 e0       	ldi	r22, 0x06	; 6
     8fa:	ce 01       	movw	r24, r28
     8fc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <_ZN8emstreamlsEh>:
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	29 97       	sbiw	r28, 0x09	; 9
     920:	cd bf       	out	0x3d, r28	; 61
     922:	de bf       	out	0x3e, r29	; 62
     924:	8c 01       	movw	r16, r24
     926:	e6 2e       	mov	r14, r22
     928:	dc 01       	movw	r26, r24
     92a:	13 96       	adiw	r26, 0x03	; 3
     92c:	8c 91       	ld	r24, X
     92e:	13 97       	sbiw	r26, 0x03	; 3
     930:	88 23       	and	r24, r24
     932:	41 f0       	breq	.+16     	; 0x944 <_ZN8emstreamlsEh+0x3a>
     934:	ed 91       	ld	r30, X+
     936:	fc 91       	ld	r31, X
     938:	02 80       	ldd	r0, Z+2	; 0x02
     93a:	f3 81       	ldd	r31, Z+3	; 0x03
     93c:	e0 2d       	mov	r30, r0
     93e:	c8 01       	movw	r24, r16
     940:	19 95       	eicall
     942:	56 c0       	rjmp	.+172    	; 0x9f0 <_ZN8emstreamlsEh+0xe6>
     944:	f8 01       	movw	r30, r16
     946:	42 81       	ldd	r20, Z+2	; 0x02
     948:	42 30       	cpi	r20, 0x02	; 2
     94a:	19 f5       	brne	.+70     	; 0x992 <_ZN8emstreamlsEh+0x88>
     94c:	68 94       	set
     94e:	cc 24       	eor	r12, r12
     950:	c3 f8       	bld	r12, 3
     952:	d1 2c       	mov	r13, r1
     954:	68 94       	set
     956:	ff 24       	eor	r15, r15
     958:	f7 f8       	bld	r15, 7
     95a:	8e 2d       	mov	r24, r14
     95c:	8f 21       	and	r24, r15
     95e:	51 f0       	breq	.+20     	; 0x974 <_ZN8emstreamlsEh+0x6a>
     960:	d8 01       	movw	r26, r16
     962:	ed 91       	ld	r30, X+
     964:	fc 91       	ld	r31, X
     966:	02 80       	ldd	r0, Z+2	; 0x02
     968:	f3 81       	ldd	r31, Z+3	; 0x03
     96a:	e0 2d       	mov	r30, r0
     96c:	61 e3       	ldi	r22, 0x31	; 49
     96e:	c8 01       	movw	r24, r16
     970:	19 95       	eicall
     972:	09 c0       	rjmp	.+18     	; 0x986 <_ZN8emstreamlsEh+0x7c>
     974:	d8 01       	movw	r26, r16
     976:	ed 91       	ld	r30, X+
     978:	fc 91       	ld	r31, X
     97a:	02 80       	ldd	r0, Z+2	; 0x02
     97c:	f3 81       	ldd	r31, Z+3	; 0x03
     97e:	e0 2d       	mov	r30, r0
     980:	60 e3       	ldi	r22, 0x30	; 48
     982:	c8 01       	movw	r24, r16
     984:	19 95       	eicall
     986:	f6 94       	lsr	r15
     988:	b1 e0       	ldi	r27, 0x01	; 1
     98a:	cb 1a       	sub	r12, r27
     98c:	d1 08       	sbc	r13, r1
     98e:	29 f7       	brne	.-54     	; 0x95a <_ZN8emstreamlsEh+0x50>
     990:	2f c0       	rjmp	.+94     	; 0x9f0 <_ZN8emstreamlsEh+0xe6>
     992:	40 31       	cpi	r20, 0x10	; 16
     994:	f9 f4       	brne	.+62     	; 0x9d4 <_ZN8emstreamlsEh+0xca>
     996:	62 95       	swap	r22
     998:	6f 70       	andi	r22, 0x0F	; 15
     99a:	01 90       	ld	r0, Z+
     99c:	f0 81       	ld	r31, Z
     99e:	e0 2d       	mov	r30, r0
     9a0:	02 80       	ldd	r0, Z+2	; 0x02
     9a2:	f3 81       	ldd	r31, Z+3	; 0x03
     9a4:	e0 2d       	mov	r30, r0
     9a6:	6a 30       	cpi	r22, 0x0A	; 10
     9a8:	10 f0       	brcs	.+4      	; 0x9ae <_ZN8emstreamlsEh+0xa4>
     9aa:	69 5c       	subi	r22, 0xC9	; 201
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <_ZN8emstreamlsEh+0xa6>
     9ae:	60 5d       	subi	r22, 0xD0	; 208
     9b0:	c8 01       	movw	r24, r16
     9b2:	19 95       	eicall
     9b4:	6e 2d       	mov	r22, r14
     9b6:	6f 70       	andi	r22, 0x0F	; 15
     9b8:	d8 01       	movw	r26, r16
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	02 80       	ldd	r0, Z+2	; 0x02
     9c0:	f3 81       	ldd	r31, Z+3	; 0x03
     9c2:	e0 2d       	mov	r30, r0
     9c4:	6a 30       	cpi	r22, 0x0A	; 10
     9c6:	10 f0       	brcs	.+4      	; 0x9cc <_ZN8emstreamlsEh+0xc2>
     9c8:	69 5c       	subi	r22, 0xC9	; 201
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <_ZN8emstreamlsEh+0xc4>
     9cc:	60 5d       	subi	r22, 0xD0	; 208
     9ce:	c8 01       	movw	r24, r16
     9d0:	19 95       	eicall
     9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <_ZN8emstreamlsEh+0xe6>
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	8e 2d       	mov	r24, r14
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <utoa>
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	c8 01       	movw	r24, r16
     9ec:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     9f0:	c8 01       	movw	r24, r16
     9f2:	29 96       	adiw	r28, 0x09	; 9
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <_ZN8emstreamlsEj>:
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	61 97       	sbiw	r28, 0x11	; 17
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	8c 01       	movw	r16, r24
     a20:	f6 2e       	mov	r15, r22
     a22:	97 2f       	mov	r25, r23
     a24:	f8 01       	movw	r30, r16
     a26:	42 81       	ldd	r20, Z+2	; 0x02
     a28:	40 31       	cpi	r20, 0x10	; 16
     a2a:	21 f0       	breq	.+8      	; 0xa34 <_ZN8emstreamlsEj+0x2a>
     a2c:	48 30       	cpi	r20, 0x08	; 8
     a2e:	11 f0       	breq	.+4      	; 0xa34 <_ZN8emstreamlsEj+0x2a>
     a30:	42 30       	cpi	r20, 0x02	; 2
     a32:	41 f4       	brne	.+16     	; 0xa44 <_ZN8emstreamlsEj+0x3a>
     a34:	69 2f       	mov	r22, r25
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     a3c:	6f 2d       	mov	r22, r15
     a3e:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <_ZN8emstreamlsEj+0x54>
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	be 01       	movw	r22, r28
     a48:	6f 5f       	subi	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	8f 2d       	mov	r24, r15
     a4e:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <utoa>
     a52:	be 01       	movw	r22, r28
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     a5e:	c8 01       	movw	r24, r16
     a60:	61 96       	adiw	r28, 0x11	; 17
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	08 95       	ret

00000a72 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	5c 01       	movw	r10, r24
     a92:	3b 01       	movw	r6, r22
     a94:	4a 01       	movw	r8, r20
     a96:	12 2f       	mov	r17, r18
     a98:	50 2e       	mov	r5, r16
     a9a:	63 e0       	ldi	r22, 0x03	; 3
     a9c:	ca 01       	movw	r24, r20
     a9e:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     aa2:	a6 14       	cp	r10, r6
     aa4:	b7 04       	cpc	r11, r7
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     aa8:	7c c0       	rjmp	.+248    	; 0xba2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     aaa:	65 01       	movw	r12, r10
     aac:	84 e1       	ldi	r24, 0x14	; 20
     aae:	c8 0e       	add	r12, r24
     ab0:	d1 1c       	adc	r13, r1
     ab2:	00 e0       	ldi	r16, 0x00	; 0
     ab4:	75 01       	movw	r14, r10
     ab6:	b5 01       	movw	r22, r10
     ab8:	c4 01       	movw	r24, r8
     aba:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     ac4:	60 e3       	ldi	r22, 0x30	; 48
     ac6:	75 e0       	ldi	r23, 0x05	; 5
     ac8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     acc:	11 23       	and	r17, r17
     ace:	09 f4       	brne	.+2      	; 0xad2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     ad0:	6d c0       	rjmp	.+218    	; 0xbac <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     ad2:	00 23       	and	r16, r16
     ad4:	09 f4       	brne	.+2      	; 0xad8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     ad6:	6a c0       	rjmp	.+212    	; 0xbac <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	c4 01       	movw	r24, r8
     adc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     ae0:	6b e2       	ldi	r22, 0x2B	; 43
     ae2:	75 e0       	ldi	r23, 0x05	; 5
     ae4:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     ae8:	61 c0       	rjmp	.+194    	; 0xbac <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     aea:	11 23       	and	r17, r17
     aec:	71 f0       	breq	.+28     	; 0xb0a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     aee:	01 11       	cpse	r16, r1
     af0:	0c c0       	rjmp	.+24     	; 0xb0a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     af2:	88 81       	ld	r24, Y
     af4:	85 15       	cp	r24, r5
     af6:	49 f0       	breq	.+18     	; 0xb0a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     af8:	6a e0       	ldi	r22, 0x0A	; 10
     afa:	c4 01       	movw	r24, r8
     afc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     b00:	66 e2       	ldi	r22, 0x26	; 38
     b02:	75 e0       	ldi	r23, 0x05	; 5
     b04:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     b08:	01 e0       	ldi	r16, 0x01	; 1
     b0a:	69 91       	ld	r22, Y+
     b0c:	c4 01       	movw	r24, r8
     b0e:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     b12:	dc 01       	movw	r26, r24
     b14:	ed 91       	ld	r30, X+
     b16:	fc 91       	ld	r31, X
     b18:	02 80       	ldd	r0, Z+2	; 0x02
     b1a:	f3 81       	ldd	r31, Z+3	; 0x03
     b1c:	e0 2d       	mov	r30, r0
     b1e:	60 e2       	ldi	r22, 0x20	; 32
     b20:	19 95       	eicall
     b22:	cc 16       	cp	r12, r28
     b24:	dd 06       	cpc	r13, r29
     b26:	09 f7       	brne	.-62     	; 0xaea <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     b28:	11 23       	and	r17, r17
     b2a:	89 f0       	breq	.+34     	; 0xb4e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     b2c:	6a e0       	ldi	r22, 0x0A	; 10
     b2e:	c4 01       	movw	r24, r8
     b30:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     b34:	ec 01       	movw	r28, r24
     b36:	60 e2       	ldi	r22, 0x20	; 32
     b38:	75 e0       	ldi	r23, 0x05	; 5
     b3a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     b3e:	e8 81       	ld	r30, Y
     b40:	f9 81       	ldd	r31, Y+1	; 0x01
     b42:	02 80       	ldd	r0, Z+2	; 0x02
     b44:	f3 81       	ldd	r31, Z+3	; 0x03
     b46:	e0 2d       	mov	r30, r0
     b48:	60 e2       	ldi	r22, 0x20	; 32
     b4a:	ce 01       	movw	r24, r28
     b4c:	19 95       	eicall
     b4e:	f7 01       	movw	r30, r14
     b50:	61 91       	ld	r22, Z+
     b52:	7f 01       	movw	r14, r30
     b54:	80 ee       	ldi	r24, 0xE0	; 224
     b56:	86 0f       	add	r24, r22
     b58:	8f 35       	cpi	r24, 0x5F	; 95
     b5a:	48 f4       	brcc	.+18     	; 0xb6e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     b5c:	d4 01       	movw	r26, r8
     b5e:	ed 91       	ld	r30, X+
     b60:	fc 91       	ld	r31, X
     b62:	02 80       	ldd	r0, Z+2	; 0x02
     b64:	f3 81       	ldd	r31, Z+3	; 0x03
     b66:	e0 2d       	mov	r30, r0
     b68:	c4 01       	movw	r24, r8
     b6a:	19 95       	eicall
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     b6e:	d4 01       	movw	r26, r8
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	02 80       	ldd	r0, Z+2	; 0x02
     b76:	f3 81       	ldd	r31, Z+3	; 0x03
     b78:	e0 2d       	mov	r30, r0
     b7a:	6e e2       	ldi	r22, 0x2E	; 46
     b7c:	c4 01       	movw	r24, r8
     b7e:	19 95       	eicall
     b80:	ce 14       	cp	r12, r14
     b82:	df 04       	cpc	r13, r15
     b84:	21 f7       	brne	.-56     	; 0xb4e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     b86:	b4 e1       	ldi	r27, 0x14	; 20
     b88:	ab 0e       	add	r10, r27
     b8a:	b1 1c       	adc	r11, r1
     b8c:	66 e0       	ldi	r22, 0x06	; 6
     b8e:	c4 01       	movw	r24, r8
     b90:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     b94:	e4 e1       	ldi	r30, 0x14	; 20
     b96:	ce 0e       	add	r12, r30
     b98:	d1 1c       	adc	r13, r1
     b9a:	a6 14       	cp	r10, r6
     b9c:	b7 04       	cpc	r11, r7
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     ba0:	89 cf       	rjmp	.-238    	; 0xab4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	c4 01       	movw	r24, r8
     ba6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     bac:	e7 01       	movw	r28, r14
     bae:	9d cf       	rjmp	.-198    	; 0xaea <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	7f 90       	pop	r7
     bca:	6f 90       	pop	r6
     bcc:	5f 90       	pop	r5
     bce:	08 95       	ret

00000bd0 <_ZN8emstreamlsEm>:
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	a1 97       	sbiw	r28, 0x21	; 33
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	8c 01       	movw	r16, r24
     bea:	d4 2e       	mov	r13, r20
     bec:	e5 2e       	mov	r14, r21
     bee:	f6 2e       	mov	r15, r22
     bf0:	97 2f       	mov	r25, r23
     bf2:	f8 01       	movw	r30, r16
     bf4:	22 81       	ldd	r18, Z+2	; 0x02
     bf6:	20 31       	cpi	r18, 0x10	; 16
     bf8:	21 f0       	breq	.+8      	; 0xc02 <_ZN8emstreamlsEm+0x32>
     bfa:	28 30       	cpi	r18, 0x08	; 8
     bfc:	11 f0       	breq	.+4      	; 0xc02 <_ZN8emstreamlsEm+0x32>
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	71 f4       	brne	.+28     	; 0xc1e <_ZN8emstreamlsEm+0x4e>
     c02:	69 2f       	mov	r22, r25
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     c0a:	6f 2d       	mov	r22, r15
     c0c:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     c10:	6e 2d       	mov	r22, r14
     c12:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     c16:	6d 2d       	mov	r22, r13
     c18:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <_ZN8emstreamlsEm+0x6c>
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	ae 01       	movw	r20, r28
     c22:	4f 5f       	subi	r20, 0xFF	; 255
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	6d 2d       	mov	r22, r13
     c28:	7e 2d       	mov	r23, r14
     c2a:	8f 2d       	mov	r24, r15
     c2c:	0e 94 34 1b 	call	0x3668	; 0x3668 <ultoa>
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     c3c:	c8 01       	movw	r24, r16
     c3e:	a1 96       	adiw	r28, 0x21	; 33
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	08 95       	ret

00000c54 <_ZN10time_stamp10set_to_nowEv>:
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	0f 92       	push	r0
     c60:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c64:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     c68:	8c 83       	std	Y+4, r24	; 0x04
     c6a:	9d 83       	std	Y+5, r25	; 0x05
     c6c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
     c70:	68 83       	st	Y, r22
     c72:	79 83       	std	Y+1, r23	; 0x01
     c74:	8a 83       	std	Y+2, r24	; 0x02
     c76:	9b 83       	std	Y+3, r25	; 0x03
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	ce 01       	movw	r24, r28
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <_ZlsR8emstreamR10time_stamp>:
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	2f 97       	sbiw	r28, 0x0f	; 15
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	8c 01       	movw	r16, r24
     ca4:	7b 01       	movw	r14, r22
     ca6:	db 01       	movw	r26, r22
     ca8:	6d 91       	ld	r22, X+
     caa:	7d 91       	ld	r23, X+
     cac:	8d 91       	ld	r24, X+
     cae:	9c 91       	ld	r25, X
     cb0:	0f 2e       	mov	r0, r31
     cb2:	f8 ee       	ldi	r31, 0xE8	; 232
     cb4:	8f 2e       	mov	r8, r31
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	9f 2e       	mov	r9, r31
     cba:	a1 2c       	mov	r10, r1
     cbc:	b1 2c       	mov	r11, r1
     cbe:	f0 2d       	mov	r31, r0
     cc0:	a5 01       	movw	r20, r10
     cc2:	94 01       	movw	r18, r8
     cc4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
     cc8:	ba 01       	movw	r22, r20
     cca:	a9 01       	movw	r20, r18
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN8emstreamlsEm>
     cd2:	d8 01       	movw	r26, r16
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	02 80       	ldd	r0, Z+2	; 0x02
     cda:	f3 81       	ldd	r31, Z+3	; 0x03
     cdc:	e0 2d       	mov	r30, r0
     cde:	6e e2       	ldi	r22, 0x2E	; 46
     ce0:	c8 01       	movw	r24, r16
     ce2:	19 95       	eicall
     ce4:	f7 01       	movw	r30, r14
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	a5 01       	movw	r20, r10
     cf0:	94 01       	movw	r18, r8
     cf2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
     cf6:	9b 01       	movw	r18, r22
     cf8:	ac 01       	movw	r20, r24
     cfa:	60 e4       	ldi	r22, 0x40	; 64
     cfc:	72 e4       	ldi	r23, 0x42	; 66
     cfe:	8f e0       	ldi	r24, 0x0F	; 15
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 96 1b 	call	0x372c	; 0x372c <__mulsi3>
     d06:	a5 01       	movw	r20, r10
     d08:	94 01       	movw	r18, r8
     d0a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
     d0e:	49 01       	movw	r8, r18
     d10:	5a 01       	movw	r10, r20
     d12:	f7 01       	movw	r30, r14
     d14:	a4 81       	ldd	r26, Z+4	; 0x04
     d16:	b5 81       	ldd	r27, Z+5	; 0x05
     d18:	20 e4       	ldi	r18, 0x40	; 64
     d1a:	32 e4       	ldi	r19, 0x42	; 66
     d1c:	4f e0       	ldi	r20, 0x0F	; 15
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	0e 94 af 1b 	call	0x375e	; 0x375e <__muluhisi3>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	38 e4       	ldi	r19, 0x48	; 72
     d28:	48 ee       	ldi	r20, 0xE8	; 232
     d2a:	51 e0       	ldi	r21, 0x01	; 1
     d2c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
     d30:	c5 01       	movw	r24, r10
     d32:	b4 01       	movw	r22, r8
     d34:	62 0f       	add	r22, r18
     d36:	73 1f       	adc	r23, r19
     d38:	84 1f       	adc	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	7e 01       	movw	r14, r28
     d3e:	f7 e0       	ldi	r31, 0x07	; 7
     d40:	ef 0e       	add	r14, r31
     d42:	f1 1c       	adc	r15, r1
     d44:	9e 01       	movw	r18, r28
     d46:	2f 5f       	subi	r18, 0xFF	; 255
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	59 01       	movw	r10, r18
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__divmodsi4>
     d58:	e6 2f       	mov	r30, r22
     d5a:	28 87       	std	Y+8, r18	; 0x08
     d5c:	39 87       	std	Y+9, r19	; 0x09
     d5e:	4a 87       	std	Y+10, r20	; 0x0a
     d60:	5b 87       	std	Y+11, r21	; 0x0b
     d62:	68 85       	ldd	r22, Y+8	; 0x08
     d64:	79 85       	ldd	r23, Y+9	; 0x09
     d66:	8a 85       	ldd	r24, Y+10	; 0x0a
     d68:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6a:	20 e3       	ldi	r18, 0x30	; 48
     d6c:	2e 0f       	add	r18, r30
     d6e:	d7 01       	movw	r26, r14
     d70:	2e 93       	st	-X, r18
     d72:	7d 01       	movw	r14, r26
     d74:	aa 15       	cp	r26, r10
     d76:	bb 05       	cpc	r27, r11
     d78:	49 f7       	brne	.-46     	; 0xd4c <_ZlsR8emstreamR10time_stamp+0xc8>
     d7a:	1f 82       	std	Y+7, r1	; 0x07
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     d88:	c8 01       	movw	r24, r16
     d8a:	2f 96       	adiw	r28, 0x0f	; 15
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	9f 90       	pop	r9
     da2:	8f 90       	pop	r8
     da4:	08 95       	ret

00000da6 <_ZN14frt_text_queue7getcharEv>:
     da6:	0f 93       	push	r16
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	a9 01       	movw	r20, r18
     dba:	be 01       	movw	r22, r28
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 85       	ldd	r24, Z+8	; 0x08
     dc4:	91 85       	ldd	r25, Z+9	; 0x09
     dc6:	0e 94 41 14 	call	0x2882	; 0x2882 <xQueueGenericReceive>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <_ZN14frt_text_queue7getcharEv+0x2e>
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <_ZN14frt_text_queue7getcharEv+0x32>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	0f 90       	pop	r0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <_ZN14frt_text_queue14check_for_charEv>:
     de2:	fc 01       	movw	r30, r24
     de4:	80 85       	ldd	r24, Z+8	; 0x08
     de6:	91 85       	ldd	r25, Z+9	; 0x09
     de8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <uxQueueMessagesWaiting>
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	81 11       	cpse	r24, r1
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <_ZN14frt_text_queue14check_for_charEv+0x12>
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	89 2f       	mov	r24, r25
     df6:	08 95       	ret

00000df8 <_ZN14frt_text_queue7putcharEc>:
     df8:	0f 93       	push	r16
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	1f 92       	push	r1
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	69 83       	std	Y+1, r22	; 0x01
     e06:	fc 01       	movw	r30, r24
     e08:	22 85       	ldd	r18, Z+10	; 0x0a
     e0a:	33 85       	ldd	r19, Z+11	; 0x0b
     e0c:	44 85       	ldd	r20, Z+12	; 0x0c
     e0e:	55 85       	ldd	r21, Z+13	; 0x0d
     e10:	00 e0       	ldi	r16, 0x00	; 0
     e12:	be 01       	movw	r22, r28
     e14:	6f 5f       	subi	r22, 0xFF	; 255
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	80 85       	ldd	r24, Z+8	; 0x08
     e1a:	91 85       	ldd	r25, Z+9	; 0x09
     e1c:	0e 94 a6 13 	call	0x274c	; 0x274c <xQueueGenericSend>
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	81 11       	cpse	r24, r1
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <_ZN14frt_text_queue7putcharEc+0x30>
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	89 2f       	mov	r24, r25
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <_ZN8frt_task12print_statusER8emstream>:
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
     e4e:	8b 01       	movw	r16, r22
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <pcTaskGetTaskName>
     e58:	bc 01       	movw	r22, r24
     e5a:	c8 01       	movw	r24, r16
     e5c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     e60:	d8 01       	movw	r26, r16
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	02 80       	ldd	r0, Z+2	; 0x02
     e68:	f3 81       	ldd	r31, Z+3	; 0x03
     e6a:	e0 2d       	mov	r30, r0
     e6c:	69 e0       	ldi	r22, 0x09	; 9
     e6e:	c8 01       	movw	r24, r16
     e70:	19 95       	eicall
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <pcTaskGetTaskName>
     e7a:	fc 01       	movw	r30, r24
     e7c:	01 90       	ld	r0, Z+
     e7e:	00 20       	and	r0, r0
     e80:	e9 f7       	brne	.-6      	; 0xe7c <_ZN8frt_task12print_statusER8emstream+0x48>
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	e8 1b       	sub	r30, r24
     e86:	f9 0b       	sbc	r31, r25
     e88:	38 97       	sbiw	r30, 0x08	; 8
     e8a:	48 f4       	brcc	.+18     	; 0xe9e <_ZN8frt_task12print_statusER8emstream+0x6a>
     e8c:	d8 01       	movw	r26, r16
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	02 80       	ldd	r0, Z+2	; 0x02
     e94:	f3 81       	ldd	r31, Z+3	; 0x03
     e96:	e0 2d       	mov	r30, r0
     e98:	69 e0       	ldi	r22, 0x09	; 9
     e9a:	c8 01       	movw	r24, r16
     e9c:	19 95       	eicall
     e9e:	ce 84       	ldd	r12, Y+14	; 0x0e
     ea0:	df 84       	ldd	r13, Y+15	; 0x0f
     ea2:	e8 88       	ldd	r14, Y+16	; 0x10
     ea4:	f9 88       	ldd	r15, Y+17	; 0x11
     ea6:	a8 84       	ldd	r10, Y+8	; 0x08
     ea8:	b9 84       	ldd	r11, Y+9	; 0x09
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	0e 94 2d 1a 	call	0x345a	; 0x345a <uxTaskGetStackHighWaterMark>
     eb2:	98 2e       	mov	r9, r24
     eb4:	8c 84       	ldd	r8, Y+12	; 0x0c
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	0e 94 65 16 	call	0x2cca	; 0x2cca <uxTaskPriorityGet>
     ebe:	68 2f       	mov	r22, r24
     ec0:	c8 01       	movw	r24, r16
     ec2:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     ec6:	6a e0       	ldi	r22, 0x0A	; 10
     ec8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     ecc:	ec 01       	movw	r28, r24
     ece:	6e e1       	ldi	r22, 0x1E	; 30
     ed0:	75 e0       	ldi	r23, 0x05	; 5
     ed2:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     ed6:	68 2d       	mov	r22, r8
     ed8:	ce 01       	movw	r24, r28
     eda:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     ede:	6a e0       	ldi	r22, 0x0A	; 10
     ee0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     ee4:	ec 01       	movw	r28, r24
     ee6:	6c e1       	ldi	r22, 0x1C	; 28
     ee8:	75 e0       	ldi	r23, 0x05	; 5
     eea:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     eee:	69 2d       	mov	r22, r9
     ef0:	ce 01       	movw	r24, r28
     ef2:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
     ef6:	6a e0       	ldi	r22, 0x0A	; 10
     ef8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     efc:	ec 01       	movw	r28, r24
     efe:	6a e1       	ldi	r22, 0x1A	; 26
     f00:	75 e0       	ldi	r23, 0x05	; 5
     f02:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f06:	b5 01       	movw	r22, r10
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
     f0e:	6a e0       	ldi	r22, 0x0A	; 10
     f10:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     f14:	ec 01       	movw	r28, r24
     f16:	68 e1       	ldi	r22, 0x18	; 24
     f18:	75 e0       	ldi	r23, 0x05	; 5
     f1a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f1e:	6a e0       	ldi	r22, 0x0A	; 10
     f20:	ce 01       	movw	r24, r28
     f22:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     f26:	ec 01       	movw	r28, r24
     f28:	66 e1       	ldi	r22, 0x16	; 22
     f2a:	75 e0       	ldi	r23, 0x05	; 5
     f2c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f30:	b7 01       	movw	r22, r14
     f32:	a6 01       	movw	r20, r12
     f34:	ce 01       	movw	r24, r28
     f36:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN8emstreamlsEm>
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	7b 01       	movw	r14, r22
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <pcTaskGetTaskName>
     f70:	6c 01       	movw	r12, r24
     f72:	6a e0       	ldi	r22, 0x0A	; 10
     f74:	c7 01       	movw	r24, r14
     f76:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     f7a:	8c 01       	movw	r16, r24
     f7c:	61 e1       	ldi	r22, 0x11	; 17
     f7e:	75 e0       	ldi	r23, 0x05	; 5
     f80:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f84:	6a e0       	ldi	r22, 0x0A	; 10
     f86:	c8 01       	movw	r24, r16
     f88:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     f8c:	8c 01       	movw	r16, r24
     f8e:	6a e0       	ldi	r22, 0x0A	; 10
     f90:	75 e0       	ldi	r23, 0x05	; 5
     f92:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f96:	b6 01       	movw	r22, r12
     f98:	c8 01       	movw	r24, r16
     f9a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     f9e:	6a e0       	ldi	r22, 0x0A	; 10
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     fa6:	8c 01       	movw	r16, r24
     fa8:	64 e0       	ldi	r22, 0x04	; 4
     faa:	75 e0       	ldi	r23, 0x05	; 5
     fac:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
     fb0:	66 e0       	ldi	r22, 0x06	; 6
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
     fb8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fba:	9b 85       	ldd	r25, Y+11	; 0x0b
     fbc:	e8 85       	ldd	r30, Y+8	; 0x08
     fbe:	f9 85       	ldd	r31, Y+9	; 0x09
     fc0:	01 e1       	ldi	r16, 0x11	; 17
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	a7 01       	movw	r20, r14
     fc6:	bc 01       	movw	r22, r24
     fc8:	8e 1b       	sub	r24, r30
     fca:	9f 0b       	sbc	r25, r31
     fcc:	0e 94 39 05 	call	0xa72	; 0xa72 <_Z15hex_dump_memoryPhS_P8emstreambh>
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	19 f0       	breq	.+6      	; 0xfde <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     fd8:	b7 01       	movw	r22, r14
     fda:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN8frt_task19print_stack_in_listEP8emstream>
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	08 95       	ret

00000ff0 <_call_static_run_method>:
     ff0:	ec 01       	movw	r28, r24
     ff2:	e8 81       	ld	r30, Y
     ff4:	f9 81       	ldd	r31, Y+1	; 0x01
     ff6:	01 90       	ld	r0, Z+
     ff8:	f0 81       	ld	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	19 95       	eicall
     ffe:	1a 82       	std	Y+2, r1	; 0x02
    1000:	1b 82       	std	Y+3, r1	; 0x03
    1002:	6f ef       	ldi	r22, 0xFF	; 255
    1004:	7f ef       	ldi	r23, 0xFF	; 255
    1006:	cb 01       	movw	r24, r22
    1008:	0e 94 b7 18 	call	0x316e	; 0x316e <vTaskDelay>
    100c:	fa cf       	rjmp	.-12     	; 0x1002 <_call_static_run_method+0x12>

0000100e <_ZN9task_user3runEv>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2c 97       	sbiw	r28, 0x0c	; 12
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	7c 01       	movw	r14, r24
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	1a 82       	std	Y+2, r1	; 0x02
    1022:	1b 82       	std	Y+3, r1	; 0x03
    1024:	1c 82       	std	Y+4, r1	; 0x04
    1026:	1d 82       	std	Y+5, r1	; 0x05
    1028:	1e 82       	std	Y+6, r1	; 0x06
    102a:	6a e0       	ldi	r22, 0x0A	; 10
    102c:	dc 01       	movw	r26, r24
    102e:	16 96       	adiw	r26, 0x06	; 6
    1030:	8d 91       	ld	r24, X+
    1032:	9c 91       	ld	r25, X
    1034:	17 97       	sbiw	r26, 0x07	; 7
    1036:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    103a:	6c 01       	movw	r12, r24
    103c:	68 ea       	ldi	r22, 0xA8	; 168
    103e:	73 e0       	ldi	r23, 0x03	; 3
    1040:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1044:	66 e0       	ldi	r22, 0x06	; 6
    1046:	c6 01       	movw	r24, r12
    1048:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    104c:	11 e0       	ldi	r17, 0x01	; 1
    104e:	81 2c       	mov	r8, r1
    1050:	68 94       	set
    1052:	99 24       	eor	r9, r9
    1054:	93 f8       	bld	r9, 3
    1056:	0f 2e       	mov	r0, r31
    1058:	fc ec       	ldi	r31, 0xCC	; 204
    105a:	af 2e       	mov	r10, r31
    105c:	f0 e2       	ldi	r31, 0x20	; 32
    105e:	bf 2e       	mov	r11, r31
    1060:	f0 2d       	mov	r31, r0
    1062:	f7 01       	movw	r30, r14
    1064:	84 85       	ldd	r24, Z+12	; 0x0c
    1066:	88 23       	and	r24, r24
    1068:	21 f0       	breq	.+8      	; 0x1072 <_ZN9task_user3runEv+0x64>
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	09 f4       	brne	.+2      	; 0x1070 <_ZN9task_user3runEv+0x62>
    106e:	60 c0       	rjmp	.+192    	; 0x1130 <_ZN9task_user3runEv+0x122>
    1070:	06 c2       	rjmp	.+1036   	; 0x147e <_ZN9task_user3runEv+0x470>
    1072:	86 81       	ldd	r24, Z+6	; 0x06
    1074:	97 81       	ldd	r25, Z+7	; 0x07
    1076:	dc 01       	movw	r26, r24
    1078:	ed 91       	ld	r30, X+
    107a:	fc 91       	ld	r31, X
    107c:	04 80       	ldd	r0, Z+4	; 0x04
    107e:	f5 81       	ldd	r31, Z+5	; 0x05
    1080:	e0 2d       	mov	r30, r0
    1082:	19 95       	eicall
    1084:	88 23       	and	r24, r24
    1086:	09 f4       	brne	.+2      	; 0x108a <_ZN9task_user3runEv+0x7c>
    1088:	37 c0       	rjmp	.+110    	; 0x10f8 <_ZN9task_user3runEv+0xea>
    108a:	f7 01       	movw	r30, r14
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	97 81       	ldd	r25, Z+7	; 0x07
    1090:	dc 01       	movw	r26, r24
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	06 80       	ldd	r0, Z+6	; 0x06
    1098:	f7 81       	ldd	r31, Z+7	; 0x07
    109a:	e0 2d       	mov	r30, r0
    109c:	19 95       	eicall
    109e:	99 27       	eor	r25, r25
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	f9 f0       	breq	.+62     	; 0x10e4 <_ZN9task_user3runEv+0xd6>
    10a6:	03 97       	sbiw	r24, 0x03	; 3
    10a8:	09 f0       	breq	.+2      	; 0x10ac <_ZN9task_user3runEv+0x9e>
    10aa:	05 c2       	rjmp	.+1034   	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	f7 01       	movw	r30, r14
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    10b8:	7c 01       	movw	r14, r24
    10ba:	6a e9       	ldi	r22, 0x9A	; 154
    10bc:	73 e0       	ldi	r23, 0x03	; 3
    10be:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    10c2:	66 e0       	ldi	r22, 0x06	; 6
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	88 ed       	ldi	r24, 0xD8	; 216
    10ce:	08 b6       	in	r0, 0x38	; 56
    10d0:	18 be       	out	0x38, r1	; 56
    10d2:	84 bf       	out	0x34, r24	; 52
    10d4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10d8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    10dc:	81 fd       	sbrc	r24, 1
    10de:	fc cf       	rjmp	.-8      	; 0x10d8 <_ZN9task_user3runEv+0xca>
    10e0:	08 be       	out	0x38, r0	; 56
    10e2:	ff cf       	rjmp	.-2      	; 0x10e2 <_ZN9task_user3runEv+0xd4>
    10e4:	c7 01       	movw	r24, r14
    10e6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN9task_user18print_help_messageEv>
    10ea:	d7 01       	movw	r26, r14
    10ec:	1c 96       	adiw	r26, 0x0c	; 12
    10ee:	1c 93       	st	X, r17
    10f0:	1c 97       	sbiw	r26, 0x0c	; 12
    10f2:	1d 96       	adiw	r26, 0x0d	; 13
    10f4:	1c 93       	st	X, r17
    10f6:	df c1       	rjmp	.+958    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    10f8:	8c ee       	ldi	r24, 0xEC	; 236
    10fa:	90 e2       	ldi	r25, 0x20	; 32
    10fc:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN14frt_text_queue14check_for_charEv>
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <_ZN9task_user3runEv+0xf8>
    1104:	d8 c1       	rjmp	.+944    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1106:	d7 01       	movw	r26, r14
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	17 97       	sbiw	r26, 0x07	; 7
    1110:	01 90       	ld	r0, Z+
    1112:	f0 81       	ld	r31, Z
    1114:	e0 2d       	mov	r30, r0
    1116:	c2 80       	ldd	r12, Z+2	; 0x02
    1118:	d3 80       	ldd	r13, Z+3	; 0x03
    111a:	8c ee       	ldi	r24, 0xEC	; 236
    111c:	90 e2       	ldi	r25, 0x20	; 32
    111e:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN14frt_text_queue7getcharEv>
    1122:	68 2f       	mov	r22, r24
    1124:	f7 01       	movw	r30, r14
    1126:	86 81       	ldd	r24, Z+6	; 0x06
    1128:	97 81       	ldd	r25, Z+7	; 0x07
    112a:	f6 01       	movw	r30, r12
    112c:	19 95       	eicall
    112e:	c3 c1       	rjmp	.+902    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	97 81       	ldd	r25, Z+7	; 0x07
    1134:	dc 01       	movw	r26, r24
    1136:	ed 91       	ld	r30, X+
    1138:	fc 91       	ld	r31, X
    113a:	04 80       	ldd	r0, Z+4	; 0x04
    113c:	f5 81       	ldd	r31, Z+5	; 0x05
    113e:	e0 2d       	mov	r30, r0
    1140:	19 95       	eicall
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <_ZN9task_user3runEv+0x13a>
    1146:	b7 c1       	rjmp	.+878    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1148:	f7 01       	movw	r30, r14
    114a:	86 81       	ldd	r24, Z+6	; 0x06
    114c:	97 81       	ldd	r25, Z+7	; 0x07
    114e:	dc 01       	movw	r26, r24
    1150:	ed 91       	ld	r30, X+
    1152:	fc 91       	ld	r31, X
    1154:	06 80       	ldd	r0, Z+6	; 0x06
    1156:	f7 81       	ldd	r31, Z+7	; 0x07
    1158:	e0 2d       	mov	r30, r0
    115a:	19 95       	eicall
    115c:	9c 01       	movw	r18, r24
    115e:	33 27       	eor	r19, r19
    1160:	28 36       	cpi	r18, 0x68	; 104
    1162:	31 05       	cpc	r19, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <_ZN9task_user3runEv+0x15a>
    1166:	54 c1       	rjmp	.+680    	; 0x1410 <_ZN9task_user3runEv+0x402>
    1168:	4c f4       	brge	.+18     	; 0x117c <_ZN9task_user3runEv+0x16e>
    116a:	2b 31       	cpi	r18, 0x1B	; 27
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <_ZN9task_user3runEv+0x164>
    1170:	53 c1       	rjmp	.+678    	; 0x1418 <_ZN9task_user3runEv+0x40a>
    1172:	25 36       	cpi	r18, 0x65	; 101
    1174:	31 05       	cpc	r19, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <_ZN9task_user3runEv+0x16c>
    1178:	4f c1       	rjmp	.+670    	; 0x1418 <_ZN9task_user3runEv+0x40a>
    117a:	63 c1       	rjmp	.+710    	; 0x1442 <_ZN9task_user3runEv+0x434>
    117c:	23 37       	cpi	r18, 0x73	; 115
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <_ZN9task_user3runEv+0x176>
    1182:	0c c1       	rjmp	.+536    	; 0x139c <_ZN9task_user3runEv+0x38e>
    1184:	26 37       	cpi	r18, 0x76	; 118
    1186:	31 05       	cpc	r19, r1
    1188:	91 f0       	breq	.+36     	; 0x11ae <_ZN9task_user3runEv+0x1a0>
    118a:	2e 36       	cpi	r18, 0x6E	; 110
    118c:	31 05       	cpc	r19, r1
    118e:	09 f0       	breq	.+2      	; 0x1192 <_ZN9task_user3runEv+0x184>
    1190:	58 c1       	rjmp	.+688    	; 0x1442 <_ZN9task_user3runEv+0x434>
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN10time_stamp10set_to_nowEv>
    119a:	bc 01       	movw	r22, r24
    119c:	f7 01       	movw	r30, r14
    119e:	86 81       	ldd	r24, Z+6	; 0x06
    11a0:	97 81       	ldd	r25, Z+7	; 0x07
    11a2:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZlsR8emstreamR10time_stamp>
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    11ac:	84 c1       	rjmp	.+776    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    11ae:	1f 82       	std	Y+7, r1	; 0x07
    11b0:	18 86       	std	Y+8, r1	; 0x08
    11b2:	19 86       	std	Y+9, r1	; 0x09
    11b4:	1a 86       	std	Y+10, r1	; 0x0a
    11b6:	1b 86       	std	Y+11, r1	; 0x0b
    11b8:	1c 86       	std	Y+12, r1	; 0x0c
    11ba:	0e 94 5f 10 	call	0x20be	; 0x20be <xPortGetFreeHeapSize>
    11be:	3c 01       	movw	r6, r24
    11c0:	ce 01       	movw	r24, r28
    11c2:	07 96       	adiw	r24, 0x07	; 7
    11c4:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN10time_stamp10set_to_nowEv>
    11c8:	2c 01       	movw	r4, r24
    11ca:	66 e0       	ldi	r22, 0x06	; 6
    11cc:	d7 01       	movw	r26, r14
    11ce:	16 96       	adiw	r26, 0x06	; 6
    11d0:	8d 91       	ld	r24, X+
    11d2:	9c 91       	ld	r25, X
    11d4:	17 97       	sbiw	r26, 0x07	; 7
    11d6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    11da:	6a e0       	ldi	r22, 0x0A	; 10
    11dc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    11e0:	6c 01       	movw	r12, r24
    11e2:	60 e3       	ldi	r22, 0x30	; 48
    11e4:	73 e0       	ldi	r23, 0x03	; 3
    11e6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	c6 01       	movw	r24, r12
    11ee:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    11f2:	6c 01       	movw	r12, r24
    11f4:	64 e2       	ldi	r22, 0x24	; 36
    11f6:	73 e0       	ldi	r23, 0x03	; 3
    11f8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    11fc:	66 e0       	ldi	r22, 0x06	; 6
    11fe:	c6 01       	movw	r24, r12
    1200:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1204:	6a e0       	ldi	r22, 0x0A	; 10
    1206:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    120a:	6c 01       	movw	r12, r24
    120c:	6d e1       	ldi	r22, 0x1D	; 29
    120e:	73 e0       	ldi	r23, 0x03	; 3
    1210:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1214:	b2 01       	movw	r22, r4
    1216:	c6 01       	movw	r24, r12
    1218:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZlsR8emstreamR10time_stamp>
    121c:	6a e0       	ldi	r22, 0x0A	; 10
    121e:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1222:	6c 01       	movw	r12, r24
    1224:	6f e0       	ldi	r22, 0x0F	; 15
    1226:	73 e0       	ldi	r23, 0x03	; 3
    1228:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    122c:	b3 01       	movw	r22, r6
    122e:	c6 01       	movw	r24, r12
    1230:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
    1234:	6a e0       	ldi	r22, 0x0A	; 10
    1236:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    123a:	6c 01       	movw	r12, r24
    123c:	6d e0       	ldi	r22, 0x0D	; 13
    123e:	73 e0       	ldi	r23, 0x03	; 3
    1240:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1244:	4f ef       	ldi	r20, 0xFF	; 255
    1246:	5f e0       	ldi	r21, 0x0F	; 15
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	c6 01       	movw	r24, r12
    124e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN8emstreamlsEm>
    1252:	f4 01       	movw	r30, r8
    1254:	60 a4       	ldd	r6, Z+40	; 0x28
    1256:	71 a4       	ldd	r7, Z+41	; 0x29
    1258:	6a e0       	ldi	r22, 0x0A	; 10
    125a:	d7 01       	movw	r26, r14
    125c:	16 96       	adiw	r26, 0x06	; 6
    125e:	8d 91       	ld	r24, X+
    1260:	9c 91       	ld	r25, X
    1262:	17 97       	sbiw	r26, 0x07	; 7
    1264:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1268:	6c 01       	movw	r12, r24
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	73 e0       	ldi	r23, 0x03	; 3
    126e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1272:	b3 01       	movw	r22, r6
    1274:	c6 01       	movw	r24, r12
    1276:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
    127a:	66 e0       	ldi	r22, 0x06	; 6
    127c:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1280:	66 e0       	ldi	r22, 0x06	; 6
    1282:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1286:	f7 01       	movw	r30, r14
    1288:	c6 80       	ldd	r12, Z+6	; 0x06
    128a:	d7 80       	ldd	r13, Z+7	; 0x07
    128c:	6a e0       	ldi	r22, 0x0A	; 10
    128e:	c6 01       	movw	r24, r12
    1290:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1294:	3c 01       	movw	r6, r24
    1296:	67 ef       	ldi	r22, 0xF7	; 247
    1298:	72 e0       	ldi	r23, 0x02	; 2
    129a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    129e:	6a e0       	ldi	r22, 0x0A	; 10
    12a0:	c3 01       	movw	r24, r6
    12a2:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12a6:	3c 01       	movw	r6, r24
    12a8:	60 ef       	ldi	r22, 0xF0	; 240
    12aa:	72 e0       	ldi	r23, 0x02	; 2
    12ac:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    12b0:	66 e0       	ldi	r22, 0x06	; 6
    12b2:	c3 01       	movw	r24, r6
    12b4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	c6 01       	movw	r24, r12
    12bc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12c0:	3c 01       	movw	r6, r24
    12c2:	6f ed       	ldi	r22, 0xDF	; 223
    12c4:	72 e0       	ldi	r23, 0x02	; 2
    12c6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    12ca:	6a e0       	ldi	r22, 0x0A	; 10
    12cc:	c3 01       	movw	r24, r6
    12ce:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12d2:	3c 01       	movw	r6, r24
    12d4:	63 ed       	ldi	r22, 0xD3	; 211
    12d6:	72 e0       	ldi	r23, 0x02	; 2
    12d8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    12dc:	6a e0       	ldi	r22, 0x0A	; 10
    12de:	c3 01       	movw	r24, r6
    12e0:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12e4:	3c 01       	movw	r6, r24
    12e6:	6d ec       	ldi	r22, 0xCD	; 205
    12e8:	72 e0       	ldi	r23, 0x02	; 2
    12ea:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    12ee:	66 e0       	ldi	r22, 0x06	; 6
    12f0:	c3 01       	movw	r24, r6
    12f2:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12f6:	6a e0       	ldi	r22, 0x0A	; 10
    12f8:	c6 01       	movw	r24, r12
    12fa:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    12fe:	3c 01       	movw	r6, r24
    1300:	6c eb       	ldi	r22, 0xBC	; 188
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1308:	6a e0       	ldi	r22, 0x0A	; 10
    130a:	c3 01       	movw	r24, r6
    130c:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1310:	3c 01       	movw	r6, r24
    1312:	60 eb       	ldi	r22, 0xB0	; 176
    1314:	72 e0       	ldi	r23, 0x02	; 2
    1316:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    131a:	6a e0       	ldi	r22, 0x0A	; 10
    131c:	c3 01       	movw	r24, r6
    131e:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1322:	3c 01       	movw	r6, r24
    1324:	6a ea       	ldi	r22, 0xAA	; 170
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    132c:	66 e0       	ldi	r22, 0x06	; 6
    132e:	c3 01       	movw	r24, r6
    1330:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1334:	d5 01       	movw	r26, r10
    1336:	8d 91       	ld	r24, X+
    1338:	9c 91       	ld	r25, X
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	19 f0       	breq	.+6      	; 0x1344 <_ZN9task_user3runEv+0x336>
    133e:	b6 01       	movw	r22, r12
    1340:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN8frt_task20print_status_in_listEP8emstream>
    1344:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <xTaskGetIdleTaskHandle>
    1348:	0e 94 2d 1a 	call	0x345a	; 0x345a <uxTaskGetStackHighWaterMark>
    134c:	08 2f       	mov	r16, r24
    134e:	6a e0       	ldi	r22, 0x0A	; 10
    1350:	c6 01       	movw	r24, r12
    1352:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1356:	6c 01       	movw	r12, r24
    1358:	6f e9       	ldi	r22, 0x9F	; 159
    135a:	72 e0       	ldi	r23, 0x02	; 2
    135c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1360:	60 2f       	mov	r22, r16
    1362:	c6 01       	movw	r24, r12
    1364:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN8emstreamlsEh>
    1368:	6a e0       	ldi	r22, 0x0A	; 10
    136a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    136e:	6c 01       	movw	r12, r24
    1370:	6d e9       	ldi	r22, 0x9D	; 157
    1372:	72 e0       	ldi	r23, 0x02	; 2
    1374:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1378:	64 e6       	ldi	r22, 0x64	; 100
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	c6 01       	movw	r24, r12
    137e:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
    1382:	6a e0       	ldi	r22, 0x0A	; 10
    1384:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1388:	6c 01       	movw	r12, r24
    138a:	6a e9       	ldi	r22, 0x9A	; 154
    138c:	72 e0       	ldi	r23, 0x02	; 2
    138e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1392:	66 e0       	ldi	r22, 0x06	; 6
    1394:	c6 01       	movw	r24, r12
    1396:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    139a:	8d c0       	rjmp	.+282    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    139c:	f7 01       	movw	r30, r14
    139e:	c6 80       	ldd	r12, Z+6	; 0x06
    13a0:	d7 80       	ldd	r13, Z+7	; 0x07
    13a2:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <last_created_task_pointer>
    13a6:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <last_created_task_pointer+0x1>
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <_ZN9task_user3runEv+0x3a6>
    13ae:	b6 01       	movw	r22, r12
    13b0:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN8frt_task19print_stack_in_listEP8emstream>
    13b4:	6a e0       	ldi	r22, 0x0A	; 10
    13b6:	c6 01       	movw	r24, r12
    13b8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    13bc:	3c 01       	movw	r6, r24
    13be:	60 e6       	ldi	r22, 0x60	; 96
    13c0:	73 e0       	ldi	r23, 0x03	; 3
    13c2:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    13c6:	6a e0       	ldi	r22, 0x0A	; 10
    13c8:	c3 01       	movw	r24, r6
    13ca:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    13ce:	3c 01       	movw	r6, r24
    13d0:	65 e5       	ldi	r22, 0x55	; 85
    13d2:	73 e0       	ldi	r23, 0x03	; 3
    13d4:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    13d8:	6a e0       	ldi	r22, 0x0A	; 10
    13da:	c3 01       	movw	r24, r6
    13dc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    13e0:	3c 01       	movw	r6, r24
    13e2:	6f e4       	ldi	r22, 0x4F	; 79
    13e4:	73 e0       	ldi	r23, 0x03	; 3
    13e6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    13ea:	66 e0       	ldi	r22, 0x06	; 6
    13ec:	c3 01       	movw	r24, r6
    13ee:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    13f2:	80 91 66 31 	lds	r24, 0x3166	; 0x803166 <portStackTopForTask>
    13f6:	90 91 67 31 	lds	r25, 0x3167	; 0x803167 <portStackTopForTask+0x1>
    13fa:	bc 01       	movw	r22, r24
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	01 e1       	ldi	r16, 0x11	; 17
    1402:	21 2f       	mov	r18, r17
    1404:	a6 01       	movw	r20, r12
    1406:	83 56       	subi	r24, 0x63	; 99
    1408:	91 09       	sbc	r25, r1
    140a:	0e 94 39 05 	call	0xa72	; 0xa72 <_Z15hex_dump_memoryPhS_P8emstreambh>
    140e:	53 c0       	rjmp	.+166    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1410:	c7 01       	movw	r24, r14
    1412:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN9task_user18print_help_messageEv>
    1416:	4f c0       	rjmp	.+158    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1418:	6a e0       	ldi	r22, 0x0A	; 10
    141a:	d7 01       	movw	r26, r14
    141c:	16 96       	adiw	r26, 0x06	; 6
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	17 97       	sbiw	r26, 0x07	; 7
    1424:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1428:	6c 01       	movw	r12, r24
    142a:	68 e8       	ldi	r22, 0x88	; 136
    142c:	73 e0       	ldi	r23, 0x03	; 3
    142e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1432:	66 e0       	ldi	r22, 0x06	; 6
    1434:	c6 01       	movw	r24, r12
    1436:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    143a:	f7 01       	movw	r30, r14
    143c:	14 86       	std	Z+12, r1	; 0x0c
    143e:	15 86       	std	Z+13, r1	; 0x0d
    1440:	3a c0       	rjmp	.+116    	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    1442:	f7 01       	movw	r30, r14
    1444:	a6 81       	ldd	r26, Z+6	; 0x06
    1446:	b7 81       	ldd	r27, Z+7	; 0x07
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	11 97       	sbiw	r26, 0x01	; 1
    144e:	02 80       	ldd	r0, Z+2	; 0x02
    1450:	f3 81       	ldd	r31, Z+3	; 0x03
    1452:	e0 2d       	mov	r30, r0
    1454:	68 2f       	mov	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	19 95       	eicall
    145a:	6a e0       	ldi	r22, 0x0A	; 10
    145c:	d7 01       	movw	r26, r14
    145e:	16 96       	adiw	r26, 0x06	; 6
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	17 97       	sbiw	r26, 0x07	; 7
    1466:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    146a:	6c 01       	movw	r12, r24
    146c:	62 e8       	ldi	r22, 0x82	; 130
    146e:	73 e0       	ldi	r23, 0x03	; 3
    1470:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1474:	66 e0       	ldi	r22, 0x06	; 6
    1476:	c6 01       	movw	r24, r12
    1478:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    147c:	1c c0       	rjmp	.+56     	; 0x14b6 <_ZN9task_user3runEv+0x4a8>
    147e:	6a e0       	ldi	r22, 0x0A	; 10
    1480:	f7 01       	movw	r30, r14
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	97 81       	ldd	r25, Z+7	; 0x07
    1486:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    148a:	7c 01       	movw	r14, r24
    148c:	65 e6       	ldi	r22, 0x65	; 101
    148e:	73 e0       	ldi	r23, 0x03	; 3
    1490:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1494:	66 e0       	ldi	r22, 0x06	; 6
    1496:	c7 01       	movw	r24, r14
    1498:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    149c:	93 e0       	ldi	r25, 0x03	; 3
    149e:	88 ed       	ldi	r24, 0xD8	; 216
    14a0:	08 b6       	in	r0, 0x38	; 56
    14a2:	18 be       	out	0x38, r1	; 56
    14a4:	84 bf       	out	0x34, r24	; 52
    14a6:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    14aa:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    14ae:	81 fd       	sbrc	r24, 1
    14b0:	fc cf       	rjmp	.-8      	; 0x14aa <_ZN9task_user3runEv+0x49c>
    14b2:	08 be       	out	0x38, r0	; 56
    14b4:	ff cf       	rjmp	.-2      	; 0x14b4 <_ZN9task_user3runEv+0x4a6>
    14b6:	f7 01       	movw	r30, r14
    14b8:	86 85       	ldd	r24, Z+14	; 0x0e
    14ba:	97 85       	ldd	r25, Z+15	; 0x0f
    14bc:	a0 89       	ldd	r26, Z+16	; 0x10
    14be:	b1 89       	ldd	r27, Z+17	; 0x11
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	b1 1d       	adc	r27, r1
    14c6:	86 87       	std	Z+14, r24	; 0x0e
    14c8:	97 87       	std	Z+15, r25	; 0x0f
    14ca:	a0 8b       	std	Z+16, r26	; 0x10
    14cc:	b1 8b       	std	Z+17, r27	; 0x11
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 b7 18 	call	0x316e	; 0x316e <vTaskDelay>
    14da:	c3 cd       	rjmp	.-1146   	; 0x1062 <_ZN9task_user3runEv+0x54>

000014dc <_ZN22task_system_controller3runEv>:
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <_ZN22task_system_controller3runEv+0x6>
    14e2:	1f 92       	push	r1
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8c 01       	movw	r16, r24
    14ea:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
    14ee:	69 83       	std	Y+1, r22	; 0x01
    14f0:	7a 83       	std	Y+2, r23	; 0x02
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	f8 01       	movw	r30, r16
    14f8:	86 85       	ldd	r24, Z+14	; 0x0e
    14fa:	97 85       	ldd	r25, Z+15	; 0x0f
    14fc:	a0 89       	ldd	r26, Z+16	; 0x10
    14fe:	b1 89       	ldd	r27, Z+17	; 0x11
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	a1 1d       	adc	r26, r1
    1504:	b1 1d       	adc	r27, r1
    1506:	86 87       	std	Z+14, r24	; 0x0e
    1508:	97 87       	std	Z+15, r25	; 0x0f
    150a:	a0 8b       	std	Z+16, r26	; 0x10
    150c:	b1 8b       	std	Z+17, r27	; 0x11
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	0e 94 4a 18 	call	0x3094	; 0x3094 <vTaskDelayUntil>
    151e:	eb cf       	rjmp	.-42     	; 0x14f6 <_ZN22task_system_controller3runEv+0x1a>

00001520 <_ZN21task_pendulum_encoder3runEv>:
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <_ZN21task_pendulum_encoder3runEv+0x6>
    1526:	1f 92       	push	r1
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	8c 01       	movw	r16, r24
    152e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
    1532:	69 83       	std	Y+1, r22	; 0x01
    1534:	7a 83       	std	Y+2, r23	; 0x02
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	f8 01       	movw	r30, r16
    153c:	86 85       	ldd	r24, Z+14	; 0x0e
    153e:	97 85       	ldd	r25, Z+15	; 0x0f
    1540:	a0 89       	ldd	r26, Z+16	; 0x10
    1542:	b1 89       	ldd	r27, Z+17	; 0x11
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	a1 1d       	adc	r26, r1
    1548:	b1 1d       	adc	r27, r1
    154a:	86 87       	std	Z+14, r24	; 0x0e
    154c:	97 87       	std	Z+15, r25	; 0x0f
    154e:	a0 8b       	std	Z+16, r26	; 0x10
    1550:	b1 8b       	std	Z+17, r27	; 0x11
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	0e 94 4a 18 	call	0x3094	; 0x3094 <vTaskDelayUntil>
    1562:	eb cf       	rjmp	.-42     	; 0x153a <_ZN21task_pendulum_encoder3runEv+0x1a>

00001564 <_ZN18task_motor_encoder3runEv>:
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 d0       	rcall	.+0      	; 0x156a <_ZN18task_motor_encoder3runEv+0x6>
    156a:	1f 92       	push	r1
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8c 01       	movw	r16, r24
    1572:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
    1576:	69 83       	std	Y+1, r22	; 0x01
    1578:	7a 83       	std	Y+2, r23	; 0x02
    157a:	8b 83       	std	Y+3, r24	; 0x03
    157c:	9c 83       	std	Y+4, r25	; 0x04
    157e:	f8 01       	movw	r30, r16
    1580:	86 85       	ldd	r24, Z+14	; 0x0e
    1582:	97 85       	ldd	r25, Z+15	; 0x0f
    1584:	a0 89       	ldd	r26, Z+16	; 0x10
    1586:	b1 89       	ldd	r27, Z+17	; 0x11
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	a1 1d       	adc	r26, r1
    158c:	b1 1d       	adc	r27, r1
    158e:	86 87       	std	Z+14, r24	; 0x0e
    1590:	97 87       	std	Z+15, r25	; 0x0f
    1592:	a0 8b       	std	Z+16, r26	; 0x10
    1594:	b1 8b       	std	Z+17, r27	; 0x11
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	0e 94 4a 18 	call	0x3094	; 0x3094 <vTaskDelayUntil>
    15a6:	eb cf       	rjmp	.-42     	; 0x157e <_ZN18task_motor_encoder3runEv+0x1a>

000015a8 <_ZN18task_motor_command3runEv>:
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <_ZN18task_motor_command3runEv+0x6>
    15ae:	1f 92       	push	r1
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8c 01       	movw	r16, r24
    15b6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
    15ba:	69 83       	std	Y+1, r22	; 0x01
    15bc:	7a 83       	std	Y+2, r23	; 0x02
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	f8 01       	movw	r30, r16
    15c4:	86 85       	ldd	r24, Z+14	; 0x0e
    15c6:	97 85       	ldd	r25, Z+15	; 0x0f
    15c8:	a0 89       	ldd	r26, Z+16	; 0x10
    15ca:	b1 89       	ldd	r27, Z+17	; 0x11
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	a1 1d       	adc	r26, r1
    15d0:	b1 1d       	adc	r27, r1
    15d2:	86 87       	std	Z+14, r24	; 0x0e
    15d4:	97 87       	std	Z+15, r25	; 0x0f
    15d6:	a0 8b       	std	Z+16, r26	; 0x10
    15d8:	b1 8b       	std	Z+17, r27	; 0x11
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	ce 01       	movw	r24, r28
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	0e 94 4a 18 	call	0x3094	; 0x3094 <vTaskDelayUntil>
    15ea:	eb cf       	rjmp	.-42     	; 0x15c2 <_ZN18task_motor_command3runEv+0x1a>

000015ec <_GLOBAL__sub_I_counter>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cc ee       	ldi	r28, 0xEC	; 236
    15f2:	d0 e2       	ldi	r29, 0x20	; 32
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	1b 82       	std	Y+3, r1	; 0x03
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	1c 82       	std	Y+4, r1	; 0x04
    1600:	1e 82       	std	Y+6, r1	; 0x06
    1602:	1f 82       	std	Y+7, r1	; 0x07
    1604:	8a e5       	ldi	r24, 0x5A	; 90
    1606:	90 e2       	ldi	r25, 0x20	; 32
    1608:	88 83       	st	Y, r24
    160a:	99 83       	std	Y+1, r25	; 0x01
    160c:	1e 86       	std	Y+14, r1	; 0x0e
    160e:	1f 86       	std	Y+15, r1	; 0x0f
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	80 e2       	ldi	r24, 0x20	; 32
    1616:	0e 94 78 13 	call	0x26f0	; 0x26f0 <xQueueGenericCreate>
    161a:	88 87       	std	Y+8, r24	; 0x08
    161c:	99 87       	std	Y+9, r25	; 0x09
    161e:	8a e0       	ldi	r24, 0x0A	; 10
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	8a 87       	std	Y+10, r24	; 0x0a
    1628:	9b 87       	std	Y+11, r25	; 0x0b
    162a:	ac 87       	std	Y+12, r26	; 0x0c
    162c:	bd 87       	std	Y+13, r27	; 0x0d
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <__vector_58>:
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	08 b6       	in	r0, 0x38	; 56
    1640:	0f 92       	push	r0
    1642:	18 be       	out	0x38, r1	; 56
    1644:	0b b6       	in	r0, 0x3b	; 59
    1646:	0f 92       	push	r0
    1648:	1b be       	out	0x3b, r1	; 59
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    1656:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    165a:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <rcvE0_buffer>
    165e:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <rcvE0_buffer+0x1>
    1662:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rcvE0_write_index>
    1666:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rcvE0_write_index+0x1>
    166a:	e8 0f       	add	r30, r24
    166c:	f9 1f       	adc	r31, r25
    166e:	20 83       	st	Z, r18
    1670:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rcvE0_write_index>
    1674:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rcvE0_write_index+0x1>
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	84 36       	cpi	r24, 0x64	; 100
    167c:	91 05       	cpc	r25, r1
    167e:	60 f4       	brcc	.+24     	; 0x1698 <__vector_58+0x64>
    1680:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <rcvE0_write_index>
    1684:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <rcvE0_write_index+0x1>
    1688:	20 91 d0 20 	lds	r18, 0x20D0	; 0x8020d0 <rcvE0_read_index>
    168c:	30 91 d1 20 	lds	r19, 0x20D1	; 0x8020d1 <rcvE0_read_index+0x1>
    1690:	82 17       	cp	r24, r18
    1692:	93 07       	cpc	r25, r19
    1694:	f1 f4       	brne	.+60     	; 0x16d2 <__vector_58+0x9e>
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <__vector_58+0x7c>
    1698:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <rcvE0_write_index>
    169c:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <rcvE0_write_index+0x1>
    16a0:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <rcvE0_read_index>
    16a4:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <rcvE0_read_index+0x1>
    16a8:	18 16       	cp	r1, r24
    16aa:	19 06       	cpc	r1, r25
    16ac:	91 f4       	brne	.+36     	; 0x16d2 <__vector_58+0x9e>
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <__vector_58+0x98>
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	84 36       	cpi	r24, 0x64	; 100
    16b4:	91 05       	cpc	r25, r1
    16b6:	28 f4       	brcc	.+10     	; 0x16c2 <__vector_58+0x8e>
    16b8:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <rcvE0_read_index>
    16bc:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <rcvE0_read_index+0x1>
    16c0:	08 c0       	rjmp	.+16     	; 0x16d2 <__vector_58+0x9e>
    16c2:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <rcvE0_read_index>
    16c6:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <rcvE0_read_index+0x1>
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <__vector_58+0x9e>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	f3 cf       	rjmp	.-26     	; 0x16b8 <__vector_58+0x84>
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0b be       	out	0x3b, r0	; 59
    16e2:	0f 90       	pop	r0
    16e4:	08 be       	out	0x38, r0	; 56
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <__vector_91>:
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	08 b6       	in	r0, 0x38	; 56
    16fc:	0f 92       	push	r0
    16fe:	18 be       	out	0x38, r1	; 56
    1700:	0b b6       	in	r0, 0x3b	; 59
    1702:	0f 92       	push	r0
    1704:	1b be       	out	0x3b, r1	; 59
    1706:	2f 93       	push	r18
    1708:	3f 93       	push	r19
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    1716:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <rcvD1_buffer>
    171a:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <rcvD1_buffer+0x1>
    171e:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <rcvD1_write_index>
    1722:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <rcvD1_write_index+0x1>
    1726:	e8 0f       	add	r30, r24
    1728:	f9 1f       	adc	r31, r25
    172a:	20 83       	st	Z, r18
    172c:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <rcvD1_write_index>
    1730:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <rcvD1_write_index+0x1>
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	84 36       	cpi	r24, 0x64	; 100
    1738:	91 05       	cpc	r25, r1
    173a:	60 f4       	brcc	.+24     	; 0x1754 <__vector_91+0x64>
    173c:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <rcvD1_write_index>
    1740:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <rcvD1_write_index+0x1>
    1744:	20 91 d6 20 	lds	r18, 0x20D6	; 0x8020d6 <rcvD1_read_index>
    1748:	30 91 d7 20 	lds	r19, 0x20D7	; 0x8020d7 <rcvD1_read_index+0x1>
    174c:	82 17       	cp	r24, r18
    174e:	93 07       	cpc	r25, r19
    1750:	f1 f4       	brne	.+60     	; 0x178e <__vector_91+0x9e>
    1752:	0c c0       	rjmp	.+24     	; 0x176c <__vector_91+0x7c>
    1754:	10 92 d4 20 	sts	0x20D4, r1	; 0x8020d4 <rcvD1_write_index>
    1758:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <rcvD1_write_index+0x1>
    175c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <rcvD1_read_index>
    1760:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <rcvD1_read_index+0x1>
    1764:	18 16       	cp	r1, r24
    1766:	19 06       	cpc	r1, r25
    1768:	91 f4       	brne	.+36     	; 0x178e <__vector_91+0x9e>
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <__vector_91+0x98>
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	84 36       	cpi	r24, 0x64	; 100
    1770:	91 05       	cpc	r25, r1
    1772:	28 f4       	brcc	.+10     	; 0x177e <__vector_91+0x8e>
    1774:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <rcvD1_read_index>
    1778:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <rcvD1_read_index+0x1>
    177c:	08 c0       	rjmp	.+16     	; 0x178e <__vector_91+0x9e>
    177e:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <rcvD1_read_index>
    1782:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <rcvD1_read_index+0x1>
    1786:	03 c0       	rjmp	.+6      	; 0x178e <__vector_91+0x9e>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	f3 cf       	rjmp	.-26     	; 0x1774 <__vector_91+0x84>
    178e:	ff 91       	pop	r31
    1790:	ef 91       	pop	r30
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0b be       	out	0x3b, r0	; 59
    179e:	0f 90       	pop	r0
    17a0:	08 be       	out	0x38, r0	; 56
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_88>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	08 b6       	in	r0, 0x38	; 56
    17b8:	0f 92       	push	r0
    17ba:	18 be       	out	0x38, r1	; 56
    17bc:	0b b6       	in	r0, 0x3b	; 59
    17be:	0f 92       	push	r0
    17c0:	1b be       	out	0x3b, r1	; 59
    17c2:	2f 93       	push	r18
    17c4:	3f 93       	push	r19
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    17d2:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <rcvD0_buffer>
    17d6:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <rcvD0_buffer+0x1>
    17da:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <rcvC0_write_index>
    17de:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <rcvC0_write_index+0x1>
    17e2:	e8 0f       	add	r30, r24
    17e4:	f9 1f       	adc	r31, r25
    17e6:	20 83       	st	Z, r18
    17e8:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <rcvD0_write_index>
    17ec:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <rcvD0_write_index+0x1>
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	84 36       	cpi	r24, 0x64	; 100
    17f4:	91 05       	cpc	r25, r1
    17f6:	60 f4       	brcc	.+24     	; 0x1810 <__vector_88+0x64>
    17f8:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <rcvD0_write_index>
    17fc:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <rcvD0_write_index+0x1>
    1800:	20 91 dc 20 	lds	r18, 0x20DC	; 0x8020dc <rcvD0_read_index>
    1804:	30 91 dd 20 	lds	r19, 0x20DD	; 0x8020dd <rcvD0_read_index+0x1>
    1808:	82 17       	cp	r24, r18
    180a:	93 07       	cpc	r25, r19
    180c:	f1 f4       	brne	.+60     	; 0x184a <__vector_88+0x9e>
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <__vector_88+0x7c>
    1810:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <rcvD0_write_index>
    1814:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <rcvD0_write_index+0x1>
    1818:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <rcvD0_read_index>
    181c:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <rcvD0_read_index+0x1>
    1820:	18 16       	cp	r1, r24
    1822:	19 06       	cpc	r1, r25
    1824:	91 f4       	brne	.+36     	; 0x184a <__vector_88+0x9e>
    1826:	0e c0       	rjmp	.+28     	; 0x1844 <__vector_88+0x98>
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	84 36       	cpi	r24, 0x64	; 100
    182c:	91 05       	cpc	r25, r1
    182e:	28 f4       	brcc	.+10     	; 0x183a <__vector_88+0x8e>
    1830:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <rcvD0_read_index>
    1834:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <rcvD0_read_index+0x1>
    1838:	08 c0       	rjmp	.+16     	; 0x184a <__vector_88+0x9e>
    183a:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <rcvD0_read_index>
    183e:	10 92 dd 20 	sts	0x20DD, r1	; 0x8020dd <rcvD0_read_index+0x1>
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__vector_88+0x9e>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	f3 cf       	rjmp	.-26     	; 0x1830 <__vector_88+0x84>
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0b be       	out	0x3b, r0	; 59
    185a:	0f 90       	pop	r0
    185c:	08 be       	out	0x38, r0	; 56
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_28>:
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	08 b6       	in	r0, 0x38	; 56
    1874:	0f 92       	push	r0
    1876:	18 be       	out	0x38, r1	; 56
    1878:	0b b6       	in	r0, 0x3b	; 59
    187a:	0f 92       	push	r0
    187c:	1b be       	out	0x3b, r1	; 59
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    188e:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <rcvC1_buffer>
    1892:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <rcvC1_buffer+0x1>
    1896:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <rcvC1_write_index>
    189a:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <rcvC1_write_index+0x1>
    189e:	e8 0f       	add	r30, r24
    18a0:	f9 1f       	adc	r31, r25
    18a2:	20 83       	st	Z, r18
    18a4:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <rcvC1_write_index>
    18a8:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <rcvC1_write_index+0x1>
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	84 36       	cpi	r24, 0x64	; 100
    18b0:	91 05       	cpc	r25, r1
    18b2:	60 f4       	brcc	.+24     	; 0x18cc <__vector_28+0x64>
    18b4:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <rcvC1_write_index>
    18b8:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <rcvC1_write_index+0x1>
    18bc:	20 91 e2 20 	lds	r18, 0x20E2	; 0x8020e2 <rcvC1_read_index>
    18c0:	30 91 e3 20 	lds	r19, 0x20E3	; 0x8020e3 <rcvC1_read_index+0x1>
    18c4:	82 17       	cp	r24, r18
    18c6:	93 07       	cpc	r25, r19
    18c8:	f1 f4       	brne	.+60     	; 0x1906 <__vector_28+0x9e>
    18ca:	0c c0       	rjmp	.+24     	; 0x18e4 <__vector_28+0x7c>
    18cc:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <rcvC1_write_index>
    18d0:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <rcvC1_write_index+0x1>
    18d4:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <rcvC1_read_index>
    18d8:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <rcvC1_read_index+0x1>
    18dc:	18 16       	cp	r1, r24
    18de:	19 06       	cpc	r1, r25
    18e0:	91 f4       	brne	.+36     	; 0x1906 <__vector_28+0x9e>
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <__vector_28+0x98>
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	84 36       	cpi	r24, 0x64	; 100
    18e8:	91 05       	cpc	r25, r1
    18ea:	28 f4       	brcc	.+10     	; 0x18f6 <__vector_28+0x8e>
    18ec:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <rcvC1_read_index>
    18f0:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <rcvC1_read_index+0x1>
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <__vector_28+0x9e>
    18f6:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <rcvC1_read_index>
    18fa:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <rcvC1_read_index+0x1>
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <__vector_28+0x9e>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	f3 cf       	rjmp	.-26     	; 0x18ec <__vector_28+0x84>
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0b be       	out	0x3b, r0	; 59
    1916:	0f 90       	pop	r0
    1918:	08 be       	out	0x38, r0	; 56
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_25>:
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	08 b6       	in	r0, 0x38	; 56
    1930:	0f 92       	push	r0
    1932:	18 be       	out	0x38, r1	; 56
    1934:	0b b6       	in	r0, 0x3b	; 59
    1936:	0f 92       	push	r0
    1938:	1b be       	out	0x3b, r1	; 59
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    194a:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <rcvC0_buffer>
    194e:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <rcvC0_buffer+0x1>
    1952:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <rcvC0_write_index>
    1956:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <rcvC0_write_index+0x1>
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	20 83       	st	Z, r18
    1960:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <rcvC0_write_index>
    1964:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <rcvC0_write_index+0x1>
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	84 36       	cpi	r24, 0x64	; 100
    196c:	91 05       	cpc	r25, r1
    196e:	60 f4       	brcc	.+24     	; 0x1988 <__vector_25+0x64>
    1970:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <rcvC0_write_index>
    1974:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <rcvC0_write_index+0x1>
    1978:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <rcvC0_read_index>
    197c:	30 91 e9 20 	lds	r19, 0x20E9	; 0x8020e9 <rcvC0_read_index+0x1>
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	f1 f4       	brne	.+60     	; 0x19c2 <__vector_25+0x9e>
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <__vector_25+0x7c>
    1988:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <rcvC0_write_index>
    198c:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <rcvC0_write_index+0x1>
    1990:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <rcvC0_read_index>
    1994:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <rcvC0_read_index+0x1>
    1998:	18 16       	cp	r1, r24
    199a:	19 06       	cpc	r1, r25
    199c:	91 f4       	brne	.+36     	; 0x19c2 <__vector_25+0x9e>
    199e:	0e c0       	rjmp	.+28     	; 0x19bc <__vector_25+0x98>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	84 36       	cpi	r24, 0x64	; 100
    19a4:	91 05       	cpc	r25, r1
    19a6:	28 f4       	brcc	.+10     	; 0x19b2 <__vector_25+0x8e>
    19a8:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <rcvC0_read_index>
    19ac:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <rcvC0_read_index+0x1>
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <__vector_25+0x9e>
    19b2:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <rcvC0_read_index>
    19b6:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <rcvC0_read_index+0x1>
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <__vector_25+0x9e>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	f3 cf       	rjmp	.-26     	; 0x19a8 <__vector_25+0x84>
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0b be       	out	0x3b, r0	; 59
    19d2:	0f 90       	pop	r0
    19d4:	08 be       	out	0x38, r0	; 56
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <_ZN8frt_taskC2EPKchjP8emstream>:
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	2a 97       	sbiw	r28, 0x0a	; 10
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	4c 01       	movw	r8, r24
    1a0c:	29 01       	movw	r4, r18
    1a0e:	38 01       	movw	r6, r16
    1a10:	8a e0       	ldi	r24, 0x0A	; 10
    1a12:	90 e2       	ldi	r25, 0x20	; 32
    1a14:	f4 01       	movw	r30, r8
    1a16:	80 83       	st	Z, r24
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	80 81       	ld	r24, Z
    1a1e:	88 23       	and	r24, r24
    1a20:	69 f0       	breq	.+26     	; 0x1a3c <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1a22:	de 01       	movw	r26, r28
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	31 96       	adiw	r30, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1a2c:	99 30       	cpi	r25, 0x09	; 9
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1a30:	9f 5f       	subi	r25, 0xFF	; 255
    1a32:	8d 93       	st	X+, r24
    1a34:	81 91       	ld	r24, Z+
    1a36:	81 11       	cpse	r24, r1
    1a38:	f9 cf       	rjmp	.-14     	; 0x1a2c <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	e1 e0       	ldi	r30, 0x01	; 1
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	ec 0f       	add	r30, r28
    1a44:	fd 1f       	adc	r31, r29
    1a46:	e9 0f       	add	r30, r25
    1a48:	f1 1d       	adc	r31, r1
    1a4a:	10 82       	st	Z, r1
    1a4c:	74 01       	movw	r14, r8
    1a4e:	f2 e0       	ldi	r31, 0x02	; 2
    1a50:	ef 0e       	add	r14, r31
    1a52:	f1 1c       	adc	r15, r1
    1a54:	a1 2c       	mov	r10, r1
    1a56:	b1 2c       	mov	r11, r1
    1a58:	c1 2c       	mov	r12, r1
    1a5a:	d1 2c       	mov	r13, r1
    1a5c:	04 2f       	mov	r16, r20
    1a5e:	94 01       	movw	r18, r8
    1a60:	a2 01       	movw	r20, r4
    1a62:	be 01       	movw	r22, r28
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	88 ef       	ldi	r24, 0xF8	; 248
    1a6a:	97 e0       	ldi	r25, 0x07	; 7
    1a6c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskGenericCreate>
    1a70:	f4 01       	movw	r30, r8
    1a72:	66 82       	std	Z+6, r6	; 0x06
    1a74:	77 82       	std	Z+7, r7	; 0x07
    1a76:	40 86       	std	Z+8, r4	; 0x08
    1a78:	51 86       	std	Z+9, r5	; 0x09
    1a7a:	20 91 cc 20 	lds	r18, 0x20CC	; 0x8020cc <last_created_task_pointer>
    1a7e:	30 91 cd 20 	lds	r19, 0x20CD	; 0x8020cd <last_created_task_pointer+0x1>
    1a82:	24 83       	std	Z+4, r18	; 0x04
    1a84:	35 83       	std	Z+5, r19	; 0x05
    1a86:	80 92 cc 20 	sts	0x20CC, r8	; 0x8020cc <last_created_task_pointer>
    1a8a:	90 92 cd 20 	sts	0x20CD, r9	; 0x8020cd <last_created_task_pointer+0x1>
    1a8e:	14 86       	std	Z+12, r1	; 0x0c
    1a90:	15 86       	std	Z+13, r1	; 0x0d
    1a92:	40 90 66 31 	lds	r4, 0x3166	; 0x803166 <portStackTopForTask>
    1a96:	50 90 67 31 	lds	r5, 0x3167	; 0x803167 <portStackTopForTask+0x1>
    1a9a:	ff ef       	ldi	r31, 0xFF	; 255
    1a9c:	4f 1a       	sub	r4, r31
    1a9e:	5f 0a       	sbc	r5, r31
    1aa0:	40 92 66 31 	sts	0x3166, r4	; 0x803166 <portStackTopForTask>
    1aa4:	50 92 67 31 	sts	0x3167, r5	; 0x803167 <portStackTopForTask+0x1>
    1aa8:	f4 01       	movw	r30, r8
    1aaa:	42 86       	std	Z+10, r4	; 0x0a
    1aac:	53 86       	std	Z+11, r5	; 0x0b
    1aae:	16 86       	std	Z+14, r1	; 0x0e
    1ab0:	17 86       	std	Z+15, r1	; 0x0f
    1ab2:	10 8a       	std	Z+16, r1	; 0x10
    1ab4:	11 8a       	std	Z+17, r1	; 0x11
    1ab6:	61 14       	cp	r6, r1
    1ab8:	71 04       	cpc	r7, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1abc:	44 c0       	rjmp	.+136    	; 0x1b46 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	79 f5       	brne	.+94     	; 0x1b20 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1ac2:	6a e0       	ldi	r22, 0x0A	; 10
    1ac4:	c3 01       	movw	r24, r6
    1ac6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1aca:	7c 01       	movw	r14, r24
    1acc:	6e ef       	ldi	r22, 0xFE	; 254
    1ace:	74 e0       	ldi	r23, 0x04	; 4
    1ad0:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1ad4:	be 01       	movw	r22, r28
    1ad6:	6f 5f       	subi	r22, 0xFF	; 255
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	c7 01       	movw	r24, r14
    1adc:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1ae0:	6a e0       	ldi	r22, 0x0A	; 10
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1ae8:	7c 01       	movw	r14, r24
    1aea:	65 ef       	ldi	r22, 0xF5	; 245
    1aec:	74 e0       	ldi	r23, 0x04	; 4
    1aee:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1af2:	6a e0       	ldi	r22, 0x0A	; 10
    1af4:	c7 01       	movw	r24, r14
    1af6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1afa:	7c 01       	movw	r14, r24
    1afc:	67 ee       	ldi	r22, 0xE7	; 231
    1afe:	74 e0       	ldi	r23, 0x04	; 4
    1b00:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1b04:	63 e0       	ldi	r22, 0x03	; 3
    1b06:	c7 01       	movw	r24, r14
    1b08:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1b0c:	b2 01       	movw	r22, r4
    1b0e:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN8emstreamlsEj>
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1b18:	66 e0       	ldi	r22, 0x06	; 6
    1b1a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1b1e:	13 c0       	rjmp	.+38     	; 0x1b46 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1b20:	6a e0       	ldi	r22, 0x0A	; 10
    1b22:	c3 01       	movw	r24, r6
    1b24:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1b28:	4c 01       	movw	r8, r24
    1b2a:	62 ed       	ldi	r22, 0xD2	; 210
    1b2c:	74 e0       	ldi	r23, 0x04	; 4
    1b2e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1b32:	be 01       	movw	r22, r28
    1b34:	6f 5f       	subi	r22, 0xFF	; 255
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	c4 01       	movw	r24, r8
    1b3a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1b3e:	66 e0       	ldi	r22, 0x06	; 6
    1b40:	c4 01       	movw	r24, r8
    1b42:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1b46:	2a 96       	adiw	r28, 0x0a	; 10
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	ff 90       	pop	r15
    1b56:	ef 90       	pop	r14
    1b58:	df 90       	pop	r13
    1b5a:	cf 90       	pop	r12
    1b5c:	bf 90       	pop	r11
    1b5e:	af 90       	pop	r10
    1b60:	9f 90       	pop	r9
    1b62:	8f 90       	pop	r8
    1b64:	7f 90       	pop	r7
    1b66:	6f 90       	pop	r6
    1b68:	5f 90       	pop	r5
    1b6a:	4f 90       	pop	r4
    1b6c:	08 95       	ret

00001b6e <main>:
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	6e 97       	sbiw	r28, 0x1e	; 30
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	e0 e6       	ldi	r30, 0x60	; 96
    1b8a:	f6 e0       	ldi	r31, 0x06	; 6
    1b8c:	80 e1       	ldi	r24, 0x10	; 16
    1b8e:	81 83       	std	Z+1, r24	; 0x01
    1b90:	85 83       	std	Z+5, r24	; 0x05
    1b92:	f8 94       	cli
    1b94:	e0 e5       	ldi	r30, 0x50	; 80
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	82 60       	ori	r24, 0x02	; 2
    1b9c:	80 83       	st	Z, r24
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	81 ff       	sbrs	r24, 1
    1ba2:	fd cf       	rjmp	.-6      	; 0x1b9e <main+0x30>
    1ba4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1ba8:	9f b7       	in	r25, 0x3f	; 63
    1baa:	9e 8f       	std	Y+30, r25	; 0x1e
    1bac:	f8 94       	cli
    1bae:	1b be       	out	0x3b, r1	; 59
    1bb0:	88 7f       	andi	r24, 0xF8	; 248
    1bb2:	81 60       	ori	r24, 0x01	; 1
    1bb4:	20 e4       	ldi	r18, 0x40	; 64
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	08 ed       	ldi	r16, 0xD8	; 216
    1bbc:	04 bf       	out	0x34, r16	; 52
    1bbe:	80 83       	st	Z, r24
    1bc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc2:	8f bf       	out	0x3f, r24	; 63
    1bc4:	e0 e5       	ldi	r30, 0x50	; 80
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	80 83       	st	Z, r24
    1bce:	9d ef       	ldi	r25, 0xFD	; 253
    1bd0:	88 ed       	ldi	r24, 0xD8	; 216
    1bd2:	08 b6       	in	r0, 0x38	; 56
    1bd4:	18 be       	out	0x38, r1	; 56
    1bd6:	84 bf       	out	0x34, r24	; 52
    1bd8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bdc:	08 be       	out	0x38, r0	; 56
    1bde:	8a e4       	ldi	r24, 0x4A	; 74
    1be0:	90 e2       	ldi	r25, 0x20	; 32
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	8a e0       	ldi	r24, 0x0A	; 10
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	1c 82       	std	Y+4, r1	; 0x04
    1bec:	43 e0       	ldi	r20, 0x03	; 3
    1bee:	4e 83       	std	Y+6, r20	; 0x06
    1bf0:	1d 82       	std	Y+5, r1	; 0x05
    1bf2:	1f 82       	std	Y+7, r1	; 0x07
    1bf4:	18 86       	std	Y+8, r1	; 0x08
    1bf6:	a0 e4       	ldi	r26, 0x40	; 64
    1bf8:	b6 e0       	ldi	r27, 0x06	; 6
    1bfa:	ab 87       	std	Y+11, r26	; 0x0b
    1bfc:	bc 87       	std	Y+12, r27	; 0x0c
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	8d 87       	std	Y+13, r24	; 0x0d
    1c02:	0f 2e       	mov	r0, r31
    1c04:	f7 e0       	ldi	r31, 0x07	; 7
    1c06:	ff 2e       	mov	r15, r31
    1c08:	f0 2d       	mov	r31, r0
    1c0a:	fe 86       	std	Y+14, r15	; 0x0e
    1c0c:	e0 eb       	ldi	r30, 0xB0	; 176
    1c0e:	f8 e0       	ldi	r31, 0x08	; 8
    1c10:	ef 87       	std	Y+15, r30	; 0x0f
    1c12:	f8 8b       	std	Y+16, r31	; 0x10
    1c14:	81 eb       	ldi	r24, 0xB1	; 177
    1c16:	98 e0       	ldi	r25, 0x08	; 8
    1c18:	89 8b       	std	Y+17, r24	; 0x11
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	84 eb       	ldi	r24, 0xB4	; 180
    1c1e:	98 e0       	ldi	r25, 0x08	; 8
    1c20:	8b 8b       	std	Y+19, r24	; 0x13
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c26:	14 96       	adiw	r26, 0x04	; 4
    1c28:	5c 91       	ld	r21, X
    1c2a:	14 97       	sbiw	r26, 0x04	; 4
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	bc 01       	movw	r22, r24
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <main+0xca>
    1c34:	66 0f       	add	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	2a 95       	dec	r18
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <main+0xc6>
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	25 2b       	or	r18, r21
    1c40:	14 96       	adiw	r26, 0x04	; 4
    1c42:	2c 93       	st	X, r18
    1c44:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c46:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c48:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c4a:	5c 91       	ld	r21, X
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <main+0xe6>
    1c50:	66 0f       	add	r22, r22
    1c52:	77 1f       	adc	r23, r23
    1c54:	2a 95       	dec	r18
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <main+0xe2>
    1c58:	9b 01       	movw	r18, r22
    1c5a:	25 2b       	or	r18, r21
    1c5c:	2c 93       	st	X, r18
    1c5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c60:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c62:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c64:	2c 91       	ld	r18, X
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <main+0xfe>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	3a 95       	dec	r19
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <main+0xfa>
    1c70:	80 95       	com	r24
    1c72:	90 95       	com	r25
    1c74:	82 23       	and	r24, r18
    1c76:	8c 93       	st	X, r24
    1c78:	80 e1       	ldi	r24, 0x10	; 16
    1c7a:	83 83       	std	Z+3, r24	; 0x03
    1c7c:	45 83       	std	Z+5, r20	; 0x05
    1c7e:	80 ef       	ldi	r24, 0xF0	; 240
    1c80:	87 83       	std	Z+7, r24	; 0x07
    1c82:	81 e2       	ldi	r24, 0x21	; 33
    1c84:	86 83       	std	Z+6, r24	; 0x06
    1c86:	88 e1       	ldi	r24, 0x18	; 24
    1c88:	84 83       	std	Z+4, r24	; 0x04
    1c8a:	80 e8       	ldi	r24, 0x80	; 128
    1c8c:	8e 8b       	std	Y+22, r24	; 0x16
    1c8e:	80 e4       	ldi	r24, 0x40	; 64
    1c90:	8f 8b       	std	Y+23, r24	; 0x17
    1c92:	80 e2       	ldi	r24, 0x20	; 32
    1c94:	8d 8b       	std	Y+21, r24	; 0x15
    1c96:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c98:	f8 89       	ldd	r31, Y+16	; 0x10
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 81       	ld	r24, Z
    1c9e:	82 e1       	ldi	r24, 0x12	; 18
    1ca0:	90 e2       	ldi	r25, 0x20	; 32
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	84 ee       	ldi	r24, 0xE4	; 228
    1ca8:	90 e2       	ldi	r25, 0x20	; 32
    1caa:	88 8f       	std	Y+24, r24	; 0x18
    1cac:	99 8f       	std	Y+25, r25	; 0x19
    1cae:	82 ee       	ldi	r24, 0xE2	; 226
    1cb0:	90 e2       	ldi	r25, 0x20	; 32
    1cb2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cb4:	9b 8f       	std	Y+27, r25	; 0x1b
    1cb6:	80 ee       	ldi	r24, 0xE0	; 224
    1cb8:	90 e2       	ldi	r25, 0x20	; 32
    1cba:	8c 8f       	std	Y+28, r24	; 0x1c
    1cbc:	9d 8f       	std	Y+29, r25	; 0x1d
    1cbe:	84 e6       	ldi	r24, 0x64	; 100
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1cc6:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <rcvC1_buffer>
    1cca:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <rcvC1_buffer+0x1>
    1cce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cd0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1cd2:	10 82       	st	Z, r1
    1cd4:	11 82       	std	Z+1, r1	; 0x01
    1cd6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cd8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1cda:	10 82       	st	Z, r1
    1cdc:	11 82       	std	Z+1, r1	; 0x01
    1cde:	67 e0       	ldi	r22, 0x07	; 7
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1ce8:	6c 01       	movw	r12, r24
    1cea:	6e e6       	ldi	r22, 0x6E	; 110
    1cec:	70 e2       	ldi	r23, 0x20	; 32
    1cee:	0e 94 80 03 	call	0x700	; 0x700 <_ZN8emstream4putsEPKc>
    1cf2:	66 e0       	ldi	r22, 0x06	; 6
    1cf4:	c6 01       	movw	r24, r12
    1cf6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	0e 94 39 03 	call	0x672	; 0x672 <_ZN8emstreamlsE15ser_manipulator>
    1d00:	82 e1       	ldi	r24, 0x12	; 18
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1d08:	6c 01       	movw	r12, r24
    1d0a:	8e 01       	movw	r16, r28
    1d0c:	0f 5f       	subi	r16, 0xFF	; 255
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	24 e0       	ldi	r18, 0x04	; 4
    1d12:	31 e0       	ldi	r19, 0x01	; 1
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	6d e8       	ldi	r22, 0x8D	; 141
    1d18:	70 e2       	ldi	r23, 0x20	; 32
    1d1a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1d1e:	82 e2       	ldi	r24, 0x22	; 34
    1d20:	90 e2       	ldi	r25, 0x20	; 32
    1d22:	f6 01       	movw	r30, r12
    1d24:	80 83       	st	Z, r24
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	83 e1       	ldi	r24, 0x13	; 19
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1d30:	ee 24       	eor	r14, r14
    1d32:	e3 94       	inc	r14
    1d34:	24 e0       	ldi	r18, 0x04	; 4
    1d36:	31 e0       	ldi	r19, 0x01	; 1
    1d38:	44 e0       	ldi	r20, 0x04	; 4
    1d3a:	65 e9       	ldi	r22, 0x95	; 149
    1d3c:	70 e2       	ldi	r23, 0x20	; 32
    1d3e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN17task_limit_switchC1EPKchjP8emstreamh>
    1d42:	83 e1       	ldi	r24, 0x13	; 19
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1d4a:	68 94       	set
    1d4c:	ee 24       	eor	r14, r14
    1d4e:	e2 f8       	bld	r14, 2
    1d50:	24 e0       	ldi	r18, 0x04	; 4
    1d52:	31 e0       	ldi	r19, 0x01	; 1
    1d54:	44 e0       	ldi	r20, 0x04	; 4
    1d56:	6c e9       	ldi	r22, 0x9C	; 156
    1d58:	70 e2       	ldi	r23, 0x20	; 32
    1d5a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN17task_limit_switchC1EPKchjP8emstreamh>
    1d5e:	82 e1       	ldi	r24, 0x12	; 18
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1d66:	6c 01       	movw	r12, r24
    1d68:	24 e0       	ldi	r18, 0x04	; 4
    1d6a:	31 e0       	ldi	r19, 0x01	; 1
    1d6c:	44 e0       	ldi	r20, 0x04	; 4
    1d6e:	64 ea       	ldi	r22, 0xA4	; 164
    1d70:	70 e2       	ldi	r23, 0x20	; 32
    1d72:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1d76:	8a e2       	ldi	r24, 0x2A	; 42
    1d78:	90 e2       	ldi	r25, 0x20	; 32
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	82 e1       	ldi	r24, 0x12	; 18
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1d88:	6c 01       	movw	r12, r24
    1d8a:	24 e0       	ldi	r18, 0x04	; 4
    1d8c:	31 e0       	ldi	r19, 0x01	; 1
    1d8e:	43 e0       	ldi	r20, 0x03	; 3
    1d90:	6b ea       	ldi	r22, 0xAB	; 171
    1d92:	70 e2       	ldi	r23, 0x20	; 32
    1d94:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1d98:	82 e3       	ldi	r24, 0x32	; 50
    1d9a:	90 e2       	ldi	r25, 0x20	; 32
    1d9c:	f6 01       	movw	r30, r12
    1d9e:	80 83       	st	Z, r24
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	82 e1       	ldi	r24, 0x12	; 18
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1daa:	6c 01       	movw	r12, r24
    1dac:	24 e0       	ldi	r18, 0x04	; 4
    1dae:	31 e0       	ldi	r19, 0x01	; 1
    1db0:	42 e0       	ldi	r20, 0x02	; 2
    1db2:	62 eb       	ldi	r22, 0xB2	; 178
    1db4:	70 e2       	ldi	r23, 0x20	; 32
    1db6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1dba:	8a e3       	ldi	r24, 0x3A	; 58
    1dbc:	90 e2       	ldi	r25, 0x20	; 32
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	82 e1       	ldi	r24, 0x12	; 18
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    1dcc:	6c 01       	movw	r12, r24
    1dce:	24 e0       	ldi	r18, 0x04	; 4
    1dd0:	31 e0       	ldi	r19, 0x01	; 1
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	6a eb       	ldi	r22, 0xBA	; 186
    1dd6:	70 e2       	ldi	r23, 0x20	; 32
    1dd8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1ddc:	82 e4       	ldi	r24, 0x42	; 66
    1dde:	90 e2       	ldi	r25, 0x20	; 32
    1de0:	f6 01       	movw	r30, r12
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1dea:	78 94       	sei
    1dec:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <vTaskStartScheduler>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	6e 96       	adiw	r28, 0x1e	; 30
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	08 95       	ret

00001e0c <_ZN17task_limit_switch3runEv>:
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
}


void task_limit_switch::run(void) {
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <_ZN17task_limit_switch3runEv+0x6>
    1e12:	1f 92       	push	r1
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
    1e1a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskGetTickCount>
    1e1e:	69 83       	std	Y+1, r22	; 0x01
    1e20:	7a 83       	std	Y+2, r23	; 0x02
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	9c 83       	std	Y+4, r25	; 0x04

	PORTD.DIR |= bit_mask;
    1e26:	e0 e6       	ldi	r30, 0x60	; 96
    1e28:	f6 e0       	ldi	r31, 0x06	; 6
    1e2a:	90 81       	ld	r25, Z
    1e2c:	d8 01       	movw	r26, r16
    1e2e:	52 96       	adiw	r26, 0x12	; 18
    1e30:	8c 91       	ld	r24, X
    1e32:	52 97       	sbiw	r26, 0x12	; 18
    1e34:	89 2b       	or	r24, r25
    1e36:	80 83       	st	Z, r24
	PORTD.OUT |= bit_mask;
    1e38:	94 81       	ldd	r25, Z+4	; 0x04
    1e3a:	52 96       	adiw	r26, 0x12	; 18
    1e3c:	8c 91       	ld	r24, X
    1e3e:	52 97       	sbiw	r26, 0x12	; 18
    1e40:	89 2b       	or	r24, r25
    1e42:	84 83       	std	Z+4, r24	; 0x04
	
	if (bit_mask == PIN0_bm) {
    1e44:	52 96       	adiw	r26, 0x12	; 18
    1e46:	8c 91       	ld	r24, X
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	61 f4       	brne	.+24     	; 0x1e64 <_ZN17task_limit_switch3runEv+0x58>
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
    1e4c:	88 e1       	ldi	r24, 0x18	; 24
    1e4e:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f8 e6       	ldi	r31, 0x68	; 104
    1e56:	ef 2e       	mov	r14, r31
    1e58:	f6 e0       	ldi	r31, 0x06	; 6
    1e5a:	ff 2e       	mov	r15, r31
    1e5c:	f0 2d       	mov	r31, r0
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
    1e5e:	dd 24       	eor	r13, r13
    1e60:	d3 94       	inc	r13
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <_ZN17task_limit_switch3runEv+0x64>
	PORTD.OUT |= bit_mask;
	
	if (bit_mask == PIN0_bm) {
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
	}
	else if (bit_mask == PIN2_bm) {
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	a9 f7       	brne	.-22     	; 0x1e52 <_ZN17task_limit_switch3runEv+0x46>
		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
    1e68:	88 e1       	ldi	r24, 0x18	; 24
    1e6a:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    1e6e:	f1 cf       	rjmp	.-30     	; 0x1e52 <_ZN17task_limit_switch3runEv+0x46>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
    1e70:	f7 01       	movw	r30, r14
    1e72:	80 81       	ld	r24, Z
    1e74:	80 fd       	sbrc	r24, 0
    1e76:	0b c0       	rjmp	.+22     	; 0x1e8e <_ZN17task_limit_switch3runEv+0x82>
				leftLimit = true;
				leftLimitSwitch->put(leftLimit);
    1e78:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <__data_end>
    1e7c:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <__data_end+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	0f 92       	push	r0
			the_data = new_data;
    1e86:	d0 82       	st	Z, r13
			portEXIT_CRITICAL ();
    1e88:	0f 90       	pop	r0
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	0a c0       	rjmp	.+20     	; 0x1ea2 <_ZN17task_limit_switch3runEv+0x96>
		}
		else {
			leftLimit = false;
			leftLimitSwitch->put(leftLimit);
    1e8e:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <__data_end>
    1e92:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <__data_end+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	0f 92       	push	r0
			the_data = new_data;
    1e9c:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
		}

		if (!(PORTD_IN & PIN2_bm)) {				// check whether limit is pressed (pin D1 is high)
    1ea2:	d7 01       	movw	r26, r14
    1ea4:	8c 91       	ld	r24, X
    1ea6:	82 fd       	sbrc	r24, 2
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <_ZN17task_limit_switch3runEv+0xb4>
			rightLimit = true;
			rightLimitSwitch->put(rightLimit);
    1eaa:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <rightLimitSwitch>
    1eae:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	0f 92       	push	r0
			the_data = new_data;
    1eb8:	d0 82       	st	Z, r13
			portEXIT_CRITICAL ();
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <_ZN17task_limit_switch3runEv+0xc8>

		}
		else {
			rightLimit = false;
			rightLimitSwitch->put(rightLimit);
    1ec0:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <rightLimitSwitch>
    1ec4:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	0f 92       	push	r0
			the_data = new_data;
    1ece:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
		}
		*/
		
	
		// Increment counter for debugging
		runs++;
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ed8:	97 85       	ldd	r25, Z+15	; 0x0f
    1eda:	a0 89       	ldd	r26, Z+16	; 0x10
    1edc:	b1 89       	ldd	r27, Z+17	; 0x11
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	b1 1d       	adc	r27, r1
    1ee4:	86 87       	std	Z+14, r24	; 0x0e
    1ee6:	97 87       	std	Z+15, r25	; 0x0f
    1ee8:	a0 8b       	std	Z+16, r26	; 0x10
    1eea:	b1 8b       	std	Z+17, r27	; 0x11
		 *                    delay so as to get precise, regular timing
		 *  @param interval The duration of the delay interval in RTOS ticks
		 */
		void delay_from_to (portTickType& from_ticks, portTickType interval)
		{
			vTaskDelayUntil (&from_ticks, interval);
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	0e 94 4a 18 	call	0x3094	; 0x3094 <vTaskDelayUntil>
    1efc:	b9 cf       	rjmp	.-142    	; 0x1e70 <_ZN17task_limit_switch3runEv+0x64>

00001efe <_ZN17task_limit_switchC1EPKchjP8emstreamh>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_limit_switch.h"               // Template

task_limit_switch::task_limit_switch (
    1efe:	ef 92       	push	r14
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	ec 01       	movw	r28, r24
	size_t a_stack_size,
	emstream* p_ser_dev,
	uint8_t a_bit_mask
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
    1f0a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_ZN8frt_taskC2EPKchjP8emstream>
    1f0e:	8a e6       	ldi	r24, 0x6A	; 106
    1f10:	90 e2       	ldi	r25, 0x20	; 32
    1f12:	88 83       	st	Y, r24
    1f14:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
    1f16:	ea 8a       	std	Y+18, r14	; 0x12
}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ef 90       	pop	r14
    1f22:	08 95       	ret

00001f24 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1f2e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1f32:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <xHeapHasBeenInitialised.4150>
    1f36:	81 11       	cpse	r24, r1
    1f38:	1d c0       	rjmp	.+58     	; 0x1f74 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1f3a:	a1 e0       	ldi	r26, 0x01	; 1
    1f3c:	b1 e2       	ldi	r27, 0x21	; 33
    1f3e:	e5 e0       	ldi	r30, 0x05	; 5
    1f40:	f1 e2       	ldi	r31, 0x21	; 33
    1f42:	ed 93       	st	X+, r30
    1f44:	fc 93       	st	X, r31
    1f46:	11 97       	sbiw	r26, 0x01	; 1
    1f48:	12 96       	adiw	r26, 0x02	; 2
    1f4a:	1d 92       	st	X+, r1
    1f4c:	1c 92       	st	X, r1
    1f4e:	13 97       	sbiw	r26, 0x03	; 3
    1f50:	ad ef       	ldi	r26, 0xFD	; 253
    1f52:	b0 e2       	ldi	r27, 0x20	; 32
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	9f e0       	ldi	r25, 0x0F	; 15
    1f58:	12 96       	adiw	r26, 0x02	; 2
    1f5a:	8d 93       	st	X+, r24
    1f5c:	9c 93       	st	X, r25
    1f5e:	13 97       	sbiw	r26, 0x03	; 3
    1f60:	1d 92       	st	X+, r1
    1f62:	1c 92       	st	X, r1
    1f64:	11 97       	sbiw	r26, 0x01	; 1
    1f66:	82 83       	std	Z+2, r24	; 0x02
    1f68:	93 83       	std	Z+3, r25	; 0x03
    1f6a:	a0 83       	st	Z, r26
    1f6c:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1f74:	20 97       	sbiw	r28, 0x00	; 0
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <pvPortMalloc+0x56>
    1f78:	5f c0       	rjmp	.+190    	; 0x2038 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1f7a:	9e 01       	movw	r18, r28
    1f7c:	2b 5f       	subi	r18, 0xFB	; 251
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    1f80:	24 96       	adiw	r28, 0x04	; 4
    1f82:	ce 3f       	cpi	r28, 0xFE	; 254
    1f84:	df 40       	sbci	r29, 0x0F	; 15
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <pvPortMalloc+0x66>
    1f88:	5a c0       	rjmp	.+180    	; 0x203e <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1f8a:	e0 91 01 21 	lds	r30, 0x2101	; 0x802101 <xStart>
    1f8e:	f0 91 02 21 	lds	r31, 0x2102	; 0x802102 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1f92:	a1 e0       	ldi	r26, 0x01	; 1
    1f94:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <pvPortMalloc+0x78>
    1f98:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    1f9a:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	82 17       	cp	r24, r18
    1fa2:	93 07       	cpc	r25, r19
    1fa4:	20 f4       	brcc	.+8      	; 0x1fae <pvPortMalloc+0x8a>
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	a9 f7       	brne	.-22     	; 0x1f98 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1fae:	c0 e2       	ldi	r28, 0x20	; 32
    1fb0:	ed 3f       	cpi	r30, 0xFD	; 253
    1fb2:	fc 07       	cpc	r31, r28
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <pvPortMalloc+0x94>
    1fb6:	46 c0       	rjmp	.+140    	; 0x2044 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1fb8:	cd 91       	ld	r28, X+
    1fba:	dc 91       	ld	r29, X
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	0b 5f       	subi	r16, 0xFB	; 251
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 81       	ldd	r25, Z+1	; 0x01
    1fc8:	8d 93       	st	X+, r24
    1fca:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	82 1b       	sub	r24, r18
    1fd2:	93 0b       	sbc	r25, r19
    1fd4:	8b 30       	cpi	r24, 0x0B	; 11
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	10 f1       	brcs	.+68     	; 0x201e <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    1fda:	bf 01       	movw	r22, r30
    1fdc:	62 0f       	add	r22, r18
    1fde:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1fe0:	db 01       	movw	r26, r22
    1fe2:	12 96       	adiw	r26, 0x02	; 2
    1fe4:	8d 93       	st	X+, r24
    1fe6:	9c 93       	st	X, r25
    1fe8:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    1fea:	22 83       	std	Z+2, r18	; 0x02
    1fec:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1fee:	12 96       	adiw	r26, 0x02	; 2
    1ff0:	4d 91       	ld	r20, X+
    1ff2:	5c 91       	ld	r21, X
    1ff4:	13 97       	sbiw	r26, 0x03	; 3
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	91 e2       	ldi	r25, 0x21	; 33
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <pvPortMalloc+0xda>
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	ec 01       	movw	r28, r24
    2000:	a8 81       	ld	r26, Y
    2002:	b9 81       	ldd	r27, Y+1	; 0x01
    2004:	12 96       	adiw	r26, 0x02	; 2
    2006:	2d 91       	ld	r18, X+
    2008:	3c 91       	ld	r19, X
    200a:	13 97       	sbiw	r26, 0x03	; 3
    200c:	24 17       	cp	r18, r20
    200e:	35 07       	cpc	r19, r21
    2010:	a8 f3       	brcs	.-22     	; 0x1ffc <pvPortMalloc+0xd8>
    2012:	eb 01       	movw	r28, r22
    2014:	a8 83       	st	Y, r26
    2016:	b9 83       	std	Y+1, r27	; 0x01
    2018:	dc 01       	movw	r26, r24
    201a:	6d 93       	st	X+, r22
    201c:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    201e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2022:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2026:	22 81       	ldd	r18, Z+2	; 0x02
    2028:	33 81       	ldd	r19, Z+3	; 0x03
    202a:	82 1b       	sub	r24, r18
    202c:	93 0b       	sbc	r25, r19
    202e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2032:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <pvPortMalloc+0x124>
    203e:	00 e0       	ldi	r16, 0x00	; 0
    2040:	10 e0       	ldi	r17, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <pvPortMalloc+0x124>
    2044:	00 e0       	ldi	r16, 0x00	; 0
    2046:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2048:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    204c:	c8 01       	movw	r24, r16
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	41 f1       	breq	.+80     	; 0x20b4 <vPortFree+0x5c>
    2064:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2066:	8c 01       	movw	r16, r24
    2068:	05 50       	subi	r16, 0x05	; 5
    206a:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    206c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    2070:	f8 01       	movw	r30, r16
    2072:	42 81       	ldd	r20, Z+2	; 0x02
    2074:	53 81       	ldd	r21, Z+3	; 0x03
    2076:	a1 e0       	ldi	r26, 0x01	; 1
    2078:	b1 e2       	ldi	r27, 0x21	; 33
    207a:	01 c0       	rjmp	.+2      	; 0x207e <vPortFree+0x26>
    207c:	df 01       	movw	r26, r30
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	11 97       	sbiw	r26, 0x01	; 1
    2084:	22 81       	ldd	r18, Z+2	; 0x02
    2086:	33 81       	ldd	r19, Z+3	; 0x03
    2088:	24 17       	cp	r18, r20
    208a:	35 07       	cpc	r19, r21
    208c:	b8 f3       	brcs	.-18     	; 0x207c <vPortFree+0x24>
    208e:	25 97       	sbiw	r28, 0x05	; 5
    2090:	e8 83       	st	Y, r30
    2092:	f9 83       	std	Y+1, r31	; 0x01
    2094:	0d 93       	st	X+, r16
    2096:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2098:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    209c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	9b 81       	ldd	r25, Y+3	; 0x03
    20a4:	82 0f       	add	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    20ac:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    20b0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
	}
}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	08 95       	ret

000020be <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    20be:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    20c2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    20c6:	08 95       	ret

000020c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    20c8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    20ca:	03 96       	adiw	r24, 0x03	; 3
    20cc:	81 83       	std	Z+1, r24	; 0x01
    20ce:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    20d0:	4f ef       	ldi	r20, 0xFF	; 255
    20d2:	5f ef       	ldi	r21, 0xFF	; 255
    20d4:	ba 01       	movw	r22, r20
    20d6:	43 83       	std	Z+3, r20	; 0x03
    20d8:	54 83       	std	Z+4, r21	; 0x04
    20da:	65 83       	std	Z+5, r22	; 0x05
    20dc:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    20de:	87 83       	std	Z+7, r24	; 0x07
    20e0:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    20e2:	81 87       	std	Z+9, r24	; 0x09
    20e4:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    20e6:	10 82       	st	Z, r1
    20e8:	08 95       	ret

000020ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    20ea:	fc 01       	movw	r30, r24
    20ec:	12 86       	std	Z+10, r1	; 0x0a
    20ee:	13 86       	std	Z+11, r1	; 0x0b
    20f0:	08 95       	ret

000020f2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	fc 01       	movw	r30, r24
    20f8:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    20fa:	21 81       	ldd	r18, Z+1	; 0x01
    20fc:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    20fe:	e9 01       	movw	r28, r18
    2100:	8c 81       	ldd	r24, Y+4	; 0x04
    2102:	9d 81       	ldd	r25, Y+5	; 0x05
    2104:	14 96       	adiw	r26, 0x04	; 4
    2106:	8d 93       	st	X+, r24
    2108:	9c 93       	st	X, r25
    210a:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    210c:	81 81       	ldd	r24, Z+1	; 0x01
    210e:	92 81       	ldd	r25, Z+2	; 0x02
    2110:	16 96       	adiw	r26, 0x06	; 6
    2112:	8d 93       	st	X+, r24
    2114:	9c 93       	st	X, r25
    2116:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	ec 01       	movw	r28, r24
    211e:	6e 83       	std	Y+6, r22	; 0x06
    2120:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2122:	e9 01       	movw	r28, r18
    2124:	6c 83       	std	Y+4, r22	; 0x04
    2126:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2128:	61 83       	std	Z+1, r22	; 0x01
    212a:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    212c:	1a 96       	adiw	r26, 0x0a	; 10
    212e:	ed 93       	st	X+, r30
    2130:	fc 93       	st	X, r31
    2132:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2134:	80 81       	ld	r24, Z
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 83       	st	Z, r24
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    214a:	08 81       	ld	r16, Y
    214c:	19 81       	ldd	r17, Y+1	; 0x01
    214e:	2a 81       	ldd	r18, Y+2	; 0x02
    2150:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2152:	0f 3f       	cpi	r16, 0xFF	; 255
    2154:	4f ef       	ldi	r20, 0xFF	; 255
    2156:	14 07       	cpc	r17, r20
    2158:	24 07       	cpc	r18, r20
    215a:	34 07       	cpc	r19, r20
    215c:	31 f4       	brne	.+12     	; 0x216a <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    215e:	dc 01       	movw	r26, r24
    2160:	19 96       	adiw	r26, 0x09	; 9
    2162:	ed 91       	ld	r30, X+
    2164:	fc 91       	ld	r31, X
    2166:	1a 97       	sbiw	r26, 0x0a	; 10
    2168:	1f c0       	rjmp	.+62     	; 0x21a8 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    216a:	fc 01       	movw	r30, r24
    216c:	33 96       	adiw	r30, 0x03	; 3
    216e:	dc 01       	movw	r26, r24
    2170:	17 96       	adiw	r26, 0x07	; 7
    2172:	4d 91       	ld	r20, X+
    2174:	5c 91       	ld	r21, X
    2176:	18 97       	sbiw	r26, 0x08	; 8
    2178:	da 01       	movw	r26, r20
    217a:	4d 91       	ld	r20, X+
    217c:	5d 91       	ld	r21, X+
    217e:	6d 91       	ld	r22, X+
    2180:	7c 91       	ld	r23, X
    2182:	04 17       	cp	r16, r20
    2184:	15 07       	cpc	r17, r21
    2186:	26 07       	cpc	r18, r22
    2188:	37 07       	cpc	r19, r23
    218a:	70 f0       	brcs	.+28     	; 0x21a8 <vListInsert+0x68>
    218c:	04 80       	ldd	r0, Z+4	; 0x04
    218e:	f5 81       	ldd	r31, Z+5	; 0x05
    2190:	e0 2d       	mov	r30, r0
    2192:	a4 81       	ldd	r26, Z+4	; 0x04
    2194:	b5 81       	ldd	r27, Z+5	; 0x05
    2196:	4d 91       	ld	r20, X+
    2198:	5d 91       	ld	r21, X+
    219a:	6d 91       	ld	r22, X+
    219c:	7c 91       	ld	r23, X
    219e:	04 17       	cp	r16, r20
    21a0:	15 07       	cpc	r17, r21
    21a2:	26 07       	cpc	r18, r22
    21a4:	37 07       	cpc	r19, r23
    21a6:	90 f7       	brcc	.-28     	; 0x218c <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    21a8:	a4 81       	ldd	r26, Z+4	; 0x04
    21aa:	b5 81       	ldd	r27, Z+5	; 0x05
    21ac:	ac 83       	std	Y+4, r26	; 0x04
    21ae:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    21b0:	16 96       	adiw	r26, 0x06	; 6
    21b2:	cd 93       	st	X+, r28
    21b4:	dc 93       	st	X, r29
    21b6:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    21b8:	ee 83       	std	Y+6, r30	; 0x06
    21ba:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    21bc:	c4 83       	std	Z+4, r28	; 0x04
    21be:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    21c0:	8a 87       	std	Y+10, r24	; 0x0a
    21c2:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    21c4:	fc 01       	movw	r30, r24
    21c6:	20 81       	ld	r18, Z
    21c8:	2f 5f       	subi	r18, 0xFF	; 255
    21ca:	20 83       	st	Z, r18
}
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    21d6:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    21d8:	a4 81       	ldd	r26, Z+4	; 0x04
    21da:	b5 81       	ldd	r27, Z+5	; 0x05
    21dc:	86 81       	ldd	r24, Z+6	; 0x06
    21de:	97 81       	ldd	r25, Z+7	; 0x07
    21e0:	16 96       	adiw	r26, 0x06	; 6
    21e2:	8d 93       	st	X+, r24
    21e4:	9c 93       	st	X, r25
    21e6:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    21e8:	a6 81       	ldd	r26, Z+6	; 0x06
    21ea:	b7 81       	ldd	r27, Z+7	; 0x07
    21ec:	84 81       	ldd	r24, Z+4	; 0x04
    21ee:	95 81       	ldd	r25, Z+5	; 0x05
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	8d 93       	st	X+, r24
    21f4:	9c 93       	st	X, r25
    21f6:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    21f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    21fa:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    21fc:	11 96       	adiw	r26, 0x01	; 1
    21fe:	8d 91       	ld	r24, X+
    2200:	9c 91       	ld	r25, X
    2202:	12 97       	sbiw	r26, 0x02	; 2
    2204:	e8 17       	cp	r30, r24
    2206:	f9 07       	cpc	r31, r25
    2208:	31 f4       	brne	.+12     	; 0x2216 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    220a:	86 81       	ldd	r24, Z+6	; 0x06
    220c:	97 81       	ldd	r25, Z+7	; 0x07
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	8d 93       	st	X+, r24
    2212:	9c 93       	st	X, r25
    2214:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2216:	12 86       	std	Z+10, r1	; 0x0a
    2218:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    221a:	8c 91       	ld	r24, X
    221c:	81 50       	subi	r24, 0x01	; 1
    221e:	8c 93       	st	X, r24
    2220:	08 95       	ret

00002222 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2222:	80 93 66 31 	sts	0x3166, r24	; 0x803166 <portStackTopForTask>
    2226:	90 93 67 31 	sts	0x3167, r25	; 0x803167 <portStackTopForTask+0x1>
    222a:	31 e1       	ldi	r19, 0x11	; 17
    222c:	fc 01       	movw	r30, r24
    222e:	30 83       	st	Z, r19
    2230:	31 97       	sbiw	r30, 0x01	; 1
    2232:	22 e2       	ldi	r18, 0x22	; 34
    2234:	20 83       	st	Z, r18
    2236:	31 97       	sbiw	r30, 0x01	; 1
    2238:	a3 e3       	ldi	r26, 0x33	; 51
    223a:	a0 83       	st	Z, r26
    223c:	31 97       	sbiw	r30, 0x01	; 1
    223e:	60 83       	st	Z, r22
    2240:	31 97       	sbiw	r30, 0x01	; 1
    2242:	70 83       	st	Z, r23
    2244:	31 97       	sbiw	r30, 0x01	; 1
    2246:	10 82       	st	Z, r1
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	10 82       	st	Z, r1
    224c:	31 97       	sbiw	r30, 0x01	; 1
    224e:	60 e8       	ldi	r22, 0x80	; 128
    2250:	60 83       	st	Z, r22
    2252:	31 97       	sbiw	r30, 0x01	; 1
    2254:	10 82       	st	Z, r1
    2256:	31 97       	sbiw	r30, 0x01	; 1
    2258:	10 82       	st	Z, r1
    225a:	31 97       	sbiw	r30, 0x01	; 1
    225c:	10 82       	st	Z, r1
    225e:	31 97       	sbiw	r30, 0x01	; 1
    2260:	62 e0       	ldi	r22, 0x02	; 2
    2262:	60 83       	st	Z, r22
    2264:	31 97       	sbiw	r30, 0x01	; 1
    2266:	63 e0       	ldi	r22, 0x03	; 3
    2268:	60 83       	st	Z, r22
    226a:	31 97       	sbiw	r30, 0x01	; 1
    226c:	64 e0       	ldi	r22, 0x04	; 4
    226e:	60 83       	st	Z, r22
    2270:	31 97       	sbiw	r30, 0x01	; 1
    2272:	65 e0       	ldi	r22, 0x05	; 5
    2274:	60 83       	st	Z, r22
    2276:	31 97       	sbiw	r30, 0x01	; 1
    2278:	66 e0       	ldi	r22, 0x06	; 6
    227a:	60 83       	st	Z, r22
    227c:	31 97       	sbiw	r30, 0x01	; 1
    227e:	67 e0       	ldi	r22, 0x07	; 7
    2280:	60 83       	st	Z, r22
    2282:	31 97       	sbiw	r30, 0x01	; 1
    2284:	68 e0       	ldi	r22, 0x08	; 8
    2286:	60 83       	st	Z, r22
    2288:	31 97       	sbiw	r30, 0x01	; 1
    228a:	69 e0       	ldi	r22, 0x09	; 9
    228c:	60 83       	st	Z, r22
    228e:	31 97       	sbiw	r30, 0x01	; 1
    2290:	60 e1       	ldi	r22, 0x10	; 16
    2292:	60 83       	st	Z, r22
    2294:	31 97       	sbiw	r30, 0x01	; 1
    2296:	30 83       	st	Z, r19
    2298:	31 97       	sbiw	r30, 0x01	; 1
    229a:	32 e1       	ldi	r19, 0x12	; 18
    229c:	30 83       	st	Z, r19
    229e:	31 97       	sbiw	r30, 0x01	; 1
    22a0:	33 e1       	ldi	r19, 0x13	; 19
    22a2:	30 83       	st	Z, r19
    22a4:	31 97       	sbiw	r30, 0x01	; 1
    22a6:	34 e1       	ldi	r19, 0x14	; 20
    22a8:	30 83       	st	Z, r19
    22aa:	31 97       	sbiw	r30, 0x01	; 1
    22ac:	35 e1       	ldi	r19, 0x15	; 21
    22ae:	30 83       	st	Z, r19
    22b0:	31 97       	sbiw	r30, 0x01	; 1
    22b2:	36 e1       	ldi	r19, 0x16	; 22
    22b4:	30 83       	st	Z, r19
    22b6:	31 97       	sbiw	r30, 0x01	; 1
    22b8:	37 e1       	ldi	r19, 0x17	; 23
    22ba:	30 83       	st	Z, r19
    22bc:	31 97       	sbiw	r30, 0x01	; 1
    22be:	38 e1       	ldi	r19, 0x18	; 24
    22c0:	30 83       	st	Z, r19
    22c2:	31 97       	sbiw	r30, 0x01	; 1
    22c4:	39 e1       	ldi	r19, 0x19	; 25
    22c6:	30 83       	st	Z, r19
    22c8:	31 97       	sbiw	r30, 0x01	; 1
    22ca:	30 e2       	ldi	r19, 0x20	; 32
    22cc:	30 83       	st	Z, r19
    22ce:	31 97       	sbiw	r30, 0x01	; 1
    22d0:	31 e2       	ldi	r19, 0x21	; 33
    22d2:	30 83       	st	Z, r19
    22d4:	31 97       	sbiw	r30, 0x01	; 1
    22d6:	20 83       	st	Z, r18
    22d8:	31 97       	sbiw	r30, 0x01	; 1
    22da:	23 e2       	ldi	r18, 0x23	; 35
    22dc:	20 83       	st	Z, r18
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	40 83       	st	Z, r20
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	50 83       	st	Z, r21
    22e6:	31 97       	sbiw	r30, 0x01	; 1
    22e8:	26 e2       	ldi	r18, 0x26	; 38
    22ea:	20 83       	st	Z, r18
    22ec:	31 97       	sbiw	r30, 0x01	; 1
    22ee:	27 e2       	ldi	r18, 0x27	; 39
    22f0:	20 83       	st	Z, r18
    22f2:	31 97       	sbiw	r30, 0x01	; 1
    22f4:	28 e2       	ldi	r18, 0x28	; 40
    22f6:	20 83       	st	Z, r18
    22f8:	31 97       	sbiw	r30, 0x01	; 1
    22fa:	29 e2       	ldi	r18, 0x29	; 41
    22fc:	20 83       	st	Z, r18
    22fe:	31 97       	sbiw	r30, 0x01	; 1
    2300:	20 e3       	ldi	r18, 0x30	; 48
    2302:	20 83       	st	Z, r18
    2304:	31 97       	sbiw	r30, 0x01	; 1
    2306:	21 e3       	ldi	r18, 0x31	; 49
    2308:	20 83       	st	Z, r18
    230a:	89 97       	sbiw	r24, 0x29	; 41
    230c:	08 95       	ret

0000230e <xPortStartScheduler>:
    230e:	8c e7       	ldi	r24, 0x7C	; 124
    2310:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2320:	91 e1       	ldi	r25, 0x11	; 17
    2322:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2326:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    232a:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    232e:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2332:	cd 91       	ld	r28, X+
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	dd 91       	ld	r29, X+
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	ff 91       	pop	r31
    233c:	ef 91       	pop	r30
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	bf 90       	pop	r11
    2364:	af 90       	pop	r10
    2366:	9f 90       	pop	r9
    2368:	8f 90       	pop	r8
    236a:	7f 90       	pop	r7
    236c:	6f 90       	pop	r6
    236e:	5f 90       	pop	r5
    2370:	4f 90       	pop	r4
    2372:	3f 90       	pop	r3
    2374:	2f 90       	pop	r2
    2376:	1f 90       	pop	r1
    2378:	0f 90       	pop	r0
    237a:	0c be       	out	0x3c, r0	; 60
    237c:	0f 90       	pop	r0
    237e:	0b be       	out	0x3b, r0	; 59
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	0f 90       	pop	r0
    2386:	08 95       	ret
    2388:	08 95       	ret

0000238a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	0f 92       	push	r0
    2392:	0b b6       	in	r0, 0x3b	; 59
    2394:	0f 92       	push	r0
    2396:	0c b6       	in	r0, 0x3c	; 60
    2398:	0f 92       	push	r0
    239a:	1f 92       	push	r1
    239c:	11 24       	eor	r1, r1
    239e:	2f 92       	push	r2
    23a0:	3f 92       	push	r3
    23a2:	4f 92       	push	r4
    23a4:	5f 92       	push	r5
    23a6:	6f 92       	push	r6
    23a8:	7f 92       	push	r7
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	2f 93       	push	r18
    23c0:	3f 93       	push	r19
    23c2:	4f 93       	push	r20
    23c4:	5f 93       	push	r21
    23c6:	6f 93       	push	r22
    23c8:	7f 93       	push	r23
    23ca:	8f 93       	push	r24
    23cc:	9f 93       	push	r25
    23ce:	af 93       	push	r26
    23d0:	bf 93       	push	r27
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
    23da:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    23de:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    23e2:	0d b6       	in	r0, 0x3d	; 61
    23e4:	0d 92       	st	X+, r0
    23e6:	0e b6       	in	r0, 0x3e	; 62
    23e8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    23ea:	0e 94 e5 18 	call	0x31ca	; 0x31ca <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    23ee:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    23f2:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    23f6:	cd 91       	ld	r28, X+
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	dd 91       	ld	r29, X+
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	ff 91       	pop	r31
    2400:	ef 91       	pop	r30
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	bf 91       	pop	r27
    2408:	af 91       	pop	r26
    240a:	9f 91       	pop	r25
    240c:	8f 91       	pop	r24
    240e:	7f 91       	pop	r23
    2410:	6f 91       	pop	r22
    2412:	5f 91       	pop	r21
    2414:	4f 91       	pop	r20
    2416:	3f 91       	pop	r19
    2418:	2f 91       	pop	r18
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	bf 90       	pop	r11
    2428:	af 90       	pop	r10
    242a:	9f 90       	pop	r9
    242c:	8f 90       	pop	r8
    242e:	7f 90       	pop	r7
    2430:	6f 90       	pop	r6
    2432:	5f 90       	pop	r5
    2434:	4f 90       	pop	r4
    2436:	3f 90       	pop	r3
    2438:	2f 90       	pop	r2
    243a:	1f 90       	pop	r1
    243c:	0f 90       	pop	r0
    243e:	0c be       	out	0x3c, r0	; 60
    2440:	0f 90       	pop	r0
    2442:	0b be       	out	0x3b, r0	; 59
    2444:	0f 90       	pop	r0
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	0f 90       	pop	r0

	asm volatile ( "ret" );
    244a:	08 95       	ret

0000244c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    244c:	0f 92       	push	r0
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	0f 92       	push	r0
    2454:	0b b6       	in	r0, 0x3b	; 59
    2456:	0f 92       	push	r0
    2458:	0c b6       	in	r0, 0x3c	; 60
    245a:	0f 92       	push	r0
    245c:	1f 92       	push	r1
    245e:	11 24       	eor	r1, r1
    2460:	2f 92       	push	r2
    2462:	3f 92       	push	r3
    2464:	4f 92       	push	r4
    2466:	5f 92       	push	r5
    2468:	6f 92       	push	r6
    246a:	7f 92       	push	r7
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	ef 93       	push	r30
    249a:	ff 93       	push	r31
    249c:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    24a0:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    24a4:	0d b6       	in	r0, 0x3d	; 61
    24a6:	0d 92       	st	X+, r0
    24a8:	0e b6       	in	r0, 0x3e	; 62
    24aa:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    24ac:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <vTaskIncrementTick>
	vTaskSwitchContext();
    24b0:	0e 94 e5 18 	call	0x31ca	; 0x31ca <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24b4:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    24b8:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    24bc:	cd 91       	ld	r28, X+
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	dd 91       	ld	r29, X+
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	bf 91       	pop	r27
    24ce:	af 91       	pop	r26
    24d0:	9f 91       	pop	r25
    24d2:	8f 91       	pop	r24
    24d4:	7f 91       	pop	r23
    24d6:	6f 91       	pop	r22
    24d8:	5f 91       	pop	r21
    24da:	4f 91       	pop	r20
    24dc:	3f 91       	pop	r19
    24de:	2f 91       	pop	r18
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	1f 90       	pop	r1
    2502:	0f 90       	pop	r0
    2504:	0c be       	out	0x3c, r0	; 60
    2506:	0f 90       	pop	r0
    2508:	0b be       	out	0x3b, r0	; 59
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2510:	08 95       	ret

00002512 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2512:	0e 94 26 12 	call	0x244c	; 0x244c <vPortYieldFromTick>
		asm volatile ( "reti" );
    2516:	18 95       	reti

00002518 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	ec 01       	movw	r28, r24
    251e:	88 a1       	ldd	r24, Y+32	; 0x20
    2520:	81 11       	cpse	r24, r1
    2522:	0b c0       	rjmp	.+22     	; 0x253a <prvCopyDataToQueue+0x22>
    2524:	88 81       	ld	r24, Y
    2526:	99 81       	ldd	r25, Y+1	; 0x01
    2528:	89 2b       	or	r24, r25
    252a:	e1 f5       	brne	.+120    	; 0x25a4 <prvCopyDataToQueue+0x8c>
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	0e 94 a0 1a 	call	0x3540	; 0x3540 <vTaskPriorityDisinherit>
    2534:	1a 82       	std	Y+2, r1	; 0x02
    2536:	1b 82       	std	Y+3, r1	; 0x03
    2538:	35 c0       	rjmp	.+106    	; 0x25a4 <prvCopyDataToQueue+0x8c>
    253a:	41 11       	cpse	r20, r1
    253c:	17 c0       	rjmp	.+46     	; 0x256c <prvCopyDataToQueue+0x54>
    253e:	48 2f       	mov	r20, r24
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	9d 81       	ldd	r25, Y+5	; 0x05
    2546:	0e 94 15 1b 	call	0x362a	; 0x362a <memcpy>
    254a:	28 a1       	ldd	r18, Y+32	; 0x20
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	9d 81       	ldd	r25, Y+5	; 0x05
    2550:	82 0f       	add	r24, r18
    2552:	91 1d       	adc	r25, r1
    2554:	8c 83       	std	Y+4, r24	; 0x04
    2556:	9d 83       	std	Y+5, r25	; 0x05
    2558:	2a 81       	ldd	r18, Y+2	; 0x02
    255a:	3b 81       	ldd	r19, Y+3	; 0x03
    255c:	82 17       	cp	r24, r18
    255e:	93 07       	cpc	r25, r19
    2560:	08 f1       	brcs	.+66     	; 0x25a4 <prvCopyDataToQueue+0x8c>
    2562:	88 81       	ld	r24, Y
    2564:	99 81       	ldd	r25, Y+1	; 0x01
    2566:	8c 83       	std	Y+4, r24	; 0x04
    2568:	9d 83       	std	Y+5, r25	; 0x05
    256a:	1c c0       	rjmp	.+56     	; 0x25a4 <prvCopyDataToQueue+0x8c>
    256c:	48 2f       	mov	r20, r24
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	9f 81       	ldd	r25, Y+7	; 0x07
    2574:	0e 94 15 1b 	call	0x362a	; 0x362a <memcpy>
    2578:	88 a1       	ldd	r24, Y+32	; 0x20
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	91 95       	neg	r25
    257e:	81 95       	neg	r24
    2580:	91 09       	sbc	r25, r1
    2582:	2e 81       	ldd	r18, Y+6	; 0x06
    2584:	3f 81       	ldd	r19, Y+7	; 0x07
    2586:	28 0f       	add	r18, r24
    2588:	39 1f       	adc	r19, r25
    258a:	2e 83       	std	Y+6, r18	; 0x06
    258c:	3f 83       	std	Y+7, r19	; 0x07
    258e:	48 81       	ld	r20, Y
    2590:	59 81       	ldd	r21, Y+1	; 0x01
    2592:	24 17       	cp	r18, r20
    2594:	35 07       	cpc	r19, r21
    2596:	30 f4       	brcc	.+12     	; 0x25a4 <prvCopyDataToQueue+0x8c>
    2598:	2a 81       	ldd	r18, Y+2	; 0x02
    259a:	3b 81       	ldd	r19, Y+3	; 0x03
    259c:	82 0f       	add	r24, r18
    259e:	93 1f       	adc	r25, r19
    25a0:	8e 83       	std	Y+6, r24	; 0x06
    25a2:	9f 83       	std	Y+7, r25	; 0x07
    25a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25a6:	8f 5f       	subi	r24, 0xFF	; 255
    25a8:	8e 8f       	std	Y+30, r24	; 0x1e
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <prvCopyDataFromQueue>:
    25b0:	fc 01       	movw	r30, r24
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	a1 f0       	breq	.+40     	; 0x25e2 <prvCopyDataFromQueue+0x32>
    25ba:	40 a1       	ldd	r20, Z+32	; 0x20
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	26 81       	ldd	r18, Z+6	; 0x06
    25c0:	37 81       	ldd	r19, Z+7	; 0x07
    25c2:	24 0f       	add	r18, r20
    25c4:	35 1f       	adc	r19, r21
    25c6:	26 83       	std	Z+6, r18	; 0x06
    25c8:	37 83       	std	Z+7, r19	; 0x07
    25ca:	a2 81       	ldd	r26, Z+2	; 0x02
    25cc:	b3 81       	ldd	r27, Z+3	; 0x03
    25ce:	2a 17       	cp	r18, r26
    25d0:	3b 07       	cpc	r19, r27
    25d2:	10 f0       	brcs	.+4      	; 0x25d8 <prvCopyDataFromQueue+0x28>
    25d4:	86 83       	std	Z+6, r24	; 0x06
    25d6:	97 83       	std	Z+7, r25	; 0x07
    25d8:	cb 01       	movw	r24, r22
    25da:	66 81       	ldd	r22, Z+6	; 0x06
    25dc:	77 81       	ldd	r23, Z+7	; 0x07
    25de:	0e 94 15 1b 	call	0x362a	; 0x362a <memcpy>
    25e2:	08 95       	ret

000025e4 <prvUnlockQueue>:
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	ec 01       	movw	r28, r24
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	0f 92       	push	r0
    25f4:	8a a1       	ldd	r24, Y+34	; 0x22
    25f6:	18 16       	cp	r1, r24
    25f8:	b4 f4       	brge	.+44     	; 0x2626 <prvUnlockQueue+0x42>
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	81 11       	cpse	r24, r1
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <prvUnlockQueue+0x26>
    2600:	12 c0       	rjmp	.+36     	; 0x2626 <prvUnlockQueue+0x42>
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	81 11       	cpse	r24, r1
    2606:	04 c0       	rjmp	.+8      	; 0x2610 <prvUnlockQueue+0x2c>
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <prvUnlockQueue+0x42>
    260a:	8e 01       	movw	r16, r28
    260c:	0d 5e       	subi	r16, 0xED	; 237
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	c8 01       	movw	r24, r16
    2612:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <xTaskRemoveFromEventList>
    2616:	81 11       	cpse	r24, r1
    2618:	0e 94 29 1a 	call	0x3452	; 0x3452 <vTaskMissedYield>
    261c:	8a a1       	ldd	r24, Y+34	; 0x22
    261e:	81 50       	subi	r24, 0x01	; 1
    2620:	8a a3       	std	Y+34, r24	; 0x22
    2622:	18 16       	cp	r1, r24
    2624:	74 f3       	brlt	.-36     	; 0x2602 <prvUnlockQueue+0x1e>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	8a a3       	std	Y+34, r24	; 0x22
    262a:	0f 90       	pop	r0
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	0f 92       	push	r0
    2634:	89 a1       	ldd	r24, Y+33	; 0x21
    2636:	18 16       	cp	r1, r24
    2638:	b4 f4       	brge	.+44     	; 0x2666 <prvUnlockQueue+0x82>
    263a:	88 85       	ldd	r24, Y+8	; 0x08
    263c:	81 11       	cpse	r24, r1
    263e:	05 c0       	rjmp	.+10     	; 0x264a <prvUnlockQueue+0x66>
    2640:	12 c0       	rjmp	.+36     	; 0x2666 <prvUnlockQueue+0x82>
    2642:	88 85       	ldd	r24, Y+8	; 0x08
    2644:	81 11       	cpse	r24, r1
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <prvUnlockQueue+0x6c>
    2648:	0e c0       	rjmp	.+28     	; 0x2666 <prvUnlockQueue+0x82>
    264a:	8e 01       	movw	r16, r28
    264c:	08 5f       	subi	r16, 0xF8	; 248
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	c8 01       	movw	r24, r16
    2652:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <xTaskRemoveFromEventList>
    2656:	81 11       	cpse	r24, r1
    2658:	0e 94 29 1a 	call	0x3452	; 0x3452 <vTaskMissedYield>
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	81 50       	subi	r24, 0x01	; 1
    2660:	89 a3       	std	Y+33, r24	; 0x21
    2662:	18 16       	cp	r1, r24
    2664:	74 f3       	brlt	.-36     	; 0x2642 <prvUnlockQueue+0x5e>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	89 a3       	std	Y+33, r24	; 0x21
    266a:	0f 90       	pop	r0
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	08 95       	ret

00002678 <xQueueGenericReset>:
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	61 30       	cpi	r22, 0x01	; 1
    2680:	59 f0       	breq	.+22     	; 0x2698 <xQueueGenericReset+0x20>
    2682:	fc 01       	movw	r30, r24
    2684:	23 89       	ldd	r18, Z+19	; 0x13
    2686:	30 85       	ldd	r19, Z+8	; 0x08
    2688:	31 11       	cpse	r19, r1
    268a:	2c c0       	rjmp	.+88     	; 0x26e4 <xQueueGenericReset+0x6c>
    268c:	11 e0       	ldi	r17, 0x01	; 1
    268e:	21 11       	cpse	r18, r1
    2690:	10 e0       	ldi	r17, 0x00	; 0
    2692:	21 11       	cpse	r18, r1
    2694:	28 c0       	rjmp	.+80     	; 0x26e6 <xQueueGenericReset+0x6e>
    2696:	01 c0       	rjmp	.+2      	; 0x269a <xQueueGenericReset+0x22>
    2698:	11 e0       	ldi	r17, 0x01	; 1
    269a:	ec 01       	movw	r28, r24
    269c:	48 81       	ld	r20, Y
    269e:	59 81       	ldd	r21, Y+1	; 0x01
    26a0:	28 a1       	ldd	r18, Y+32	; 0x20
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26a6:	62 9f       	mul	r22, r18
    26a8:	c0 01       	movw	r24, r0
    26aa:	63 9f       	mul	r22, r19
    26ac:	90 0d       	add	r25, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	ba 01       	movw	r22, r20
    26b2:	68 0f       	add	r22, r24
    26b4:	79 1f       	adc	r23, r25
    26b6:	6a 83       	std	Y+2, r22	; 0x02
    26b8:	7b 83       	std	Y+3, r23	; 0x03
    26ba:	1e 8e       	std	Y+30, r1	; 0x1e
    26bc:	4c 83       	std	Y+4, r20	; 0x04
    26be:	5d 83       	std	Y+5, r21	; 0x05
    26c0:	82 1b       	sub	r24, r18
    26c2:	93 0b       	sbc	r25, r19
    26c4:	84 0f       	add	r24, r20
    26c6:	95 1f       	adc	r25, r21
    26c8:	8e 83       	std	Y+6, r24	; 0x06
    26ca:	9f 83       	std	Y+7, r25	; 0x07
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	89 a3       	std	Y+33, r24	; 0x21
    26d0:	8a a3       	std	Y+34, r24	; 0x22
    26d2:	ce 01       	movw	r24, r28
    26d4:	08 96       	adiw	r24, 0x08	; 8
    26d6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    26da:	ce 01       	movw	r24, r28
    26dc:	43 96       	adiw	r24, 0x13	; 19
    26de:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    26e2:	01 c0       	rjmp	.+2      	; 0x26e6 <xQueueGenericReset+0x6e>
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	81 2f       	mov	r24, r17
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	08 95       	ret

000026f0 <xQueueGenericCreate>:
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	88 23       	and	r24, r24
    26fa:	01 f1       	breq	.+64     	; 0x273c <xQueueGenericCreate+0x4c>
    26fc:	06 2f       	mov	r16, r22
    26fe:	18 2f       	mov	r17, r24
    2700:	83 e2       	ldi	r24, 0x23	; 35
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    2708:	ec 01       	movw	r28, r24
    270a:	89 2b       	or	r24, r25
    270c:	c9 f0       	breq	.+50     	; 0x2740 <xQueueGenericCreate+0x50>
    270e:	10 9f       	mul	r17, r16
    2710:	c0 01       	movw	r24, r0
    2712:	11 24       	eor	r1, r1
    2714:	01 96       	adiw	r24, 0x01	; 1
    2716:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    271a:	88 83       	st	Y, r24
    271c:	99 83       	std	Y+1, r25	; 0x01
    271e:	89 2b       	or	r24, r25
    2720:	39 f0       	breq	.+14     	; 0x2730 <xQueueGenericCreate+0x40>
    2722:	1f 8f       	std	Y+31, r17	; 0x1f
    2724:	08 a3       	std	Y+32, r16	; 0x20
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	ce 01       	movw	r24, r28
    272a:	0e 94 3c 13 	call	0x2678	; 0x2678 <xQueueGenericReset>
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <xQueueGenericCreate+0x50>
    2730:	ce 01       	movw	r24, r28
    2732:	0e 94 2c 10 	call	0x2058	; 0x2058 <vPortFree>
    2736:	c0 e0       	ldi	r28, 0x00	; 0
    2738:	d0 e0       	ldi	r29, 0x00	; 0
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <xQueueGenericCreate+0x50>
    273c:	c0 e0       	ldi	r28, 0x00	; 0
    273e:	d0 e0       	ldi	r29, 0x00	; 0
    2740:	ce 01       	movw	r24, r28
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	08 95       	ret

0000274c <xQueueGenericSend>:
    274c:	af 92       	push	r10
    274e:	bf 92       	push	r11
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	29 97       	sbiw	r28, 0x09	; 9
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	7c 01       	movw	r14, r24
    276c:	5b 01       	movw	r10, r22
    276e:	2e 83       	std	Y+6, r18	; 0x06
    2770:	3f 83       	std	Y+7, r19	; 0x07
    2772:	48 87       	std	Y+8, r20	; 0x08
    2774:	59 87       	std	Y+9, r21	; 0x09
    2776:	10 e0       	ldi	r17, 0x00	; 0
    2778:	6c 01       	movw	r12, r24
    277a:	88 e0       	ldi	r24, 0x08	; 8
    277c:	c8 0e       	add	r12, r24
    277e:	d1 1c       	adc	r13, r1
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	0f 92       	push	r0
    2786:	f7 01       	movw	r30, r14
    2788:	96 8d       	ldd	r25, Z+30	; 0x1e
    278a:	87 8d       	ldd	r24, Z+31	; 0x1f
    278c:	98 17       	cp	r25, r24
    278e:	a8 f4       	brcc	.+42     	; 0x27ba <xQueueGenericSend+0x6e>
    2790:	40 2f       	mov	r20, r16
    2792:	b5 01       	movw	r22, r10
    2794:	c7 01       	movw	r24, r14
    2796:	0e 94 8c 12 	call	0x2518	; 0x2518 <prvCopyDataToQueue>
    279a:	f7 01       	movw	r30, r14
    279c:	83 89       	ldd	r24, Z+19	; 0x13
    279e:	88 23       	and	r24, r24
    27a0:	41 f0       	breq	.+16     	; 0x27b2 <xQueueGenericSend+0x66>
    27a2:	c7 01       	movw	r24, r14
    27a4:	43 96       	adiw	r24, 0x13	; 19
    27a6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <xTaskRemoveFromEventList>
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	11 f4       	brne	.+4      	; 0x27b2 <xQueueGenericSend+0x66>
    27ae:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	56 c0       	rjmp	.+172    	; 0x2866 <xQueueGenericSend+0x11a>
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	a8 85       	ldd	r26, Y+8	; 0x08
    27c0:	b9 85       	ldd	r27, Y+9	; 0x09
    27c2:	89 2b       	or	r24, r25
    27c4:	8a 2b       	or	r24, r26
    27c6:	8b 2b       	or	r24, r27
    27c8:	21 f4       	brne	.+8      	; 0x27d2 <xQueueGenericSend+0x86>
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	4a c0       	rjmp	.+148    	; 0x2866 <xQueueGenericSend+0x11a>
    27d2:	11 11       	cpse	r17, r1
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <xQueueGenericSend+0x94>
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 ab 19 	call	0x3356	; 0x3356 <vTaskSetTimeOutState>
    27de:	11 e0       	ldi	r17, 0x01	; 1
    27e0:	0f 90       	pop	r0
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	0f 92       	push	r0
    27ee:	f7 01       	movw	r30, r14
    27f0:	81 a1       	ldd	r24, Z+33	; 0x21
    27f2:	8f 3f       	cpi	r24, 0xFF	; 255
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <xQueueGenericSend+0xac>
    27f6:	11 a2       	std	Z+33, r1	; 0x21
    27f8:	f7 01       	movw	r30, r14
    27fa:	82 a1       	ldd	r24, Z+34	; 0x22
    27fc:	8f 3f       	cpi	r24, 0xFF	; 255
    27fe:	09 f4       	brne	.+2      	; 0x2802 <xQueueGenericSend+0xb6>
    2800:	12 a2       	std	Z+34, r1	; 0x22
    2802:	0f 90       	pop	r0
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	be 01       	movw	r22, r28
    2808:	6a 5f       	subi	r22, 0xFA	; 250
    280a:	7f 4f       	sbci	r23, 0xFF	; 255
    280c:	ce 01       	movw	r24, r28
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskCheckForTimeOut>
    2814:	81 11       	cpse	r24, r1
    2816:	21 c0       	rjmp	.+66     	; 0x285a <xQueueGenericSend+0x10e>
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	0f 92       	push	r0
    281e:	f7 01       	movw	r30, r14
    2820:	96 8d       	ldd	r25, Z+30	; 0x1e
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	87 8d       	ldd	r24, Z+31	; 0x1f
    2828:	98 13       	cpse	r25, r24
    282a:	11 c0       	rjmp	.+34     	; 0x284e <xQueueGenericSend+0x102>
    282c:	4e 81       	ldd	r20, Y+6	; 0x06
    282e:	5f 81       	ldd	r21, Y+7	; 0x07
    2830:	68 85       	ldd	r22, Y+8	; 0x08
    2832:	79 85       	ldd	r23, Y+9	; 0x09
    2834:	c6 01       	movw	r24, r12
    2836:	0e 94 42 19 	call	0x3284	; 0x3284 <vTaskPlaceOnEventList>
    283a:	c7 01       	movw	r24, r14
    283c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    2840:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    2844:	81 11       	cpse	r24, r1
    2846:	9c cf       	rjmp	.-200    	; 0x2780 <xQueueGenericSend+0x34>
    2848:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    284c:	99 cf       	rjmp	.-206    	; 0x2780 <xQueueGenericSend+0x34>
    284e:	c7 01       	movw	r24, r14
    2850:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    2854:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    2858:	93 cf       	rjmp	.-218    	; 0x2780 <xQueueGenericSend+0x34>
    285a:	c7 01       	movw	r24, r14
    285c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    2860:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	29 96       	adiw	r28, 0x09	; 9
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	cf 90       	pop	r12
    287c:	bf 90       	pop	r11
    287e:	af 90       	pop	r10
    2880:	08 95       	ret

00002882 <xQueueGenericReceive>:
    2882:	af 92       	push	r10
    2884:	bf 92       	push	r11
    2886:	cf 92       	push	r12
    2888:	df 92       	push	r13
    288a:	ef 92       	push	r14
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	29 97       	sbiw	r28, 0x09	; 9
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	7c 01       	movw	r14, r24
    28a2:	5b 01       	movw	r10, r22
    28a4:	2e 83       	std	Y+6, r18	; 0x06
    28a6:	3f 83       	std	Y+7, r19	; 0x07
    28a8:	48 87       	std	Y+8, r20	; 0x08
    28aa:	59 87       	std	Y+9, r21	; 0x09
    28ac:	10 e0       	ldi	r17, 0x00	; 0
    28ae:	6c 01       	movw	r12, r24
    28b0:	83 e1       	ldi	r24, 0x13	; 19
    28b2:	c8 0e       	add	r12, r24
    28b4:	d1 1c       	adc	r13, r1
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	0f 92       	push	r0
    28bc:	f7 01       	movw	r30, r14
    28be:	86 8d       	ldd	r24, Z+30	; 0x1e
    28c0:	88 23       	and	r24, r24
    28c2:	99 f1       	breq	.+102    	; 0x292a <xQueueGenericReceive+0xa8>
    28c4:	c6 80       	ldd	r12, Z+6	; 0x06
    28c6:	d7 80       	ldd	r13, Z+7	; 0x07
    28c8:	b5 01       	movw	r22, r10
    28ca:	c7 01       	movw	r24, r14
    28cc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <prvCopyDataFromQueue>
    28d0:	01 11       	cpse	r16, r1
    28d2:	1a c0       	rjmp	.+52     	; 0x2908 <xQueueGenericReceive+0x86>
    28d4:	f7 01       	movw	r30, r14
    28d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    28d8:	81 50       	subi	r24, 0x01	; 1
    28da:	86 8f       	std	Z+30, r24	; 0x1e
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	89 2b       	or	r24, r25
    28e2:	29 f4       	brne	.+10     	; 0x28ee <xQueueGenericReceive+0x6c>
    28e4:	0e 94 46 1a 	call	0x348c	; 0x348c <xTaskGetCurrentTaskHandle>
    28e8:	f7 01       	movw	r30, r14
    28ea:	82 83       	std	Z+2, r24	; 0x02
    28ec:	93 83       	std	Z+3, r25	; 0x03
    28ee:	f7 01       	movw	r30, r14
    28f0:	80 85       	ldd	r24, Z+8	; 0x08
    28f2:	88 23       	and	r24, r24
    28f4:	b1 f0       	breq	.+44     	; 0x2922 <xQueueGenericReceive+0xa0>
    28f6:	c7 01       	movw	r24, r14
    28f8:	08 96       	adiw	r24, 0x08	; 8
    28fa:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <xTaskRemoveFromEventList>
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	81 f4       	brne	.+32     	; 0x2922 <xQueueGenericReceive+0xa0>
    2902:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    2906:	0d c0       	rjmp	.+26     	; 0x2922 <xQueueGenericReceive+0xa0>
    2908:	f7 01       	movw	r30, r14
    290a:	c6 82       	std	Z+6, r12	; 0x06
    290c:	d7 82       	std	Z+7, r13	; 0x07
    290e:	83 89       	ldd	r24, Z+19	; 0x13
    2910:	88 23       	and	r24, r24
    2912:	39 f0       	breq	.+14     	; 0x2922 <xQueueGenericReceive+0xa0>
    2914:	c7 01       	movw	r24, r14
    2916:	43 96       	adiw	r24, 0x13	; 19
    2918:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <xTaskRemoveFromEventList>
    291c:	81 11       	cpse	r24, r1
    291e:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    2922:	0f 90       	pop	r0
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	62 c0       	rjmp	.+196    	; 0x29ee <xQueueGenericReceive+0x16c>
    292a:	8e 81       	ldd	r24, Y+6	; 0x06
    292c:	9f 81       	ldd	r25, Y+7	; 0x07
    292e:	a8 85       	ldd	r26, Y+8	; 0x08
    2930:	b9 85       	ldd	r27, Y+9	; 0x09
    2932:	89 2b       	or	r24, r25
    2934:	8a 2b       	or	r24, r26
    2936:	8b 2b       	or	r24, r27
    2938:	21 f4       	brne	.+8      	; 0x2942 <xQueueGenericReceive+0xc0>
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	56 c0       	rjmp	.+172    	; 0x29ee <xQueueGenericReceive+0x16c>
    2942:	11 11       	cpse	r17, r1
    2944:	05 c0       	rjmp	.+10     	; 0x2950 <xQueueGenericReceive+0xce>
    2946:	ce 01       	movw	r24, r28
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	0e 94 ab 19 	call	0x3356	; 0x3356 <vTaskSetTimeOutState>
    294e:	11 e0       	ldi	r17, 0x01	; 1
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	0f 92       	push	r0
    295e:	f7 01       	movw	r30, r14
    2960:	81 a1       	ldd	r24, Z+33	; 0x21
    2962:	8f 3f       	cpi	r24, 0xFF	; 255
    2964:	09 f4       	brne	.+2      	; 0x2968 <xQueueGenericReceive+0xe6>
    2966:	11 a2       	std	Z+33, r1	; 0x21
    2968:	f7 01       	movw	r30, r14
    296a:	82 a1       	ldd	r24, Z+34	; 0x22
    296c:	8f 3f       	cpi	r24, 0xFF	; 255
    296e:	09 f4       	brne	.+2      	; 0x2972 <xQueueGenericReceive+0xf0>
    2970:	12 a2       	std	Z+34, r1	; 0x22
    2972:	0f 90       	pop	r0
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	be 01       	movw	r22, r28
    2978:	6a 5f       	subi	r22, 0xFA	; 250
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	0e 94 bc 19 	call	0x3378	; 0x3378 <xTaskCheckForTimeOut>
    2984:	81 11       	cpse	r24, r1
    2986:	2d c0       	rjmp	.+90     	; 0x29e2 <xQueueGenericReceive+0x160>
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	0f 92       	push	r0
    298e:	f7 01       	movw	r30, r14
    2990:	86 8d       	ldd	r24, Z+30	; 0x1e
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	81 11       	cpse	r24, r1
    2998:	1e c0       	rjmp	.+60     	; 0x29d6 <xQueueGenericReceive+0x154>
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	89 2b       	or	r24, r25
    29a0:	49 f4       	brne	.+18     	; 0x29b4 <xQueueGenericReceive+0x132>
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	0f 92       	push	r0
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	0e 94 4b 1a 	call	0x3496	; 0x3496 <vTaskPriorityInherit>
    29b0:	0f 90       	pop	r0
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	4e 81       	ldd	r20, Y+6	; 0x06
    29b6:	5f 81       	ldd	r21, Y+7	; 0x07
    29b8:	68 85       	ldd	r22, Y+8	; 0x08
    29ba:	79 85       	ldd	r23, Y+9	; 0x09
    29bc:	c6 01       	movw	r24, r12
    29be:	0e 94 42 19 	call	0x3284	; 0x3284 <vTaskPlaceOnEventList>
    29c2:	c7 01       	movw	r24, r14
    29c4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    29c8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    29cc:	81 11       	cpse	r24, r1
    29ce:	73 cf       	rjmp	.-282    	; 0x28b6 <xQueueGenericReceive+0x34>
    29d0:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    29d4:	70 cf       	rjmp	.-288    	; 0x28b6 <xQueueGenericReceive+0x34>
    29d6:	c7 01       	movw	r24, r14
    29d8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    29dc:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    29e0:	6a cf       	rjmp	.-300    	; 0x28b6 <xQueueGenericReceive+0x34>
    29e2:	c7 01       	movw	r24, r14
    29e4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <prvUnlockQueue>
    29e8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	29 96       	adiw	r28, 0x09	; 9
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	df 90       	pop	r13
    2a02:	cf 90       	pop	r12
    2a04:	bf 90       	pop	r11
    2a06:	af 90       	pop	r10
    2a08:	08 95       	ret

00002a0a <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2a10:	fc 01       	movw	r30, r24
    2a12:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2a18:	08 95       	ret

00002a1a <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2a1a:	c8 e3       	ldi	r28, 0x38	; 56
    2a1c:	d1 e3       	ldi	r29, 0x31	; 49
    2a1e:	88 81       	ld	r24, Y
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	e8 f3       	brcs	.-6      	; 0x2a1e <prvIdleTask+0x4>
    2a24:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    2a28:	fa cf       	rjmp	.-12     	; 0x2a1e <prvIdleTask+0x4>

00002a2a <prvAddCurrentTaskToDelayedList>:
    2a2a:	cf 92       	push	r12
    2a2c:	df 92       	push	r13
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	6b 01       	movw	r12, r22
    2a34:	7c 01       	movw	r14, r24
    2a36:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    2a3a:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2a3e:	62 83       	std	Z+2, r22	; 0x02
    2a40:	73 83       	std	Z+3, r23	; 0x03
    2a42:	84 83       	std	Z+4, r24	; 0x04
    2a44:	95 83       	std	Z+5, r25	; 0x05
    2a46:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    2a4a:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    2a4e:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    2a52:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    2a56:	c8 16       	cp	r12, r24
    2a58:	d9 06       	cpc	r13, r25
    2a5a:	ea 06       	cpc	r14, r26
    2a5c:	fb 06       	cpc	r15, r27
    2a5e:	68 f4       	brcc	.+26     	; 0x2a7a <prvAddCurrentTaskToDelayedList+0x50>
    2a60:	60 91 64 31 	lds	r22, 0x3164	; 0x803164 <pxCurrentTCB>
    2a64:	70 91 65 31 	lds	r23, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2a68:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <pxOverflowDelayedTaskList>
    2a6c:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <pxOverflowDelayedTaskList+0x1>
    2a70:	6e 5f       	subi	r22, 0xFE	; 254
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255
    2a74:	0e 94 a0 10 	call	0x2140	; 0x2140 <vListInsert>
    2a78:	21 c0       	rjmp	.+66     	; 0x2abc <prvAddCurrentTaskToDelayedList+0x92>
    2a7a:	60 91 64 31 	lds	r22, 0x3164	; 0x803164 <pxCurrentTCB>
    2a7e:	70 91 65 31 	lds	r23, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2a82:	80 91 20 31 	lds	r24, 0x3120	; 0x803120 <pxDelayedTaskList>
    2a86:	90 91 21 31 	lds	r25, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2a8a:	6e 5f       	subi	r22, 0xFE	; 254
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	0e 94 a0 10 	call	0x2140	; 0x2140 <vListInsert>
    2a92:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2a96:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2a9a:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2a9e:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2aa2:	c8 16       	cp	r12, r24
    2aa4:	d9 06       	cpc	r13, r25
    2aa6:	ea 06       	cpc	r14, r26
    2aa8:	fb 06       	cpc	r15, r27
    2aaa:	40 f4       	brcc	.+16     	; 0x2abc <prvAddCurrentTaskToDelayedList+0x92>
    2aac:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2ab0:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2ab4:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2ab8:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	08 95       	ret

00002ac6 <xTaskGenericCreate>:
    2ac6:	4f 92       	push	r4
    2ac8:	5f 92       	push	r5
    2aca:	6f 92       	push	r6
    2acc:	7f 92       	push	r7
    2ace:	8f 92       	push	r8
    2ad0:	9f 92       	push	r9
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	5c 01       	movw	r10, r24
    2ae8:	4b 01       	movw	r8, r22
    2aea:	3a 01       	movw	r6, r20
    2aec:	29 01       	movw	r4, r18
    2aee:	88 e2       	ldi	r24, 0x28	; 40
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    2af6:	ec 01       	movw	r28, r24
    2af8:	89 2b       	or	r24, r25
    2afa:	09 f4       	brne	.+2      	; 0x2afe <xTaskGenericCreate+0x38>
    2afc:	d4 c0       	rjmp	.+424    	; 0x2ca6 <xTaskGenericCreate+0x1e0>
    2afe:	c1 14       	cp	r12, r1
    2b00:	d1 04       	cpc	r13, r1
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <xTaskGenericCreate+0x40>
    2b04:	cc c0       	rjmp	.+408    	; 0x2c9e <xTaskGenericCreate+0x1d8>
    2b06:	c3 01       	movw	r24, r6
    2b08:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <pvPortMalloc>
    2b0c:	8b 8f       	std	Y+27, r24	; 0x1b
    2b0e:	9c 8f       	std	Y+28, r25	; 0x1c
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	21 f4       	brne	.+8      	; 0x2b1c <xTaskGenericCreate+0x56>
    2b14:	ce 01       	movw	r24, r28
    2b16:	0e 94 2c 10 	call	0x2058	; 0x2058 <vPortFree>
    2b1a:	c5 c0       	rjmp	.+394    	; 0x2ca6 <xTaskGenericCreate+0x1e0>
    2b1c:	a3 01       	movw	r20, r6
    2b1e:	61 e1       	ldi	r22, 0x11	; 17
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	0e 94 1e 1b 	call	0x363c	; 0x363c <memset>
    2b26:	93 01       	movw	r18, r6
    2b28:	21 50       	subi	r18, 0x01	; 1
    2b2a:	31 09       	sbc	r19, r1
    2b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b30:	3c 01       	movw	r6, r24
    2b32:	62 0e       	add	r6, r18
    2b34:	73 1e       	adc	r7, r19
    2b36:	4a e0       	ldi	r20, 0x0A	; 10
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	b4 01       	movw	r22, r8
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	4d 96       	adiw	r24, 0x1d	; 29
    2b40:	0e 94 25 1b 	call	0x364a	; 0x364a <strncpy>
    2b44:	1e a2       	std	Y+38, r1	; 0x26
    2b46:	10 2f       	mov	r17, r16
    2b48:	04 30       	cpi	r16, 0x04	; 4
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <xTaskGenericCreate+0x88>
    2b4c:	13 e0       	ldi	r17, 0x03	; 3
    2b4e:	1a 8f       	std	Y+26, r17	; 0x1a
    2b50:	1f a3       	std	Y+39, r17	; 0x27
    2b52:	6e 01       	movw	r12, r28
    2b54:	22 e0       	ldi	r18, 0x02	; 2
    2b56:	c2 0e       	add	r12, r18
    2b58:	d1 1c       	adc	r13, r1
    2b5a:	c6 01       	movw	r24, r12
    2b5c:	0e 94 75 10 	call	0x20ea	; 0x20ea <vListInitialiseItem>
    2b60:	ce 01       	movw	r24, r28
    2b62:	0e 96       	adiw	r24, 0x0e	; 14
    2b64:	0e 94 75 10 	call	0x20ea	; 0x20ea <vListInitialiseItem>
    2b68:	ca 87       	std	Y+10, r28	; 0x0a
    2b6a:	db 87       	std	Y+11, r29	; 0x0b
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	81 1b       	sub	r24, r17
    2b76:	91 09       	sbc	r25, r1
    2b78:	a1 09       	sbc	r26, r1
    2b7a:	b1 09       	sbc	r27, r1
    2b7c:	8e 87       	std	Y+14, r24	; 0x0e
    2b7e:	9f 87       	std	Y+15, r25	; 0x0f
    2b80:	a8 8b       	std	Y+16, r26	; 0x10
    2b82:	b9 8b       	std	Y+17, r27	; 0x11
    2b84:	ce 8b       	std	Y+22, r28	; 0x16
    2b86:	df 8b       	std	Y+23, r29	; 0x17
    2b88:	a2 01       	movw	r20, r4
    2b8a:	b5 01       	movw	r22, r10
    2b8c:	c3 01       	movw	r24, r6
    2b8e:	0e 94 11 11 	call	0x2222	; 0x2222 <pxPortInitialiseStack>
    2b92:	88 83       	st	Y, r24
    2b94:	99 83       	std	Y+1, r25	; 0x01
    2b96:	e1 14       	cp	r14, r1
    2b98:	f1 04       	cpc	r15, r1
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <xTaskGenericCreate+0xdc>
    2b9c:	f7 01       	movw	r30, r14
    2b9e:	c0 83       	st	Z, r28
    2ba0:	d1 83       	std	Z+1, r29	; 0x01
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	0f 92       	push	r0
    2ba8:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <uxCurrentNumberOfTasks>
    2bac:	8f 5f       	subi	r24, 0xFF	; 255
    2bae:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <uxCurrentNumberOfTasks>
    2bb2:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    2bb6:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2bba:	89 2b       	or	r24, r25
    2bbc:	89 f5       	brne	.+98     	; 0x2c20 <xTaskGenericCreate+0x15a>
    2bbe:	c0 93 64 31 	sts	0x3164, r28	; 0x803164 <pxCurrentTCB>
    2bc2:	d0 93 65 31 	sts	0x3165, r29	; 0x803165 <pxCurrentTCB+0x1>
    2bc6:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <uxCurrentNumberOfTasks>
    2bca:	81 30       	cpi	r24, 0x01	; 1
    2bcc:	c1 f5       	brne	.+112    	; 0x2c3e <xTaskGenericCreate+0x178>
    2bce:	88 e3       	ldi	r24, 0x38	; 56
    2bd0:	91 e3       	ldi	r25, 0x31	; 49
    2bd2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2bd6:	83 e4       	ldi	r24, 0x43	; 67
    2bd8:	91 e3       	ldi	r25, 0x31	; 49
    2bda:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2bde:	8e e4       	ldi	r24, 0x4E	; 78
    2be0:	91 e3       	ldi	r25, 0x31	; 49
    2be2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2be6:	89 e5       	ldi	r24, 0x59	; 89
    2be8:	91 e3       	ldi	r25, 0x31	; 49
    2bea:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2bee:	8d e2       	ldi	r24, 0x2D	; 45
    2bf0:	91 e3       	ldi	r25, 0x31	; 49
    2bf2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2bf6:	82 e2       	ldi	r24, 0x22	; 34
    2bf8:	91 e3       	ldi	r25, 0x31	; 49
    2bfa:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2bfe:	83 e1       	ldi	r24, 0x13	; 19
    2c00:	91 e3       	ldi	r25, 0x31	; 49
    2c02:	0e 94 64 10 	call	0x20c8	; 0x20c8 <vListInitialise>
    2c06:	8d e2       	ldi	r24, 0x2D	; 45
    2c08:	91 e3       	ldi	r25, 0x31	; 49
    2c0a:	80 93 20 31 	sts	0x3120, r24	; 0x803120 <pxDelayedTaskList>
    2c0e:	90 93 21 31 	sts	0x3121, r25	; 0x803121 <pxDelayedTaskList+0x1>
    2c12:	82 e2       	ldi	r24, 0x22	; 34
    2c14:	91 e3       	ldi	r25, 0x31	; 49
    2c16:	80 93 1e 31 	sts	0x311E, r24	; 0x80311e <pxOverflowDelayedTaskList>
    2c1a:	90 93 1f 31 	sts	0x311F, r25	; 0x80311f <pxOverflowDelayedTaskList+0x1>
    2c1e:	0f c0       	rjmp	.+30     	; 0x2c3e <xTaskGenericCreate+0x178>
    2c20:	80 91 09 31 	lds	r24, 0x3109	; 0x803109 <xSchedulerRunning>
    2c24:	81 11       	cpse	r24, r1
    2c26:	0b c0       	rjmp	.+22     	; 0x2c3e <xTaskGenericCreate+0x178>
    2c28:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    2c2c:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2c30:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c32:	08 17       	cp	r16, r24
    2c34:	20 f0       	brcs	.+8      	; 0x2c3e <xTaskGenericCreate+0x178>
    2c36:	c0 93 64 31 	sts	0x3164, r28	; 0x803164 <pxCurrentTCB>
    2c3a:	d0 93 65 31 	sts	0x3165, r29	; 0x803165 <pxCurrentTCB+0x1>
    2c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c40:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <uxTopUsedPriority>
    2c44:	98 17       	cp	r25, r24
    2c46:	10 f4       	brcc	.+4      	; 0x2c4c <xTaskGenericCreate+0x186>
    2c48:	80 93 0b 31 	sts	0x310B, r24	; 0x80310b <uxTopUsedPriority>
    2c4c:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTaskNumber>
    2c50:	9f 5f       	subi	r25, 0xFF	; 255
    2c52:	90 93 04 31 	sts	0x3104, r25	; 0x803104 <uxTaskNumber>
    2c56:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    2c5a:	98 17       	cp	r25, r24
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <xTaskGenericCreate+0x19c>
    2c5e:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    2c62:	fb e0       	ldi	r31, 0x0B	; 11
    2c64:	8f 9f       	mul	r24, r31
    2c66:	c0 01       	movw	r24, r0
    2c68:	11 24       	eor	r1, r1
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	88 5c       	subi	r24, 0xC8	; 200
    2c6e:	9e 4c       	sbci	r25, 0xCE	; 206
    2c70:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
    2c74:	0f 90       	pop	r0
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	80 91 09 31 	lds	r24, 0x3109	; 0x803109 <xSchedulerRunning>
    2c7c:	88 23       	and	r24, r24
    2c7e:	59 f0       	breq	.+22     	; 0x2c96 <xTaskGenericCreate+0x1d0>
    2c80:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    2c84:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2c88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c8a:	80 17       	cp	r24, r16
    2c8c:	30 f4       	brcc	.+12     	; 0x2c9a <xTaskGenericCreate+0x1d4>
    2c8e:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	09 c0       	rjmp	.+18     	; 0x2ca8 <xTaskGenericCreate+0x1e2>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	07 c0       	rjmp	.+14     	; 0x2ca8 <xTaskGenericCreate+0x1e2>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	05 c0       	rjmp	.+10     	; 0x2ca8 <xTaskGenericCreate+0x1e2>
    2c9e:	cb 8e       	std	Y+27, r12	; 0x1b
    2ca0:	dc 8e       	std	Y+28, r13	; 0x1c
    2ca2:	c6 01       	movw	r24, r12
    2ca4:	3b cf       	rjmp	.-394    	; 0x2b1c <xTaskGenericCreate+0x56>
    2ca6:	8f ef       	ldi	r24, 0xFF	; 255
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	df 90       	pop	r13
    2cb6:	cf 90       	pop	r12
    2cb8:	bf 90       	pop	r11
    2cba:	af 90       	pop	r10
    2cbc:	9f 90       	pop	r9
    2cbe:	8f 90       	pop	r8
    2cc0:	7f 90       	pop	r7
    2cc2:	6f 90       	pop	r6
    2cc4:	5f 90       	pop	r5
    2cc6:	4f 90       	pop	r4
    2cc8:	08 95       	ret

00002cca <uxTaskPriorityGet>:
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	0f 92       	push	r0
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	21 f4       	brne	.+8      	; 0x2cdc <uxTaskPriorityGet+0x12>
    2cd4:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    2cd8:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ce4:	08 95       	ret

00002ce6 <vTaskStartScheduler>:
    2ce6:	af 92       	push	r10
    2ce8:	bf 92       	push	r11
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	a1 2c       	mov	r10, r1
    2cf6:	b1 2c       	mov	r11, r1
    2cf8:	c1 2c       	mov	r12, r1
    2cfa:	d1 2c       	mov	r13, r1
    2cfc:	0f 2e       	mov	r0, r31
    2cfe:	f1 e1       	ldi	r31, 0x11	; 17
    2d00:	ef 2e       	mov	r14, r31
    2d02:	f1 e3       	ldi	r31, 0x31	; 49
    2d04:	ff 2e       	mov	r15, r31
    2d06:	f0 2d       	mov	r31, r0
    2d08:	00 e0       	ldi	r16, 0x00	; 0
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	44 e6       	ldi	r20, 0x64	; 100
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	61 ec       	ldi	r22, 0xC1	; 193
    2d14:	70 e2       	ldi	r23, 0x20	; 32
    2d16:	8d e0       	ldi	r24, 0x0D	; 13
    2d18:	95 e1       	ldi	r25, 0x15	; 21
    2d1a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <xTaskGenericCreate>
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	69 f4       	brne	.+26     	; 0x2d3c <vTaskStartScheduler+0x56>
    2d22:	f8 94       	cli
    2d24:	80 93 09 31 	sts	0x3109, r24	; 0x803109 <xSchedulerRunning>
    2d28:	10 92 0c 31 	sts	0x310C, r1	; 0x80310c <xTickCount>
    2d2c:	10 92 0d 31 	sts	0x310D, r1	; 0x80310d <xTickCount+0x1>
    2d30:	10 92 0e 31 	sts	0x310E, r1	; 0x80310e <xTickCount+0x2>
    2d34:	10 92 0f 31 	sts	0x310F, r1	; 0x80310f <xTickCount+0x3>
    2d38:	0e 94 87 11 	call	0x230e	; 0x230e <xPortStartScheduler>
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	cf 90       	pop	r12
    2d46:	bf 90       	pop	r11
    2d48:	af 90       	pop	r10
    2d4a:	08 95       	ret

00002d4c <vTaskSuspendAll>:
    2d4c:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 93 08 31 	sts	0x3108, r24	; 0x803108 <uxSchedulerSuspended>
    2d56:	08 95       	ret

00002d58 <xTaskGetTickCount>:
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	0f 92       	push	r0
    2d5e:	60 91 0c 31 	lds	r22, 0x310C	; 0x80310c <xTickCount>
    2d62:	70 91 0d 31 	lds	r23, 0x310D	; 0x80310d <xTickCount+0x1>
    2d66:	80 91 0e 31 	lds	r24, 0x310E	; 0x80310e <xTickCount+0x2>
    2d6a:	90 91 0f 31 	lds	r25, 0x310F	; 0x80310f <xTickCount+0x3>
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	08 95       	ret

00002d74 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	21 f4       	brne	.+8      	; 0x2d80 <pcTaskGetTaskName+0xc>
    2d78:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    2d7c:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    2d80:	4d 96       	adiw	r24, 0x1d	; 29
    2d82:	08 95       	ret

00002d84 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    2d84:	80 91 11 31 	lds	r24, 0x3111	; 0x803111 <xIdleTaskHandle>
    2d88:	90 91 12 31 	lds	r25, 0x3112	; 0x803112 <xIdleTaskHandle+0x1>
    2d8c:	08 95       	ret

00002d8e <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2d98:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	ed c0       	rjmp	.+474    	; 0x2f7a <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    2da0:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    2da4:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    2da8:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    2dac:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	a1 1d       	adc	r26, r1
    2db4:	b1 1d       	adc	r27, r1
    2db6:	80 93 0c 31 	sts	0x310C, r24	; 0x80310c <xTickCount>
    2dba:	90 93 0d 31 	sts	0x310D, r25	; 0x80310d <xTickCount+0x1>
    2dbe:	a0 93 0e 31 	sts	0x310E, r26	; 0x80310e <xTickCount+0x2>
    2dc2:	b0 93 0f 31 	sts	0x310F, r27	; 0x80310f <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    2dc6:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    2dca:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    2dce:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    2dd2:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    2dd6:	89 2b       	or	r24, r25
    2dd8:	8a 2b       	or	r24, r26
    2dda:	8b 2b       	or	r24, r27
    2ddc:	f1 f5       	brne	.+124    	; 0x2e5a <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2dde:	80 91 20 31 	lds	r24, 0x3120	; 0x803120 <pxDelayedTaskList>
    2de2:	90 91 21 31 	lds	r25, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2de6:	20 91 1e 31 	lds	r18, 0x311E	; 0x80311e <pxOverflowDelayedTaskList>
    2dea:	30 91 1f 31 	lds	r19, 0x311F	; 0x80311f <pxOverflowDelayedTaskList+0x1>
    2dee:	20 93 20 31 	sts	0x3120, r18	; 0x803120 <pxDelayedTaskList>
    2df2:	30 93 21 31 	sts	0x3121, r19	; 0x803121 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    2df6:	80 93 1e 31 	sts	0x311E, r24	; 0x80311e <pxOverflowDelayedTaskList>
    2dfa:	90 93 1f 31 	sts	0x311F, r25	; 0x80311f <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    2dfe:	80 91 05 31 	lds	r24, 0x3105	; 0x803105 <xNumOfOverflows>
    2e02:	8f 5f       	subi	r24, 0xFF	; 255
    2e04:	80 93 05 31 	sts	0x3105, r24	; 0x803105 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2e08:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2e0c:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2e10:	80 81       	ld	r24, Z
    2e12:	81 11       	cpse	r24, r1
    2e14:	0c c0       	rjmp	.+24     	; 0x2e2e <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2e16:	8f ef       	ldi	r24, 0xFF	; 255
    2e18:	9f ef       	ldi	r25, 0xFF	; 255
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2e20:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e24:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e28:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2e2c:	16 c0       	rjmp	.+44     	; 0x2e5a <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2e2e:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2e32:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2e36:	07 80       	ldd	r0, Z+7	; 0x07
    2e38:	f0 85       	ldd	r31, Z+8	; 0x08
    2e3a:	e0 2d       	mov	r30, r0
    2e3c:	00 84       	ldd	r0, Z+8	; 0x08
    2e3e:	f1 85       	ldd	r31, Z+9	; 0x09
    2e40:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	a4 81       	ldd	r26, Z+4	; 0x04
    2e48:	b5 81       	ldd	r27, Z+5	; 0x05
    2e4a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2e4e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e52:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e56:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2e5a:	40 91 0c 31 	lds	r20, 0x310C	; 0x80310c <xTickCount>
    2e5e:	50 91 0d 31 	lds	r21, 0x310D	; 0x80310d <xTickCount+0x1>
    2e62:	60 91 0e 31 	lds	r22, 0x310E	; 0x80310e <xTickCount+0x2>
    2e66:	70 91 0f 31 	lds	r23, 0x310F	; 0x80310f <xTickCount+0x3>
    2e6a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2e6e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e72:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e76:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2e7a:	48 17       	cp	r20, r24
    2e7c:	59 07       	cpc	r21, r25
    2e7e:	6a 07       	cpc	r22, r26
    2e80:	7b 07       	cpc	r23, r27
    2e82:	08 f4       	brcc	.+2      	; 0x2e86 <vTaskIncrementTick+0xf8>
    2e84:	7f c0       	rjmp	.+254    	; 0x2f84 <vTaskIncrementTick+0x1f6>
    2e86:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2e8a:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	f9 f0       	breq	.+62     	; 0x2ed2 <vTaskIncrementTick+0x144>
    2e94:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2e98:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2e9c:	07 80       	ldd	r0, Z+7	; 0x07
    2e9e:	f0 85       	ldd	r31, Z+8	; 0x08
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	c0 85       	ldd	r28, Z+8	; 0x08
    2ea4:	d1 85       	ldd	r29, Z+9	; 0x09
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eaa:	ac 81       	ldd	r26, Y+4	; 0x04
    2eac:	bd 81       	ldd	r27, Y+5	; 0x05
    2eae:	40 91 0c 31 	lds	r20, 0x310C	; 0x80310c <xTickCount>
    2eb2:	50 91 0d 31 	lds	r21, 0x310D	; 0x80310d <xTickCount+0x1>
    2eb6:	60 91 0e 31 	lds	r22, 0x310E	; 0x80310e <xTickCount+0x2>
    2eba:	70 91 0f 31 	lds	r23, 0x310F	; 0x80310f <xTickCount+0x3>
    2ebe:	48 17       	cp	r20, r24
    2ec0:	59 07       	cpc	r21, r25
    2ec2:	6a 07       	cpc	r22, r26
    2ec4:	7b 07       	cpc	r23, r27
    2ec6:	58 f1       	brcs	.+86     	; 0x2f1e <vTaskIncrementTick+0x190>
    2ec8:	0f 2e       	mov	r0, r31
    2eca:	fb e0       	ldi	r31, 0x0B	; 11
    2ecc:	ff 2e       	mov	r15, r31
    2ece:	f0 2d       	mov	r31, r0
    2ed0:	2f c0       	rjmp	.+94     	; 0x2f30 <vTaskIncrementTick+0x1a2>
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2edc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2ee0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2ee4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2ee8:	4d c0       	rjmp	.+154    	; 0x2f84 <vTaskIncrementTick+0x1f6>
    2eea:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2eee:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2ef2:	07 80       	ldd	r0, Z+7	; 0x07
    2ef4:	f0 85       	ldd	r31, Z+8	; 0x08
    2ef6:	e0 2d       	mov	r30, r0
    2ef8:	c0 85       	ldd	r28, Z+8	; 0x08
    2efa:	d1 85       	ldd	r29, Z+9	; 0x09
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	ac 81       	ldd	r26, Y+4	; 0x04
    2f02:	bd 81       	ldd	r27, Y+5	; 0x05
    2f04:	40 91 0c 31 	lds	r20, 0x310C	; 0x80310c <xTickCount>
    2f08:	50 91 0d 31 	lds	r21, 0x310D	; 0x80310d <xTickCount+0x1>
    2f0c:	60 91 0e 31 	lds	r22, 0x310E	; 0x80310e <xTickCount+0x2>
    2f10:	70 91 0f 31 	lds	r23, 0x310F	; 0x80310f <xTickCount+0x3>
    2f14:	48 17       	cp	r20, r24
    2f16:	59 07       	cpc	r21, r25
    2f18:	6a 07       	cpc	r22, r26
    2f1a:	7b 07       	cpc	r23, r27
    2f1c:	48 f4       	brcc	.+18     	; 0x2f30 <vTaskIncrementTick+0x1a2>
    2f1e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2f22:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f26:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f2a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f2e:	2a c0       	rjmp	.+84     	; 0x2f84 <vTaskIncrementTick+0x1f6>
    2f30:	8e 01       	movw	r16, r28
    2f32:	0e 5f       	subi	r16, 0xFE	; 254
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
    2f3c:	88 8d       	ldd	r24, Y+24	; 0x18
    2f3e:	99 8d       	ldd	r25, Y+25	; 0x19
    2f40:	89 2b       	or	r24, r25
    2f42:	21 f0       	breq	.+8      	; 0x2f4c <vTaskIncrementTick+0x1be>
    2f44:	ce 01       	movw	r24, r28
    2f46:	0e 96       	adiw	r24, 0x0e	; 14
    2f48:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
    2f4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f4e:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    2f52:	98 17       	cp	r25, r24
    2f54:	10 f4       	brcc	.+4      	; 0x2f5a <vTaskIncrementTick+0x1cc>
    2f56:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    2f5a:	f8 9e       	mul	r15, r24
    2f5c:	c0 01       	movw	r24, r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	b8 01       	movw	r22, r16
    2f62:	88 5c       	subi	r24, 0xC8	; 200
    2f64:	9e 4c       	sbci	r25, 0xCE	; 206
    2f66:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
    2f6a:	e0 91 20 31 	lds	r30, 0x3120	; 0x803120 <pxDelayedTaskList>
    2f6e:	f0 91 21 31 	lds	r31, 0x3121	; 0x803121 <pxDelayedTaskList+0x1>
    2f72:	80 81       	ld	r24, Z
    2f74:	81 11       	cpse	r24, r1
    2f76:	b9 cf       	rjmp	.-142    	; 0x2eea <vTaskIncrementTick+0x15c>
    2f78:	ac cf       	rjmp	.-168    	; 0x2ed2 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    2f7a:	80 91 07 31 	lds	r24, 0x3107	; 0x803107 <uxMissedTicks>
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	80 93 07 31 	sts	0x3107, r24	; 0x803107 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	ff 90       	pop	r15
    2f8e:	08 95       	ret

00002f90 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2f90:	cf 92       	push	r12
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2fa6:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    2faa:	81 50       	subi	r24, 0x01	; 1
    2fac:	80 93 08 31 	sts	0x3108, r24	; 0x803108 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2fb0:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	60 c0       	rjmp	.+192    	; 0x3078 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2fb8:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <uxCurrentNumberOfTasks>
    2fbc:	81 11       	cpse	r24, r1
    2fbe:	2c c0       	rjmp	.+88     	; 0x3018 <xTaskResumeAll+0x88>
    2fc0:	5e c0       	rjmp	.+188    	; 0x307e <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2fc2:	d7 01       	movw	r26, r14
    2fc4:	17 96       	adiw	r26, 0x07	; 7
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	18 97       	sbiw	r26, 0x08	; 8
    2fcc:	c0 85       	ldd	r28, Z+8	; 0x08
    2fce:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 96       	adiw	r24, 0x0e	; 14
    2fd4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2fd8:	8e 01       	movw	r16, r28
    2fda:	0e 5f       	subi	r16, 0xFE	; 254
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	c8 01       	movw	r24, r16
    2fe0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2fe4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fe6:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    2fea:	98 17       	cp	r25, r24
    2fec:	10 f4       	brcc	.+4      	; 0x2ff2 <xTaskResumeAll+0x62>
    2fee:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    2ff2:	d8 9e       	mul	r13, r24
    2ff4:	c0 01       	movw	r24, r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	b8 01       	movw	r22, r16
    2ffa:	88 5c       	subi	r24, 0xC8	; 200
    2ffc:	9e 4c       	sbci	r25, 0xCE	; 206
    2ffe:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3002:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    3006:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    300a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    300c:	82 8d       	ldd	r24, Z+26	; 0x1a
    300e:	98 17       	cp	r25, r24
    3010:	70 f0       	brcs	.+28     	; 0x302e <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3012:	cc 24       	eor	r12, r12
    3014:	c3 94       	inc	r12
    3016:	0b c0       	rjmp	.+22     	; 0x302e <xTaskResumeAll+0x9e>
    3018:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    301a:	0f 2e       	mov	r0, r31
    301c:	f3 e1       	ldi	r31, 0x13	; 19
    301e:	ef 2e       	mov	r14, r31
    3020:	f1 e3       	ldi	r31, 0x31	; 49
    3022:	ff 2e       	mov	r15, r31
    3024:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3026:	0f 2e       	mov	r0, r31
    3028:	fb e0       	ldi	r31, 0x0B	; 11
    302a:	df 2e       	mov	r13, r31
    302c:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    302e:	f7 01       	movw	r30, r14
    3030:	80 81       	ld	r24, Z
    3032:	81 11       	cpse	r24, r1
    3034:	c6 cf       	rjmp	.-116    	; 0x2fc2 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3036:	80 91 07 31 	lds	r24, 0x3107	; 0x803107 <uxMissedTicks>
    303a:	88 23       	and	r24, r24
    303c:	81 f0       	breq	.+32     	; 0x305e <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    303e:	80 91 07 31 	lds	r24, 0x3107	; 0x803107 <uxMissedTicks>
    3042:	88 23       	and	r24, r24
    3044:	99 f0       	breq	.+38     	; 0x306c <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    3046:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <vTaskIncrementTick>
						--uxMissedTicks;
    304a:	80 91 07 31 	lds	r24, 0x3107	; 0x803107 <uxMissedTicks>
    304e:	81 50       	subi	r24, 0x01	; 1
    3050:	80 93 07 31 	sts	0x3107, r24	; 0x803107 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3054:	80 91 07 31 	lds	r24, 0x3107	; 0x803107 <uxMissedTicks>
    3058:	81 11       	cpse	r24, r1
    305a:	f5 cf       	rjmp	.-22     	; 0x3046 <xTaskResumeAll+0xb6>
    305c:	07 c0       	rjmp	.+14     	; 0x306c <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    305e:	f1 e0       	ldi	r31, 0x01	; 1
    3060:	cf 16       	cp	r12, r31
    3062:	21 f0       	breq	.+8      	; 0x306c <xTaskResumeAll+0xdc>
    3064:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xMissedYield>
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	41 f4       	brne	.+16     	; 0x307c <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    306c:	10 92 06 31 	sts	0x3106, r1	; 0x803106 <xMissedYield>
					portYIELD_WITHIN_API();
    3070:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	03 c0       	rjmp	.+6      	; 0x307e <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	01 c0       	rjmp	.+2      	; 0x307e <xTaskResumeAll+0xee>
    307c:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    307e:	0f 90       	pop	r0
    3080:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	df 90       	pop	r13
    3090:	cf 90       	pop	r12
    3092:	08 95       	ret

00003094 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3094:	cf 92       	push	r12
    3096:	df 92       	push	r13
    3098:	ef 92       	push	r14
    309a:	ff 92       	push	r15
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	ec 01       	movw	r28, r24
    30a2:	6a 01       	movw	r12, r20
    30a4:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    30a6:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    30aa:	88 81       	ld	r24, Y
    30ac:	99 81       	ldd	r25, Y+1	; 0x01
    30ae:	aa 81       	ldd	r26, Y+2	; 0x02
    30b0:	bb 81       	ldd	r27, Y+3	; 0x03
    30b2:	c8 0e       	add	r12, r24
    30b4:	d9 1e       	adc	r13, r25
    30b6:	ea 1e       	adc	r14, r26
    30b8:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    30ba:	40 91 0c 31 	lds	r20, 0x310C	; 0x80310c <xTickCount>
    30be:	50 91 0d 31 	lds	r21, 0x310D	; 0x80310d <xTickCount+0x1>
    30c2:	60 91 0e 31 	lds	r22, 0x310E	; 0x80310e <xTickCount+0x2>
    30c6:	70 91 0f 31 	lds	r23, 0x310F	; 0x80310f <xTickCount+0x3>
    30ca:	48 17       	cp	r20, r24
    30cc:	59 07       	cpc	r21, r25
    30ce:	6a 07       	cpc	r22, r26
    30d0:	7b 07       	cpc	r23, r27
    30d2:	b8 f4       	brcc	.+46     	; 0x3102 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    30d4:	c8 16       	cp	r12, r24
    30d6:	d9 06       	cpc	r13, r25
    30d8:	ea 06       	cpc	r14, r26
    30da:	fb 06       	cpc	r15, r27
    30dc:	e0 f5       	brcc	.+120    	; 0x3156 <vTaskDelayUntil+0xc2>
    30de:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    30e2:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    30e6:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    30ea:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    30ee:	c8 82       	st	Y, r12
    30f0:	d9 82       	std	Y+1, r13	; 0x01
    30f2:	ea 82       	std	Y+2, r14	; 0x02
    30f4:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    30f6:	8c 15       	cp	r24, r12
    30f8:	9d 05       	cpc	r25, r13
    30fa:	ae 05       	cpc	r26, r14
    30fc:	bf 05       	cpc	r27, r15
    30fe:	f8 f4       	brcc	.+62     	; 0x313e <vTaskDelayUntil+0xaa>
    3100:	13 c0       	rjmp	.+38     	; 0x3128 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3102:	c8 16       	cp	r12, r24
    3104:	d9 06       	cpc	r13, r25
    3106:	ea 06       	cpc	r14, r26
    3108:	fb 06       	cpc	r15, r27
    310a:	00 f1       	brcs	.+64     	; 0x314c <vTaskDelayUntil+0xb8>
    310c:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    3110:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    3114:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    3118:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    311c:	8c 15       	cp	r24, r12
    311e:	9d 05       	cpc	r25, r13
    3120:	ae 05       	cpc	r26, r14
    3122:	bf 05       	cpc	r27, r15
    3124:	98 f0       	brcs	.+38     	; 0x314c <vTaskDelayUntil+0xb8>
    3126:	17 c0       	rjmp	.+46     	; 0x3156 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3128:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    312c:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    3130:	02 96       	adiw	r24, 0x02	; 2
    3132:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3136:	c7 01       	movw	r24, r14
    3138:	b6 01       	movw	r22, r12
    313a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    313e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3142:	81 11       	cpse	r24, r1
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3146:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
		}
	}
    314a:	0a c0       	rjmp	.+20     	; 0x3160 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    314c:	c8 82       	st	Y, r12
    314e:	d9 82       	std	Y+1, r13	; 0x01
    3150:	ea 82       	std	Y+2, r14	; 0x02
    3152:	fb 82       	std	Y+3, r15	; 0x03
    3154:	e9 cf       	rjmp	.-46     	; 0x3128 <vTaskDelayUntil+0x94>
    3156:	c8 82       	st	Y, r12
    3158:	d9 82       	std	Y+1, r13	; 0x01
    315a:	ea 82       	std	Y+2, r14	; 0x02
    315c:	fb 82       	std	Y+3, r15	; 0x03
    315e:	ef cf       	rjmp	.-34     	; 0x313e <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	df 90       	pop	r13
    316a:	cf 90       	pop	r12
    316c:	08 95       	ret

0000316e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    316e:	cf 92       	push	r12
    3170:	df 92       	push	r13
    3172:	ef 92       	push	r14
    3174:	ff 92       	push	r15
    3176:	6b 01       	movw	r12, r22
    3178:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    317a:	67 2b       	or	r22, r23
    317c:	68 2b       	or	r22, r24
    317e:	69 2b       	or	r22, r25
    3180:	e9 f0       	breq	.+58     	; 0x31bc <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3182:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3186:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    318a:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    318e:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    3192:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    3196:	c8 0e       	add	r12, r24
    3198:	d9 1e       	adc	r13, r25
    319a:	ea 1e       	adc	r14, r26
    319c:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    319e:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    31a2:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    31a6:	02 96       	adiw	r24, 0x02	; 2
    31a8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    31ac:	c7 01       	movw	r24, r14
    31ae:	b6 01       	movw	r22, r12
    31b0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    31b4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    31b8:	81 11       	cpse	r24, r1
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    31bc:	0e 94 c5 11 	call	0x238a	; 0x238a <vPortYield>
		}
	}
    31c0:	ff 90       	pop	r15
    31c2:	ef 90       	pop	r14
    31c4:	df 90       	pop	r13
    31c6:	cf 90       	pop	r12
    31c8:	08 95       	ret

000031ca <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    31ca:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    31ce:	81 11       	cpse	r24, r1
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    31d2:	e0 91 0a 31 	lds	r30, 0x310A	; 0x80310a <uxTopReadyPriority>
    31d6:	4b e0       	ldi	r20, 0x0B	; 11
    31d8:	e4 9f       	mul	r30, r20
    31da:	f0 01       	movw	r30, r0
    31dc:	11 24       	eor	r1, r1
    31de:	e8 5c       	subi	r30, 0xC8	; 200
    31e0:	fe 4c       	sbci	r31, 0xCE	; 206
    31e2:	80 81       	ld	r24, Z
    31e4:	88 23       	and	r24, r24
    31e6:	29 f0       	breq	.+10     	; 0x31f2 <vTaskSwitchContext+0x28>
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <xMissedYield>
    31f0:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    31f2:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    31f4:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <uxTopReadyPriority>
    31f8:	81 50       	subi	r24, 0x01	; 1
    31fa:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    31fe:	e0 91 0a 31 	lds	r30, 0x310A	; 0x80310a <uxTopReadyPriority>
    3202:	9e 9f       	mul	r25, r30
    3204:	f0 01       	movw	r30, r0
    3206:	11 24       	eor	r1, r1
    3208:	e8 5c       	subi	r30, 0xC8	; 200
    320a:	fe 4c       	sbci	r31, 0xCE	; 206
    320c:	80 81       	ld	r24, Z
    320e:	88 23       	and	r24, r24
    3210:	89 f3       	breq	.-30     	; 0x31f4 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3212:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <uxTopReadyPriority>
    3216:	28 2f       	mov	r18, r24
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	4b e0       	ldi	r20, 0x0B	; 11
    321c:	84 9f       	mul	r24, r20
    321e:	c0 01       	movw	r24, r0
    3220:	11 24       	eor	r1, r1
    3222:	dc 01       	movw	r26, r24
    3224:	a8 5c       	subi	r26, 0xC8	; 200
    3226:	be 4c       	sbci	r27, 0xCE	; 206
    3228:	11 96       	adiw	r26, 0x01	; 1
    322a:	ed 91       	ld	r30, X+
    322c:	fc 91       	ld	r31, X
    322e:	12 97       	sbiw	r26, 0x02	; 2
    3230:	04 80       	ldd	r0, Z+4	; 0x04
    3232:	f5 81       	ldd	r31, Z+5	; 0x05
    3234:	e0 2d       	mov	r30, r0
    3236:	11 96       	adiw	r26, 0x01	; 1
    3238:	ed 93       	st	X+, r30
    323a:	fc 93       	st	X, r31
    323c:	12 97       	sbiw	r26, 0x02	; 2
    323e:	85 5c       	subi	r24, 0xC5	; 197
    3240:	9e 4c       	sbci	r25, 0xCE	; 206
    3242:	e8 17       	cp	r30, r24
    3244:	f9 07       	cpc	r31, r25
    3246:	61 f4       	brne	.+24     	; 0x3260 <vTaskSwitchContext+0x96>
    3248:	84 81       	ldd	r24, Z+4	; 0x04
    324a:	95 81       	ldd	r25, Z+5	; 0x05
    324c:	4b e0       	ldi	r20, 0x0B	; 11
    324e:	42 9f       	mul	r20, r18
    3250:	f0 01       	movw	r30, r0
    3252:	43 9f       	mul	r20, r19
    3254:	f0 0d       	add	r31, r0
    3256:	11 24       	eor	r1, r1
    3258:	e8 5c       	subi	r30, 0xC8	; 200
    325a:	fe 4c       	sbci	r31, 0xCE	; 206
    325c:	81 83       	std	Z+1, r24	; 0x01
    325e:	92 83       	std	Z+2, r25	; 0x02
    3260:	8b e0       	ldi	r24, 0x0B	; 11
    3262:	82 9f       	mul	r24, r18
    3264:	f0 01       	movw	r30, r0
    3266:	83 9f       	mul	r24, r19
    3268:	f0 0d       	add	r31, r0
    326a:	11 24       	eor	r1, r1
    326c:	e8 5c       	subi	r30, 0xC8	; 200
    326e:	fe 4c       	sbci	r31, 0xCE	; 206
    3270:	01 80       	ldd	r0, Z+1	; 0x01
    3272:	f2 81       	ldd	r31, Z+2	; 0x02
    3274:	e0 2d       	mov	r30, r0
    3276:	80 85       	ldd	r24, Z+8	; 0x08
    3278:	91 85       	ldd	r25, Z+9	; 0x09
    327a:	80 93 64 31 	sts	0x3164, r24	; 0x803164 <pxCurrentTCB>
    327e:	90 93 65 31 	sts	0x3165, r25	; 0x803165 <pxCurrentTCB+0x1>
    3282:	08 95       	ret

00003284 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3284:	cf 92       	push	r12
    3286:	df 92       	push	r13
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	6a 01       	movw	r12, r20
    328e:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3290:	60 91 64 31 	lds	r22, 0x3164	; 0x803164 <pxCurrentTCB>
    3294:	70 91 65 31 	lds	r23, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    3298:	62 5f       	subi	r22, 0xF2	; 242
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	0e 94 a0 10 	call	0x2140	; 0x2140 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    32a0:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    32a4:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    32a8:	02 96       	adiw	r24, 0x02	; 2
    32aa:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    32ae:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    32b2:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    32b6:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    32ba:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    32be:	bc 01       	movw	r22, r24
    32c0:	cd 01       	movw	r24, r26
    32c2:	6c 0d       	add	r22, r12
    32c4:	7d 1d       	adc	r23, r13
    32c6:	8e 1d       	adc	r24, r14
    32c8:	9f 1d       	adc	r25, r15
    32ca:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    32ce:	ff 90       	pop	r15
    32d0:	ef 90       	pop	r14
    32d2:	df 90       	pop	r13
    32d4:	cf 90       	pop	r12
    32d6:	08 95       	ret

000032d8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    32e0:	dc 01       	movw	r26, r24
    32e2:	17 96       	adiw	r26, 0x07	; 7
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	18 97       	sbiw	r26, 0x08	; 8
    32ea:	c0 85       	ldd	r28, Z+8	; 0x08
    32ec:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    32ee:	8e 01       	movw	r16, r28
    32f0:	02 5f       	subi	r16, 0xF2	; 242
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	c8 01       	movw	r24, r16
    32f6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    32fa:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <uxSchedulerSuspended>
    32fe:	81 11       	cpse	r24, r1
    3300:	16 c0       	rjmp	.+44     	; 0x332e <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3302:	0c 50       	subi	r16, 0x0C	; 12
    3304:	11 09       	sbc	r17, r1
    3306:	c8 01       	movw	r24, r16
    3308:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    330c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    330e:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    3312:	98 17       	cp	r25, r24
    3314:	10 f4       	brcc	.+4      	; 0x331a <xTaskRemoveFromEventList+0x42>
    3316:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    331a:	bb e0       	ldi	r27, 0x0B	; 11
    331c:	8b 9f       	mul	r24, r27
    331e:	c0 01       	movw	r24, r0
    3320:	11 24       	eor	r1, r1
    3322:	b8 01       	movw	r22, r16
    3324:	88 5c       	subi	r24, 0xC8	; 200
    3326:	9e 4c       	sbci	r25, 0xCE	; 206
    3328:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
    332c:	05 c0       	rjmp	.+10     	; 0x3338 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    332e:	b8 01       	movw	r22, r16
    3330:	83 e1       	ldi	r24, 0x13	; 19
    3332:	91 e3       	ldi	r25, 0x31	; 49
    3334:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3338:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    333c:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3344:	92 8d       	ldd	r25, Z+26	; 0x1a
    3346:	29 17       	cp	r18, r25
    3348:	08 f4       	brcc	.+2      	; 0x334c <xTaskRemoveFromEventList+0x74>
    334a:	80 e0       	ldi	r24, 0x00	; 0
}
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3356:	20 91 05 31 	lds	r18, 0x3105	; 0x803105 <xNumOfOverflows>
    335a:	fc 01       	movw	r30, r24
    335c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    335e:	40 91 0c 31 	lds	r20, 0x310C	; 0x80310c <xTickCount>
    3362:	50 91 0d 31 	lds	r21, 0x310D	; 0x80310d <xTickCount+0x1>
    3366:	60 91 0e 31 	lds	r22, 0x310E	; 0x80310e <xTickCount+0x2>
    336a:	70 91 0f 31 	lds	r23, 0x310F	; 0x80310f <xTickCount+0x3>
    336e:	41 83       	std	Z+1, r20	; 0x01
    3370:	52 83       	std	Z+2, r21	; 0x02
    3372:	63 83       	std	Z+3, r22	; 0x03
    3374:	74 83       	std	Z+4, r23	; 0x04
    3376:	08 95       	ret

00003378 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3378:	8f 92       	push	r8
    337a:	9f 92       	push	r9
    337c:	af 92       	push	r10
    337e:	bf 92       	push	r11
    3380:	cf 92       	push	r12
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3398:	80 91 05 31 	lds	r24, 0x3105	; 0x803105 <xNumOfOverflows>
    339c:	90 81       	ld	r25, Z
    339e:	98 17       	cp	r25, r24
    33a0:	89 f0       	breq	.+34     	; 0x33c4 <xTaskCheckForTimeOut+0x4c>
    33a2:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    33a6:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    33aa:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    33ae:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    33b2:	01 81       	ldd	r16, Z+1	; 0x01
    33b4:	12 81       	ldd	r17, Z+2	; 0x02
    33b6:	23 81       	ldd	r18, Z+3	; 0x03
    33b8:	34 81       	ldd	r19, Z+4	; 0x04
    33ba:	80 17       	cp	r24, r16
    33bc:	91 07       	cpc	r25, r17
    33be:	a2 07       	cpc	r26, r18
    33c0:	b3 07       	cpc	r27, r19
    33c2:	a8 f5       	brcc	.+106    	; 0x342e <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    33c4:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <xTickCount>
    33c8:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <xTickCount+0x1>
    33cc:	a0 91 0e 31 	lds	r26, 0x310E	; 0x80310e <xTickCount+0x2>
    33d0:	b0 91 0f 31 	lds	r27, 0x310F	; 0x80310f <xTickCount+0x3>
    33d4:	c1 80       	ldd	r12, Z+1	; 0x01
    33d6:	d2 80       	ldd	r13, Z+2	; 0x02
    33d8:	e3 80       	ldd	r14, Z+3	; 0x03
    33da:	f4 80       	ldd	r15, Z+4	; 0x04
    33dc:	eb 01       	movw	r28, r22
    33de:	08 81       	ld	r16, Y
    33e0:	19 81       	ldd	r17, Y+1	; 0x01
    33e2:	2a 81       	ldd	r18, Y+2	; 0x02
    33e4:	3b 81       	ldd	r19, Y+3	; 0x03
    33e6:	8c 19       	sub	r24, r12
    33e8:	9d 09       	sbc	r25, r13
    33ea:	ae 09       	sbc	r26, r14
    33ec:	bf 09       	sbc	r27, r15
    33ee:	80 17       	cp	r24, r16
    33f0:	91 07       	cpc	r25, r17
    33f2:	a2 07       	cpc	r26, r18
    33f4:	b3 07       	cpc	r27, r19
    33f6:	e8 f4       	brcc	.+58     	; 0x3432 <xTaskCheckForTimeOut+0xba>
    33f8:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    33fa:	80 90 0c 31 	lds	r8, 0x310C	; 0x80310c <xTickCount>
    33fe:	90 90 0d 31 	lds	r9, 0x310D	; 0x80310d <xTickCount+0x1>
    3402:	a0 90 0e 31 	lds	r10, 0x310E	; 0x80310e <xTickCount+0x2>
    3406:	b0 90 0f 31 	lds	r11, 0x310F	; 0x80310f <xTickCount+0x3>
    340a:	b5 01       	movw	r22, r10
    340c:	a4 01       	movw	r20, r8
    340e:	4c 19       	sub	r20, r12
    3410:	5d 09       	sbc	r21, r13
    3412:	6e 09       	sbc	r22, r14
    3414:	7f 09       	sbc	r23, r15
    3416:	04 1b       	sub	r16, r20
    3418:	15 0b       	sbc	r17, r21
    341a:	26 0b       	sbc	r18, r22
    341c:	37 0b       	sbc	r19, r23
    341e:	08 83       	st	Y, r16
    3420:	19 83       	std	Y+1, r17	; 0x01
    3422:	2a 83       	std	Y+2, r18	; 0x02
    3424:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3426:	0e 94 ab 19 	call	0x3356	; 0x3356 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	03 c0       	rjmp	.+6      	; 0x3434 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3432:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3434:	0f 90       	pop	r0
    3436:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	df 90       	pop	r13
    3446:	cf 90       	pop	r12
    3448:	bf 90       	pop	r11
    344a:	af 90       	pop	r10
    344c:	9f 90       	pop	r9
    344e:	8f 90       	pop	r8
    3450:	08 95       	ret

00003452 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <xMissedYield>
    3458:	08 95       	ret

0000345a <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	21 f4       	brne	.+8      	; 0x3466 <uxTaskGetStackHighWaterMark+0xc>
    345e:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    3462:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3466:	dc 01       	movw	r26, r24
    3468:	5b 96       	adiw	r26, 0x1b	; 27
    346a:	ed 91       	ld	r30, X+
    346c:	fc 91       	ld	r31, X
    346e:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3470:	80 81       	ld	r24, Z
    3472:	81 31       	cpi	r24, 0x11	; 17
    3474:	41 f4       	brne	.+16     	; 0x3486 <uxTaskGetStackHighWaterMark+0x2c>
    3476:	31 96       	adiw	r30, 0x01	; 1
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    347c:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    347e:	21 91       	ld	r18, Z+
    3480:	21 31       	cpi	r18, 0x11	; 17
    3482:	e1 f3       	breq	.-8      	; 0x347c <uxTaskGetStackHighWaterMark+0x22>
    3484:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    348a:	08 95       	ret

0000348c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    348c:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <pxCurrentTCB>
    3490:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <pxCurrentTCB+0x1>

		return xReturn;
	}
    3494:	08 95       	ret

00003496 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    34a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    34a2:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    34a6:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    34aa:	5a 96       	adiw	r26, 0x1a	; 26
    34ac:	8c 91       	ld	r24, X
    34ae:	28 17       	cp	r18, r24
    34b0:	08 f0       	brcs	.+2      	; 0x34b4 <vTaskPriorityInherit+0x1e>
    34b2:	41 c0       	rjmp	.+130    	; 0x3536 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    34b4:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    34b8:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    34bc:	5a 96       	adiw	r26, 0x1a	; 26
    34be:	3c 91       	ld	r19, X
    34c0:	84 e0       	ldi	r24, 0x04	; 4
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	a0 e0       	ldi	r26, 0x00	; 0
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	83 1b       	sub	r24, r19
    34ca:	91 09       	sbc	r25, r1
    34cc:	a1 09       	sbc	r26, r1
    34ce:	b1 09       	sbc	r27, r1
    34d0:	86 87       	std	Z+14, r24	; 0x0e
    34d2:	97 87       	std	Z+15, r25	; 0x0f
    34d4:	a0 8b       	std	Z+16, r26	; 0x10
    34d6:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    34d8:	8b e0       	ldi	r24, 0x0B	; 11
    34da:	28 9f       	mul	r18, r24
    34dc:	90 01       	movw	r18, r0
    34de:	11 24       	eor	r1, r1
    34e0:	28 5c       	subi	r18, 0xC8	; 200
    34e2:	3e 4c       	sbci	r19, 0xCE	; 206
    34e4:	84 85       	ldd	r24, Z+12	; 0x0c
    34e6:	95 85       	ldd	r25, Z+13	; 0x0d
    34e8:	82 17       	cp	r24, r18
    34ea:	93 07       	cpc	r25, r19
    34ec:	e9 f4       	brne	.+58     	; 0x3528 <vTaskPriorityInherit+0x92>
    34ee:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    34f0:	ef 01       	movw	r28, r30
    34f2:	22 96       	adiw	r28, 0x02	; 2
    34f4:	ce 01       	movw	r24, r28
    34f6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    34fa:	e0 91 64 31 	lds	r30, 0x3164	; 0x803164 <pxCurrentTCB>
    34fe:	f0 91 65 31 	lds	r31, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    3502:	82 8d       	ldd	r24, Z+26	; 0x1a
    3504:	f8 01       	movw	r30, r16
    3506:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3508:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    350c:	98 17       	cp	r25, r24
    350e:	10 f4       	brcc	.+4      	; 0x3514 <vTaskPriorityInherit+0x7e>
    3510:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    3514:	fb e0       	ldi	r31, 0x0B	; 11
    3516:	8f 9f       	mul	r24, r31
    3518:	c0 01       	movw	r24, r0
    351a:	11 24       	eor	r1, r1
    351c:	be 01       	movw	r22, r28
    351e:	88 5c       	subi	r24, 0xC8	; 200
    3520:	9e 4c       	sbci	r25, 0xCE	; 206
    3522:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
    3526:	07 c0       	rjmp	.+14     	; 0x3536 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3528:	a0 91 64 31 	lds	r26, 0x3164	; 0x803164 <pxCurrentTCB>
    352c:	b0 91 65 31 	lds	r27, 0x3165	; 0x803165 <pxCurrentTCB+0x1>
    3530:	5a 96       	adiw	r26, 0x1a	; 26
    3532:	8c 91       	ld	r24, X
    3534:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	08 95       	ret

00003540 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	49 f1       	breq	.+82     	; 0x359e <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    354c:	fc 01       	movw	r30, r24
    354e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3550:	27 a1       	ldd	r18, Z+39	; 0x27
    3552:	32 17       	cp	r19, r18
    3554:	21 f1       	breq	.+72     	; 0x359e <vTaskPriorityDisinherit+0x5e>
    3556:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3558:	8c 01       	movw	r16, r24
    355a:	0e 5f       	subi	r16, 0xFE	; 254
    355c:	1f 4f       	sbci	r17, 0xFF	; 255
    355e:	c8 01       	movw	r24, r16
    3560:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3564:	8f a1       	ldd	r24, Y+39	; 0x27
    3566:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3568:	44 e0       	ldi	r20, 0x04	; 4
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	60 e0       	ldi	r22, 0x00	; 0
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	48 1b       	sub	r20, r24
    3572:	51 09       	sbc	r21, r1
    3574:	61 09       	sbc	r22, r1
    3576:	71 09       	sbc	r23, r1
    3578:	4e 87       	std	Y+14, r20	; 0x0e
    357a:	5f 87       	std	Y+15, r21	; 0x0f
    357c:	68 8b       	std	Y+16, r22	; 0x10
    357e:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3580:	90 91 0a 31 	lds	r25, 0x310A	; 0x80310a <uxTopReadyPriority>
    3584:	98 17       	cp	r25, r24
    3586:	10 f4       	brcc	.+4      	; 0x358c <vTaskPriorityDisinherit+0x4c>
    3588:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxTopReadyPriority>
    358c:	fb e0       	ldi	r31, 0x0B	; 11
    358e:	8f 9f       	mul	r24, r31
    3590:	c0 01       	movw	r24, r0
    3592:	11 24       	eor	r1, r1
    3594:	b8 01       	movw	r22, r16
    3596:	88 5c       	subi	r24, 0xC8	; 200
    3598:	9e 4c       	sbci	r25, 0xCE	; 206
    359a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vListInsertEnd>
			}
		}
	}
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	08 95       	ret

000035a8 <__divmodsi4>:
    35a8:	05 2e       	mov	r0, r21
    35aa:	97 fb       	bst	r25, 7
    35ac:	1e f4       	brtc	.+6      	; 0x35b4 <__divmodsi4+0xc>
    35ae:	00 94       	com	r0
    35b0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__negsi2>
    35b4:	57 fd       	sbrc	r21, 7
    35b6:	07 d0       	rcall	.+14     	; 0x35c6 <__divmodsi4_neg2>
    35b8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__udivmodsi4>
    35bc:	07 fc       	sbrc	r0, 7
    35be:	03 d0       	rcall	.+6      	; 0x35c6 <__divmodsi4_neg2>
    35c0:	4e f4       	brtc	.+18     	; 0x35d4 <__divmodsi4_exit>
    35c2:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__negsi2>

000035c6 <__divmodsi4_neg2>:
    35c6:	50 95       	com	r21
    35c8:	40 95       	com	r20
    35ca:	30 95       	com	r19
    35cc:	21 95       	neg	r18
    35ce:	3f 4f       	sbci	r19, 0xFF	; 255
    35d0:	4f 4f       	sbci	r20, 0xFF	; 255
    35d2:	5f 4f       	sbci	r21, 0xFF	; 255

000035d4 <__divmodsi4_exit>:
    35d4:	08 95       	ret

000035d6 <__negsi2>:
    35d6:	90 95       	com	r25
    35d8:	80 95       	com	r24
    35da:	70 95       	com	r23
    35dc:	61 95       	neg	r22
    35de:	7f 4f       	sbci	r23, 0xFF	; 255
    35e0:	8f 4f       	sbci	r24, 0xFF	; 255
    35e2:	9f 4f       	sbci	r25, 0xFF	; 255
    35e4:	08 95       	ret

000035e6 <__udivmodsi4>:
    35e6:	a1 e2       	ldi	r26, 0x21	; 33
    35e8:	1a 2e       	mov	r1, r26
    35ea:	aa 1b       	sub	r26, r26
    35ec:	bb 1b       	sub	r27, r27
    35ee:	fd 01       	movw	r30, r26
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <__udivmodsi4_ep>

000035f2 <__udivmodsi4_loop>:
    35f2:	aa 1f       	adc	r26, r26
    35f4:	bb 1f       	adc	r27, r27
    35f6:	ee 1f       	adc	r30, r30
    35f8:	ff 1f       	adc	r31, r31
    35fa:	a2 17       	cp	r26, r18
    35fc:	b3 07       	cpc	r27, r19
    35fe:	e4 07       	cpc	r30, r20
    3600:	f5 07       	cpc	r31, r21
    3602:	20 f0       	brcs	.+8      	; 0x360c <__udivmodsi4_ep>
    3604:	a2 1b       	sub	r26, r18
    3606:	b3 0b       	sbc	r27, r19
    3608:	e4 0b       	sbc	r30, r20
    360a:	f5 0b       	sbc	r31, r21

0000360c <__udivmodsi4_ep>:
    360c:	66 1f       	adc	r22, r22
    360e:	77 1f       	adc	r23, r23
    3610:	88 1f       	adc	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	1a 94       	dec	r1
    3616:	69 f7       	brne	.-38     	; 0x35f2 <__udivmodsi4_loop>
    3618:	60 95       	com	r22
    361a:	70 95       	com	r23
    361c:	80 95       	com	r24
    361e:	90 95       	com	r25
    3620:	9b 01       	movw	r18, r22
    3622:	ac 01       	movw	r20, r24
    3624:	bd 01       	movw	r22, r26
    3626:	cf 01       	movw	r24, r30
    3628:	08 95       	ret

0000362a <memcpy>:
    362a:	fb 01       	movw	r30, r22
    362c:	dc 01       	movw	r26, r24
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <memcpy+0xa>
    3630:	01 90       	ld	r0, Z+
    3632:	0d 92       	st	X+, r0
    3634:	41 50       	subi	r20, 0x01	; 1
    3636:	50 40       	sbci	r21, 0x00	; 0
    3638:	d8 f7       	brcc	.-10     	; 0x3630 <memcpy+0x6>
    363a:	08 95       	ret

0000363c <memset>:
    363c:	dc 01       	movw	r26, r24
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <memset+0x6>
    3640:	6d 93       	st	X+, r22
    3642:	41 50       	subi	r20, 0x01	; 1
    3644:	50 40       	sbci	r21, 0x00	; 0
    3646:	e0 f7       	brcc	.-8      	; 0x3640 <memset+0x4>
    3648:	08 95       	ret

0000364a <strncpy>:
    364a:	fb 01       	movw	r30, r22
    364c:	dc 01       	movw	r26, r24
    364e:	41 50       	subi	r20, 0x01	; 1
    3650:	50 40       	sbci	r21, 0x00	; 0
    3652:	48 f0       	brcs	.+18     	; 0x3666 <strncpy+0x1c>
    3654:	01 90       	ld	r0, Z+
    3656:	0d 92       	st	X+, r0
    3658:	00 20       	and	r0, r0
    365a:	c9 f7       	brne	.-14     	; 0x364e <strncpy+0x4>
    365c:	01 c0       	rjmp	.+2      	; 0x3660 <strncpy+0x16>
    365e:	1d 92       	st	X+, r1
    3660:	41 50       	subi	r20, 0x01	; 1
    3662:	50 40       	sbci	r21, 0x00	; 0
    3664:	e0 f7       	brcc	.-8      	; 0x365e <strncpy+0x14>
    3666:	08 95       	ret

00003668 <ultoa>:
    3668:	25 32       	cpi	r18, 0x25	; 37
    366a:	31 05       	cpc	r19, r1
    366c:	20 f4       	brcc	.+8      	; 0x3676 <ultoa+0xe>
    366e:	22 30       	cpi	r18, 0x02	; 2
    3670:	10 f0       	brcs	.+4      	; 0x3676 <ultoa+0xe>
    3672:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__ultoa_ncheck>
    3676:	fa 01       	movw	r30, r20
    3678:	10 82       	st	Z, r1
    367a:	ca 01       	movw	r24, r20
    367c:	08 95       	ret

0000367e <__ultoa_ncheck>:
    367e:	bb 27       	eor	r27, r27

00003680 <__ultoa_common>:
    3680:	fa 01       	movw	r30, r20
    3682:	a6 2f       	mov	r26, r22
    3684:	62 17       	cp	r22, r18
    3686:	71 05       	cpc	r23, r1
    3688:	81 05       	cpc	r24, r1
    368a:	91 05       	cpc	r25, r1
    368c:	33 0b       	sbc	r19, r19
    368e:	30 fb       	bst	r19, 0
    3690:	66 f0       	brts	.+24     	; 0x36aa <__ultoa_common+0x2a>
    3692:	aa 27       	eor	r26, r26
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	88 1f       	adc	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	a2 17       	cp	r26, r18
    36a0:	10 f0       	brcs	.+4      	; 0x36a6 <__ultoa_common+0x26>
    36a2:	a2 1b       	sub	r26, r18
    36a4:	63 95       	inc	r22
    36a6:	38 50       	subi	r19, 0x08	; 8
    36a8:	a9 f7       	brne	.-22     	; 0x3694 <__ultoa_common+0x14>
    36aa:	a0 5d       	subi	r26, 0xD0	; 208
    36ac:	aa 33       	cpi	r26, 0x3A	; 58
    36ae:	08 f0       	brcs	.+2      	; 0x36b2 <__ultoa_common+0x32>
    36b0:	a9 5d       	subi	r26, 0xD9	; 217
    36b2:	a1 93       	st	Z+, r26
    36b4:	36 f7       	brtc	.-52     	; 0x3682 <__ultoa_common+0x2>
    36b6:	b1 11       	cpse	r27, r1
    36b8:	b1 93       	st	Z+, r27
    36ba:	10 82       	st	Z, r1
    36bc:	ca 01       	movw	r24, r20
    36be:	0c 94 86 1b 	jmp	0x370c	; 0x370c <strrev>

000036c2 <utoa>:
    36c2:	45 32       	cpi	r20, 0x25	; 37
    36c4:	51 05       	cpc	r21, r1
    36c6:	20 f4       	brcc	.+8      	; 0x36d0 <utoa+0xe>
    36c8:	42 30       	cpi	r20, 0x02	; 2
    36ca:	10 f0       	brcs	.+4      	; 0x36d0 <utoa+0xe>
    36cc:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__utoa_ncheck>
    36d0:	fb 01       	movw	r30, r22
    36d2:	10 82       	st	Z, r1
    36d4:	cb 01       	movw	r24, r22
    36d6:	08 95       	ret

000036d8 <__utoa_ncheck>:
    36d8:	bb 27       	eor	r27, r27

000036da <__utoa_common>:
    36da:	fb 01       	movw	r30, r22
    36dc:	55 27       	eor	r21, r21
    36de:	aa 27       	eor	r26, r26
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	aa 1f       	adc	r26, r26
    36e6:	a4 17       	cp	r26, r20
    36e8:	10 f0       	brcs	.+4      	; 0x36ee <__utoa_common+0x14>
    36ea:	a4 1b       	sub	r26, r20
    36ec:	83 95       	inc	r24
    36ee:	50 51       	subi	r21, 0x10	; 16
    36f0:	b9 f7       	brne	.-18     	; 0x36e0 <__utoa_common+0x6>
    36f2:	a0 5d       	subi	r26, 0xD0	; 208
    36f4:	aa 33       	cpi	r26, 0x3A	; 58
    36f6:	08 f0       	brcs	.+2      	; 0x36fa <__utoa_common+0x20>
    36f8:	a9 5d       	subi	r26, 0xD9	; 217
    36fa:	a1 93       	st	Z+, r26
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	79 f7       	brne	.-34     	; 0x36de <__utoa_common+0x4>
    3700:	b1 11       	cpse	r27, r1
    3702:	b1 93       	st	Z+, r27
    3704:	11 92       	st	Z+, r1
    3706:	cb 01       	movw	r24, r22
    3708:	0c 94 86 1b 	jmp	0x370c	; 0x370c <strrev>

0000370c <strrev>:
    370c:	dc 01       	movw	r26, r24
    370e:	fc 01       	movw	r30, r24
    3710:	67 2f       	mov	r22, r23
    3712:	71 91       	ld	r23, Z+
    3714:	77 23       	and	r23, r23
    3716:	e1 f7       	brne	.-8      	; 0x3710 <strrev+0x4>
    3718:	32 97       	sbiw	r30, 0x02	; 2
    371a:	04 c0       	rjmp	.+8      	; 0x3724 <strrev+0x18>
    371c:	7c 91       	ld	r23, X
    371e:	6d 93       	st	X+, r22
    3720:	70 83       	st	Z, r23
    3722:	62 91       	ld	r22, -Z
    3724:	ae 17       	cp	r26, r30
    3726:	bf 07       	cpc	r27, r31
    3728:	c8 f3       	brcs	.-14     	; 0x371c <strrev+0x10>
    372a:	08 95       	ret

0000372c <__mulsi3>:
    372c:	db 01       	movw	r26, r22
    372e:	8f 93       	push	r24
    3730:	9f 93       	push	r25
    3732:	0e 94 af 1b 	call	0x375e	; 0x375e <__muluhisi3>
    3736:	bf 91       	pop	r27
    3738:	af 91       	pop	r26
    373a:	a2 9f       	mul	r26, r18
    373c:	80 0d       	add	r24, r0
    373e:	91 1d       	adc	r25, r1
    3740:	a3 9f       	mul	r26, r19
    3742:	90 0d       	add	r25, r0
    3744:	b2 9f       	mul	r27, r18
    3746:	90 0d       	add	r25, r0
    3748:	11 24       	eor	r1, r1
    374a:	08 95       	ret

0000374c <__tablejump2__>:
    374c:	ee 0f       	add	r30, r30
    374e:	ff 1f       	adc	r31, r31
    3750:	88 1f       	adc	r24, r24
    3752:	8b bf       	out	0x3b, r24	; 59
    3754:	07 90       	elpm	r0, Z+
    3756:	f6 91       	elpm	r31, Z
    3758:	e0 2d       	mov	r30, r0
    375a:	1b be       	out	0x3b, r1	; 59
    375c:	19 94       	eijmp

0000375e <__muluhisi3>:
    375e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__umulhisi3>
    3762:	a5 9f       	mul	r26, r21
    3764:	90 0d       	add	r25, r0
    3766:	b4 9f       	mul	r27, r20
    3768:	90 0d       	add	r25, r0
    376a:	a4 9f       	mul	r26, r20
    376c:	80 0d       	add	r24, r0
    376e:	91 1d       	adc	r25, r1
    3770:	11 24       	eor	r1, r1
    3772:	08 95       	ret

00003774 <__umulhisi3>:
    3774:	a2 9f       	mul	r26, r18
    3776:	b0 01       	movw	r22, r0
    3778:	b3 9f       	mul	r27, r19
    377a:	c0 01       	movw	r24, r0
    377c:	a3 9f       	mul	r26, r19
    377e:	70 0d       	add	r23, r0
    3780:	81 1d       	adc	r24, r1
    3782:	11 24       	eor	r1, r1
    3784:	91 1d       	adc	r25, r1
    3786:	b2 9f       	mul	r27, r18
    3788:	70 0d       	add	r23, r0
    378a:	81 1d       	adc	r24, r1
    378c:	11 24       	eor	r1, r1
    378e:	91 1d       	adc	r25, r1
    3790:	08 95       	ret

00003792 <_exit>:
    3792:	f8 94       	cli

00003794 <__stop_program>:
    3794:	ff cf       	rjmp	.-2      	; 0x3794 <__stop_program>
