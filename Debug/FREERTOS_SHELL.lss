
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  00003f0e  00003fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a4  0080213e  0080213e  000040e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  0000950f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000dfa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00010fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0001351e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__ctors_end>
       4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
       8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
       c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      10:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      14:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      18:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      1c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      20:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      24:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      28:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      2c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      30:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      34:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      38:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      3c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      40:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      44:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      48:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      4c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      50:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      54:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      58:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      5c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      60:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      64:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_25>
      68:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      6c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      70:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_28>
      74:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      78:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      7c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      80:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      84:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      88:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      8c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      90:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      94:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      98:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      9c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      a0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      a4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      a8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      ac:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      b0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      b4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      b8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      bc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      c0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      c4:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__vector_49>
      c8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      cc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      d0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      d4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      d8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      dc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      e0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      e4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      e8:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_58>
      ec:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      f0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      f4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      f8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
      fc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     100:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     104:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     108:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     10c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     110:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     114:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     118:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     11c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     120:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     124:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     128:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     12c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     130:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     134:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     138:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     13c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     140:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     144:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     148:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     14c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     150:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     154:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     158:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     15c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     160:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_88>
     164:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     168:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     16c:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_91>
     170:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     174:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     178:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     17c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     180:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     184:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     188:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     18c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     190:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     194:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     198:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     19c:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1a0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1a4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1a8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1ac:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1b0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1b4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1b8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1bc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1c0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1c4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1c8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1cc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1d0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1d4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1d8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1dc:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1e0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1e4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1e8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1ec:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1f0:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1f4:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1f8:	0c 94 11 03 	jmp	0x622	; 0x622 <__bad_interrupt>
     1fc:	7a 0d       	add	r23, r10
     1fe:	7d 0d       	add	r23, r13
     200:	80 0d       	add	r24, r0
     202:	83 0d       	add	r24, r3
     204:	86 0d       	add	r24, r6
     206:	89 0d       	add	r24, r9
     208:	8b 0d       	add	r24, r11
     20a:	9c 0d       	add	r25, r12
     20c:	a4 0d       	add	r26, r4
     20e:	ae 0d       	add	r26, r14
     210:	ac 0d       	add	r26, r12

00000212 <__trampolines_start>:
     212:	0c 94 34 11 	jmp	0x2268	; 0x2268 <_ZN9frt_queueIbE10get_a_copyERb>
     216:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_ZN9frt_queueIbE12num_items_inEv>
     21a:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <_ZN9frt_queueIbE16ISR_num_items_inEv>
     21e:	0c 94 13 03 	jmp	0x626	; 0x626 <__cxa_pure_virtual>
     222:	0c 94 1f 11 	jmp	0x223e	; 0x223e <_ZN9frt_queueIiE9not_emptyEv>
     226:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <_ZN8emstream12clear_screenEv>
     22a:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_ZN5rs2327putcharEc>
     22e:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_ZN9frt_queueIbE3getEPb>
     232:	0c 94 0f 09 	jmp	0x121e	; 0x121e <_ZN18task_motor_command3runEv>
     236:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <_ZN14frt_text_queue14check_for_charEv>
     23a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <_ZN9frt_queueIiE16ISR_num_items_inEv>
     23e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <_ZN9frt_queueIiE10get_a_copyERi>
     242:	0c 94 0e 11 	jmp	0x221c	; 0x221c <_ZN9frt_queueIbE8is_emptyEv>
     246:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_ZN14frt_text_queue7putcharEc>
     24a:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <_ZN9frt_queueIiE7ISR_putERKi>
     24e:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <_ZN8emstream7getcharEv>
     252:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     256:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_ZN9frt_queueIiE10get_a_copyEv>
     25a:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <_ZN9frt_queueIbE7ISR_getEPb>
     25e:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <_ZN9frt_queueIiE3putERKi>
     262:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_ZN9frt_queueIiE12ISR_is_emptyEv>
     266:	0c 94 af 11 	jmp	0x235e	; 0x235e <_ZN9frt_queueIiE3getEv>
     26a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <_ZN9frt_queueIbE9not_emptyEv>
     26e:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
     272:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_call_static_run_method>
     276:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <_ZN8emstreamlsE15ser_manipulator+0x72>
     27a:	0c 94 77 05 	jmp	0xaee	; 0xaee <_ZN8frt_task12print_statusER8emstream>
     27e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <_ZN9frt_queueIbE3getEv>
     282:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     286:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <_ZN8emstream14check_for_charEv>
     28a:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <_ZN22task_system_controller3runEv>
     28e:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <_ZN8emstream13ready_to_sendEv>
     292:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_ZN5rs23214check_for_charEv>
     296:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_ZN14frt_text_queue7getcharEv>
     29a:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <_ZN9frt_queueIiE3getEPi>
     29e:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <_ZN8emstreamlsE15ser_manipulator+0x40>
     2a2:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <_ZN9frt_queueIbE13ISR_not_emptyEv>
     2a6:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <_ZN8emstreamlsE15ser_manipulator+0x24>
     2aa:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2ae:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <_ZN9frt_queueIbE12ISR_is_emptyEv>
     2b2:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <_ZN8emstream12transmit_nowEv>
     2b6:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_ZN9frt_queueIiE7ISR_getEPi>
     2ba:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <_ZN9task_user3runEv>
     2be:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     2c2:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <_ZN9frt_queueIbE7ISR_getEv>
     2c6:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <_ZN9frt_queueIiE13ISR_not_emptyEv>
     2ca:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <_GLOBAL__sub_I_counter>
     2ce:	0c 94 18 11 	jmp	0x2230	; 0x2230 <_ZN9frt_queueIiE12num_items_inEv>
     2d2:	0c 94 c7 09 	jmp	0x138e	; 0x138e <_ZN21task_pendulum_encoder3runEv>
     2d6:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <_ZN8emstreamlsE15ser_manipulator+0x36>
     2da:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_ZN17task_limit_switch3runEv>
     2de:	0c 94 8d 12 	jmp	0x251a	; 0x251a <_ZN9frt_queueIbE3putERKb>
     2e2:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <_ZN9frt_queueIiE11ISR_butt_inERKi>
     2e6:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <_ZN9frt_queueIbE7butt_inERKb>
     2ea:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_ZN5rs23212clear_screenEv>
     2ee:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <_ZN8emstreamlsE15ser_manipulator+0x30>
     2f2:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_ZN18task_motor_encoder3runEv>
     2f6:	0c 94 9f 12 	jmp	0x253e	; 0x253e <_ZN9frt_queueIiE7butt_inERKi>
     2fa:	0c 94 03 12 	jmp	0x2406	; 0x2406 <_ZN9frt_queueIiE7ISR_getEv>
     2fe:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_ZN9frt_queueIbE10get_a_copyEv>
     302:	0c 94 be 18 	jmp	0x317c	; 0x317c <prvIdleTask>
     306:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <_ZN5rs2327getcharEv>
     30a:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <_ZN9frt_queueIiE8is_emptyEv>
     30e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <_ZN9frt_queueIbE11ISR_butt_inERKb>
     312:	0c 94 33 12 	jmp	0x2466	; 0x2466 <_ZN9frt_queueIbE7ISR_putERKb>
     316:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <_ZN8emstreamlsE15ser_manipulator+0x62>

0000031a <__trampolines_end>:
     31a:	09 09       	sbc	r16, r9
	...

0000031d <_ZZ15print_task_listP8emstreamE3__c_8>:
     31d:	2f 00                                               /.

0000031f <_ZZ15print_task_listP8emstreamE3__c_7>:
     31f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000032a <_ZZ15print_task_listP8emstreamE3__c_6>:
     32a:	09 2d 2d 2d 2d 00                                   .----.

00000330 <_ZZ15print_task_listP8emstreamE3__c_5>:
     330:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000033c <_ZZ15print_task_listP8emstreamE3__c_4>:
     33c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

0000034d <_ZZ15print_task_listP8emstreamE3__c_3>:
     34d:	09 52 75 6e 73 00                                   .Runs.

00000353 <_ZZ15print_task_listP8emstreamE3__c_2>:
     353:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

0000035f <_ZZ15print_task_listP8emstreamE3__c_1>:
     35f:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000370 <_ZZ15print_task_listP8emstreamE3__c_0>:
     370:	09 53 74 61 63 6b 00                                .Stack.

00000377 <_ZZ15print_task_listP8emstreamE3__c>:
     377:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000382 <_ZZN9task_user11show_statusEvE3__c_4>:
     382:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000038d <_ZZN9task_user11show_statusEvE3__c_3>:
     38d:	2f 00                                               /.

0000038f <_ZZN9task_user11show_statusEvE3__c_2>:
     38f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000039d <_ZZN9task_user11show_statusEvE3__c_1>:
     39d:	54 69 6d 65 3a 20 00                                Time: .

000003a4 <_ZZN9task_user11show_statusEvE3__c_0>:
     3a4:	46 65 62 20 32 33 20 32 30 32 35 00                 Feb 23 2025.

000003b0 <_ZZN9task_user11show_statusEvE3__c>:
     3b0:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3c0:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000003cf <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     3cf:	1b 5b 32 32 6d 00                                   .[22m.

000003d5 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     3d5:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000003e0 <_ZZ17print_task_stacksP8emstreamE3__c>:
     3e0:	1b 5b 31 6d 00                                      .[1m.

000003e5 <_ZZN9task_user3runEvE3__c_3>:
     3e5:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     3f5:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000402 <_ZZN9task_user3runEvE3__c_2>:
     402:	3a 57 54 46 3f 00                                   :WTF?.

00000408 <_ZZN9task_user3runEvE3__c_1>:
     408:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     418:	65 00                                               e.

0000041a <_ZZN9task_user3runEvE3__c_0>:
     41a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

00000428 <_ZZN9task_user3runEvE3__c>:
     428:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     438:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

00000446 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     446:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000455 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     455:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     465:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000470 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     470:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     480:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000048e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     48e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     49e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     4ae:	6d 61 74 69 6f 6e 00                                mation.

000004b5 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     4b5:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     4c5:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000004d6 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     4d6:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     4e6:	65 20 6f 6e 6c 79 3a 00                             e only:.

000004ee <_ZZN9task_user18print_help_messageEvE3__c_4>:
     4ee:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     4fe:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     50a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     51a:	68 65 20 41 56 52 00                                he AVR.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     521:	20 68 65 6c 70 00                                    help.

00000527 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     527:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     537:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000546 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     546:	1b 5b 33 30 6d 00                                   .[30m.

0000054c <_ZZN9task_user18print_help_messageEvE3__c>:
     54c:	1b 5b 34 36 6d 00                                   .[46m.

00000552 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     552:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     562:	61 73 6b 20 00                                      ask .

00000567 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     567:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000575 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     575:	20 63 72 65 61 74 65 64 00                           created.

0000057e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     57e:	54 61 73 6b 20 00                                   Task .

00000584 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     584:	1b 5b 32 32 6d 00                                   .[22m.

0000058a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     58a:	54 61 73 6b 3a 20 00                                Task: .

00000591 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     591:	1b 5b 31 6d 00                                      .[1m.

00000596 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     596:	09 00                                               ..

00000598 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     598:	09 00                                               ..

0000059a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     59a:	2f 00                                               /.

0000059c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     59c:	09 00                                               ..

0000059e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     59e:	09 00                                               ..

000005a0 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     5a0:	1b 5b 32 32 6d 00                                   .[22m.

000005a6 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     5a6:	1b 5b 31 6d 00                                      .[1m.

000005ab <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     5ab:	1b 5b 31 6d 00                                      .[1m.

000005b0 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     5b0:	20 20 00 00                                           ..

000005b4 <__ctors_start>:
     5b4:	c3 12       	cpse	r12, r19

000005b6 <__ctors_end>:
     5b6:	11 24       	eor	r1, r1
     5b8:	1f be       	out	0x3f, r1	; 63
     5ba:	cf ef       	ldi	r28, 0xFF	; 255
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df e3       	ldi	r29, 0x3F	; 63
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	00 e0       	ldi	r16, 0x00	; 0
     5c4:	0c bf       	out	0x3c, r16	; 60
     5c6:	18 be       	out	0x38, r1	; 56
     5c8:	19 be       	out	0x39, r1	; 57
     5ca:	1a be       	out	0x3a, r1	; 58
     5cc:	1b be       	out	0x3b, r1	; 59

000005ce <__do_copy_data>:
     5ce:	11 e2       	ldi	r17, 0x21	; 33
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e2       	ldi	r27, 0x20	; 32
     5d4:	ee e0       	ldi	r30, 0x0E	; 14
     5d6:	ff e3       	ldi	r31, 0x3F	; 63
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	0b bf       	out	0x3b, r16	; 59
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__do_copy_data+0x14>
     5de:	07 90       	elpm	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	ae 33       	cpi	r26, 0x3E	; 62
     5e4:	b1 07       	cpc	r27, r17
     5e6:	d9 f7       	brne	.-10     	; 0x5de <__do_copy_data+0x10>
     5e8:	1b be       	out	0x3b, r1	; 59

000005ea <__do_clear_bss>:
     5ea:	21 e3       	ldi	r18, 0x31	; 49
     5ec:	ae e3       	ldi	r26, 0x3E	; 62
     5ee:	b1 e2       	ldi	r27, 0x21	; 33
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <.do_clear_bss_start>

000005f2 <.do_clear_bss_loop>:
     5f2:	1d 92       	st	X+, r1

000005f4 <.do_clear_bss_start>:
     5f4:	a2 3e       	cpi	r26, 0xE2	; 226
     5f6:	b2 07       	cpc	r27, r18
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <.do_clear_bss_loop>

000005fa <__do_global_ctors>:
     5fa:	12 e0       	ldi	r17, 0x02	; 2
     5fc:	cb ed       	ldi	r28, 0xDB	; 219
     5fe:	d2 e0       	ldi	r29, 0x02	; 2
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	06 c0       	rjmp	.+12     	; 0x610 <__do_global_ctors+0x16>
     604:	21 97       	sbiw	r28, 0x01	; 1
     606:	01 09       	sbc	r16, r1
     608:	80 2f       	mov	r24, r16
     60a:	fe 01       	movw	r30, r28
     60c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__tablejump2__>
     610:	ca 3d       	cpi	r28, 0xDA	; 218
     612:	d1 07       	cpc	r29, r17
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 07       	cpc	r16, r24
     618:	a9 f7       	brne	.-22     	; 0x604 <__do_global_ctors+0xa>
     61a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <main>
     61e:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <_exit>

00000622 <__bad_interrupt>:
     622:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000626 <__cxa_pure_virtual>:
     626:	08 95       	ret

00000628 <_ZN8frt_task20print_status_in_listEP8emstream>:
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	8b 01       	movw	r16, r22
     634:	e8 81       	ld	r30, Y
     636:	f9 81       	ldd	r31, Y+1	; 0x01
     638:	02 80       	ldd	r0, Z+2	; 0x02
     63a:	f3 81       	ldd	r31, Z+3	; 0x03
     63c:	e0 2d       	mov	r30, r0
     63e:	19 95       	eicall
     640:	66 e0       	ldi	r22, 0x06	; 6
     642:	c8 01       	movw	r24, r16
     644:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	9d 81       	ldd	r25, Y+5	; 0x05
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	19 f0       	breq	.+6      	; 0x656 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     650:	b8 01       	movw	r22, r16
     652:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8frt_task20print_status_in_listEP8emstream>
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <_ZN9task_user18print_help_messageEv>:
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
     66a:	6a e0       	ldi	r22, 0x0A	; 10
     66c:	8e 81       	ldd	r24, Y+6	; 0x06
     66e:	9f 81       	ldd	r25, Y+7	; 0x07
     670:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     674:	8c 01       	movw	r16, r24
     676:	6c e4       	ldi	r22, 0x4C	; 76
     678:	75 e0       	ldi	r23, 0x05	; 5
     67a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     67e:	6a e0       	ldi	r22, 0x0A	; 10
     680:	c8 01       	movw	r24, r16
     682:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     686:	8c 01       	movw	r16, r24
     688:	66 e4       	ldi	r22, 0x46	; 70
     68a:	75 e0       	ldi	r23, 0x05	; 5
     68c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     690:	67 e0       	ldi	r22, 0x07	; 7
     692:	c8 01       	movw	r24, r16
     694:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     698:	6a e0       	ldi	r22, 0x0A	; 10
     69a:	8e 81       	ldd	r24, Y+6	; 0x06
     69c:	9f 81       	ldd	r25, Y+7	; 0x07
     69e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6a2:	8c 01       	movw	r16, r24
     6a4:	67 e2       	ldi	r22, 0x27	; 39
     6a6:	75 e0       	ldi	r23, 0x05	; 5
     6a8:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     6ac:	6a e0       	ldi	r22, 0x0A	; 10
     6ae:	c8 01       	movw	r24, r16
     6b0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6b4:	8c 01       	movw	r16, r24
     6b6:	61 e2       	ldi	r22, 0x21	; 33
     6b8:	75 e0       	ldi	r23, 0x05	; 5
     6ba:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     6be:	66 e0       	ldi	r22, 0x06	; 6
     6c0:	c8 01       	movw	r24, r16
     6c2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6c6:	6a e0       	ldi	r22, 0x0A	; 10
     6c8:	8e 81       	ldd	r24, Y+6	; 0x06
     6ca:	9f 81       	ldd	r25, Y+7	; 0x07
     6cc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6d0:	8c 01       	movw	r16, r24
     6d2:	6a e0       	ldi	r22, 0x0A	; 10
     6d4:	75 e0       	ldi	r23, 0x05	; 5
     6d6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     6da:	66 e0       	ldi	r22, 0x06	; 6
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6e2:	6a e0       	ldi	r22, 0x0A	; 10
     6e4:	8e 81       	ldd	r24, Y+6	; 0x06
     6e6:	9f 81       	ldd	r25, Y+7	; 0x07
     6e8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6ec:	8c 01       	movw	r16, r24
     6ee:	6e ee       	ldi	r22, 0xEE	; 238
     6f0:	74 e0       	ldi	r23, 0x04	; 4
     6f2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     6f6:	66 e0       	ldi	r22, 0x06	; 6
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     6fe:	6a e0       	ldi	r22, 0x0A	; 10
     700:	8e 81       	ldd	r24, Y+6	; 0x06
     702:	9f 81       	ldd	r25, Y+7	; 0x07
     704:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     708:	8c 01       	movw	r16, r24
     70a:	66 ed       	ldi	r22, 0xD6	; 214
     70c:	74 e0       	ldi	r23, 0x04	; 4
     70e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     712:	66 e0       	ldi	r22, 0x06	; 6
     714:	c8 01       	movw	r24, r16
     716:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     71a:	6a e0       	ldi	r22, 0x0A	; 10
     71c:	8e 81       	ldd	r24, Y+6	; 0x06
     71e:	9f 81       	ldd	r25, Y+7	; 0x07
     720:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     724:	8c 01       	movw	r16, r24
     726:	65 eb       	ldi	r22, 0xB5	; 181
     728:	74 e0       	ldi	r23, 0x04	; 4
     72a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     72e:	66 e0       	ldi	r22, 0x06	; 6
     730:	c8 01       	movw	r24, r16
     732:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     736:	6a e0       	ldi	r22, 0x0A	; 10
     738:	8e 81       	ldd	r24, Y+6	; 0x06
     73a:	9f 81       	ldd	r25, Y+7	; 0x07
     73c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     740:	8c 01       	movw	r16, r24
     742:	6e e8       	ldi	r22, 0x8E	; 142
     744:	74 e0       	ldi	r23, 0x04	; 4
     746:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     74a:	66 e0       	ldi	r22, 0x06	; 6
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     752:	6a e0       	ldi	r22, 0x0A	; 10
     754:	8e 81       	ldd	r24, Y+6	; 0x06
     756:	9f 81       	ldd	r25, Y+7	; 0x07
     758:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     75c:	8c 01       	movw	r16, r24
     75e:	60 e7       	ldi	r22, 0x70	; 112
     760:	74 e0       	ldi	r23, 0x04	; 4
     762:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     766:	66 e0       	ldi	r22, 0x06	; 6
     768:	c8 01       	movw	r24, r16
     76a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     76e:	6a e0       	ldi	r22, 0x0A	; 10
     770:	8e 81       	ldd	r24, Y+6	; 0x06
     772:	9f 81       	ldd	r25, Y+7	; 0x07
     774:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     778:	8c 01       	movw	r16, r24
     77a:	65 e5       	ldi	r22, 0x55	; 85
     77c:	74 e0       	ldi	r23, 0x04	; 4
     77e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     782:	66 e0       	ldi	r22, 0x06	; 6
     784:	c8 01       	movw	r24, r16
     786:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     78a:	6a e0       	ldi	r22, 0x0A	; 10
     78c:	8e 81       	ldd	r24, Y+6	; 0x06
     78e:	9f 81       	ldd	r25, Y+7	; 0x07
     790:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     794:	ec 01       	movw	r28, r24
     796:	66 e4       	ldi	r22, 0x46	; 70
     798:	74 e0       	ldi	r23, 0x04	; 4
     79a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	ce 01       	movw	r24, r28
     7a2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     7b0:	5f 92       	push	r5
     7b2:	6f 92       	push	r6
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	5c 01       	movw	r10, r24
     7d0:	3b 01       	movw	r6, r22
     7d2:	4a 01       	movw	r8, r20
     7d4:	12 2f       	mov	r17, r18
     7d6:	50 2e       	mov	r5, r16
     7d8:	63 e0       	ldi	r22, 0x03	; 3
     7da:	ca 01       	movw	r24, r20
     7dc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     7e0:	a6 14       	cp	r10, r6
     7e2:	b7 04       	cpc	r11, r7
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     7e6:	7c c0       	rjmp	.+248    	; 0x8e0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     7e8:	65 01       	movw	r12, r10
     7ea:	84 e1       	ldi	r24, 0x14	; 20
     7ec:	c8 0e       	add	r12, r24
     7ee:	d1 1c       	adc	r13, r1
     7f0:	00 e0       	ldi	r16, 0x00	; 0
     7f2:	75 01       	movw	r14, r10
     7f4:	b5 01       	movw	r22, r10
     7f6:	c4 01       	movw	r24, r8
     7f8:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     802:	60 eb       	ldi	r22, 0xB0	; 176
     804:	75 e0       	ldi	r23, 0x05	; 5
     806:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     80a:	11 23       	and	r17, r17
     80c:	09 f4       	brne	.+2      	; 0x810 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     80e:	6d c0       	rjmp	.+218    	; 0x8ea <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     810:	00 23       	and	r16, r16
     812:	09 f4       	brne	.+2      	; 0x816 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     814:	6a c0       	rjmp	.+212    	; 0x8ea <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     816:	6a e0       	ldi	r22, 0x0A	; 10
     818:	c4 01       	movw	r24, r8
     81a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     81e:	6b ea       	ldi	r22, 0xAB	; 171
     820:	75 e0       	ldi	r23, 0x05	; 5
     822:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     826:	61 c0       	rjmp	.+194    	; 0x8ea <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     828:	11 23       	and	r17, r17
     82a:	71 f0       	breq	.+28     	; 0x848 <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     82c:	01 11       	cpse	r16, r1
     82e:	0c c0       	rjmp	.+24     	; 0x848 <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     830:	88 81       	ld	r24, Y
     832:	85 15       	cp	r24, r5
     834:	49 f0       	breq	.+18     	; 0x848 <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     836:	6a e0       	ldi	r22, 0x0A	; 10
     838:	c4 01       	movw	r24, r8
     83a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     83e:	66 ea       	ldi	r22, 0xA6	; 166
     840:	75 e0       	ldi	r23, 0x05	; 5
     842:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     846:	01 e0       	ldi	r16, 0x01	; 1
     848:	69 91       	ld	r22, Y+
     84a:	c4 01       	movw	r24, r8
     84c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
     850:	dc 01       	movw	r26, r24
     852:	ed 91       	ld	r30, X+
     854:	fc 91       	ld	r31, X
     856:	02 80       	ldd	r0, Z+2	; 0x02
     858:	f3 81       	ldd	r31, Z+3	; 0x03
     85a:	e0 2d       	mov	r30, r0
     85c:	60 e2       	ldi	r22, 0x20	; 32
     85e:	19 95       	eicall
     860:	cc 16       	cp	r12, r28
     862:	dd 06       	cpc	r13, r29
     864:	09 f7       	brne	.-62     	; 0x828 <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     866:	11 23       	and	r17, r17
     868:	89 f0       	breq	.+34     	; 0x88c <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     86a:	6a e0       	ldi	r22, 0x0A	; 10
     86c:	c4 01       	movw	r24, r8
     86e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     872:	ec 01       	movw	r28, r24
     874:	60 ea       	ldi	r22, 0xA0	; 160
     876:	75 e0       	ldi	r23, 0x05	; 5
     878:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     87c:	e8 81       	ld	r30, Y
     87e:	f9 81       	ldd	r31, Y+1	; 0x01
     880:	02 80       	ldd	r0, Z+2	; 0x02
     882:	f3 81       	ldd	r31, Z+3	; 0x03
     884:	e0 2d       	mov	r30, r0
     886:	60 e2       	ldi	r22, 0x20	; 32
     888:	ce 01       	movw	r24, r28
     88a:	19 95       	eicall
     88c:	f7 01       	movw	r30, r14
     88e:	61 91       	ld	r22, Z+
     890:	7f 01       	movw	r14, r30
     892:	80 ee       	ldi	r24, 0xE0	; 224
     894:	86 0f       	add	r24, r22
     896:	8f 35       	cpi	r24, 0x5F	; 95
     898:	48 f4       	brcc	.+18     	; 0x8ac <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     89a:	d4 01       	movw	r26, r8
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	02 80       	ldd	r0, Z+2	; 0x02
     8a2:	f3 81       	ldd	r31, Z+3	; 0x03
     8a4:	e0 2d       	mov	r30, r0
     8a6:	c4 01       	movw	r24, r8
     8a8:	19 95       	eicall
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     8ac:	d4 01       	movw	r26, r8
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	02 80       	ldd	r0, Z+2	; 0x02
     8b4:	f3 81       	ldd	r31, Z+3	; 0x03
     8b6:	e0 2d       	mov	r30, r0
     8b8:	6e e2       	ldi	r22, 0x2E	; 46
     8ba:	c4 01       	movw	r24, r8
     8bc:	19 95       	eicall
     8be:	ce 14       	cp	r12, r14
     8c0:	df 04       	cpc	r13, r15
     8c2:	21 f7       	brne	.-56     	; 0x88c <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     8c4:	b4 e1       	ldi	r27, 0x14	; 20
     8c6:	ab 0e       	add	r10, r27
     8c8:	b1 1c       	adc	r11, r1
     8ca:	66 e0       	ldi	r22, 0x06	; 6
     8cc:	c4 01       	movw	r24, r8
     8ce:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     8d2:	e4 e1       	ldi	r30, 0x14	; 20
     8d4:	ce 0e       	add	r12, r30
     8d6:	d1 1c       	adc	r13, r1
     8d8:	a6 14       	cp	r10, r6
     8da:	b7 04       	cpc	r11, r7
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     8de:	89 cf       	rjmp	.-238    	; 0x7f2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	c4 01       	movw	r24, r8
     8e4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     8ea:	e7 01       	movw	r28, r14
     8ec:	9d cf       	rjmp	.-198    	; 0x828 <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	6f 90       	pop	r6
     90a:	5f 90       	pop	r5
     90c:	08 95       	ret

0000090e <_ZN10time_stamp10set_to_nowEv>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	0f 92       	push	r0
     91a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     91e:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     922:	8c 83       	std	Y+4, r24	; 0x04
     924:	9d 83       	std	Y+5, r25	; 0x05
     926:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
     92a:	68 83       	st	Y, r22
     92c:	79 83       	std	Y+1, r23	; 0x01
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	9b 83       	std	Y+3, r25	; 0x03
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	ce 01       	movw	r24, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <_ZlsR8emstreamR10time_stamp>:
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	2f 97       	sbiw	r28, 0x0f	; 15
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	8c 01       	movw	r16, r24
     95e:	7b 01       	movw	r14, r22
     960:	db 01       	movw	r26, r22
     962:	6d 91       	ld	r22, X+
     964:	7d 91       	ld	r23, X+
     966:	8d 91       	ld	r24, X+
     968:	9c 91       	ld	r25, X
     96a:	0f 2e       	mov	r0, r31
     96c:	f8 ee       	ldi	r31, 0xE8	; 232
     96e:	8f 2e       	mov	r8, r31
     970:	f3 e0       	ldi	r31, 0x03	; 3
     972:	9f 2e       	mov	r9, r31
     974:	a1 2c       	mov	r10, r1
     976:	b1 2c       	mov	r11, r1
     978:	f0 2d       	mov	r31, r0
     97a:	a5 01       	movw	r20, r10
     97c:	94 01       	movw	r18, r8
     97e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
     982:	ba 01       	movw	r22, r20
     984:	a9 01       	movw	r20, r18
     986:	c8 01       	movw	r24, r16
     988:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN8emstreamlsEm>
     98c:	d8 01       	movw	r26, r16
     98e:	ed 91       	ld	r30, X+
     990:	fc 91       	ld	r31, X
     992:	02 80       	ldd	r0, Z+2	; 0x02
     994:	f3 81       	ldd	r31, Z+3	; 0x03
     996:	e0 2d       	mov	r30, r0
     998:	6e e2       	ldi	r22, 0x2E	; 46
     99a:	c8 01       	movw	r24, r16
     99c:	19 95       	eicall
     99e:	f7 01       	movw	r30, r14
     9a0:	60 81       	ld	r22, Z
     9a2:	71 81       	ldd	r23, Z+1	; 0x01
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	93 81       	ldd	r25, Z+3	; 0x03
     9a8:	a5 01       	movw	r20, r10
     9aa:	94 01       	movw	r18, r8
     9ac:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	60 e4       	ldi	r22, 0x40	; 64
     9b6:	72 e4       	ldi	r23, 0x42	; 66
     9b8:	8f e0       	ldi	r24, 0x0F	; 15
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__mulsi3>
     9c0:	a5 01       	movw	r20, r10
     9c2:	94 01       	movw	r18, r8
     9c4:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
     9c8:	49 01       	movw	r8, r18
     9ca:	5a 01       	movw	r10, r20
     9cc:	f7 01       	movw	r30, r14
     9ce:	a4 81       	ldd	r26, Z+4	; 0x04
     9d0:	b5 81       	ldd	r27, Z+5	; 0x05
     9d2:	20 e4       	ldi	r18, 0x40	; 64
     9d4:	32 e4       	ldi	r19, 0x42	; 66
     9d6:	4f e0       	ldi	r20, 0x0F	; 15
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__muluhisi3>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	38 e4       	ldi	r19, 0x48	; 72
     9e2:	48 ee       	ldi	r20, 0xE8	; 232
     9e4:	51 e0       	ldi	r21, 0x01	; 1
     9e6:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	62 0f       	add	r22, r18
     9f0:	73 1f       	adc	r23, r19
     9f2:	84 1f       	adc	r24, r20
     9f4:	95 1f       	adc	r25, r21
     9f6:	7e 01       	movw	r14, r28
     9f8:	f7 e0       	ldi	r31, 0x07	; 7
     9fa:	ef 0e       	add	r14, r31
     9fc:	f1 1c       	adc	r15, r1
     9fe:	9e 01       	movw	r18, r28
     a00:	2f 5f       	subi	r18, 0xFF	; 255
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	59 01       	movw	r10, r18
     a06:	2a e0       	ldi	r18, 0x0A	; 10
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__divmodsi4>
     a12:	e6 2f       	mov	r30, r22
     a14:	28 87       	std	Y+8, r18	; 0x08
     a16:	39 87       	std	Y+9, r19	; 0x09
     a18:	4a 87       	std	Y+10, r20	; 0x0a
     a1a:	5b 87       	std	Y+11, r21	; 0x0b
     a1c:	68 85       	ldd	r22, Y+8	; 0x08
     a1e:	79 85       	ldd	r23, Y+9	; 0x09
     a20:	8a 85       	ldd	r24, Y+10	; 0x0a
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	20 e3       	ldi	r18, 0x30	; 48
     a26:	2e 0f       	add	r18, r30
     a28:	d7 01       	movw	r26, r14
     a2a:	2e 93       	st	-X, r18
     a2c:	7d 01       	movw	r14, r26
     a2e:	aa 15       	cp	r26, r10
     a30:	bb 05       	cpc	r27, r11
     a32:	49 f7       	brne	.-46     	; 0xa06 <_ZlsR8emstreamR10time_stamp+0xc8>
     a34:	1f 82       	std	Y+7, r1	; 0x07
     a36:	be 01       	movw	r22, r28
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     a42:	c8 01       	movw	r24, r16
     a44:	2f 96       	adiw	r28, 0x0f	; 15
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	08 95       	ret

00000a60 <_ZN14frt_text_queue7getcharEv>:
     a60:	0f 93       	push	r16
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	3f ef       	ldi	r19, 0xFF	; 255
     a72:	a9 01       	movw	r20, r18
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 85       	ldd	r24, Z+8	; 0x08
     a7e:	91 85       	ldd	r25, Z+9	; 0x09
     a80:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	19 f4       	brne	.+6      	; 0xa8e <_ZN14frt_text_queue7getcharEv+0x2e>
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <_ZN14frt_text_queue7getcharEv+0x32>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <_ZN14frt_text_queue14check_for_charEv>:
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 85       	ldd	r24, Z+8	; 0x08
     aa0:	91 85       	ldd	r25, Z+9	; 0x09
     aa2:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	81 11       	cpse	r24, r1
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <_ZN14frt_text_queue14check_for_charEv+0x12>
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	89 2f       	mov	r24, r25
     ab0:	08 95       	ret

00000ab2 <_ZN14frt_text_queue7putcharEc>:
     ab2:	0f 93       	push	r16
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	69 83       	std	Y+1, r22	; 0x01
     ac0:	fc 01       	movw	r30, r24
     ac2:	22 85       	ldd	r18, Z+10	; 0x0a
     ac4:	33 85       	ldd	r19, Z+11	; 0x0b
     ac6:	44 85       	ldd	r20, Z+12	; 0x0c
     ac8:	55 85       	ldd	r21, Z+13	; 0x0d
     aca:	00 e0       	ldi	r16, 0x00	; 0
     acc:	be 01       	movw	r22, r28
     ace:	6f 5f       	subi	r22, 0xFF	; 255
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	80 85       	ldd	r24, Z+8	; 0x08
     ad4:	91 85       	ldd	r25, Z+9	; 0x09
     ad6:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xQueueGenericSend>
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	81 11       	cpse	r24, r1
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <_ZN14frt_text_queue7putcharEc+0x30>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	89 2f       	mov	r24, r25
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <_ZN8frt_task12print_statusER8emstream>:
     aee:	8f 92       	push	r8
     af0:	9f 92       	push	r9
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
     b08:	8b 01       	movw	r16, r22
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <pcTaskGetTaskName>
     b12:	bc 01       	movw	r22, r24
     b14:	c8 01       	movw	r24, r16
     b16:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     b1a:	d8 01       	movw	r26, r16
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	02 80       	ldd	r0, Z+2	; 0x02
     b22:	f3 81       	ldd	r31, Z+3	; 0x03
     b24:	e0 2d       	mov	r30, r0
     b26:	69 e0       	ldi	r22, 0x09	; 9
     b28:	c8 01       	movw	r24, r16
     b2a:	19 95       	eicall
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	9b 81       	ldd	r25, Y+3	; 0x03
     b30:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <pcTaskGetTaskName>
     b34:	fc 01       	movw	r30, r24
     b36:	01 90       	ld	r0, Z+
     b38:	00 20       	and	r0, r0
     b3a:	e9 f7       	brne	.-6      	; 0xb36 <_ZN8frt_task12print_statusER8emstream+0x48>
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	e8 1b       	sub	r30, r24
     b40:	f9 0b       	sbc	r31, r25
     b42:	38 97       	sbiw	r30, 0x08	; 8
     b44:	48 f4       	brcc	.+18     	; 0xb58 <_ZN8frt_task12print_statusER8emstream+0x6a>
     b46:	d8 01       	movw	r26, r16
     b48:	ed 91       	ld	r30, X+
     b4a:	fc 91       	ld	r31, X
     b4c:	02 80       	ldd	r0, Z+2	; 0x02
     b4e:	f3 81       	ldd	r31, Z+3	; 0x03
     b50:	e0 2d       	mov	r30, r0
     b52:	69 e0       	ldi	r22, 0x09	; 9
     b54:	c8 01       	movw	r24, r16
     b56:	19 95       	eicall
     b58:	ce 84       	ldd	r12, Y+14	; 0x0e
     b5a:	df 84       	ldd	r13, Y+15	; 0x0f
     b5c:	e8 88       	ldd	r14, Y+16	; 0x10
     b5e:	f9 88       	ldd	r15, Y+17	; 0x11
     b60:	a8 84       	ldd	r10, Y+8	; 0x08
     b62:	b9 84       	ldd	r11, Y+9	; 0x09
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <uxTaskGetStackHighWaterMark>
     b6c:	98 2e       	mov	r9, r24
     b6e:	8c 84       	ldd	r8, Y+12	; 0x0c
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	9b 81       	ldd	r25, Y+3	; 0x03
     b74:	0e 94 16 1a 	call	0x342c	; 0x342c <uxTaskPriorityGet>
     b78:	68 2f       	mov	r22, r24
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
     b80:	6a e0       	ldi	r22, 0x0A	; 10
     b82:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     b86:	ec 01       	movw	r28, r24
     b88:	6e e9       	ldi	r22, 0x9E	; 158
     b8a:	75 e0       	ldi	r23, 0x05	; 5
     b8c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     b90:	68 2d       	mov	r22, r8
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
     b98:	6a e0       	ldi	r22, 0x0A	; 10
     b9a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     b9e:	ec 01       	movw	r28, r24
     ba0:	6c e9       	ldi	r22, 0x9C	; 156
     ba2:	75 e0       	ldi	r23, 0x05	; 5
     ba4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     ba8:	69 2d       	mov	r22, r9
     baa:	ce 01       	movw	r24, r28
     bac:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
     bb0:	6a e0       	ldi	r22, 0x0A	; 10
     bb2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     bb6:	ec 01       	movw	r28, r24
     bb8:	6a e9       	ldi	r22, 0x9A	; 154
     bba:	75 e0       	ldi	r23, 0x05	; 5
     bbc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     bc0:	b5 01       	movw	r22, r10
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
     bc8:	6a e0       	ldi	r22, 0x0A	; 10
     bca:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     bce:	ec 01       	movw	r28, r24
     bd0:	68 e9       	ldi	r22, 0x98	; 152
     bd2:	75 e0       	ldi	r23, 0x05	; 5
     bd4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     bd8:	6a e0       	ldi	r22, 0x0A	; 10
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     be0:	ec 01       	movw	r28, r24
     be2:	66 e9       	ldi	r22, 0x96	; 150
     be4:	75 e0       	ldi	r23, 0x05	; 5
     be6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     bea:	b7 01       	movw	r22, r14
     bec:	a6 01       	movw	r20, r12
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN8emstreamlsEm>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	08 95       	ret

00000c0e <_ZN8frt_task19print_stack_in_listEP8emstream>:
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	7b 01       	movw	r14, r22
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	9b 81       	ldd	r25, Y+3	; 0x03
     c26:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <pcTaskGetTaskName>
     c2a:	6c 01       	movw	r12, r24
     c2c:	6a e0       	ldi	r22, 0x0A	; 10
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     c34:	8c 01       	movw	r16, r24
     c36:	61 e9       	ldi	r22, 0x91	; 145
     c38:	75 e0       	ldi	r23, 0x05	; 5
     c3a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     c3e:	6a e0       	ldi	r22, 0x0A	; 10
     c40:	c8 01       	movw	r24, r16
     c42:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     c46:	8c 01       	movw	r16, r24
     c48:	6a e8       	ldi	r22, 0x8A	; 138
     c4a:	75 e0       	ldi	r23, 0x05	; 5
     c4c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     c50:	b6 01       	movw	r22, r12
     c52:	c8 01       	movw	r24, r16
     c54:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     c58:	6a e0       	ldi	r22, 0x0A	; 10
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     c60:	8c 01       	movw	r16, r24
     c62:	64 e8       	ldi	r22, 0x84	; 132
     c64:	75 e0       	ldi	r23, 0x05	; 5
     c66:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     c6a:	66 e0       	ldi	r22, 0x06	; 6
     c6c:	c8 01       	movw	r24, r16
     c6e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     c72:	8a 85       	ldd	r24, Y+10	; 0x0a
     c74:	9b 85       	ldd	r25, Y+11	; 0x0b
     c76:	e8 85       	ldd	r30, Y+8	; 0x08
     c78:	f9 85       	ldd	r31, Y+9	; 0x09
     c7a:	01 e1       	ldi	r16, 0x11	; 17
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	a7 01       	movw	r20, r14
     c80:	bc 01       	movw	r22, r24
     c82:	8e 1b       	sub	r24, r30
     c84:	9f 0b       	sbc	r25, r31
     c86:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z15hex_dump_memoryPhS_P8emstreambh>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	19 f0       	breq	.+6      	; 0xc98 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     c92:	b7 01       	movw	r22, r14
     c94:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN8frt_task19print_stack_in_listEP8emstream>
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	08 95       	ret

00000caa <_call_static_run_method>:
     caa:	ec 01       	movw	r28, r24
     cac:	e8 81       	ld	r30, Y
     cae:	f9 81       	ldd	r31, Y+1	; 0x01
     cb0:	01 90       	ld	r0, Z+
     cb2:	f0 81       	ld	r31, Z
     cb4:	e0 2d       	mov	r30, r0
     cb6:	19 95       	eicall
     cb8:	1a 82       	std	Y+2, r1	; 0x02
     cba:	1b 82       	std	Y+3, r1	; 0x03
     cbc:	6f ef       	ldi	r22, 0xFF	; 255
     cbe:	7f ef       	ldi	r23, 0xFF	; 255
     cc0:	cb 01       	movw	r24, r22
     cc2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <vTaskDelay>
     cc6:	fa cf       	rjmp	.-12     	; 0xcbc <_call_static_run_method+0x12>

00000cc8 <_ZN9task_user3runEv>:
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	2c 97       	sbiw	r28, 0x0c	; 12
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	7c 01       	movw	r14, r24
     cd8:	19 82       	std	Y+1, r1	; 0x01
     cda:	1a 82       	std	Y+2, r1	; 0x02
     cdc:	1b 82       	std	Y+3, r1	; 0x03
     cde:	1c 82       	std	Y+4, r1	; 0x04
     ce0:	1d 82       	std	Y+5, r1	; 0x05
     ce2:	1e 82       	std	Y+6, r1	; 0x06
     ce4:	6a e0       	ldi	r22, 0x0A	; 10
     ce6:	dc 01       	movw	r26, r24
     ce8:	16 96       	adiw	r26, 0x06	; 6
     cea:	8d 91       	ld	r24, X+
     cec:	9c 91       	ld	r25, X
     cee:	17 97       	sbiw	r26, 0x07	; 7
     cf0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     cf4:	6c 01       	movw	r12, r24
     cf6:	68 e2       	ldi	r22, 0x28	; 40
     cf8:	74 e0       	ldi	r23, 0x04	; 4
     cfa:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     cfe:	66 e0       	ldi	r22, 0x06	; 6
     d00:	c6 01       	movw	r24, r12
     d02:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     d06:	11 e0       	ldi	r17, 0x01	; 1
     d08:	81 2c       	mov	r8, r1
     d0a:	68 94       	set
     d0c:	99 24       	eor	r9, r9
     d0e:	93 f8       	bld	r9, 3
     d10:	0f 2e       	mov	r0, r31
     d12:	f0 e4       	ldi	r31, 0x40	; 64
     d14:	af 2e       	mov	r10, r31
     d16:	f1 e2       	ldi	r31, 0x21	; 33
     d18:	bf 2e       	mov	r11, r31
     d1a:	f0 2d       	mov	r31, r0
     d1c:	f7 01       	movw	r30, r14
     d1e:	84 85       	ldd	r24, Z+12	; 0x0c
     d20:	88 23       	and	r24, r24
     d22:	21 f0       	breq	.+8      	; 0xd2c <_ZN9task_user3runEv+0x64>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	09 f4       	brne	.+2      	; 0xd2a <_ZN9task_user3runEv+0x62>
     d28:	60 c0       	rjmp	.+192    	; 0xdea <_ZN9task_user3runEv+0x122>
     d2a:	06 c2       	rjmp	.+1036   	; 0x1138 <_ZN9task_user3runEv+0x470>
     d2c:	86 81       	ldd	r24, Z+6	; 0x06
     d2e:	97 81       	ldd	r25, Z+7	; 0x07
     d30:	dc 01       	movw	r26, r24
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	04 80       	ldd	r0, Z+4	; 0x04
     d38:	f5 81       	ldd	r31, Z+5	; 0x05
     d3a:	e0 2d       	mov	r30, r0
     d3c:	19 95       	eicall
     d3e:	88 23       	and	r24, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <_ZN9task_user3runEv+0x7c>
     d42:	37 c0       	rjmp	.+110    	; 0xdb2 <_ZN9task_user3runEv+0xea>
     d44:	f7 01       	movw	r30, r14
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	dc 01       	movw	r26, r24
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	06 80       	ldd	r0, Z+6	; 0x06
     d52:	f7 81       	ldd	r31, Z+7	; 0x07
     d54:	e0 2d       	mov	r30, r0
     d56:	19 95       	eicall
     d58:	99 27       	eor	r25, r25
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	91 05       	cpc	r25, r1
     d5e:	f9 f0       	breq	.+62     	; 0xd9e <_ZN9task_user3runEv+0xd6>
     d60:	03 97       	sbiw	r24, 0x03	; 3
     d62:	09 f0       	breq	.+2      	; 0xd66 <_ZN9task_user3runEv+0x9e>
     d64:	05 c2       	rjmp	.+1034   	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     d66:	6a e0       	ldi	r22, 0x0A	; 10
     d68:	f7 01       	movw	r30, r14
     d6a:	86 81       	ldd	r24, Z+6	; 0x06
     d6c:	97 81       	ldd	r25, Z+7	; 0x07
     d6e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     d72:	7c 01       	movw	r14, r24
     d74:	6a e1       	ldi	r22, 0x1A	; 26
     d76:	74 e0       	ldi	r23, 0x04	; 4
     d78:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     d7c:	66 e0       	ldi	r22, 0x06	; 6
     d7e:	c7 01       	movw	r24, r14
     d80:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	88 ed       	ldi	r24, 0xD8	; 216
     d88:	08 b6       	in	r0, 0x38	; 56
     d8a:	18 be       	out	0x38, r1	; 56
     d8c:	84 bf       	out	0x34, r24	; 52
     d8e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d92:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d96:	81 fd       	sbrc	r24, 1
     d98:	fc cf       	rjmp	.-8      	; 0xd92 <_ZN9task_user3runEv+0xca>
     d9a:	08 be       	out	0x38, r0	; 56
     d9c:	ff cf       	rjmp	.-2      	; 0xd9c <_ZN9task_user3runEv+0xd4>
     d9e:	c7 01       	movw	r24, r14
     da0:	0e 94 30 03 	call	0x660	; 0x660 <_ZN9task_user18print_help_messageEv>
     da4:	d7 01       	movw	r26, r14
     da6:	1c 96       	adiw	r26, 0x0c	; 12
     da8:	1c 93       	st	X, r17
     daa:	1c 97       	sbiw	r26, 0x0c	; 12
     dac:	1d 96       	adiw	r26, 0x0d	; 13
     dae:	1c 93       	st	X, r17
     db0:	df c1       	rjmp	.+958    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     db2:	86 e6       	ldi	r24, 0x66	; 102
     db4:	91 e2       	ldi	r25, 0x21	; 33
     db6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN14frt_text_queue14check_for_charEv>
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <_ZN9task_user3runEv+0xf8>
     dbe:	d8 c1       	rjmp	.+944    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     dc0:	d7 01       	movw	r26, r14
     dc2:	16 96       	adiw	r26, 0x06	; 6
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	17 97       	sbiw	r26, 0x07	; 7
     dca:	01 90       	ld	r0, Z+
     dcc:	f0 81       	ld	r31, Z
     dce:	e0 2d       	mov	r30, r0
     dd0:	c2 80       	ldd	r12, Z+2	; 0x02
     dd2:	d3 80       	ldd	r13, Z+3	; 0x03
     dd4:	86 e6       	ldi	r24, 0x66	; 102
     dd6:	91 e2       	ldi	r25, 0x21	; 33
     dd8:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN14frt_text_queue7getcharEv>
     ddc:	68 2f       	mov	r22, r24
     dde:	f7 01       	movw	r30, r14
     de0:	86 81       	ldd	r24, Z+6	; 0x06
     de2:	97 81       	ldd	r25, Z+7	; 0x07
     de4:	f6 01       	movw	r30, r12
     de6:	19 95       	eicall
     de8:	c3 c1       	rjmp	.+902    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     dea:	86 81       	ldd	r24, Z+6	; 0x06
     dec:	97 81       	ldd	r25, Z+7	; 0x07
     dee:	dc 01       	movw	r26, r24
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	04 80       	ldd	r0, Z+4	; 0x04
     df6:	f5 81       	ldd	r31, Z+5	; 0x05
     df8:	e0 2d       	mov	r30, r0
     dfa:	19 95       	eicall
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <_ZN9task_user3runEv+0x13a>
     e00:	b7 c1       	rjmp	.+878    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     e02:	f7 01       	movw	r30, r14
     e04:	86 81       	ldd	r24, Z+6	; 0x06
     e06:	97 81       	ldd	r25, Z+7	; 0x07
     e08:	dc 01       	movw	r26, r24
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	06 80       	ldd	r0, Z+6	; 0x06
     e10:	f7 81       	ldd	r31, Z+7	; 0x07
     e12:	e0 2d       	mov	r30, r0
     e14:	19 95       	eicall
     e16:	9c 01       	movw	r18, r24
     e18:	33 27       	eor	r19, r19
     e1a:	28 36       	cpi	r18, 0x68	; 104
     e1c:	31 05       	cpc	r19, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <_ZN9task_user3runEv+0x15a>
     e20:	54 c1       	rjmp	.+680    	; 0x10ca <_ZN9task_user3runEv+0x402>
     e22:	4c f4       	brge	.+18     	; 0xe36 <_ZN9task_user3runEv+0x16e>
     e24:	2b 31       	cpi	r18, 0x1B	; 27
     e26:	31 05       	cpc	r19, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <_ZN9task_user3runEv+0x164>
     e2a:	53 c1       	rjmp	.+678    	; 0x10d2 <_ZN9task_user3runEv+0x40a>
     e2c:	25 36       	cpi	r18, 0x65	; 101
     e2e:	31 05       	cpc	r19, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <_ZN9task_user3runEv+0x16c>
     e32:	4f c1       	rjmp	.+670    	; 0x10d2 <_ZN9task_user3runEv+0x40a>
     e34:	63 c1       	rjmp	.+710    	; 0x10fc <_ZN9task_user3runEv+0x434>
     e36:	23 37       	cpi	r18, 0x73	; 115
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <_ZN9task_user3runEv+0x176>
     e3c:	0c c1       	rjmp	.+536    	; 0x1056 <_ZN9task_user3runEv+0x38e>
     e3e:	26 37       	cpi	r18, 0x76	; 118
     e40:	31 05       	cpc	r19, r1
     e42:	91 f0       	breq	.+36     	; 0xe68 <_ZN9task_user3runEv+0x1a0>
     e44:	2e 36       	cpi	r18, 0x6E	; 110
     e46:	31 05       	cpc	r19, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <_ZN9task_user3runEv+0x184>
     e4a:	58 c1       	rjmp	.+688    	; 0x10fc <_ZN9task_user3runEv+0x434>
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN10time_stamp10set_to_nowEv>
     e54:	bc 01       	movw	r22, r24
     e56:	f7 01       	movw	r30, r14
     e58:	86 81       	ldd	r24, Z+6	; 0x06
     e5a:	97 81       	ldd	r25, Z+7	; 0x07
     e5c:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZlsR8emstreamR10time_stamp>
     e60:	66 e0       	ldi	r22, 0x06	; 6
     e62:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     e66:	84 c1       	rjmp	.+776    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
     e68:	1f 82       	std	Y+7, r1	; 0x07
     e6a:	18 86       	std	Y+8, r1	; 0x08
     e6c:	19 86       	std	Y+9, r1	; 0x09
     e6e:	1a 86       	std	Y+10, r1	; 0x0a
     e70:	1b 86       	std	Y+11, r1	; 0x0b
     e72:	1c 86       	std	Y+12, r1	; 0x0c
     e74:	0e 94 b4 13 	call	0x2768	; 0x2768 <xPortGetFreeHeapSize>
     e78:	3c 01       	movw	r6, r24
     e7a:	ce 01       	movw	r24, r28
     e7c:	07 96       	adiw	r24, 0x07	; 7
     e7e:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN10time_stamp10set_to_nowEv>
     e82:	2c 01       	movw	r4, r24
     e84:	66 e0       	ldi	r22, 0x06	; 6
     e86:	d7 01       	movw	r26, r14
     e88:	16 96       	adiw	r26, 0x06	; 6
     e8a:	8d 91       	ld	r24, X+
     e8c:	9c 91       	ld	r25, X
     e8e:	17 97       	sbiw	r26, 0x07	; 7
     e90:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     e94:	6a e0       	ldi	r22, 0x0A	; 10
     e96:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     e9a:	6c 01       	movw	r12, r24
     e9c:	60 eb       	ldi	r22, 0xB0	; 176
     e9e:	73 e0       	ldi	r23, 0x03	; 3
     ea0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     ea4:	6a e0       	ldi	r22, 0x0A	; 10
     ea6:	c6 01       	movw	r24, r12
     ea8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     eac:	6c 01       	movw	r12, r24
     eae:	64 ea       	ldi	r22, 0xA4	; 164
     eb0:	73 e0       	ldi	r23, 0x03	; 3
     eb2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     eb6:	66 e0       	ldi	r22, 0x06	; 6
     eb8:	c6 01       	movw	r24, r12
     eba:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     ebe:	6a e0       	ldi	r22, 0x0A	; 10
     ec0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     ec4:	6c 01       	movw	r12, r24
     ec6:	6d e9       	ldi	r22, 0x9D	; 157
     ec8:	73 e0       	ldi	r23, 0x03	; 3
     eca:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     ece:	b2 01       	movw	r22, r4
     ed0:	c6 01       	movw	r24, r12
     ed2:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZlsR8emstreamR10time_stamp>
     ed6:	6a e0       	ldi	r22, 0x0A	; 10
     ed8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     edc:	6c 01       	movw	r12, r24
     ede:	6f e8       	ldi	r22, 0x8F	; 143
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     ee6:	b3 01       	movw	r22, r6
     ee8:	c6 01       	movw	r24, r12
     eea:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
     eee:	6a e0       	ldi	r22, 0x0A	; 10
     ef0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     ef4:	6c 01       	movw	r12, r24
     ef6:	6d e8       	ldi	r22, 0x8D	; 141
     ef8:	73 e0       	ldi	r23, 0x03	; 3
     efa:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     efe:	4f ef       	ldi	r20, 0xFF	; 255
     f00:	5f e0       	ldi	r21, 0x0F	; 15
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	c6 01       	movw	r24, r12
     f08:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN8emstreamlsEm>
     f0c:	f4 01       	movw	r30, r8
     f0e:	60 a4       	ldd	r6, Z+40	; 0x28
     f10:	71 a4       	ldd	r7, Z+41	; 0x29
     f12:	6a e0       	ldi	r22, 0x0A	; 10
     f14:	d7 01       	movw	r26, r14
     f16:	16 96       	adiw	r26, 0x06	; 6
     f18:	8d 91       	ld	r24, X+
     f1a:	9c 91       	ld	r25, X
     f1c:	17 97       	sbiw	r26, 0x07	; 7
     f1e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f22:	6c 01       	movw	r12, r24
     f24:	62 e8       	ldi	r22, 0x82	; 130
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     f2c:	b3 01       	movw	r22, r6
     f2e:	c6 01       	movw	r24, r12
     f30:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
     f34:	66 e0       	ldi	r22, 0x06	; 6
     f36:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f3a:	66 e0       	ldi	r22, 0x06	; 6
     f3c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f40:	f7 01       	movw	r30, r14
     f42:	c6 80       	ldd	r12, Z+6	; 0x06
     f44:	d7 80       	ldd	r13, Z+7	; 0x07
     f46:	6a e0       	ldi	r22, 0x0A	; 10
     f48:	c6 01       	movw	r24, r12
     f4a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f4e:	3c 01       	movw	r6, r24
     f50:	67 e7       	ldi	r22, 0x77	; 119
     f52:	73 e0       	ldi	r23, 0x03	; 3
     f54:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     f58:	6a e0       	ldi	r22, 0x0A	; 10
     f5a:	c3 01       	movw	r24, r6
     f5c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f60:	3c 01       	movw	r6, r24
     f62:	60 e7       	ldi	r22, 0x70	; 112
     f64:	73 e0       	ldi	r23, 0x03	; 3
     f66:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     f6a:	66 e0       	ldi	r22, 0x06	; 6
     f6c:	c3 01       	movw	r24, r6
     f6e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f72:	6a e0       	ldi	r22, 0x0A	; 10
     f74:	c6 01       	movw	r24, r12
     f76:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f7a:	3c 01       	movw	r6, r24
     f7c:	6f e5       	ldi	r22, 0x5F	; 95
     f7e:	73 e0       	ldi	r23, 0x03	; 3
     f80:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     f84:	6a e0       	ldi	r22, 0x0A	; 10
     f86:	c3 01       	movw	r24, r6
     f88:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f8c:	3c 01       	movw	r6, r24
     f8e:	63 e5       	ldi	r22, 0x53	; 83
     f90:	73 e0       	ldi	r23, 0x03	; 3
     f92:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     f96:	6a e0       	ldi	r22, 0x0A	; 10
     f98:	c3 01       	movw	r24, r6
     f9a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     f9e:	3c 01       	movw	r6, r24
     fa0:	6d e4       	ldi	r22, 0x4D	; 77
     fa2:	73 e0       	ldi	r23, 0x03	; 3
     fa4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     fa8:	66 e0       	ldi	r22, 0x06	; 6
     faa:	c3 01       	movw	r24, r6
     fac:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     fb0:	6a e0       	ldi	r22, 0x0A	; 10
     fb2:	c6 01       	movw	r24, r12
     fb4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     fb8:	3c 01       	movw	r6, r24
     fba:	6c e3       	ldi	r22, 0x3C	; 60
     fbc:	73 e0       	ldi	r23, 0x03	; 3
     fbe:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     fc2:	6a e0       	ldi	r22, 0x0A	; 10
     fc4:	c3 01       	movw	r24, r6
     fc6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     fca:	3c 01       	movw	r6, r24
     fcc:	60 e3       	ldi	r22, 0x30	; 48
     fce:	73 e0       	ldi	r23, 0x03	; 3
     fd0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	c3 01       	movw	r24, r6
     fd8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     fdc:	3c 01       	movw	r6, r24
     fde:	6a e2       	ldi	r22, 0x2A	; 42
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
     fe6:	66 e0       	ldi	r22, 0x06	; 6
     fe8:	c3 01       	movw	r24, r6
     fea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
     fee:	d5 01       	movw	r26, r10
     ff0:	8d 91       	ld	r24, X+
     ff2:	9c 91       	ld	r25, X
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	19 f0       	breq	.+6      	; 0xffe <_ZN9task_user3runEv+0x336>
     ff8:	b6 01       	movw	r22, r12
     ffa:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8frt_task20print_status_in_listEP8emstream>
     ffe:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <xTaskGetIdleTaskHandle>
    1002:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <uxTaskGetStackHighWaterMark>
    1006:	08 2f       	mov	r16, r24
    1008:	6a e0       	ldi	r22, 0x0A	; 10
    100a:	c6 01       	movw	r24, r12
    100c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1010:	6c 01       	movw	r12, r24
    1012:	6f e1       	ldi	r22, 0x1F	; 31
    1014:	73 e0       	ldi	r23, 0x03	; 3
    1016:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    101a:	60 2f       	mov	r22, r16
    101c:	c6 01       	movw	r24, r12
    101e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    1022:	6a e0       	ldi	r22, 0x0A	; 10
    1024:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1028:	6c 01       	movw	r12, r24
    102a:	6d e1       	ldi	r22, 0x1D	; 29
    102c:	73 e0       	ldi	r23, 0x03	; 3
    102e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1032:	64 e6       	ldi	r22, 0x64	; 100
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	c6 01       	movw	r24, r12
    1038:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
    103c:	6a e0       	ldi	r22, 0x0A	; 10
    103e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1042:	6c 01       	movw	r12, r24
    1044:	6a e1       	ldi	r22, 0x1A	; 26
    1046:	73 e0       	ldi	r23, 0x03	; 3
    1048:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    104c:	66 e0       	ldi	r22, 0x06	; 6
    104e:	c6 01       	movw	r24, r12
    1050:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1054:	8d c0       	rjmp	.+282    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
    1056:	f7 01       	movw	r30, r14
    1058:	c6 80       	ldd	r12, Z+6	; 0x06
    105a:	d7 80       	ldd	r13, Z+7	; 0x07
    105c:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <last_created_task_pointer>
    1060:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <last_created_task_pointer+0x1>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	19 f0       	breq	.+6      	; 0x106e <_ZN9task_user3runEv+0x3a6>
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZN8frt_task19print_stack_in_listEP8emstream>
    106e:	6a e0       	ldi	r22, 0x0A	; 10
    1070:	c6 01       	movw	r24, r12
    1072:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1076:	3c 01       	movw	r6, r24
    1078:	60 ee       	ldi	r22, 0xE0	; 224
    107a:	73 e0       	ldi	r23, 0x03	; 3
    107c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1080:	6a e0       	ldi	r22, 0x0A	; 10
    1082:	c3 01       	movw	r24, r6
    1084:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1088:	3c 01       	movw	r6, r24
    108a:	65 ed       	ldi	r22, 0xD5	; 213
    108c:	73 e0       	ldi	r23, 0x03	; 3
    108e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1092:	6a e0       	ldi	r22, 0x0A	; 10
    1094:	c3 01       	movw	r24, r6
    1096:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    109a:	3c 01       	movw	r6, r24
    109c:	6f ec       	ldi	r22, 0xCF	; 207
    109e:	73 e0       	ldi	r23, 0x03	; 3
    10a0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    10a4:	66 e0       	ldi	r22, 0x06	; 6
    10a6:	c3 01       	movw	r24, r6
    10a8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    10ac:	80 91 e0 31 	lds	r24, 0x31E0	; 0x8031e0 <portStackTopForTask>
    10b0:	90 91 e1 31 	lds	r25, 0x31E1	; 0x8031e1 <portStackTopForTask+0x1>
    10b4:	bc 01       	movw	r22, r24
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	01 e1       	ldi	r16, 0x11	; 17
    10bc:	21 2f       	mov	r18, r17
    10be:	a6 01       	movw	r20, r12
    10c0:	83 56       	subi	r24, 0x63	; 99
    10c2:	91 09       	sbc	r25, r1
    10c4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z15hex_dump_memoryPhS_P8emstreambh>
    10c8:	53 c0       	rjmp	.+166    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
    10ca:	c7 01       	movw	r24, r14
    10cc:	0e 94 30 03 	call	0x660	; 0x660 <_ZN9task_user18print_help_messageEv>
    10d0:	4f c0       	rjmp	.+158    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
    10d2:	6a e0       	ldi	r22, 0x0A	; 10
    10d4:	d7 01       	movw	r26, r14
    10d6:	16 96       	adiw	r26, 0x06	; 6
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	17 97       	sbiw	r26, 0x07	; 7
    10de:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    10e2:	6c 01       	movw	r12, r24
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	74 e0       	ldi	r23, 0x04	; 4
    10e8:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    10ec:	66 e0       	ldi	r22, 0x06	; 6
    10ee:	c6 01       	movw	r24, r12
    10f0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    10f4:	f7 01       	movw	r30, r14
    10f6:	14 86       	std	Z+12, r1	; 0x0c
    10f8:	15 86       	std	Z+13, r1	; 0x0d
    10fa:	3a c0       	rjmp	.+116    	; 0x1170 <_ZN9task_user3runEv+0x4a8>
    10fc:	f7 01       	movw	r30, r14
    10fe:	a6 81       	ldd	r26, Z+6	; 0x06
    1100:	b7 81       	ldd	r27, Z+7	; 0x07
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	11 97       	sbiw	r26, 0x01	; 1
    1108:	02 80       	ldd	r0, Z+2	; 0x02
    110a:	f3 81       	ldd	r31, Z+3	; 0x03
    110c:	e0 2d       	mov	r30, r0
    110e:	68 2f       	mov	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	19 95       	eicall
    1114:	6a e0       	ldi	r22, 0x0A	; 10
    1116:	d7 01       	movw	r26, r14
    1118:	16 96       	adiw	r26, 0x06	; 6
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	17 97       	sbiw	r26, 0x07	; 7
    1120:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1124:	6c 01       	movw	r12, r24
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	74 e0       	ldi	r23, 0x04	; 4
    112a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    112e:	66 e0       	ldi	r22, 0x06	; 6
    1130:	c6 01       	movw	r24, r12
    1132:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1136:	1c c0       	rjmp	.+56     	; 0x1170 <_ZN9task_user3runEv+0x4a8>
    1138:	6a e0       	ldi	r22, 0x0A	; 10
    113a:	f7 01       	movw	r30, r14
    113c:	86 81       	ldd	r24, Z+6	; 0x06
    113e:	97 81       	ldd	r25, Z+7	; 0x07
    1140:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1144:	7c 01       	movw	r14, r24
    1146:	65 ee       	ldi	r22, 0xE5	; 229
    1148:	73 e0       	ldi	r23, 0x03	; 3
    114a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    114e:	66 e0       	ldi	r22, 0x06	; 6
    1150:	c7 01       	movw	r24, r14
    1152:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1156:	93 e0       	ldi	r25, 0x03	; 3
    1158:	88 ed       	ldi	r24, 0xD8	; 216
    115a:	08 b6       	in	r0, 0x38	; 56
    115c:	18 be       	out	0x38, r1	; 56
    115e:	84 bf       	out	0x34, r24	; 52
    1160:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1164:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1168:	81 fd       	sbrc	r24, 1
    116a:	fc cf       	rjmp	.-8      	; 0x1164 <_ZN9task_user3runEv+0x49c>
    116c:	08 be       	out	0x38, r0	; 56
    116e:	ff cf       	rjmp	.-2      	; 0x116e <_ZN9task_user3runEv+0x4a6>
    1170:	f7 01       	movw	r30, r14
    1172:	86 85       	ldd	r24, Z+14	; 0x0e
    1174:	97 85       	ldd	r25, Z+15	; 0x0f
    1176:	a0 89       	ldd	r26, Z+16	; 0x10
    1178:	b1 89       	ldd	r27, Z+17	; 0x11
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	a1 1d       	adc	r26, r1
    117e:	b1 1d       	adc	r27, r1
    1180:	86 87       	std	Z+14, r24	; 0x0e
    1182:	97 87       	std	Z+15, r25	; 0x0f
    1184:	a0 8b       	std	Z+16, r26	; 0x10
    1186:	b1 8b       	std	Z+17, r27	; 0x11
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <vTaskDelay>
    1194:	c3 cd       	rjmp	.-1146   	; 0xd1c <_ZN9task_user3runEv+0x54>

00001196 <_ZN22task_system_controller3runEv>:
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	00 d0       	rcall	.+0      	; 0x119c <_ZN22task_system_controller3runEv+0x6>
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	8c 01       	movw	r16, r24
    11a4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
    11a8:	69 83       	std	Y+1, r22	; 0x01
    11aa:	7a 83       	std	Y+2, r23	; 0x02
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	f8 01       	movw	r30, r16
    11b2:	86 85       	ldd	r24, Z+14	; 0x0e
    11b4:	97 85       	ldd	r25, Z+15	; 0x0f
    11b6:	a0 89       	ldd	r26, Z+16	; 0x10
    11b8:	b1 89       	ldd	r27, Z+17	; 0x11
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	a1 1d       	adc	r26, r1
    11be:	b1 1d       	adc	r27, r1
    11c0:	86 87       	std	Z+14, r24	; 0x0e
    11c2:	97 87       	std	Z+15, r25	; 0x0f
    11c4:	a0 8b       	std	Z+16, r26	; 0x10
    11c6:	b1 8b       	std	Z+17, r27	; 0x11
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskDelayUntil>
    11d8:	eb cf       	rjmp	.-42     	; 0x11b0 <_ZN22task_system_controller3runEv+0x1a>

000011da <_ZN18task_motor_encoder3runEv>:
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <_ZN18task_motor_encoder3runEv+0x6>
    11e0:	1f 92       	push	r1
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8c 01       	movw	r16, r24
    11e8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
    11ec:	69 83       	std	Y+1, r22	; 0x01
    11ee:	7a 83       	std	Y+2, r23	; 0x02
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	f8 01       	movw	r30, r16
    11f6:	86 85       	ldd	r24, Z+14	; 0x0e
    11f8:	97 85       	ldd	r25, Z+15	; 0x0f
    11fa:	a0 89       	ldd	r26, Z+16	; 0x10
    11fc:	b1 89       	ldd	r27, Z+17	; 0x11
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	a1 1d       	adc	r26, r1
    1202:	b1 1d       	adc	r27, r1
    1204:	86 87       	std	Z+14, r24	; 0x0e
    1206:	97 87       	std	Z+15, r25	; 0x0f
    1208:	a0 8b       	std	Z+16, r26	; 0x10
    120a:	b1 8b       	std	Z+17, r27	; 0x11
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskDelayUntil>
    121c:	eb cf       	rjmp	.-42     	; 0x11f4 <_ZN18task_motor_encoder3runEv+0x1a>

0000121e <_ZN18task_motor_command3runEv>:
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <_ZN18task_motor_command3runEv+0x6>
    1224:	1f 92       	push	r1
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8c 01       	movw	r16, r24
    122c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
    1230:	69 83       	std	Y+1, r22	; 0x01
    1232:	7a 83       	std	Y+2, r23	; 0x02
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	f8 01       	movw	r30, r16
    123a:	86 85       	ldd	r24, Z+14	; 0x0e
    123c:	97 85       	ldd	r25, Z+15	; 0x0f
    123e:	a0 89       	ldd	r26, Z+16	; 0x10
    1240:	b1 89       	ldd	r27, Z+17	; 0x11
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	a1 1d       	adc	r26, r1
    1246:	b1 1d       	adc	r27, r1
    1248:	86 87       	std	Z+14, r24	; 0x0e
    124a:	97 87       	std	Z+15, r25	; 0x0f
    124c:	a0 8b       	std	Z+16, r26	; 0x10
    124e:	b1 8b       	std	Z+17, r27	; 0x11
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskDelayUntil>
    1260:	eb cf       	rjmp	.-42     	; 0x1238 <_ZN18task_motor_command3runEv+0x1a>

00001262 <_ZN17task_limit_switch3runEv>:
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	00 d0       	rcall	.+0      	; 0x1268 <_ZN17task_limit_switch3runEv+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <_ZN17task_limit_switch3runEv+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	8c 01       	movw	r16, r24
    1270:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
    1274:	69 83       	std	Y+1, r22	; 0x01
    1276:	7a 83       	std	Y+2, r23	; 0x02
    1278:	8b 83       	std	Y+3, r24	; 0x03
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	e0 e6       	ldi	r30, 0x60	; 96
    127e:	f6 e0       	ldi	r31, 0x06	; 6
    1280:	90 81       	ld	r25, Z
    1282:	d8 01       	movw	r26, r16
    1284:	52 96       	adiw	r26, 0x12	; 18
    1286:	8c 91       	ld	r24, X
    1288:	52 97       	sbiw	r26, 0x12	; 18
    128a:	89 2b       	or	r24, r25
    128c:	80 83       	st	Z, r24
    128e:	94 81       	ldd	r25, Z+4	; 0x04
    1290:	52 96       	adiw	r26, 0x12	; 18
    1292:	8c 91       	ld	r24, X
    1294:	52 97       	sbiw	r26, 0x12	; 18
    1296:	89 2b       	or	r24, r25
    1298:	84 83       	std	Z+4, r24	; 0x04
    129a:	52 96       	adiw	r26, 0x12	; 18
    129c:	8c 91       	ld	r24, X
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	21 f4       	brne	.+8      	; 0x12aa <_ZN17task_limit_switch3runEv+0x48>
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <_ZN17task_limit_switch3runEv+0x52>
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <_ZN17task_limit_switch3runEv+0x52>
    12ae:	88 e1       	ldi	r24, 0x18	; 24
    12b0:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    12b4:	1d 82       	std	Y+5, r1	; 0x05
    12b6:	1e 82       	std	Y+6, r1	; 0x06
    12b8:	0f 2e       	mov	r0, r31
    12ba:	f8 e6       	ldi	r31, 0x68	; 104
    12bc:	ef 2e       	mov	r14, r31
    12be:	f6 e0       	ldi	r31, 0x06	; 6
    12c0:	ff 2e       	mov	r15, r31
    12c2:	f0 2d       	mov	r31, r0
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f6 e4       	ldi	r31, 0x46	; 70
    12c8:	af 2e       	mov	r10, r31
    12ca:	f1 e2       	ldi	r31, 0x21	; 33
    12cc:	bf 2e       	mov	r11, r31
    12ce:	f0 2d       	mov	r31, r0
    12d0:	99 24       	eor	r9, r9
    12d2:	93 94       	inc	r9
    12d4:	0f 2e       	mov	r0, r31
    12d6:	f4 e4       	ldi	r31, 0x44	; 68
    12d8:	cf 2e       	mov	r12, r31
    12da:	f1 e2       	ldi	r31, 0x21	; 33
    12dc:	df 2e       	mov	r13, r31
    12de:	f0 2d       	mov	r31, r0
    12e0:	f7 01       	movw	r30, r14
    12e2:	80 81       	ld	r24, Z
    12e4:	80 fd       	sbrc	r24, 0
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <_ZN17task_limit_switch3runEv+0xa4>
    12e8:	9e 82       	std	Y+6, r9	; 0x06
    12ea:	d5 01       	movw	r26, r10
    12ec:	8d 91       	ld	r24, X+
    12ee:	9c 91       	ld	r25, X
    12f0:	dc 01       	movw	r26, r24
    12f2:	ed 91       	ld	r30, X+
    12f4:	fc 91       	ld	r31, X
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	be 01       	movw	r22, r28
    12fe:	6a 5f       	subi	r22, 0xFA	; 250
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	19 95       	eicall
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <_ZN17task_limit_switch3runEv+0xc0>
    1306:	1e 82       	std	Y+6, r1	; 0x06
    1308:	f5 01       	movw	r30, r10
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	dc 01       	movw	r26, r24
    1310:	ed 91       	ld	r30, X+
    1312:	fc 91       	ld	r31, X
    1314:	01 90       	ld	r0, Z+
    1316:	f0 81       	ld	r31, Z
    1318:	e0 2d       	mov	r30, r0
    131a:	be 01       	movw	r22, r28
    131c:	6a 5f       	subi	r22, 0xFA	; 250
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	19 95       	eicall
    1322:	f7 01       	movw	r30, r14
    1324:	80 81       	ld	r24, Z
    1326:	82 fd       	sbrc	r24, 2
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <_ZN17task_limit_switch3runEv+0xe6>
    132a:	9d 82       	std	Y+5, r9	; 0x05
    132c:	d6 01       	movw	r26, r12
    132e:	8d 91       	ld	r24, X+
    1330:	9c 91       	ld	r25, X
    1332:	dc 01       	movw	r26, r24
    1334:	ed 91       	ld	r30, X+
    1336:	fc 91       	ld	r31, X
    1338:	01 90       	ld	r0, Z+
    133a:	f0 81       	ld	r31, Z
    133c:	e0 2d       	mov	r30, r0
    133e:	be 01       	movw	r22, r28
    1340:	6b 5f       	subi	r22, 0xFB	; 251
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	19 95       	eicall
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <_ZN17task_limit_switch3runEv+0x102>
    1348:	1d 82       	std	Y+5, r1	; 0x05
    134a:	f6 01       	movw	r30, r12
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	dc 01       	movw	r26, r24
    1352:	ed 91       	ld	r30, X+
    1354:	fc 91       	ld	r31, X
    1356:	01 90       	ld	r0, Z+
    1358:	f0 81       	ld	r31, Z
    135a:	e0 2d       	mov	r30, r0
    135c:	be 01       	movw	r22, r28
    135e:	6b 5f       	subi	r22, 0xFB	; 251
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	19 95       	eicall
    1364:	f8 01       	movw	r30, r16
    1366:	86 85       	ldd	r24, Z+14	; 0x0e
    1368:	97 85       	ldd	r25, Z+15	; 0x0f
    136a:	a0 89       	ldd	r26, Z+16	; 0x10
    136c:	b1 89       	ldd	r27, Z+17	; 0x11
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	a1 1d       	adc	r26, r1
    1372:	b1 1d       	adc	r27, r1
    1374:	86 87       	std	Z+14, r24	; 0x0e
    1376:	97 87       	std	Z+15, r25	; 0x0f
    1378:	a0 8b       	std	Z+16, r26	; 0x10
    137a:	b1 8b       	std	Z+17, r27	; 0x11
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskDelayUntil>
    138c:	a9 cf       	rjmp	.-174    	; 0x12e0 <_ZN17task_limit_switch3runEv+0x7e>

0000138e <_ZN21task_pendulum_encoder3runEv>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	00 d0       	rcall	.+0      	; 0x1394 <_ZN21task_pendulum_encoder3runEv+0x6>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <_ZN21task_pendulum_encoder3runEv+0x8>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	8c 01       	movw	r16, r24
    139c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <xTaskGetTickCount>
    13a0:	69 83       	std	Y+1, r22	; 0x01
    13a2:	7a 83       	std	Y+2, r23	; 0x02
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	e0 e8       	ldi	r30, 0x80	; 128
    13aa:	f6 e0       	ldi	r31, 0x06	; 6
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	82 83       	std	Z+2, r24	; 0x02
    13b0:	80 8b       	std	Z+16, r24	; 0x10
    13b2:	81 8b       	std	Z+17, r24	; 0x11
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	80 e7       	ldi	r24, 0x70	; 112
    13ba:	82 83       	std	Z+2, r24	; 0x02
    13bc:	89 e0       	ldi	r24, 0x09	; 9
    13be:	82 87       	std	Z+10, r24	; 0x0a
    13c0:	e0 e4       	ldi	r30, 0x40	; 64
    13c2:	f8 e0       	ldi	r31, 0x08	; 8
    13c4:	8a e6       	ldi	r24, 0x6A	; 106
    13c6:	83 83       	std	Z+3, r24	; 0x03
    13c8:	80 ea       	ldi	r24, 0xA0	; 160
    13ca:	95 e0       	ldi	r25, 0x05	; 5
    13cc:	86 a3       	std	Z+38, r24	; 0x26
    13ce:	97 a3       	std	Z+39, r25	; 0x27
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 83       	st	Z, r24
    13d4:	68 94       	set
    13d6:	cc 24       	eor	r12, r12
    13d8:	c6 f8       	bld	r12, 6
    13da:	dd 24       	eor	r13, r13
    13dc:	d3 f8       	bld	r13, 3
    13de:	0f 2e       	mov	r0, r31
    13e0:	f2 e4       	ldi	r31, 0x42	; 66
    13e2:	ef 2e       	mov	r14, r31
    13e4:	f1 e2       	ldi	r31, 0x21	; 33
    13e6:	ff 2e       	mov	r15, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	0f 2e       	mov	r0, r31
    13ec:	f4 e6       	ldi	r31, 0x64	; 100
    13ee:	4f 2e       	mov	r4, r31
    13f0:	51 2c       	mov	r5, r1
    13f2:	61 2c       	mov	r6, r1
    13f4:	71 2c       	mov	r7, r1
    13f6:	f0 2d       	mov	r31, r0
    13f8:	d6 01       	movw	r26, r12
    13fa:	90 96       	adiw	r26, 0x20	; 32
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	91 97       	sbiw	r26, 0x21	; 33
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	f7 01       	movw	r30, r14
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	dc 01       	movw	r26, r24
    140e:	ed 91       	ld	r30, X+
    1410:	fc 91       	ld	r31, X
    1412:	01 90       	ld	r0, Z+
    1414:	f0 81       	ld	r31, Z
    1416:	e0 2d       	mov	r30, r0
    1418:	be 01       	movw	r22, r28
    141a:	6b 5f       	subi	r22, 0xFB	; 251
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	19 95       	eicall
    1420:	f8 01       	movw	r30, r16
    1422:	66 85       	ldd	r22, Z+14	; 0x0e
    1424:	77 85       	ldd	r23, Z+15	; 0x0f
    1426:	80 89       	ldd	r24, Z+16	; 0x10
    1428:	91 89       	ldd	r25, Z+17	; 0x11
    142a:	a3 01       	movw	r20, r6
    142c:	92 01       	movw	r18, r4
    142e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
    1432:	67 2b       	or	r22, r23
    1434:	68 2b       	or	r22, r24
    1436:	69 2b       	or	r22, r25
    1438:	69 f5       	brne	.+90     	; 0x1494 <_ZN21task_pendulum_encoder3runEv+0x106>
    143a:	8d 80       	ldd	r8, Y+5	; 0x05
    143c:	9e 80       	ldd	r9, Y+6	; 0x06
    143e:	d8 01       	movw	r26, r16
    1440:	16 96       	adiw	r26, 0x06	; 6
    1442:	ad 90       	ld	r10, X+
    1444:	bc 90       	ld	r11, X
    1446:	17 97       	sbiw	r26, 0x07	; 7
    1448:	66 eb       	ldi	r22, 0xB6	; 182
    144a:	70 e2       	ldi	r23, 0x20	; 32
    144c:	c5 01       	movw	r24, r10
    144e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1452:	b4 01       	movw	r22, r8
    1454:	c5 01       	movw	r24, r10
    1456:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN8emstreamlsEi>
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1460:	f7 01       	movw	r30, r14
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	dc 01       	movw	r26, r24
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	00 84       	ldd	r0, Z+8	; 0x08
    146e:	f1 85       	ldd	r31, Z+9	; 0x09
    1470:	e0 2d       	mov	r30, r0
    1472:	19 95       	eicall
    1474:	4c 01       	movw	r8, r24
    1476:	f8 01       	movw	r30, r16
    1478:	a6 80       	ldd	r10, Z+6	; 0x06
    147a:	b7 80       	ldd	r11, Z+7	; 0x07
    147c:	6e ec       	ldi	r22, 0xCE	; 206
    147e:	70 e2       	ldi	r23, 0x20	; 32
    1480:	c5 01       	movw	r24, r10
    1482:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1486:	b4 01       	movw	r22, r8
    1488:	c5 01       	movw	r24, r10
    148a:	0e 94 93 10 	call	0x2126	; 0x2126 <_ZN8emstreamlsEi>
    148e:	66 e0       	ldi	r22, 0x06	; 6
    1490:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1494:	f8 01       	movw	r30, r16
    1496:	86 85       	ldd	r24, Z+14	; 0x0e
    1498:	97 85       	ldd	r25, Z+15	; 0x0f
    149a:	a0 89       	ldd	r26, Z+16	; 0x10
    149c:	b1 89       	ldd	r27, Z+17	; 0x11
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	a1 1d       	adc	r26, r1
    14a2:	b1 1d       	adc	r27, r1
    14a4:	86 87       	std	Z+14, r24	; 0x0e
    14a6:	97 87       	std	Z+15, r25	; 0x0f
    14a8:	a0 8b       	std	Z+16, r26	; 0x10
    14aa:	b1 8b       	std	Z+17, r27	; 0x11
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <vTaskDelayUntil>
    14bc:	9d cf       	rjmp	.-198    	; 0x13f8 <_ZN21task_pendulum_encoder3runEv+0x6a>

000014be <_ZN8frt_taskC2EPKchjP8emstream>:
    14be:	4f 92       	push	r4
    14c0:	5f 92       	push	r5
    14c2:	6f 92       	push	r6
    14c4:	7f 92       	push	r7
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	2a 97       	sbiw	r28, 0x0a	; 10
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	4c 01       	movw	r8, r24
    14ea:	29 01       	movw	r4, r18
    14ec:	38 01       	movw	r6, r16
    14ee:	8a e0       	ldi	r24, 0x0A	; 10
    14f0:	90 e2       	ldi	r25, 0x20	; 32
    14f2:	f4 01       	movw	r30, r8
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	fb 01       	movw	r30, r22
    14fa:	80 81       	ld	r24, Z
    14fc:	88 23       	and	r24, r24
    14fe:	69 f0       	breq	.+26     	; 0x151a <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1500:	de 01       	movw	r26, r28
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	31 96       	adiw	r30, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    150a:	99 30       	cpi	r25, 0x09	; 9
    150c:	39 f0       	breq	.+14     	; 0x151c <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    150e:	9f 5f       	subi	r25, 0xFF	; 255
    1510:	8d 93       	st	X+, r24
    1512:	81 91       	ld	r24, Z+
    1514:	81 11       	cpse	r24, r1
    1516:	f9 cf       	rjmp	.-14     	; 0x150a <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1518:	01 c0       	rjmp	.+2      	; 0x151c <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	e1 e0       	ldi	r30, 0x01	; 1
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	ec 0f       	add	r30, r28
    1522:	fd 1f       	adc	r31, r29
    1524:	e9 0f       	add	r30, r25
    1526:	f1 1d       	adc	r31, r1
    1528:	10 82       	st	Z, r1
    152a:	74 01       	movw	r14, r8
    152c:	f2 e0       	ldi	r31, 0x02	; 2
    152e:	ef 0e       	add	r14, r31
    1530:	f1 1c       	adc	r15, r1
    1532:	a1 2c       	mov	r10, r1
    1534:	b1 2c       	mov	r11, r1
    1536:	c1 2c       	mov	r12, r1
    1538:	d1 2c       	mov	r13, r1
    153a:	04 2f       	mov	r16, r20
    153c:	94 01       	movw	r18, r8
    153e:	a2 01       	movw	r20, r4
    1540:	be 01       	movw	r22, r28
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	85 e5       	ldi	r24, 0x55	; 85
    1548:	96 e0       	ldi	r25, 0x06	; 6
    154a:	0e 94 14 19 	call	0x3228	; 0x3228 <xTaskGenericCreate>
    154e:	f4 01       	movw	r30, r8
    1550:	66 82       	std	Z+6, r6	; 0x06
    1552:	77 82       	std	Z+7, r7	; 0x07
    1554:	40 86       	std	Z+8, r4	; 0x08
    1556:	51 86       	std	Z+9, r5	; 0x09
    1558:	20 91 40 21 	lds	r18, 0x2140	; 0x802140 <last_created_task_pointer>
    155c:	30 91 41 21 	lds	r19, 0x2141	; 0x802141 <last_created_task_pointer+0x1>
    1560:	24 83       	std	Z+4, r18	; 0x04
    1562:	35 83       	std	Z+5, r19	; 0x05
    1564:	80 92 40 21 	sts	0x2140, r8	; 0x802140 <last_created_task_pointer>
    1568:	90 92 41 21 	sts	0x2141, r9	; 0x802141 <last_created_task_pointer+0x1>
    156c:	14 86       	std	Z+12, r1	; 0x0c
    156e:	15 86       	std	Z+13, r1	; 0x0d
    1570:	40 90 e0 31 	lds	r4, 0x31E0	; 0x8031e0 <portStackTopForTask>
    1574:	50 90 e1 31 	lds	r5, 0x31E1	; 0x8031e1 <portStackTopForTask+0x1>
    1578:	ff ef       	ldi	r31, 0xFF	; 255
    157a:	4f 1a       	sub	r4, r31
    157c:	5f 0a       	sbc	r5, r31
    157e:	40 92 e0 31 	sts	0x31E0, r4	; 0x8031e0 <portStackTopForTask>
    1582:	50 92 e1 31 	sts	0x31E1, r5	; 0x8031e1 <portStackTopForTask+0x1>
    1586:	f4 01       	movw	r30, r8
    1588:	42 86       	std	Z+10, r4	; 0x0a
    158a:	53 86       	std	Z+11, r5	; 0x0b
    158c:	16 86       	std	Z+14, r1	; 0x0e
    158e:	17 86       	std	Z+15, r1	; 0x0f
    1590:	10 8a       	std	Z+16, r1	; 0x10
    1592:	11 8a       	std	Z+17, r1	; 0x11
    1594:	61 14       	cp	r6, r1
    1596:	71 04       	cpc	r7, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    159a:	44 c0       	rjmp	.+136    	; 0x1624 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	79 f5       	brne	.+94     	; 0x15fe <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    15a0:	6a e0       	ldi	r22, 0x0A	; 10
    15a2:	c3 01       	movw	r24, r6
    15a4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15a8:	7c 01       	movw	r14, r24
    15aa:	6e e7       	ldi	r22, 0x7E	; 126
    15ac:	75 e0       	ldi	r23, 0x05	; 5
    15ae:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    15b2:	be 01       	movw	r22, r28
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	c7 01       	movw	r24, r14
    15ba:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    15be:	6a e0       	ldi	r22, 0x0A	; 10
    15c0:	c7 01       	movw	r24, r14
    15c2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15c6:	7c 01       	movw	r14, r24
    15c8:	65 e7       	ldi	r22, 0x75	; 117
    15ca:	75 e0       	ldi	r23, 0x05	; 5
    15cc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    15d0:	6a e0       	ldi	r22, 0x0A	; 10
    15d2:	c7 01       	movw	r24, r14
    15d4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15d8:	7c 01       	movw	r14, r24
    15da:	67 e6       	ldi	r22, 0x67	; 103
    15dc:	75 e0       	ldi	r23, 0x05	; 5
    15de:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    15e2:	63 e0       	ldi	r22, 0x03	; 3
    15e4:	c7 01       	movw	r24, r14
    15e6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15ea:	b2 01       	movw	r22, r4
    15ec:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15f6:	66 e0       	ldi	r22, 0x06	; 6
    15f8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    15fe:	6a e0       	ldi	r22, 0x0A	; 10
    1600:	c3 01       	movw	r24, r6
    1602:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1606:	4c 01       	movw	r8, r24
    1608:	62 e5       	ldi	r22, 0x52	; 82
    160a:	75 e0       	ldi	r23, 0x05	; 5
    160c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1610:	be 01       	movw	r22, r28
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	c4 01       	movw	r24, r8
    1618:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    161c:	66 e0       	ldi	r22, 0x06	; 6
    161e:	c4 01       	movw	r24, r8
    1620:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1624:	2a 96       	adiw	r28, 0x0a	; 10
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	08 95       	ret

0000164c <_ZN5rs23212clear_screenEv>:
    164c:	dc 01       	movw	r26, r24
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	02 80       	ldd	r0, Z+2	; 0x02
    1654:	f3 81       	ldd	r31, Z+3	; 0x03
    1656:	e0 2d       	mov	r30, r0
    1658:	6c e0       	ldi	r22, 0x0C	; 12
    165a:	19 95       	eicall
    165c:	08 95       	ret

0000165e <_ZN5rs23214check_for_charEv>:
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	a9 8d       	ldd	r26, Y+25	; 0x19
    1666:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1668:	eb 8d       	ldd	r30, Y+27	; 0x1b
    166a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	4d 91       	ld	r20, X+
    1670:	5c 91       	ld	r21, X
    1672:	20 81       	ld	r18, Z
    1674:	31 81       	ldd	r19, Z+1	; 0x01
    1676:	42 17       	cp	r20, r18
    1678:	53 07       	cpc	r21, r19
    167a:	09 f4       	brne	.+2      	; 0x167e <_ZN5rs23214check_for_charEv+0x20>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <_ZN5rs2327getcharEv>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	fc 01       	movw	r30, r24
    168a:	c1 8d       	ldd	r28, Z+25	; 0x19
    168c:	d2 8d       	ldd	r29, Z+26	; 0x1a
    168e:	28 81       	ld	r18, Y
    1690:	39 81       	ldd	r19, Y+1	; 0x01
    1692:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1694:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1696:	4d 91       	ld	r20, X+
    1698:	5c 91       	ld	r21, X
    169a:	24 17       	cp	r18, r20
    169c:	35 07       	cpc	r19, r21
    169e:	e9 f3       	breq	.-6      	; 0x169a <_ZN5rs2327getcharEv+0x16>
    16a0:	a7 89       	ldd	r26, Z+23	; 0x17
    16a2:	b0 8d       	ldd	r27, Z+24	; 0x18
    16a4:	0d 90       	ld	r0, X+
    16a6:	bc 91       	ld	r27, X
    16a8:	a0 2d       	mov	r26, r0
    16aa:	a2 0f       	add	r26, r18
    16ac:	b3 1f       	adc	r27, r19
    16ae:	8c 91       	ld	r24, X
    16b0:	2f 5f       	subi	r18, 0xFF	; 255
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	28 83       	st	Y, r18
    16b6:	39 83       	std	Y+1, r19	; 0x01
    16b8:	24 36       	cpi	r18, 0x64	; 100
    16ba:	31 05       	cpc	r19, r1
    16bc:	28 f0       	brcs	.+10     	; 0x16c8 <_ZN5rs2327getcharEv+0x44>
    16be:	01 8c       	ldd	r0, Z+25	; 0x19
    16c0:	f2 8d       	ldd	r31, Z+26	; 0x1a
    16c2:	e0 2d       	mov	r30, r0
    16c4:	10 82       	st	Z, r1
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <_ZN5rs2327putcharEc>:
    16d0:	dc 01       	movw	r26, r24
    16d2:	50 96       	adiw	r26, 0x10	; 16
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	51 97       	sbiw	r26, 0x11	; 17
    16da:	80 81       	ld	r24, Z
    16dc:	54 96       	adiw	r26, 0x14	; 20
    16de:	4c 91       	ld	r20, X
    16e0:	54 97       	sbiw	r26, 0x14	; 20
    16e2:	84 23       	and	r24, r20
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <_ZN5rs2327putcharEc+0x20>
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <_ZN5rs2327putcharEc+0x2a>
    16e8:	21 50       	subi	r18, 0x01	; 1
    16ea:	31 09       	sbc	r19, r1
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <_ZN5rs2327putcharEc+0x24>
    16ee:	12 c0       	rjmp	.+36     	; 0x1714 <_ZN5rs2327putcharEc+0x44>
    16f0:	21 e2       	ldi	r18, 0x21	; 33
    16f2:	3e e4       	ldi	r19, 0x4E	; 78
    16f4:	90 81       	ld	r25, Z
    16f6:	94 23       	and	r25, r20
    16f8:	b9 f3       	breq	.-18     	; 0x16e8 <_ZN5rs2327putcharEc+0x18>
    16fa:	90 81       	ld	r25, Z
    16fc:	56 96       	adiw	r26, 0x16	; 22
    16fe:	8c 91       	ld	r24, X
    1700:	56 97       	sbiw	r26, 0x16	; 22
    1702:	89 2b       	or	r24, r25
    1704:	80 83       	st	Z, r24
    1706:	1e 96       	adiw	r26, 0x0e	; 14
    1708:	ed 91       	ld	r30, X+
    170a:	fc 91       	ld	r31, X
    170c:	1f 97       	sbiw	r26, 0x0f	; 15
    170e:	60 83       	st	Z, r22
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	08 95       	ret
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret

00001718 <_ZN8emstream12clear_screenEv>:
    1718:	08 95       	ret

0000171a <_ZN8emstream12transmit_nowEv>:
    171a:	08 95       	ret

0000171c <_ZN8emstream14check_for_charEv>:
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret

00001720 <_ZN8emstream7getcharEv>:
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	08 95       	ret

00001726 <_ZN8emstream13ready_to_sendEv>:
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	08 95       	ret

0000172a <__vector_58>:
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
    1734:	08 b6       	in	r0, 0x38	; 56
    1736:	0f 92       	push	r0
    1738:	18 be       	out	0x38, r1	; 56
    173a:	0b b6       	in	r0, 0x3b	; 59
    173c:	0f 92       	push	r0
    173e:	1b be       	out	0x3b, r1	; 59
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
    174c:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1750:	e0 91 4c 21 	lds	r30, 0x214C	; 0x80214c <rcvE0_buffer>
    1754:	f0 91 4d 21 	lds	r31, 0x214D	; 0x80214d <rcvE0_buffer+0x1>
    1758:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <rcvE0_write_index>
    175c:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <rcvE0_write_index+0x1>
    1760:	e8 0f       	add	r30, r24
    1762:	f9 1f       	adc	r31, r25
    1764:	20 83       	st	Z, r18
    1766:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <rcvE0_write_index>
    176a:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <rcvE0_write_index+0x1>
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	84 36       	cpi	r24, 0x64	; 100
    1772:	91 05       	cpc	r25, r1
    1774:	60 f4       	brcc	.+24     	; 0x178e <__vector_58+0x64>
    1776:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <rcvE0_write_index>
    177a:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <rcvE0_write_index+0x1>
    177e:	20 91 4a 21 	lds	r18, 0x214A	; 0x80214a <rcvE0_read_index>
    1782:	30 91 4b 21 	lds	r19, 0x214B	; 0x80214b <rcvE0_read_index+0x1>
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	f1 f4       	brne	.+60     	; 0x17c8 <__vector_58+0x9e>
    178c:	0c c0       	rjmp	.+24     	; 0x17a6 <__vector_58+0x7c>
    178e:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <rcvE0_write_index>
    1792:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <rcvE0_write_index+0x1>
    1796:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <rcvE0_read_index>
    179a:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <rcvE0_read_index+0x1>
    179e:	18 16       	cp	r1, r24
    17a0:	19 06       	cpc	r1, r25
    17a2:	91 f4       	brne	.+36     	; 0x17c8 <__vector_58+0x9e>
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <__vector_58+0x98>
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	84 36       	cpi	r24, 0x64	; 100
    17aa:	91 05       	cpc	r25, r1
    17ac:	28 f4       	brcc	.+10     	; 0x17b8 <__vector_58+0x8e>
    17ae:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <rcvE0_read_index>
    17b2:	90 93 4b 21 	sts	0x214B, r25	; 0x80214b <rcvE0_read_index+0x1>
    17b6:	08 c0       	rjmp	.+16     	; 0x17c8 <__vector_58+0x9e>
    17b8:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <rcvE0_read_index>
    17bc:	10 92 4b 21 	sts	0x214B, r1	; 0x80214b <rcvE0_read_index+0x1>
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <__vector_58+0x9e>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	f3 cf       	rjmp	.-26     	; 0x17ae <__vector_58+0x84>
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	0f 90       	pop	r0
    17da:	08 be       	out	0x38, r0	; 56
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_91>:
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	08 b6       	in	r0, 0x38	; 56
    17f2:	0f 92       	push	r0
    17f4:	18 be       	out	0x38, r1	; 56
    17f6:	0b b6       	in	r0, 0x3b	; 59
    17f8:	0f 92       	push	r0
    17fa:	1b be       	out	0x3b, r1	; 59
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    180c:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <rcvD1_buffer>
    1810:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <rcvD1_buffer+0x1>
    1814:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <rcvD1_write_index>
    1818:	90 91 4f 21 	lds	r25, 0x214F	; 0x80214f <rcvD1_write_index+0x1>
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	20 83       	st	Z, r18
    1822:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <rcvD1_write_index>
    1826:	90 91 4f 21 	lds	r25, 0x214F	; 0x80214f <rcvD1_write_index+0x1>
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	84 36       	cpi	r24, 0x64	; 100
    182e:	91 05       	cpc	r25, r1
    1830:	60 f4       	brcc	.+24     	; 0x184a <__vector_91+0x64>
    1832:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <rcvD1_write_index>
    1836:	90 93 4f 21 	sts	0x214F, r25	; 0x80214f <rcvD1_write_index+0x1>
    183a:	20 91 50 21 	lds	r18, 0x2150	; 0x802150 <rcvD1_read_index>
    183e:	30 91 51 21 	lds	r19, 0x2151	; 0x802151 <rcvD1_read_index+0x1>
    1842:	82 17       	cp	r24, r18
    1844:	93 07       	cpc	r25, r19
    1846:	f1 f4       	brne	.+60     	; 0x1884 <__vector_91+0x9e>
    1848:	0c c0       	rjmp	.+24     	; 0x1862 <__vector_91+0x7c>
    184a:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <rcvD1_write_index>
    184e:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <rcvD1_write_index+0x1>
    1852:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <rcvD1_read_index>
    1856:	90 91 51 21 	lds	r25, 0x2151	; 0x802151 <rcvD1_read_index+0x1>
    185a:	18 16       	cp	r1, r24
    185c:	19 06       	cpc	r1, r25
    185e:	91 f4       	brne	.+36     	; 0x1884 <__vector_91+0x9e>
    1860:	0e c0       	rjmp	.+28     	; 0x187e <__vector_91+0x98>
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	84 36       	cpi	r24, 0x64	; 100
    1866:	91 05       	cpc	r25, r1
    1868:	28 f4       	brcc	.+10     	; 0x1874 <__vector_91+0x8e>
    186a:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <rcvD1_read_index>
    186e:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <rcvD1_read_index+0x1>
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <__vector_91+0x9e>
    1874:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <rcvD1_read_index>
    1878:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <rcvD1_read_index+0x1>
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <__vector_91+0x9e>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	f3 cf       	rjmp	.-26     	; 0x186a <__vector_91+0x84>
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0b be       	out	0x3b, r0	; 59
    1894:	0f 90       	pop	r0
    1896:	08 be       	out	0x38, r0	; 56
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_88>:
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	08 b6       	in	r0, 0x38	; 56
    18ae:	0f 92       	push	r0
    18b0:	18 be       	out	0x38, r1	; 56
    18b2:	0b b6       	in	r0, 0x3b	; 59
    18b4:	0f 92       	push	r0
    18b6:	1b be       	out	0x3b, r1	; 59
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    18c8:	e0 91 58 21 	lds	r30, 0x2158	; 0x802158 <rcvD0_buffer>
    18cc:	f0 91 59 21 	lds	r31, 0x2159	; 0x802159 <rcvD0_buffer+0x1>
    18d0:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <rcvC0_write_index>
    18d4:	90 91 61 21 	lds	r25, 0x2161	; 0x802161 <rcvC0_write_index+0x1>
    18d8:	e8 0f       	add	r30, r24
    18da:	f9 1f       	adc	r31, r25
    18dc:	20 83       	st	Z, r18
    18de:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <rcvD0_write_index>
    18e2:	90 91 55 21 	lds	r25, 0x2155	; 0x802155 <rcvD0_write_index+0x1>
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	84 36       	cpi	r24, 0x64	; 100
    18ea:	91 05       	cpc	r25, r1
    18ec:	60 f4       	brcc	.+24     	; 0x1906 <__vector_88+0x64>
    18ee:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <rcvD0_write_index>
    18f2:	90 93 55 21 	sts	0x2155, r25	; 0x802155 <rcvD0_write_index+0x1>
    18f6:	20 91 56 21 	lds	r18, 0x2156	; 0x802156 <rcvD0_read_index>
    18fa:	30 91 57 21 	lds	r19, 0x2157	; 0x802157 <rcvD0_read_index+0x1>
    18fe:	82 17       	cp	r24, r18
    1900:	93 07       	cpc	r25, r19
    1902:	f1 f4       	brne	.+60     	; 0x1940 <__vector_88+0x9e>
    1904:	0c c0       	rjmp	.+24     	; 0x191e <__vector_88+0x7c>
    1906:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <rcvD0_write_index>
    190a:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <rcvD0_write_index+0x1>
    190e:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <rcvD0_read_index>
    1912:	90 91 57 21 	lds	r25, 0x2157	; 0x802157 <rcvD0_read_index+0x1>
    1916:	18 16       	cp	r1, r24
    1918:	19 06       	cpc	r1, r25
    191a:	91 f4       	brne	.+36     	; 0x1940 <__vector_88+0x9e>
    191c:	0e c0       	rjmp	.+28     	; 0x193a <__vector_88+0x98>
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	84 36       	cpi	r24, 0x64	; 100
    1922:	91 05       	cpc	r25, r1
    1924:	28 f4       	brcc	.+10     	; 0x1930 <__vector_88+0x8e>
    1926:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <rcvD0_read_index>
    192a:	90 93 57 21 	sts	0x2157, r25	; 0x802157 <rcvD0_read_index+0x1>
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <__vector_88+0x9e>
    1930:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <rcvD0_read_index>
    1934:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <rcvD0_read_index+0x1>
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <__vector_88+0x9e>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	f3 cf       	rjmp	.-26     	; 0x1926 <__vector_88+0x84>
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0b be       	out	0x3b, r0	; 59
    1950:	0f 90       	pop	r0
    1952:	08 be       	out	0x38, r0	; 56
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__vector_28>:
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	08 b6       	in	r0, 0x38	; 56
    196a:	0f 92       	push	r0
    196c:	18 be       	out	0x38, r1	; 56
    196e:	0b b6       	in	r0, 0x3b	; 59
    1970:	0f 92       	push	r0
    1972:	1b be       	out	0x3b, r1	; 59
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	8f 93       	push	r24
    197a:	9f 93       	push	r25
    197c:	ef 93       	push	r30
    197e:	ff 93       	push	r31
    1980:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1984:	e0 91 5e 21 	lds	r30, 0x215E	; 0x80215e <rcvC1_buffer>
    1988:	f0 91 5f 21 	lds	r31, 0x215F	; 0x80215f <rcvC1_buffer+0x1>
    198c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rcvC1_write_index>
    1990:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <rcvC1_write_index+0x1>
    1994:	e8 0f       	add	r30, r24
    1996:	f9 1f       	adc	r31, r25
    1998:	20 83       	st	Z, r18
    199a:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rcvC1_write_index>
    199e:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <rcvC1_write_index+0x1>
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	84 36       	cpi	r24, 0x64	; 100
    19a6:	91 05       	cpc	r25, r1
    19a8:	60 f4       	brcc	.+24     	; 0x19c2 <__vector_28+0x64>
    19aa:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rcvC1_write_index>
    19ae:	90 93 5b 21 	sts	0x215B, r25	; 0x80215b <rcvC1_write_index+0x1>
    19b2:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <rcvC1_read_index>
    19b6:	30 91 5d 21 	lds	r19, 0x215D	; 0x80215d <rcvC1_read_index+0x1>
    19ba:	82 17       	cp	r24, r18
    19bc:	93 07       	cpc	r25, r19
    19be:	f1 f4       	brne	.+60     	; 0x19fc <__vector_28+0x9e>
    19c0:	0c c0       	rjmp	.+24     	; 0x19da <__vector_28+0x7c>
    19c2:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rcvC1_write_index>
    19c6:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rcvC1_write_index+0x1>
    19ca:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <rcvC1_read_index>
    19ce:	90 91 5d 21 	lds	r25, 0x215D	; 0x80215d <rcvC1_read_index+0x1>
    19d2:	18 16       	cp	r1, r24
    19d4:	19 06       	cpc	r1, r25
    19d6:	91 f4       	brne	.+36     	; 0x19fc <__vector_28+0x9e>
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <__vector_28+0x98>
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	84 36       	cpi	r24, 0x64	; 100
    19de:	91 05       	cpc	r25, r1
    19e0:	28 f4       	brcc	.+10     	; 0x19ec <__vector_28+0x8e>
    19e2:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <rcvC1_read_index>
    19e6:	90 93 5d 21 	sts	0x215D, r25	; 0x80215d <rcvC1_read_index+0x1>
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <__vector_28+0x9e>
    19ec:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <rcvC1_read_index>
    19f0:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <rcvC1_read_index+0x1>
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <__vector_28+0x9e>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	f3 cf       	rjmp	.-26     	; 0x19e2 <__vector_28+0x84>
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	08 be       	out	0x38, r0	; 56
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_25>:
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	08 b6       	in	r0, 0x38	; 56
    1a26:	0f 92       	push	r0
    1a28:	18 be       	out	0x38, r1	; 56
    1a2a:	0b b6       	in	r0, 0x3b	; 59
    1a2c:	0f 92       	push	r0
    1a2e:	1b be       	out	0x3b, r1	; 59
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
    1a3c:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1a40:	e0 91 64 21 	lds	r30, 0x2164	; 0x802164 <rcvC0_buffer>
    1a44:	f0 91 65 21 	lds	r31, 0x2165	; 0x802165 <rcvC0_buffer+0x1>
    1a48:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <rcvC0_write_index>
    1a4c:	90 91 61 21 	lds	r25, 0x2161	; 0x802161 <rcvC0_write_index+0x1>
    1a50:	e8 0f       	add	r30, r24
    1a52:	f9 1f       	adc	r31, r25
    1a54:	20 83       	st	Z, r18
    1a56:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <rcvC0_write_index>
    1a5a:	90 91 61 21 	lds	r25, 0x2161	; 0x802161 <rcvC0_write_index+0x1>
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	84 36       	cpi	r24, 0x64	; 100
    1a62:	91 05       	cpc	r25, r1
    1a64:	60 f4       	brcc	.+24     	; 0x1a7e <__vector_25+0x64>
    1a66:	80 93 60 21 	sts	0x2160, r24	; 0x802160 <rcvC0_write_index>
    1a6a:	90 93 61 21 	sts	0x2161, r25	; 0x802161 <rcvC0_write_index+0x1>
    1a6e:	20 91 62 21 	lds	r18, 0x2162	; 0x802162 <rcvC0_read_index>
    1a72:	30 91 63 21 	lds	r19, 0x2163	; 0x802163 <rcvC0_read_index+0x1>
    1a76:	82 17       	cp	r24, r18
    1a78:	93 07       	cpc	r25, r19
    1a7a:	f1 f4       	brne	.+60     	; 0x1ab8 <__vector_25+0x9e>
    1a7c:	0c c0       	rjmp	.+24     	; 0x1a96 <__vector_25+0x7c>
    1a7e:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <rcvC0_write_index>
    1a82:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <rcvC0_write_index+0x1>
    1a86:	80 91 62 21 	lds	r24, 0x2162	; 0x802162 <rcvC0_read_index>
    1a8a:	90 91 63 21 	lds	r25, 0x2163	; 0x802163 <rcvC0_read_index+0x1>
    1a8e:	18 16       	cp	r1, r24
    1a90:	19 06       	cpc	r1, r25
    1a92:	91 f4       	brne	.+36     	; 0x1ab8 <__vector_25+0x9e>
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <__vector_25+0x98>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	84 36       	cpi	r24, 0x64	; 100
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	28 f4       	brcc	.+10     	; 0x1aa8 <__vector_25+0x8e>
    1a9e:	80 93 62 21 	sts	0x2162, r24	; 0x802162 <rcvC0_read_index>
    1aa2:	90 93 63 21 	sts	0x2163, r25	; 0x802163 <rcvC0_read_index+0x1>
    1aa6:	08 c0       	rjmp	.+16     	; 0x1ab8 <__vector_25+0x9e>
    1aa8:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <rcvC0_read_index>
    1aac:	10 92 63 21 	sts	0x2163, r1	; 0x802163 <rcvC0_read_index+0x1>
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <__vector_25+0x9e>
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	f3 cf       	rjmp	.-26     	; 0x1a9e <__vector_25+0x84>
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	9f 91       	pop	r25
    1abe:	8f 91       	pop	r24
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0b be       	out	0x3b, r0	; 59
    1ac8:	0f 90       	pop	r0
    1aca:	08 be       	out	0x38, r0	; 56
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	0f 90       	pop	r0
    1ad2:	1f 90       	pop	r1
    1ad4:	18 95       	reti

00001ad6 <_ZN8emstreamlsE15ser_manipulator>:
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
    1adc:	86 2f       	mov	r24, r22
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	8b 30       	cpi	r24, 0x0B	; 11
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	d8 f5       	brcc	.+118    	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	88 27       	eor	r24, r24
    1aea:	e2 50       	subi	r30, 0x02	; 2
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	0c 94 62 1f 	jmp	0x3ec4	; 0x3ec4 <__tablejump2__>
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	31 c0       	rjmp	.+98     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1afa:	88 e0       	ldi	r24, 0x08	; 8
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	2e c0       	rjmp	.+92     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b00:	8a e0       	ldi	r24, 0x0A	; 10
    1b02:	8a 83       	std	Y+2, r24	; 0x02
    1b04:	2b c0       	rjmp	.+86     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b06:	80 e1       	ldi	r24, 0x10	; 16
    1b08:	8a 83       	std	Y+2, r24	; 0x02
    1b0a:	28 c0       	rjmp	.+80     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    1b10:	25 c0       	rjmp	.+74     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b12:	1b 82       	std	Y+3, r1	; 0x03
    1b14:	23 c0       	rjmp	.+70     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b16:	e8 81       	ld	r30, Y
    1b18:	f9 81       	ldd	r31, Y+1	; 0x01
    1b1a:	02 80       	ldd	r0, Z+2	; 0x02
    1b1c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	6d e0       	ldi	r22, 0x0D	; 13
    1b22:	ce 01       	movw	r24, r28
    1b24:	19 95       	eicall
    1b26:	e8 81       	ld	r30, Y
    1b28:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2a:	02 80       	ldd	r0, Z+2	; 0x02
    1b2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b2e:	e0 2d       	mov	r30, r0
    1b30:	6a e0       	ldi	r22, 0x0A	; 10
    1b32:	ce 01       	movw	r24, r28
    1b34:	19 95       	eicall
    1b36:	12 c0       	rjmp	.+36     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b38:	e8 81       	ld	r30, Y
    1b3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3c:	02 84       	ldd	r0, Z+10	; 0x0a
    1b3e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b40:	e0 2d       	mov	r30, r0
    1b42:	ce 01       	movw	r24, r28
    1b44:	19 95       	eicall
    1b46:	0a c0       	rjmp	.+20     	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b48:	e8 81       	ld	r30, Y
    1b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b4c:	00 84       	ldd	r0, Z+8	; 0x08
    1b4e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b50:	e0 2d       	mov	r30, r0
    1b52:	ce 01       	movw	r24, r28
    1b54:	19 95       	eicall
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	8c 83       	std	Y+4, r24	; 0x04
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <_ZN8emstream4putsEPKc>:
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	8c 01       	movw	r16, r24
    1b6e:	fb 01       	movw	r30, r22
    1b70:	dc 01       	movw	r26, r24
    1b72:	14 96       	adiw	r26, 0x04	; 4
    1b74:	8c 91       	ld	r24, X
    1b76:	81 11       	cpse	r24, r1
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <_ZN8emstream4putsEPKc+0x1e>
    1b7a:	60 81       	ld	r22, Z
    1b7c:	61 11       	cpse	r22, r1
    1b7e:	17 c0       	rjmp	.+46     	; 0x1bae <_ZN8emstream4putsEPKc+0x4a>
    1b80:	23 c0       	rjmp	.+70     	; 0x1bc8 <_ZN8emstream4putsEPKc+0x64>
    1b82:	d8 01       	movw	r26, r16
    1b84:	14 96       	adiw	r26, 0x04	; 4
    1b86:	1c 92       	st	X, r1
    1b88:	eb 01       	movw	r28, r22
    1b8a:	21 96       	adiw	r28, 0x01	; 1
    1b8c:	64 91       	lpm	r22, Z
    1b8e:	66 23       	and	r22, r22
    1b90:	d9 f0       	breq	.+54     	; 0x1bc8 <_ZN8emstream4putsEPKc+0x64>
    1b92:	d8 01       	movw	r26, r16
    1b94:	ed 91       	ld	r30, X+
    1b96:	fc 91       	ld	r31, X
    1b98:	02 80       	ldd	r0, Z+2	; 0x02
    1b9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	19 95       	eicall
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	64 91       	lpm	r22, Z
    1ba6:	21 96       	adiw	r28, 0x01	; 1
    1ba8:	61 11       	cpse	r22, r1
    1baa:	f3 cf       	rjmp	.-26     	; 0x1b92 <_ZN8emstream4putsEPKc+0x2e>
    1bac:	0d c0       	rjmp	.+26     	; 0x1bc8 <_ZN8emstream4putsEPKc+0x64>
    1bae:	ef 01       	movw	r28, r30
    1bb0:	21 96       	adiw	r28, 0x01	; 1
    1bb2:	d8 01       	movw	r26, r16
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	02 80       	ldd	r0, Z+2	; 0x02
    1bba:	f3 81       	ldd	r31, Z+3	; 0x03
    1bbc:	e0 2d       	mov	r30, r0
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	19 95       	eicall
    1bc2:	69 91       	ld	r22, Y+
    1bc4:	61 11       	cpse	r22, r1
    1bc6:	f5 cf       	rjmp	.-22     	; 0x1bb2 <_ZN8emstream4putsEPKc+0x4e>
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <main>:
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	6e 97       	sbiw	r28, 0x1e	; 30
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	e0 e6       	ldi	r30, 0x60	; 96
    1bf0:	f6 e0       	ldi	r31, 0x06	; 6
    1bf2:	80 e1       	ldi	r24, 0x10	; 16
    1bf4:	81 83       	std	Z+1, r24	; 0x01
    1bf6:	85 83       	std	Z+5, r24	; 0x05
    1bf8:	f8 94       	cli
    1bfa:	e0 e5       	ldi	r30, 0x50	; 80
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	80 83       	st	Z, r24
    1c04:	81 81       	ldd	r24, Z+1	; 0x01
    1c06:	81 ff       	sbrs	r24, 1
    1c08:	fd cf       	rjmp	.-6      	; 0x1c04 <main+0x32>
    1c0a:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1c0e:	9f b7       	in	r25, 0x3f	; 63
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	f8 94       	cli
    1c14:	1b be       	out	0x3b, r1	; 59
    1c16:	88 7f       	andi	r24, 0xF8	; 248
    1c18:	81 60       	ori	r24, 0x01	; 1
    1c1a:	20 e4       	ldi	r18, 0x40	; 64
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	f9 01       	movw	r30, r18
    1c20:	08 ed       	ldi	r16, 0xD8	; 216
    1c22:	04 bf       	out	0x34, r16	; 52
    1c24:	80 83       	st	Z, r24
    1c26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c28:	8f bf       	out	0x3f, r24	; 63
    1c2a:	e0 e5       	ldi	r30, 0x50	; 80
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8e 7f       	andi	r24, 0xFE	; 254
    1c32:	80 83       	st	Z, r24
    1c34:	9d ef       	ldi	r25, 0xFD	; 253
    1c36:	88 ed       	ldi	r24, 0xD8	; 216
    1c38:	08 b6       	in	r0, 0x38	; 56
    1c3a:	18 be       	out	0x38, r1	; 56
    1c3c:	84 bf       	out	0x34, r24	; 52
    1c3e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c42:	08 be       	out	0x38, r0	; 56
    1c44:	8a e0       	ldi	r24, 0x0A	; 10
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1c4c:	8c 01       	movw	r16, r24
    1c4e:	fc 01       	movw	r30, r24
    1c50:	12 82       	std	Z+2, r1	; 0x02
    1c52:	13 82       	std	Z+3, r1	; 0x03
    1c54:	0f 2e       	mov	r0, r31
    1c56:	f2 e1       	ldi	r31, 0x12	; 18
    1c58:	ef 2e       	mov	r14, r31
    1c5a:	f0 e2       	ldi	r31, 0x20	; 32
    1c5c:	ff 2e       	mov	r15, r31
    1c5e:	f0 2d       	mov	r31, r0
    1c60:	e0 82       	st	Z, r14
    1c62:	f1 82       	std	Z+1, r15	; 0x01
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	8f e1       	ldi	r24, 0x1F	; 31
    1c6a:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xQueueGenericCreate>
    1c6e:	f8 01       	movw	r30, r16
    1c70:	84 83       	std	Z+4, r24	; 0x04
    1c72:	95 83       	std	Z+5, r25	; 0x05
    1c74:	16 82       	std	Z+6, r1	; 0x06
    1c76:	17 82       	std	Z+7, r1	; 0x07
    1c78:	10 86       	std	Z+8, r1	; 0x08
    1c7a:	11 86       	std	Z+9, r1	; 0x09
    1c7c:	00 93 46 21 	sts	0x2146, r16	; 0x802146 <leftLimitSwitch>
    1c80:	10 93 47 21 	sts	0x2147, r17	; 0x802147 <leftLimitSwitch+0x1>
    1c84:	8a e0       	ldi	r24, 0x0A	; 10
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1c8c:	8c 01       	movw	r16, r24
    1c8e:	fc 01       	movw	r30, r24
    1c90:	12 82       	std	Z+2, r1	; 0x02
    1c92:	13 82       	std	Z+3, r1	; 0x03
    1c94:	e0 82       	st	Z, r14
    1c96:	f1 82       	std	Z+1, r15	; 0x01
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	8f e1       	ldi	r24, 0x1F	; 31
    1c9e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xQueueGenericCreate>
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	84 83       	std	Z+4, r24	; 0x04
    1ca6:	95 83       	std	Z+5, r25	; 0x05
    1ca8:	16 82       	std	Z+6, r1	; 0x06
    1caa:	17 82       	std	Z+7, r1	; 0x07
    1cac:	10 86       	std	Z+8, r1	; 0x08
    1cae:	11 86       	std	Z+9, r1	; 0x09
    1cb0:	00 93 44 21 	sts	0x2144, r16	; 0x802144 <rightLimitSwitch>
    1cb4:	10 93 45 21 	sts	0x2145, r17	; 0x802145 <rightLimitSwitch+0x1>
    1cb8:	8a e0       	ldi	r24, 0x0A	; 10
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	12 82       	std	Z+2, r1	; 0x02
    1cc6:	13 82       	std	Z+3, r1	; 0x03
    1cc8:	86 e3       	ldi	r24, 0x36	; 54
    1cca:	90 e2       	ldi	r25, 0x20	; 32
    1ccc:	80 83       	st	Z, r24
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xQueueGenericCreate>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	84 83       	std	Z+4, r24	; 0x04
    1cde:	95 83       	std	Z+5, r25	; 0x05
    1ce0:	16 82       	std	Z+6, r1	; 0x06
    1ce2:	17 82       	std	Z+7, r1	; 0x07
    1ce4:	10 86       	std	Z+8, r1	; 0x08
    1ce6:	11 86       	std	Z+9, r1	; 0x09
    1ce8:	00 93 42 21 	sts	0x2142, r16	; 0x802142 <pendulum_encoder>
    1cec:	10 93 43 21 	sts	0x2143, r17	; 0x802143 <pendulum_encoder+0x1>
    1cf0:	8a e9       	ldi	r24, 0x9A	; 154
    1cf2:	90 e2       	ldi	r25, 0x20	; 32
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	8a e0       	ldi	r24, 0x0A	; 10
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	1c 82       	std	Y+4, r1	; 0x04
    1cfe:	43 e0       	ldi	r20, 0x03	; 3
    1d00:	4e 83       	std	Y+6, r20	; 0x06
    1d02:	1d 82       	std	Y+5, r1	; 0x05
    1d04:	1f 82       	std	Y+7, r1	; 0x07
    1d06:	18 86       	std	Y+8, r1	; 0x08
    1d08:	a0 e4       	ldi	r26, 0x40	; 64
    1d0a:	b6 e0       	ldi	r27, 0x06	; 6
    1d0c:	ab 87       	std	Y+11, r26	; 0x0b
    1d0e:	bc 87       	std	Y+12, r27	; 0x0c
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	8d 87       	std	Y+13, r24	; 0x0d
    1d14:	0f 2e       	mov	r0, r31
    1d16:	f7 e0       	ldi	r31, 0x07	; 7
    1d18:	df 2e       	mov	r13, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	de 86       	std	Y+14, r13	; 0x0e
    1d1e:	e0 eb       	ldi	r30, 0xB0	; 176
    1d20:	f8 e0       	ldi	r31, 0x08	; 8
    1d22:	ef 87       	std	Y+15, r30	; 0x0f
    1d24:	f8 8b       	std	Y+16, r31	; 0x10
    1d26:	81 eb       	ldi	r24, 0xB1	; 177
    1d28:	98 e0       	ldi	r25, 0x08	; 8
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	84 eb       	ldi	r24, 0xB4	; 180
    1d30:	98 e0       	ldi	r25, 0x08	; 8
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	9c 8b       	std	Y+20, r25	; 0x14
    1d36:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d38:	14 96       	adiw	r26, 0x04	; 4
    1d3a:	5c 91       	ld	r21, X
    1d3c:	14 97       	sbiw	r26, 0x04	; 4
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	bc 01       	movw	r22, r24
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <main+0x178>
    1d46:	66 0f       	add	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	2a 95       	dec	r18
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <main+0x174>
    1d4e:	9b 01       	movw	r18, r22
    1d50:	25 2b       	or	r18, r21
    1d52:	14 96       	adiw	r26, 0x04	; 4
    1d54:	2c 93       	st	X, r18
    1d56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d58:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d5c:	5c 91       	ld	r21, X
    1d5e:	bc 01       	movw	r22, r24
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <main+0x194>
    1d62:	66 0f       	add	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	2a 95       	dec	r18
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <main+0x190>
    1d6a:	9b 01       	movw	r18, r22
    1d6c:	25 2b       	or	r18, r21
    1d6e:	2c 93       	st	X, r18
    1d70:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d76:	2c 91       	ld	r18, X
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <main+0x1ac>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	3a 95       	dec	r19
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <main+0x1a8>
    1d82:	80 95       	com	r24
    1d84:	90 95       	com	r25
    1d86:	82 23       	and	r24, r18
    1d88:	8c 93       	st	X, r24
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	83 83       	std	Z+3, r24	; 0x03
    1d8e:	45 83       	std	Z+5, r20	; 0x05
    1d90:	80 ef       	ldi	r24, 0xF0	; 240
    1d92:	87 83       	std	Z+7, r24	; 0x07
    1d94:	81 e2       	ldi	r24, 0x21	; 33
    1d96:	86 83       	std	Z+6, r24	; 0x06
    1d98:	88 e1       	ldi	r24, 0x18	; 24
    1d9a:	84 83       	std	Z+4, r24	; 0x04
    1d9c:	80 e8       	ldi	r24, 0x80	; 128
    1d9e:	8e 8b       	std	Y+22, r24	; 0x16
    1da0:	80 e4       	ldi	r24, 0x40	; 64
    1da2:	8f 8b       	std	Y+23, r24	; 0x17
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	8d 8b       	std	Y+21, r24	; 0x15
    1da8:	ef 85       	ldd	r30, Y+15	; 0x0f
    1daa:	f8 89       	ldd	r31, Y+16	; 0x10
    1dac:	80 81       	ld	r24, Z
    1dae:	80 81       	ld	r24, Z
    1db0:	8a e5       	ldi	r24, 0x5A	; 90
    1db2:	90 e2       	ldi	r25, 0x20	; 32
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	8e e5       	ldi	r24, 0x5E	; 94
    1dba:	91 e2       	ldi	r25, 0x21	; 33
    1dbc:	88 8f       	std	Y+24, r24	; 0x18
    1dbe:	99 8f       	std	Y+25, r25	; 0x19
    1dc0:	8c e5       	ldi	r24, 0x5C	; 92
    1dc2:	91 e2       	ldi	r25, 0x21	; 33
    1dc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1dc6:	9b 8f       	std	Y+27, r25	; 0x1b
    1dc8:	8a e5       	ldi	r24, 0x5A	; 90
    1dca:	91 e2       	ldi	r25, 0x21	; 33
    1dcc:	8c 8f       	std	Y+28, r24	; 0x1c
    1dce:	9d 8f       	std	Y+29, r25	; 0x1d
    1dd0:	84 e6       	ldi	r24, 0x64	; 100
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1dd8:	80 93 5e 21 	sts	0x215E, r24	; 0x80215e <rcvC1_buffer>
    1ddc:	90 93 5f 21 	sts	0x215F, r25	; 0x80215f <rcvC1_buffer+0x1>
    1de0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1de2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1de4:	10 82       	st	Z, r1
    1de6:	11 82       	std	Z+1, r1	; 0x01
    1de8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1dea:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1dec:	10 82       	st	Z, r1
    1dee:	11 82       	std	Z+1, r1	; 0x01
    1df0:	67 e0       	ldi	r22, 0x07	; 7
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	65 ee       	ldi	r22, 0xE5	; 229
    1dfe:	70 e2       	ldi	r23, 0x20	; 32
    1e00:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    1e04:	66 e0       	ldi	r22, 0x06	; 6
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1e0c:	66 e0       	ldi	r22, 0x06	; 6
    1e0e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN8emstreamlsE15ser_manipulator>
    1e12:	82 e1       	ldi	r24, 0x12	; 18
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1e1a:	7c 01       	movw	r14, r24
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	0f 5f       	subi	r16, 0xFF	; 255
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	24 e0       	ldi	r18, 0x04	; 4
    1e24:	31 e0       	ldi	r19, 0x01	; 1
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	64 e0       	ldi	r22, 0x04	; 4
    1e2a:	71 e2       	ldi	r23, 0x21	; 33
    1e2c:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1e30:	8a e6       	ldi	r24, 0x6A	; 106
    1e32:	90 e2       	ldi	r25, 0x20	; 32
    1e34:	f7 01       	movw	r30, r14
    1e36:	80 83       	st	Z, r24
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	83 e1       	ldi	r24, 0x13	; 19
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1e42:	7c 01       	movw	r14, r24
    1e44:	24 e0       	ldi	r18, 0x04	; 4
    1e46:	31 e0       	ldi	r19, 0x01	; 1
    1e48:	44 e0       	ldi	r20, 0x04	; 4
    1e4a:	6c e0       	ldi	r22, 0x0C	; 12
    1e4c:	71 e2       	ldi	r23, 0x21	; 33
    1e4e:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f2 e7       	ldi	r31, 0x72	; 114
    1e56:	af 2e       	mov	r10, r31
    1e58:	f0 e2       	ldi	r31, 0x20	; 32
    1e5a:	bf 2e       	mov	r11, r31
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	f7 01       	movw	r30, r14
    1e60:	a0 82       	st	Z, r10
    1e62:	b1 82       	std	Z+1, r11	; 0x01
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	82 8b       	std	Z+18, r24	; 0x12
    1e68:	83 e1       	ldi	r24, 0x13	; 19
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1e70:	7c 01       	movw	r14, r24
    1e72:	24 e0       	ldi	r18, 0x04	; 4
    1e74:	31 e0       	ldi	r19, 0x01	; 1
    1e76:	44 e0       	ldi	r20, 0x04	; 4
    1e78:	63 e1       	ldi	r22, 0x13	; 19
    1e7a:	71 e2       	ldi	r23, 0x21	; 33
    1e7c:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1e80:	f7 01       	movw	r30, r14
    1e82:	a0 82       	st	Z, r10
    1e84:	b1 82       	std	Z+1, r11	; 0x01
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	82 8b       	std	Z+18, r24	; 0x12
    1e8a:	82 e1       	ldi	r24, 0x12	; 18
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1e92:	7c 01       	movw	r14, r24
    1e94:	24 e0       	ldi	r18, 0x04	; 4
    1e96:	31 e0       	ldi	r19, 0x01	; 1
    1e98:	44 e0       	ldi	r20, 0x04	; 4
    1e9a:	6b e1       	ldi	r22, 0x1B	; 27
    1e9c:	71 e2       	ldi	r23, 0x21	; 33
    1e9e:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1ea2:	8a e7       	ldi	r24, 0x7A	; 122
    1ea4:	90 e2       	ldi	r25, 0x20	; 32
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	82 e1       	ldi	r24, 0x12	; 18
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1eb4:	7c 01       	movw	r14, r24
    1eb6:	24 e0       	ldi	r18, 0x04	; 4
    1eb8:	31 e0       	ldi	r19, 0x01	; 1
    1eba:	43 e0       	ldi	r20, 0x03	; 3
    1ebc:	62 e2       	ldi	r22, 0x22	; 34
    1ebe:	71 e2       	ldi	r23, 0x21	; 33
    1ec0:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1ec4:	82 e8       	ldi	r24, 0x82	; 130
    1ec6:	90 e2       	ldi	r25, 0x20	; 32
    1ec8:	f7 01       	movw	r30, r14
    1eca:	80 83       	st	Z, r24
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	82 e1       	ldi	r24, 0x12	; 18
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1ed6:	7c 01       	movw	r14, r24
    1ed8:	24 e0       	ldi	r18, 0x04	; 4
    1eda:	31 e0       	ldi	r19, 0x01	; 1
    1edc:	42 e0       	ldi	r20, 0x02	; 2
    1ede:	69 e2       	ldi	r22, 0x29	; 41
    1ee0:	71 e2       	ldi	r23, 0x21	; 33
    1ee2:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1ee6:	8a e8       	ldi	r24, 0x8A	; 138
    1ee8:	90 e2       	ldi	r25, 0x20	; 32
    1eea:	f7 01       	movw	r30, r14
    1eec:	80 83       	st	Z, r24
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	82 e1       	ldi	r24, 0x12	; 18
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    1ef8:	7c 01       	movw	r14, r24
    1efa:	24 e0       	ldi	r18, 0x04	; 4
    1efc:	31 e0       	ldi	r19, 0x01	; 1
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	61 e3       	ldi	r22, 0x31	; 49
    1f02:	71 e2       	ldi	r23, 0x21	; 33
    1f04:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream>
    1f08:	82 e9       	ldi	r24, 0x92	; 146
    1f0a:	90 e2       	ldi	r25, 0x20	; 32
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f16:	78 94       	sei
    1f18:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskStartScheduler>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	6e 96       	adiw	r28, 0x1e	; 30
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	df 90       	pop	r13
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	08 95       	ret

00001f3a <_ZN8emstreamlsEh>:
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	29 97       	sbiw	r28, 0x09	; 9
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	8c 01       	movw	r16, r24
    1f56:	e6 2e       	mov	r14, r22
    1f58:	dc 01       	movw	r26, r24
    1f5a:	13 96       	adiw	r26, 0x03	; 3
    1f5c:	8c 91       	ld	r24, X
    1f5e:	13 97       	sbiw	r26, 0x03	; 3
    1f60:	88 23       	and	r24, r24
    1f62:	41 f0       	breq	.+16     	; 0x1f74 <_ZN8emstreamlsEh+0x3a>
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
    1f68:	02 80       	ldd	r0, Z+2	; 0x02
    1f6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	c8 01       	movw	r24, r16
    1f70:	19 95       	eicall
    1f72:	56 c0       	rjmp	.+172    	; 0x2020 <_ZN8emstreamlsEh+0xe6>
    1f74:	f8 01       	movw	r30, r16
    1f76:	42 81       	ldd	r20, Z+2	; 0x02
    1f78:	42 30       	cpi	r20, 0x02	; 2
    1f7a:	19 f5       	brne	.+70     	; 0x1fc2 <_ZN8emstreamlsEh+0x88>
    1f7c:	68 94       	set
    1f7e:	cc 24       	eor	r12, r12
    1f80:	c3 f8       	bld	r12, 3
    1f82:	d1 2c       	mov	r13, r1
    1f84:	68 94       	set
    1f86:	ff 24       	eor	r15, r15
    1f88:	f7 f8       	bld	r15, 7
    1f8a:	8e 2d       	mov	r24, r14
    1f8c:	8f 21       	and	r24, r15
    1f8e:	51 f0       	breq	.+20     	; 0x1fa4 <_ZN8emstreamlsEh+0x6a>
    1f90:	d8 01       	movw	r26, r16
    1f92:	ed 91       	ld	r30, X+
    1f94:	fc 91       	ld	r31, X
    1f96:	02 80       	ldd	r0, Z+2	; 0x02
    1f98:	f3 81       	ldd	r31, Z+3	; 0x03
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	61 e3       	ldi	r22, 0x31	; 49
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	19 95       	eicall
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <_ZN8emstreamlsEh+0x7c>
    1fa4:	d8 01       	movw	r26, r16
    1fa6:	ed 91       	ld	r30, X+
    1fa8:	fc 91       	ld	r31, X
    1faa:	02 80       	ldd	r0, Z+2	; 0x02
    1fac:	f3 81       	ldd	r31, Z+3	; 0x03
    1fae:	e0 2d       	mov	r30, r0
    1fb0:	60 e3       	ldi	r22, 0x30	; 48
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	19 95       	eicall
    1fb6:	f6 94       	lsr	r15
    1fb8:	b1 e0       	ldi	r27, 0x01	; 1
    1fba:	cb 1a       	sub	r12, r27
    1fbc:	d1 08       	sbc	r13, r1
    1fbe:	29 f7       	brne	.-54     	; 0x1f8a <_ZN8emstreamlsEh+0x50>
    1fc0:	2f c0       	rjmp	.+94     	; 0x2020 <_ZN8emstreamlsEh+0xe6>
    1fc2:	40 31       	cpi	r20, 0x10	; 16
    1fc4:	f9 f4       	brne	.+62     	; 0x2004 <_ZN8emstreamlsEh+0xca>
    1fc6:	62 95       	swap	r22
    1fc8:	6f 70       	andi	r22, 0x0F	; 15
    1fca:	01 90       	ld	r0, Z+
    1fcc:	f0 81       	ld	r31, Z
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	02 80       	ldd	r0, Z+2	; 0x02
    1fd2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	6a 30       	cpi	r22, 0x0A	; 10
    1fd8:	10 f0       	brcs	.+4      	; 0x1fde <_ZN8emstreamlsEh+0xa4>
    1fda:	69 5c       	subi	r22, 0xC9	; 201
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <_ZN8emstreamlsEh+0xa6>
    1fde:	60 5d       	subi	r22, 0xD0	; 208
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	19 95       	eicall
    1fe4:	6e 2d       	mov	r22, r14
    1fe6:	6f 70       	andi	r22, 0x0F	; 15
    1fe8:	d8 01       	movw	r26, r16
    1fea:	ed 91       	ld	r30, X+
    1fec:	fc 91       	ld	r31, X
    1fee:	02 80       	ldd	r0, Z+2	; 0x02
    1ff0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	6a 30       	cpi	r22, 0x0A	; 10
    1ff6:	10 f0       	brcs	.+4      	; 0x1ffc <_ZN8emstreamlsEh+0xc2>
    1ff8:	69 5c       	subi	r22, 0xC9	; 201
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <_ZN8emstreamlsEh+0xc4>
    1ffc:	60 5d       	subi	r22, 0xD0	; 208
    1ffe:	c8 01       	movw	r24, r16
    2000:	19 95       	eicall
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <_ZN8emstreamlsEh+0xe6>
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	be 01       	movw	r22, r28
    2008:	6f 5f       	subi	r22, 0xFF	; 255
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	8e 2d       	mov	r24, r14
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <utoa>
    2014:	be 01       	movw	r22, r28
    2016:	6f 5f       	subi	r22, 0xFF	; 255
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    2020:	c8 01       	movw	r24, r16
    2022:	29 96       	adiw	r28, 0x09	; 9
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	08 95       	ret

0000203a <_ZN8emstreamlsEm>:
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	a1 97       	sbiw	r28, 0x21	; 33
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	8c 01       	movw	r16, r24
    2054:	d4 2e       	mov	r13, r20
    2056:	e5 2e       	mov	r14, r21
    2058:	f6 2e       	mov	r15, r22
    205a:	97 2f       	mov	r25, r23
    205c:	f8 01       	movw	r30, r16
    205e:	22 81       	ldd	r18, Z+2	; 0x02
    2060:	20 31       	cpi	r18, 0x10	; 16
    2062:	21 f0       	breq	.+8      	; 0x206c <_ZN8emstreamlsEm+0x32>
    2064:	28 30       	cpi	r18, 0x08	; 8
    2066:	11 f0       	breq	.+4      	; 0x206c <_ZN8emstreamlsEm+0x32>
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	71 f4       	brne	.+28     	; 0x2088 <_ZN8emstreamlsEm+0x4e>
    206c:	69 2f       	mov	r22, r25
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    2074:	6f 2d       	mov	r22, r15
    2076:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    207a:	6e 2d       	mov	r22, r14
    207c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    2080:	6d 2d       	mov	r22, r13
    2082:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <_ZN8emstreamlsEm+0x6c>
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	ae 01       	movw	r20, r28
    208c:	4f 5f       	subi	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	6d 2d       	mov	r22, r13
    2092:	7e 2d       	mov	r23, r14
    2094:	8f 2d       	mov	r24, r15
    2096:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <ultoa>
    209a:	be 01       	movw	r22, r28
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	c8 01       	movw	r24, r16
    20a2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    20a6:	c8 01       	movw	r24, r16
    20a8:	a1 96       	adiw	r28, 0x21	; 33
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	08 95       	ret

000020be <_ZN8emstreamlsEj>:
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	61 97       	sbiw	r28, 0x11	; 17
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	8c 01       	movw	r16, r24
    20d4:	f6 2e       	mov	r15, r22
    20d6:	97 2f       	mov	r25, r23
    20d8:	f8 01       	movw	r30, r16
    20da:	42 81       	ldd	r20, Z+2	; 0x02
    20dc:	40 31       	cpi	r20, 0x10	; 16
    20de:	21 f0       	breq	.+8      	; 0x20e8 <_ZN8emstreamlsEj+0x2a>
    20e0:	48 30       	cpi	r20, 0x08	; 8
    20e2:	11 f0       	breq	.+4      	; 0x20e8 <_ZN8emstreamlsEj+0x2a>
    20e4:	42 30       	cpi	r20, 0x02	; 2
    20e6:	41 f4       	brne	.+16     	; 0x20f8 <_ZN8emstreamlsEj+0x3a>
    20e8:	69 2f       	mov	r22, r25
    20ea:	c8 01       	movw	r24, r16
    20ec:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    20f0:	6f 2d       	mov	r22, r15
    20f2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN8emstreamlsEh>
    20f6:	0d c0       	rjmp	.+26     	; 0x2112 <_ZN8emstreamlsEj+0x54>
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	be 01       	movw	r22, r28
    20fc:	6f 5f       	subi	r22, 0xFF	; 255
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	8f 2d       	mov	r24, r15
    2102:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <utoa>
    2106:	be 01       	movw	r22, r28
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	c8 01       	movw	r24, r16
    210e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    2112:	c8 01       	movw	r24, r16
    2114:	61 96       	adiw	r28, 0x11	; 17
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	08 95       	ret

00002126 <_ZN8emstreamlsEi>:
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	61 97       	sbiw	r28, 0x11	; 17
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	8c 01       	movw	r16, r24
    213a:	9b 01       	movw	r18, r22
    213c:	fc 01       	movw	r30, r24
    213e:	92 81       	ldd	r25, Z+2	; 0x02
    2140:	9a 30       	cpi	r25, 0x0A	; 10
    2142:	21 f0       	breq	.+8      	; 0x214c <_ZN8emstreamlsEi+0x26>
    2144:	c8 01       	movw	r24, r16
    2146:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN8emstreamlsEj>
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <_ZN8emstreamlsEi+0x40>
    214c:	4a e0       	ldi	r20, 0x0A	; 10
    214e:	be 01       	movw	r22, r28
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	c9 01       	movw	r24, r18
    2156:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__itoa_ncheck>
    215a:	be 01       	movw	r22, r28
    215c:	6f 5f       	subi	r22, 0xFF	; 255
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	c8 01       	movw	r24, r16
    2162:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8emstream4putsEPKc>
    2166:	c8 01       	movw	r24, r16
    2168:	61 96       	adiw	r28, 0x11	; 17
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <_ZN14frt_base_queueIbE11ISR_butt_inERKb>:
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	08 95       	ret

0000217c <_ZN14frt_base_queueIbE7butt_inERKb>:
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	08 95       	ret

00002180 <_ZN14frt_base_queueIiE11ISR_butt_inERKi>:
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	08 95       	ret

00002184 <_ZN14frt_base_queueIiE7butt_inERKi>:
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	08 95       	ret

00002188 <_ZN9frt_queueIbE16ISR_num_items_inEv>:
    2188:	fc 01       	movw	r30, r24
    218a:	84 81       	ldd	r24, Z+4	; 0x04
    218c:	95 81       	ldd	r25, Z+5	; 0x05
    218e:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	08 95       	ret

00002196 <_ZN9frt_queueIbE13ISR_not_emptyEv>:
    2196:	fc 01       	movw	r30, r24
    2198:	84 81       	ldd	r24, Z+4	; 0x04
    219a:	95 81       	ldd	r25, Z+5	; 0x05
    219c:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	81 11       	cpse	r24, r1
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <_ZN9frt_queueIbE13ISR_not_emptyEv+0x12>
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	89 2f       	mov	r24, r25
    21aa:	08 95       	ret

000021ac <_ZN9frt_queueIbE12ISR_is_emptyEv>:
    21ac:	fc 01       	movw	r30, r24
    21ae:	84 81       	ldd	r24, Z+4	; 0x04
    21b0:	95 81       	ldd	r25, Z+5	; 0x05
    21b2:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	81 11       	cpse	r24, r1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	89 2f       	mov	r24, r25
    21be:	08 95       	ret

000021c0 <_ZN9frt_queueIiE16ISR_num_items_inEv>:
    21c0:	fc 01       	movw	r30, r24
    21c2:	84 81       	ldd	r24, Z+4	; 0x04
    21c4:	95 81       	ldd	r25, Z+5	; 0x05
    21c6:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	08 95       	ret

000021ce <_ZN9frt_queueIiE13ISR_not_emptyEv>:
    21ce:	fc 01       	movw	r30, r24
    21d0:	84 81       	ldd	r24, Z+4	; 0x04
    21d2:	95 81       	ldd	r25, Z+5	; 0x05
    21d4:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	81 11       	cpse	r24, r1
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <_ZN9frt_queueIiE13ISR_not_emptyEv+0x12>
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	89 2f       	mov	r24, r25
    21e2:	08 95       	ret

000021e4 <_ZN9frt_queueIiE12ISR_is_emptyEv>:
    21e4:	fc 01       	movw	r30, r24
    21e6:	84 81       	ldd	r24, Z+4	; 0x04
    21e8:	95 81       	ldd	r25, Z+5	; 0x05
    21ea:	0e 94 bb 18 	call	0x3176	; 0x3176 <uxQueueMessagesWaitingFromISR>
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	81 11       	cpse	r24, r1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	89 2f       	mov	r24, r25
    21f6:	08 95       	ret

000021f8 <_ZN9frt_queueIbE12num_items_inEv>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	84 81       	ldd	r24, Z+4	; 0x04
    21fc:	95 81       	ldd	r25, Z+5	; 0x05
    21fe:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	08 95       	ret

00002206 <_ZN9frt_queueIbE9not_emptyEv>:
    2206:	fc 01       	movw	r30, r24
    2208:	84 81       	ldd	r24, Z+4	; 0x04
    220a:	95 81       	ldd	r25, Z+5	; 0x05
    220c:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	81 11       	cpse	r24, r1
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <_ZN9frt_queueIbE9not_emptyEv+0x12>
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	89 2f       	mov	r24, r25
    221a:	08 95       	ret

0000221c <_ZN9frt_queueIbE8is_emptyEv>:
    221c:	fc 01       	movw	r30, r24
    221e:	84 81       	ldd	r24, Z+4	; 0x04
    2220:	95 81       	ldd	r25, Z+5	; 0x05
    2222:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	81 11       	cpse	r24, r1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	89 2f       	mov	r24, r25
    222e:	08 95       	ret

00002230 <_ZN9frt_queueIiE12num_items_inEv>:
    2230:	fc 01       	movw	r30, r24
    2232:	84 81       	ldd	r24, Z+4	; 0x04
    2234:	95 81       	ldd	r25, Z+5	; 0x05
    2236:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	08 95       	ret

0000223e <_ZN9frt_queueIiE9not_emptyEv>:
    223e:	fc 01       	movw	r30, r24
    2240:	84 81       	ldd	r24, Z+4	; 0x04
    2242:	95 81       	ldd	r25, Z+5	; 0x05
    2244:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	81 11       	cpse	r24, r1
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <_ZN9frt_queueIiE9not_emptyEv+0x12>
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	89 2f       	mov	r24, r25
    2252:	08 95       	ret

00002254 <_ZN9frt_queueIiE8is_emptyEv>:
    2254:	fc 01       	movw	r30, r24
    2256:	84 81       	ldd	r24, Z+4	; 0x04
    2258:	95 81       	ldd	r25, Z+5	; 0x05
    225a:	0e 94 b3 18 	call	0x3166	; 0x3166 <uxQueueMessagesWaiting>
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	81 11       	cpse	r24, r1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	89 2f       	mov	r24, r25
    2266:	08 95       	ret

00002268 <_ZN9frt_queueIbE10get_a_copyERb>:
    2268:	0f 93       	push	r16
    226a:	01 e0       	ldi	r16, 0x01	; 1
    226c:	2f ef       	ldi	r18, 0xFF	; 255
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	a9 01       	movw	r20, r18
    2272:	fc 01       	movw	r30, r24
    2274:	84 81       	ldd	r24, Z+4	; 0x04
    2276:	95 81       	ldd	r25, Z+5	; 0x05
    2278:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <_ZN9frt_queueIbE10get_a_copyEv>:
    2280:	0f 93       	push	r16
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	1f 92       	push	r1
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	01 e0       	ldi	r16, 0x01	; 1
    228e:	2f ef       	ldi	r18, 0xFF	; 255
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	a9 01       	movw	r20, r18
    2294:	be 01       	movw	r22, r28
    2296:	6f 5f       	subi	r22, 0xFF	; 255
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	fc 01       	movw	r30, r24
    229c:	84 81       	ldd	r24, Z+4	; 0x04
    229e:	95 81       	ldd	r25, Z+5	; 0x05
    22a0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	0f 90       	pop	r0
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <_ZN9frt_queueIbE3getEPb>:
    22b0:	0f 93       	push	r16
    22b2:	00 e0       	ldi	r16, 0x00	; 0
    22b4:	2f ef       	ldi	r18, 0xFF	; 255
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	a9 01       	movw	r20, r18
    22ba:	fc 01       	movw	r30, r24
    22bc:	84 81       	ldd	r24, Z+4	; 0x04
    22be:	95 81       	ldd	r25, Z+5	; 0x05
    22c0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    22c4:	0f 91       	pop	r16
    22c6:	08 95       	ret

000022c8 <_ZN9frt_queueIbE3getEv>:
    22c8:	0f 93       	push	r16
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	1f 92       	push	r1
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	00 e0       	ldi	r16, 0x00	; 0
    22d6:	2f ef       	ldi	r18, 0xFF	; 255
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	a9 01       	movw	r20, r18
    22dc:	be 01       	movw	r22, r28
    22de:	6f 5f       	subi	r22, 0xFF	; 255
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	fc 01       	movw	r30, r24
    22e4:	84 81       	ldd	r24, Z+4	; 0x04
    22e6:	95 81       	ldd	r25, Z+5	; 0x05
    22e8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <_ZN9frt_queueIiE10get_a_copyERi>:
    22f8:	0f 93       	push	r16
    22fa:	01 e0       	ldi	r16, 0x01	; 1
    22fc:	2f ef       	ldi	r18, 0xFF	; 255
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	a9 01       	movw	r20, r18
    2302:	fc 01       	movw	r30, r24
    2304:	84 81       	ldd	r24, Z+4	; 0x04
    2306:	95 81       	ldd	r25, Z+5	; 0x05
    2308:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <_ZN9frt_queueIiE10get_a_copyEv>:
    2310:	0f 93       	push	r16
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	1f 92       	push	r1
    2318:	1f 92       	push	r1
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	01 e0       	ldi	r16, 0x01	; 1
    2320:	2f ef       	ldi	r18, 0xFF	; 255
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	a9 01       	movw	r20, r18
    2326:	be 01       	movw	r22, r28
    2328:	6f 5f       	subi	r22, 0xFF	; 255
    232a:	7f 4f       	sbci	r23, 0xFF	; 255
    232c:	fc 01       	movw	r30, r24
    232e:	84 81       	ldd	r24, Z+4	; 0x04
    2330:	95 81       	ldd	r25, Z+5	; 0x05
    2332:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <_ZN9frt_queueIiE3getEPi>:
    2346:	0f 93       	push	r16
    2348:	00 e0       	ldi	r16, 0x00	; 0
    234a:	2f ef       	ldi	r18, 0xFF	; 255
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	a9 01       	movw	r20, r18
    2350:	fc 01       	movw	r30, r24
    2352:	84 81       	ldd	r24, Z+4	; 0x04
    2354:	95 81       	ldd	r25, Z+5	; 0x05
    2356:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <_ZN9frt_queueIiE3getEv>:
    235e:	0f 93       	push	r16
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	1f 92       	push	r1
    2366:	1f 92       	push	r1
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	00 e0       	ldi	r16, 0x00	; 0
    236e:	2f ef       	ldi	r18, 0xFF	; 255
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	a9 01       	movw	r20, r18
    2374:	be 01       	movw	r22, r28
    2376:	6f 5f       	subi	r22, 0xFF	; 255
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	fc 01       	movw	r30, r24
    237c:	84 81       	ldd	r24, Z+4	; 0x04
    237e:	95 81       	ldd	r25, Z+5	; 0x05
    2380:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <xQueueGenericReceive>
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	0f 91       	pop	r16
    2392:	08 95       	ret

00002394 <_ZN9frt_queueIbE7ISR_getEPb>:
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	1f 92       	push	r1
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ae 01       	movw	r20, r28
    23a0:	4f 5f       	subi	r20, 0xFF	; 255
    23a2:	5f 4f       	sbci	r21, 0xFF	; 255
    23a4:	fc 01       	movw	r30, r24
    23a6:	84 81       	ldd	r24, Z+4	; 0x04
    23a8:	95 81       	ldd	r25, Z+5	; 0x05
    23aa:	0e 94 86 18 	call	0x310c	; 0x310c <xQueueReceiveFromISR>
    23ae:	0f 90       	pop	r0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <_ZN9frt_queueIbE7ISR_getEv>:
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	1f 92       	push	r1
    23bc:	1f 92       	push	r1
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	ae 01       	movw	r20, r28
    23c4:	4e 5f       	subi	r20, 0xFE	; 254
    23c6:	5f 4f       	sbci	r21, 0xFF	; 255
    23c8:	be 01       	movw	r22, r28
    23ca:	6f 5f       	subi	r22, 0xFF	; 255
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	84 81       	ldd	r24, Z+4	; 0x04
    23d2:	95 81       	ldd	r25, Z+5	; 0x05
    23d4:	0e 94 86 18 	call	0x310c	; 0x310c <xQueueReceiveFromISR>
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <_ZN9frt_queueIiE7ISR_getEPi>:
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	1f 92       	push	r1
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	ae 01       	movw	r20, r28
    23f0:	4f 5f       	subi	r20, 0xFF	; 255
    23f2:	5f 4f       	sbci	r21, 0xFF	; 255
    23f4:	fc 01       	movw	r30, r24
    23f6:	84 81       	ldd	r24, Z+4	; 0x04
    23f8:	95 81       	ldd	r25, Z+5	; 0x05
    23fa:	0e 94 86 18 	call	0x310c	; 0x310c <xQueueReceiveFromISR>
    23fe:	0f 90       	pop	r0
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <_ZN9frt_queueIiE7ISR_getEv>:
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	00 d0       	rcall	.+0      	; 0x240c <_ZN9frt_queueIiE7ISR_getEv+0x6>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	ae 01       	movw	r20, r28
    2412:	4d 5f       	subi	r20, 0xFD	; 253
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	be 01       	movw	r22, r28
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	fc 01       	movw	r30, r24
    241e:	84 81       	ldd	r24, Z+4	; 0x04
    2420:	95 81       	ldd	r25, Z+5	; 0x05
    2422:	0e 94 86 18 	call	0x310c	; 0x310c <xQueueReceiveFromISR>
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	23 96       	adiw	r28, 0x03	; 3
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <_ZN9frt_queueIbE11ISR_butt_inERKb>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	1f 92       	push	r1
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	19 82       	std	Y+1, r1	; 0x01
    2442:	21 e0       	ldi	r18, 0x01	; 1
    2444:	ae 01       	movw	r20, r28
    2446:	4f 5f       	subi	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	fc 01       	movw	r30, r24
    244c:	84 81       	ldd	r24, Z+4	; 0x04
    244e:	95 81       	ldd	r25, Z+5	; 0x05
    2450:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xQueueGenericSendFromISR>
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	81 11       	cpse	r24, r1
    2458:	01 c0       	rjmp	.+2      	; 0x245c <_ZN9frt_queueIbE11ISR_butt_inERKb+0x26>
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	89 2f       	mov	r24, r25
    245e:	0f 90       	pop	r0
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <_ZN9frt_queueIbE7ISR_putERKb>:
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	1f 92       	push	r1
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	19 82       	std	Y+1, r1	; 0x01
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	ae 01       	movw	r20, r28
    2476:	4f 5f       	subi	r20, 0xFF	; 255
    2478:	5f 4f       	sbci	r21, 0xFF	; 255
    247a:	fc 01       	movw	r30, r24
    247c:	84 81       	ldd	r24, Z+4	; 0x04
    247e:	95 81       	ldd	r25, Z+5	; 0x05
    2480:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xQueueGenericSendFromISR>
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	81 11       	cpse	r24, r1
    2488:	01 c0       	rjmp	.+2      	; 0x248c <_ZN9frt_queueIbE7ISR_putERKb+0x26>
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	89 2f       	mov	r24, r25
    248e:	0f 90       	pop	r0
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <_ZN9frt_queueIiE11ISR_butt_inERKi>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	1f 92       	push	r1
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	19 82       	std	Y+1, r1	; 0x01
    24a2:	21 e0       	ldi	r18, 0x01	; 1
    24a4:	ae 01       	movw	r20, r28
    24a6:	4f 5f       	subi	r20, 0xFF	; 255
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255
    24aa:	fc 01       	movw	r30, r24
    24ac:	84 81       	ldd	r24, Z+4	; 0x04
    24ae:	95 81       	ldd	r25, Z+5	; 0x05
    24b0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xQueueGenericSendFromISR>
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	81 11       	cpse	r24, r1
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <_ZN9frt_queueIiE11ISR_butt_inERKi+0x26>
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	89 2f       	mov	r24, r25
    24be:	0f 90       	pop	r0
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <_ZN9frt_queueIiE7ISR_putERKi>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	1f 92       	push	r1
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	19 82       	std	Y+1, r1	; 0x01
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	ae 01       	movw	r20, r28
    24d6:	4f 5f       	subi	r20, 0xFF	; 255
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
    24da:	fc 01       	movw	r30, r24
    24dc:	84 81       	ldd	r24, Z+4	; 0x04
    24de:	95 81       	ldd	r25, Z+5	; 0x05
    24e0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <xQueueGenericSendFromISR>
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	81 11       	cpse	r24, r1
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <_ZN9frt_queueIiE7ISR_putERKi+0x26>
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	89 2f       	mov	r24, r25
    24ee:	0f 90       	pop	r0
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <_ZN9frt_queueIbE7butt_inERKb>:
    24f6:	0f 93       	push	r16
    24f8:	fc 01       	movw	r30, r24
    24fa:	26 81       	ldd	r18, Z+6	; 0x06
    24fc:	37 81       	ldd	r19, Z+7	; 0x07
    24fe:	40 85       	ldd	r20, Z+8	; 0x08
    2500:	51 85       	ldd	r21, Z+9	; 0x09
    2502:	01 e0       	ldi	r16, 0x01	; 1
    2504:	84 81       	ldd	r24, Z+4	; 0x04
    2506:	95 81       	ldd	r25, Z+5	; 0x05
    2508:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xQueueGenericSend>
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	81 11       	cpse	r24, r1
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <_ZN9frt_queueIbE7butt_inERKb+0x1e>
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	89 2f       	mov	r24, r25
    2516:	0f 91       	pop	r16
    2518:	08 95       	ret

0000251a <_ZN9frt_queueIbE3putERKb>:
    251a:	0f 93       	push	r16
    251c:	fc 01       	movw	r30, r24
    251e:	26 81       	ldd	r18, Z+6	; 0x06
    2520:	37 81       	ldd	r19, Z+7	; 0x07
    2522:	40 85       	ldd	r20, Z+8	; 0x08
    2524:	51 85       	ldd	r21, Z+9	; 0x09
    2526:	00 e0       	ldi	r16, 0x00	; 0
    2528:	84 81       	ldd	r24, Z+4	; 0x04
    252a:	95 81       	ldd	r25, Z+5	; 0x05
    252c:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xQueueGenericSend>
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	81 11       	cpse	r24, r1
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <_ZN9frt_queueIbE3putERKb+0x1e>
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	89 2f       	mov	r24, r25
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <_ZN9frt_queueIiE7butt_inERKi>:
    253e:	0f 93       	push	r16
    2540:	fc 01       	movw	r30, r24
    2542:	26 81       	ldd	r18, Z+6	; 0x06
    2544:	37 81       	ldd	r19, Z+7	; 0x07
    2546:	40 85       	ldd	r20, Z+8	; 0x08
    2548:	51 85       	ldd	r21, Z+9	; 0x09
    254a:	01 e0       	ldi	r16, 0x01	; 1
    254c:	84 81       	ldd	r24, Z+4	; 0x04
    254e:	95 81       	ldd	r25, Z+5	; 0x05
    2550:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xQueueGenericSend>
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	81 11       	cpse	r24, r1
    2558:	01 c0       	rjmp	.+2      	; 0x255c <_ZN9frt_queueIiE7butt_inERKi+0x1e>
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	89 2f       	mov	r24, r25
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <_ZN9frt_queueIiE3putERKi>:
    2562:	0f 93       	push	r16
    2564:	fc 01       	movw	r30, r24
    2566:	26 81       	ldd	r18, Z+6	; 0x06
    2568:	37 81       	ldd	r19, Z+7	; 0x07
    256a:	40 85       	ldd	r20, Z+8	; 0x08
    256c:	51 85       	ldd	r21, Z+9	; 0x09
    256e:	00 e0       	ldi	r16, 0x00	; 0
    2570:	84 81       	ldd	r24, Z+4	; 0x04
    2572:	95 81       	ldd	r25, Z+5	; 0x05
    2574:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xQueueGenericSend>
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	81 11       	cpse	r24, r1
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <_ZN9frt_queueIiE3putERKi+0x1e>
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	89 2f       	mov	r24, r25
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <_GLOBAL__sub_I_counter>:
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	c6 e6       	ldi	r28, 0x66	; 102
    258c:	d1 e2       	ldi	r29, 0x21	; 33
    258e:	8a e0       	ldi	r24, 0x0A	; 10
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	1b 82       	std	Y+3, r1	; 0x03
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	1c 82       	std	Y+4, r1	; 0x04
    259a:	1e 82       	std	Y+6, r1	; 0x06
    259c:	1f 82       	std	Y+7, r1	; 0x07
    259e:	8a ea       	ldi	r24, 0xAA	; 170
    25a0:	90 e2       	ldi	r25, 0x20	; 32
    25a2:	88 83       	st	Y, r24
    25a4:	99 83       	std	Y+1, r25	; 0x01
    25a6:	1e 86       	std	Y+14, r1	; 0x0e
    25a8:	1f 86       	std	Y+15, r1	; 0x0f
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	80 e2       	ldi	r24, 0x20	; 32
    25b0:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <xQueueGenericCreate>
    25b4:	88 87       	std	Y+8, r24	; 0x08
    25b6:	99 87       	std	Y+9, r25	; 0x09
    25b8:	8a e0       	ldi	r24, 0x0A	; 10
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a0 e0       	ldi	r26, 0x00	; 0
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	8a 87       	std	Y+10, r24	; 0x0a
    25c2:	9b 87       	std	Y+11, r25	; 0x0b
    25c4:	ac 87       	std	Y+12, r26	; 0x0c
    25c6:	bd 87       	std	Y+13, r27	; 0x0d
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	08 95       	ret

000025ce <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    25d8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    25dc:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <xHeapHasBeenInitialised.4150>
    25e0:	81 11       	cpse	r24, r1
    25e2:	1d c0       	rjmp	.+58     	; 0x261e <pvPortMalloc+0x50>
		{
			prvHeapInit();
    25e4:	ab e7       	ldi	r26, 0x7B	; 123
    25e6:	b1 e2       	ldi	r27, 0x21	; 33
    25e8:	ef e7       	ldi	r30, 0x7F	; 127
    25ea:	f1 e2       	ldi	r31, 0x21	; 33
    25ec:	ed 93       	st	X+, r30
    25ee:	fc 93       	st	X, r31
    25f0:	11 97       	sbiw	r26, 0x01	; 1
    25f2:	12 96       	adiw	r26, 0x02	; 2
    25f4:	1d 92       	st	X+, r1
    25f6:	1c 92       	st	X, r1
    25f8:	13 97       	sbiw	r26, 0x03	; 3
    25fa:	a7 e7       	ldi	r26, 0x77	; 119
    25fc:	b1 e2       	ldi	r27, 0x21	; 33
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	9f e0       	ldi	r25, 0x0F	; 15
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	8d 93       	st	X+, r24
    2606:	9c 93       	st	X, r25
    2608:	13 97       	sbiw	r26, 0x03	; 3
    260a:	1d 92       	st	X+, r1
    260c:	1c 92       	st	X, r1
    260e:	11 97       	sbiw	r26, 0x01	; 1
    2610:	82 83       	std	Z+2, r24	; 0x02
    2612:	93 83       	std	Z+3, r25	; 0x03
    2614:	a0 83       	st	Z, r26
    2616:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    261e:	20 97       	sbiw	r28, 0x00	; 0
    2620:	09 f4       	brne	.+2      	; 0x2624 <pvPortMalloc+0x56>
    2622:	5f c0       	rjmp	.+190    	; 0x26e2 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    2624:	9e 01       	movw	r18, r28
    2626:	2b 5f       	subi	r18, 0xFB	; 251
    2628:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    262a:	24 96       	adiw	r28, 0x04	; 4
    262c:	ce 3f       	cpi	r28, 0xFE	; 254
    262e:	df 40       	sbci	r29, 0x0F	; 15
    2630:	08 f0       	brcs	.+2      	; 0x2634 <pvPortMalloc+0x66>
    2632:	5a c0       	rjmp	.+180    	; 0x26e8 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    2634:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <xStart>
    2638:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    263c:	ab e7       	ldi	r26, 0x7B	; 123
    263e:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <pvPortMalloc+0x78>
    2642:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    2644:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	82 17       	cp	r24, r18
    264c:	93 07       	cpc	r25, r19
    264e:	20 f4       	brcc	.+8      	; 0x2658 <pvPortMalloc+0x8a>
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	a9 f7       	brne	.-22     	; 0x2642 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    2658:	c1 e2       	ldi	r28, 0x21	; 33
    265a:	e7 37       	cpi	r30, 0x77	; 119
    265c:	fc 07       	cpc	r31, r28
    265e:	09 f4       	brne	.+2      	; 0x2662 <pvPortMalloc+0x94>
    2660:	46 c0       	rjmp	.+140    	; 0x26ee <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2662:	cd 91       	ld	r28, X+
    2664:	dc 91       	ld	r29, X
    2666:	11 97       	sbiw	r26, 0x01	; 1
    2668:	8e 01       	movw	r16, r28
    266a:	0b 5f       	subi	r16, 0xFB	; 251
    266c:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	8d 93       	st	X+, r24
    2674:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	82 1b       	sub	r24, r18
    267c:	93 0b       	sbc	r25, r19
    267e:	8b 30       	cpi	r24, 0x0B	; 11
    2680:	91 05       	cpc	r25, r1
    2682:	10 f1       	brcs	.+68     	; 0x26c8 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2684:	bf 01       	movw	r22, r30
    2686:	62 0f       	add	r22, r18
    2688:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    268a:	db 01       	movw	r26, r22
    268c:	12 96       	adiw	r26, 0x02	; 2
    268e:	8d 93       	st	X+, r24
    2690:	9c 93       	st	X, r25
    2692:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2694:	22 83       	std	Z+2, r18	; 0x02
    2696:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2698:	12 96       	adiw	r26, 0x02	; 2
    269a:	4d 91       	ld	r20, X+
    269c:	5c 91       	ld	r21, X
    269e:	13 97       	sbiw	r26, 0x03	; 3
    26a0:	8b e7       	ldi	r24, 0x7B	; 123
    26a2:	91 e2       	ldi	r25, 0x21	; 33
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <pvPortMalloc+0xda>
    26a6:	cd 01       	movw	r24, r26
    26a8:	ec 01       	movw	r28, r24
    26aa:	a8 81       	ld	r26, Y
    26ac:	b9 81       	ldd	r27, Y+1	; 0x01
    26ae:	12 96       	adiw	r26, 0x02	; 2
    26b0:	2d 91       	ld	r18, X+
    26b2:	3c 91       	ld	r19, X
    26b4:	13 97       	sbiw	r26, 0x03	; 3
    26b6:	24 17       	cp	r18, r20
    26b8:	35 07       	cpc	r19, r21
    26ba:	a8 f3       	brcs	.-22     	; 0x26a6 <pvPortMalloc+0xd8>
    26bc:	eb 01       	movw	r28, r22
    26be:	a8 83       	st	Y, r26
    26c0:	b9 83       	std	Y+1, r27	; 0x01
    26c2:	dc 01       	movw	r26, r24
    26c4:	6d 93       	st	X+, r22
    26c6:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    26c8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    26cc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    26d0:	22 81       	ldd	r18, Z+2	; 0x02
    26d2:	33 81       	ldd	r19, Z+3	; 0x03
    26d4:	82 1b       	sub	r24, r18
    26d6:	93 0b       	sbc	r25, r19
    26d8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    26dc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    26e0:	08 c0       	rjmp	.+16     	; 0x26f2 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    26e2:	00 e0       	ldi	r16, 0x00	; 0
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <pvPortMalloc+0x124>
    26e8:	00 e0       	ldi	r16, 0x00	; 0
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <pvPortMalloc+0x124>
    26ee:	00 e0       	ldi	r16, 0x00	; 0
    26f0:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    26f2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    26f6:	c8 01       	movw	r24, r16
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret

00002702 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	41 f1       	breq	.+80     	; 0x275e <vPortFree+0x5c>
    270e:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2710:	8c 01       	movw	r16, r24
    2712:	05 50       	subi	r16, 0x05	; 5
    2714:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    2716:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    271a:	f8 01       	movw	r30, r16
    271c:	42 81       	ldd	r20, Z+2	; 0x02
    271e:	53 81       	ldd	r21, Z+3	; 0x03
    2720:	ab e7       	ldi	r26, 0x7B	; 123
    2722:	b1 e2       	ldi	r27, 0x21	; 33
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <vPortFree+0x26>
    2726:	df 01       	movw	r26, r30
    2728:	ed 91       	ld	r30, X+
    272a:	fc 91       	ld	r31, X
    272c:	11 97       	sbiw	r26, 0x01	; 1
    272e:	22 81       	ldd	r18, Z+2	; 0x02
    2730:	33 81       	ldd	r19, Z+3	; 0x03
    2732:	24 17       	cp	r18, r20
    2734:	35 07       	cpc	r19, r21
    2736:	b8 f3       	brcs	.-18     	; 0x2726 <vPortFree+0x24>
    2738:	25 97       	sbiw	r28, 0x05	; 5
    273a:	e8 83       	st	Y, r30
    273c:	f9 83       	std	Y+1, r31	; 0x01
    273e:	0d 93       	st	X+, r16
    2740:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2742:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2746:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2756:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    275a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
	}
}
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2768:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    276c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2770:	08 95       	ret

00002772 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2772:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2774:	03 96       	adiw	r24, 0x03	; 3
    2776:	81 83       	std	Z+1, r24	; 0x01
    2778:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    277a:	4f ef       	ldi	r20, 0xFF	; 255
    277c:	5f ef       	ldi	r21, 0xFF	; 255
    277e:	ba 01       	movw	r22, r20
    2780:	43 83       	std	Z+3, r20	; 0x03
    2782:	54 83       	std	Z+4, r21	; 0x04
    2784:	65 83       	std	Z+5, r22	; 0x05
    2786:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2788:	87 83       	std	Z+7, r24	; 0x07
    278a:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    278c:	81 87       	std	Z+9, r24	; 0x09
    278e:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2790:	10 82       	st	Z, r1
    2792:	08 95       	ret

00002794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2794:	fc 01       	movw	r30, r24
    2796:	12 86       	std	Z+10, r1	; 0x0a
    2798:	13 86       	std	Z+11, r1	; 0x0b
    279a:	08 95       	ret

0000279c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	fc 01       	movw	r30, r24
    27a2:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    27a4:	21 81       	ldd	r18, Z+1	; 0x01
    27a6:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    27a8:	e9 01       	movw	r28, r18
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	14 96       	adiw	r26, 0x04	; 4
    27b0:	8d 93       	st	X+, r24
    27b2:	9c 93       	st	X, r25
    27b4:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    27b6:	81 81       	ldd	r24, Z+1	; 0x01
    27b8:	92 81       	ldd	r25, Z+2	; 0x02
    27ba:	16 96       	adiw	r26, 0x06	; 6
    27bc:	8d 93       	st	X+, r24
    27be:	9c 93       	st	X, r25
    27c0:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	ec 01       	movw	r28, r24
    27c8:	6e 83       	std	Y+6, r22	; 0x06
    27ca:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    27cc:	e9 01       	movw	r28, r18
    27ce:	6c 83       	std	Y+4, r22	; 0x04
    27d0:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    27d2:	61 83       	std	Z+1, r22	; 0x01
    27d4:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    27d6:	1a 96       	adiw	r26, 0x0a	; 10
    27d8:	ed 93       	st	X+, r30
    27da:	fc 93       	st	X, r31
    27dc:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    27de:	80 81       	ld	r24, Z
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	80 83       	st	Z, r24
}
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    27f4:	08 81       	ld	r16, Y
    27f6:	19 81       	ldd	r17, Y+1	; 0x01
    27f8:	2a 81       	ldd	r18, Y+2	; 0x02
    27fa:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    27fc:	0f 3f       	cpi	r16, 0xFF	; 255
    27fe:	4f ef       	ldi	r20, 0xFF	; 255
    2800:	14 07       	cpc	r17, r20
    2802:	24 07       	cpc	r18, r20
    2804:	34 07       	cpc	r19, r20
    2806:	31 f4       	brne	.+12     	; 0x2814 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2808:	dc 01       	movw	r26, r24
    280a:	19 96       	adiw	r26, 0x09	; 9
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	1a 97       	sbiw	r26, 0x0a	; 10
    2812:	1f c0       	rjmp	.+62     	; 0x2852 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2814:	fc 01       	movw	r30, r24
    2816:	33 96       	adiw	r30, 0x03	; 3
    2818:	dc 01       	movw	r26, r24
    281a:	17 96       	adiw	r26, 0x07	; 7
    281c:	4d 91       	ld	r20, X+
    281e:	5c 91       	ld	r21, X
    2820:	18 97       	sbiw	r26, 0x08	; 8
    2822:	da 01       	movw	r26, r20
    2824:	4d 91       	ld	r20, X+
    2826:	5d 91       	ld	r21, X+
    2828:	6d 91       	ld	r22, X+
    282a:	7c 91       	ld	r23, X
    282c:	04 17       	cp	r16, r20
    282e:	15 07       	cpc	r17, r21
    2830:	26 07       	cpc	r18, r22
    2832:	37 07       	cpc	r19, r23
    2834:	70 f0       	brcs	.+28     	; 0x2852 <vListInsert+0x68>
    2836:	04 80       	ldd	r0, Z+4	; 0x04
    2838:	f5 81       	ldd	r31, Z+5	; 0x05
    283a:	e0 2d       	mov	r30, r0
    283c:	a4 81       	ldd	r26, Z+4	; 0x04
    283e:	b5 81       	ldd	r27, Z+5	; 0x05
    2840:	4d 91       	ld	r20, X+
    2842:	5d 91       	ld	r21, X+
    2844:	6d 91       	ld	r22, X+
    2846:	7c 91       	ld	r23, X
    2848:	04 17       	cp	r16, r20
    284a:	15 07       	cpc	r17, r21
    284c:	26 07       	cpc	r18, r22
    284e:	37 07       	cpc	r19, r23
    2850:	90 f7       	brcc	.-28     	; 0x2836 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2852:	a4 81       	ldd	r26, Z+4	; 0x04
    2854:	b5 81       	ldd	r27, Z+5	; 0x05
    2856:	ac 83       	std	Y+4, r26	; 0x04
    2858:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    285a:	16 96       	adiw	r26, 0x06	; 6
    285c:	cd 93       	st	X+, r28
    285e:	dc 93       	st	X, r29
    2860:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2862:	ee 83       	std	Y+6, r30	; 0x06
    2864:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2866:	c4 83       	std	Z+4, r28	; 0x04
    2868:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    286a:	8a 87       	std	Y+10, r24	; 0x0a
    286c:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    286e:	fc 01       	movw	r30, r24
    2870:	20 81       	ld	r18, Z
    2872:	2f 5f       	subi	r18, 0xFF	; 255
    2874:	20 83       	st	Z, r18
}
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret

00002880 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2880:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2882:	a4 81       	ldd	r26, Z+4	; 0x04
    2884:	b5 81       	ldd	r27, Z+5	; 0x05
    2886:	86 81       	ldd	r24, Z+6	; 0x06
    2888:	97 81       	ldd	r25, Z+7	; 0x07
    288a:	16 96       	adiw	r26, 0x06	; 6
    288c:	8d 93       	st	X+, r24
    288e:	9c 93       	st	X, r25
    2890:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2892:	a6 81       	ldd	r26, Z+6	; 0x06
    2894:	b7 81       	ldd	r27, Z+7	; 0x07
    2896:	84 81       	ldd	r24, Z+4	; 0x04
    2898:	95 81       	ldd	r25, Z+5	; 0x05
    289a:	14 96       	adiw	r26, 0x04	; 4
    289c:	8d 93       	st	X+, r24
    289e:	9c 93       	st	X, r25
    28a0:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    28a2:	a2 85       	ldd	r26, Z+10	; 0x0a
    28a4:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	8d 91       	ld	r24, X+
    28aa:	9c 91       	ld	r25, X
    28ac:	12 97       	sbiw	r26, 0x02	; 2
    28ae:	e8 17       	cp	r30, r24
    28b0:	f9 07       	cpc	r31, r25
    28b2:	31 f4       	brne	.+12     	; 0x28c0 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    28b4:	86 81       	ldd	r24, Z+6	; 0x06
    28b6:	97 81       	ldd	r25, Z+7	; 0x07
    28b8:	11 96       	adiw	r26, 0x01	; 1
    28ba:	8d 93       	st	X+, r24
    28bc:	9c 93       	st	X, r25
    28be:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    28c0:	12 86       	std	Z+10, r1	; 0x0a
    28c2:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    28c4:	8c 91       	ld	r24, X
    28c6:	81 50       	subi	r24, 0x01	; 1
    28c8:	8c 93       	st	X, r24
    28ca:	08 95       	ret

000028cc <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    28cc:	80 93 e0 31 	sts	0x31E0, r24	; 0x8031e0 <portStackTopForTask>
    28d0:	90 93 e1 31 	sts	0x31E1, r25	; 0x8031e1 <portStackTopForTask+0x1>
    28d4:	31 e1       	ldi	r19, 0x11	; 17
    28d6:	fc 01       	movw	r30, r24
    28d8:	30 83       	st	Z, r19
    28da:	31 97       	sbiw	r30, 0x01	; 1
    28dc:	22 e2       	ldi	r18, 0x22	; 34
    28de:	20 83       	st	Z, r18
    28e0:	31 97       	sbiw	r30, 0x01	; 1
    28e2:	a3 e3       	ldi	r26, 0x33	; 51
    28e4:	a0 83       	st	Z, r26
    28e6:	31 97       	sbiw	r30, 0x01	; 1
    28e8:	60 83       	st	Z, r22
    28ea:	31 97       	sbiw	r30, 0x01	; 1
    28ec:	70 83       	st	Z, r23
    28ee:	31 97       	sbiw	r30, 0x01	; 1
    28f0:	10 82       	st	Z, r1
    28f2:	31 97       	sbiw	r30, 0x01	; 1
    28f4:	10 82       	st	Z, r1
    28f6:	31 97       	sbiw	r30, 0x01	; 1
    28f8:	60 e8       	ldi	r22, 0x80	; 128
    28fa:	60 83       	st	Z, r22
    28fc:	31 97       	sbiw	r30, 0x01	; 1
    28fe:	10 82       	st	Z, r1
    2900:	31 97       	sbiw	r30, 0x01	; 1
    2902:	10 82       	st	Z, r1
    2904:	31 97       	sbiw	r30, 0x01	; 1
    2906:	10 82       	st	Z, r1
    2908:	31 97       	sbiw	r30, 0x01	; 1
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	60 83       	st	Z, r22
    290e:	31 97       	sbiw	r30, 0x01	; 1
    2910:	63 e0       	ldi	r22, 0x03	; 3
    2912:	60 83       	st	Z, r22
    2914:	31 97       	sbiw	r30, 0x01	; 1
    2916:	64 e0       	ldi	r22, 0x04	; 4
    2918:	60 83       	st	Z, r22
    291a:	31 97       	sbiw	r30, 0x01	; 1
    291c:	65 e0       	ldi	r22, 0x05	; 5
    291e:	60 83       	st	Z, r22
    2920:	31 97       	sbiw	r30, 0x01	; 1
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	60 83       	st	Z, r22
    2926:	31 97       	sbiw	r30, 0x01	; 1
    2928:	67 e0       	ldi	r22, 0x07	; 7
    292a:	60 83       	st	Z, r22
    292c:	31 97       	sbiw	r30, 0x01	; 1
    292e:	68 e0       	ldi	r22, 0x08	; 8
    2930:	60 83       	st	Z, r22
    2932:	31 97       	sbiw	r30, 0x01	; 1
    2934:	69 e0       	ldi	r22, 0x09	; 9
    2936:	60 83       	st	Z, r22
    2938:	31 97       	sbiw	r30, 0x01	; 1
    293a:	60 e1       	ldi	r22, 0x10	; 16
    293c:	60 83       	st	Z, r22
    293e:	31 97       	sbiw	r30, 0x01	; 1
    2940:	30 83       	st	Z, r19
    2942:	31 97       	sbiw	r30, 0x01	; 1
    2944:	32 e1       	ldi	r19, 0x12	; 18
    2946:	30 83       	st	Z, r19
    2948:	31 97       	sbiw	r30, 0x01	; 1
    294a:	33 e1       	ldi	r19, 0x13	; 19
    294c:	30 83       	st	Z, r19
    294e:	31 97       	sbiw	r30, 0x01	; 1
    2950:	34 e1       	ldi	r19, 0x14	; 20
    2952:	30 83       	st	Z, r19
    2954:	31 97       	sbiw	r30, 0x01	; 1
    2956:	35 e1       	ldi	r19, 0x15	; 21
    2958:	30 83       	st	Z, r19
    295a:	31 97       	sbiw	r30, 0x01	; 1
    295c:	36 e1       	ldi	r19, 0x16	; 22
    295e:	30 83       	st	Z, r19
    2960:	31 97       	sbiw	r30, 0x01	; 1
    2962:	37 e1       	ldi	r19, 0x17	; 23
    2964:	30 83       	st	Z, r19
    2966:	31 97       	sbiw	r30, 0x01	; 1
    2968:	38 e1       	ldi	r19, 0x18	; 24
    296a:	30 83       	st	Z, r19
    296c:	31 97       	sbiw	r30, 0x01	; 1
    296e:	39 e1       	ldi	r19, 0x19	; 25
    2970:	30 83       	st	Z, r19
    2972:	31 97       	sbiw	r30, 0x01	; 1
    2974:	30 e2       	ldi	r19, 0x20	; 32
    2976:	30 83       	st	Z, r19
    2978:	31 97       	sbiw	r30, 0x01	; 1
    297a:	31 e2       	ldi	r19, 0x21	; 33
    297c:	30 83       	st	Z, r19
    297e:	31 97       	sbiw	r30, 0x01	; 1
    2980:	20 83       	st	Z, r18
    2982:	31 97       	sbiw	r30, 0x01	; 1
    2984:	23 e2       	ldi	r18, 0x23	; 35
    2986:	20 83       	st	Z, r18
    2988:	31 97       	sbiw	r30, 0x01	; 1
    298a:	40 83       	st	Z, r20
    298c:	31 97       	sbiw	r30, 0x01	; 1
    298e:	50 83       	st	Z, r21
    2990:	31 97       	sbiw	r30, 0x01	; 1
    2992:	26 e2       	ldi	r18, 0x26	; 38
    2994:	20 83       	st	Z, r18
    2996:	31 97       	sbiw	r30, 0x01	; 1
    2998:	27 e2       	ldi	r18, 0x27	; 39
    299a:	20 83       	st	Z, r18
    299c:	31 97       	sbiw	r30, 0x01	; 1
    299e:	28 e2       	ldi	r18, 0x28	; 40
    29a0:	20 83       	st	Z, r18
    29a2:	31 97       	sbiw	r30, 0x01	; 1
    29a4:	29 e2       	ldi	r18, 0x29	; 41
    29a6:	20 83       	st	Z, r18
    29a8:	31 97       	sbiw	r30, 0x01	; 1
    29aa:	20 e3       	ldi	r18, 0x30	; 48
    29ac:	20 83       	st	Z, r18
    29ae:	31 97       	sbiw	r30, 0x01	; 1
    29b0:	21 e3       	ldi	r18, 0x31	; 49
    29b2:	20 83       	st	Z, r18
    29b4:	89 97       	sbiw	r24, 0x29	; 41
    29b6:	08 95       	ret

000029b8 <xPortStartScheduler>:
    29b8:	8c e7       	ldi	r24, 0x7C	; 124
    29ba:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    29ca:	91 e1       	ldi	r25, 0x11	; 17
    29cc:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    29d0:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    29d4:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    29d8:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    29dc:	cd 91       	ld	r28, X+
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	dd 91       	ld	r29, X+
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	ff 91       	pop	r31
    29e6:	ef 91       	pop	r30
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	bf 91       	pop	r27
    29ee:	af 91       	pop	r26
    29f0:	9f 91       	pop	r25
    29f2:	8f 91       	pop	r24
    29f4:	7f 91       	pop	r23
    29f6:	6f 91       	pop	r22
    29f8:	5f 91       	pop	r21
    29fa:	4f 91       	pop	r20
    29fc:	3f 91       	pop	r19
    29fe:	2f 91       	pop	r18
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	ff 90       	pop	r15
    2a06:	ef 90       	pop	r14
    2a08:	df 90       	pop	r13
    2a0a:	cf 90       	pop	r12
    2a0c:	bf 90       	pop	r11
    2a0e:	af 90       	pop	r10
    2a10:	9f 90       	pop	r9
    2a12:	8f 90       	pop	r8
    2a14:	7f 90       	pop	r7
    2a16:	6f 90       	pop	r6
    2a18:	5f 90       	pop	r5
    2a1a:	4f 90       	pop	r4
    2a1c:	3f 90       	pop	r3
    2a1e:	2f 90       	pop	r2
    2a20:	1f 90       	pop	r1
    2a22:	0f 90       	pop	r0
    2a24:	0c be       	out	0x3c, r0	; 60
    2a26:	0f 90       	pop	r0
    2a28:	0b be       	out	0x3b, r0	; 59
    2a2a:	0f 90       	pop	r0
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	0f 90       	pop	r0
    2a30:	08 95       	ret
    2a32:	08 95       	ret

00002a34 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2a34:	0f 92       	push	r0
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	0f 92       	push	r0
    2a3c:	0b b6       	in	r0, 0x3b	; 59
    2a3e:	0f 92       	push	r0
    2a40:	0c b6       	in	r0, 0x3c	; 60
    2a42:	0f 92       	push	r0
    2a44:	1f 92       	push	r1
    2a46:	11 24       	eor	r1, r1
    2a48:	2f 92       	push	r2
    2a4a:	3f 92       	push	r3
    2a4c:	4f 92       	push	r4
    2a4e:	5f 92       	push	r5
    2a50:	6f 92       	push	r6
    2a52:	7f 92       	push	r7
    2a54:	8f 92       	push	r8
    2a56:	9f 92       	push	r9
    2a58:	af 92       	push	r10
    2a5a:	bf 92       	push	r11
    2a5c:	cf 92       	push	r12
    2a5e:	df 92       	push	r13
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	2f 93       	push	r18
    2a6a:	3f 93       	push	r19
    2a6c:	4f 93       	push	r20
    2a6e:	5f 93       	push	r21
    2a70:	6f 93       	push	r22
    2a72:	7f 93       	push	r23
    2a74:	8f 93       	push	r24
    2a76:	9f 93       	push	r25
    2a78:	af 93       	push	r26
    2a7a:	bf 93       	push	r27
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	ef 93       	push	r30
    2a82:	ff 93       	push	r31
    2a84:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    2a88:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    2a8c:	0d b6       	in	r0, 0x3d	; 61
    2a8e:	0d 92       	st	X+, r0
    2a90:	0e b6       	in	r0, 0x3e	; 62
    2a92:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2a94:	0e 94 96 1c 	call	0x392c	; 0x392c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2a98:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    2a9c:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    2aa0:	cd 91       	ld	r28, X+
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	dd 91       	ld	r29, X+
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	ff 91       	pop	r31
    2aaa:	ef 91       	pop	r30
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	bf 91       	pop	r27
    2ab2:	af 91       	pop	r26
    2ab4:	9f 91       	pop	r25
    2ab6:	8f 91       	pop	r24
    2ab8:	7f 91       	pop	r23
    2aba:	6f 91       	pop	r22
    2abc:	5f 91       	pop	r21
    2abe:	4f 91       	pop	r20
    2ac0:	3f 91       	pop	r19
    2ac2:	2f 91       	pop	r18
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	7f 90       	pop	r7
    2ada:	6f 90       	pop	r6
    2adc:	5f 90       	pop	r5
    2ade:	4f 90       	pop	r4
    2ae0:	3f 90       	pop	r3
    2ae2:	2f 90       	pop	r2
    2ae4:	1f 90       	pop	r1
    2ae6:	0f 90       	pop	r0
    2ae8:	0c be       	out	0x3c, r0	; 60
    2aea:	0f 90       	pop	r0
    2aec:	0b be       	out	0x3b, r0	; 59
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2af4:	08 95       	ret

00002af6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2af6:	0f 92       	push	r0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	0f 92       	push	r0
    2afe:	0b b6       	in	r0, 0x3b	; 59
    2b00:	0f 92       	push	r0
    2b02:	0c b6       	in	r0, 0x3c	; 60
    2b04:	0f 92       	push	r0
    2b06:	1f 92       	push	r1
    2b08:	11 24       	eor	r1, r1
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	2f 93       	push	r18
    2b2c:	3f 93       	push	r19
    2b2e:	4f 93       	push	r20
    2b30:	5f 93       	push	r21
    2b32:	6f 93       	push	r22
    2b34:	7f 93       	push	r23
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	ef 93       	push	r30
    2b44:	ff 93       	push	r31
    2b46:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    2b4a:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    2b4e:	0d b6       	in	r0, 0x3d	; 61
    2b50:	0d 92       	st	X+, r0
    2b52:	0e b6       	in	r0, 0x3e	; 62
    2b54:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2b56:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <vTaskIncrementTick>
	vTaskSwitchContext();
    2b5a:	0e 94 96 1c 	call	0x392c	; 0x392c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2b5e:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    2b62:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    2b66:	cd 91       	ld	r28, X+
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	dd 91       	ld	r29, X+
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	ff 91       	pop	r31
    2b70:	ef 91       	pop	r30
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	bf 91       	pop	r27
    2b78:	af 91       	pop	r26
    2b7a:	9f 91       	pop	r25
    2b7c:	8f 91       	pop	r24
    2b7e:	7f 91       	pop	r23
    2b80:	6f 91       	pop	r22
    2b82:	5f 91       	pop	r21
    2b84:	4f 91       	pop	r20
    2b86:	3f 91       	pop	r19
    2b88:	2f 91       	pop	r18
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	ff 90       	pop	r15
    2b90:	ef 90       	pop	r14
    2b92:	df 90       	pop	r13
    2b94:	cf 90       	pop	r12
    2b96:	bf 90       	pop	r11
    2b98:	af 90       	pop	r10
    2b9a:	9f 90       	pop	r9
    2b9c:	8f 90       	pop	r8
    2b9e:	7f 90       	pop	r7
    2ba0:	6f 90       	pop	r6
    2ba2:	5f 90       	pop	r5
    2ba4:	4f 90       	pop	r4
    2ba6:	3f 90       	pop	r3
    2ba8:	2f 90       	pop	r2
    2baa:	1f 90       	pop	r1
    2bac:	0f 90       	pop	r0
    2bae:	0c be       	out	0x3c, r0	; 60
    2bb0:	0f 90       	pop	r0
    2bb2:	0b be       	out	0x3b, r0	; 59
    2bb4:	0f 90       	pop	r0
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2bba:	08 95       	ret

00002bbc <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2bbc:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2bc0:	18 95       	reti

00002bc2 <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	ec 01       	movw	r28, r24
    2bc8:	88 a1       	ldd	r24, Y+32	; 0x20
    2bca:	81 11       	cpse	r24, r1
    2bcc:	0b c0       	rjmp	.+22     	; 0x2be4 <prvCopyDataToQueue+0x22>
    2bce:	88 81       	ld	r24, Y
    2bd0:	99 81       	ldd	r25, Y+1	; 0x01
    2bd2:	89 2b       	or	r24, r25
    2bd4:	e1 f5       	brne	.+120    	; 0x2c4e <prvCopyDataToQueue+0x8c>
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <vTaskPriorityDisinherit>
    2bde:	1a 82       	std	Y+2, r1	; 0x02
    2be0:	1b 82       	std	Y+3, r1	; 0x03
    2be2:	35 c0       	rjmp	.+106    	; 0x2c4e <prvCopyDataToQueue+0x8c>
    2be4:	41 11       	cpse	r20, r1
    2be6:	17 c0       	rjmp	.+46     	; 0x2c16 <prvCopyDataToQueue+0x54>
    2be8:	48 2f       	mov	r20, r24
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf0:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <memcpy>
    2bf4:	28 a1       	ldd	r18, Y+32	; 0x20
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	82 0f       	add	r24, r18
    2bfc:	91 1d       	adc	r25, r1
    2bfe:	8c 83       	std	Y+4, r24	; 0x04
    2c00:	9d 83       	std	Y+5, r25	; 0x05
    2c02:	2a 81       	ldd	r18, Y+2	; 0x02
    2c04:	3b 81       	ldd	r19, Y+3	; 0x03
    2c06:	82 17       	cp	r24, r18
    2c08:	93 07       	cpc	r25, r19
    2c0a:	08 f1       	brcs	.+66     	; 0x2c4e <prvCopyDataToQueue+0x8c>
    2c0c:	88 81       	ld	r24, Y
    2c0e:	99 81       	ldd	r25, Y+1	; 0x01
    2c10:	8c 83       	std	Y+4, r24	; 0x04
    2c12:	9d 83       	std	Y+5, r25	; 0x05
    2c14:	1c c0       	rjmp	.+56     	; 0x2c4e <prvCopyDataToQueue+0x8c>
    2c16:	48 2f       	mov	r20, r24
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1e:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <memcpy>
    2c22:	88 a1       	ldd	r24, Y+32	; 0x20
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	91 95       	neg	r25
    2c28:	81 95       	neg	r24
    2c2a:	91 09       	sbc	r25, r1
    2c2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c30:	28 0f       	add	r18, r24
    2c32:	39 1f       	adc	r19, r25
    2c34:	2e 83       	std	Y+6, r18	; 0x06
    2c36:	3f 83       	std	Y+7, r19	; 0x07
    2c38:	48 81       	ld	r20, Y
    2c3a:	59 81       	ldd	r21, Y+1	; 0x01
    2c3c:	24 17       	cp	r18, r20
    2c3e:	35 07       	cpc	r19, r21
    2c40:	30 f4       	brcc	.+12     	; 0x2c4e <prvCopyDataToQueue+0x8c>
    2c42:	2a 81       	ldd	r18, Y+2	; 0x02
    2c44:	3b 81       	ldd	r19, Y+3	; 0x03
    2c46:	82 0f       	add	r24, r18
    2c48:	93 1f       	adc	r25, r19
    2c4a:	8e 83       	std	Y+6, r24	; 0x06
    2c4c:	9f 83       	std	Y+7, r25	; 0x07
    2c4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c50:	8f 5f       	subi	r24, 0xFF	; 255
    2c52:	8e 8f       	std	Y+30, r24	; 0x1e
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	08 95       	ret

00002c5a <prvCopyDataFromQueue>:
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	a1 f0       	breq	.+40     	; 0x2c8c <prvCopyDataFromQueue+0x32>
    2c64:	40 a1       	ldd	r20, Z+32	; 0x20
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	26 81       	ldd	r18, Z+6	; 0x06
    2c6a:	37 81       	ldd	r19, Z+7	; 0x07
    2c6c:	24 0f       	add	r18, r20
    2c6e:	35 1f       	adc	r19, r21
    2c70:	26 83       	std	Z+6, r18	; 0x06
    2c72:	37 83       	std	Z+7, r19	; 0x07
    2c74:	a2 81       	ldd	r26, Z+2	; 0x02
    2c76:	b3 81       	ldd	r27, Z+3	; 0x03
    2c78:	2a 17       	cp	r18, r26
    2c7a:	3b 07       	cpc	r19, r27
    2c7c:	10 f0       	brcs	.+4      	; 0x2c82 <prvCopyDataFromQueue+0x28>
    2c7e:	86 83       	std	Z+6, r24	; 0x06
    2c80:	97 83       	std	Z+7, r25	; 0x07
    2c82:	cb 01       	movw	r24, r22
    2c84:	66 81       	ldd	r22, Z+6	; 0x06
    2c86:	77 81       	ldd	r23, Z+7	; 0x07
    2c88:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <memcpy>
    2c8c:	08 95       	ret

00002c8e <prvUnlockQueue>:
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	ec 01       	movw	r28, r24
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	0f 92       	push	r0
    2c9e:	8a a1       	ldd	r24, Y+34	; 0x22
    2ca0:	18 16       	cp	r1, r24
    2ca2:	b4 f4       	brge	.+44     	; 0x2cd0 <prvUnlockQueue+0x42>
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	05 c0       	rjmp	.+10     	; 0x2cb4 <prvUnlockQueue+0x26>
    2caa:	12 c0       	rjmp	.+36     	; 0x2cd0 <prvUnlockQueue+0x42>
    2cac:	8b 89       	ldd	r24, Y+19	; 0x13
    2cae:	81 11       	cpse	r24, r1
    2cb0:	04 c0       	rjmp	.+8      	; 0x2cba <prvUnlockQueue+0x2c>
    2cb2:	0e c0       	rjmp	.+28     	; 0x2cd0 <prvUnlockQueue+0x42>
    2cb4:	8e 01       	movw	r16, r28
    2cb6:	0d 5e       	subi	r16, 0xED	; 237
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	c8 01       	movw	r24, r16
    2cbc:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vTaskMissedYield>
    2cc6:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc8:	81 50       	subi	r24, 0x01	; 1
    2cca:	8a a3       	std	Y+34, r24	; 0x22
    2ccc:	18 16       	cp	r1, r24
    2cce:	74 f3       	brlt	.-36     	; 0x2cac <prvUnlockQueue+0x1e>
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	8a a3       	std	Y+34, r24	; 0x22
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	0f 92       	push	r0
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	18 16       	cp	r1, r24
    2ce2:	b4 f4       	brge	.+44     	; 0x2d10 <prvUnlockQueue+0x82>
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <prvUnlockQueue+0x66>
    2cea:	12 c0       	rjmp	.+36     	; 0x2d10 <prvUnlockQueue+0x82>
    2cec:	88 85       	ldd	r24, Y+8	; 0x08
    2cee:	81 11       	cpse	r24, r1
    2cf0:	04 c0       	rjmp	.+8      	; 0x2cfa <prvUnlockQueue+0x6c>
    2cf2:	0e c0       	rjmp	.+28     	; 0x2d10 <prvUnlockQueue+0x82>
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	08 5f       	subi	r16, 0xF8	; 248
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	c8 01       	movw	r24, r16
    2cfc:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    2d00:	81 11       	cpse	r24, r1
    2d02:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <vTaskMissedYield>
    2d06:	89 a1       	ldd	r24, Y+33	; 0x21
    2d08:	81 50       	subi	r24, 0x01	; 1
    2d0a:	89 a3       	std	Y+33, r24	; 0x21
    2d0c:	18 16       	cp	r1, r24
    2d0e:	74 f3       	brlt	.-36     	; 0x2cec <prvUnlockQueue+0x5e>
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	89 a3       	std	Y+33, r24	; 0x21
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	08 95       	ret

00002d22 <xQueueGenericReset>:
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	61 30       	cpi	r22, 0x01	; 1
    2d2a:	59 f0       	breq	.+22     	; 0x2d42 <xQueueGenericReset+0x20>
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	23 89       	ldd	r18, Z+19	; 0x13
    2d30:	30 85       	ldd	r19, Z+8	; 0x08
    2d32:	31 11       	cpse	r19, r1
    2d34:	2c c0       	rjmp	.+88     	; 0x2d8e <xQueueGenericReset+0x6c>
    2d36:	11 e0       	ldi	r17, 0x01	; 1
    2d38:	21 11       	cpse	r18, r1
    2d3a:	10 e0       	ldi	r17, 0x00	; 0
    2d3c:	21 11       	cpse	r18, r1
    2d3e:	28 c0       	rjmp	.+80     	; 0x2d90 <xQueueGenericReset+0x6e>
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <xQueueGenericReset+0x22>
    2d42:	11 e0       	ldi	r17, 0x01	; 1
    2d44:	ec 01       	movw	r28, r24
    2d46:	48 81       	ld	r20, Y
    2d48:	59 81       	ldd	r21, Y+1	; 0x01
    2d4a:	28 a1       	ldd	r18, Y+32	; 0x20
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d50:	62 9f       	mul	r22, r18
    2d52:	c0 01       	movw	r24, r0
    2d54:	63 9f       	mul	r22, r19
    2d56:	90 0d       	add	r25, r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	ba 01       	movw	r22, r20
    2d5c:	68 0f       	add	r22, r24
    2d5e:	79 1f       	adc	r23, r25
    2d60:	6a 83       	std	Y+2, r22	; 0x02
    2d62:	7b 83       	std	Y+3, r23	; 0x03
    2d64:	1e 8e       	std	Y+30, r1	; 0x1e
    2d66:	4c 83       	std	Y+4, r20	; 0x04
    2d68:	5d 83       	std	Y+5, r21	; 0x05
    2d6a:	82 1b       	sub	r24, r18
    2d6c:	93 0b       	sbc	r25, r19
    2d6e:	84 0f       	add	r24, r20
    2d70:	95 1f       	adc	r25, r21
    2d72:	8e 83       	std	Y+6, r24	; 0x06
    2d74:	9f 83       	std	Y+7, r25	; 0x07
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	89 a3       	std	Y+33, r24	; 0x21
    2d7a:	8a a3       	std	Y+34, r24	; 0x22
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	08 96       	adiw	r24, 0x08	; 8
    2d80:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    2d84:	ce 01       	movw	r24, r28
    2d86:	43 96       	adiw	r24, 0x13	; 19
    2d88:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <xQueueGenericReset+0x6e>
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	81 2f       	mov	r24, r17
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	1f 91       	pop	r17
    2d98:	08 95       	ret

00002d9a <xQueueGenericCreate>:
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	88 23       	and	r24, r24
    2da4:	01 f1       	breq	.+64     	; 0x2de6 <xQueueGenericCreate+0x4c>
    2da6:	06 2f       	mov	r16, r22
    2da8:	18 2f       	mov	r17, r24
    2daa:	83 e2       	ldi	r24, 0x23	; 35
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    2db2:	ec 01       	movw	r28, r24
    2db4:	89 2b       	or	r24, r25
    2db6:	c9 f0       	breq	.+50     	; 0x2dea <xQueueGenericCreate+0x50>
    2db8:	10 9f       	mul	r17, r16
    2dba:	c0 01       	movw	r24, r0
    2dbc:	11 24       	eor	r1, r1
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    2dc4:	88 83       	st	Y, r24
    2dc6:	99 83       	std	Y+1, r25	; 0x01
    2dc8:	89 2b       	or	r24, r25
    2dca:	39 f0       	breq	.+14     	; 0x2dda <xQueueGenericCreate+0x40>
    2dcc:	1f 8f       	std	Y+31, r17	; 0x1f
    2dce:	08 a3       	std	Y+32, r16	; 0x20
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <xQueueGenericReset>
    2dd8:	08 c0       	rjmp	.+16     	; 0x2dea <xQueueGenericCreate+0x50>
    2dda:	ce 01       	movw	r24, r28
    2ddc:	0e 94 81 13 	call	0x2702	; 0x2702 <vPortFree>
    2de0:	c0 e0       	ldi	r28, 0x00	; 0
    2de2:	d0 e0       	ldi	r29, 0x00	; 0
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <xQueueGenericCreate+0x50>
    2de6:	c0 e0       	ldi	r28, 0x00	; 0
    2de8:	d0 e0       	ldi	r29, 0x00	; 0
    2dea:	ce 01       	movw	r24, r28
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <xQueueGenericSend>:
    2df6:	af 92       	push	r10
    2df8:	bf 92       	push	r11
    2dfa:	cf 92       	push	r12
    2dfc:	df 92       	push	r13
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	29 97       	sbiw	r28, 0x09	; 9
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	7c 01       	movw	r14, r24
    2e16:	5b 01       	movw	r10, r22
    2e18:	2e 83       	std	Y+6, r18	; 0x06
    2e1a:	3f 83       	std	Y+7, r19	; 0x07
    2e1c:	48 87       	std	Y+8, r20	; 0x08
    2e1e:	59 87       	std	Y+9, r21	; 0x09
    2e20:	10 e0       	ldi	r17, 0x00	; 0
    2e22:	6c 01       	movw	r12, r24
    2e24:	88 e0       	ldi	r24, 0x08	; 8
    2e26:	c8 0e       	add	r12, r24
    2e28:	d1 1c       	adc	r13, r1
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	0f 92       	push	r0
    2e30:	f7 01       	movw	r30, r14
    2e32:	96 8d       	ldd	r25, Z+30	; 0x1e
    2e34:	87 8d       	ldd	r24, Z+31	; 0x1f
    2e36:	98 17       	cp	r25, r24
    2e38:	a8 f4       	brcc	.+42     	; 0x2e64 <xQueueGenericSend+0x6e>
    2e3a:	40 2f       	mov	r20, r16
    2e3c:	b5 01       	movw	r22, r10
    2e3e:	c7 01       	movw	r24, r14
    2e40:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <prvCopyDataToQueue>
    2e44:	f7 01       	movw	r30, r14
    2e46:	83 89       	ldd	r24, Z+19	; 0x13
    2e48:	88 23       	and	r24, r24
    2e4a:	41 f0       	breq	.+16     	; 0x2e5c <xQueueGenericSend+0x66>
    2e4c:	c7 01       	movw	r24, r14
    2e4e:	43 96       	adiw	r24, 0x13	; 19
    2e50:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    2e54:	81 30       	cpi	r24, 0x01	; 1
    2e56:	11 f4       	brne	.+4      	; 0x2e5c <xQueueGenericSend+0x66>
    2e58:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    2e5c:	0f 90       	pop	r0
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	56 c0       	rjmp	.+172    	; 0x2f10 <xQueueGenericSend+0x11a>
    2e64:	8e 81       	ldd	r24, Y+6	; 0x06
    2e66:	9f 81       	ldd	r25, Y+7	; 0x07
    2e68:	a8 85       	ldd	r26, Y+8	; 0x08
    2e6a:	b9 85       	ldd	r27, Y+9	; 0x09
    2e6c:	89 2b       	or	r24, r25
    2e6e:	8a 2b       	or	r24, r26
    2e70:	8b 2b       	or	r24, r27
    2e72:	21 f4       	brne	.+8      	; 0x2e7c <xQueueGenericSend+0x86>
    2e74:	0f 90       	pop	r0
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	4a c0       	rjmp	.+148    	; 0x2f10 <xQueueGenericSend+0x11a>
    2e7c:	11 11       	cpse	r17, r1
    2e7e:	05 c0       	rjmp	.+10     	; 0x2e8a <xQueueGenericSend+0x94>
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <vTaskSetTimeOutState>
    2e88:	11 e0       	ldi	r17, 0x01	; 1
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	0f 92       	push	r0
    2e98:	f7 01       	movw	r30, r14
    2e9a:	81 a1       	ldd	r24, Z+33	; 0x21
    2e9c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <xQueueGenericSend+0xac>
    2ea0:	11 a2       	std	Z+33, r1	; 0x21
    2ea2:	f7 01       	movw	r30, r14
    2ea4:	82 a1       	ldd	r24, Z+34	; 0x22
    2ea6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <xQueueGenericSend+0xb6>
    2eaa:	12 a2       	std	Z+34, r1	; 0x22
    2eac:	0f 90       	pop	r0
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	be 01       	movw	r22, r28
    2eb2:	6a 5f       	subi	r22, 0xFA	; 250
    2eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <xTaskCheckForTimeOut>
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	21 c0       	rjmp	.+66     	; 0x2f04 <xQueueGenericSend+0x10e>
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	0f 92       	push	r0
    2ec8:	f7 01       	movw	r30, r14
    2eca:	96 8d       	ldd	r25, Z+30	; 0x1e
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	87 8d       	ldd	r24, Z+31	; 0x1f
    2ed2:	98 13       	cpse	r25, r24
    2ed4:	11 c0       	rjmp	.+34     	; 0x2ef8 <xQueueGenericSend+0x102>
    2ed6:	4e 81       	ldd	r20, Y+6	; 0x06
    2ed8:	5f 81       	ldd	r21, Y+7	; 0x07
    2eda:	68 85       	ldd	r22, Y+8	; 0x08
    2edc:	79 85       	ldd	r23, Y+9	; 0x09
    2ede:	c6 01       	movw	r24, r12
    2ee0:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <vTaskPlaceOnEventList>
    2ee4:	c7 01       	movw	r24, r14
    2ee6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
    2eea:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
    2eee:	81 11       	cpse	r24, r1
    2ef0:	9c cf       	rjmp	.-200    	; 0x2e2a <xQueueGenericSend+0x34>
    2ef2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    2ef6:	99 cf       	rjmp	.-206    	; 0x2e2a <xQueueGenericSend+0x34>
    2ef8:	c7 01       	movw	r24, r14
    2efa:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
    2efe:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
    2f02:	93 cf       	rjmp	.-218    	; 0x2e2a <xQueueGenericSend+0x34>
    2f04:	c7 01       	movw	r24, r14
    2f06:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
    2f0a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	29 96       	adiw	r28, 0x09	; 9
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
    2f26:	bf 90       	pop	r11
    2f28:	af 90       	pop	r10
    2f2a:	08 95       	ret

00002f2c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2f36:	fc 01       	movw	r30, r24
    2f38:	56 8d       	ldd	r21, Z+30	; 0x1e
    2f3a:	37 8d       	ldd	r19, Z+31	; 0x1f
    2f3c:	53 17       	cp	r21, r19
    2f3e:	c0 f4       	brcc	.+48     	; 0x2f70 <xQueueGenericSendFromISR+0x44>
    2f40:	42 2f       	mov	r20, r18
    2f42:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2f44:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2f48:	8a a1       	ldd	r24, Y+34	; 0x22
    2f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4c:	69 f4       	brne	.+26     	; 0x2f68 <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f50:	88 23       	and	r24, r24
    2f52:	81 f0       	breq	.+32     	; 0x2f74 <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f54:	ce 01       	movw	r24, r28
    2f56:	43 96       	adiw	r24, 0x13	; 19
    2f58:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    2f5c:	88 23       	and	r24, r24
    2f5e:	61 f0       	breq	.+24     	; 0x2f78 <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	f8 01       	movw	r30, r16
    2f64:	80 83       	st	Z, r24
    2f66:	09 c0       	rjmp	.+18     	; 0x2f7a <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2f68:	8f 5f       	subi	r24, 0xFF	; 255
    2f6a:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <xQueueGenericSendFromISR+0x4e>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	08 95       	ret

00002f84 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2f84:	af 92       	push	r10
    2f86:	bf 92       	push	r11
    2f88:	cf 92       	push	r12
    2f8a:	df 92       	push	r13
    2f8c:	ef 92       	push	r14
    2f8e:	ff 92       	push	r15
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	29 97       	sbiw	r28, 0x09	; 9
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	7c 01       	movw	r14, r24
    2fa4:	5b 01       	movw	r10, r22
    2fa6:	2e 83       	std	Y+6, r18	; 0x06
    2fa8:	3f 83       	std	Y+7, r19	; 0x07
    2faa:	48 87       	std	Y+8, r20	; 0x08
    2fac:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2fae:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2fb0:	6c 01       	movw	r12, r24
    2fb2:	83 e1       	ldi	r24, 0x13	; 19
    2fb4:	c8 0e       	add	r12, r24
    2fb6:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2fbe:	f7 01       	movw	r30, r14
    2fc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fc2:	88 23       	and	r24, r24
    2fc4:	99 f1       	breq	.+102    	; 0x302c <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2fc6:	c6 80       	ldd	r12, Z+6	; 0x06
    2fc8:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2fca:	b5 01       	movw	r22, r10
    2fcc:	c7 01       	movw	r24, r14
    2fce:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2fd2:	01 11       	cpse	r16, r1
    2fd4:	1a c0       	rjmp	.+52     	; 0x300a <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2fd6:	f7 01       	movw	r30, r14
    2fd8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fda:	81 50       	subi	r24, 0x01	; 1
    2fdc:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	89 2b       	or	r24, r25
    2fe4:	29 f4       	brne	.+10     	; 0x2ff0 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2fe6:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <xTaskGetCurrentTaskHandle>
    2fea:	f7 01       	movw	r30, r14
    2fec:	82 83       	std	Z+2, r24	; 0x02
    2fee:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ff0:	f7 01       	movw	r30, r14
    2ff2:	80 85       	ldd	r24, Z+8	; 0x08
    2ff4:	88 23       	and	r24, r24
    2ff6:	b1 f0       	breq	.+44     	; 0x3024 <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	08 96       	adiw	r24, 0x08	; 8
    2ffc:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	81 f4       	brne	.+32     	; 0x3024 <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    3004:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    3008:	0d c0       	rjmp	.+26     	; 0x3024 <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    300a:	f7 01       	movw	r30, r14
    300c:	c6 82       	std	Z+6, r12	; 0x06
    300e:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3010:	83 89       	ldd	r24, Z+19	; 0x13
    3012:	88 23       	and	r24, r24
    3014:	39 f0       	breq	.+14     	; 0x3024 <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3016:	c7 01       	movw	r24, r14
    3018:	43 96       	adiw	r24, 0x13	; 19
    301a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    301e:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3020:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	62 c0       	rjmp	.+196    	; 0x30f0 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    302c:	8e 81       	ldd	r24, Y+6	; 0x06
    302e:	9f 81       	ldd	r25, Y+7	; 0x07
    3030:	a8 85       	ldd	r26, Y+8	; 0x08
    3032:	b9 85       	ldd	r27, Y+9	; 0x09
    3034:	89 2b       	or	r24, r25
    3036:	8a 2b       	or	r24, r26
    3038:	8b 2b       	or	r24, r27
    303a:	21 f4       	brne	.+8      	; 0x3044 <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	56 c0       	rjmp	.+172    	; 0x30f0 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    3044:	11 11       	cpse	r17, r1
    3046:	05 c0       	rjmp	.+10     	; 0x3052 <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3048:	ce 01       	movw	r24, r28
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3050:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3056:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	0f 92       	push	r0
    3060:	f7 01       	movw	r30, r14
    3062:	81 a1       	ldd	r24, Z+33	; 0x21
    3064:	8f 3f       	cpi	r24, 0xFF	; 255
    3066:	09 f4       	brne	.+2      	; 0x306a <xQueueGenericReceive+0xe6>
    3068:	11 a2       	std	Z+33, r1	; 0x21
    306a:	f7 01       	movw	r30, r14
    306c:	82 a1       	ldd	r24, Z+34	; 0x22
    306e:	8f 3f       	cpi	r24, 0xFF	; 255
    3070:	09 f4       	brne	.+2      	; 0x3074 <xQueueGenericReceive+0xf0>
    3072:	12 a2       	std	Z+34, r1	; 0x22
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3078:	be 01       	movw	r22, r28
    307a:	6a 5f       	subi	r22, 0xFA	; 250
    307c:	7f 4f       	sbci	r23, 0xFF	; 255
    307e:	ce 01       	movw	r24, r28
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <xTaskCheckForTimeOut>
    3086:	81 11       	cpse	r24, r1
    3088:	2d c0       	rjmp	.+90     	; 0x30e4 <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3090:	f7 01       	movw	r30, r14
    3092:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3098:	81 11       	cpse	r24, r1
    309a:	1e c0       	rjmp	.+60     	; 0x30d8 <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	89 2b       	or	r24, r25
    30a2:	49 f4       	brne	.+18     	; 0x30b6 <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    30b2:	0f 90       	pop	r0
    30b4:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    30b6:	4e 81       	ldd	r20, Y+6	; 0x06
    30b8:	5f 81       	ldd	r21, Y+7	; 0x07
    30ba:	68 85       	ldd	r22, Y+8	; 0x08
    30bc:	79 85       	ldd	r23, Y+9	; 0x09
    30be:	c6 01       	movw	r24, r12
    30c0:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    30c4:	c7 01       	movw	r24, r14
    30c6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    30ca:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
    30ce:	81 11       	cpse	r24, r1
    30d0:	73 cf       	rjmp	.-282    	; 0x2fb8 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    30d2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    30d6:	70 cf       	rjmp	.-288    	; 0x2fb8 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    30d8:	c7 01       	movw	r24, r14
    30da:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30de:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
    30e2:	6a cf       	rjmp	.-300    	; 0x2fb8 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    30e4:	c7 01       	movw	r24, r14
    30e6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30ea:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    30ee:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    30f0:	29 96       	adiw	r28, 0x09	; 9
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	bf 90       	pop	r11
    3108:	af 90       	pop	r10
    310a:	08 95       	ret

0000310c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3114:	fc 01       	movw	r30, r24
    3116:	26 8d       	ldd	r18, Z+30	; 0x1e
    3118:	22 23       	and	r18, r18
    311a:	d9 f0       	breq	.+54     	; 0x3152 <xQueueReceiveFromISR+0x46>
    311c:	8a 01       	movw	r16, r20
    311e:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3120:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3124:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3126:	81 50       	subi	r24, 0x01	; 1
    3128:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    312a:	89 a1       	ldd	r24, Y+33	; 0x21
    312c:	8f 3f       	cpi	r24, 0xFF	; 255
    312e:	69 f4       	brne	.+26     	; 0x314a <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3130:	88 85       	ldd	r24, Y+8	; 0x08
    3132:	88 23       	and	r24, r24
    3134:	81 f0       	breq	.+32     	; 0x3156 <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3136:	ce 01       	movw	r24, r28
    3138:	08 96       	adiw	r24, 0x08	; 8
    313a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <xTaskRemoveFromEventList>
    313e:	88 23       	and	r24, r24
    3140:	61 f0       	breq	.+24     	; 0x315a <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	f8 01       	movw	r30, r16
    3146:	80 83       	st	Z, r24
    3148:	09 c0       	rjmp	.+18     	; 0x315c <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    314a:	8f 5f       	subi	r24, 0xFF	; 255
    314c:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	05 c0       	rjmp	.+10     	; 0x315c <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	03 c0       	rjmp	.+6      	; 0x315c <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	01 c0       	rjmp	.+2      	; 0x315c <xQueueReceiveFromISR+0x50>
    315a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    316c:	fc 01       	movw	r30, r24
    316e:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    3170:	0f 90       	pop	r0
    3172:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    3174:	08 95       	ret

00003176 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    3176:	fc 01       	movw	r30, r24
    3178:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    317a:	08 95       	ret

0000317c <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    317c:	c2 eb       	ldi	r28, 0xB2	; 178
    317e:	d1 e3       	ldi	r29, 0x31	; 49
    3180:	88 81       	ld	r24, Y
    3182:	82 30       	cpi	r24, 0x02	; 2
    3184:	e8 f3       	brcs	.-6      	; 0x3180 <prvIdleTask+0x4>
    3186:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    318a:	fa cf       	rjmp	.-12     	; 0x3180 <prvIdleTask+0x4>

0000318c <prvAddCurrentTaskToDelayedList>:
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	6b 01       	movw	r12, r22
    3196:	7c 01       	movw	r14, r24
    3198:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    319c:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    31a0:	62 83       	std	Z+2, r22	; 0x02
    31a2:	73 83       	std	Z+3, r23	; 0x03
    31a4:	84 83       	std	Z+4, r24	; 0x04
    31a6:	95 83       	std	Z+5, r25	; 0x05
    31a8:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    31ac:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    31b0:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    31b4:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    31b8:	c8 16       	cp	r12, r24
    31ba:	d9 06       	cpc	r13, r25
    31bc:	ea 06       	cpc	r14, r26
    31be:	fb 06       	cpc	r15, r27
    31c0:	68 f4       	brcc	.+26     	; 0x31dc <prvAddCurrentTaskToDelayedList+0x50>
    31c2:	60 91 de 31 	lds	r22, 0x31DE	; 0x8031de <pxCurrentTCB>
    31c6:	70 91 df 31 	lds	r23, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    31ca:	80 91 98 31 	lds	r24, 0x3198	; 0x803198 <pxOverflowDelayedTaskList>
    31ce:	90 91 99 31 	lds	r25, 0x3199	; 0x803199 <pxOverflowDelayedTaskList+0x1>
    31d2:	6e 5f       	subi	r22, 0xFE	; 254
    31d4:	7f 4f       	sbci	r23, 0xFF	; 255
    31d6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <vListInsert>
    31da:	21 c0       	rjmp	.+66     	; 0x321e <prvAddCurrentTaskToDelayedList+0x92>
    31dc:	60 91 de 31 	lds	r22, 0x31DE	; 0x8031de <pxCurrentTCB>
    31e0:	70 91 df 31 	lds	r23, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    31e4:	80 91 9a 31 	lds	r24, 0x319A	; 0x80319a <pxDelayedTaskList>
    31e8:	90 91 9b 31 	lds	r25, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    31ec:	6e 5f       	subi	r22, 0xFE	; 254
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <vListInsert>
    31f4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    31f8:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    31fc:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3200:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3204:	c8 16       	cp	r12, r24
    3206:	d9 06       	cpc	r13, r25
    3208:	ea 06       	cpc	r14, r26
    320a:	fb 06       	cpc	r15, r27
    320c:	40 f4       	brcc	.+16     	; 0x321e <prvAddCurrentTaskToDelayedList+0x92>
    320e:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    3212:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3216:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    321a:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	cf 90       	pop	r12
    3226:	08 95       	ret

00003228 <xTaskGenericCreate>:
    3228:	4f 92       	push	r4
    322a:	5f 92       	push	r5
    322c:	6f 92       	push	r6
    322e:	7f 92       	push	r7
    3230:	8f 92       	push	r8
    3232:	9f 92       	push	r9
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	5c 01       	movw	r10, r24
    324a:	4b 01       	movw	r8, r22
    324c:	3a 01       	movw	r6, r20
    324e:	29 01       	movw	r4, r18
    3250:	88 e2       	ldi	r24, 0x28	; 40
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    3258:	ec 01       	movw	r28, r24
    325a:	89 2b       	or	r24, r25
    325c:	09 f4       	brne	.+2      	; 0x3260 <xTaskGenericCreate+0x38>
    325e:	d4 c0       	rjmp	.+424    	; 0x3408 <xTaskGenericCreate+0x1e0>
    3260:	c1 14       	cp	r12, r1
    3262:	d1 04       	cpc	r13, r1
    3264:	09 f0       	breq	.+2      	; 0x3268 <xTaskGenericCreate+0x40>
    3266:	cc c0       	rjmp	.+408    	; 0x3400 <xTaskGenericCreate+0x1d8>
    3268:	c3 01       	movw	r24, r6
    326a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pvPortMalloc>
    326e:	8b 8f       	std	Y+27, r24	; 0x1b
    3270:	9c 8f       	std	Y+28, r25	; 0x1c
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	21 f4       	brne	.+8      	; 0x327e <xTaskGenericCreate+0x56>
    3276:	ce 01       	movw	r24, r28
    3278:	0e 94 81 13 	call	0x2702	; 0x2702 <vPortFree>
    327c:	c5 c0       	rjmp	.+394    	; 0x3408 <xTaskGenericCreate+0x1e0>
    327e:	a3 01       	movw	r20, r6
    3280:	61 e1       	ldi	r22, 0x11	; 17
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <memset>
    3288:	93 01       	movw	r18, r6
    328a:	21 50       	subi	r18, 0x01	; 1
    328c:	31 09       	sbc	r19, r1
    328e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3292:	3c 01       	movw	r6, r24
    3294:	62 0e       	add	r6, r18
    3296:	73 1e       	adc	r7, r19
    3298:	4a e0       	ldi	r20, 0x0A	; 10
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	b4 01       	movw	r22, r8
    329e:	ce 01       	movw	r24, r28
    32a0:	4d 96       	adiw	r24, 0x1d	; 29
    32a2:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <strncpy>
    32a6:	1e a2       	std	Y+38, r1	; 0x26
    32a8:	10 2f       	mov	r17, r16
    32aa:	04 30       	cpi	r16, 0x04	; 4
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <xTaskGenericCreate+0x88>
    32ae:	13 e0       	ldi	r17, 0x03	; 3
    32b0:	1a 8f       	std	Y+26, r17	; 0x1a
    32b2:	1f a3       	std	Y+39, r17	; 0x27
    32b4:	6e 01       	movw	r12, r28
    32b6:	22 e0       	ldi	r18, 0x02	; 2
    32b8:	c2 0e       	add	r12, r18
    32ba:	d1 1c       	adc	r13, r1
    32bc:	c6 01       	movw	r24, r12
    32be:	0e 94 ca 13 	call	0x2794	; 0x2794 <vListInitialiseItem>
    32c2:	ce 01       	movw	r24, r28
    32c4:	0e 96       	adiw	r24, 0x0e	; 14
    32c6:	0e 94 ca 13 	call	0x2794	; 0x2794 <vListInitialiseItem>
    32ca:	ca 87       	std	Y+10, r28	; 0x0a
    32cc:	db 87       	std	Y+11, r29	; 0x0b
    32ce:	84 e0       	ldi	r24, 0x04	; 4
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	81 1b       	sub	r24, r17
    32d8:	91 09       	sbc	r25, r1
    32da:	a1 09       	sbc	r26, r1
    32dc:	b1 09       	sbc	r27, r1
    32de:	8e 87       	std	Y+14, r24	; 0x0e
    32e0:	9f 87       	std	Y+15, r25	; 0x0f
    32e2:	a8 8b       	std	Y+16, r26	; 0x10
    32e4:	b9 8b       	std	Y+17, r27	; 0x11
    32e6:	ce 8b       	std	Y+22, r28	; 0x16
    32e8:	df 8b       	std	Y+23, r29	; 0x17
    32ea:	a2 01       	movw	r20, r4
    32ec:	b5 01       	movw	r22, r10
    32ee:	c3 01       	movw	r24, r6
    32f0:	0e 94 66 14 	call	0x28cc	; 0x28cc <pxPortInitialiseStack>
    32f4:	88 83       	st	Y, r24
    32f6:	99 83       	std	Y+1, r25	; 0x01
    32f8:	e1 14       	cp	r14, r1
    32fa:	f1 04       	cpc	r15, r1
    32fc:	19 f0       	breq	.+6      	; 0x3304 <xTaskGenericCreate+0xdc>
    32fe:	f7 01       	movw	r30, r14
    3300:	c0 83       	st	Z, r28
    3302:	d1 83       	std	Z+1, r29	; 0x01
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	0f 92       	push	r0
    330a:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <uxCurrentNumberOfTasks>
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	80 93 8a 31 	sts	0x318A, r24	; 0x80318a <uxCurrentNumberOfTasks>
    3314:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    3318:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    331c:	89 2b       	or	r24, r25
    331e:	89 f5       	brne	.+98     	; 0x3382 <xTaskGenericCreate+0x15a>
    3320:	c0 93 de 31 	sts	0x31DE, r28	; 0x8031de <pxCurrentTCB>
    3324:	d0 93 df 31 	sts	0x31DF, r29	; 0x8031df <pxCurrentTCB+0x1>
    3328:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <uxCurrentNumberOfTasks>
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	c1 f5       	brne	.+112    	; 0x33a0 <xTaskGenericCreate+0x178>
    3330:	82 eb       	ldi	r24, 0xB2	; 178
    3332:	91 e3       	ldi	r25, 0x31	; 49
    3334:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3338:	8d eb       	ldi	r24, 0xBD	; 189
    333a:	91 e3       	ldi	r25, 0x31	; 49
    333c:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3340:	88 ec       	ldi	r24, 0xC8	; 200
    3342:	91 e3       	ldi	r25, 0x31	; 49
    3344:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3348:	83 ed       	ldi	r24, 0xD3	; 211
    334a:	91 e3       	ldi	r25, 0x31	; 49
    334c:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3350:	87 ea       	ldi	r24, 0xA7	; 167
    3352:	91 e3       	ldi	r25, 0x31	; 49
    3354:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3358:	8c e9       	ldi	r24, 0x9C	; 156
    335a:	91 e3       	ldi	r25, 0x31	; 49
    335c:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3360:	8d e8       	ldi	r24, 0x8D	; 141
    3362:	91 e3       	ldi	r25, 0x31	; 49
    3364:	0e 94 b9 13 	call	0x2772	; 0x2772 <vListInitialise>
    3368:	87 ea       	ldi	r24, 0xA7	; 167
    336a:	91 e3       	ldi	r25, 0x31	; 49
    336c:	80 93 9a 31 	sts	0x319A, r24	; 0x80319a <pxDelayedTaskList>
    3370:	90 93 9b 31 	sts	0x319B, r25	; 0x80319b <pxDelayedTaskList+0x1>
    3374:	8c e9       	ldi	r24, 0x9C	; 156
    3376:	91 e3       	ldi	r25, 0x31	; 49
    3378:	80 93 98 31 	sts	0x3198, r24	; 0x803198 <pxOverflowDelayedTaskList>
    337c:	90 93 99 31 	sts	0x3199, r25	; 0x803199 <pxOverflowDelayedTaskList+0x1>
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <xTaskGenericCreate+0x178>
    3382:	80 91 83 31 	lds	r24, 0x3183	; 0x803183 <xSchedulerRunning>
    3386:	81 11       	cpse	r24, r1
    3388:	0b c0       	rjmp	.+22     	; 0x33a0 <xTaskGenericCreate+0x178>
    338a:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    338e:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3392:	82 8d       	ldd	r24, Z+26	; 0x1a
    3394:	08 17       	cp	r16, r24
    3396:	20 f0       	brcs	.+8      	; 0x33a0 <xTaskGenericCreate+0x178>
    3398:	c0 93 de 31 	sts	0x31DE, r28	; 0x8031de <pxCurrentTCB>
    339c:	d0 93 df 31 	sts	0x31DF, r29	; 0x8031df <pxCurrentTCB+0x1>
    33a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33a2:	90 91 85 31 	lds	r25, 0x3185	; 0x803185 <uxTopUsedPriority>
    33a6:	98 17       	cp	r25, r24
    33a8:	10 f4       	brcc	.+4      	; 0x33ae <xTaskGenericCreate+0x186>
    33aa:	80 93 85 31 	sts	0x3185, r24	; 0x803185 <uxTopUsedPriority>
    33ae:	90 91 7e 31 	lds	r25, 0x317E	; 0x80317e <uxTaskNumber>
    33b2:	9f 5f       	subi	r25, 0xFF	; 255
    33b4:	90 93 7e 31 	sts	0x317E, r25	; 0x80317e <uxTaskNumber>
    33b8:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    33bc:	98 17       	cp	r25, r24
    33be:	10 f4       	brcc	.+4      	; 0x33c4 <xTaskGenericCreate+0x19c>
    33c0:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    33c4:	fb e0       	ldi	r31, 0x0B	; 11
    33c6:	8f 9f       	mul	r24, r31
    33c8:	c0 01       	movw	r24, r0
    33ca:	11 24       	eor	r1, r1
    33cc:	b6 01       	movw	r22, r12
    33ce:	8e 54       	subi	r24, 0x4E	; 78
    33d0:	9e 4c       	sbci	r25, 0xCE	; 206
    33d2:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
    33d6:	0f 90       	pop	r0
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	80 91 83 31 	lds	r24, 0x3183	; 0x803183 <xSchedulerRunning>
    33de:	88 23       	and	r24, r24
    33e0:	59 f0       	breq	.+22     	; 0x33f8 <xTaskGenericCreate+0x1d0>
    33e2:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    33e6:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    33ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ec:	80 17       	cp	r24, r16
    33ee:	30 f4       	brcc	.+12     	; 0x33fc <xTaskGenericCreate+0x1d4>
    33f0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	09 c0       	rjmp	.+18     	; 0x340a <xTaskGenericCreate+0x1e2>
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	07 c0       	rjmp	.+14     	; 0x340a <xTaskGenericCreate+0x1e2>
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <xTaskGenericCreate+0x1e2>
    3400:	cb 8e       	std	Y+27, r12	; 0x1b
    3402:	dc 8e       	std	Y+28, r13	; 0x1c
    3404:	c6 01       	movw	r24, r12
    3406:	3b cf       	rjmp	.-394    	; 0x327e <xTaskGenericCreate+0x56>
    3408:	8f ef       	ldi	r24, 0xFF	; 255
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	df 90       	pop	r13
    3418:	cf 90       	pop	r12
    341a:	bf 90       	pop	r11
    341c:	af 90       	pop	r10
    341e:	9f 90       	pop	r9
    3420:	8f 90       	pop	r8
    3422:	7f 90       	pop	r7
    3424:	6f 90       	pop	r6
    3426:	5f 90       	pop	r5
    3428:	4f 90       	pop	r4
    342a:	08 95       	ret

0000342c <uxTaskPriorityGet>:
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	0f 92       	push	r0
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	21 f4       	brne	.+8      	; 0x343e <uxTaskPriorityGet+0x12>
    3436:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    343a:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	fc 01       	movw	r30, r24
    3444:	82 8d       	ldd	r24, Z+26	; 0x1a
    3446:	08 95       	ret

00003448 <vTaskStartScheduler>:
    3448:	af 92       	push	r10
    344a:	bf 92       	push	r11
    344c:	cf 92       	push	r12
    344e:	df 92       	push	r13
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	0f 93       	push	r16
    3456:	a1 2c       	mov	r10, r1
    3458:	b1 2c       	mov	r11, r1
    345a:	c1 2c       	mov	r12, r1
    345c:	d1 2c       	mov	r13, r1
    345e:	0f 2e       	mov	r0, r31
    3460:	fb e8       	ldi	r31, 0x8B	; 139
    3462:	ef 2e       	mov	r14, r31
    3464:	f1 e3       	ldi	r31, 0x31	; 49
    3466:	ff 2e       	mov	r15, r31
    3468:	f0 2d       	mov	r31, r0
    346a:	00 e0       	ldi	r16, 0x00	; 0
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	44 e6       	ldi	r20, 0x64	; 100
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	68 e3       	ldi	r22, 0x38	; 56
    3476:	71 e2       	ldi	r23, 0x21	; 33
    3478:	8e eb       	ldi	r24, 0xBE	; 190
    347a:	98 e1       	ldi	r25, 0x18	; 24
    347c:	0e 94 14 19 	call	0x3228	; 0x3228 <xTaskGenericCreate>
    3480:	81 30       	cpi	r24, 0x01	; 1
    3482:	69 f4       	brne	.+26     	; 0x349e <vTaskStartScheduler+0x56>
    3484:	f8 94       	cli
    3486:	80 93 83 31 	sts	0x3183, r24	; 0x803183 <xSchedulerRunning>
    348a:	10 92 86 31 	sts	0x3186, r1	; 0x803186 <xTickCount>
    348e:	10 92 87 31 	sts	0x3187, r1	; 0x803187 <xTickCount+0x1>
    3492:	10 92 88 31 	sts	0x3188, r1	; 0x803188 <xTickCount+0x2>
    3496:	10 92 89 31 	sts	0x3189, r1	; 0x803189 <xTickCount+0x3>
    349a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <xPortStartScheduler>
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	df 90       	pop	r13
    34a6:	cf 90       	pop	r12
    34a8:	bf 90       	pop	r11
    34aa:	af 90       	pop	r10
    34ac:	08 95       	ret

000034ae <vTaskSuspendAll>:
    34ae:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    34b2:	8f 5f       	subi	r24, 0xFF	; 255
    34b4:	80 93 82 31 	sts	0x3182, r24	; 0x803182 <uxSchedulerSuspended>
    34b8:	08 95       	ret

000034ba <xTaskGetTickCount>:
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	0f 92       	push	r0
    34c0:	60 91 86 31 	lds	r22, 0x3186	; 0x803186 <xTickCount>
    34c4:	70 91 87 31 	lds	r23, 0x3187	; 0x803187 <xTickCount+0x1>
    34c8:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <xTickCount+0x2>
    34cc:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <xTickCount+0x3>
    34d0:	0f 90       	pop	r0
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	08 95       	ret

000034d6 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    34d6:	00 97       	sbiw	r24, 0x00	; 0
    34d8:	21 f4       	brne	.+8      	; 0x34e2 <pcTaskGetTaskName+0xc>
    34da:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    34de:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    34e2:	4d 96       	adiw	r24, 0x1d	; 29
    34e4:	08 95       	ret

000034e6 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    34e6:	80 91 8b 31 	lds	r24, 0x318B	; 0x80318b <xIdleTaskHandle>
    34ea:	90 91 8c 31 	lds	r25, 0x318C	; 0x80318c <xIdleTaskHandle+0x1>
    34ee:	08 95       	ret

000034f0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    34fa:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    34fe:	81 11       	cpse	r24, r1
    3500:	ed c0       	rjmp	.+474    	; 0x36dc <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    3502:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3506:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    350a:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    350e:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	a1 1d       	adc	r26, r1
    3516:	b1 1d       	adc	r27, r1
    3518:	80 93 86 31 	sts	0x3186, r24	; 0x803186 <xTickCount>
    351c:	90 93 87 31 	sts	0x3187, r25	; 0x803187 <xTickCount+0x1>
    3520:	a0 93 88 31 	sts	0x3188, r26	; 0x803188 <xTickCount+0x2>
    3524:	b0 93 89 31 	sts	0x3189, r27	; 0x803189 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    3528:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    352c:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3530:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    3534:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    3538:	89 2b       	or	r24, r25
    353a:	8a 2b       	or	r24, r26
    353c:	8b 2b       	or	r24, r27
    353e:	f1 f5       	brne	.+124    	; 0x35bc <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3540:	80 91 9a 31 	lds	r24, 0x319A	; 0x80319a <pxDelayedTaskList>
    3544:	90 91 9b 31 	lds	r25, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3548:	20 91 98 31 	lds	r18, 0x3198	; 0x803198 <pxOverflowDelayedTaskList>
    354c:	30 91 99 31 	lds	r19, 0x3199	; 0x803199 <pxOverflowDelayedTaskList+0x1>
    3550:	20 93 9a 31 	sts	0x319A, r18	; 0x80319a <pxDelayedTaskList>
    3554:	30 93 9b 31 	sts	0x319B, r19	; 0x80319b <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    3558:	80 93 98 31 	sts	0x3198, r24	; 0x803198 <pxOverflowDelayedTaskList>
    355c:	90 93 99 31 	sts	0x3199, r25	; 0x803199 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    3560:	80 91 7f 31 	lds	r24, 0x317F	; 0x80317f <xNumOfOverflows>
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	80 93 7f 31 	sts	0x317F, r24	; 0x80317f <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    356a:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    356e:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    3572:	80 81       	ld	r24, Z
    3574:	81 11       	cpse	r24, r1
    3576:	0c c0       	rjmp	.+24     	; 0x3590 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3578:	8f ef       	ldi	r24, 0xFF	; 255
    357a:	9f ef       	ldi	r25, 0xFF	; 255
    357c:	dc 01       	movw	r26, r24
    357e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3582:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3586:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    358a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    358e:	16 c0       	rjmp	.+44     	; 0x35bc <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3590:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    3594:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    3598:	07 80       	ldd	r0, Z+7	; 0x07
    359a:	f0 85       	ldd	r31, Z+8	; 0x08
    359c:	e0 2d       	mov	r30, r0
    359e:	00 84       	ldd	r0, Z+8	; 0x08
    35a0:	f1 85       	ldd	r31, Z+9	; 0x09
    35a2:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	a4 81       	ldd	r26, Z+4	; 0x04
    35aa:	b5 81       	ldd	r27, Z+5	; 0x05
    35ac:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    35b0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    35b4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    35b8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    35bc:	40 91 86 31 	lds	r20, 0x3186	; 0x803186 <xTickCount>
    35c0:	50 91 87 31 	lds	r21, 0x3187	; 0x803187 <xTickCount+0x1>
    35c4:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <xTickCount+0x2>
    35c8:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <xTickCount+0x3>
    35cc:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    35d0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    35d4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    35d8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    35dc:	48 17       	cp	r20, r24
    35de:	59 07       	cpc	r21, r25
    35e0:	6a 07       	cpc	r22, r26
    35e2:	7b 07       	cpc	r23, r27
    35e4:	08 f4       	brcc	.+2      	; 0x35e8 <vTaskIncrementTick+0xf8>
    35e6:	7f c0       	rjmp	.+254    	; 0x36e6 <vTaskIncrementTick+0x1f6>
    35e8:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    35ec:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    35f0:	80 81       	ld	r24, Z
    35f2:	88 23       	and	r24, r24
    35f4:	f9 f0       	breq	.+62     	; 0x3634 <vTaskIncrementTick+0x144>
    35f6:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    35fa:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    35fe:	07 80       	ldd	r0, Z+7	; 0x07
    3600:	f0 85       	ldd	r31, Z+8	; 0x08
    3602:	e0 2d       	mov	r30, r0
    3604:	c0 85       	ldd	r28, Z+8	; 0x08
    3606:	d1 85       	ldd	r29, Z+9	; 0x09
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	ac 81       	ldd	r26, Y+4	; 0x04
    360e:	bd 81       	ldd	r27, Y+5	; 0x05
    3610:	40 91 86 31 	lds	r20, 0x3186	; 0x803186 <xTickCount>
    3614:	50 91 87 31 	lds	r21, 0x3187	; 0x803187 <xTickCount+0x1>
    3618:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <xTickCount+0x2>
    361c:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <xTickCount+0x3>
    3620:	48 17       	cp	r20, r24
    3622:	59 07       	cpc	r21, r25
    3624:	6a 07       	cpc	r22, r26
    3626:	7b 07       	cpc	r23, r27
    3628:	58 f1       	brcs	.+86     	; 0x3680 <vTaskIncrementTick+0x190>
    362a:	0f 2e       	mov	r0, r31
    362c:	fb e0       	ldi	r31, 0x0B	; 11
    362e:	ff 2e       	mov	r15, r31
    3630:	f0 2d       	mov	r31, r0
    3632:	2f c0       	rjmp	.+94     	; 0x3692 <vTaskIncrementTick+0x1a2>
    3634:	8f ef       	ldi	r24, 0xFF	; 255
    3636:	9f ef       	ldi	r25, 0xFF	; 255
    3638:	dc 01       	movw	r26, r24
    363a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    363e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3642:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3646:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    364a:	4d c0       	rjmp	.+154    	; 0x36e6 <vTaskIncrementTick+0x1f6>
    364c:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    3650:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    3654:	07 80       	ldd	r0, Z+7	; 0x07
    3656:	f0 85       	ldd	r31, Z+8	; 0x08
    3658:	e0 2d       	mov	r30, r0
    365a:	c0 85       	ldd	r28, Z+8	; 0x08
    365c:	d1 85       	ldd	r29, Z+9	; 0x09
    365e:	8a 81       	ldd	r24, Y+2	; 0x02
    3660:	9b 81       	ldd	r25, Y+3	; 0x03
    3662:	ac 81       	ldd	r26, Y+4	; 0x04
    3664:	bd 81       	ldd	r27, Y+5	; 0x05
    3666:	40 91 86 31 	lds	r20, 0x3186	; 0x803186 <xTickCount>
    366a:	50 91 87 31 	lds	r21, 0x3187	; 0x803187 <xTickCount+0x1>
    366e:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <xTickCount+0x2>
    3672:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <xTickCount+0x3>
    3676:	48 17       	cp	r20, r24
    3678:	59 07       	cpc	r21, r25
    367a:	6a 07       	cpc	r22, r26
    367c:	7b 07       	cpc	r23, r27
    367e:	48 f4       	brcc	.+18     	; 0x3692 <vTaskIncrementTick+0x1a2>
    3680:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3684:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3688:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    368c:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3690:	2a c0       	rjmp	.+84     	; 0x36e6 <vTaskIncrementTick+0x1f6>
    3692:	8e 01       	movw	r16, r28
    3694:	0e 5f       	subi	r16, 0xFE	; 254
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	c8 01       	movw	r24, r16
    369a:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
    369e:	88 8d       	ldd	r24, Y+24	; 0x18
    36a0:	99 8d       	ldd	r25, Y+25	; 0x19
    36a2:	89 2b       	or	r24, r25
    36a4:	21 f0       	breq	.+8      	; 0x36ae <vTaskIncrementTick+0x1be>
    36a6:	ce 01       	movw	r24, r28
    36a8:	0e 96       	adiw	r24, 0x0e	; 14
    36aa:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
    36ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36b0:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    36b4:	98 17       	cp	r25, r24
    36b6:	10 f4       	brcc	.+4      	; 0x36bc <vTaskIncrementTick+0x1cc>
    36b8:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    36bc:	f8 9e       	mul	r15, r24
    36be:	c0 01       	movw	r24, r0
    36c0:	11 24       	eor	r1, r1
    36c2:	b8 01       	movw	r22, r16
    36c4:	8e 54       	subi	r24, 0x4E	; 78
    36c6:	9e 4c       	sbci	r25, 0xCE	; 206
    36c8:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
    36cc:	e0 91 9a 31 	lds	r30, 0x319A	; 0x80319a <pxDelayedTaskList>
    36d0:	f0 91 9b 31 	lds	r31, 0x319B	; 0x80319b <pxDelayedTaskList+0x1>
    36d4:	80 81       	ld	r24, Z
    36d6:	81 11       	cpse	r24, r1
    36d8:	b9 cf       	rjmp	.-142    	; 0x364c <vTaskIncrementTick+0x15c>
    36da:	ac cf       	rjmp	.-168    	; 0x3634 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    36dc:	80 91 81 31 	lds	r24, 0x3181	; 0x803181 <uxMissedTicks>
    36e0:	8f 5f       	subi	r24, 0xFF	; 255
    36e2:	80 93 81 31 	sts	0x3181, r24	; 0x803181 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	08 95       	ret

000036f2 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3708:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    370c:	81 50       	subi	r24, 0x01	; 1
    370e:	80 93 82 31 	sts	0x3182, r24	; 0x803182 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3712:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    3716:	81 11       	cpse	r24, r1
    3718:	60 c0       	rjmp	.+192    	; 0x37da <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    371a:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <uxCurrentNumberOfTasks>
    371e:	81 11       	cpse	r24, r1
    3720:	2c c0       	rjmp	.+88     	; 0x377a <xTaskResumeAll+0x88>
    3722:	5e c0       	rjmp	.+188    	; 0x37e0 <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3724:	d7 01       	movw	r26, r14
    3726:	17 96       	adiw	r26, 0x07	; 7
    3728:	ed 91       	ld	r30, X+
    372a:	fc 91       	ld	r31, X
    372c:	18 97       	sbiw	r26, 0x08	; 8
    372e:	c0 85       	ldd	r28, Z+8	; 0x08
    3730:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    3732:	ce 01       	movw	r24, r28
    3734:	0e 96       	adiw	r24, 0x0e	; 14
    3736:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    373a:	8e 01       	movw	r16, r28
    373c:	0e 5f       	subi	r16, 0xFE	; 254
    373e:	1f 4f       	sbci	r17, 0xFF	; 255
    3740:	c8 01       	movw	r24, r16
    3742:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3746:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3748:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    374c:	98 17       	cp	r25, r24
    374e:	10 f4       	brcc	.+4      	; 0x3754 <xTaskResumeAll+0x62>
    3750:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    3754:	d8 9e       	mul	r13, r24
    3756:	c0 01       	movw	r24, r0
    3758:	11 24       	eor	r1, r1
    375a:	b8 01       	movw	r22, r16
    375c:	8e 54       	subi	r24, 0x4E	; 78
    375e:	9e 4c       	sbci	r25, 0xCE	; 206
    3760:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3764:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    3768:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    376c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    376e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3770:	98 17       	cp	r25, r24
    3772:	70 f0       	brcs	.+28     	; 0x3790 <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3774:	cc 24       	eor	r12, r12
    3776:	c3 94       	inc	r12
    3778:	0b c0       	rjmp	.+22     	; 0x3790 <xTaskResumeAll+0x9e>
    377a:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    377c:	0f 2e       	mov	r0, r31
    377e:	fd e8       	ldi	r31, 0x8D	; 141
    3780:	ef 2e       	mov	r14, r31
    3782:	f1 e3       	ldi	r31, 0x31	; 49
    3784:	ff 2e       	mov	r15, r31
    3786:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3788:	0f 2e       	mov	r0, r31
    378a:	fb e0       	ldi	r31, 0x0B	; 11
    378c:	df 2e       	mov	r13, r31
    378e:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3790:	f7 01       	movw	r30, r14
    3792:	80 81       	ld	r24, Z
    3794:	81 11       	cpse	r24, r1
    3796:	c6 cf       	rjmp	.-116    	; 0x3724 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3798:	80 91 81 31 	lds	r24, 0x3181	; 0x803181 <uxMissedTicks>
    379c:	88 23       	and	r24, r24
    379e:	81 f0       	breq	.+32     	; 0x37c0 <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    37a0:	80 91 81 31 	lds	r24, 0x3181	; 0x803181 <uxMissedTicks>
    37a4:	88 23       	and	r24, r24
    37a6:	99 f0       	breq	.+38     	; 0x37ce <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    37a8:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <vTaskIncrementTick>
						--uxMissedTicks;
    37ac:	80 91 81 31 	lds	r24, 0x3181	; 0x803181 <uxMissedTicks>
    37b0:	81 50       	subi	r24, 0x01	; 1
    37b2:	80 93 81 31 	sts	0x3181, r24	; 0x803181 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    37b6:	80 91 81 31 	lds	r24, 0x3181	; 0x803181 <uxMissedTicks>
    37ba:	81 11       	cpse	r24, r1
    37bc:	f5 cf       	rjmp	.-22     	; 0x37a8 <xTaskResumeAll+0xb6>
    37be:	07 c0       	rjmp	.+14     	; 0x37ce <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    37c0:	f1 e0       	ldi	r31, 0x01	; 1
    37c2:	cf 16       	cp	r12, r31
    37c4:	21 f0       	breq	.+8      	; 0x37ce <xTaskResumeAll+0xdc>
    37c6:	80 91 80 31 	lds	r24, 0x3180	; 0x803180 <xMissedYield>
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	41 f4       	brne	.+16     	; 0x37de <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    37ce:	10 92 80 31 	sts	0x3180, r1	; 0x803180 <xMissedYield>
					portYIELD_WITHIN_API();
    37d2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	03 c0       	rjmp	.+6      	; 0x37e0 <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <xTaskResumeAll+0xee>
    37de:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    37e0:	0f 90       	pop	r0
    37e2:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	df 90       	pop	r13
    37f2:	cf 90       	pop	r12
    37f4:	08 95       	ret

000037f6 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	ec 01       	movw	r28, r24
    3804:	6a 01       	movw	r12, r20
    3806:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3808:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    380c:	88 81       	ld	r24, Y
    380e:	99 81       	ldd	r25, Y+1	; 0x01
    3810:	aa 81       	ldd	r26, Y+2	; 0x02
    3812:	bb 81       	ldd	r27, Y+3	; 0x03
    3814:	c8 0e       	add	r12, r24
    3816:	d9 1e       	adc	r13, r25
    3818:	ea 1e       	adc	r14, r26
    381a:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    381c:	40 91 86 31 	lds	r20, 0x3186	; 0x803186 <xTickCount>
    3820:	50 91 87 31 	lds	r21, 0x3187	; 0x803187 <xTickCount+0x1>
    3824:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <xTickCount+0x2>
    3828:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <xTickCount+0x3>
    382c:	48 17       	cp	r20, r24
    382e:	59 07       	cpc	r21, r25
    3830:	6a 07       	cpc	r22, r26
    3832:	7b 07       	cpc	r23, r27
    3834:	b8 f4       	brcc	.+46     	; 0x3864 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3836:	c8 16       	cp	r12, r24
    3838:	d9 06       	cpc	r13, r25
    383a:	ea 06       	cpc	r14, r26
    383c:	fb 06       	cpc	r15, r27
    383e:	e0 f5       	brcc	.+120    	; 0x38b8 <vTaskDelayUntil+0xc2>
    3840:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3844:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3848:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    384c:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3850:	c8 82       	st	Y, r12
    3852:	d9 82       	std	Y+1, r13	; 0x01
    3854:	ea 82       	std	Y+2, r14	; 0x02
    3856:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3858:	8c 15       	cp	r24, r12
    385a:	9d 05       	cpc	r25, r13
    385c:	ae 05       	cpc	r26, r14
    385e:	bf 05       	cpc	r27, r15
    3860:	f8 f4       	brcc	.+62     	; 0x38a0 <vTaskDelayUntil+0xaa>
    3862:	13 c0       	rjmp	.+38     	; 0x388a <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3864:	c8 16       	cp	r12, r24
    3866:	d9 06       	cpc	r13, r25
    3868:	ea 06       	cpc	r14, r26
    386a:	fb 06       	cpc	r15, r27
    386c:	00 f1       	brcs	.+64     	; 0x38ae <vTaskDelayUntil+0xb8>
    386e:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3872:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3876:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    387a:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    387e:	8c 15       	cp	r24, r12
    3880:	9d 05       	cpc	r25, r13
    3882:	ae 05       	cpc	r26, r14
    3884:	bf 05       	cpc	r27, r15
    3886:	98 f0       	brcs	.+38     	; 0x38ae <vTaskDelayUntil+0xb8>
    3888:	17 c0       	rjmp	.+46     	; 0x38b8 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    388a:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    388e:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3892:	02 96       	adiw	r24, 0x02	; 2
    3894:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3898:	c7 01       	movw	r24, r14
    389a:	b6 01       	movw	r22, r12
    389c:	0e 94 c6 18 	call	0x318c	; 0x318c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    38a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    38a4:	81 11       	cpse	r24, r1
    38a6:	0d c0       	rjmp	.+26     	; 0x38c2 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    38a8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
		}
	}
    38ac:	0a c0       	rjmp	.+20     	; 0x38c2 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    38ae:	c8 82       	st	Y, r12
    38b0:	d9 82       	std	Y+1, r13	; 0x01
    38b2:	ea 82       	std	Y+2, r14	; 0x02
    38b4:	fb 82       	std	Y+3, r15	; 0x03
    38b6:	e9 cf       	rjmp	.-46     	; 0x388a <vTaskDelayUntil+0x94>
    38b8:	c8 82       	st	Y, r12
    38ba:	d9 82       	std	Y+1, r13	; 0x01
    38bc:	ea 82       	std	Y+2, r14	; 0x02
    38be:	fb 82       	std	Y+3, r15	; 0x03
    38c0:	ef cf       	rjmp	.-34     	; 0x38a0 <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	08 95       	ret

000038d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    38d0:	cf 92       	push	r12
    38d2:	df 92       	push	r13
    38d4:	ef 92       	push	r14
    38d6:	ff 92       	push	r15
    38d8:	6b 01       	movw	r12, r22
    38da:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    38dc:	67 2b       	or	r22, r23
    38de:	68 2b       	or	r22, r24
    38e0:	69 2b       	or	r22, r25
    38e2:	e9 f0       	breq	.+58     	; 0x391e <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    38e4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    38e8:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    38ec:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    38f0:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    38f4:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    38f8:	c8 0e       	add	r12, r24
    38fa:	d9 1e       	adc	r13, r25
    38fc:	ea 1e       	adc	r14, r26
    38fe:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3900:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    3904:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3908:	02 96       	adiw	r24, 0x02	; 2
    390a:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    390e:	c7 01       	movw	r24, r14
    3910:	b6 01       	movw	r22, r12
    3912:	0e 94 c6 18 	call	0x318c	; 0x318c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3916:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    391a:	81 11       	cpse	r24, r1
    391c:	02 c0       	rjmp	.+4      	; 0x3922 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    391e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <vPortYield>
		}
	}
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	08 95       	ret

0000392c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    392c:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    3930:	81 11       	cpse	r24, r1
    3932:	0c c0       	rjmp	.+24     	; 0x394c <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3934:	e0 91 84 31 	lds	r30, 0x3184	; 0x803184 <uxTopReadyPriority>
    3938:	4b e0       	ldi	r20, 0x0B	; 11
    393a:	e4 9f       	mul	r30, r20
    393c:	f0 01       	movw	r30, r0
    393e:	11 24       	eor	r1, r1
    3940:	ee 54       	subi	r30, 0x4E	; 78
    3942:	fe 4c       	sbci	r31, 0xCE	; 206
    3944:	80 81       	ld	r24, Z
    3946:	88 23       	and	r24, r24
    3948:	29 f0       	breq	.+10     	; 0x3954 <vTaskSwitchContext+0x28>
    394a:	14 c0       	rjmp	.+40     	; 0x3974 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	80 93 80 31 	sts	0x3180, r24	; 0x803180 <xMissedYield>
    3952:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3954:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3956:	80 91 84 31 	lds	r24, 0x3184	; 0x803184 <uxTopReadyPriority>
    395a:	81 50       	subi	r24, 0x01	; 1
    395c:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3960:	e0 91 84 31 	lds	r30, 0x3184	; 0x803184 <uxTopReadyPriority>
    3964:	9e 9f       	mul	r25, r30
    3966:	f0 01       	movw	r30, r0
    3968:	11 24       	eor	r1, r1
    396a:	ee 54       	subi	r30, 0x4E	; 78
    396c:	fe 4c       	sbci	r31, 0xCE	; 206
    396e:	80 81       	ld	r24, Z
    3970:	88 23       	and	r24, r24
    3972:	89 f3       	breq	.-30     	; 0x3956 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3974:	80 91 84 31 	lds	r24, 0x3184	; 0x803184 <uxTopReadyPriority>
    3978:	28 2f       	mov	r18, r24
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4b e0       	ldi	r20, 0x0B	; 11
    397e:	84 9f       	mul	r24, r20
    3980:	c0 01       	movw	r24, r0
    3982:	11 24       	eor	r1, r1
    3984:	dc 01       	movw	r26, r24
    3986:	ae 54       	subi	r26, 0x4E	; 78
    3988:	be 4c       	sbci	r27, 0xCE	; 206
    398a:	11 96       	adiw	r26, 0x01	; 1
    398c:	ed 91       	ld	r30, X+
    398e:	fc 91       	ld	r31, X
    3990:	12 97       	sbiw	r26, 0x02	; 2
    3992:	04 80       	ldd	r0, Z+4	; 0x04
    3994:	f5 81       	ldd	r31, Z+5	; 0x05
    3996:	e0 2d       	mov	r30, r0
    3998:	11 96       	adiw	r26, 0x01	; 1
    399a:	ed 93       	st	X+, r30
    399c:	fc 93       	st	X, r31
    399e:	12 97       	sbiw	r26, 0x02	; 2
    39a0:	8b 54       	subi	r24, 0x4B	; 75
    39a2:	9e 4c       	sbci	r25, 0xCE	; 206
    39a4:	e8 17       	cp	r30, r24
    39a6:	f9 07       	cpc	r31, r25
    39a8:	61 f4       	brne	.+24     	; 0x39c2 <vTaskSwitchContext+0x96>
    39aa:	84 81       	ldd	r24, Z+4	; 0x04
    39ac:	95 81       	ldd	r25, Z+5	; 0x05
    39ae:	4b e0       	ldi	r20, 0x0B	; 11
    39b0:	42 9f       	mul	r20, r18
    39b2:	f0 01       	movw	r30, r0
    39b4:	43 9f       	mul	r20, r19
    39b6:	f0 0d       	add	r31, r0
    39b8:	11 24       	eor	r1, r1
    39ba:	ee 54       	subi	r30, 0x4E	; 78
    39bc:	fe 4c       	sbci	r31, 0xCE	; 206
    39be:	81 83       	std	Z+1, r24	; 0x01
    39c0:	92 83       	std	Z+2, r25	; 0x02
    39c2:	8b e0       	ldi	r24, 0x0B	; 11
    39c4:	82 9f       	mul	r24, r18
    39c6:	f0 01       	movw	r30, r0
    39c8:	83 9f       	mul	r24, r19
    39ca:	f0 0d       	add	r31, r0
    39cc:	11 24       	eor	r1, r1
    39ce:	ee 54       	subi	r30, 0x4E	; 78
    39d0:	fe 4c       	sbci	r31, 0xCE	; 206
    39d2:	01 80       	ldd	r0, Z+1	; 0x01
    39d4:	f2 81       	ldd	r31, Z+2	; 0x02
    39d6:	e0 2d       	mov	r30, r0
    39d8:	80 85       	ldd	r24, Z+8	; 0x08
    39da:	91 85       	ldd	r25, Z+9	; 0x09
    39dc:	80 93 de 31 	sts	0x31DE, r24	; 0x8031de <pxCurrentTCB>
    39e0:	90 93 df 31 	sts	0x31DF, r25	; 0x8031df <pxCurrentTCB+0x1>
    39e4:	08 95       	ret

000039e6 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	6a 01       	movw	r12, r20
    39f0:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    39f2:	60 91 de 31 	lds	r22, 0x31DE	; 0x8031de <pxCurrentTCB>
    39f6:	70 91 df 31 	lds	r23, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    39fa:	62 5f       	subi	r22, 0xF2	; 242
    39fc:	7f 4f       	sbci	r23, 0xFF	; 255
    39fe:	0e 94 f5 13 	call	0x27ea	; 0x27ea <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3a02:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    3a06:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3a0a:	02 96       	adiw	r24, 0x02	; 2
    3a0c:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3a10:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3a14:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3a18:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    3a1c:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	6c 0d       	add	r22, r12
    3a26:	7d 1d       	adc	r23, r13
    3a28:	8e 1d       	adc	r24, r14
    3a2a:	9f 1d       	adc	r25, r15
    3a2c:	0e 94 c6 18 	call	0x318c	; 0x318c <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	df 90       	pop	r13
    3a36:	cf 90       	pop	r12
    3a38:	08 95       	ret

00003a3a <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3a42:	dc 01       	movw	r26, r24
    3a44:	17 96       	adiw	r26, 0x07	; 7
    3a46:	ed 91       	ld	r30, X+
    3a48:	fc 91       	ld	r31, X
    3a4a:	18 97       	sbiw	r26, 0x08	; 8
    3a4c:	c0 85       	ldd	r28, Z+8	; 0x08
    3a4e:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3a50:	8e 01       	movw	r16, r28
    3a52:	02 5f       	subi	r16, 0xF2	; 242
    3a54:	1f 4f       	sbci	r17, 0xFF	; 255
    3a56:	c8 01       	movw	r24, r16
    3a58:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a5c:	80 91 82 31 	lds	r24, 0x3182	; 0x803182 <uxSchedulerSuspended>
    3a60:	81 11       	cpse	r24, r1
    3a62:	16 c0       	rjmp	.+44     	; 0x3a90 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3a64:	0c 50       	subi	r16, 0x0C	; 12
    3a66:	11 09       	sbc	r17, r1
    3a68:	c8 01       	movw	r24, r16
    3a6a:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a70:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    3a74:	98 17       	cp	r25, r24
    3a76:	10 f4       	brcc	.+4      	; 0x3a7c <xTaskRemoveFromEventList+0x42>
    3a78:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    3a7c:	bb e0       	ldi	r27, 0x0B	; 11
    3a7e:	8b 9f       	mul	r24, r27
    3a80:	c0 01       	movw	r24, r0
    3a82:	11 24       	eor	r1, r1
    3a84:	b8 01       	movw	r22, r16
    3a86:	8e 54       	subi	r24, 0x4E	; 78
    3a88:	9e 4c       	sbci	r25, 0xCE	; 206
    3a8a:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
    3a8e:	05 c0       	rjmp	.+10     	; 0x3a9a <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3a90:	b8 01       	movw	r22, r16
    3a92:	8d e8       	ldi	r24, 0x8D	; 141
    3a94:	91 e3       	ldi	r25, 0x31	; 49
    3a96:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3a9a:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    3a9e:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3aa6:	92 8d       	ldd	r25, Z+26	; 0x1a
    3aa8:	29 17       	cp	r18, r25
    3aaa:	08 f4       	brcc	.+2      	; 0x3aae <xTaskRemoveFromEventList+0x74>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
}
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	08 95       	ret

00003ab8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3ab8:	20 91 7f 31 	lds	r18, 0x317F	; 0x80317f <xNumOfOverflows>
    3abc:	fc 01       	movw	r30, r24
    3abe:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3ac0:	40 91 86 31 	lds	r20, 0x3186	; 0x803186 <xTickCount>
    3ac4:	50 91 87 31 	lds	r21, 0x3187	; 0x803187 <xTickCount+0x1>
    3ac8:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <xTickCount+0x2>
    3acc:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <xTickCount+0x3>
    3ad0:	41 83       	std	Z+1, r20	; 0x01
    3ad2:	52 83       	std	Z+2, r21	; 0x02
    3ad4:	63 83       	std	Z+3, r22	; 0x03
    3ad6:	74 83       	std	Z+4, r23	; 0x04
    3ad8:	08 95       	ret

00003ada <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3afa:	80 91 7f 31 	lds	r24, 0x317F	; 0x80317f <xNumOfOverflows>
    3afe:	90 81       	ld	r25, Z
    3b00:	98 17       	cp	r25, r24
    3b02:	89 f0       	breq	.+34     	; 0x3b26 <xTaskCheckForTimeOut+0x4c>
    3b04:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3b08:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3b0c:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    3b10:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    3b14:	01 81       	ldd	r16, Z+1	; 0x01
    3b16:	12 81       	ldd	r17, Z+2	; 0x02
    3b18:	23 81       	ldd	r18, Z+3	; 0x03
    3b1a:	34 81       	ldd	r19, Z+4	; 0x04
    3b1c:	80 17       	cp	r24, r16
    3b1e:	91 07       	cpc	r25, r17
    3b20:	a2 07       	cpc	r26, r18
    3b22:	b3 07       	cpc	r27, r19
    3b24:	a8 f5       	brcc	.+106    	; 0x3b90 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3b26:	80 91 86 31 	lds	r24, 0x3186	; 0x803186 <xTickCount>
    3b2a:	90 91 87 31 	lds	r25, 0x3187	; 0x803187 <xTickCount+0x1>
    3b2e:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <xTickCount+0x2>
    3b32:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <xTickCount+0x3>
    3b36:	c1 80       	ldd	r12, Z+1	; 0x01
    3b38:	d2 80       	ldd	r13, Z+2	; 0x02
    3b3a:	e3 80       	ldd	r14, Z+3	; 0x03
    3b3c:	f4 80       	ldd	r15, Z+4	; 0x04
    3b3e:	eb 01       	movw	r28, r22
    3b40:	08 81       	ld	r16, Y
    3b42:	19 81       	ldd	r17, Y+1	; 0x01
    3b44:	2a 81       	ldd	r18, Y+2	; 0x02
    3b46:	3b 81       	ldd	r19, Y+3	; 0x03
    3b48:	8c 19       	sub	r24, r12
    3b4a:	9d 09       	sbc	r25, r13
    3b4c:	ae 09       	sbc	r26, r14
    3b4e:	bf 09       	sbc	r27, r15
    3b50:	80 17       	cp	r24, r16
    3b52:	91 07       	cpc	r25, r17
    3b54:	a2 07       	cpc	r26, r18
    3b56:	b3 07       	cpc	r27, r19
    3b58:	e8 f4       	brcc	.+58     	; 0x3b94 <xTaskCheckForTimeOut+0xba>
    3b5a:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3b5c:	80 90 86 31 	lds	r8, 0x3186	; 0x803186 <xTickCount>
    3b60:	90 90 87 31 	lds	r9, 0x3187	; 0x803187 <xTickCount+0x1>
    3b64:	a0 90 88 31 	lds	r10, 0x3188	; 0x803188 <xTickCount+0x2>
    3b68:	b0 90 89 31 	lds	r11, 0x3189	; 0x803189 <xTickCount+0x3>
    3b6c:	b5 01       	movw	r22, r10
    3b6e:	a4 01       	movw	r20, r8
    3b70:	4c 19       	sub	r20, r12
    3b72:	5d 09       	sbc	r21, r13
    3b74:	6e 09       	sbc	r22, r14
    3b76:	7f 09       	sbc	r23, r15
    3b78:	04 1b       	sub	r16, r20
    3b7a:	15 0b       	sbc	r17, r21
    3b7c:	26 0b       	sbc	r18, r22
    3b7e:	37 0b       	sbc	r19, r23
    3b80:	08 83       	st	Y, r16
    3b82:	19 83       	std	Y+1, r17	; 0x01
    3b84:	2a 83       	std	Y+2, r18	; 0x02
    3b86:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3b88:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	9f 90       	pop	r9
    3bb0:	8f 90       	pop	r8
    3bb2:	08 95       	ret

00003bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	80 93 80 31 	sts	0x3180, r24	; 0x803180 <xMissedYield>
    3bba:	08 95       	ret

00003bbc <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	21 f4       	brne	.+8      	; 0x3bc8 <uxTaskGetStackHighWaterMark+0xc>
    3bc0:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    3bc4:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3bc8:	dc 01       	movw	r26, r24
    3bca:	5b 96       	adiw	r26, 0x1b	; 27
    3bcc:	ed 91       	ld	r30, X+
    3bce:	fc 91       	ld	r31, X
    3bd0:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3bd2:	80 81       	ld	r24, Z
    3bd4:	81 31       	cpi	r24, 0x11	; 17
    3bd6:	41 f4       	brne	.+16     	; 0x3be8 <uxTaskGetStackHighWaterMark+0x2c>
    3bd8:	31 96       	adiw	r30, 0x01	; 1
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3bde:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3be0:	21 91       	ld	r18, Z+
    3be2:	21 31       	cpi	r18, 0x11	; 17
    3be4:	e1 f3       	breq	.-8      	; 0x3bde <uxTaskGetStackHighWaterMark+0x22>
    3be6:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3bec:	08 95       	ret

00003bee <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3bee:	80 91 de 31 	lds	r24, 0x31DE	; 0x8031de <pxCurrentTCB>
    3bf2:	90 91 df 31 	lds	r25, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>

		return xReturn;
	}
    3bf6:	08 95       	ret

00003bf8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	cf 93       	push	r28
    3bfe:	df 93       	push	r29
    3c00:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3c02:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c04:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    3c08:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3c0c:	5a 96       	adiw	r26, 0x1a	; 26
    3c0e:	8c 91       	ld	r24, X
    3c10:	28 17       	cp	r18, r24
    3c12:	08 f0       	brcs	.+2      	; 0x3c16 <vTaskPriorityInherit+0x1e>
    3c14:	41 c0       	rjmp	.+130    	; 0x3c98 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3c16:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    3c1a:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3c1e:	5a 96       	adiw	r26, 0x1a	; 26
    3c20:	3c 91       	ld	r19, X
    3c22:	84 e0       	ldi	r24, 0x04	; 4
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a0 e0       	ldi	r26, 0x00	; 0
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	83 1b       	sub	r24, r19
    3c2c:	91 09       	sbc	r25, r1
    3c2e:	a1 09       	sbc	r26, r1
    3c30:	b1 09       	sbc	r27, r1
    3c32:	86 87       	std	Z+14, r24	; 0x0e
    3c34:	97 87       	std	Z+15, r25	; 0x0f
    3c36:	a0 8b       	std	Z+16, r26	; 0x10
    3c38:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c3a:	8b e0       	ldi	r24, 0x0B	; 11
    3c3c:	28 9f       	mul	r18, r24
    3c3e:	90 01       	movw	r18, r0
    3c40:	11 24       	eor	r1, r1
    3c42:	2e 54       	subi	r18, 0x4E	; 78
    3c44:	3e 4c       	sbci	r19, 0xCE	; 206
    3c46:	84 85       	ldd	r24, Z+12	; 0x0c
    3c48:	95 85       	ldd	r25, Z+13	; 0x0d
    3c4a:	82 17       	cp	r24, r18
    3c4c:	93 07       	cpc	r25, r19
    3c4e:	e9 f4       	brne	.+58     	; 0x3c8a <vTaskPriorityInherit+0x92>
    3c50:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3c52:	ef 01       	movw	r28, r30
    3c54:	22 96       	adiw	r28, 0x02	; 2
    3c56:	ce 01       	movw	r24, r28
    3c58:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3c5c:	e0 91 de 31 	lds	r30, 0x31DE	; 0x8031de <pxCurrentTCB>
    3c60:	f0 91 df 31 	lds	r31, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3c64:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c66:	f8 01       	movw	r30, r16
    3c68:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3c6a:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    3c6e:	98 17       	cp	r25, r24
    3c70:	10 f4       	brcc	.+4      	; 0x3c76 <vTaskPriorityInherit+0x7e>
    3c72:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    3c76:	fb e0       	ldi	r31, 0x0B	; 11
    3c78:	8f 9f       	mul	r24, r31
    3c7a:	c0 01       	movw	r24, r0
    3c7c:	11 24       	eor	r1, r1
    3c7e:	be 01       	movw	r22, r28
    3c80:	8e 54       	subi	r24, 0x4E	; 78
    3c82:	9e 4c       	sbci	r25, 0xCE	; 206
    3c84:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
    3c88:	07 c0       	rjmp	.+14     	; 0x3c98 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3c8a:	a0 91 de 31 	lds	r26, 0x31DE	; 0x8031de <pxCurrentTCB>
    3c8e:	b0 91 df 31 	lds	r27, 0x31DF	; 0x8031df <pxCurrentTCB+0x1>
    3c92:	5a 96       	adiw	r26, 0x1a	; 26
    3c94:	8c 91       	ld	r24, X
    3c96:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	08 95       	ret

00003ca2 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	49 f1       	breq	.+82     	; 0x3d00 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3cae:	fc 01       	movw	r30, r24
    3cb0:	32 8d       	ldd	r19, Z+26	; 0x1a
    3cb2:	27 a1       	ldd	r18, Z+39	; 0x27
    3cb4:	32 17       	cp	r19, r18
    3cb6:	21 f1       	breq	.+72     	; 0x3d00 <vTaskPriorityDisinherit+0x5e>
    3cb8:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3cba:	8c 01       	movw	r16, r24
    3cbc:	0e 5f       	subi	r16, 0xFE	; 254
    3cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc0:	c8 01       	movw	r24, r16
    3cc2:	0e 94 40 14 	call	0x2880	; 0x2880 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3cc6:	8f a1       	ldd	r24, Y+39	; 0x27
    3cc8:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3cca:	44 e0       	ldi	r20, 0x04	; 4
    3ccc:	50 e0       	ldi	r21, 0x00	; 0
    3cce:	60 e0       	ldi	r22, 0x00	; 0
    3cd0:	70 e0       	ldi	r23, 0x00	; 0
    3cd2:	48 1b       	sub	r20, r24
    3cd4:	51 09       	sbc	r21, r1
    3cd6:	61 09       	sbc	r22, r1
    3cd8:	71 09       	sbc	r23, r1
    3cda:	4e 87       	std	Y+14, r20	; 0x0e
    3cdc:	5f 87       	std	Y+15, r21	; 0x0f
    3cde:	68 8b       	std	Y+16, r22	; 0x10
    3ce0:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3ce2:	90 91 84 31 	lds	r25, 0x3184	; 0x803184 <uxTopReadyPriority>
    3ce6:	98 17       	cp	r25, r24
    3ce8:	10 f4       	brcc	.+4      	; 0x3cee <vTaskPriorityDisinherit+0x4c>
    3cea:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <uxTopReadyPriority>
    3cee:	fb e0       	ldi	r31, 0x0B	; 11
    3cf0:	8f 9f       	mul	r24, r31
    3cf2:	c0 01       	movw	r24, r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	b8 01       	movw	r22, r16
    3cf8:	8e 54       	subi	r24, 0x4E	; 78
    3cfa:	9e 4c       	sbci	r25, 0xCE	; 206
    3cfc:	0e 94 ce 13 	call	0x279c	; 0x279c <vListInsertEnd>
			}
		}
	}
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	08 95       	ret

00003d0a <__divmodsi4>:
    3d0a:	05 2e       	mov	r0, r21
    3d0c:	97 fb       	bst	r25, 7
    3d0e:	1e f4       	brtc	.+6      	; 0x3d16 <__divmodsi4+0xc>
    3d10:	00 94       	com	r0
    3d12:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <__negsi2>
    3d16:	57 fd       	sbrc	r21, 7
    3d18:	07 d0       	rcall	.+14     	; 0x3d28 <__divmodsi4_neg2>
    3d1a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__udivmodsi4>
    3d1e:	07 fc       	sbrc	r0, 7
    3d20:	03 d0       	rcall	.+6      	; 0x3d28 <__divmodsi4_neg2>
    3d22:	4e f4       	brtc	.+18     	; 0x3d36 <__divmodsi4_exit>
    3d24:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__negsi2>

00003d28 <__divmodsi4_neg2>:
    3d28:	50 95       	com	r21
    3d2a:	40 95       	com	r20
    3d2c:	30 95       	com	r19
    3d2e:	21 95       	neg	r18
    3d30:	3f 4f       	sbci	r19, 0xFF	; 255
    3d32:	4f 4f       	sbci	r20, 0xFF	; 255
    3d34:	5f 4f       	sbci	r21, 0xFF	; 255

00003d36 <__divmodsi4_exit>:
    3d36:	08 95       	ret

00003d38 <__negsi2>:
    3d38:	90 95       	com	r25
    3d3a:	80 95       	com	r24
    3d3c:	70 95       	com	r23
    3d3e:	61 95       	neg	r22
    3d40:	7f 4f       	sbci	r23, 0xFF	; 255
    3d42:	8f 4f       	sbci	r24, 0xFF	; 255
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	08 95       	ret

00003d48 <__udivmodsi4>:
    3d48:	a1 e2       	ldi	r26, 0x21	; 33
    3d4a:	1a 2e       	mov	r1, r26
    3d4c:	aa 1b       	sub	r26, r26
    3d4e:	bb 1b       	sub	r27, r27
    3d50:	fd 01       	movw	r30, r26
    3d52:	0d c0       	rjmp	.+26     	; 0x3d6e <__udivmodsi4_ep>

00003d54 <__udivmodsi4_loop>:
    3d54:	aa 1f       	adc	r26, r26
    3d56:	bb 1f       	adc	r27, r27
    3d58:	ee 1f       	adc	r30, r30
    3d5a:	ff 1f       	adc	r31, r31
    3d5c:	a2 17       	cp	r26, r18
    3d5e:	b3 07       	cpc	r27, r19
    3d60:	e4 07       	cpc	r30, r20
    3d62:	f5 07       	cpc	r31, r21
    3d64:	20 f0       	brcs	.+8      	; 0x3d6e <__udivmodsi4_ep>
    3d66:	a2 1b       	sub	r26, r18
    3d68:	b3 0b       	sbc	r27, r19
    3d6a:	e4 0b       	sbc	r30, r20
    3d6c:	f5 0b       	sbc	r31, r21

00003d6e <__udivmodsi4_ep>:
    3d6e:	66 1f       	adc	r22, r22
    3d70:	77 1f       	adc	r23, r23
    3d72:	88 1f       	adc	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	1a 94       	dec	r1
    3d78:	69 f7       	brne	.-38     	; 0x3d54 <__udivmodsi4_loop>
    3d7a:	60 95       	com	r22
    3d7c:	70 95       	com	r23
    3d7e:	80 95       	com	r24
    3d80:	90 95       	com	r25
    3d82:	9b 01       	movw	r18, r22
    3d84:	ac 01       	movw	r20, r24
    3d86:	bd 01       	movw	r22, r26
    3d88:	cf 01       	movw	r24, r30
    3d8a:	08 95       	ret

00003d8c <memcpy>:
    3d8c:	fb 01       	movw	r30, r22
    3d8e:	dc 01       	movw	r26, r24
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <memcpy+0xa>
    3d92:	01 90       	ld	r0, Z+
    3d94:	0d 92       	st	X+, r0
    3d96:	41 50       	subi	r20, 0x01	; 1
    3d98:	50 40       	sbci	r21, 0x00	; 0
    3d9a:	d8 f7       	brcc	.-10     	; 0x3d92 <memcpy+0x6>
    3d9c:	08 95       	ret

00003d9e <memset>:
    3d9e:	dc 01       	movw	r26, r24
    3da0:	01 c0       	rjmp	.+2      	; 0x3da4 <memset+0x6>
    3da2:	6d 93       	st	X+, r22
    3da4:	41 50       	subi	r20, 0x01	; 1
    3da6:	50 40       	sbci	r21, 0x00	; 0
    3da8:	e0 f7       	brcc	.-8      	; 0x3da2 <memset+0x4>
    3daa:	08 95       	ret

00003dac <strncpy>:
    3dac:	fb 01       	movw	r30, r22
    3dae:	dc 01       	movw	r26, r24
    3db0:	41 50       	subi	r20, 0x01	; 1
    3db2:	50 40       	sbci	r21, 0x00	; 0
    3db4:	48 f0       	brcs	.+18     	; 0x3dc8 <strncpy+0x1c>
    3db6:	01 90       	ld	r0, Z+
    3db8:	0d 92       	st	X+, r0
    3dba:	00 20       	and	r0, r0
    3dbc:	c9 f7       	brne	.-14     	; 0x3db0 <strncpy+0x4>
    3dbe:	01 c0       	rjmp	.+2      	; 0x3dc2 <strncpy+0x16>
    3dc0:	1d 92       	st	X+, r1
    3dc2:	41 50       	subi	r20, 0x01	; 1
    3dc4:	50 40       	sbci	r21, 0x00	; 0
    3dc6:	e0 f7       	brcc	.-8      	; 0x3dc0 <strncpy+0x14>
    3dc8:	08 95       	ret

00003dca <__itoa_ncheck>:
    3dca:	bb 27       	eor	r27, r27
    3dcc:	4a 30       	cpi	r20, 0x0A	; 10
    3dce:	31 f4       	brne	.+12     	; 0x3ddc <__itoa_ncheck+0x12>
    3dd0:	99 23       	and	r25, r25
    3dd2:	22 f4       	brpl	.+8      	; 0x3ddc <__itoa_ncheck+0x12>
    3dd4:	bd e2       	ldi	r27, 0x2D	; 45
    3dd6:	90 95       	com	r25
    3dd8:	81 95       	neg	r24
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__utoa_common>

00003de0 <ultoa>:
    3de0:	25 32       	cpi	r18, 0x25	; 37
    3de2:	31 05       	cpc	r19, r1
    3de4:	20 f4       	brcc	.+8      	; 0x3dee <ultoa+0xe>
    3de6:	22 30       	cpi	r18, 0x02	; 2
    3de8:	10 f0       	brcs	.+4      	; 0x3dee <ultoa+0xe>
    3dea:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__ultoa_ncheck>
    3dee:	fa 01       	movw	r30, r20
    3df0:	10 82       	st	Z, r1
    3df2:	ca 01       	movw	r24, r20
    3df4:	08 95       	ret

00003df6 <__ultoa_ncheck>:
    3df6:	bb 27       	eor	r27, r27

00003df8 <__ultoa_common>:
    3df8:	fa 01       	movw	r30, r20
    3dfa:	a6 2f       	mov	r26, r22
    3dfc:	62 17       	cp	r22, r18
    3dfe:	71 05       	cpc	r23, r1
    3e00:	81 05       	cpc	r24, r1
    3e02:	91 05       	cpc	r25, r1
    3e04:	33 0b       	sbc	r19, r19
    3e06:	30 fb       	bst	r19, 0
    3e08:	66 f0       	brts	.+24     	; 0x3e22 <__ultoa_common+0x2a>
    3e0a:	aa 27       	eor	r26, r26
    3e0c:	66 0f       	add	r22, r22
    3e0e:	77 1f       	adc	r23, r23
    3e10:	88 1f       	adc	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	aa 1f       	adc	r26, r26
    3e16:	a2 17       	cp	r26, r18
    3e18:	10 f0       	brcs	.+4      	; 0x3e1e <__ultoa_common+0x26>
    3e1a:	a2 1b       	sub	r26, r18
    3e1c:	63 95       	inc	r22
    3e1e:	38 50       	subi	r19, 0x08	; 8
    3e20:	a9 f7       	brne	.-22     	; 0x3e0c <__ultoa_common+0x14>
    3e22:	a0 5d       	subi	r26, 0xD0	; 208
    3e24:	aa 33       	cpi	r26, 0x3A	; 58
    3e26:	08 f0       	brcs	.+2      	; 0x3e2a <__ultoa_common+0x32>
    3e28:	a9 5d       	subi	r26, 0xD9	; 217
    3e2a:	a1 93       	st	Z+, r26
    3e2c:	36 f7       	brtc	.-52     	; 0x3dfa <__ultoa_common+0x2>
    3e2e:	b1 11       	cpse	r27, r1
    3e30:	b1 93       	st	Z+, r27
    3e32:	10 82       	st	Z, r1
    3e34:	ca 01       	movw	r24, r20
    3e36:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <strrev>

00003e3a <utoa>:
    3e3a:	45 32       	cpi	r20, 0x25	; 37
    3e3c:	51 05       	cpc	r21, r1
    3e3e:	20 f4       	brcc	.+8      	; 0x3e48 <utoa+0xe>
    3e40:	42 30       	cpi	r20, 0x02	; 2
    3e42:	10 f0       	brcs	.+4      	; 0x3e48 <utoa+0xe>
    3e44:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__utoa_ncheck>
    3e48:	fb 01       	movw	r30, r22
    3e4a:	10 82       	st	Z, r1
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	08 95       	ret

00003e50 <__utoa_ncheck>:
    3e50:	bb 27       	eor	r27, r27

00003e52 <__utoa_common>:
    3e52:	fb 01       	movw	r30, r22
    3e54:	55 27       	eor	r21, r21
    3e56:	aa 27       	eor	r26, r26
    3e58:	88 0f       	add	r24, r24
    3e5a:	99 1f       	adc	r25, r25
    3e5c:	aa 1f       	adc	r26, r26
    3e5e:	a4 17       	cp	r26, r20
    3e60:	10 f0       	brcs	.+4      	; 0x3e66 <__utoa_common+0x14>
    3e62:	a4 1b       	sub	r26, r20
    3e64:	83 95       	inc	r24
    3e66:	50 51       	subi	r21, 0x10	; 16
    3e68:	b9 f7       	brne	.-18     	; 0x3e58 <__utoa_common+0x6>
    3e6a:	a0 5d       	subi	r26, 0xD0	; 208
    3e6c:	aa 33       	cpi	r26, 0x3A	; 58
    3e6e:	08 f0       	brcs	.+2      	; 0x3e72 <__utoa_common+0x20>
    3e70:	a9 5d       	subi	r26, 0xD9	; 217
    3e72:	a1 93       	st	Z+, r26
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	79 f7       	brne	.-34     	; 0x3e56 <__utoa_common+0x4>
    3e78:	b1 11       	cpse	r27, r1
    3e7a:	b1 93       	st	Z+, r27
    3e7c:	11 92       	st	Z+, r1
    3e7e:	cb 01       	movw	r24, r22
    3e80:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <strrev>

00003e84 <strrev>:
    3e84:	dc 01       	movw	r26, r24
    3e86:	fc 01       	movw	r30, r24
    3e88:	67 2f       	mov	r22, r23
    3e8a:	71 91       	ld	r23, Z+
    3e8c:	77 23       	and	r23, r23
    3e8e:	e1 f7       	brne	.-8      	; 0x3e88 <strrev+0x4>
    3e90:	32 97       	sbiw	r30, 0x02	; 2
    3e92:	04 c0       	rjmp	.+8      	; 0x3e9c <strrev+0x18>
    3e94:	7c 91       	ld	r23, X
    3e96:	6d 93       	st	X+, r22
    3e98:	70 83       	st	Z, r23
    3e9a:	62 91       	ld	r22, -Z
    3e9c:	ae 17       	cp	r26, r30
    3e9e:	bf 07       	cpc	r27, r31
    3ea0:	c8 f3       	brcs	.-14     	; 0x3e94 <strrev+0x10>
    3ea2:	08 95       	ret

00003ea4 <__mulsi3>:
    3ea4:	db 01       	movw	r26, r22
    3ea6:	8f 93       	push	r24
    3ea8:	9f 93       	push	r25
    3eaa:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__muluhisi3>
    3eae:	bf 91       	pop	r27
    3eb0:	af 91       	pop	r26
    3eb2:	a2 9f       	mul	r26, r18
    3eb4:	80 0d       	add	r24, r0
    3eb6:	91 1d       	adc	r25, r1
    3eb8:	a3 9f       	mul	r26, r19
    3eba:	90 0d       	add	r25, r0
    3ebc:	b2 9f       	mul	r27, r18
    3ebe:	90 0d       	add	r25, r0
    3ec0:	11 24       	eor	r1, r1
    3ec2:	08 95       	ret

00003ec4 <__tablejump2__>:
    3ec4:	ee 0f       	add	r30, r30
    3ec6:	ff 1f       	adc	r31, r31
    3ec8:	88 1f       	adc	r24, r24
    3eca:	8b bf       	out	0x3b, r24	; 59
    3ecc:	07 90       	elpm	r0, Z+
    3ece:	f6 91       	elpm	r31, Z
    3ed0:	e0 2d       	mov	r30, r0
    3ed2:	1b be       	out	0x3b, r1	; 59
    3ed4:	19 94       	eijmp

00003ed6 <__muluhisi3>:
    3ed6:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__umulhisi3>
    3eda:	a5 9f       	mul	r26, r21
    3edc:	90 0d       	add	r25, r0
    3ede:	b4 9f       	mul	r27, r20
    3ee0:	90 0d       	add	r25, r0
    3ee2:	a4 9f       	mul	r26, r20
    3ee4:	80 0d       	add	r24, r0
    3ee6:	91 1d       	adc	r25, r1
    3ee8:	11 24       	eor	r1, r1
    3eea:	08 95       	ret

00003eec <__umulhisi3>:
    3eec:	a2 9f       	mul	r26, r18
    3eee:	b0 01       	movw	r22, r0
    3ef0:	b3 9f       	mul	r27, r19
    3ef2:	c0 01       	movw	r24, r0
    3ef4:	a3 9f       	mul	r26, r19
    3ef6:	70 0d       	add	r23, r0
    3ef8:	81 1d       	adc	r24, r1
    3efa:	11 24       	eor	r1, r1
    3efc:	91 1d       	adc	r25, r1
    3efe:	b2 9f       	mul	r27, r18
    3f00:	70 0d       	add	r23, r0
    3f02:	81 1d       	adc	r24, r1
    3f04:	11 24       	eor	r1, r1
    3f06:	91 1d       	adc	r25, r1
    3f08:	08 95       	ret

00003f0a <_exit>:
    3f0a:	f8 94       	cli

00003f0c <__stop_program>:
    3f0c:	ff cf       	rjmp	.-2      	; 0x3f0c <__stop_program>
