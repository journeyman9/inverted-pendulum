
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000397e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  0000397e  00003a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000109e  008020ee  008020ee  00003b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00008f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000be19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000d9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  000109f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00012f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 02 	jmp	0x536	; 0x536 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_25>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      70:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_28>
      74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      78:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      7c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      80:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      84:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      8c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      90:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      94:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      98:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      9c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c4:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_49>
      c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e8:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_58>
      ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     100:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     104:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     108:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     10c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     110:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     114:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     118:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     11c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     120:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     124:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     128:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     12c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     130:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     134:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     138:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     13c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     140:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     144:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     148:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     14c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     150:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     154:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     158:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     15c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     160:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__vector_88>
     164:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     168:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     16c:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_91>
     170:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     174:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     178:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     17c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     180:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     184:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     188:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     18c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     190:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     194:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     198:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     19c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1fc:	67 0d       	add	r22, r7
     1fe:	6a 0d       	add	r22, r10
     200:	6d 0d       	add	r22, r13
     202:	70 0d       	add	r23, r0
     204:	73 0d       	add	r23, r3
     206:	76 0d       	add	r23, r6
     208:	78 0d       	add	r23, r8
     20a:	89 0d       	add	r24, r9
     20c:	91 0d       	add	r25, r1
     20e:	9b 0d       	add	r25, r11
     210:	99 0d       	add	r25, r9

00000212 <__trampolines_start>:
     212:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <_ZN5rs23214check_for_charEv>
     216:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_ZN5rs23212clear_screenEv>
     21a:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <_ZN8emstreamlsE15ser_manipulator+0x36>
     21e:	0c 94 87 09 	jmp	0x130e	; 0x130e <_ZN18task_motor_encoder3runEv>
     222:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_ZN8emstream12transmit_nowEv>
     226:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <_ZN5rs2327putcharEc>
     22a:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_ZN8emstream13ready_to_sendEv>
     22e:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <_ZN18task_motor_command3runEv>
     232:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN8emstreamlsE15ser_manipulator+0x1e>
     236:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_ZN8emstream7getcharEv>
     23a:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_ZN14frt_text_queue7putcharEc>
     23e:	0c 94 40 05 	jmp	0xa80	; 0xa80 <_ZN8frt_task12print_statusER8emstream>
     242:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <_ZN8emstreamlsE15ser_manipulator+0x3c>
     246:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_ZN8emstream14check_for_charEv>
     24a:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN21task_pendulum_encoder3runEv>
     24e:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_ZN17task_limit_switch3runEv>
     252:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <_ZN5rs2327getcharEv>
     256:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__cxa_pure_virtual>
     25a:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x72>
     25e:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_ZN9task_user3runEv>
     262:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <_ZN8emstreamlsE15ser_manipulator+0x62>
     266:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_ZN8emstreamlsE15ser_manipulator+0x30>
     26a:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <_ZN8emstreamlsE15ser_manipulator+0x2a>
     26e:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
     272:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <_ZN8emstreamlsE15ser_manipulator+0x40>
     276:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <_GLOBAL__sub_I_counter>
     27a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_ZN8emstream12clear_screenEv>
     27e:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <_ZN8emstreamlsE15ser_manipulator+0x24>
     282:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <prvIdleTask>
     286:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     28a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     28e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_call_static_run_method>
     292:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <_ZN8emstreamlsE15ser_manipulator+0x82>
     296:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_ZN22task_system_controller3runEv>

0000029a <__trampolines_end>:
     29a:	09 09       	sbc	r16, r9
	...

0000029d <_ZZ15print_task_listP8emstreamE3__c_8>:
     29d:	2f 00                                               /.

0000029f <_ZZ15print_task_listP8emstreamE3__c_7>:
     29f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002aa <_ZZ15print_task_listP8emstreamE3__c_6>:
     2aa:	09 2d 2d 2d 2d 00                                   .----.

000002b0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2b0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002bc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2bc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000002cd <_ZZ15print_task_listP8emstreamE3__c_3>:
     2cd:	09 52 75 6e 73 00                                   .Runs.

000002d3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     2d3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000002df <_ZZ15print_task_listP8emstreamE3__c_1>:
     2df:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000002f0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     2f0:	09 53 74 61 63 6b 00                                .Stack.

000002f7 <_ZZ15print_task_listP8emstreamE3__c>:
     2f7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000302 <_ZZN9task_user11show_statusEvE3__c_4>:
     302:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000030d <_ZZN9task_user11show_statusEvE3__c_3>:
     30d:	2f 00                                               /.

0000030f <_ZZN9task_user11show_statusEvE3__c_2>:
     30f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000031d <_ZZN9task_user11show_statusEvE3__c_1>:
     31d:	54 69 6d 65 3a 20 00                                Time: .

00000324 <_ZZN9task_user11show_statusEvE3__c_0>:
     324:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000330 <_ZZN9task_user11show_statusEvE3__c>:
     330:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     340:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000034f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     34f:	1b 5b 32 32 6d 00                                   .[22m.

00000355 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     355:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000360 <_ZZ17print_task_stacksP8emstreamE3__c>:
     360:	1b 5b 31 6d 00                                      .[1m.

00000365 <_ZZN9task_user3runEvE3__c_3>:
     365:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     375:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000382 <_ZZN9task_user3runEvE3__c_2>:
     382:	3a 57 54 46 3f 00                                   :WTF?.

00000388 <_ZZN9task_user3runEvE3__c_1>:
     388:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     398:	65 00                                               e.

0000039a <_ZZN9task_user3runEvE3__c_0>:
     39a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003a8 <_ZZN9task_user3runEvE3__c>:
     3a8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3b8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000003c6 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3c6:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000003d5 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     3d5:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     3e5:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000003f0 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     3f0:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     400:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     40e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     41e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     42e:	6d 61 74 69 6f 6e 00                                mation.

00000435 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     435:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     445:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000456 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     456:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     466:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_4>:
     46e:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     47e:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000048a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     48a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     49a:	68 65 20 41 56 52 00                                he AVR.

000004a1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4a1:	20 68 65 6c 70 00                                    help.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4a7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4b7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004c6 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4c6:	1b 5b 33 30 6d 00                                   .[30m.

000004cc <_ZZN9task_user18print_help_messageEvE3__c>:
     4cc:	1b 5b 34 36 6d 00                                   .[46m.

000004d2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4d2:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     4e2:	61 73 6b 20 00                                      ask .

000004e7 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     4e7:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     4f5:	20 63 72 65 61 74 65 64 00                           created.

000004fe <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     4fe:	54 61 73 6b 20 00                                   Task .

00000504 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     504:	1b 5b 32 32 6d 00                                   .[22m.

0000050a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     50a:	54 61 73 6b 3a 20 00                                Task: .

00000511 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     511:	1b 5b 31 6d 00                                      .[1m.

00000516 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     516:	09 00                                               ..

00000518 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     518:	09 00                                               ..

0000051a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     51a:	2f 00                                               /.

0000051c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     51c:	09 00                                               ..

0000051e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     51e:	09 00                                               ..

00000520 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     520:	1b 5b 32 32 6d 00                                   .[22m.

00000526 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     526:	1b 5b 31 6d 00                                      .[1m.

0000052b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     52b:	1b 5b 31 6d 00                                      .[1m.

00000530 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     530:	20 20 00 00                                           ..

00000534 <__ctors_start>:
     534:	5e 0b       	sbc	r21, r30

00000536 <__ctors_end>:
     536:	11 24       	eor	r1, r1
     538:	1f be       	out	0x3f, r1	; 63
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df e3       	ldi	r29, 0x3F	; 63
     540:	de bf       	out	0x3e, r29	; 62
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0c bf       	out	0x3c, r16	; 60
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	1a be       	out	0x3a, r1	; 58
     54c:	1b be       	out	0x3b, r1	; 59

0000054e <__do_copy_data>:
     54e:	10 e2       	ldi	r17, 0x20	; 32
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	ee e7       	ldi	r30, 0x7E	; 126
     556:	f9 e3       	ldi	r31, 0x39	; 57
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	ae 3e       	cpi	r26, 0xEE	; 238
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_clear_bss>:
     56a:	21 e3       	ldi	r18, 0x31	; 49
     56c:	ae ee       	ldi	r26, 0xEE	; 238
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 c0       	rjmp	.+2      	; 0x574 <.do_clear_bss_start>

00000572 <.do_clear_bss_loop>:
     572:	1d 92       	st	X+, r1

00000574 <.do_clear_bss_start>:
     574:	ac 38       	cpi	r26, 0x8C	; 140
     576:	b2 07       	cpc	r27, r18
     578:	e1 f7       	brne	.-8      	; 0x572 <.do_clear_bss_loop>

0000057a <__do_global_ctors>:
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	cb e9       	ldi	r28, 0x9B	; 155
     57e:	d2 e0       	ldi	r29, 0x02	; 2
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <__do_global_ctors+0x16>
     584:	21 97       	sbiw	r28, 0x01	; 1
     586:	01 09       	sbc	r16, r1
     588:	80 2f       	mov	r24, r16
     58a:	fe 01       	movw	r30, r28
     58c:	0e 94 86 1c 	call	0x390c	; 0x390c <__tablejump2__>
     590:	ca 39       	cpi	r28, 0x9A	; 154
     592:	d1 07       	cpc	r29, r17
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 07       	cpc	r16, r24
     598:	a9 f7       	brne	.-22     	; 0x584 <__do_global_ctors+0xa>
     59a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <main>
     59e:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <_ZN8emstream12clear_screenEv>:
     5a6:	08 95       	ret

000005a8 <_ZN8emstream12transmit_nowEv>:
     5a8:	08 95       	ret

000005aa <_ZN8emstream14check_for_charEv>:
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <_ZN8emstream7getcharEv>:
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <_ZN8emstream13ready_to_sendEv>:
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret

000005b8 <__cxa_pure_virtual>:
     5b8:	08 95       	ret

000005ba <_ZN8frt_task20print_status_in_listEP8emstream>:
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	8b 01       	movw	r16, r22
     5c6:	e8 81       	ld	r30, Y
     5c8:	f9 81       	ldd	r31, Y+1	; 0x01
     5ca:	02 80       	ldd	r0, Z+2	; 0x02
     5cc:	f3 81       	ldd	r31, Z+3	; 0x03
     5ce:	e0 2d       	mov	r30, r0
     5d0:	19 95       	eicall
     5d2:	66 e0       	ldi	r22, 0x06	; 6
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     5da:	8c 81       	ldd	r24, Y+4	; 0x04
     5dc:	9d 81       	ldd	r25, Y+5	; 0x05
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     5e2:	b8 01       	movw	r22, r16
     5e4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <_ZN9task_user18print_help_messageEv>:
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	8e 81       	ldd	r24, Y+6	; 0x06
     600:	9f 81       	ldd	r25, Y+7	; 0x07
     602:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     606:	8c 01       	movw	r16, r24
     608:	6c ec       	ldi	r22, 0xCC	; 204
     60a:	74 e0       	ldi	r23, 0x04	; 4
     60c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	c8 01       	movw	r24, r16
     614:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     618:	8c 01       	movw	r16, r24
     61a:	66 ec       	ldi	r22, 0xC6	; 198
     61c:	74 e0       	ldi	r23, 0x04	; 4
     61e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     622:	67 e0       	ldi	r22, 0x07	; 7
     624:	c8 01       	movw	r24, r16
     626:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     62a:	6a e0       	ldi	r22, 0x0A	; 10
     62c:	8e 81       	ldd	r24, Y+6	; 0x06
     62e:	9f 81       	ldd	r25, Y+7	; 0x07
     630:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     634:	8c 01       	movw	r16, r24
     636:	67 ea       	ldi	r22, 0xA7	; 167
     638:	74 e0       	ldi	r23, 0x04	; 4
     63a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     63e:	6a e0       	ldi	r22, 0x0A	; 10
     640:	c8 01       	movw	r24, r16
     642:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     646:	8c 01       	movw	r16, r24
     648:	61 ea       	ldi	r22, 0xA1	; 161
     64a:	74 e0       	ldi	r23, 0x04	; 4
     64c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     650:	66 e0       	ldi	r22, 0x06	; 6
     652:	c8 01       	movw	r24, r16
     654:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     658:	6a e0       	ldi	r22, 0x0A	; 10
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	9f 81       	ldd	r25, Y+7	; 0x07
     65e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     662:	8c 01       	movw	r16, r24
     664:	6a e8       	ldi	r22, 0x8A	; 138
     666:	74 e0       	ldi	r23, 0x04	; 4
     668:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     674:	6a e0       	ldi	r22, 0x0A	; 10
     676:	8e 81       	ldd	r24, Y+6	; 0x06
     678:	9f 81       	ldd	r25, Y+7	; 0x07
     67a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     67e:	8c 01       	movw	r16, r24
     680:	6e e6       	ldi	r22, 0x6E	; 110
     682:	74 e0       	ldi	r23, 0x04	; 4
     684:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     688:	66 e0       	ldi	r22, 0x06	; 6
     68a:	c8 01       	movw	r24, r16
     68c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     690:	6a e0       	ldi	r22, 0x0A	; 10
     692:	8e 81       	ldd	r24, Y+6	; 0x06
     694:	9f 81       	ldd	r25, Y+7	; 0x07
     696:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     69a:	8c 01       	movw	r16, r24
     69c:	66 e5       	ldi	r22, 0x56	; 86
     69e:	74 e0       	ldi	r23, 0x04	; 4
     6a0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6ac:	6a e0       	ldi	r22, 0x0A	; 10
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6b6:	8c 01       	movw	r16, r24
     6b8:	65 e3       	ldi	r22, 0x35	; 53
     6ba:	74 e0       	ldi	r23, 0x04	; 4
     6bc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6c8:	6a e0       	ldi	r22, 0x0A	; 10
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	9f 81       	ldd	r25, Y+7	; 0x07
     6ce:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6d2:	8c 01       	movw	r16, r24
     6d4:	6e e0       	ldi	r22, 0x0E	; 14
     6d6:	74 e0       	ldi	r23, 0x04	; 4
     6d8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6e4:	6a e0       	ldi	r22, 0x0A	; 10
     6e6:	8e 81       	ldd	r24, Y+6	; 0x06
     6e8:	9f 81       	ldd	r25, Y+7	; 0x07
     6ea:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     6ee:	8c 01       	movw	r16, r24
     6f0:	60 ef       	ldi	r22, 0xF0	; 240
     6f2:	73 e0       	ldi	r23, 0x03	; 3
     6f4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     6f8:	66 e0       	ldi	r22, 0x06	; 6
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     700:	6a e0       	ldi	r22, 0x0A	; 10
     702:	8e 81       	ldd	r24, Y+6	; 0x06
     704:	9f 81       	ldd	r25, Y+7	; 0x07
     706:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     70a:	8c 01       	movw	r16, r24
     70c:	65 ed       	ldi	r22, 0xD5	; 213
     70e:	73 e0       	ldi	r23, 0x03	; 3
     710:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	c8 01       	movw	r24, r16
     718:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     71c:	6a e0       	ldi	r22, 0x0A	; 10
     71e:	8e 81       	ldd	r24, Y+6	; 0x06
     720:	9f 81       	ldd	r25, Y+7	; 0x07
     722:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     726:	ec 01       	movw	r28, r24
     728:	66 ec       	ldi	r22, 0xC6	; 198
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	ce 01       	movw	r24, r28
     734:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	5c 01       	movw	r10, r24
     762:	3b 01       	movw	r6, r22
     764:	4a 01       	movw	r8, r20
     766:	12 2f       	mov	r17, r18
     768:	50 2e       	mov	r5, r16
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	ca 01       	movw	r24, r20
     76e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     772:	a6 14       	cp	r10, r6
     774:	b7 04       	cpc	r11, r7
     776:	08 f0       	brcs	.+2      	; 0x77a <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     778:	7c c0       	rjmp	.+248    	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     77a:	65 01       	movw	r12, r10
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	c8 0e       	add	r12, r24
     780:	d1 1c       	adc	r13, r1
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	75 01       	movw	r14, r10
     786:	b5 01       	movw	r22, r10
     788:	c4 01       	movw	r24, r8
     78a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
     78e:	6a e0       	ldi	r22, 0x0A	; 10
     790:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     794:	60 e3       	ldi	r22, 0x30	; 48
     796:	75 e0       	ldi	r23, 0x05	; 5
     798:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     79c:	11 23       	and	r17, r17
     79e:	09 f4       	brne	.+2      	; 0x7a2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     7a0:	6d c0       	rjmp	.+218    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a2:	00 23       	and	r16, r16
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     7a6:	6a c0       	rjmp	.+212    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a8:	6a e0       	ldi	r22, 0x0A	; 10
     7aa:	c4 01       	movw	r24, r8
     7ac:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     7b0:	6b e2       	ldi	r22, 0x2B	; 43
     7b2:	75 e0       	ldi	r23, 0x05	; 5
     7b4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     7b8:	61 c0       	rjmp	.+194    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7ba:	11 23       	and	r17, r17
     7bc:	71 f0       	breq	.+28     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7be:	01 11       	cpse	r16, r1
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c2:	88 81       	ld	r24, Y
     7c4:	85 15       	cp	r24, r5
     7c6:	49 f0       	breq	.+18     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c8:	6a e0       	ldi	r22, 0x0A	; 10
     7ca:	c4 01       	movw	r24, r8
     7cc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     7d0:	66 e2       	ldi	r22, 0x26	; 38
     7d2:	75 e0       	ldi	r23, 0x05	; 5
     7d4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	69 91       	ld	r22, Y+
     7dc:	c4 01       	movw	r24, r8
     7de:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
     7e2:	dc 01       	movw	r26, r24
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	02 80       	ldd	r0, Z+2	; 0x02
     7ea:	f3 81       	ldd	r31, Z+3	; 0x03
     7ec:	e0 2d       	mov	r30, r0
     7ee:	60 e2       	ldi	r22, 0x20	; 32
     7f0:	19 95       	eicall
     7f2:	cc 16       	cp	r12, r28
     7f4:	dd 06       	cpc	r13, r29
     7f6:	09 f7       	brne	.-62     	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     7f8:	11 23       	and	r17, r17
     7fa:	89 f0       	breq	.+34     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	c4 01       	movw	r24, r8
     800:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     804:	ec 01       	movw	r28, r24
     806:	60 e2       	ldi	r22, 0x20	; 32
     808:	75 e0       	ldi	r23, 0x05	; 5
     80a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     80e:	e8 81       	ld	r30, Y
     810:	f9 81       	ldd	r31, Y+1	; 0x01
     812:	02 80       	ldd	r0, Z+2	; 0x02
     814:	f3 81       	ldd	r31, Z+3	; 0x03
     816:	e0 2d       	mov	r30, r0
     818:	60 e2       	ldi	r22, 0x20	; 32
     81a:	ce 01       	movw	r24, r28
     81c:	19 95       	eicall
     81e:	f7 01       	movw	r30, r14
     820:	61 91       	ld	r22, Z+
     822:	7f 01       	movw	r14, r30
     824:	80 ee       	ldi	r24, 0xE0	; 224
     826:	86 0f       	add	r24, r22
     828:	8f 35       	cpi	r24, 0x5F	; 95
     82a:	48 f4       	brcc	.+18     	; 0x83e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     82c:	d4 01       	movw	r26, r8
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	f3 81       	ldd	r31, Z+3	; 0x03
     836:	e0 2d       	mov	r30, r0
     838:	c4 01       	movw	r24, r8
     83a:	19 95       	eicall
     83c:	09 c0       	rjmp	.+18     	; 0x850 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     83e:	d4 01       	movw	r26, r8
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	02 80       	ldd	r0, Z+2	; 0x02
     846:	f3 81       	ldd	r31, Z+3	; 0x03
     848:	e0 2d       	mov	r30, r0
     84a:	6e e2       	ldi	r22, 0x2E	; 46
     84c:	c4 01       	movw	r24, r8
     84e:	19 95       	eicall
     850:	ce 14       	cp	r12, r14
     852:	df 04       	cpc	r13, r15
     854:	21 f7       	brne	.-56     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     856:	b4 e1       	ldi	r27, 0x14	; 20
     858:	ab 0e       	add	r10, r27
     85a:	b1 1c       	adc	r11, r1
     85c:	66 e0       	ldi	r22, 0x06	; 6
     85e:	c4 01       	movw	r24, r8
     860:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     864:	e4 e1       	ldi	r30, 0x14	; 20
     866:	ce 0e       	add	r12, r30
     868:	d1 1c       	adc	r13, r1
     86a:	a6 14       	cp	r10, r6
     86c:	b7 04       	cpc	r11, r7
     86e:	08 f4       	brcc	.+2      	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     870:	89 cf       	rjmp	.-238    	; 0x784 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	c4 01       	movw	r24, r8
     876:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     87a:	02 c0       	rjmp	.+4      	; 0x880 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     87c:	e7 01       	movw	r28, r14
     87e:	9d cf       	rjmp	.-198    	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	08 95       	ret

000008a0 <_ZN10time_stamp10set_to_nowEv>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ec 01       	movw	r28, r24
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
     8ac:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     8b0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     8b4:	8c 83       	std	Y+4, r24	; 0x04
     8b6:	9d 83       	std	Y+5, r25	; 0x05
     8b8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
     8bc:	68 83       	st	Y, r22
     8be:	79 83       	std	Y+1, r23	; 0x01
     8c0:	8a 83       	std	Y+2, r24	; 0x02
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	ce 01       	movw	r24, r28
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <_ZlsR8emstreamR10time_stamp>:
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2f 97       	sbiw	r28, 0x0f	; 15
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	8c 01       	movw	r16, r24
     8f0:	7b 01       	movw	r14, r22
     8f2:	db 01       	movw	r26, r22
     8f4:	6d 91       	ld	r22, X+
     8f6:	7d 91       	ld	r23, X+
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f8 ee       	ldi	r31, 0xE8	; 232
     900:	8f 2e       	mov	r8, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	9f 2e       	mov	r9, r31
     906:	a1 2c       	mov	r10, r1
     908:	b1 2c       	mov	r11, r1
     90a:	f0 2d       	mov	r31, r0
     90c:	a5 01       	movw	r20, r10
     90e:	94 01       	movw	r18, r8
     910:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
     914:	ba 01       	movw	r22, r20
     916:	a9 01       	movw	r20, r18
     918:	c8 01       	movw	r24, r16
     91a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZN8emstreamlsEm>
     91e:	d8 01       	movw	r26, r16
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	02 80       	ldd	r0, Z+2	; 0x02
     926:	f3 81       	ldd	r31, Z+3	; 0x03
     928:	e0 2d       	mov	r30, r0
     92a:	6e e2       	ldi	r22, 0x2E	; 46
     92c:	c8 01       	movw	r24, r16
     92e:	19 95       	eicall
     930:	f7 01       	movw	r30, r14
     932:	60 81       	ld	r22, Z
     934:	71 81       	ldd	r23, Z+1	; 0x01
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	93 81       	ldd	r25, Z+3	; 0x03
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	60 e4       	ldi	r22, 0x40	; 64
     948:	72 e4       	ldi	r23, 0x42	; 66
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__mulsi3>
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
     95a:	49 01       	movw	r8, r18
     95c:	5a 01       	movw	r10, r20
     95e:	f7 01       	movw	r30, r14
     960:	a4 81       	ldd	r26, Z+4	; 0x04
     962:	b5 81       	ldd	r27, Z+5	; 0x05
     964:	20 e4       	ldi	r18, 0x40	; 64
     966:	32 e4       	ldi	r19, 0x42	; 66
     968:	4f e0       	ldi	r20, 0x0F	; 15
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	0e 94 8f 1c 	call	0x391e	; 0x391e <__muluhisi3>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	38 e4       	ldi	r19, 0x48	; 72
     974:	48 ee       	ldi	r20, 0xE8	; 232
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
     97c:	c5 01       	movw	r24, r10
     97e:	b4 01       	movw	r22, r8
     980:	62 0f       	add	r22, r18
     982:	73 1f       	adc	r23, r19
     984:	84 1f       	adc	r24, r20
     986:	95 1f       	adc	r25, r21
     988:	7e 01       	movw	r14, r28
     98a:	f7 e0       	ldi	r31, 0x07	; 7
     98c:	ef 0e       	add	r14, r31
     98e:	f1 1c       	adc	r15, r1
     990:	9e 01       	movw	r18, r28
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	59 01       	movw	r10, r18
     998:	2a e0       	ldi	r18, 0x0A	; 10
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	0e 94 95 1b 	call	0x372a	; 0x372a <__divmodsi4>
     9a4:	e6 2f       	mov	r30, r22
     9a6:	28 87       	std	Y+8, r18	; 0x08
     9a8:	39 87       	std	Y+9, r19	; 0x09
     9aa:	4a 87       	std	Y+10, r20	; 0x0a
     9ac:	5b 87       	std	Y+11, r21	; 0x0b
     9ae:	68 85       	ldd	r22, Y+8	; 0x08
     9b0:	79 85       	ldd	r23, Y+9	; 0x09
     9b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9b6:	20 e3       	ldi	r18, 0x30	; 48
     9b8:	2e 0f       	add	r18, r30
     9ba:	d7 01       	movw	r26, r14
     9bc:	2e 93       	st	-X, r18
     9be:	7d 01       	movw	r14, r26
     9c0:	aa 15       	cp	r26, r10
     9c2:	bb 05       	cpc	r27, r11
     9c4:	49 f7       	brne	.-46     	; 0x998 <_ZlsR8emstreamR10time_stamp+0xc8>
     9c6:	1f 82       	std	Y+7, r1	; 0x07
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	c8 01       	movw	r24, r16
     9d0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     9d4:	c8 01       	movw	r24, r16
     9d6:	2f 96       	adiw	r28, 0x0f	; 15
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	08 95       	ret

000009f2 <_ZN14frt_text_queue7getcharEv>:
     9f2:	0f 93       	push	r16
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	a9 01       	movw	r20, r18
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 85       	ldd	r24, Z+8	; 0x08
     a10:	91 85       	ldd	r25, Z+9	; 0x09
     a12:	0e 94 02 15 	call	0x2a04	; 0x2a04 <xQueueGenericReceive>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	19 f4       	brne	.+6      	; 0xa20 <_ZN14frt_text_queue7getcharEv+0x2e>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <_ZN14frt_text_queue7getcharEv+0x32>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN14frt_text_queue14check_for_charEv>:
     a2e:	fc 01       	movw	r30, r24
     a30:	80 85       	ldd	r24, Z+8	; 0x08
     a32:	91 85       	ldd	r25, Z+9	; 0x09
     a34:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <uxQueueMessagesWaiting>
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	81 11       	cpse	r24, r1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <_ZN14frt_text_queue14check_for_charEv+0x12>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	89 2f       	mov	r24, r25
     a42:	08 95       	ret

00000a44 <_ZN14frt_text_queue7putcharEc>:
     a44:	0f 93       	push	r16
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	69 83       	std	Y+1, r22	; 0x01
     a52:	fc 01       	movw	r30, r24
     a54:	22 85       	ldd	r18, Z+10	; 0x0a
     a56:	33 85       	ldd	r19, Z+11	; 0x0b
     a58:	44 85       	ldd	r20, Z+12	; 0x0c
     a5a:	55 85       	ldd	r21, Z+13	; 0x0d
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	be 01       	movw	r22, r28
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	80 85       	ldd	r24, Z+8	; 0x08
     a66:	91 85       	ldd	r25, Z+9	; 0x09
     a68:	0e 94 67 14 	call	0x28ce	; 0x28ce <xQueueGenericSend>
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	81 11       	cpse	r24, r1
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <_ZN14frt_text_queue7putcharEc+0x30>
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	89 2f       	mov	r24, r25
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <_ZN8frt_task12print_statusER8emstream>:
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	8b 01       	movw	r16, r22
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	9b 81       	ldd	r25, Y+3	; 0x03
     aa0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <pcTaskGetTaskName>
     aa4:	bc 01       	movw	r22, r24
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     aac:	d8 01       	movw	r26, r16
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	02 80       	ldd	r0, Z+2	; 0x02
     ab4:	f3 81       	ldd	r31, Z+3	; 0x03
     ab6:	e0 2d       	mov	r30, r0
     ab8:	69 e0       	ldi	r22, 0x09	; 9
     aba:	c8 01       	movw	r24, r16
     abc:	19 95       	eicall
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	9b 81       	ldd	r25, Y+3	; 0x03
     ac2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <pcTaskGetTaskName>
     ac6:	fc 01       	movw	r30, r24
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <_ZN8frt_task12print_statusER8emstream+0x48>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	e8 1b       	sub	r30, r24
     ad2:	f9 0b       	sbc	r31, r25
     ad4:	38 97       	sbiw	r30, 0x08	; 8
     ad6:	48 f4       	brcc	.+18     	; 0xaea <_ZN8frt_task12print_statusER8emstream+0x6a>
     ad8:	d8 01       	movw	r26, r16
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	02 80       	ldd	r0, Z+2	; 0x02
     ae0:	f3 81       	ldd	r31, Z+3	; 0x03
     ae2:	e0 2d       	mov	r30, r0
     ae4:	69 e0       	ldi	r22, 0x09	; 9
     ae6:	c8 01       	movw	r24, r16
     ae8:	19 95       	eicall
     aea:	ce 84       	ldd	r12, Y+14	; 0x0e
     aec:	df 84       	ldd	r13, Y+15	; 0x0f
     aee:	e8 88       	ldd	r14, Y+16	; 0x10
     af0:	f9 88       	ldd	r15, Y+17	; 0x11
     af2:	a8 84       	ldd	r10, Y+8	; 0x08
     af4:	b9 84       	ldd	r11, Y+9	; 0x09
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <uxTaskGetStackHighWaterMark>
     afe:	98 2e       	mov	r9, r24
     b00:	8c 84       	ldd	r8, Y+12	; 0x0c
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <uxTaskPriorityGet>
     b0a:	68 2f       	mov	r22, r24
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
     b12:	6a e0       	ldi	r22, 0x0A	; 10
     b14:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     b18:	ec 01       	movw	r28, r24
     b1a:	6e e1       	ldi	r22, 0x1E	; 30
     b1c:	75 e0       	ldi	r23, 0x05	; 5
     b1e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     b22:	68 2d       	mov	r22, r8
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
     b2a:	6a e0       	ldi	r22, 0x0A	; 10
     b2c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     b30:	ec 01       	movw	r28, r24
     b32:	6c e1       	ldi	r22, 0x1C	; 28
     b34:	75 e0       	ldi	r23, 0x05	; 5
     b36:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     b3a:	69 2d       	mov	r22, r9
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
     b42:	6a e0       	ldi	r22, 0x0A	; 10
     b44:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     b48:	ec 01       	movw	r28, r24
     b4a:	6a e1       	ldi	r22, 0x1A	; 26
     b4c:	75 e0       	ldi	r23, 0x05	; 5
     b4e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     b52:	b5 01       	movw	r22, r10
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
     b5a:	6a e0       	ldi	r22, 0x0A	; 10
     b5c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     b60:	ec 01       	movw	r28, r24
     b62:	68 e1       	ldi	r22, 0x18	; 24
     b64:	75 e0       	ldi	r23, 0x05	; 5
     b66:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     b6a:	6a e0       	ldi	r22, 0x0A	; 10
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     b72:	ec 01       	movw	r28, r24
     b74:	66 e1       	ldi	r22, 0x16	; 22
     b76:	75 e0       	ldi	r23, 0x05	; 5
     b78:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     b7c:	b7 01       	movw	r22, r14
     b7e:	a6 01       	movw	r20, r12
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZN8emstreamlsEm>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	08 95       	ret

00000ba0 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	7b 01       	movw	r14, r22
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	9b 81       	ldd	r25, Y+3	; 0x03
     bb8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <pcTaskGetTaskName>
     bbc:	6c 01       	movw	r12, r24
     bbe:	6a e0       	ldi	r22, 0x0A	; 10
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     bc6:	8c 01       	movw	r16, r24
     bc8:	61 e1       	ldi	r22, 0x11	; 17
     bca:	75 e0       	ldi	r23, 0x05	; 5
     bcc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     bd0:	6a e0       	ldi	r22, 0x0A	; 10
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     bd8:	8c 01       	movw	r16, r24
     bda:	6a e0       	ldi	r22, 0x0A	; 10
     bdc:	75 e0       	ldi	r23, 0x05	; 5
     bde:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     be2:	b6 01       	movw	r22, r12
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     bea:	6a e0       	ldi	r22, 0x0A	; 10
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     bf2:	8c 01       	movw	r16, r24
     bf4:	64 e0       	ldi	r22, 0x04	; 4
     bf6:	75 e0       	ldi	r23, 0x05	; 5
     bf8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     bfc:	66 e0       	ldi	r22, 0x06	; 6
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     c04:	8a 85       	ldd	r24, Y+10	; 0x0a
     c06:	9b 85       	ldd	r25, Y+11	; 0x0b
     c08:	e8 85       	ldd	r30, Y+8	; 0x08
     c0a:	f9 85       	ldd	r31, Y+9	; 0x09
     c0c:	01 e1       	ldi	r16, 0x11	; 17
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	a7 01       	movw	r20, r14
     c12:	bc 01       	movw	r22, r24
     c14:	8e 1b       	sub	r24, r30
     c16:	9f 0b       	sbc	r25, r31
     c18:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	9d 81       	ldd	r25, Y+5	; 0x05
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	19 f0       	breq	.+6      	; 0xc2a <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	08 95       	ret

00000c3c <_call_static_run_method>:
     c3c:	ec 01       	movw	r28, r24
     c3e:	e8 81       	ld	r30, Y
     c40:	f9 81       	ldd	r31, Y+1	; 0x01
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	19 95       	eicall
     c4a:	1a 82       	std	Y+2, r1	; 0x02
     c4c:	1b 82       	std	Y+3, r1	; 0x03
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	7f ef       	ldi	r23, 0xFF	; 255
     c52:	cb 01       	movw	r24, r22
     c54:	0e 94 78 19 	call	0x32f0	; 0x32f0 <vTaskDelay>
     c58:	fa cf       	rjmp	.-12     	; 0xc4e <_call_static_run_method+0x12>

00000c5a <_ZN9task_user3runEv>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2c 97       	sbiw	r28, 0x0c	; 12
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	7c 01       	movw	r14, r24
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	1b 82       	std	Y+3, r1	; 0x03
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	1e 82       	std	Y+6, r1	; 0x06
     c76:	6a e0       	ldi	r22, 0x0A	; 10
     c78:	dc 01       	movw	r26, r24
     c7a:	16 96       	adiw	r26, 0x06	; 6
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     c86:	6c 01       	movw	r12, r24
     c88:	68 ea       	ldi	r22, 0xA8	; 168
     c8a:	73 e0       	ldi	r23, 0x03	; 3
     c8c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     c90:	66 e0       	ldi	r22, 0x06	; 6
     c92:	c6 01       	movw	r24, r12
     c94:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     c98:	11 e0       	ldi	r17, 0x01	; 1
     c9a:	81 2c       	mov	r8, r1
     c9c:	68 94       	set
     c9e:	99 24       	eor	r9, r9
     ca0:	93 f8       	bld	r9, 3
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f0 ef       	ldi	r31, 0xF0	; 240
     ca6:	af 2e       	mov	r10, r31
     ca8:	f0 e2       	ldi	r31, 0x20	; 32
     caa:	bf 2e       	mov	r11, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	f7 01       	movw	r30, r14
     cb0:	84 85       	ldd	r24, Z+12	; 0x0c
     cb2:	88 23       	and	r24, r24
     cb4:	21 f0       	breq	.+8      	; 0xcbe <_ZN9task_user3runEv+0x64>
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_ZN9task_user3runEv+0x62>
     cba:	60 c0       	rjmp	.+192    	; 0xd7c <_ZN9task_user3runEv+0x122>
     cbc:	06 c2       	rjmp	.+1036   	; 0x10ca <_ZN9task_user3runEv+0x470>
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	dc 01       	movw	r26, r24
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	04 80       	ldd	r0, Z+4	; 0x04
     cca:	f5 81       	ldd	r31, Z+5	; 0x05
     ccc:	e0 2d       	mov	r30, r0
     cce:	19 95       	eicall
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <_ZN9task_user3runEv+0x7c>
     cd4:	37 c0       	rjmp	.+110    	; 0xd44 <_ZN9task_user3runEv+0xea>
     cd6:	f7 01       	movw	r30, r14
     cd8:	86 81       	ldd	r24, Z+6	; 0x06
     cda:	97 81       	ldd	r25, Z+7	; 0x07
     cdc:	dc 01       	movw	r26, r24
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	06 80       	ldd	r0, Z+6	; 0x06
     ce4:	f7 81       	ldd	r31, Z+7	; 0x07
     ce6:	e0 2d       	mov	r30, r0
     ce8:	19 95       	eicall
     cea:	99 27       	eor	r25, r25
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	f9 f0       	breq	.+62     	; 0xd30 <_ZN9task_user3runEv+0xd6>
     cf2:	03 97       	sbiw	r24, 0x03	; 3
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <_ZN9task_user3runEv+0x9e>
     cf6:	05 c2       	rjmp	.+1034   	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     cf8:	6a e0       	ldi	r22, 0x0A	; 10
     cfa:	f7 01       	movw	r30, r14
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	97 81       	ldd	r25, Z+7	; 0x07
     d00:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     d04:	7c 01       	movw	r14, r24
     d06:	6a e9       	ldi	r22, 0x9A	; 154
     d08:	73 e0       	ldi	r23, 0x03	; 3
     d0a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     d0e:	66 e0       	ldi	r22, 0x06	; 6
     d10:	c7 01       	movw	r24, r14
     d12:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	88 ed       	ldi	r24, 0xD8	; 216
     d1a:	08 b6       	in	r0, 0x38	; 56
     d1c:	18 be       	out	0x38, r1	; 56
     d1e:	84 bf       	out	0x34, r24	; 52
     d20:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d24:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d28:	81 fd       	sbrc	r24, 1
     d2a:	fc cf       	rjmp	.-8      	; 0xd24 <_ZN9task_user3runEv+0xca>
     d2c:	08 be       	out	0x38, r0	; 56
     d2e:	ff cf       	rjmp	.-2      	; 0xd2e <_ZN9task_user3runEv+0xd4>
     d30:	c7 01       	movw	r24, r14
     d32:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
     d36:	d7 01       	movw	r26, r14
     d38:	1c 96       	adiw	r26, 0x0c	; 12
     d3a:	1c 93       	st	X, r17
     d3c:	1c 97       	sbiw	r26, 0x0c	; 12
     d3e:	1d 96       	adiw	r26, 0x0d	; 13
     d40:	1c 93       	st	X, r17
     d42:	df c1       	rjmp	.+958    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d44:	82 ef       	ldi	r24, 0xF2	; 242
     d46:	90 e2       	ldi	r25, 0x20	; 32
     d48:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_ZN9task_user3runEv+0xf8>
     d50:	d8 c1       	rjmp	.+944    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d52:	d7 01       	movw	r26, r14
     d54:	16 96       	adiw	r26, 0x06	; 6
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	17 97       	sbiw	r26, 0x07	; 7
     d5c:	01 90       	ld	r0, Z+
     d5e:	f0 81       	ld	r31, Z
     d60:	e0 2d       	mov	r30, r0
     d62:	c2 80       	ldd	r12, Z+2	; 0x02
     d64:	d3 80       	ldd	r13, Z+3	; 0x03
     d66:	82 ef       	ldi	r24, 0xF2	; 242
     d68:	90 e2       	ldi	r25, 0x20	; 32
     d6a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     d6e:	68 2f       	mov	r22, r24
     d70:	f7 01       	movw	r30, r14
     d72:	86 81       	ldd	r24, Z+6	; 0x06
     d74:	97 81       	ldd	r25, Z+7	; 0x07
     d76:	f6 01       	movw	r30, r12
     d78:	19 95       	eicall
     d7a:	c3 c1       	rjmp	.+902    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d7c:	86 81       	ldd	r24, Z+6	; 0x06
     d7e:	97 81       	ldd	r25, Z+7	; 0x07
     d80:	dc 01       	movw	r26, r24
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	04 80       	ldd	r0, Z+4	; 0x04
     d88:	f5 81       	ldd	r31, Z+5	; 0x05
     d8a:	e0 2d       	mov	r30, r0
     d8c:	19 95       	eicall
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <_ZN9task_user3runEv+0x13a>
     d92:	b7 c1       	rjmp	.+878    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d94:	f7 01       	movw	r30, r14
     d96:	86 81       	ldd	r24, Z+6	; 0x06
     d98:	97 81       	ldd	r25, Z+7	; 0x07
     d9a:	dc 01       	movw	r26, r24
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	06 80       	ldd	r0, Z+6	; 0x06
     da2:	f7 81       	ldd	r31, Z+7	; 0x07
     da4:	e0 2d       	mov	r30, r0
     da6:	19 95       	eicall
     da8:	9c 01       	movw	r18, r24
     daa:	33 27       	eor	r19, r19
     dac:	28 36       	cpi	r18, 0x68	; 104
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_ZN9task_user3runEv+0x15a>
     db2:	54 c1       	rjmp	.+680    	; 0x105c <_ZN9task_user3runEv+0x402>
     db4:	4c f4       	brge	.+18     	; 0xdc8 <_ZN9task_user3runEv+0x16e>
     db6:	2b 31       	cpi	r18, 0x1B	; 27
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <_ZN9task_user3runEv+0x164>
     dbc:	53 c1       	rjmp	.+678    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dbe:	25 36       	cpi	r18, 0x65	; 101
     dc0:	31 05       	cpc	r19, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <_ZN9task_user3runEv+0x16c>
     dc4:	4f c1       	rjmp	.+670    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dc6:	63 c1       	rjmp	.+710    	; 0x108e <_ZN9task_user3runEv+0x434>
     dc8:	23 37       	cpi	r18, 0x73	; 115
     dca:	31 05       	cpc	r19, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_ZN9task_user3runEv+0x176>
     dce:	0c c1       	rjmp	.+536    	; 0xfe8 <_ZN9task_user3runEv+0x38e>
     dd0:	26 37       	cpi	r18, 0x76	; 118
     dd2:	31 05       	cpc	r19, r1
     dd4:	91 f0       	breq	.+36     	; 0xdfa <_ZN9task_user3runEv+0x1a0>
     dd6:	2e 36       	cpi	r18, 0x6E	; 110
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <_ZN9task_user3runEv+0x184>
     ddc:	58 c1       	rjmp	.+688    	; 0x108e <_ZN9task_user3runEv+0x434>
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     de6:	bc 01       	movw	r22, r24
     de8:	f7 01       	movw	r30, r14
     dea:	86 81       	ldd	r24, Z+6	; 0x06
     dec:	97 81       	ldd	r25, Z+7	; 0x07
     dee:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     df2:	66 e0       	ldi	r22, 0x06	; 6
     df4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     df8:	84 c1       	rjmp	.+776    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     dfa:	1f 82       	std	Y+7, r1	; 0x07
     dfc:	18 86       	std	Y+8, r1	; 0x08
     dfe:	19 86       	std	Y+9, r1	; 0x09
     e00:	1a 86       	std	Y+10, r1	; 0x0a
     e02:	1b 86       	std	Y+11, r1	; 0x0b
     e04:	1c 86       	std	Y+12, r1	; 0x0c
     e06:	0e 94 20 11 	call	0x2240	; 0x2240 <xPortGetFreeHeapSize>
     e0a:	3c 01       	movw	r6, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	07 96       	adiw	r24, 0x07	; 7
     e10:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     e14:	2c 01       	movw	r4, r24
     e16:	66 e0       	ldi	r22, 0x06	; 6
     e18:	d7 01       	movw	r26, r14
     e1a:	16 96       	adiw	r26, 0x06	; 6
     e1c:	8d 91       	ld	r24, X+
     e1e:	9c 91       	ld	r25, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e26:	6a e0       	ldi	r22, 0x0A	; 10
     e28:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e2c:	6c 01       	movw	r12, r24
     e2e:	60 e3       	ldi	r22, 0x30	; 48
     e30:	73 e0       	ldi	r23, 0x03	; 3
     e32:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     e36:	6a e0       	ldi	r22, 0x0A	; 10
     e38:	c6 01       	movw	r24, r12
     e3a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e3e:	6c 01       	movw	r12, r24
     e40:	64 e2       	ldi	r22, 0x24	; 36
     e42:	73 e0       	ldi	r23, 0x03	; 3
     e44:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	c6 01       	movw	r24, r12
     e4c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e50:	6a e0       	ldi	r22, 0x0A	; 10
     e52:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e56:	6c 01       	movw	r12, r24
     e58:	6d e1       	ldi	r22, 0x1D	; 29
     e5a:	73 e0       	ldi	r23, 0x03	; 3
     e5c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     e60:	b2 01       	movw	r22, r4
     e62:	c6 01       	movw	r24, r12
     e64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     e68:	6a e0       	ldi	r22, 0x0A	; 10
     e6a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e6e:	6c 01       	movw	r12, r24
     e70:	6f e0       	ldi	r22, 0x0F	; 15
     e72:	73 e0       	ldi	r23, 0x03	; 3
     e74:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     e78:	b3 01       	movw	r22, r6
     e7a:	c6 01       	movw	r24, r12
     e7c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     e86:	6c 01       	movw	r12, r24
     e88:	6d e0       	ldi	r22, 0x0D	; 13
     e8a:	73 e0       	ldi	r23, 0x03	; 3
     e8c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     e90:	4f ef       	ldi	r20, 0xFF	; 255
     e92:	5f e0       	ldi	r21, 0x0F	; 15
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	c6 01       	movw	r24, r12
     e9a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZN8emstreamlsEm>
     e9e:	f4 01       	movw	r30, r8
     ea0:	60 a4       	ldd	r6, Z+40	; 0x28
     ea2:	71 a4       	ldd	r7, Z+41	; 0x29
     ea4:	6a e0       	ldi	r22, 0x0A	; 10
     ea6:	d7 01       	movw	r26, r14
     ea8:	16 96       	adiw	r26, 0x06	; 6
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	17 97       	sbiw	r26, 0x07	; 7
     eb0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     eb4:	6c 01       	movw	r12, r24
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	73 e0       	ldi	r23, 0x03	; 3
     eba:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     ebe:	b3 01       	movw	r22, r6
     ec0:	c6 01       	movw	r24, r12
     ec2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     ecc:	66 e0       	ldi	r22, 0x06	; 6
     ece:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     ed2:	f7 01       	movw	r30, r14
     ed4:	c6 80       	ldd	r12, Z+6	; 0x06
     ed6:	d7 80       	ldd	r13, Z+7	; 0x07
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	c6 01       	movw	r24, r12
     edc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     ee0:	3c 01       	movw	r6, r24
     ee2:	67 ef       	ldi	r22, 0xF7	; 247
     ee4:	72 e0       	ldi	r23, 0x02	; 2
     ee6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     eea:	6a e0       	ldi	r22, 0x0A	; 10
     eec:	c3 01       	movw	r24, r6
     eee:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     ef2:	3c 01       	movw	r6, r24
     ef4:	60 ef       	ldi	r22, 0xF0	; 240
     ef6:	72 e0       	ldi	r23, 0x02	; 2
     ef8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     efc:	66 e0       	ldi	r22, 0x06	; 6
     efe:	c3 01       	movw	r24, r6
     f00:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f04:	6a e0       	ldi	r22, 0x0A	; 10
     f06:	c6 01       	movw	r24, r12
     f08:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f0c:	3c 01       	movw	r6, r24
     f0e:	6f ed       	ldi	r22, 0xDF	; 223
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f16:	6a e0       	ldi	r22, 0x0A	; 10
     f18:	c3 01       	movw	r24, r6
     f1a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f1e:	3c 01       	movw	r6, r24
     f20:	63 ed       	ldi	r22, 0xD3	; 211
     f22:	72 e0       	ldi	r23, 0x02	; 2
     f24:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f28:	6a e0       	ldi	r22, 0x0A	; 10
     f2a:	c3 01       	movw	r24, r6
     f2c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f30:	3c 01       	movw	r6, r24
     f32:	6d ec       	ldi	r22, 0xCD	; 205
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f3a:	66 e0       	ldi	r22, 0x06	; 6
     f3c:	c3 01       	movw	r24, r6
     f3e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f42:	6a e0       	ldi	r22, 0x0A	; 10
     f44:	c6 01       	movw	r24, r12
     f46:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f4a:	3c 01       	movw	r6, r24
     f4c:	6c eb       	ldi	r22, 0xBC	; 188
     f4e:	72 e0       	ldi	r23, 0x02	; 2
     f50:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f54:	6a e0       	ldi	r22, 0x0A	; 10
     f56:	c3 01       	movw	r24, r6
     f58:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f5c:	3c 01       	movw	r6, r24
     f5e:	60 eb       	ldi	r22, 0xB0	; 176
     f60:	72 e0       	ldi	r23, 0x02	; 2
     f62:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	c3 01       	movw	r24, r6
     f6a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f6e:	3c 01       	movw	r6, r24
     f70:	6a ea       	ldi	r22, 0xAA	; 170
     f72:	72 e0       	ldi	r23, 0x02	; 2
     f74:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	c3 01       	movw	r24, r6
     f7c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     f80:	d5 01       	movw	r26, r10
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	19 f0       	breq	.+6      	; 0xf90 <_ZN9task_user3runEv+0x336>
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     f90:	0e 94 83 17 	call	0x2f06	; 0x2f06 <xTaskGetIdleTaskHandle>
     f94:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <uxTaskGetStackHighWaterMark>
     f98:	08 2f       	mov	r16, r24
     f9a:	6a e0       	ldi	r22, 0x0A	; 10
     f9c:	c6 01       	movw	r24, r12
     f9e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     fa2:	6c 01       	movw	r12, r24
     fa4:	6f e9       	ldi	r22, 0x9F	; 159
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     fac:	60 2f       	mov	r22, r16
     fae:	c6 01       	movw	r24, r12
     fb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
     fb4:	6a e0       	ldi	r22, 0x0A	; 10
     fb6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     fba:	6c 01       	movw	r12, r24
     fbc:	6d e9       	ldi	r22, 0x9D	; 157
     fbe:	72 e0       	ldi	r23, 0x02	; 2
     fc0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     fc4:	64 e6       	ldi	r22, 0x64	; 100
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	c6 01       	movw	r24, r12
     fca:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     fd4:	6c 01       	movw	r12, r24
     fd6:	6a e9       	ldi	r22, 0x9A	; 154
     fd8:	72 e0       	ldi	r23, 0x02	; 2
     fda:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
     fde:	66 e0       	ldi	r22, 0x06	; 6
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
     fe6:	8d c0       	rjmp	.+282    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     fe8:	f7 01       	movw	r30, r14
     fea:	c6 80       	ldd	r12, Z+6	; 0x06
     fec:	d7 80       	ldd	r13, Z+7	; 0x07
     fee:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <last_created_task_pointer>
     ff2:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <last_created_task_pointer+0x1>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	19 f0       	breq	.+6      	; 0x1000 <_ZN9task_user3runEv+0x3a6>
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
    1000:	6a e0       	ldi	r22, 0x0A	; 10
    1002:	c6 01       	movw	r24, r12
    1004:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1008:	3c 01       	movw	r6, r24
    100a:	60 e6       	ldi	r22, 0x60	; 96
    100c:	73 e0       	ldi	r23, 0x03	; 3
    100e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1012:	6a e0       	ldi	r22, 0x0A	; 10
    1014:	c3 01       	movw	r24, r6
    1016:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    101a:	3c 01       	movw	r6, r24
    101c:	65 e5       	ldi	r22, 0x55	; 85
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1024:	6a e0       	ldi	r22, 0x0A	; 10
    1026:	c3 01       	movw	r24, r6
    1028:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    102c:	3c 01       	movw	r6, r24
    102e:	6f e4       	ldi	r22, 0x4F	; 79
    1030:	73 e0       	ldi	r23, 0x03	; 3
    1032:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1036:	66 e0       	ldi	r22, 0x06	; 6
    1038:	c3 01       	movw	r24, r6
    103a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    103e:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <portStackTopForTask>
    1042:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <portStackTopForTask+0x1>
    1046:	bc 01       	movw	r22, r24
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	01 e1       	ldi	r16, 0x11	; 17
    104e:	21 2f       	mov	r18, r17
    1050:	a6 01       	movw	r20, r12
    1052:	83 56       	subi	r24, 0x63	; 99
    1054:	91 09       	sbc	r25, r1
    1056:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
    105a:	53 c0       	rjmp	.+166    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    105c:	c7 01       	movw	r24, r14
    105e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    1064:	6a e0       	ldi	r22, 0x0A	; 10
    1066:	d7 01       	movw	r26, r14
    1068:	16 96       	adiw	r26, 0x06	; 6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	17 97       	sbiw	r26, 0x07	; 7
    1070:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1074:	6c 01       	movw	r12, r24
    1076:	68 e8       	ldi	r22, 0x88	; 136
    1078:	73 e0       	ldi	r23, 0x03	; 3
    107a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    107e:	66 e0       	ldi	r22, 0x06	; 6
    1080:	c6 01       	movw	r24, r12
    1082:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1086:	f7 01       	movw	r30, r14
    1088:	14 86       	std	Z+12, r1	; 0x0c
    108a:	15 86       	std	Z+13, r1	; 0x0d
    108c:	3a c0       	rjmp	.+116    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    108e:	f7 01       	movw	r30, r14
    1090:	a6 81       	ldd	r26, Z+6	; 0x06
    1092:	b7 81       	ldd	r27, Z+7	; 0x07
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	02 80       	ldd	r0, Z+2	; 0x02
    109c:	f3 81       	ldd	r31, Z+3	; 0x03
    109e:	e0 2d       	mov	r30, r0
    10a0:	68 2f       	mov	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	19 95       	eicall
    10a6:	6a e0       	ldi	r22, 0x0A	; 10
    10a8:	d7 01       	movw	r26, r14
    10aa:	16 96       	adiw	r26, 0x06	; 6
    10ac:	8d 91       	ld	r24, X+
    10ae:	9c 91       	ld	r25, X
    10b0:	17 97       	sbiw	r26, 0x07	; 7
    10b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    10b6:	6c 01       	movw	r12, r24
    10b8:	62 e8       	ldi	r22, 0x82	; 130
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    10c0:	66 e0       	ldi	r22, 0x06	; 6
    10c2:	c6 01       	movw	r24, r12
    10c4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    10c8:	1c c0       	rjmp	.+56     	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    10ca:	6a e0       	ldi	r22, 0x0A	; 10
    10cc:	f7 01       	movw	r30, r14
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    10d6:	7c 01       	movw	r14, r24
    10d8:	65 e6       	ldi	r22, 0x65	; 101
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	c7 01       	movw	r24, r14
    10e4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	88 ed       	ldi	r24, 0xD8	; 216
    10ec:	08 b6       	in	r0, 0x38	; 56
    10ee:	18 be       	out	0x38, r1	; 56
    10f0:	84 bf       	out	0x34, r24	; 52
    10f2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10f6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    10fa:	81 fd       	sbrc	r24, 1
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <_ZN9task_user3runEv+0x49c>
    10fe:	08 be       	out	0x38, r0	; 56
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <_ZN9task_user3runEv+0x4a6>
    1102:	f7 01       	movw	r30, r14
    1104:	86 85       	ldd	r24, Z+14	; 0x0e
    1106:	97 85       	ldd	r25, Z+15	; 0x0f
    1108:	a0 89       	ldd	r26, Z+16	; 0x10
    110a:	b1 89       	ldd	r27, Z+17	; 0x11
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	a1 1d       	adc	r26, r1
    1110:	b1 1d       	adc	r27, r1
    1112:	86 87       	std	Z+14, r24	; 0x0e
    1114:	97 87       	std	Z+15, r25	; 0x0f
    1116:	a0 8b       	std	Z+16, r26	; 0x10
    1118:	b1 8b       	std	Z+17, r27	; 0x11
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 78 19 	call	0x32f0	; 0x32f0 <vTaskDelay>
    1126:	c3 cd       	rjmp	.-1146   	; 0xcae <_ZN9task_user3runEv+0x54>

00001128 <_ZN22task_system_controller3runEv>:
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <_ZN22task_system_controller3runEv+0x6>
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8c 01       	movw	r16, r24
    1136:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	f8 01       	movw	r30, r16
    1144:	86 85       	ldd	r24, Z+14	; 0x0e
    1146:	97 85       	ldd	r25, Z+15	; 0x0f
    1148:	a0 89       	ldd	r26, Z+16	; 0x10
    114a:	b1 89       	ldd	r27, Z+17	; 0x11
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	86 87       	std	Z+14, r24	; 0x0e
    1154:	97 87       	std	Z+15, r25	; 0x0f
    1156:	a0 8b       	std	Z+16, r26	; 0x10
    1158:	b1 8b       	std	Z+17, r27	; 0x11
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskDelayUntil>
    116a:	eb cf       	rjmp	.-42     	; 0x1142 <_ZN22task_system_controller3runEv+0x1a>

0000116c <_ZN21task_pendulum_encoder3runEv>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <_ZN21task_pendulum_encoder3runEv+0x6>
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8c 01       	movw	r16, r24
    117a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	7a 83       	std	Y+2, r23	; 0x02
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	e0 e8       	ldi	r30, 0x80	; 128
    1188:	f6 e0       	ldi	r31, 0x06	; 6
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	82 83       	std	Z+2, r24	; 0x02
    118e:	80 8b       	std	Z+16, r24	; 0x10
    1190:	81 8b       	std	Z+17, r24	; 0x11
    1192:	e0 e8       	ldi	r30, 0x80	; 128
    1194:	f1 e0       	ldi	r31, 0x01	; 1
    1196:	80 e7       	ldi	r24, 0x70	; 112
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	89 e0       	ldi	r24, 0x09	; 9
    119c:	82 87       	std	Z+10, r24	; 0x0a
    119e:	e0 e4       	ldi	r30, 0x40	; 64
    11a0:	f8 e0       	ldi	r31, 0x08	; 8
    11a2:	8a e6       	ldi	r24, 0x6A	; 106
    11a4:	83 83       	std	Z+3, r24	; 0x03
    11a6:	8d ec       	ldi	r24, 0xCD	; 205
    11a8:	97 e0       	ldi	r25, 0x07	; 7
    11aa:	86 a3       	std	Z+38, r24	; 0x26
    11ac:	97 a3       	std	Z+39, r25	; 0x27
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
    11b2:	68 94       	set
    11b4:	ee 24       	eor	r14, r14
    11b6:	e6 f8       	bld	r14, 6
    11b8:	ff 24       	eor	r15, r15
    11ba:	f3 f8       	bld	r15, 3
    11bc:	f7 01       	movw	r30, r14
    11be:	80 a1       	ldd	r24, Z+32	; 0x20
    11c0:	91 a1       	ldd	r25, Z+33	; 0x21
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	0f 92       	push	r0
    11c8:	80 b9       	out	0x00, r24	; 0
    11ca:	91 b9       	out	0x01, r25	; 1
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	f8 01       	movw	r30, r16
    11d2:	86 85       	ldd	r24, Z+14	; 0x0e
    11d4:	97 85       	ldd	r25, Z+15	; 0x0f
    11d6:	a0 89       	ldd	r26, Z+16	; 0x10
    11d8:	b1 89       	ldd	r27, Z+17	; 0x11
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	a1 1d       	adc	r26, r1
    11de:	b1 1d       	adc	r27, r1
    11e0:	86 87       	std	Z+14, r24	; 0x0e
    11e2:	97 87       	std	Z+15, r25	; 0x0f
    11e4:	a0 8b       	std	Z+16, r26	; 0x10
    11e6:	b1 8b       	std	Z+17, r27	; 0x11
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskDelayUntil>
    11f8:	e1 cf       	rjmp	.-62     	; 0x11bc <_ZN21task_pendulum_encoder3runEv+0x50>

000011fa <_ZN18task_motor_command3runEv>:
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <_ZN18task_motor_command3runEv+0x6>
    1200:	1f 92       	push	r1
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8c 01       	movw	r16, r24
    1208:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
    120c:	69 83       	std	Y+1, r22	; 0x01
    120e:	7a 83       	std	Y+2, r23	; 0x02
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	f8 01       	movw	r30, r16
    1216:	86 85       	ldd	r24, Z+14	; 0x0e
    1218:	97 85       	ldd	r25, Z+15	; 0x0f
    121a:	a0 89       	ldd	r26, Z+16	; 0x10
    121c:	b1 89       	ldd	r27, Z+17	; 0x11
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	a1 1d       	adc	r26, r1
    1222:	b1 1d       	adc	r27, r1
    1224:	86 87       	std	Z+14, r24	; 0x0e
    1226:	97 87       	std	Z+15, r25	; 0x0f
    1228:	a0 8b       	std	Z+16, r26	; 0x10
    122a:	b1 8b       	std	Z+17, r27	; 0x11
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskDelayUntil>
    123c:	eb cf       	rjmp	.-42     	; 0x1214 <_ZN18task_motor_command3runEv+0x1a>

0000123e <_ZN17task_limit_switch3runEv>:
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	00 d0       	rcall	.+0      	; 0x1244 <_ZN17task_limit_switch3runEv+0x6>
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8c 01       	movw	r16, r24
    124c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
    1250:	69 83       	std	Y+1, r22	; 0x01
    1252:	7a 83       	std	Y+2, r23	; 0x02
    1254:	8b 83       	std	Y+3, r24	; 0x03
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	e0 e6       	ldi	r30, 0x60	; 96
    125a:	f6 e0       	ldi	r31, 0x06	; 6
    125c:	90 81       	ld	r25, Z
    125e:	d8 01       	movw	r26, r16
    1260:	52 96       	adiw	r26, 0x12	; 18
    1262:	8c 91       	ld	r24, X
    1264:	52 97       	sbiw	r26, 0x12	; 18
    1266:	89 2b       	or	r24, r25
    1268:	80 83       	st	Z, r24
    126a:	94 81       	ldd	r25, Z+4	; 0x04
    126c:	52 96       	adiw	r26, 0x12	; 18
    126e:	8c 91       	ld	r24, X
    1270:	52 97       	sbiw	r26, 0x12	; 18
    1272:	89 2b       	or	r24, r25
    1274:	84 83       	std	Z+4, r24	; 0x04
    1276:	52 96       	adiw	r26, 0x12	; 18
    1278:	8c 91       	ld	r24, X
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	21 f4       	brne	.+8      	; 0x1286 <_ZN17task_limit_switch3runEv+0x48>
    127e:	88 e1       	ldi	r24, 0x18	; 24
    1280:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <_ZN17task_limit_switch3runEv+0x52>
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	19 f4       	brne	.+6      	; 0x1290 <_ZN17task_limit_switch3runEv+0x52>
    128a:	88 e1       	ldi	r24, 0x18	; 24
    128c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    1290:	0f 2e       	mov	r0, r31
    1292:	f8 e6       	ldi	r31, 0x68	; 104
    1294:	ef 2e       	mov	r14, r31
    1296:	f6 e0       	ldi	r31, 0x06	; 6
    1298:	ff 2e       	mov	r15, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	dd 24       	eor	r13, r13
    129e:	d3 94       	inc	r13
    12a0:	f7 01       	movw	r30, r14
    12a2:	80 81       	ld	r24, Z
    12a4:	80 fd       	sbrc	r24, 0
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <_ZN17task_limit_switch3runEv+0x78>
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	0f 92       	push	r0
    12ae:	d0 b8       	out	0x00, r13	; 0
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <_ZN17task_limit_switch3runEv+0x84>
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	0f 92       	push	r0
    12bc:	10 b8       	out	0x00, r1	; 0
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	d7 01       	movw	r26, r14
    12c4:	8c 91       	ld	r24, X
    12c6:	82 fd       	sbrc	r24, 2
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <_ZN17task_limit_switch3runEv+0x9a>
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	0f 92       	push	r0
    12d0:	d0 b8       	out	0x00, r13	; 0
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <_ZN17task_limit_switch3runEv+0xa6>
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	0f 92       	push	r0
    12de:	10 b8       	out	0x00, r1	; 0
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	f8 01       	movw	r30, r16
    12e6:	86 85       	ldd	r24, Z+14	; 0x0e
    12e8:	97 85       	ldd	r25, Z+15	; 0x0f
    12ea:	a0 89       	ldd	r26, Z+16	; 0x10
    12ec:	b1 89       	ldd	r27, Z+17	; 0x11
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	a1 1d       	adc	r26, r1
    12f2:	b1 1d       	adc	r27, r1
    12f4:	86 87       	std	Z+14, r24	; 0x0e
    12f6:	97 87       	std	Z+15, r25	; 0x0f
    12f8:	a0 8b       	std	Z+16, r26	; 0x10
    12fa:	b1 8b       	std	Z+17, r27	; 0x11
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskDelayUntil>
    130c:	c9 cf       	rjmp	.-110    	; 0x12a0 <_ZN17task_limit_switch3runEv+0x62>

0000130e <_ZN18task_motor_encoder3runEv>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	00 d0       	rcall	.+0      	; 0x1314 <_ZN18task_motor_encoder3runEv+0x6>
    1314:	1f 92       	push	r1
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	7c 01       	movw	r14, r24
    131c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <xTaskGetTickCount>
    1320:	69 83       	std	Y+1, r22	; 0x01
    1322:	7a 83       	std	Y+2, r23	; 0x02
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	e0 e8       	ldi	r30, 0x80	; 128
    132a:	f6 e0       	ldi	r31, 0x06	; 6
    132c:	8c e0       	ldi	r24, 0x0C	; 12
    132e:	82 83       	std	Z+2, r24	; 0x02
    1330:	82 89       	ldd	r24, Z+18	; 0x12
    1332:	83 60       	ori	r24, 0x03	; 3
    1334:	82 8b       	std	Z+18, r24	; 0x12
    1336:	83 89       	ldd	r24, Z+19	; 0x13
    1338:	83 60       	ori	r24, 0x03	; 3
    133a:	83 8b       	std	Z+19, r24	; 0x13
    133c:	e0 e8       	ldi	r30, 0x80	; 128
    133e:	f1 e0       	ldi	r31, 0x01	; 1
    1340:	82 e7       	ldi	r24, 0x72	; 114
    1342:	80 83       	st	Z, r24
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	80 87       	std	Z+8, r24	; 0x08
    1348:	e0 e0       	ldi	r30, 0x00	; 0
    134a:	f9 e0       	ldi	r31, 0x09	; 9
    134c:	88 e6       	ldi	r24, 0x68	; 104
    134e:	83 83       	std	Z+3, r24	; 0x03
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	86 a3       	std	Z+38, r24	; 0x26
    1356:	97 a3       	std	Z+39, r25	; 0x27
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 83       	st	Z, r24
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	0f 92       	push	r0
    1362:	10 b8       	out	0x00, r1	; 0
    1364:	11 b8       	out	0x01, r1	; 1
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 2e       	mov	r0, r31
    136c:	81 2c       	mov	r8, r1
    136e:	f9 e0       	ldi	r31, 0x09	; 9
    1370:	9f 2e       	mov	r9, r31
    1372:	f0 2d       	mov	r31, r0
    1374:	0f 2e       	mov	r0, r31
    1376:	f4 e6       	ldi	r31, 0x64	; 100
    1378:	4f 2e       	mov	r4, r31
    137a:	51 2c       	mov	r5, r1
    137c:	61 2c       	mov	r6, r1
    137e:	71 2c       	mov	r7, r1
    1380:	f0 2d       	mov	r31, r0
    1382:	0f 2e       	mov	r0, r31
    1384:	f4 e6       	ldi	r31, 0x64	; 100
    1386:	2f 2e       	mov	r2, r31
    1388:	31 2c       	mov	r3, r1
    138a:	f0 2d       	mov	r31, r0
    138c:	f4 01       	movw	r30, r8
    138e:	00 a1       	ldd	r16, Z+32	; 0x20
    1390:	11 a1       	ldd	r17, Z+33	; 0x21
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	0f 92       	push	r0
    1398:	a0 b0       	in	r10, 0x00	; 0
    139a:	b1 b0       	in	r11, 0x01	; 1
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	0f 92       	push	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	0f 92       	push	r0
    13b0:	c8 01       	movw	r24, r16
    13b2:	8c 19       	sub	r24, r12
    13b4:	9d 09       	sbc	r25, r13
    13b6:	80 b9       	out	0x00, r24	; 0
    13b8:	91 b9       	out	0x01, r25	; 1
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	f7 01       	movw	r30, r14
    13c0:	66 85       	ldd	r22, Z+14	; 0x0e
    13c2:	77 85       	ldd	r23, Z+15	; 0x0f
    13c4:	80 89       	ldd	r24, Z+16	; 0x10
    13c6:	91 89       	ldd	r25, Z+17	; 0x11
    13c8:	a3 01       	movw	r20, r6
    13ca:	92 01       	movw	r18, r4
    13cc:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
    13d0:	67 2b       	or	r22, r23
    13d2:	68 2b       	or	r22, r24
    13d4:	69 2b       	or	r22, r25
    13d6:	79 f5       	brne	.+94     	; 0x1436 <_ZN18task_motor_encoder3runEv+0x128>
    13d8:	f7 01       	movw	r30, r14
    13da:	c6 80       	ldd	r12, Z+6	; 0x06
    13dc:	d7 80       	ldd	r13, Z+7	; 0x07
    13de:	6e e6       	ldi	r22, 0x6E	; 110
    13e0:	70 e2       	ldi	r23, 0x20	; 32
    13e2:	c6 01       	movw	r24, r12
    13e4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    13e8:	b8 01       	movw	r22, r16
    13ea:	c6 01       	movw	r24, r12
    13ec:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN8emstreamlsEi>
    13f0:	66 e0       	ldi	r22, 0x06	; 6
    13f2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    13f6:	f7 01       	movw	r30, r14
    13f8:	c6 80       	ldd	r12, Z+6	; 0x06
    13fa:	d7 80       	ldd	r13, Z+7	; 0x07
    13fc:	6f e7       	ldi	r22, 0x7F	; 127
    13fe:	70 e2       	ldi	r23, 0x20	; 32
    1400:	c6 01       	movw	r24, r12
    1402:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1406:	c8 01       	movw	r24, r16
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	80 0f       	add	r24, r16
    140e:	91 1f       	adc	r25, r17
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	b1 01       	movw	r22, r2
    1416:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divmodhi4>
    141a:	6a 19       	sub	r22, r10
    141c:	7b 09       	sbc	r23, r11
    141e:	c6 01       	movw	r24, r12
    1420:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN8emstreamlsEi>
    1424:	6c 01       	movw	r12, r24
    1426:	60 e9       	ldi	r22, 0x90	; 144
    1428:	70 e2       	ldi	r23, 0x20	; 32
    142a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    142e:	66 e0       	ldi	r22, 0x06	; 6
    1430:	c6 01       	movw	r24, r12
    1432:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1436:	f7 01       	movw	r30, r14
    1438:	86 85       	ldd	r24, Z+14	; 0x0e
    143a:	97 85       	ldd	r25, Z+15	; 0x0f
    143c:	a0 89       	ldd	r26, Z+16	; 0x10
    143e:	b1 89       	ldd	r27, Z+17	; 0x11
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	a1 1d       	adc	r26, r1
    1444:	b1 1d       	adc	r27, r1
    1446:	86 87       	std	Z+14, r24	; 0x0e
    1448:	97 87       	std	Z+15, r25	; 0x0f
    144a:	a0 8b       	std	Z+16, r26	; 0x10
    144c:	b1 8b       	std	Z+17, r27	; 0x11
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 0b 19 	call	0x3216	; 0x3216 <vTaskDelayUntil>
    145e:	68 01       	movw	r12, r16
    1460:	95 cf       	rjmp	.-214    	; 0x138c <_ZN18task_motor_encoder3runEv+0x7e>

00001462 <_ZN8frt_taskC2EPKchjP8emstream>:
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	2a 97       	sbiw	r28, 0x0a	; 10
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	4c 01       	movw	r8, r24
    148e:	29 01       	movw	r4, r18
    1490:	38 01       	movw	r6, r16
    1492:	8a e0       	ldi	r24, 0x0A	; 10
    1494:	90 e2       	ldi	r25, 0x20	; 32
    1496:	f4 01       	movw	r30, r8
    1498:	80 83       	st	Z, r24
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	fb 01       	movw	r30, r22
    149e:	80 81       	ld	r24, Z
    14a0:	88 23       	and	r24, r24
    14a2:	69 f0       	breq	.+26     	; 0x14be <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    14a4:	de 01       	movw	r26, r28
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	31 96       	adiw	r30, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    14ae:	99 30       	cpi	r25, 0x09	; 9
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	8d 93       	st	X+, r24
    14b6:	81 91       	ld	r24, Z+
    14b8:	81 11       	cpse	r24, r1
    14ba:	f9 cf       	rjmp	.-14     	; 0x14ae <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	e1 e0       	ldi	r30, 0x01	; 1
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	ec 0f       	add	r30, r28
    14c6:	fd 1f       	adc	r31, r29
    14c8:	e9 0f       	add	r30, r25
    14ca:	f1 1d       	adc	r31, r1
    14cc:	10 82       	st	Z, r1
    14ce:	74 01       	movw	r14, r8
    14d0:	f2 e0       	ldi	r31, 0x02	; 2
    14d2:	ef 0e       	add	r14, r31
    14d4:	f1 1c       	adc	r15, r1
    14d6:	a1 2c       	mov	r10, r1
    14d8:	b1 2c       	mov	r11, r1
    14da:	c1 2c       	mov	r12, r1
    14dc:	d1 2c       	mov	r13, r1
    14de:	04 2f       	mov	r16, r20
    14e0:	94 01       	movw	r18, r8
    14e2:	a2 01       	movw	r20, r4
    14e4:	be 01       	movw	r22, r28
    14e6:	6f 5f       	subi	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8e e1       	ldi	r24, 0x1E	; 30
    14ec:	96 e0       	ldi	r25, 0x06	; 6
    14ee:	0e 94 24 16 	call	0x2c48	; 0x2c48 <xTaskGenericCreate>
    14f2:	f4 01       	movw	r30, r8
    14f4:	66 82       	std	Z+6, r6	; 0x06
    14f6:	77 82       	std	Z+7, r7	; 0x07
    14f8:	40 86       	std	Z+8, r4	; 0x08
    14fa:	51 86       	std	Z+9, r5	; 0x09
    14fc:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <last_created_task_pointer>
    1500:	30 91 f1 20 	lds	r19, 0x20F1	; 0x8020f1 <last_created_task_pointer+0x1>
    1504:	24 83       	std	Z+4, r18	; 0x04
    1506:	35 83       	std	Z+5, r19	; 0x05
    1508:	80 92 f0 20 	sts	0x20F0, r8	; 0x8020f0 <last_created_task_pointer>
    150c:	90 92 f1 20 	sts	0x20F1, r9	; 0x8020f1 <last_created_task_pointer+0x1>
    1510:	14 86       	std	Z+12, r1	; 0x0c
    1512:	15 86       	std	Z+13, r1	; 0x0d
    1514:	40 90 8a 31 	lds	r4, 0x318A	; 0x80318a <portStackTopForTask>
    1518:	50 90 8b 31 	lds	r5, 0x318B	; 0x80318b <portStackTopForTask+0x1>
    151c:	ff ef       	ldi	r31, 0xFF	; 255
    151e:	4f 1a       	sub	r4, r31
    1520:	5f 0a       	sbc	r5, r31
    1522:	40 92 8a 31 	sts	0x318A, r4	; 0x80318a <portStackTopForTask>
    1526:	50 92 8b 31 	sts	0x318B, r5	; 0x80318b <portStackTopForTask+0x1>
    152a:	f4 01       	movw	r30, r8
    152c:	42 86       	std	Z+10, r4	; 0x0a
    152e:	53 86       	std	Z+11, r5	; 0x0b
    1530:	16 86       	std	Z+14, r1	; 0x0e
    1532:	17 86       	std	Z+15, r1	; 0x0f
    1534:	10 8a       	std	Z+16, r1	; 0x10
    1536:	11 8a       	std	Z+17, r1	; 0x11
    1538:	61 14       	cp	r6, r1
    153a:	71 04       	cpc	r7, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    153e:	44 c0       	rjmp	.+136    	; 0x15c8 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	79 f5       	brne	.+94     	; 0x15a2 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1544:	6a e0       	ldi	r22, 0x0A	; 10
    1546:	c3 01       	movw	r24, r6
    1548:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    154c:	7c 01       	movw	r14, r24
    154e:	6e ef       	ldi	r22, 0xFE	; 254
    1550:	74 e0       	ldi	r23, 0x04	; 4
    1552:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1556:	be 01       	movw	r22, r28
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	c7 01       	movw	r24, r14
    155e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1562:	6a e0       	ldi	r22, 0x0A	; 10
    1564:	c7 01       	movw	r24, r14
    1566:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    156a:	7c 01       	movw	r14, r24
    156c:	65 ef       	ldi	r22, 0xF5	; 245
    156e:	74 e0       	ldi	r23, 0x04	; 4
    1570:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1574:	6a e0       	ldi	r22, 0x0A	; 10
    1576:	c7 01       	movw	r24, r14
    1578:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    157c:	7c 01       	movw	r14, r24
    157e:	67 ee       	ldi	r22, 0xE7	; 231
    1580:	74 e0       	ldi	r23, 0x04	; 4
    1582:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	c7 01       	movw	r24, r14
    158a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    158e:	b2 01       	movw	r22, r4
    1590:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    15a0:	13 c0       	rjmp	.+38     	; 0x15c8 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    15a2:	6a e0       	ldi	r22, 0x0A	; 10
    15a4:	c3 01       	movw	r24, r6
    15a6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    15aa:	4c 01       	movw	r8, r24
    15ac:	62 ed       	ldi	r22, 0xD2	; 210
    15ae:	74 e0       	ldi	r23, 0x04	; 4
    15b0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    15b4:	be 01       	movw	r22, r28
    15b6:	6f 5f       	subi	r22, 0xFF	; 255
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	c4 01       	movw	r24, r8
    15bc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    15c0:	66 e0       	ldi	r22, 0x06	; 6
    15c2:	c4 01       	movw	r24, r8
    15c4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    15c8:	2a 96       	adiw	r28, 0x0a	; 10
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	7f 90       	pop	r7
    15e8:	6f 90       	pop	r6
    15ea:	5f 90       	pop	r5
    15ec:	4f 90       	pop	r4
    15ee:	08 95       	ret

000015f0 <_ZN5rs23212clear_screenEv>:
    15f0:	dc 01       	movw	r26, r24
    15f2:	ed 91       	ld	r30, X+
    15f4:	fc 91       	ld	r31, X
    15f6:	02 80       	ldd	r0, Z+2	; 0x02
    15f8:	f3 81       	ldd	r31, Z+3	; 0x03
    15fa:	e0 2d       	mov	r30, r0
    15fc:	6c e0       	ldi	r22, 0x0C	; 12
    15fe:	19 95       	eicall
    1600:	08 95       	ret

00001602 <_ZN5rs23214check_for_charEv>:
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
    1608:	a9 8d       	ldd	r26, Y+25	; 0x19
    160a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    160c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    160e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	4d 91       	ld	r20, X+
    1614:	5c 91       	ld	r21, X
    1616:	20 81       	ld	r18, Z
    1618:	31 81       	ldd	r19, Z+1	; 0x01
    161a:	42 17       	cp	r20, r18
    161c:	53 07       	cpc	r21, r19
    161e:	09 f4       	brne	.+2      	; 0x1622 <_ZN5rs23214check_for_charEv+0x20>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <_ZN5rs2327getcharEv>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	fc 01       	movw	r30, r24
    162e:	c1 8d       	ldd	r28, Z+25	; 0x19
    1630:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1632:	28 81       	ld	r18, Y
    1634:	39 81       	ldd	r19, Y+1	; 0x01
    1636:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1638:	b4 8d       	ldd	r27, Z+28	; 0x1c
    163a:	4d 91       	ld	r20, X+
    163c:	5c 91       	ld	r21, X
    163e:	24 17       	cp	r18, r20
    1640:	35 07       	cpc	r19, r21
    1642:	e9 f3       	breq	.-6      	; 0x163e <_ZN5rs2327getcharEv+0x16>
    1644:	a7 89       	ldd	r26, Z+23	; 0x17
    1646:	b0 8d       	ldd	r27, Z+24	; 0x18
    1648:	0d 90       	ld	r0, X+
    164a:	bc 91       	ld	r27, X
    164c:	a0 2d       	mov	r26, r0
    164e:	a2 0f       	add	r26, r18
    1650:	b3 1f       	adc	r27, r19
    1652:	8c 91       	ld	r24, X
    1654:	2f 5f       	subi	r18, 0xFF	; 255
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	28 83       	st	Y, r18
    165a:	39 83       	std	Y+1, r19	; 0x01
    165c:	24 36       	cpi	r18, 0x64	; 100
    165e:	31 05       	cpc	r19, r1
    1660:	28 f0       	brcs	.+10     	; 0x166c <_ZN5rs2327getcharEv+0x44>
    1662:	01 8c       	ldd	r0, Z+25	; 0x19
    1664:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1666:	e0 2d       	mov	r30, r0
    1668:	10 82       	st	Z, r1
    166a:	11 82       	std	Z+1, r1	; 0x01
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <_ZN5rs2327putcharEc>:
    1674:	dc 01       	movw	r26, r24
    1676:	50 96       	adiw	r26, 0x10	; 16
    1678:	ed 91       	ld	r30, X+
    167a:	fc 91       	ld	r31, X
    167c:	51 97       	sbiw	r26, 0x11	; 17
    167e:	80 81       	ld	r24, Z
    1680:	54 96       	adiw	r26, 0x14	; 20
    1682:	4c 91       	ld	r20, X
    1684:	54 97       	sbiw	r26, 0x14	; 20
    1686:	84 23       	and	r24, r20
    1688:	29 f0       	breq	.+10     	; 0x1694 <_ZN5rs2327putcharEc+0x20>
    168a:	09 c0       	rjmp	.+18     	; 0x169e <_ZN5rs2327putcharEc+0x2a>
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	31 09       	sbc	r19, r1
    1690:	19 f4       	brne	.+6      	; 0x1698 <_ZN5rs2327putcharEc+0x24>
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <_ZN5rs2327putcharEc+0x44>
    1694:	21 e2       	ldi	r18, 0x21	; 33
    1696:	3e e4       	ldi	r19, 0x4E	; 78
    1698:	90 81       	ld	r25, Z
    169a:	94 23       	and	r25, r20
    169c:	b9 f3       	breq	.-18     	; 0x168c <_ZN5rs2327putcharEc+0x18>
    169e:	90 81       	ld	r25, Z
    16a0:	56 96       	adiw	r26, 0x16	; 22
    16a2:	8c 91       	ld	r24, X
    16a4:	56 97       	sbiw	r26, 0x16	; 22
    16a6:	89 2b       	or	r24, r25
    16a8:	80 83       	st	Z, r24
    16aa:	1e 96       	adiw	r26, 0x0e	; 14
    16ac:	ed 91       	ld	r30, X+
    16ae:	fc 91       	ld	r31, X
    16b0:	1f 97       	sbiw	r26, 0x0f	; 15
    16b2:	60 83       	st	Z, r22
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	08 95       	ret

000016bc <_GLOBAL__sub_I_counter>:
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	c2 ef       	ldi	r28, 0xF2	; 242
    16c2:	d0 e2       	ldi	r29, 0x20	; 32
    16c4:	8a e0       	ldi	r24, 0x0A	; 10
    16c6:	8a 83       	std	Y+2, r24	; 0x02
    16c8:	1b 82       	std	Y+3, r1	; 0x03
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	1c 82       	std	Y+4, r1	; 0x04
    16d0:	1e 82       	std	Y+6, r1	; 0x06
    16d2:	1f 82       	std	Y+7, r1	; 0x07
    16d4:	82 e6       	ldi	r24, 0x62	; 98
    16d6:	90 e2       	ldi	r25, 0x20	; 32
    16d8:	88 83       	st	Y, r24
    16da:	99 83       	std	Y+1, r25	; 0x01
    16dc:	1e 86       	std	Y+14, r1	; 0x0e
    16de:	1f 86       	std	Y+15, r1	; 0x0f
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	0e 94 39 14 	call	0x2872	; 0x2872 <xQueueGenericCreate>
    16ea:	88 87       	std	Y+8, r24	; 0x08
    16ec:	99 87       	std	Y+9, r25	; 0x09
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e0       	ldi	r26, 0x00	; 0
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	8a 87       	std	Y+10, r24	; 0x0a
    16f8:	9b 87       	std	Y+11, r25	; 0x0b
    16fa:	ac 87       	std	Y+12, r26	; 0x0c
    16fc:	bd 87       	std	Y+13, r27	; 0x0d
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <__vector_58>:
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	08 b6       	in	r0, 0x38	; 56
    1710:	0f 92       	push	r0
    1712:	18 be       	out	0x38, r1	; 56
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    172a:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <rcvE0_buffer>
    172e:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <rcvE0_buffer+0x1>
    1732:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <rcvE0_write_index>
    1736:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <rcvE0_write_index+0x1>
    173a:	e8 0f       	add	r30, r24
    173c:	f9 1f       	adc	r31, r25
    173e:	20 83       	st	Z, r18
    1740:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <rcvE0_write_index>
    1744:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <rcvE0_write_index+0x1>
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	84 36       	cpi	r24, 0x64	; 100
    174c:	91 05       	cpc	r25, r1
    174e:	60 f4       	brcc	.+24     	; 0x1768 <__vector_58+0x64>
    1750:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <rcvE0_write_index>
    1754:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <rcvE0_write_index+0x1>
    1758:	20 91 04 21 	lds	r18, 0x2104	; 0x802104 <rcvE0_read_index>
    175c:	30 91 05 21 	lds	r19, 0x2105	; 0x802105 <rcvE0_read_index+0x1>
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	f1 f4       	brne	.+60     	; 0x17a2 <__vector_58+0x9e>
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <__vector_58+0x7c>
    1768:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <rcvE0_write_index>
    176c:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <rcvE0_write_index+0x1>
    1770:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <rcvE0_read_index>
    1774:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <rcvE0_read_index+0x1>
    1778:	18 16       	cp	r1, r24
    177a:	19 06       	cpc	r1, r25
    177c:	91 f4       	brne	.+36     	; 0x17a2 <__vector_58+0x9e>
    177e:	0e c0       	rjmp	.+28     	; 0x179c <__vector_58+0x98>
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	84 36       	cpi	r24, 0x64	; 100
    1784:	91 05       	cpc	r25, r1
    1786:	28 f4       	brcc	.+10     	; 0x1792 <__vector_58+0x8e>
    1788:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <rcvE0_read_index>
    178c:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <rcvE0_read_index+0x1>
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <__vector_58+0x9e>
    1792:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <rcvE0_read_index>
    1796:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <rcvE0_read_index+0x1>
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <__vector_58+0x9e>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	f3 cf       	rjmp	.-26     	; 0x1788 <__vector_58+0x84>
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	3f 91       	pop	r19
    17ac:	2f 91       	pop	r18
    17ae:	0f 90       	pop	r0
    17b0:	0b be       	out	0x3b, r0	; 59
    17b2:	0f 90       	pop	r0
    17b4:	08 be       	out	0x38, r0	; 56
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	0f 90       	pop	r0
    17bc:	1f 90       	pop	r1
    17be:	18 95       	reti

000017c0 <__vector_91>:
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	08 b6       	in	r0, 0x38	; 56
    17cc:	0f 92       	push	r0
    17ce:	18 be       	out	0x38, r1	; 56
    17d0:	0b b6       	in	r0, 0x3b	; 59
    17d2:	0f 92       	push	r0
    17d4:	1b be       	out	0x3b, r1	; 59
    17d6:	2f 93       	push	r18
    17d8:	3f 93       	push	r19
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    17e6:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <rcvD1_buffer>
    17ea:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <rcvD1_buffer+0x1>
    17ee:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvD1_write_index>
    17f2:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvD1_write_index+0x1>
    17f6:	e8 0f       	add	r30, r24
    17f8:	f9 1f       	adc	r31, r25
    17fa:	20 83       	st	Z, r18
    17fc:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvD1_write_index>
    1800:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvD1_write_index+0x1>
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	84 36       	cpi	r24, 0x64	; 100
    1808:	91 05       	cpc	r25, r1
    180a:	60 f4       	brcc	.+24     	; 0x1824 <__vector_91+0x64>
    180c:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <rcvD1_write_index>
    1810:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <rcvD1_write_index+0x1>
    1814:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <rcvD1_read_index>
    1818:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <rcvD1_read_index+0x1>
    181c:	82 17       	cp	r24, r18
    181e:	93 07       	cpc	r25, r19
    1820:	f1 f4       	brne	.+60     	; 0x185e <__vector_91+0x9e>
    1822:	0c c0       	rjmp	.+24     	; 0x183c <__vector_91+0x7c>
    1824:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <rcvD1_write_index>
    1828:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <rcvD1_write_index+0x1>
    182c:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvD1_read_index>
    1830:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvD1_read_index+0x1>
    1834:	18 16       	cp	r1, r24
    1836:	19 06       	cpc	r1, r25
    1838:	91 f4       	brne	.+36     	; 0x185e <__vector_91+0x9e>
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <__vector_91+0x98>
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	84 36       	cpi	r24, 0x64	; 100
    1840:	91 05       	cpc	r25, r1
    1842:	28 f4       	brcc	.+10     	; 0x184e <__vector_91+0x8e>
    1844:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvD1_read_index>
    1848:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvD1_read_index+0x1>
    184c:	08 c0       	rjmp	.+16     	; 0x185e <__vector_91+0x9e>
    184e:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvD1_read_index>
    1852:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvD1_read_index+0x1>
    1856:	03 c0       	rjmp	.+6      	; 0x185e <__vector_91+0x9e>
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	f3 cf       	rjmp	.-26     	; 0x1844 <__vector_91+0x84>
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0b be       	out	0x3b, r0	; 59
    186e:	0f 90       	pop	r0
    1870:	08 be       	out	0x38, r0	; 56
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti

0000187c <__vector_88>:
    187c:	1f 92       	push	r1
    187e:	0f 92       	push	r0
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	0f 92       	push	r0
    1884:	11 24       	eor	r1, r1
    1886:	08 b6       	in	r0, 0x38	; 56
    1888:	0f 92       	push	r0
    188a:	18 be       	out	0x38, r1	; 56
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	1b be       	out	0x3b, r1	; 59
    1892:	2f 93       	push	r18
    1894:	3f 93       	push	r19
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    18a2:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <rcvD0_buffer>
    18a6:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <rcvD0_buffer+0x1>
    18aa:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC0_write_index>
    18ae:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC0_write_index+0x1>
    18b2:	e8 0f       	add	r30, r24
    18b4:	f9 1f       	adc	r31, r25
    18b6:	20 83       	st	Z, r18
    18b8:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD0_write_index>
    18bc:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD0_write_index+0x1>
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	84 36       	cpi	r24, 0x64	; 100
    18c4:	91 05       	cpc	r25, r1
    18c6:	60 f4       	brcc	.+24     	; 0x18e0 <__vector_88+0x64>
    18c8:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <rcvD0_write_index>
    18cc:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <rcvD0_write_index+0x1>
    18d0:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <rcvD0_read_index>
    18d4:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <rcvD0_read_index+0x1>
    18d8:	82 17       	cp	r24, r18
    18da:	93 07       	cpc	r25, r19
    18dc:	f1 f4       	brne	.+60     	; 0x191a <__vector_88+0x9e>
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <__vector_88+0x7c>
    18e0:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <rcvD0_write_index>
    18e4:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <rcvD0_write_index+0x1>
    18e8:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD0_read_index>
    18ec:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD0_read_index+0x1>
    18f0:	18 16       	cp	r1, r24
    18f2:	19 06       	cpc	r1, r25
    18f4:	91 f4       	brne	.+36     	; 0x191a <__vector_88+0x9e>
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <__vector_88+0x98>
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	84 36       	cpi	r24, 0x64	; 100
    18fc:	91 05       	cpc	r25, r1
    18fe:	28 f4       	brcc	.+10     	; 0x190a <__vector_88+0x8e>
    1900:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvD0_read_index>
    1904:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvD0_read_index+0x1>
    1908:	08 c0       	rjmp	.+16     	; 0x191a <__vector_88+0x9e>
    190a:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvD0_read_index>
    190e:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvD0_read_index+0x1>
    1912:	03 c0       	rjmp	.+6      	; 0x191a <__vector_88+0x9e>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <__vector_88+0x84>
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	08 be       	out	0x38, r0	; 56
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__vector_28>:
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	08 b6       	in	r0, 0x38	; 56
    1944:	0f 92       	push	r0
    1946:	18 be       	out	0x38, r1	; 56
    1948:	0b b6       	in	r0, 0x3b	; 59
    194a:	0f 92       	push	r0
    194c:	1b be       	out	0x3b, r1	; 59
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    195e:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <rcvC1_buffer>
    1962:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <rcvC1_buffer+0x1>
    1966:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvC1_write_index>
    196a:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvC1_write_index+0x1>
    196e:	e8 0f       	add	r30, r24
    1970:	f9 1f       	adc	r31, r25
    1972:	20 83       	st	Z, r18
    1974:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvC1_write_index>
    1978:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvC1_write_index+0x1>
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	84 36       	cpi	r24, 0x64	; 100
    1980:	91 05       	cpc	r25, r1
    1982:	60 f4       	brcc	.+24     	; 0x199c <__vector_28+0x64>
    1984:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rcvC1_write_index>
    1988:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rcvC1_write_index+0x1>
    198c:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <rcvC1_read_index>
    1990:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <rcvC1_read_index+0x1>
    1994:	82 17       	cp	r24, r18
    1996:	93 07       	cpc	r25, r19
    1998:	f1 f4       	brne	.+60     	; 0x19d6 <__vector_28+0x9e>
    199a:	0c c0       	rjmp	.+24     	; 0x19b4 <__vector_28+0x7c>
    199c:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <rcvC1_write_index>
    19a0:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <rcvC1_write_index+0x1>
    19a4:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvC1_read_index>
    19a8:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvC1_read_index+0x1>
    19ac:	18 16       	cp	r1, r24
    19ae:	19 06       	cpc	r1, r25
    19b0:	91 f4       	brne	.+36     	; 0x19d6 <__vector_28+0x9e>
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <__vector_28+0x98>
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	84 36       	cpi	r24, 0x64	; 100
    19b8:	91 05       	cpc	r25, r1
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <__vector_28+0x8e>
    19bc:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvC1_read_index>
    19c0:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvC1_read_index+0x1>
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <__vector_28+0x9e>
    19c6:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvC1_read_index>
    19ca:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvC1_read_index+0x1>
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <__vector_28+0x9e>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	f3 cf       	rjmp	.-26     	; 0x19bc <__vector_28+0x84>
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0b be       	out	0x3b, r0	; 59
    19e6:	0f 90       	pop	r0
    19e8:	08 be       	out	0x38, r0	; 56
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <__vector_25>:
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	08 b6       	in	r0, 0x38	; 56
    1a00:	0f 92       	push	r0
    1a02:	18 be       	out	0x38, r1	; 56
    1a04:	0b b6       	in	r0, 0x3b	; 59
    1a06:	0f 92       	push	r0
    1a08:	1b be       	out	0x3b, r1	; 59
    1a0a:	2f 93       	push	r18
    1a0c:	3f 93       	push	r19
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1a1a:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <rcvC0_buffer>
    1a1e:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <rcvC0_buffer+0x1>
    1a22:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC0_write_index>
    1a26:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC0_write_index+0x1>
    1a2a:	e8 0f       	add	r30, r24
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	20 83       	st	Z, r18
    1a30:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC0_write_index>
    1a34:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC0_write_index+0x1>
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	84 36       	cpi	r24, 0x64	; 100
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	60 f4       	brcc	.+24     	; 0x1a58 <__vector_25+0x64>
    1a40:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvC0_write_index>
    1a44:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvC0_write_index+0x1>
    1a48:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <rcvC0_read_index>
    1a4c:	30 91 1d 21 	lds	r19, 0x211D	; 0x80211d <rcvC0_read_index+0x1>
    1a50:	82 17       	cp	r24, r18
    1a52:	93 07       	cpc	r25, r19
    1a54:	f1 f4       	brne	.+60     	; 0x1a92 <__vector_25+0x9e>
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <__vector_25+0x7c>
    1a58:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <rcvC0_write_index>
    1a5c:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <rcvC0_write_index+0x1>
    1a60:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC0_read_index>
    1a64:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC0_read_index+0x1>
    1a68:	18 16       	cp	r1, r24
    1a6a:	19 06       	cpc	r1, r25
    1a6c:	91 f4       	brne	.+36     	; 0x1a92 <__vector_25+0x9e>
    1a6e:	0e c0       	rjmp	.+28     	; 0x1a8c <__vector_25+0x98>
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	84 36       	cpi	r24, 0x64	; 100
    1a74:	91 05       	cpc	r25, r1
    1a76:	28 f4       	brcc	.+10     	; 0x1a82 <__vector_25+0x8e>
    1a78:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC0_read_index>
    1a7c:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC0_read_index+0x1>
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <__vector_25+0x9e>
    1a82:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvC0_read_index>
    1a86:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvC0_read_index+0x1>
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <__vector_25+0x9e>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	f3 cf       	rjmp	.-26     	; 0x1a78 <__vector_25+0x84>
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	3f 91       	pop	r19
    1a9c:	2f 91       	pop	r18
    1a9e:	0f 90       	pop	r0
    1aa0:	0b be       	out	0x3b, r0	; 59
    1aa2:	0f 90       	pop	r0
    1aa4:	08 be       	out	0x38, r0	; 56
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <_ZN8emstreamlsE15ser_manipulator>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	86 2f       	mov	r24, r22
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	8b 30       	cpi	r24, 0x0B	; 11
    1abc:	91 05       	cpc	r25, r1
    1abe:	d8 f5       	brcc	.+118    	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	88 27       	eor	r24, r24
    1ac4:	e2 50       	subi	r30, 0x02	; 2
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__tablejump2__>
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	31 c0       	rjmp	.+98     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ad4:	88 e0       	ldi	r24, 0x08	; 8
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	2e c0       	rjmp	.+92     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ada:	8a e0       	ldi	r24, 0x0A	; 10
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	2b c0       	rjmp	.+86     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ae0:	80 e1       	ldi	r24, 0x10	; 16
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	28 c0       	rjmp	.+80     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	25 c0       	rjmp	.+74     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1aec:	1b 82       	std	Y+3, r1	; 0x03
    1aee:	23 c0       	rjmp	.+70     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1af0:	e8 81       	ld	r30, Y
    1af2:	f9 81       	ldd	r31, Y+1	; 0x01
    1af4:	02 80       	ldd	r0, Z+2	; 0x02
    1af6:	f3 81       	ldd	r31, Z+3	; 0x03
    1af8:	e0 2d       	mov	r30, r0
    1afa:	6d e0       	ldi	r22, 0x0D	; 13
    1afc:	ce 01       	movw	r24, r28
    1afe:	19 95       	eicall
    1b00:	e8 81       	ld	r30, Y
    1b02:	f9 81       	ldd	r31, Y+1	; 0x01
    1b04:	02 80       	ldd	r0, Z+2	; 0x02
    1b06:	f3 81       	ldd	r31, Z+3	; 0x03
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	6a e0       	ldi	r22, 0x0A	; 10
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	19 95       	eicall
    1b10:	12 c0       	rjmp	.+36     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b12:	e8 81       	ld	r30, Y
    1b14:	f9 81       	ldd	r31, Y+1	; 0x01
    1b16:	02 84       	ldd	r0, Z+10	; 0x0a
    1b18:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	19 95       	eicall
    1b20:	0a c0       	rjmp	.+20     	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b22:	e8 81       	ld	r30, Y
    1b24:	f9 81       	ldd	r31, Y+1	; 0x01
    1b26:	00 84       	ldd	r0, Z+8	; 0x08
    1b28:	f1 85       	ldd	r31, Z+9	; 0x09
    1b2a:	e0 2d       	mov	r30, r0
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	19 95       	eicall
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	8c 83       	std	Y+4, r24	; 0x04
    1b36:	ce 01       	movw	r24, r28
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <_ZN8emstream4putsEPKc>:
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	8c 01       	movw	r16, r24
    1b48:	fb 01       	movw	r30, r22
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	14 96       	adiw	r26, 0x04	; 4
    1b4e:	8c 91       	ld	r24, X
    1b50:	81 11       	cpse	r24, r1
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <_ZN8emstream4putsEPKc+0x1e>
    1b54:	60 81       	ld	r22, Z
    1b56:	61 11       	cpse	r22, r1
    1b58:	17 c0       	rjmp	.+46     	; 0x1b88 <_ZN8emstream4putsEPKc+0x4a>
    1b5a:	23 c0       	rjmp	.+70     	; 0x1ba2 <_ZN8emstream4putsEPKc+0x64>
    1b5c:	d8 01       	movw	r26, r16
    1b5e:	14 96       	adiw	r26, 0x04	; 4
    1b60:	1c 92       	st	X, r1
    1b62:	eb 01       	movw	r28, r22
    1b64:	21 96       	adiw	r28, 0x01	; 1
    1b66:	64 91       	lpm	r22, Z
    1b68:	66 23       	and	r22, r22
    1b6a:	d9 f0       	breq	.+54     	; 0x1ba2 <_ZN8emstream4putsEPKc+0x64>
    1b6c:	d8 01       	movw	r26, r16
    1b6e:	ed 91       	ld	r30, X+
    1b70:	fc 91       	ld	r31, X
    1b72:	02 80       	ldd	r0, Z+2	; 0x02
    1b74:	f3 81       	ldd	r31, Z+3	; 0x03
    1b76:	e0 2d       	mov	r30, r0
    1b78:	c8 01       	movw	r24, r16
    1b7a:	19 95       	eicall
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	64 91       	lpm	r22, Z
    1b80:	21 96       	adiw	r28, 0x01	; 1
    1b82:	61 11       	cpse	r22, r1
    1b84:	f3 cf       	rjmp	.-26     	; 0x1b6c <_ZN8emstream4putsEPKc+0x2e>
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <_ZN8emstream4putsEPKc+0x64>
    1b88:	ef 01       	movw	r28, r30
    1b8a:	21 96       	adiw	r28, 0x01	; 1
    1b8c:	d8 01       	movw	r26, r16
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	02 80       	ldd	r0, Z+2	; 0x02
    1b94:	f3 81       	ldd	r31, Z+3	; 0x03
    1b96:	e0 2d       	mov	r30, r0
    1b98:	c8 01       	movw	r24, r16
    1b9a:	19 95       	eicall
    1b9c:	69 91       	ld	r22, Y+
    1b9e:	61 11       	cpse	r22, r1
    1ba0:	f5 cf       	rjmp	.-22     	; 0x1b8c <_ZN8emstream4putsEPKc+0x4e>
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <main>:
    1bac:	af 92       	push	r10
    1bae:	bf 92       	push	r11
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	6e 97       	sbiw	r28, 0x1e	; 30
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	e0 e6       	ldi	r30, 0x60	; 96
    1bca:	f6 e0       	ldi	r31, 0x06	; 6
    1bcc:	80 e1       	ldi	r24, 0x10	; 16
    1bce:	81 83       	std	Z+1, r24	; 0x01
    1bd0:	85 83       	std	Z+5, r24	; 0x05
    1bd2:	f8 94       	cli
    1bd4:	e0 e5       	ldi	r30, 0x50	; 80
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	82 60       	ori	r24, 0x02	; 2
    1bdc:	80 83       	st	Z, r24
    1bde:	81 81       	ldd	r24, Z+1	; 0x01
    1be0:	81 ff       	sbrs	r24, 1
    1be2:	fd cf       	rjmp	.-6      	; 0x1bde <main+0x32>
    1be4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1be8:	9f b7       	in	r25, 0x3f	; 63
    1bea:	9e 8f       	std	Y+30, r25	; 0x1e
    1bec:	f8 94       	cli
    1bee:	1b be       	out	0x3b, r1	; 59
    1bf0:	88 7f       	andi	r24, 0xF8	; 248
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	20 e4       	ldi	r18, 0x40	; 64
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	08 ed       	ldi	r16, 0xD8	; 216
    1bfc:	04 bf       	out	0x34, r16	; 52
    1bfe:	80 83       	st	Z, r24
    1c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c02:	8f bf       	out	0x3f, r24	; 63
    1c04:	e0 e5       	ldi	r30, 0x50	; 80
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8e 7f       	andi	r24, 0xFE	; 254
    1c0c:	80 83       	st	Z, r24
    1c0e:	9d ef       	ldi	r25, 0xFD	; 253
    1c10:	88 ed       	ldi	r24, 0xD8	; 216
    1c12:	08 b6       	in	r0, 0x38	; 56
    1c14:	18 be       	out	0x38, r1	; 56
    1c16:	84 bf       	out	0x34, r24	; 52
    1c18:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c1c:	08 be       	out	0x38, r0	; 56
    1c1e:	82 e5       	ldi	r24, 0x52	; 82
    1c20:	90 e2       	ldi	r25, 0x20	; 32
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	8a e0       	ldi	r24, 0x0A	; 10
    1c28:	8b 83       	std	Y+3, r24	; 0x03
    1c2a:	1c 82       	std	Y+4, r1	; 0x04
    1c2c:	43 e0       	ldi	r20, 0x03	; 3
    1c2e:	4e 83       	std	Y+6, r20	; 0x06
    1c30:	1d 82       	std	Y+5, r1	; 0x05
    1c32:	1f 82       	std	Y+7, r1	; 0x07
    1c34:	18 86       	std	Y+8, r1	; 0x08
    1c36:	a0 e4       	ldi	r26, 0x40	; 64
    1c38:	b6 e0       	ldi	r27, 0x06	; 6
    1c3a:	ab 87       	std	Y+11, r26	; 0x0b
    1c3c:	bc 87       	std	Y+12, r27	; 0x0c
    1c3e:	86 e0       	ldi	r24, 0x06	; 6
    1c40:	8d 87       	std	Y+13, r24	; 0x0d
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f7 e0       	ldi	r31, 0x07	; 7
    1c46:	df 2e       	mov	r13, r31
    1c48:	f0 2d       	mov	r31, r0
    1c4a:	de 86       	std	Y+14, r13	; 0x0e
    1c4c:	e0 eb       	ldi	r30, 0xB0	; 176
    1c4e:	f8 e0       	ldi	r31, 0x08	; 8
    1c50:	ef 87       	std	Y+15, r30	; 0x0f
    1c52:	f8 8b       	std	Y+16, r31	; 0x10
    1c54:	81 eb       	ldi	r24, 0xB1	; 177
    1c56:	98 e0       	ldi	r25, 0x08	; 8
    1c58:	89 8b       	std	Y+17, r24	; 0x11
    1c5a:	9a 8b       	std	Y+18, r25	; 0x12
    1c5c:	84 eb       	ldi	r24, 0xB4	; 180
    1c5e:	98 e0       	ldi	r25, 0x08	; 8
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c66:	14 96       	adiw	r26, 0x04	; 4
    1c68:	5c 91       	ld	r21, X
    1c6a:	14 97       	sbiw	r26, 0x04	; 4
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	bc 01       	movw	r22, r24
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <main+0xcc>
    1c74:	66 0f       	add	r22, r22
    1c76:	77 1f       	adc	r23, r23
    1c78:	2a 95       	dec	r18
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <main+0xc8>
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	25 2b       	or	r18, r21
    1c80:	14 96       	adiw	r26, 0x04	; 4
    1c82:	2c 93       	st	X, r18
    1c84:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c86:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c88:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c8a:	5c 91       	ld	r21, X
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <main+0xe8>
    1c90:	66 0f       	add	r22, r22
    1c92:	77 1f       	adc	r23, r23
    1c94:	2a 95       	dec	r18
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <main+0xe4>
    1c98:	9b 01       	movw	r18, r22
    1c9a:	25 2b       	or	r18, r21
    1c9c:	2c 93       	st	X, r18
    1c9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ca0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ca2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ca4:	2c 91       	ld	r18, X
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <main+0x100>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	3a 95       	dec	r19
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <main+0xfc>
    1cb0:	80 95       	com	r24
    1cb2:	90 95       	com	r25
    1cb4:	82 23       	and	r24, r18
    1cb6:	8c 93       	st	X, r24
    1cb8:	80 e1       	ldi	r24, 0x10	; 16
    1cba:	83 83       	std	Z+3, r24	; 0x03
    1cbc:	45 83       	std	Z+5, r20	; 0x05
    1cbe:	80 ef       	ldi	r24, 0xF0	; 240
    1cc0:	87 83       	std	Z+7, r24	; 0x07
    1cc2:	81 e2       	ldi	r24, 0x21	; 33
    1cc4:	86 83       	std	Z+6, r24	; 0x06
    1cc6:	88 e1       	ldi	r24, 0x18	; 24
    1cc8:	84 83       	std	Z+4, r24	; 0x04
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	8e 8b       	std	Y+22, r24	; 0x16
    1cce:	80 e4       	ldi	r24, 0x40	; 64
    1cd0:	8f 8b       	std	Y+23, r24	; 0x17
    1cd2:	80 e2       	ldi	r24, 0x20	; 32
    1cd4:	8d 8b       	std	Y+21, r24	; 0x15
    1cd6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cd8:	f8 89       	ldd	r31, Y+16	; 0x10
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 81       	ld	r24, Z
    1cde:	82 e1       	ldi	r24, 0x12	; 18
    1ce0:	90 e2       	ldi	r25, 0x20	; 32
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	88 e1       	ldi	r24, 0x18	; 24
    1ce8:	91 e2       	ldi	r25, 0x21	; 33
    1cea:	88 8f       	std	Y+24, r24	; 0x18
    1cec:	99 8f       	std	Y+25, r25	; 0x19
    1cee:	86 e1       	ldi	r24, 0x16	; 22
    1cf0:	91 e2       	ldi	r25, 0x21	; 33
    1cf2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cf4:	9b 8f       	std	Y+27, r25	; 0x1b
    1cf6:	84 e1       	ldi	r24, 0x14	; 20
    1cf8:	91 e2       	ldi	r25, 0x21	; 33
    1cfa:	8c 8f       	std	Y+28, r24	; 0x1c
    1cfc:	9d 8f       	std	Y+29, r25	; 0x1d
    1cfe:	84 e6       	ldi	r24, 0x64	; 100
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1d06:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <rcvC1_buffer>
    1d0a:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <rcvC1_buffer+0x1>
    1d0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d10:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1d12:	10 82       	st	Z, r1
    1d14:	11 82       	std	Z+1, r1	; 0x01
    1d16:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d18:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d1a:	10 82       	st	Z, r1
    1d1c:	11 82       	std	Z+1, r1	; 0x01
    1d1e:	67 e0       	ldi	r22, 0x07	; 7
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1d28:	7c 01       	movw	r14, r24
    1d2a:	66 e9       	ldi	r22, 0x96	; 150
    1d2c:	70 e2       	ldi	r23, 0x20	; 32
    1d2e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1d32:	66 e0       	ldi	r22, 0x06	; 6
    1d34:	c7 01       	movw	r24, r14
    1d36:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1d3a:	66 e0       	ldi	r22, 0x06	; 6
    1d3c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN8emstreamlsE15ser_manipulator>
    1d40:	82 e1       	ldi	r24, 0x12	; 18
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1d48:	7c 01       	movw	r14, r24
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	0f 5f       	subi	r16, 0xFF	; 255
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	24 e0       	ldi	r18, 0x04	; 4
    1d52:	31 e0       	ldi	r19, 0x01	; 1
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	65 eb       	ldi	r22, 0xB5	; 181
    1d58:	70 e2       	ldi	r23, 0x20	; 32
    1d5a:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1d5e:	82 e2       	ldi	r24, 0x22	; 34
    1d60:	90 e2       	ldi	r25, 0x20	; 32
    1d62:	f7 01       	movw	r30, r14
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	83 e1       	ldi	r24, 0x13	; 19
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1d70:	7c 01       	movw	r14, r24
    1d72:	24 e0       	ldi	r18, 0x04	; 4
    1d74:	31 e0       	ldi	r19, 0x01	; 1
    1d76:	44 e0       	ldi	r20, 0x04	; 4
    1d78:	6d eb       	ldi	r22, 0xBD	; 189
    1d7a:	70 e2       	ldi	r23, 0x20	; 32
    1d7c:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1d80:	0f 2e       	mov	r0, r31
    1d82:	fa e2       	ldi	r31, 0x2A	; 42
    1d84:	af 2e       	mov	r10, r31
    1d86:	f0 e2       	ldi	r31, 0x20	; 32
    1d88:	bf 2e       	mov	r11, r31
    1d8a:	f0 2d       	mov	r31, r0
    1d8c:	f7 01       	movw	r30, r14
    1d8e:	a0 82       	st	Z, r10
    1d90:	b1 82       	std	Z+1, r11	; 0x01
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	82 8b       	std	Z+18, r24	; 0x12
    1d96:	83 e1       	ldi	r24, 0x13	; 19
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1d9e:	7c 01       	movw	r14, r24
    1da0:	24 e0       	ldi	r18, 0x04	; 4
    1da2:	31 e0       	ldi	r19, 0x01	; 1
    1da4:	44 e0       	ldi	r20, 0x04	; 4
    1da6:	64 ec       	ldi	r22, 0xC4	; 196
    1da8:	70 e2       	ldi	r23, 0x20	; 32
    1daa:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1dae:	f7 01       	movw	r30, r14
    1db0:	a0 82       	st	Z, r10
    1db2:	b1 82       	std	Z+1, r11	; 0x01
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	82 8b       	std	Z+18, r24	; 0x12
    1db8:	82 e1       	ldi	r24, 0x12	; 18
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1dc0:	7c 01       	movw	r14, r24
    1dc2:	24 e0       	ldi	r18, 0x04	; 4
    1dc4:	31 e0       	ldi	r19, 0x01	; 1
    1dc6:	44 e0       	ldi	r20, 0x04	; 4
    1dc8:	6c ec       	ldi	r22, 0xCC	; 204
    1dca:	70 e2       	ldi	r23, 0x20	; 32
    1dcc:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1dd0:	82 e3       	ldi	r24, 0x32	; 50
    1dd2:	90 e2       	ldi	r25, 0x20	; 32
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	82 e1       	ldi	r24, 0x12	; 18
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1de2:	7c 01       	movw	r14, r24
    1de4:	24 e0       	ldi	r18, 0x04	; 4
    1de6:	31 e0       	ldi	r19, 0x01	; 1
    1de8:	43 e0       	ldi	r20, 0x03	; 3
    1dea:	63 ed       	ldi	r22, 0xD3	; 211
    1dec:	70 e2       	ldi	r23, 0x20	; 32
    1dee:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1df2:	8a e3       	ldi	r24, 0x3A	; 58
    1df4:	90 e2       	ldi	r25, 0x20	; 32
    1df6:	f7 01       	movw	r30, r14
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	82 e1       	ldi	r24, 0x12	; 18
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1e04:	7c 01       	movw	r14, r24
    1e06:	24 e0       	ldi	r18, 0x04	; 4
    1e08:	31 e0       	ldi	r19, 0x01	; 1
    1e0a:	42 e0       	ldi	r20, 0x02	; 2
    1e0c:	6a ed       	ldi	r22, 0xDA	; 218
    1e0e:	70 e2       	ldi	r23, 0x20	; 32
    1e10:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1e14:	82 e4       	ldi	r24, 0x42	; 66
    1e16:	90 e2       	ldi	r25, 0x20	; 32
    1e18:	f7 01       	movw	r30, r14
    1e1a:	80 83       	st	Z, r24
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	82 e1       	ldi	r24, 0x12	; 18
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    1e26:	7c 01       	movw	r14, r24
    1e28:	24 e0       	ldi	r18, 0x04	; 4
    1e2a:	31 e0       	ldi	r19, 0x01	; 1
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	62 ee       	ldi	r22, 0xE2	; 226
    1e30:	70 e2       	ldi	r23, 0x20	; 32
    1e32:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN8frt_taskC2EPKchjP8emstream>
    1e36:	8a e4       	ldi	r24, 0x4A	; 74
    1e38:	90 e2       	ldi	r25, 0x20	; 32
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	80 83       	st	Z, r24
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e44:	78 94       	sei
    1e46:	0e 94 34 17 	call	0x2e68	; 0x2e68 <vTaskStartScheduler>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	6e 96       	adiw	r28, 0x1e	; 30
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	df 90       	pop	r13
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	08 95       	ret

00001e68 <_ZN8emstreamlsEh>:
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	29 97       	sbiw	r28, 0x09	; 9
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	8c 01       	movw	r16, r24
    1e84:	e6 2e       	mov	r14, r22
    1e86:	dc 01       	movw	r26, r24
    1e88:	13 96       	adiw	r26, 0x03	; 3
    1e8a:	8c 91       	ld	r24, X
    1e8c:	13 97       	sbiw	r26, 0x03	; 3
    1e8e:	88 23       	and	r24, r24
    1e90:	41 f0       	breq	.+16     	; 0x1ea2 <_ZN8emstreamlsEh+0x3a>
    1e92:	ed 91       	ld	r30, X+
    1e94:	fc 91       	ld	r31, X
    1e96:	02 80       	ldd	r0, Z+2	; 0x02
    1e98:	f3 81       	ldd	r31, Z+3	; 0x03
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	19 95       	eicall
    1ea0:	56 c0       	rjmp	.+172    	; 0x1f4e <_ZN8emstreamlsEh+0xe6>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	42 81       	ldd	r20, Z+2	; 0x02
    1ea6:	42 30       	cpi	r20, 0x02	; 2
    1ea8:	19 f5       	brne	.+70     	; 0x1ef0 <_ZN8emstreamlsEh+0x88>
    1eaa:	68 94       	set
    1eac:	cc 24       	eor	r12, r12
    1eae:	c3 f8       	bld	r12, 3
    1eb0:	d1 2c       	mov	r13, r1
    1eb2:	68 94       	set
    1eb4:	ff 24       	eor	r15, r15
    1eb6:	f7 f8       	bld	r15, 7
    1eb8:	8e 2d       	mov	r24, r14
    1eba:	8f 21       	and	r24, r15
    1ebc:	51 f0       	breq	.+20     	; 0x1ed2 <_ZN8emstreamlsEh+0x6a>
    1ebe:	d8 01       	movw	r26, r16
    1ec0:	ed 91       	ld	r30, X+
    1ec2:	fc 91       	ld	r31, X
    1ec4:	02 80       	ldd	r0, Z+2	; 0x02
    1ec6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	61 e3       	ldi	r22, 0x31	; 49
    1ecc:	c8 01       	movw	r24, r16
    1ece:	19 95       	eicall
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <_ZN8emstreamlsEh+0x7c>
    1ed2:	d8 01       	movw	r26, r16
    1ed4:	ed 91       	ld	r30, X+
    1ed6:	fc 91       	ld	r31, X
    1ed8:	02 80       	ldd	r0, Z+2	; 0x02
    1eda:	f3 81       	ldd	r31, Z+3	; 0x03
    1edc:	e0 2d       	mov	r30, r0
    1ede:	60 e3       	ldi	r22, 0x30	; 48
    1ee0:	c8 01       	movw	r24, r16
    1ee2:	19 95       	eicall
    1ee4:	f6 94       	lsr	r15
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	cb 1a       	sub	r12, r27
    1eea:	d1 08       	sbc	r13, r1
    1eec:	29 f7       	brne	.-54     	; 0x1eb8 <_ZN8emstreamlsEh+0x50>
    1eee:	2f c0       	rjmp	.+94     	; 0x1f4e <_ZN8emstreamlsEh+0xe6>
    1ef0:	40 31       	cpi	r20, 0x10	; 16
    1ef2:	f9 f4       	brne	.+62     	; 0x1f32 <_ZN8emstreamlsEh+0xca>
    1ef4:	62 95       	swap	r22
    1ef6:	6f 70       	andi	r22, 0x0F	; 15
    1ef8:	01 90       	ld	r0, Z+
    1efa:	f0 81       	ld	r31, Z
    1efc:	e0 2d       	mov	r30, r0
    1efe:	02 80       	ldd	r0, Z+2	; 0x02
    1f00:	f3 81       	ldd	r31, Z+3	; 0x03
    1f02:	e0 2d       	mov	r30, r0
    1f04:	6a 30       	cpi	r22, 0x0A	; 10
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <_ZN8emstreamlsEh+0xa4>
    1f08:	69 5c       	subi	r22, 0xC9	; 201
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <_ZN8emstreamlsEh+0xa6>
    1f0c:	60 5d       	subi	r22, 0xD0	; 208
    1f0e:	c8 01       	movw	r24, r16
    1f10:	19 95       	eicall
    1f12:	6e 2d       	mov	r22, r14
    1f14:	6f 70       	andi	r22, 0x0F	; 15
    1f16:	d8 01       	movw	r26, r16
    1f18:	ed 91       	ld	r30, X+
    1f1a:	fc 91       	ld	r31, X
    1f1c:	02 80       	ldd	r0, Z+2	; 0x02
    1f1e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f20:	e0 2d       	mov	r30, r0
    1f22:	6a 30       	cpi	r22, 0x0A	; 10
    1f24:	10 f0       	brcs	.+4      	; 0x1f2a <_ZN8emstreamlsEh+0xc2>
    1f26:	69 5c       	subi	r22, 0xC9	; 201
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <_ZN8emstreamlsEh+0xc4>
    1f2a:	60 5d       	subi	r22, 0xD0	; 208
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	19 95       	eicall
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <_ZN8emstreamlsEh+0xe6>
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5f       	subi	r22, 0xFF	; 255
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8e 2d       	mov	r24, r14
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 2d 1c 	call	0x385a	; 0x385a <utoa>
    1f42:	be 01       	movw	r22, r28
    1f44:	6f 5f       	subi	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	c8 01       	movw	r24, r16
    1f4a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1f4e:	c8 01       	movw	r24, r16
    1f50:	29 96       	adiw	r28, 0x09	; 9
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	08 95       	ret

00001f68 <_ZN8emstreamlsEm>:
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	a1 97       	sbiw	r28, 0x21	; 33
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	8c 01       	movw	r16, r24
    1f82:	d4 2e       	mov	r13, r20
    1f84:	e5 2e       	mov	r14, r21
    1f86:	f6 2e       	mov	r15, r22
    1f88:	97 2f       	mov	r25, r23
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	22 81       	ldd	r18, Z+2	; 0x02
    1f8e:	20 31       	cpi	r18, 0x10	; 16
    1f90:	21 f0       	breq	.+8      	; 0x1f9a <_ZN8emstreamlsEm+0x32>
    1f92:	28 30       	cpi	r18, 0x08	; 8
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <_ZN8emstreamlsEm+0x32>
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	71 f4       	brne	.+28     	; 0x1fb6 <_ZN8emstreamlsEm+0x4e>
    1f9a:	69 2f       	mov	r22, r25
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    1fa2:	6f 2d       	mov	r22, r15
    1fa4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    1fa8:	6e 2d       	mov	r22, r14
    1faa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    1fae:	6d 2d       	mov	r22, r13
    1fb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <_ZN8emstreamlsEm+0x6c>
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	ae 01       	movw	r20, r28
    1fba:	4f 5f       	subi	r20, 0xFF	; 255
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbe:	6d 2d       	mov	r22, r13
    1fc0:	7e 2d       	mov	r23, r14
    1fc2:	8f 2d       	mov	r24, r15
    1fc4:	0e 94 00 1c 	call	0x3800	; 0x3800 <ultoa>
    1fc8:	be 01       	movw	r22, r28
    1fca:	6f 5f       	subi	r22, 0xFF	; 255
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	c8 01       	movw	r24, r16
    1fd0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	a1 96       	adiw	r28, 0x21	; 33
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <_ZN8emstreamlsEj>:
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	61 97       	sbiw	r28, 0x11	; 17
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	8c 01       	movw	r16, r24
    2002:	f6 2e       	mov	r15, r22
    2004:	97 2f       	mov	r25, r23
    2006:	f8 01       	movw	r30, r16
    2008:	42 81       	ldd	r20, Z+2	; 0x02
    200a:	40 31       	cpi	r20, 0x10	; 16
    200c:	21 f0       	breq	.+8      	; 0x2016 <_ZN8emstreamlsEj+0x2a>
    200e:	48 30       	cpi	r20, 0x08	; 8
    2010:	11 f0       	breq	.+4      	; 0x2016 <_ZN8emstreamlsEj+0x2a>
    2012:	42 30       	cpi	r20, 0x02	; 2
    2014:	41 f4       	brne	.+16     	; 0x2026 <_ZN8emstreamlsEj+0x3a>
    2016:	69 2f       	mov	r22, r25
    2018:	c8 01       	movw	r24, r16
    201a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    201e:	6f 2d       	mov	r22, r15
    2020:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN8emstreamlsEh>
    2024:	0d c0       	rjmp	.+26     	; 0x2040 <_ZN8emstreamlsEj+0x54>
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	be 01       	movw	r22, r28
    202a:	6f 5f       	subi	r22, 0xFF	; 255
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 2d       	mov	r24, r15
    2030:	0e 94 2d 1c 	call	0x385a	; 0x385a <utoa>
    2034:	be 01       	movw	r22, r28
    2036:	6f 5f       	subi	r22, 0xFF	; 255
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	c8 01       	movw	r24, r16
    203c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    2040:	c8 01       	movw	r24, r16
    2042:	61 96       	adiw	r28, 0x11	; 17
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	08 95       	ret

00002054 <_ZN8emstreamlsEi>:
    2054:	0f 93       	push	r16
    2056:	1f 93       	push	r17
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	61 97       	sbiw	r28, 0x11	; 17
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	8c 01       	movw	r16, r24
    2068:	9b 01       	movw	r18, r22
    206a:	fc 01       	movw	r30, r24
    206c:	92 81       	ldd	r25, Z+2	; 0x02
    206e:	9a 30       	cpi	r25, 0x0A	; 10
    2070:	21 f0       	breq	.+8      	; 0x207a <_ZN8emstreamlsEi+0x26>
    2072:	c8 01       	movw	r24, r16
    2074:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN8emstreamlsEj>
    2078:	0d c0       	rjmp	.+26     	; 0x2094 <_ZN8emstreamlsEi+0x40>
    207a:	4a e0       	ldi	r20, 0x0A	; 10
    207c:	be 01       	movw	r22, r28
    207e:	6f 5f       	subi	r22, 0xFF	; 255
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	c9 01       	movw	r24, r18
    2084:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__itoa_ncheck>
    2088:	be 01       	movw	r22, r28
    208a:	6f 5f       	subi	r22, 0xFF	; 255
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	c8 01       	movw	r24, r16
    2090:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN8emstream4putsEPKc>
    2094:	c8 01       	movw	r24, r16
    2096:	61 96       	adiw	r28, 0x11	; 17
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    20b0:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    20b4:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <xHeapHasBeenInitialised.4150>
    20b8:	81 11       	cpse	r24, r1
    20ba:	1d c0       	rjmp	.+58     	; 0x20f6 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    20bc:	a5 e2       	ldi	r26, 0x25	; 37
    20be:	b1 e2       	ldi	r27, 0x21	; 33
    20c0:	e9 e2       	ldi	r30, 0x29	; 41
    20c2:	f1 e2       	ldi	r31, 0x21	; 33
    20c4:	ed 93       	st	X+, r30
    20c6:	fc 93       	st	X, r31
    20c8:	11 97       	sbiw	r26, 0x01	; 1
    20ca:	12 96       	adiw	r26, 0x02	; 2
    20cc:	1d 92       	st	X+, r1
    20ce:	1c 92       	st	X, r1
    20d0:	13 97       	sbiw	r26, 0x03	; 3
    20d2:	a1 e2       	ldi	r26, 0x21	; 33
    20d4:	b1 e2       	ldi	r27, 0x21	; 33
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	9f e0       	ldi	r25, 0x0F	; 15
    20da:	12 96       	adiw	r26, 0x02	; 2
    20dc:	8d 93       	st	X+, r24
    20de:	9c 93       	st	X, r25
    20e0:	13 97       	sbiw	r26, 0x03	; 3
    20e2:	1d 92       	st	X+, r1
    20e4:	1c 92       	st	X, r1
    20e6:	11 97       	sbiw	r26, 0x01	; 1
    20e8:	82 83       	std	Z+2, r24	; 0x02
    20ea:	93 83       	std	Z+3, r25	; 0x03
    20ec:	a0 83       	st	Z, r26
    20ee:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    20f6:	20 97       	sbiw	r28, 0x00	; 0
    20f8:	09 f4       	brne	.+2      	; 0x20fc <pvPortMalloc+0x56>
    20fa:	5f c0       	rjmp	.+190    	; 0x21ba <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    20fc:	9e 01       	movw	r18, r28
    20fe:	2b 5f       	subi	r18, 0xFB	; 251
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    2102:	24 96       	adiw	r28, 0x04	; 4
    2104:	ce 3f       	cpi	r28, 0xFE	; 254
    2106:	df 40       	sbci	r29, 0x0F	; 15
    2108:	08 f0       	brcs	.+2      	; 0x210c <pvPortMalloc+0x66>
    210a:	5a c0       	rjmp	.+180    	; 0x21c0 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    210c:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <xStart>
    2110:	f0 91 26 21 	lds	r31, 0x2126	; 0x802126 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2114:	a5 e2       	ldi	r26, 0x25	; 37
    2116:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2118:	02 c0       	rjmp	.+4      	; 0x211e <pvPortMalloc+0x78>
    211a:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    211c:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    211e:	82 81       	ldd	r24, Z+2	; 0x02
    2120:	93 81       	ldd	r25, Z+3	; 0x03
    2122:	82 17       	cp	r24, r18
    2124:	93 07       	cpc	r25, r19
    2126:	20 f4       	brcc	.+8      	; 0x2130 <pvPortMalloc+0x8a>
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	a9 f7       	brne	.-22     	; 0x211a <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    2130:	c1 e2       	ldi	r28, 0x21	; 33
    2132:	e1 32       	cpi	r30, 0x21	; 33
    2134:	fc 07       	cpc	r31, r28
    2136:	09 f4       	brne	.+2      	; 0x213a <pvPortMalloc+0x94>
    2138:	46 c0       	rjmp	.+140    	; 0x21c6 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    213a:	cd 91       	ld	r28, X+
    213c:	dc 91       	ld	r29, X
    213e:	11 97       	sbiw	r26, 0x01	; 1
    2140:	8e 01       	movw	r16, r28
    2142:	0b 5f       	subi	r16, 0xFB	; 251
    2144:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	8d 93       	st	X+, r24
    214c:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	82 1b       	sub	r24, r18
    2154:	93 0b       	sbc	r25, r19
    2156:	8b 30       	cpi	r24, 0x0B	; 11
    2158:	91 05       	cpc	r25, r1
    215a:	10 f1       	brcs	.+68     	; 0x21a0 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    215c:	bf 01       	movw	r22, r30
    215e:	62 0f       	add	r22, r18
    2160:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2162:	db 01       	movw	r26, r22
    2164:	12 96       	adiw	r26, 0x02	; 2
    2166:	8d 93       	st	X+, r24
    2168:	9c 93       	st	X, r25
    216a:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    216c:	22 83       	std	Z+2, r18	; 0x02
    216e:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2170:	12 96       	adiw	r26, 0x02	; 2
    2172:	4d 91       	ld	r20, X+
    2174:	5c 91       	ld	r21, X
    2176:	13 97       	sbiw	r26, 0x03	; 3
    2178:	85 e2       	ldi	r24, 0x25	; 37
    217a:	91 e2       	ldi	r25, 0x21	; 33
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <pvPortMalloc+0xda>
    217e:	cd 01       	movw	r24, r26
    2180:	ec 01       	movw	r28, r24
    2182:	a8 81       	ld	r26, Y
    2184:	b9 81       	ldd	r27, Y+1	; 0x01
    2186:	12 96       	adiw	r26, 0x02	; 2
    2188:	2d 91       	ld	r18, X+
    218a:	3c 91       	ld	r19, X
    218c:	13 97       	sbiw	r26, 0x03	; 3
    218e:	24 17       	cp	r18, r20
    2190:	35 07       	cpc	r19, r21
    2192:	a8 f3       	brcs	.-22     	; 0x217e <pvPortMalloc+0xd8>
    2194:	eb 01       	movw	r28, r22
    2196:	a8 83       	st	Y, r26
    2198:	b9 83       	std	Y+1, r27	; 0x01
    219a:	dc 01       	movw	r26, r24
    219c:	6d 93       	st	X+, r22
    219e:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    21a0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    21a4:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    21a8:	22 81       	ldd	r18, Z+2	; 0x02
    21aa:	33 81       	ldd	r19, Z+3	; 0x03
    21ac:	82 1b       	sub	r24, r18
    21ae:	93 0b       	sbc	r25, r19
    21b0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    21b4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    21b8:	08 c0       	rjmp	.+16     	; 0x21ca <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    21ba:	00 e0       	ldi	r16, 0x00	; 0
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <pvPortMalloc+0x124>
    21c0:	00 e0       	ldi	r16, 0x00	; 0
    21c2:	10 e0       	ldi	r17, 0x00	; 0
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <pvPortMalloc+0x124>
    21c6:	00 e0       	ldi	r16, 0x00	; 0
    21c8:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    21ca:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    21ce:	c8 01       	movw	r24, r16
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	08 95       	ret

000021da <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	41 f1       	breq	.+80     	; 0x2236 <vPortFree+0x5c>
    21e6:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    21e8:	8c 01       	movw	r16, r24
    21ea:	05 50       	subi	r16, 0x05	; 5
    21ec:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    21ee:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    21f2:	f8 01       	movw	r30, r16
    21f4:	42 81       	ldd	r20, Z+2	; 0x02
    21f6:	53 81       	ldd	r21, Z+3	; 0x03
    21f8:	a5 e2       	ldi	r26, 0x25	; 37
    21fa:	b1 e2       	ldi	r27, 0x21	; 33
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <vPortFree+0x26>
    21fe:	df 01       	movw	r26, r30
    2200:	ed 91       	ld	r30, X+
    2202:	fc 91       	ld	r31, X
    2204:	11 97       	sbiw	r26, 0x01	; 1
    2206:	22 81       	ldd	r18, Z+2	; 0x02
    2208:	33 81       	ldd	r19, Z+3	; 0x03
    220a:	24 17       	cp	r18, r20
    220c:	35 07       	cpc	r19, r21
    220e:	b8 f3       	brcs	.-18     	; 0x21fe <vPortFree+0x24>
    2210:	25 97       	sbiw	r28, 0x05	; 5
    2212:	e8 83       	st	Y, r30
    2214:	f9 83       	std	Y+1, r31	; 0x01
    2216:	0d 93       	st	X+, r16
    2218:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    221a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    221e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    222e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    2232:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
	}
}
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2240:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2244:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2248:	08 95       	ret

0000224a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    224a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    224c:	03 96       	adiw	r24, 0x03	; 3
    224e:	81 83       	std	Z+1, r24	; 0x01
    2250:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2252:	4f ef       	ldi	r20, 0xFF	; 255
    2254:	5f ef       	ldi	r21, 0xFF	; 255
    2256:	ba 01       	movw	r22, r20
    2258:	43 83       	std	Z+3, r20	; 0x03
    225a:	54 83       	std	Z+4, r21	; 0x04
    225c:	65 83       	std	Z+5, r22	; 0x05
    225e:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2260:	87 83       	std	Z+7, r24	; 0x07
    2262:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2264:	81 87       	std	Z+9, r24	; 0x09
    2266:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2268:	10 82       	st	Z, r1
    226a:	08 95       	ret

0000226c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    226c:	fc 01       	movw	r30, r24
    226e:	12 86       	std	Z+10, r1	; 0x0a
    2270:	13 86       	std	Z+11, r1	; 0x0b
    2272:	08 95       	ret

00002274 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	fc 01       	movw	r30, r24
    227a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    227c:	21 81       	ldd	r18, Z+1	; 0x01
    227e:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    2280:	e9 01       	movw	r28, r18
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	9d 81       	ldd	r25, Y+5	; 0x05
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	8d 93       	st	X+, r24
    228a:	9c 93       	st	X, r25
    228c:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    228e:	81 81       	ldd	r24, Z+1	; 0x01
    2290:	92 81       	ldd	r25, Z+2	; 0x02
    2292:	16 96       	adiw	r26, 0x06	; 6
    2294:	8d 93       	st	X+, r24
    2296:	9c 93       	st	X, r25
    2298:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	ec 01       	movw	r28, r24
    22a0:	6e 83       	std	Y+6, r22	; 0x06
    22a2:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    22a4:	e9 01       	movw	r28, r18
    22a6:	6c 83       	std	Y+4, r22	; 0x04
    22a8:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    22aa:	61 83       	std	Z+1, r22	; 0x01
    22ac:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    22ae:	1a 96       	adiw	r26, 0x0a	; 10
    22b0:	ed 93       	st	X+, r30
    22b2:	fc 93       	st	X, r31
    22b4:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 83       	st	Z, r24
}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    22cc:	08 81       	ld	r16, Y
    22ce:	19 81       	ldd	r17, Y+1	; 0x01
    22d0:	2a 81       	ldd	r18, Y+2	; 0x02
    22d2:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    22d4:	0f 3f       	cpi	r16, 0xFF	; 255
    22d6:	4f ef       	ldi	r20, 0xFF	; 255
    22d8:	14 07       	cpc	r17, r20
    22da:	24 07       	cpc	r18, r20
    22dc:	34 07       	cpc	r19, r20
    22de:	31 f4       	brne	.+12     	; 0x22ec <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    22e0:	dc 01       	movw	r26, r24
    22e2:	19 96       	adiw	r26, 0x09	; 9
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	1a 97       	sbiw	r26, 0x0a	; 10
    22ea:	1f c0       	rjmp	.+62     	; 0x232a <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    22ec:	fc 01       	movw	r30, r24
    22ee:	33 96       	adiw	r30, 0x03	; 3
    22f0:	dc 01       	movw	r26, r24
    22f2:	17 96       	adiw	r26, 0x07	; 7
    22f4:	4d 91       	ld	r20, X+
    22f6:	5c 91       	ld	r21, X
    22f8:	18 97       	sbiw	r26, 0x08	; 8
    22fa:	da 01       	movw	r26, r20
    22fc:	4d 91       	ld	r20, X+
    22fe:	5d 91       	ld	r21, X+
    2300:	6d 91       	ld	r22, X+
    2302:	7c 91       	ld	r23, X
    2304:	04 17       	cp	r16, r20
    2306:	15 07       	cpc	r17, r21
    2308:	26 07       	cpc	r18, r22
    230a:	37 07       	cpc	r19, r23
    230c:	70 f0       	brcs	.+28     	; 0x232a <vListInsert+0x68>
    230e:	04 80       	ldd	r0, Z+4	; 0x04
    2310:	f5 81       	ldd	r31, Z+5	; 0x05
    2312:	e0 2d       	mov	r30, r0
    2314:	a4 81       	ldd	r26, Z+4	; 0x04
    2316:	b5 81       	ldd	r27, Z+5	; 0x05
    2318:	4d 91       	ld	r20, X+
    231a:	5d 91       	ld	r21, X+
    231c:	6d 91       	ld	r22, X+
    231e:	7c 91       	ld	r23, X
    2320:	04 17       	cp	r16, r20
    2322:	15 07       	cpc	r17, r21
    2324:	26 07       	cpc	r18, r22
    2326:	37 07       	cpc	r19, r23
    2328:	90 f7       	brcc	.-28     	; 0x230e <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    232a:	a4 81       	ldd	r26, Z+4	; 0x04
    232c:	b5 81       	ldd	r27, Z+5	; 0x05
    232e:	ac 83       	std	Y+4, r26	; 0x04
    2330:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2332:	16 96       	adiw	r26, 0x06	; 6
    2334:	cd 93       	st	X+, r28
    2336:	dc 93       	st	X, r29
    2338:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    233a:	ee 83       	std	Y+6, r30	; 0x06
    233c:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    233e:	c4 83       	std	Z+4, r28	; 0x04
    2340:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2342:	8a 87       	std	Y+10, r24	; 0x0a
    2344:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2346:	fc 01       	movw	r30, r24
    2348:	20 81       	ld	r18, Z
    234a:	2f 5f       	subi	r18, 0xFF	; 255
    234c:	20 83       	st	Z, r18
}
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2358:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    235a:	a4 81       	ldd	r26, Z+4	; 0x04
    235c:	b5 81       	ldd	r27, Z+5	; 0x05
    235e:	86 81       	ldd	r24, Z+6	; 0x06
    2360:	97 81       	ldd	r25, Z+7	; 0x07
    2362:	16 96       	adiw	r26, 0x06	; 6
    2364:	8d 93       	st	X+, r24
    2366:	9c 93       	st	X, r25
    2368:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    236a:	a6 81       	ldd	r26, Z+6	; 0x06
    236c:	b7 81       	ldd	r27, Z+7	; 0x07
    236e:	84 81       	ldd	r24, Z+4	; 0x04
    2370:	95 81       	ldd	r25, Z+5	; 0x05
    2372:	14 96       	adiw	r26, 0x04	; 4
    2374:	8d 93       	st	X+, r24
    2376:	9c 93       	st	X, r25
    2378:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    237a:	a2 85       	ldd	r26, Z+10	; 0x0a
    237c:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    237e:	11 96       	adiw	r26, 0x01	; 1
    2380:	8d 91       	ld	r24, X+
    2382:	9c 91       	ld	r25, X
    2384:	12 97       	sbiw	r26, 0x02	; 2
    2386:	e8 17       	cp	r30, r24
    2388:	f9 07       	cpc	r31, r25
    238a:	31 f4       	brne	.+12     	; 0x2398 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    238c:	86 81       	ldd	r24, Z+6	; 0x06
    238e:	97 81       	ldd	r25, Z+7	; 0x07
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	8d 93       	st	X+, r24
    2394:	9c 93       	st	X, r25
    2396:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2398:	12 86       	std	Z+10, r1	; 0x0a
    239a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    239c:	8c 91       	ld	r24, X
    239e:	81 50       	subi	r24, 0x01	; 1
    23a0:	8c 93       	st	X, r24
    23a2:	08 95       	ret

000023a4 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    23a4:	80 93 8a 31 	sts	0x318A, r24	; 0x80318a <portStackTopForTask>
    23a8:	90 93 8b 31 	sts	0x318B, r25	; 0x80318b <portStackTopForTask+0x1>
    23ac:	31 e1       	ldi	r19, 0x11	; 17
    23ae:	fc 01       	movw	r30, r24
    23b0:	30 83       	st	Z, r19
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	22 e2       	ldi	r18, 0x22	; 34
    23b6:	20 83       	st	Z, r18
    23b8:	31 97       	sbiw	r30, 0x01	; 1
    23ba:	a3 e3       	ldi	r26, 0x33	; 51
    23bc:	a0 83       	st	Z, r26
    23be:	31 97       	sbiw	r30, 0x01	; 1
    23c0:	60 83       	st	Z, r22
    23c2:	31 97       	sbiw	r30, 0x01	; 1
    23c4:	70 83       	st	Z, r23
    23c6:	31 97       	sbiw	r30, 0x01	; 1
    23c8:	10 82       	st	Z, r1
    23ca:	31 97       	sbiw	r30, 0x01	; 1
    23cc:	10 82       	st	Z, r1
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	60 e8       	ldi	r22, 0x80	; 128
    23d2:	60 83       	st	Z, r22
    23d4:	31 97       	sbiw	r30, 0x01	; 1
    23d6:	10 82       	st	Z, r1
    23d8:	31 97       	sbiw	r30, 0x01	; 1
    23da:	10 82       	st	Z, r1
    23dc:	31 97       	sbiw	r30, 0x01	; 1
    23de:	10 82       	st	Z, r1
    23e0:	31 97       	sbiw	r30, 0x01	; 1
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	60 83       	st	Z, r22
    23e6:	31 97       	sbiw	r30, 0x01	; 1
    23e8:	63 e0       	ldi	r22, 0x03	; 3
    23ea:	60 83       	st	Z, r22
    23ec:	31 97       	sbiw	r30, 0x01	; 1
    23ee:	64 e0       	ldi	r22, 0x04	; 4
    23f0:	60 83       	st	Z, r22
    23f2:	31 97       	sbiw	r30, 0x01	; 1
    23f4:	65 e0       	ldi	r22, 0x05	; 5
    23f6:	60 83       	st	Z, r22
    23f8:	31 97       	sbiw	r30, 0x01	; 1
    23fa:	66 e0       	ldi	r22, 0x06	; 6
    23fc:	60 83       	st	Z, r22
    23fe:	31 97       	sbiw	r30, 0x01	; 1
    2400:	67 e0       	ldi	r22, 0x07	; 7
    2402:	60 83       	st	Z, r22
    2404:	31 97       	sbiw	r30, 0x01	; 1
    2406:	68 e0       	ldi	r22, 0x08	; 8
    2408:	60 83       	st	Z, r22
    240a:	31 97       	sbiw	r30, 0x01	; 1
    240c:	69 e0       	ldi	r22, 0x09	; 9
    240e:	60 83       	st	Z, r22
    2410:	31 97       	sbiw	r30, 0x01	; 1
    2412:	60 e1       	ldi	r22, 0x10	; 16
    2414:	60 83       	st	Z, r22
    2416:	31 97       	sbiw	r30, 0x01	; 1
    2418:	30 83       	st	Z, r19
    241a:	31 97       	sbiw	r30, 0x01	; 1
    241c:	32 e1       	ldi	r19, 0x12	; 18
    241e:	30 83       	st	Z, r19
    2420:	31 97       	sbiw	r30, 0x01	; 1
    2422:	33 e1       	ldi	r19, 0x13	; 19
    2424:	30 83       	st	Z, r19
    2426:	31 97       	sbiw	r30, 0x01	; 1
    2428:	34 e1       	ldi	r19, 0x14	; 20
    242a:	30 83       	st	Z, r19
    242c:	31 97       	sbiw	r30, 0x01	; 1
    242e:	35 e1       	ldi	r19, 0x15	; 21
    2430:	30 83       	st	Z, r19
    2432:	31 97       	sbiw	r30, 0x01	; 1
    2434:	36 e1       	ldi	r19, 0x16	; 22
    2436:	30 83       	st	Z, r19
    2438:	31 97       	sbiw	r30, 0x01	; 1
    243a:	37 e1       	ldi	r19, 0x17	; 23
    243c:	30 83       	st	Z, r19
    243e:	31 97       	sbiw	r30, 0x01	; 1
    2440:	38 e1       	ldi	r19, 0x18	; 24
    2442:	30 83       	st	Z, r19
    2444:	31 97       	sbiw	r30, 0x01	; 1
    2446:	39 e1       	ldi	r19, 0x19	; 25
    2448:	30 83       	st	Z, r19
    244a:	31 97       	sbiw	r30, 0x01	; 1
    244c:	30 e2       	ldi	r19, 0x20	; 32
    244e:	30 83       	st	Z, r19
    2450:	31 97       	sbiw	r30, 0x01	; 1
    2452:	31 e2       	ldi	r19, 0x21	; 33
    2454:	30 83       	st	Z, r19
    2456:	31 97       	sbiw	r30, 0x01	; 1
    2458:	20 83       	st	Z, r18
    245a:	31 97       	sbiw	r30, 0x01	; 1
    245c:	23 e2       	ldi	r18, 0x23	; 35
    245e:	20 83       	st	Z, r18
    2460:	31 97       	sbiw	r30, 0x01	; 1
    2462:	40 83       	st	Z, r20
    2464:	31 97       	sbiw	r30, 0x01	; 1
    2466:	50 83       	st	Z, r21
    2468:	31 97       	sbiw	r30, 0x01	; 1
    246a:	26 e2       	ldi	r18, 0x26	; 38
    246c:	20 83       	st	Z, r18
    246e:	31 97       	sbiw	r30, 0x01	; 1
    2470:	27 e2       	ldi	r18, 0x27	; 39
    2472:	20 83       	st	Z, r18
    2474:	31 97       	sbiw	r30, 0x01	; 1
    2476:	28 e2       	ldi	r18, 0x28	; 40
    2478:	20 83       	st	Z, r18
    247a:	31 97       	sbiw	r30, 0x01	; 1
    247c:	29 e2       	ldi	r18, 0x29	; 41
    247e:	20 83       	st	Z, r18
    2480:	31 97       	sbiw	r30, 0x01	; 1
    2482:	20 e3       	ldi	r18, 0x30	; 48
    2484:	20 83       	st	Z, r18
    2486:	31 97       	sbiw	r30, 0x01	; 1
    2488:	21 e3       	ldi	r18, 0x31	; 49
    248a:	20 83       	st	Z, r18
    248c:	89 97       	sbiw	r24, 0x29	; 41
    248e:	08 95       	ret

00002490 <xPortStartScheduler>:
    2490:	8c e7       	ldi	r24, 0x7C	; 124
    2492:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    24a2:	91 e1       	ldi	r25, 0x11	; 17
    24a4:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    24a8:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    24ac:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    24b0:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    24b4:	cd 91       	ld	r28, X+
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	dd 91       	ld	r29, X+
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	ff 91       	pop	r31
    24be:	ef 91       	pop	r30
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	df 90       	pop	r13
    24e2:	cf 90       	pop	r12
    24e4:	bf 90       	pop	r11
    24e6:	af 90       	pop	r10
    24e8:	9f 90       	pop	r9
    24ea:	8f 90       	pop	r8
    24ec:	7f 90       	pop	r7
    24ee:	6f 90       	pop	r6
    24f0:	5f 90       	pop	r5
    24f2:	4f 90       	pop	r4
    24f4:	3f 90       	pop	r3
    24f6:	2f 90       	pop	r2
    24f8:	1f 90       	pop	r1
    24fa:	0f 90       	pop	r0
    24fc:	0c be       	out	0x3c, r0	; 60
    24fe:	0f 90       	pop	r0
    2500:	0b be       	out	0x3b, r0	; 59
    2502:	0f 90       	pop	r0
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	0f 90       	pop	r0
    2508:	08 95       	ret
    250a:	08 95       	ret

0000250c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    250c:	0f 92       	push	r0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	0f 92       	push	r0
    2514:	0b b6       	in	r0, 0x3b	; 59
    2516:	0f 92       	push	r0
    2518:	0c b6       	in	r0, 0x3c	; 60
    251a:	0f 92       	push	r0
    251c:	1f 92       	push	r1
    251e:	11 24       	eor	r1, r1
    2520:	2f 92       	push	r2
    2522:	3f 92       	push	r3
    2524:	4f 92       	push	r4
    2526:	5f 92       	push	r5
    2528:	6f 92       	push	r6
    252a:	7f 92       	push	r7
    252c:	8f 92       	push	r8
    252e:	9f 92       	push	r9
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	2f 93       	push	r18
    2542:	3f 93       	push	r19
    2544:	4f 93       	push	r20
    2546:	5f 93       	push	r21
    2548:	6f 93       	push	r22
    254a:	7f 93       	push	r23
    254c:	8f 93       	push	r24
    254e:	9f 93       	push	r25
    2550:	af 93       	push	r26
    2552:	bf 93       	push	r27
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	ef 93       	push	r30
    255a:	ff 93       	push	r31
    255c:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    2560:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2564:	0d b6       	in	r0, 0x3d	; 61
    2566:	0d 92       	st	X+, r0
    2568:	0e b6       	in	r0, 0x3e	; 62
    256a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    256c:	0e 94 a6 19 	call	0x334c	; 0x334c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2570:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    2574:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2578:	cd 91       	ld	r28, X+
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	dd 91       	ld	r29, X+
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	bf 91       	pop	r27
    258a:	af 91       	pop	r26
    258c:	9f 91       	pop	r25
    258e:	8f 91       	pop	r24
    2590:	7f 91       	pop	r23
    2592:	6f 91       	pop	r22
    2594:	5f 91       	pop	r21
    2596:	4f 91       	pop	r20
    2598:	3f 91       	pop	r19
    259a:	2f 91       	pop	r18
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	9f 90       	pop	r9
    25ae:	8f 90       	pop	r8
    25b0:	7f 90       	pop	r7
    25b2:	6f 90       	pop	r6
    25b4:	5f 90       	pop	r5
    25b6:	4f 90       	pop	r4
    25b8:	3f 90       	pop	r3
    25ba:	2f 90       	pop	r2
    25bc:	1f 90       	pop	r1
    25be:	0f 90       	pop	r0
    25c0:	0c be       	out	0x3c, r0	; 60
    25c2:	0f 90       	pop	r0
    25c4:	0b be       	out	0x3b, r0	; 59
    25c6:	0f 90       	pop	r0
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	0f 90       	pop	r0

	asm volatile ( "ret" );
    25cc:	08 95       	ret

000025ce <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	0b b6       	in	r0, 0x3b	; 59
    25d8:	0f 92       	push	r0
    25da:	0c b6       	in	r0, 0x3c	; 60
    25dc:	0f 92       	push	r0
    25de:	1f 92       	push	r1
    25e0:	11 24       	eor	r1, r1
    25e2:	2f 92       	push	r2
    25e4:	3f 92       	push	r3
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	4f 93       	push	r20
    2608:	5f 93       	push	r21
    260a:	6f 93       	push	r22
    260c:	7f 93       	push	r23
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	af 93       	push	r26
    2614:	bf 93       	push	r27
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ef 93       	push	r30
    261c:	ff 93       	push	r31
    261e:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    2622:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2626:	0d b6       	in	r0, 0x3d	; 61
    2628:	0d 92       	st	X+, r0
    262a:	0e b6       	in	r0, 0x3e	; 62
    262c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    262e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vTaskIncrementTick>
	vTaskSwitchContext();
    2632:	0e 94 a6 19 	call	0x334c	; 0x334c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2636:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    263a:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    263e:	cd 91       	ld	r28, X+
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	dd 91       	ld	r29, X+
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	ff 91       	pop	r31
    2648:	ef 91       	pop	r30
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	4f 90       	pop	r4
    267e:	3f 90       	pop	r3
    2680:	2f 90       	pop	r2
    2682:	1f 90       	pop	r1
    2684:	0f 90       	pop	r0
    2686:	0c be       	out	0x3c, r0	; 60
    2688:	0f 90       	pop	r0
    268a:	0b be       	out	0x3b, r0	; 59
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2692:	08 95       	ret

00002694 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2694:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYieldFromTick>
		asm volatile ( "reti" );
    2698:	18 95       	reti

0000269a <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	ec 01       	movw	r28, r24
    26a0:	88 a1       	ldd	r24, Y+32	; 0x20
    26a2:	81 11       	cpse	r24, r1
    26a4:	0b c0       	rjmp	.+22     	; 0x26bc <prvCopyDataToQueue+0x22>
    26a6:	88 81       	ld	r24, Y
    26a8:	99 81       	ldd	r25, Y+1	; 0x01
    26aa:	89 2b       	or	r24, r25
    26ac:	e1 f5       	brne	.+120    	; 0x2726 <prvCopyDataToQueue+0x8c>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <vTaskPriorityDisinherit>
    26b6:	1a 82       	std	Y+2, r1	; 0x02
    26b8:	1b 82       	std	Y+3, r1	; 0x03
    26ba:	35 c0       	rjmp	.+106    	; 0x2726 <prvCopyDataToQueue+0x8c>
    26bc:	41 11       	cpse	r20, r1
    26be:	17 c0       	rjmp	.+46     	; 0x26ee <prvCopyDataToQueue+0x54>
    26c0:	48 2f       	mov	r20, r24
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <memcpy>
    26cc:	28 a1       	ldd	r18, Y+32	; 0x20
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	9d 81       	ldd	r25, Y+5	; 0x05
    26d2:	82 0f       	add	r24, r18
    26d4:	91 1d       	adc	r25, r1
    26d6:	8c 83       	std	Y+4, r24	; 0x04
    26d8:	9d 83       	std	Y+5, r25	; 0x05
    26da:	2a 81       	ldd	r18, Y+2	; 0x02
    26dc:	3b 81       	ldd	r19, Y+3	; 0x03
    26de:	82 17       	cp	r24, r18
    26e0:	93 07       	cpc	r25, r19
    26e2:	08 f1       	brcs	.+66     	; 0x2726 <prvCopyDataToQueue+0x8c>
    26e4:	88 81       	ld	r24, Y
    26e6:	99 81       	ldd	r25, Y+1	; 0x01
    26e8:	8c 83       	std	Y+4, r24	; 0x04
    26ea:	9d 83       	std	Y+5, r25	; 0x05
    26ec:	1c c0       	rjmp	.+56     	; 0x2726 <prvCopyDataToQueue+0x8c>
    26ee:	48 2f       	mov	r20, r24
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <memcpy>
    26fa:	88 a1       	ldd	r24, Y+32	; 0x20
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	91 95       	neg	r25
    2700:	81 95       	neg	r24
    2702:	91 09       	sbc	r25, r1
    2704:	2e 81       	ldd	r18, Y+6	; 0x06
    2706:	3f 81       	ldd	r19, Y+7	; 0x07
    2708:	28 0f       	add	r18, r24
    270a:	39 1f       	adc	r19, r25
    270c:	2e 83       	std	Y+6, r18	; 0x06
    270e:	3f 83       	std	Y+7, r19	; 0x07
    2710:	48 81       	ld	r20, Y
    2712:	59 81       	ldd	r21, Y+1	; 0x01
    2714:	24 17       	cp	r18, r20
    2716:	35 07       	cpc	r19, r21
    2718:	30 f4       	brcc	.+12     	; 0x2726 <prvCopyDataToQueue+0x8c>
    271a:	2a 81       	ldd	r18, Y+2	; 0x02
    271c:	3b 81       	ldd	r19, Y+3	; 0x03
    271e:	82 0f       	add	r24, r18
    2720:	93 1f       	adc	r25, r19
    2722:	8e 83       	std	Y+6, r24	; 0x06
    2724:	9f 83       	std	Y+7, r25	; 0x07
    2726:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	8e 8f       	std	Y+30, r24	; 0x1e
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <prvCopyDataFromQueue>:
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	a1 f0       	breq	.+40     	; 0x2764 <prvCopyDataFromQueue+0x32>
    273c:	40 a1       	ldd	r20, Z+32	; 0x20
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	26 81       	ldd	r18, Z+6	; 0x06
    2742:	37 81       	ldd	r19, Z+7	; 0x07
    2744:	24 0f       	add	r18, r20
    2746:	35 1f       	adc	r19, r21
    2748:	26 83       	std	Z+6, r18	; 0x06
    274a:	37 83       	std	Z+7, r19	; 0x07
    274c:	a2 81       	ldd	r26, Z+2	; 0x02
    274e:	b3 81       	ldd	r27, Z+3	; 0x03
    2750:	2a 17       	cp	r18, r26
    2752:	3b 07       	cpc	r19, r27
    2754:	10 f0       	brcs	.+4      	; 0x275a <prvCopyDataFromQueue+0x28>
    2756:	86 83       	std	Z+6, r24	; 0x06
    2758:	97 83       	std	Z+7, r25	; 0x07
    275a:	cb 01       	movw	r24, r22
    275c:	66 81       	ldd	r22, Z+6	; 0x06
    275e:	77 81       	ldd	r23, Z+7	; 0x07
    2760:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <memcpy>
    2764:	08 95       	ret

00002766 <prvUnlockQueue>:
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	ec 01       	movw	r28, r24
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	0f 92       	push	r0
    2776:	8a a1       	ldd	r24, Y+34	; 0x22
    2778:	18 16       	cp	r1, r24
    277a:	b4 f4       	brge	.+44     	; 0x27a8 <prvUnlockQueue+0x42>
    277c:	8b 89       	ldd	r24, Y+19	; 0x13
    277e:	81 11       	cpse	r24, r1
    2780:	05 c0       	rjmp	.+10     	; 0x278c <prvUnlockQueue+0x26>
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <prvUnlockQueue+0x42>
    2784:	8b 89       	ldd	r24, Y+19	; 0x13
    2786:	81 11       	cpse	r24, r1
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <prvUnlockQueue+0x2c>
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <prvUnlockQueue+0x42>
    278c:	8e 01       	movw	r16, r28
    278e:	0d 5e       	subi	r16, 0xED	; 237
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	c8 01       	movw	r24, r16
    2794:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskRemoveFromEventList>
    2798:	81 11       	cpse	r24, r1
    279a:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <vTaskMissedYield>
    279e:	8a a1       	ldd	r24, Y+34	; 0x22
    27a0:	81 50       	subi	r24, 0x01	; 1
    27a2:	8a a3       	std	Y+34, r24	; 0x22
    27a4:	18 16       	cp	r1, r24
    27a6:	74 f3       	brlt	.-36     	; 0x2784 <prvUnlockQueue+0x1e>
    27a8:	8f ef       	ldi	r24, 0xFF	; 255
    27aa:	8a a3       	std	Y+34, r24	; 0x22
    27ac:	0f 90       	pop	r0
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	0f 92       	push	r0
    27b6:	89 a1       	ldd	r24, Y+33	; 0x21
    27b8:	18 16       	cp	r1, r24
    27ba:	b4 f4       	brge	.+44     	; 0x27e8 <prvUnlockQueue+0x82>
    27bc:	88 85       	ldd	r24, Y+8	; 0x08
    27be:	81 11       	cpse	r24, r1
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <prvUnlockQueue+0x66>
    27c2:	12 c0       	rjmp	.+36     	; 0x27e8 <prvUnlockQueue+0x82>
    27c4:	88 85       	ldd	r24, Y+8	; 0x08
    27c6:	81 11       	cpse	r24, r1
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <prvUnlockQueue+0x6c>
    27ca:	0e c0       	rjmp	.+28     	; 0x27e8 <prvUnlockQueue+0x82>
    27cc:	8e 01       	movw	r16, r28
    27ce:	08 5f       	subi	r16, 0xF8	; 248
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	c8 01       	movw	r24, r16
    27d4:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskRemoveFromEventList>
    27d8:	81 11       	cpse	r24, r1
    27da:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <vTaskMissedYield>
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	81 50       	subi	r24, 0x01	; 1
    27e2:	89 a3       	std	Y+33, r24	; 0x21
    27e4:	18 16       	cp	r1, r24
    27e6:	74 f3       	brlt	.-36     	; 0x27c4 <prvUnlockQueue+0x5e>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	89 a3       	std	Y+33, r24	; 0x21
    27ec:	0f 90       	pop	r0
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	08 95       	ret

000027fa <xQueueGenericReset>:
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	61 30       	cpi	r22, 0x01	; 1
    2802:	59 f0       	breq	.+22     	; 0x281a <xQueueGenericReset+0x20>
    2804:	fc 01       	movw	r30, r24
    2806:	23 89       	ldd	r18, Z+19	; 0x13
    2808:	30 85       	ldd	r19, Z+8	; 0x08
    280a:	31 11       	cpse	r19, r1
    280c:	2c c0       	rjmp	.+88     	; 0x2866 <xQueueGenericReset+0x6c>
    280e:	11 e0       	ldi	r17, 0x01	; 1
    2810:	21 11       	cpse	r18, r1
    2812:	10 e0       	ldi	r17, 0x00	; 0
    2814:	21 11       	cpse	r18, r1
    2816:	28 c0       	rjmp	.+80     	; 0x2868 <xQueueGenericReset+0x6e>
    2818:	01 c0       	rjmp	.+2      	; 0x281c <xQueueGenericReset+0x22>
    281a:	11 e0       	ldi	r17, 0x01	; 1
    281c:	ec 01       	movw	r28, r24
    281e:	48 81       	ld	r20, Y
    2820:	59 81       	ldd	r21, Y+1	; 0x01
    2822:	28 a1       	ldd	r18, Y+32	; 0x20
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2828:	62 9f       	mul	r22, r18
    282a:	c0 01       	movw	r24, r0
    282c:	63 9f       	mul	r22, r19
    282e:	90 0d       	add	r25, r0
    2830:	11 24       	eor	r1, r1
    2832:	ba 01       	movw	r22, r20
    2834:	68 0f       	add	r22, r24
    2836:	79 1f       	adc	r23, r25
    2838:	6a 83       	std	Y+2, r22	; 0x02
    283a:	7b 83       	std	Y+3, r23	; 0x03
    283c:	1e 8e       	std	Y+30, r1	; 0x1e
    283e:	4c 83       	std	Y+4, r20	; 0x04
    2840:	5d 83       	std	Y+5, r21	; 0x05
    2842:	82 1b       	sub	r24, r18
    2844:	93 0b       	sbc	r25, r19
    2846:	84 0f       	add	r24, r20
    2848:	95 1f       	adc	r25, r21
    284a:	8e 83       	std	Y+6, r24	; 0x06
    284c:	9f 83       	std	Y+7, r25	; 0x07
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	8a a3       	std	Y+34, r24	; 0x22
    2854:	ce 01       	movw	r24, r28
    2856:	08 96       	adiw	r24, 0x08	; 8
    2858:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    285c:	ce 01       	movw	r24, r28
    285e:	43 96       	adiw	r24, 0x13	; 19
    2860:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <xQueueGenericReset+0x6e>
    2866:	10 e0       	ldi	r17, 0x00	; 0
    2868:	81 2f       	mov	r24, r17
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	08 95       	ret

00002872 <xQueueGenericCreate>:
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	88 23       	and	r24, r24
    287c:	01 f1       	breq	.+64     	; 0x28be <xQueueGenericCreate+0x4c>
    287e:	06 2f       	mov	r16, r22
    2880:	18 2f       	mov	r17, r24
    2882:	83 e2       	ldi	r24, 0x23	; 35
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    288a:	ec 01       	movw	r28, r24
    288c:	89 2b       	or	r24, r25
    288e:	c9 f0       	breq	.+50     	; 0x28c2 <xQueueGenericCreate+0x50>
    2890:	10 9f       	mul	r17, r16
    2892:	c0 01       	movw	r24, r0
    2894:	11 24       	eor	r1, r1
    2896:	01 96       	adiw	r24, 0x01	; 1
    2898:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    289c:	88 83       	st	Y, r24
    289e:	99 83       	std	Y+1, r25	; 0x01
    28a0:	89 2b       	or	r24, r25
    28a2:	39 f0       	breq	.+14     	; 0x28b2 <xQueueGenericCreate+0x40>
    28a4:	1f 8f       	std	Y+31, r17	; 0x1f
    28a6:	08 a3       	std	Y+32, r16	; 0x20
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	ce 01       	movw	r24, r28
    28ac:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xQueueGenericReset>
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <xQueueGenericCreate+0x50>
    28b2:	ce 01       	movw	r24, r28
    28b4:	0e 94 ed 10 	call	0x21da	; 0x21da <vPortFree>
    28b8:	c0 e0       	ldi	r28, 0x00	; 0
    28ba:	d0 e0       	ldi	r29, 0x00	; 0
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <xQueueGenericCreate+0x50>
    28be:	c0 e0       	ldi	r28, 0x00	; 0
    28c0:	d0 e0       	ldi	r29, 0x00	; 0
    28c2:	ce 01       	movw	r24, r28
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <xQueueGenericSend>:
    28ce:	af 92       	push	r10
    28d0:	bf 92       	push	r11
    28d2:	cf 92       	push	r12
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	0f 93       	push	r16
    28dc:	1f 93       	push	r17
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	29 97       	sbiw	r28, 0x09	; 9
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	7c 01       	movw	r14, r24
    28ee:	5b 01       	movw	r10, r22
    28f0:	2e 83       	std	Y+6, r18	; 0x06
    28f2:	3f 83       	std	Y+7, r19	; 0x07
    28f4:	48 87       	std	Y+8, r20	; 0x08
    28f6:	59 87       	std	Y+9, r21	; 0x09
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	6c 01       	movw	r12, r24
    28fc:	88 e0       	ldi	r24, 0x08	; 8
    28fe:	c8 0e       	add	r12, r24
    2900:	d1 1c       	adc	r13, r1
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	0f 92       	push	r0
    2908:	f7 01       	movw	r30, r14
    290a:	96 8d       	ldd	r25, Z+30	; 0x1e
    290c:	87 8d       	ldd	r24, Z+31	; 0x1f
    290e:	98 17       	cp	r25, r24
    2910:	a8 f4       	brcc	.+42     	; 0x293c <xQueueGenericSend+0x6e>
    2912:	40 2f       	mov	r20, r16
    2914:	b5 01       	movw	r22, r10
    2916:	c7 01       	movw	r24, r14
    2918:	0e 94 4d 13 	call	0x269a	; 0x269a <prvCopyDataToQueue>
    291c:	f7 01       	movw	r30, r14
    291e:	83 89       	ldd	r24, Z+19	; 0x13
    2920:	88 23       	and	r24, r24
    2922:	41 f0       	breq	.+16     	; 0x2934 <xQueueGenericSend+0x66>
    2924:	c7 01       	movw	r24, r14
    2926:	43 96       	adiw	r24, 0x13	; 19
    2928:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskRemoveFromEventList>
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	11 f4       	brne	.+4      	; 0x2934 <xQueueGenericSend+0x66>
    2930:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2934:	0f 90       	pop	r0
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	56 c0       	rjmp	.+172    	; 0x29e8 <xQueueGenericSend+0x11a>
    293c:	8e 81       	ldd	r24, Y+6	; 0x06
    293e:	9f 81       	ldd	r25, Y+7	; 0x07
    2940:	a8 85       	ldd	r26, Y+8	; 0x08
    2942:	b9 85       	ldd	r27, Y+9	; 0x09
    2944:	89 2b       	or	r24, r25
    2946:	8a 2b       	or	r24, r26
    2948:	8b 2b       	or	r24, r27
    294a:	21 f4       	brne	.+8      	; 0x2954 <xQueueGenericSend+0x86>
    294c:	0f 90       	pop	r0
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	4a c0       	rjmp	.+148    	; 0x29e8 <xQueueGenericSend+0x11a>
    2954:	11 11       	cpse	r17, r1
    2956:	05 c0       	rjmp	.+10     	; 0x2962 <xQueueGenericSend+0x94>
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSetTimeOutState>
    2960:	11 e0       	ldi	r17, 0x01	; 1
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	0f 92       	push	r0
    2970:	f7 01       	movw	r30, r14
    2972:	81 a1       	ldd	r24, Z+33	; 0x21
    2974:	8f 3f       	cpi	r24, 0xFF	; 255
    2976:	09 f4       	brne	.+2      	; 0x297a <xQueueGenericSend+0xac>
    2978:	11 a2       	std	Z+33, r1	; 0x21
    297a:	f7 01       	movw	r30, r14
    297c:	82 a1       	ldd	r24, Z+34	; 0x22
    297e:	8f 3f       	cpi	r24, 0xFF	; 255
    2980:	09 f4       	brne	.+2      	; 0x2984 <xQueueGenericSend+0xb6>
    2982:	12 a2       	std	Z+34, r1	; 0x22
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	be 01       	movw	r22, r28
    298a:	6a 5f       	subi	r22, 0xFA	; 250
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	ce 01       	movw	r24, r28
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <xTaskCheckForTimeOut>
    2996:	81 11       	cpse	r24, r1
    2998:	21 c0       	rjmp	.+66     	; 0x29dc <xQueueGenericSend+0x10e>
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	0f 92       	push	r0
    29a0:	f7 01       	movw	r30, r14
    29a2:	96 8d       	ldd	r25, Z+30	; 0x1e
    29a4:	0f 90       	pop	r0
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	87 8d       	ldd	r24, Z+31	; 0x1f
    29aa:	98 13       	cpse	r25, r24
    29ac:	11 c0       	rjmp	.+34     	; 0x29d0 <xQueueGenericSend+0x102>
    29ae:	4e 81       	ldd	r20, Y+6	; 0x06
    29b0:	5f 81       	ldd	r21, Y+7	; 0x07
    29b2:	68 85       	ldd	r22, Y+8	; 0x08
    29b4:	79 85       	ldd	r23, Y+9	; 0x09
    29b6:	c6 01       	movw	r24, r12
    29b8:	0e 94 03 1a 	call	0x3406	; 0x3406 <vTaskPlaceOnEventList>
    29bc:	c7 01       	movw	r24, r14
    29be:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    29c2:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    29c6:	81 11       	cpse	r24, r1
    29c8:	9c cf       	rjmp	.-200    	; 0x2902 <xQueueGenericSend+0x34>
    29ca:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    29ce:	99 cf       	rjmp	.-206    	; 0x2902 <xQueueGenericSend+0x34>
    29d0:	c7 01       	movw	r24, r14
    29d2:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    29d6:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    29da:	93 cf       	rjmp	.-218    	; 0x2902 <xQueueGenericSend+0x34>
    29dc:	c7 01       	movw	r24, r14
    29de:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    29e2:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	29 96       	adiw	r28, 0x09	; 9
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	ff 90       	pop	r15
    29f8:	ef 90       	pop	r14
    29fa:	df 90       	pop	r13
    29fc:	cf 90       	pop	r12
    29fe:	bf 90       	pop	r11
    2a00:	af 90       	pop	r10
    2a02:	08 95       	ret

00002a04 <xQueueGenericReceive>:
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	cf 92       	push	r12
    2a0a:	df 92       	push	r13
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	29 97       	sbiw	r28, 0x09	; 9
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	7c 01       	movw	r14, r24
    2a24:	5b 01       	movw	r10, r22
    2a26:	2e 83       	std	Y+6, r18	; 0x06
    2a28:	3f 83       	std	Y+7, r19	; 0x07
    2a2a:	48 87       	std	Y+8, r20	; 0x08
    2a2c:	59 87       	std	Y+9, r21	; 0x09
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
    2a30:	6c 01       	movw	r12, r24
    2a32:	83 e1       	ldi	r24, 0x13	; 19
    2a34:	c8 0e       	add	r12, r24
    2a36:	d1 1c       	adc	r13, r1
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	0f 92       	push	r0
    2a3e:	f7 01       	movw	r30, r14
    2a40:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a42:	88 23       	and	r24, r24
    2a44:	99 f1       	breq	.+102    	; 0x2aac <xQueueGenericReceive+0xa8>
    2a46:	c6 80       	ldd	r12, Z+6	; 0x06
    2a48:	d7 80       	ldd	r13, Z+7	; 0x07
    2a4a:	b5 01       	movw	r22, r10
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	0e 94 99 13 	call	0x2732	; 0x2732 <prvCopyDataFromQueue>
    2a52:	01 11       	cpse	r16, r1
    2a54:	1a c0       	rjmp	.+52     	; 0x2a8a <xQueueGenericReceive+0x86>
    2a56:	f7 01       	movw	r30, r14
    2a58:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	86 8f       	std	Z+30, r24	; 0x1e
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	89 2b       	or	r24, r25
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <xQueueGenericReceive+0x6c>
    2a66:	0e 94 07 1b 	call	0x360e	; 0x360e <xTaskGetCurrentTaskHandle>
    2a6a:	f7 01       	movw	r30, r14
    2a6c:	82 83       	std	Z+2, r24	; 0x02
    2a6e:	93 83       	std	Z+3, r25	; 0x03
    2a70:	f7 01       	movw	r30, r14
    2a72:	80 85       	ldd	r24, Z+8	; 0x08
    2a74:	88 23       	and	r24, r24
    2a76:	b1 f0       	breq	.+44     	; 0x2aa4 <xQueueGenericReceive+0xa0>
    2a78:	c7 01       	movw	r24, r14
    2a7a:	08 96       	adiw	r24, 0x08	; 8
    2a7c:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskRemoveFromEventList>
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	81 f4       	brne	.+32     	; 0x2aa4 <xQueueGenericReceive+0xa0>
    2a84:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <xQueueGenericReceive+0xa0>
    2a8a:	f7 01       	movw	r30, r14
    2a8c:	c6 82       	std	Z+6, r12	; 0x06
    2a8e:	d7 82       	std	Z+7, r13	; 0x07
    2a90:	83 89       	ldd	r24, Z+19	; 0x13
    2a92:	88 23       	and	r24, r24
    2a94:	39 f0       	breq	.+14     	; 0x2aa4 <xQueueGenericReceive+0xa0>
    2a96:	c7 01       	movw	r24, r14
    2a98:	43 96       	adiw	r24, 0x13	; 19
    2a9a:	0e 94 2d 1a 	call	0x345a	; 0x345a <xTaskRemoveFromEventList>
    2a9e:	81 11       	cpse	r24, r1
    2aa0:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2aa4:	0f 90       	pop	r0
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	62 c0       	rjmp	.+196    	; 0x2b70 <xQueueGenericReceive+0x16c>
    2aac:	8e 81       	ldd	r24, Y+6	; 0x06
    2aae:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab0:	a8 85       	ldd	r26, Y+8	; 0x08
    2ab2:	b9 85       	ldd	r27, Y+9	; 0x09
    2ab4:	89 2b       	or	r24, r25
    2ab6:	8a 2b       	or	r24, r26
    2ab8:	8b 2b       	or	r24, r27
    2aba:	21 f4       	brne	.+8      	; 0x2ac4 <xQueueGenericReceive+0xc0>
    2abc:	0f 90       	pop	r0
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	56 c0       	rjmp	.+172    	; 0x2b70 <xQueueGenericReceive+0x16c>
    2ac4:	11 11       	cpse	r17, r1
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <xQueueGenericReceive+0xce>
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSetTimeOutState>
    2ad0:	11 e0       	ldi	r17, 0x01	; 1
    2ad2:	0f 90       	pop	r0
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	0f 92       	push	r0
    2ae0:	f7 01       	movw	r30, r14
    2ae2:	81 a1       	ldd	r24, Z+33	; 0x21
    2ae4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <xQueueGenericReceive+0xe6>
    2ae8:	11 a2       	std	Z+33, r1	; 0x21
    2aea:	f7 01       	movw	r30, r14
    2aec:	82 a1       	ldd	r24, Z+34	; 0x22
    2aee:	8f 3f       	cpi	r24, 0xFF	; 255
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <xQueueGenericReceive+0xf0>
    2af2:	12 a2       	std	Z+34, r1	; 0x22
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	be 01       	movw	r22, r28
    2afa:	6a 5f       	subi	r22, 0xFA	; 250
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	ce 01       	movw	r24, r28
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <xTaskCheckForTimeOut>
    2b06:	81 11       	cpse	r24, r1
    2b08:	2d c0       	rjmp	.+90     	; 0x2b64 <xQueueGenericReceive+0x160>
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	0f 92       	push	r0
    2b10:	f7 01       	movw	r30, r14
    2b12:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b14:	0f 90       	pop	r0
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	81 11       	cpse	r24, r1
    2b1a:	1e c0       	rjmp	.+60     	; 0x2b58 <xQueueGenericReceive+0x154>
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	89 2b       	or	r24, r25
    2b22:	49 f4       	brne	.+18     	; 0x2b36 <xQueueGenericReceive+0x132>
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	0f 92       	push	r0
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <vTaskPriorityInherit>
    2b32:	0f 90       	pop	r0
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	4e 81       	ldd	r20, Y+6	; 0x06
    2b38:	5f 81       	ldd	r21, Y+7	; 0x07
    2b3a:	68 85       	ldd	r22, Y+8	; 0x08
    2b3c:	79 85       	ldd	r23, Y+9	; 0x09
    2b3e:	c6 01       	movw	r24, r12
    2b40:	0e 94 03 1a 	call	0x3406	; 0x3406 <vTaskPlaceOnEventList>
    2b44:	c7 01       	movw	r24, r14
    2b46:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    2b4a:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    2b4e:	81 11       	cpse	r24, r1
    2b50:	73 cf       	rjmp	.-282    	; 0x2a38 <xQueueGenericReceive+0x34>
    2b52:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2b56:	70 cf       	rjmp	.-288    	; 0x2a38 <xQueueGenericReceive+0x34>
    2b58:	c7 01       	movw	r24, r14
    2b5a:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    2b5e:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    2b62:	6a cf       	rjmp	.-300    	; 0x2a38 <xQueueGenericReceive+0x34>
    2b64:	c7 01       	movw	r24, r14
    2b66:	0e 94 b3 13 	call	0x2766	; 0x2766 <prvUnlockQueue>
    2b6a:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	29 96       	adiw	r28, 0x09	; 9
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
    2b86:	bf 90       	pop	r11
    2b88:	af 90       	pop	r10
    2b8a:	08 95       	ret

00002b8c <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2b92:	fc 01       	movw	r30, r24
    2b94:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2b9a:	08 95       	ret

00002b9c <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2b9c:	cc e5       	ldi	r28, 0x5C	; 92
    2b9e:	d1 e3       	ldi	r29, 0x31	; 49
    2ba0:	88 81       	ld	r24, Y
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	e8 f3       	brcs	.-6      	; 0x2ba0 <prvIdleTask+0x4>
    2ba6:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2baa:	fa cf       	rjmp	.-12     	; 0x2ba0 <prvIdleTask+0x4>

00002bac <prvAddCurrentTaskToDelayedList>:
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	6b 01       	movw	r12, r22
    2bb6:	7c 01       	movw	r14, r24
    2bb8:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    2bbc:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2bc0:	62 83       	std	Z+2, r22	; 0x02
    2bc2:	73 83       	std	Z+3, r23	; 0x03
    2bc4:	84 83       	std	Z+4, r24	; 0x04
    2bc6:	95 83       	std	Z+5, r25	; 0x05
    2bc8:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    2bcc:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    2bd0:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    2bd4:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    2bd8:	c8 16       	cp	r12, r24
    2bda:	d9 06       	cpc	r13, r25
    2bdc:	ea 06       	cpc	r14, r26
    2bde:	fb 06       	cpc	r15, r27
    2be0:	68 f4       	brcc	.+26     	; 0x2bfc <prvAddCurrentTaskToDelayedList+0x50>
    2be2:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <pxCurrentTCB>
    2be6:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2bea:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <pxOverflowDelayedTaskList>
    2bee:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <pxOverflowDelayedTaskList+0x1>
    2bf2:	6e 5f       	subi	r22, 0xFE	; 254
    2bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <vListInsert>
    2bfa:	21 c0       	rjmp	.+66     	; 0x2c3e <prvAddCurrentTaskToDelayedList+0x92>
    2bfc:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <pxCurrentTCB>
    2c00:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2c04:	80 91 44 31 	lds	r24, 0x3144	; 0x803144 <pxDelayedTaskList>
    2c08:	90 91 45 31 	lds	r25, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    2c0c:	6e 5f       	subi	r22, 0xFE	; 254
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	0e 94 61 11 	call	0x22c2	; 0x22c2 <vListInsert>
    2c14:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2c18:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2c1c:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2c20:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2c24:	c8 16       	cp	r12, r24
    2c26:	d9 06       	cpc	r13, r25
    2c28:	ea 06       	cpc	r14, r26
    2c2a:	fb 06       	cpc	r15, r27
    2c2c:	40 f4       	brcc	.+16     	; 0x2c3e <prvAddCurrentTaskToDelayedList+0x92>
    2c2e:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2c32:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2c36:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2c3a:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	08 95       	ret

00002c48 <xTaskGenericCreate>:
    2c48:	4f 92       	push	r4
    2c4a:	5f 92       	push	r5
    2c4c:	6f 92       	push	r6
    2c4e:	7f 92       	push	r7
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	5c 01       	movw	r10, r24
    2c6a:	4b 01       	movw	r8, r22
    2c6c:	3a 01       	movw	r6, r20
    2c6e:	29 01       	movw	r4, r18
    2c70:	88 e2       	ldi	r24, 0x28	; 40
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    2c78:	ec 01       	movw	r28, r24
    2c7a:	89 2b       	or	r24, r25
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <xTaskGenericCreate+0x38>
    2c7e:	d4 c0       	rjmp	.+424    	; 0x2e28 <xTaskGenericCreate+0x1e0>
    2c80:	c1 14       	cp	r12, r1
    2c82:	d1 04       	cpc	r13, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <xTaskGenericCreate+0x40>
    2c86:	cc c0       	rjmp	.+408    	; 0x2e20 <xTaskGenericCreate+0x1d8>
    2c88:	c3 01       	movw	r24, r6
    2c8a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <pvPortMalloc>
    2c8e:	8b 8f       	std	Y+27, r24	; 0x1b
    2c90:	9c 8f       	std	Y+28, r25	; 0x1c
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <xTaskGenericCreate+0x56>
    2c96:	ce 01       	movw	r24, r28
    2c98:	0e 94 ed 10 	call	0x21da	; 0x21da <vPortFree>
    2c9c:	c5 c0       	rjmp	.+394    	; 0x2e28 <xTaskGenericCreate+0x1e0>
    2c9e:	a3 01       	movw	r20, r6
    2ca0:	61 e1       	ldi	r22, 0x11	; 17
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	0e 94 df 1b 	call	0x37be	; 0x37be <memset>
    2ca8:	93 01       	movw	r18, r6
    2caa:	21 50       	subi	r18, 0x01	; 1
    2cac:	31 09       	sbc	r19, r1
    2cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb2:	3c 01       	movw	r6, r24
    2cb4:	62 0e       	add	r6, r18
    2cb6:	73 1e       	adc	r7, r19
    2cb8:	4a e0       	ldi	r20, 0x0A	; 10
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	b4 01       	movw	r22, r8
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	4d 96       	adiw	r24, 0x1d	; 29
    2cc2:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <strncpy>
    2cc6:	1e a2       	std	Y+38, r1	; 0x26
    2cc8:	10 2f       	mov	r17, r16
    2cca:	04 30       	cpi	r16, 0x04	; 4
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <xTaskGenericCreate+0x88>
    2cce:	13 e0       	ldi	r17, 0x03	; 3
    2cd0:	1a 8f       	std	Y+26, r17	; 0x1a
    2cd2:	1f a3       	std	Y+39, r17	; 0x27
    2cd4:	6e 01       	movw	r12, r28
    2cd6:	22 e0       	ldi	r18, 0x02	; 2
    2cd8:	c2 0e       	add	r12, r18
    2cda:	d1 1c       	adc	r13, r1
    2cdc:	c6 01       	movw	r24, r12
    2cde:	0e 94 36 11 	call	0x226c	; 0x226c <vListInitialiseItem>
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	0e 96       	adiw	r24, 0x0e	; 14
    2ce6:	0e 94 36 11 	call	0x226c	; 0x226c <vListInitialiseItem>
    2cea:	ca 87       	std	Y+10, r28	; 0x0a
    2cec:	db 87       	std	Y+11, r29	; 0x0b
    2cee:	84 e0       	ldi	r24, 0x04	; 4
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 e0       	ldi	r26, 0x00	; 0
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	81 1b       	sub	r24, r17
    2cf8:	91 09       	sbc	r25, r1
    2cfa:	a1 09       	sbc	r26, r1
    2cfc:	b1 09       	sbc	r27, r1
    2cfe:	8e 87       	std	Y+14, r24	; 0x0e
    2d00:	9f 87       	std	Y+15, r25	; 0x0f
    2d02:	a8 8b       	std	Y+16, r26	; 0x10
    2d04:	b9 8b       	std	Y+17, r27	; 0x11
    2d06:	ce 8b       	std	Y+22, r28	; 0x16
    2d08:	df 8b       	std	Y+23, r29	; 0x17
    2d0a:	a2 01       	movw	r20, r4
    2d0c:	b5 01       	movw	r22, r10
    2d0e:	c3 01       	movw	r24, r6
    2d10:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <pxPortInitialiseStack>
    2d14:	88 83       	st	Y, r24
    2d16:	99 83       	std	Y+1, r25	; 0x01
    2d18:	e1 14       	cp	r14, r1
    2d1a:	f1 04       	cpc	r15, r1
    2d1c:	19 f0       	breq	.+6      	; 0x2d24 <xTaskGenericCreate+0xdc>
    2d1e:	f7 01       	movw	r30, r14
    2d20:	c0 83       	st	Z, r28
    2d22:	d1 83       	std	Z+1, r29	; 0x01
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	0f 92       	push	r0
    2d2a:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxCurrentNumberOfTasks>
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxCurrentNumberOfTasks>
    2d34:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    2d38:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2d3c:	89 2b       	or	r24, r25
    2d3e:	89 f5       	brne	.+98     	; 0x2da2 <xTaskGenericCreate+0x15a>
    2d40:	c0 93 88 31 	sts	0x3188, r28	; 0x803188 <pxCurrentTCB>
    2d44:	d0 93 89 31 	sts	0x3189, r29	; 0x803189 <pxCurrentTCB+0x1>
    2d48:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxCurrentNumberOfTasks>
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	c1 f5       	brne	.+112    	; 0x2dc0 <xTaskGenericCreate+0x178>
    2d50:	8c e5       	ldi	r24, 0x5C	; 92
    2d52:	91 e3       	ldi	r25, 0x31	; 49
    2d54:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d58:	87 e6       	ldi	r24, 0x67	; 103
    2d5a:	91 e3       	ldi	r25, 0x31	; 49
    2d5c:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d60:	82 e7       	ldi	r24, 0x72	; 114
    2d62:	91 e3       	ldi	r25, 0x31	; 49
    2d64:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d68:	8d e7       	ldi	r24, 0x7D	; 125
    2d6a:	91 e3       	ldi	r25, 0x31	; 49
    2d6c:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d70:	81 e5       	ldi	r24, 0x51	; 81
    2d72:	91 e3       	ldi	r25, 0x31	; 49
    2d74:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d78:	86 e4       	ldi	r24, 0x46	; 70
    2d7a:	91 e3       	ldi	r25, 0x31	; 49
    2d7c:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d80:	87 e3       	ldi	r24, 0x37	; 55
    2d82:	91 e3       	ldi	r25, 0x31	; 49
    2d84:	0e 94 25 11 	call	0x224a	; 0x224a <vListInitialise>
    2d88:	81 e5       	ldi	r24, 0x51	; 81
    2d8a:	91 e3       	ldi	r25, 0x31	; 49
    2d8c:	80 93 44 31 	sts	0x3144, r24	; 0x803144 <pxDelayedTaskList>
    2d90:	90 93 45 31 	sts	0x3145, r25	; 0x803145 <pxDelayedTaskList+0x1>
    2d94:	86 e4       	ldi	r24, 0x46	; 70
    2d96:	91 e3       	ldi	r25, 0x31	; 49
    2d98:	80 93 42 31 	sts	0x3142, r24	; 0x803142 <pxOverflowDelayedTaskList>
    2d9c:	90 93 43 31 	sts	0x3143, r25	; 0x803143 <pxOverflowDelayedTaskList+0x1>
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <xTaskGenericCreate+0x178>
    2da2:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <xSchedulerRunning>
    2da6:	81 11       	cpse	r24, r1
    2da8:	0b c0       	rjmp	.+22     	; 0x2dc0 <xTaskGenericCreate+0x178>
    2daa:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    2dae:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2db4:	08 17       	cp	r16, r24
    2db6:	20 f0       	brcs	.+8      	; 0x2dc0 <xTaskGenericCreate+0x178>
    2db8:	c0 93 88 31 	sts	0x3188, r28	; 0x803188 <pxCurrentTCB>
    2dbc:	d0 93 89 31 	sts	0x3189, r29	; 0x803189 <pxCurrentTCB+0x1>
    2dc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dc2:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <uxTopUsedPriority>
    2dc6:	98 17       	cp	r25, r24
    2dc8:	10 f4       	brcc	.+4      	; 0x2dce <xTaskGenericCreate+0x186>
    2dca:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <uxTopUsedPriority>
    2dce:	90 91 28 31 	lds	r25, 0x3128	; 0x803128 <uxTaskNumber>
    2dd2:	9f 5f       	subi	r25, 0xFF	; 255
    2dd4:	90 93 28 31 	sts	0x3128, r25	; 0x803128 <uxTaskNumber>
    2dd8:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    2ddc:	98 17       	cp	r25, r24
    2dde:	10 f4       	brcc	.+4      	; 0x2de4 <xTaskGenericCreate+0x19c>
    2de0:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    2de4:	fb e0       	ldi	r31, 0x0B	; 11
    2de6:	8f 9f       	mul	r24, r31
    2de8:	c0 01       	movw	r24, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	b6 01       	movw	r22, r12
    2dee:	84 5a       	subi	r24, 0xA4	; 164
    2df0:	9e 4c       	sbci	r25, 0xCE	; 206
    2df2:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <xSchedulerRunning>
    2dfe:	88 23       	and	r24, r24
    2e00:	59 f0       	breq	.+22     	; 0x2e18 <xTaskGenericCreate+0x1d0>
    2e02:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    2e06:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2e0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e0c:	80 17       	cp	r24, r16
    2e0e:	30 f4       	brcc	.+12     	; 0x2e1c <xTaskGenericCreate+0x1d4>
    2e10:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	09 c0       	rjmp	.+18     	; 0x2e2a <xTaskGenericCreate+0x1e2>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <xTaskGenericCreate+0x1e2>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <xTaskGenericCreate+0x1e2>
    2e20:	cb 8e       	std	Y+27, r12	; 0x1b
    2e22:	dc 8e       	std	Y+28, r13	; 0x1c
    2e24:	c6 01       	movw	r24, r12
    2e26:	3b cf       	rjmp	.-394    	; 0x2c9e <xTaskGenericCreate+0x56>
    2e28:	8f ef       	ldi	r24, 0xFF	; 255
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	5f 90       	pop	r5
    2e48:	4f 90       	pop	r4
    2e4a:	08 95       	ret

00002e4c <uxTaskPriorityGet>:
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	0f 92       	push	r0
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	21 f4       	brne	.+8      	; 0x2e5e <uxTaskPriorityGet+0x12>
    2e56:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    2e5a:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	fc 01       	movw	r30, r24
    2e64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e66:	08 95       	ret

00002e68 <vTaskStartScheduler>:
    2e68:	af 92       	push	r10
    2e6a:	bf 92       	push	r11
    2e6c:	cf 92       	push	r12
    2e6e:	df 92       	push	r13
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	0f 93       	push	r16
    2e76:	a1 2c       	mov	r10, r1
    2e78:	b1 2c       	mov	r11, r1
    2e7a:	c1 2c       	mov	r12, r1
    2e7c:	d1 2c       	mov	r13, r1
    2e7e:	0f 2e       	mov	r0, r31
    2e80:	f5 e3       	ldi	r31, 0x35	; 53
    2e82:	ef 2e       	mov	r14, r31
    2e84:	f1 e3       	ldi	r31, 0x31	; 49
    2e86:	ff 2e       	mov	r15, r31
    2e88:	f0 2d       	mov	r31, r0
    2e8a:	00 e0       	ldi	r16, 0x00	; 0
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	44 e6       	ldi	r20, 0x64	; 100
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	69 ee       	ldi	r22, 0xE9	; 233
    2e96:	70 e2       	ldi	r23, 0x20	; 32
    2e98:	8e ec       	ldi	r24, 0xCE	; 206
    2e9a:	95 e1       	ldi	r25, 0x15	; 21
    2e9c:	0e 94 24 16 	call	0x2c48	; 0x2c48 <xTaskGenericCreate>
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	69 f4       	brne	.+26     	; 0x2ebe <vTaskStartScheduler+0x56>
    2ea4:	f8 94       	cli
    2ea6:	80 93 2d 31 	sts	0x312D, r24	; 0x80312d <xSchedulerRunning>
    2eaa:	10 92 30 31 	sts	0x3130, r1	; 0x803130 <xTickCount>
    2eae:	10 92 31 31 	sts	0x3131, r1	; 0x803131 <xTickCount+0x1>
    2eb2:	10 92 32 31 	sts	0x3132, r1	; 0x803132 <xTickCount+0x2>
    2eb6:	10 92 33 31 	sts	0x3133, r1	; 0x803133 <xTickCount+0x3>
    2eba:	0e 94 48 12 	call	0x2490	; 0x2490 <xPortStartScheduler>
    2ebe:	0f 91       	pop	r16
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	bf 90       	pop	r11
    2eca:	af 90       	pop	r10
    2ecc:	08 95       	ret

00002ece <vTaskSuspendAll>:
    2ece:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <uxSchedulerSuspended>
    2ed8:	08 95       	ret

00002eda <xTaskGetTickCount>:
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	0f 92       	push	r0
    2ee0:	60 91 30 31 	lds	r22, 0x3130	; 0x803130 <xTickCount>
    2ee4:	70 91 31 31 	lds	r23, 0x3131	; 0x803131 <xTickCount+0x1>
    2ee8:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount+0x2>
    2eec:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x3>
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	08 95       	ret

00002ef6 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	21 f4       	brne	.+8      	; 0x2f02 <pcTaskGetTaskName+0xc>
    2efa:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    2efe:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    2f02:	4d 96       	adiw	r24, 0x1d	; 29
    2f04:	08 95       	ret

00002f06 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    2f06:	80 91 35 31 	lds	r24, 0x3135	; 0x803135 <xIdleTaskHandle>
    2f0a:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <xIdleTaskHandle+0x1>
    2f0e:	08 95       	ret

00002f10 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2f10:	ff 92       	push	r15
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2f1a:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    2f1e:	81 11       	cpse	r24, r1
    2f20:	ed c0       	rjmp	.+474    	; 0x30fc <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    2f22:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    2f26:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    2f2a:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    2f2e:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	a1 1d       	adc	r26, r1
    2f36:	b1 1d       	adc	r27, r1
    2f38:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xTickCount>
    2f3c:	90 93 31 31 	sts	0x3131, r25	; 0x803131 <xTickCount+0x1>
    2f40:	a0 93 32 31 	sts	0x3132, r26	; 0x803132 <xTickCount+0x2>
    2f44:	b0 93 33 31 	sts	0x3133, r27	; 0x803133 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    2f48:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    2f4c:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    2f50:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    2f54:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    2f58:	89 2b       	or	r24, r25
    2f5a:	8a 2b       	or	r24, r26
    2f5c:	8b 2b       	or	r24, r27
    2f5e:	f1 f5       	brne	.+124    	; 0x2fdc <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2f60:	80 91 44 31 	lds	r24, 0x3144	; 0x803144 <pxDelayedTaskList>
    2f64:	90 91 45 31 	lds	r25, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2f68:	20 91 42 31 	lds	r18, 0x3142	; 0x803142 <pxOverflowDelayedTaskList>
    2f6c:	30 91 43 31 	lds	r19, 0x3143	; 0x803143 <pxOverflowDelayedTaskList+0x1>
    2f70:	20 93 44 31 	sts	0x3144, r18	; 0x803144 <pxDelayedTaskList>
    2f74:	30 93 45 31 	sts	0x3145, r19	; 0x803145 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    2f78:	80 93 42 31 	sts	0x3142, r24	; 0x803142 <pxOverflowDelayedTaskList>
    2f7c:	90 93 43 31 	sts	0x3143, r25	; 0x803143 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    2f80:	80 91 29 31 	lds	r24, 0x3129	; 0x803129 <xNumOfOverflows>
    2f84:	8f 5f       	subi	r24, 0xFF	; 255
    2f86:	80 93 29 31 	sts	0x3129, r24	; 0x803129 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f8a:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    2f8e:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    2f92:	80 81       	ld	r24, Z
    2f94:	81 11       	cpse	r24, r1
    2f96:	0c c0       	rjmp	.+24     	; 0x2fb0 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
    2f9a:	9f ef       	ldi	r25, 0xFF	; 255
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2fa2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2fa6:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2faa:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2fae:	16 c0       	rjmp	.+44     	; 0x2fdc <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2fb0:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    2fb4:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    2fb8:	07 80       	ldd	r0, Z+7	; 0x07
    2fba:	f0 85       	ldd	r31, Z+8	; 0x08
    2fbc:	e0 2d       	mov	r30, r0
    2fbe:	00 84       	ldd	r0, Z+8	; 0x08
    2fc0:	f1 85       	ldd	r31, Z+9	; 0x09
    2fc2:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	a4 81       	ldd	r26, Z+4	; 0x04
    2fca:	b5 81       	ldd	r27, Z+5	; 0x05
    2fcc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2fd0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2fd4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2fd8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2fdc:	40 91 30 31 	lds	r20, 0x3130	; 0x803130 <xTickCount>
    2fe0:	50 91 31 31 	lds	r21, 0x3131	; 0x803131 <xTickCount+0x1>
    2fe4:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount+0x2>
    2fe8:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x3>
    2fec:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2ff0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2ff4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2ff8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2ffc:	48 17       	cp	r20, r24
    2ffe:	59 07       	cpc	r21, r25
    3000:	6a 07       	cpc	r22, r26
    3002:	7b 07       	cpc	r23, r27
    3004:	08 f4       	brcc	.+2      	; 0x3008 <vTaskIncrementTick+0xf8>
    3006:	7f c0       	rjmp	.+254    	; 0x3106 <vTaskIncrementTick+0x1f6>
    3008:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    300c:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    3010:	80 81       	ld	r24, Z
    3012:	88 23       	and	r24, r24
    3014:	f9 f0       	breq	.+62     	; 0x3054 <vTaskIncrementTick+0x144>
    3016:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    301a:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    301e:	07 80       	ldd	r0, Z+7	; 0x07
    3020:	f0 85       	ldd	r31, Z+8	; 0x08
    3022:	e0 2d       	mov	r30, r0
    3024:	c0 85       	ldd	r28, Z+8	; 0x08
    3026:	d1 85       	ldd	r29, Z+9	; 0x09
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	ac 81       	ldd	r26, Y+4	; 0x04
    302e:	bd 81       	ldd	r27, Y+5	; 0x05
    3030:	40 91 30 31 	lds	r20, 0x3130	; 0x803130 <xTickCount>
    3034:	50 91 31 31 	lds	r21, 0x3131	; 0x803131 <xTickCount+0x1>
    3038:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount+0x2>
    303c:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x3>
    3040:	48 17       	cp	r20, r24
    3042:	59 07       	cpc	r21, r25
    3044:	6a 07       	cpc	r22, r26
    3046:	7b 07       	cpc	r23, r27
    3048:	58 f1       	brcs	.+86     	; 0x30a0 <vTaskIncrementTick+0x190>
    304a:	0f 2e       	mov	r0, r31
    304c:	fb e0       	ldi	r31, 0x0B	; 11
    304e:	ff 2e       	mov	r15, r31
    3050:	f0 2d       	mov	r31, r0
    3052:	2f c0       	rjmp	.+94     	; 0x30b2 <vTaskIncrementTick+0x1a2>
    3054:	8f ef       	ldi	r24, 0xFF	; 255
    3056:	9f ef       	ldi	r25, 0xFF	; 255
    3058:	dc 01       	movw	r26, r24
    305a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    305e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3062:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3066:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    306a:	4d c0       	rjmp	.+154    	; 0x3106 <vTaskIncrementTick+0x1f6>
    306c:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    3070:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    3074:	07 80       	ldd	r0, Z+7	; 0x07
    3076:	f0 85       	ldd	r31, Z+8	; 0x08
    3078:	e0 2d       	mov	r30, r0
    307a:	c0 85       	ldd	r28, Z+8	; 0x08
    307c:	d1 85       	ldd	r29, Z+9	; 0x09
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	ac 81       	ldd	r26, Y+4	; 0x04
    3084:	bd 81       	ldd	r27, Y+5	; 0x05
    3086:	40 91 30 31 	lds	r20, 0x3130	; 0x803130 <xTickCount>
    308a:	50 91 31 31 	lds	r21, 0x3131	; 0x803131 <xTickCount+0x1>
    308e:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount+0x2>
    3092:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x3>
    3096:	48 17       	cp	r20, r24
    3098:	59 07       	cpc	r21, r25
    309a:	6a 07       	cpc	r22, r26
    309c:	7b 07       	cpc	r23, r27
    309e:	48 f4       	brcc	.+18     	; 0x30b2 <vTaskIncrementTick+0x1a2>
    30a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    30a4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    30a8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    30ac:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    30b0:	2a c0       	rjmp	.+84     	; 0x3106 <vTaskIncrementTick+0x1f6>
    30b2:	8e 01       	movw	r16, r28
    30b4:	0e 5f       	subi	r16, 0xFE	; 254
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	c8 01       	movw	r24, r16
    30ba:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
    30be:	88 8d       	ldd	r24, Y+24	; 0x18
    30c0:	99 8d       	ldd	r25, Y+25	; 0x19
    30c2:	89 2b       	or	r24, r25
    30c4:	21 f0       	breq	.+8      	; 0x30ce <vTaskIncrementTick+0x1be>
    30c6:	ce 01       	movw	r24, r28
    30c8:	0e 96       	adiw	r24, 0x0e	; 14
    30ca:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
    30ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30d0:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    30d4:	98 17       	cp	r25, r24
    30d6:	10 f4       	brcc	.+4      	; 0x30dc <vTaskIncrementTick+0x1cc>
    30d8:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    30dc:	f8 9e       	mul	r15, r24
    30de:	c0 01       	movw	r24, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	b8 01       	movw	r22, r16
    30e4:	84 5a       	subi	r24, 0xA4	; 164
    30e6:	9e 4c       	sbci	r25, 0xCE	; 206
    30e8:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
    30ec:	e0 91 44 31 	lds	r30, 0x3144	; 0x803144 <pxDelayedTaskList>
    30f0:	f0 91 45 31 	lds	r31, 0x3145	; 0x803145 <pxDelayedTaskList+0x1>
    30f4:	80 81       	ld	r24, Z
    30f6:	81 11       	cpse	r24, r1
    30f8:	b9 cf       	rjmp	.-142    	; 0x306c <vTaskIncrementTick+0x15c>
    30fa:	ac cf       	rjmp	.-168    	; 0x3054 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    30fc:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <uxMissedTicks>
    3100:	8f 5f       	subi	r24, 0xFF	; 255
    3102:	80 93 2b 31 	sts	0x312B, r24	; 0x80312b <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	08 95       	ret

00003112 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3112:	cf 92       	push	r12
    3114:	df 92       	push	r13
    3116:	ef 92       	push	r14
    3118:	ff 92       	push	r15
    311a:	0f 93       	push	r16
    311c:	1f 93       	push	r17
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3128:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    312c:	81 50       	subi	r24, 0x01	; 1
    312e:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3132:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    3136:	81 11       	cpse	r24, r1
    3138:	60 c0       	rjmp	.+192    	; 0x31fa <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    313a:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxCurrentNumberOfTasks>
    313e:	81 11       	cpse	r24, r1
    3140:	2c c0       	rjmp	.+88     	; 0x319a <xTaskResumeAll+0x88>
    3142:	5e c0       	rjmp	.+188    	; 0x3200 <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3144:	d7 01       	movw	r26, r14
    3146:	17 96       	adiw	r26, 0x07	; 7
    3148:	ed 91       	ld	r30, X+
    314a:	fc 91       	ld	r31, X
    314c:	18 97       	sbiw	r26, 0x08	; 8
    314e:	c0 85       	ldd	r28, Z+8	; 0x08
    3150:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    3152:	ce 01       	movw	r24, r28
    3154:	0e 96       	adiw	r24, 0x0e	; 14
    3156:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    315a:	8e 01       	movw	r16, r28
    315c:	0e 5f       	subi	r16, 0xFE	; 254
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	c8 01       	movw	r24, r16
    3162:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3166:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3168:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    316c:	98 17       	cp	r25, r24
    316e:	10 f4       	brcc	.+4      	; 0x3174 <xTaskResumeAll+0x62>
    3170:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    3174:	d8 9e       	mul	r13, r24
    3176:	c0 01       	movw	r24, r0
    3178:	11 24       	eor	r1, r1
    317a:	b8 01       	movw	r22, r16
    317c:	84 5a       	subi	r24, 0xA4	; 164
    317e:	9e 4c       	sbci	r25, 0xCE	; 206
    3180:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3184:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    3188:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    318c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    318e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3190:	98 17       	cp	r25, r24
    3192:	70 f0       	brcs	.+28     	; 0x31b0 <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3194:	cc 24       	eor	r12, r12
    3196:	c3 94       	inc	r12
    3198:	0b c0       	rjmp	.+22     	; 0x31b0 <xTaskResumeAll+0x9e>
    319a:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    319c:	0f 2e       	mov	r0, r31
    319e:	f7 e3       	ldi	r31, 0x37	; 55
    31a0:	ef 2e       	mov	r14, r31
    31a2:	f1 e3       	ldi	r31, 0x31	; 49
    31a4:	ff 2e       	mov	r15, r31
    31a6:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    31a8:	0f 2e       	mov	r0, r31
    31aa:	fb e0       	ldi	r31, 0x0B	; 11
    31ac:	df 2e       	mov	r13, r31
    31ae:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    31b0:	f7 01       	movw	r30, r14
    31b2:	80 81       	ld	r24, Z
    31b4:	81 11       	cpse	r24, r1
    31b6:	c6 cf       	rjmp	.-116    	; 0x3144 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31b8:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <uxMissedTicks>
    31bc:	88 23       	and	r24, r24
    31be:	81 f0       	breq	.+32     	; 0x31e0 <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31c0:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <uxMissedTicks>
    31c4:	88 23       	and	r24, r24
    31c6:	99 f0       	breq	.+38     	; 0x31ee <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    31c8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vTaskIncrementTick>
						--uxMissedTicks;
    31cc:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <uxMissedTicks>
    31d0:	81 50       	subi	r24, 0x01	; 1
    31d2:	80 93 2b 31 	sts	0x312B, r24	; 0x80312b <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31d6:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <uxMissedTicks>
    31da:	81 11       	cpse	r24, r1
    31dc:	f5 cf       	rjmp	.-22     	; 0x31c8 <xTaskResumeAll+0xb6>
    31de:	07 c0       	rjmp	.+14     	; 0x31ee <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    31e0:	f1 e0       	ldi	r31, 0x01	; 1
    31e2:	cf 16       	cp	r12, r31
    31e4:	21 f0       	breq	.+8      	; 0x31ee <xTaskResumeAll+0xdc>
    31e6:	80 91 2a 31 	lds	r24, 0x312A	; 0x80312a <xMissedYield>
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	41 f4       	brne	.+16     	; 0x31fe <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    31ee:	10 92 2a 31 	sts	0x312A, r1	; 0x80312a <xMissedYield>
					portYIELD_WITHIN_API();
    31f2:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	01 c0       	rjmp	.+2      	; 0x3200 <xTaskResumeAll+0xee>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3200:	0f 90       	pop	r0
    3202:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	08 95       	ret

00003216 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3216:	cf 92       	push	r12
    3218:	df 92       	push	r13
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	ec 01       	movw	r28, r24
    3224:	6a 01       	movw	r12, r20
    3226:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3228:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    322c:	88 81       	ld	r24, Y
    322e:	99 81       	ldd	r25, Y+1	; 0x01
    3230:	aa 81       	ldd	r26, Y+2	; 0x02
    3232:	bb 81       	ldd	r27, Y+3	; 0x03
    3234:	c8 0e       	add	r12, r24
    3236:	d9 1e       	adc	r13, r25
    3238:	ea 1e       	adc	r14, r26
    323a:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    323c:	40 91 30 31 	lds	r20, 0x3130	; 0x803130 <xTickCount>
    3240:	50 91 31 31 	lds	r21, 0x3131	; 0x803131 <xTickCount+0x1>
    3244:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount+0x2>
    3248:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x3>
    324c:	48 17       	cp	r20, r24
    324e:	59 07       	cpc	r21, r25
    3250:	6a 07       	cpc	r22, r26
    3252:	7b 07       	cpc	r23, r27
    3254:	b8 f4       	brcc	.+46     	; 0x3284 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3256:	c8 16       	cp	r12, r24
    3258:	d9 06       	cpc	r13, r25
    325a:	ea 06       	cpc	r14, r26
    325c:	fb 06       	cpc	r15, r27
    325e:	e0 f5       	brcc	.+120    	; 0x32d8 <vTaskDelayUntil+0xc2>
    3260:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    3264:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    3268:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    326c:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3270:	c8 82       	st	Y, r12
    3272:	d9 82       	std	Y+1, r13	; 0x01
    3274:	ea 82       	std	Y+2, r14	; 0x02
    3276:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3278:	8c 15       	cp	r24, r12
    327a:	9d 05       	cpc	r25, r13
    327c:	ae 05       	cpc	r26, r14
    327e:	bf 05       	cpc	r27, r15
    3280:	f8 f4       	brcc	.+62     	; 0x32c0 <vTaskDelayUntil+0xaa>
    3282:	13 c0       	rjmp	.+38     	; 0x32aa <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3284:	c8 16       	cp	r12, r24
    3286:	d9 06       	cpc	r13, r25
    3288:	ea 06       	cpc	r14, r26
    328a:	fb 06       	cpc	r15, r27
    328c:	00 f1       	brcs	.+64     	; 0x32ce <vTaskDelayUntil+0xb8>
    328e:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    3292:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    3296:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    329a:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    329e:	8c 15       	cp	r24, r12
    32a0:	9d 05       	cpc	r25, r13
    32a2:	ae 05       	cpc	r26, r14
    32a4:	bf 05       	cpc	r27, r15
    32a6:	98 f0       	brcs	.+38     	; 0x32ce <vTaskDelayUntil+0xb8>
    32a8:	17 c0       	rjmp	.+46     	; 0x32d8 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    32aa:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    32ae:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    32b2:	02 96       	adiw	r24, 0x02	; 2
    32b4:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    32b8:	c7 01       	movw	r24, r14
    32ba:	b6 01       	movw	r22, r12
    32bc:	0e 94 d6 15 	call	0x2bac	; 0x2bac <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    32c0:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    32c4:	81 11       	cpse	r24, r1
    32c6:	0d c0       	rjmp	.+26     	; 0x32e2 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    32c8:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
		}
	}
    32cc:	0a c0       	rjmp	.+20     	; 0x32e2 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    32ce:	c8 82       	st	Y, r12
    32d0:	d9 82       	std	Y+1, r13	; 0x01
    32d2:	ea 82       	std	Y+2, r14	; 0x02
    32d4:	fb 82       	std	Y+3, r15	; 0x03
    32d6:	e9 cf       	rjmp	.-46     	; 0x32aa <vTaskDelayUntil+0x94>
    32d8:	c8 82       	st	Y, r12
    32da:	d9 82       	std	Y+1, r13	; 0x01
    32dc:	ea 82       	std	Y+2, r14	; 0x02
    32de:	fb 82       	std	Y+3, r15	; 0x03
    32e0:	ef cf       	rjmp	.-34     	; 0x32c0 <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
    32ee:	08 95       	ret

000032f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    32f0:	cf 92       	push	r12
    32f2:	df 92       	push	r13
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	6b 01       	movw	r12, r22
    32fa:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    32fc:	67 2b       	or	r22, r23
    32fe:	68 2b       	or	r22, r24
    3300:	69 2b       	or	r22, r25
    3302:	e9 f0       	breq	.+58     	; 0x333e <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3304:	0e 94 67 17 	call	0x2ece	; 0x2ece <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3308:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    330c:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    3310:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    3314:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    3318:	c8 0e       	add	r12, r24
    331a:	d9 1e       	adc	r13, r25
    331c:	ea 1e       	adc	r14, r26
    331e:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3320:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    3324:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    3328:	02 96       	adiw	r24, 0x02	; 2
    332a:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    332e:	c7 01       	movw	r24, r14
    3330:	b6 01       	movw	r22, r12
    3332:	0e 94 d6 15 	call	0x2bac	; 0x2bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3336:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    333a:	81 11       	cpse	r24, r1
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    333e:	0e 94 86 12 	call	0x250c	; 0x250c <vPortYield>
		}
	}
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	08 95       	ret

0000334c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    334c:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    3350:	81 11       	cpse	r24, r1
    3352:	0c c0       	rjmp	.+24     	; 0x336c <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3354:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <uxTopReadyPriority>
    3358:	4b e0       	ldi	r20, 0x0B	; 11
    335a:	e4 9f       	mul	r30, r20
    335c:	f0 01       	movw	r30, r0
    335e:	11 24       	eor	r1, r1
    3360:	e4 5a       	subi	r30, 0xA4	; 164
    3362:	fe 4c       	sbci	r31, 0xCE	; 206
    3364:	80 81       	ld	r24, Z
    3366:	88 23       	and	r24, r24
    3368:	29 f0       	breq	.+10     	; 0x3374 <vTaskSwitchContext+0x28>
    336a:	14 c0       	rjmp	.+40     	; 0x3394 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 93 2a 31 	sts	0x312A, r24	; 0x80312a <xMissedYield>
    3372:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3374:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3376:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxTopReadyPriority>
    337a:	81 50       	subi	r24, 0x01	; 1
    337c:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3380:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <uxTopReadyPriority>
    3384:	9e 9f       	mul	r25, r30
    3386:	f0 01       	movw	r30, r0
    3388:	11 24       	eor	r1, r1
    338a:	e4 5a       	subi	r30, 0xA4	; 164
    338c:	fe 4c       	sbci	r31, 0xCE	; 206
    338e:	80 81       	ld	r24, Z
    3390:	88 23       	and	r24, r24
    3392:	89 f3       	breq	.-30     	; 0x3376 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3394:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxTopReadyPriority>
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	4b e0       	ldi	r20, 0x0B	; 11
    339e:	84 9f       	mul	r24, r20
    33a0:	c0 01       	movw	r24, r0
    33a2:	11 24       	eor	r1, r1
    33a4:	dc 01       	movw	r26, r24
    33a6:	a4 5a       	subi	r26, 0xA4	; 164
    33a8:	be 4c       	sbci	r27, 0xCE	; 206
    33aa:	11 96       	adiw	r26, 0x01	; 1
    33ac:	ed 91       	ld	r30, X+
    33ae:	fc 91       	ld	r31, X
    33b0:	12 97       	sbiw	r26, 0x02	; 2
    33b2:	04 80       	ldd	r0, Z+4	; 0x04
    33b4:	f5 81       	ldd	r31, Z+5	; 0x05
    33b6:	e0 2d       	mov	r30, r0
    33b8:	11 96       	adiw	r26, 0x01	; 1
    33ba:	ed 93       	st	X+, r30
    33bc:	fc 93       	st	X, r31
    33be:	12 97       	sbiw	r26, 0x02	; 2
    33c0:	81 5a       	subi	r24, 0xA1	; 161
    33c2:	9e 4c       	sbci	r25, 0xCE	; 206
    33c4:	e8 17       	cp	r30, r24
    33c6:	f9 07       	cpc	r31, r25
    33c8:	61 f4       	brne	.+24     	; 0x33e2 <vTaskSwitchContext+0x96>
    33ca:	84 81       	ldd	r24, Z+4	; 0x04
    33cc:	95 81       	ldd	r25, Z+5	; 0x05
    33ce:	4b e0       	ldi	r20, 0x0B	; 11
    33d0:	42 9f       	mul	r20, r18
    33d2:	f0 01       	movw	r30, r0
    33d4:	43 9f       	mul	r20, r19
    33d6:	f0 0d       	add	r31, r0
    33d8:	11 24       	eor	r1, r1
    33da:	e4 5a       	subi	r30, 0xA4	; 164
    33dc:	fe 4c       	sbci	r31, 0xCE	; 206
    33de:	81 83       	std	Z+1, r24	; 0x01
    33e0:	92 83       	std	Z+2, r25	; 0x02
    33e2:	8b e0       	ldi	r24, 0x0B	; 11
    33e4:	82 9f       	mul	r24, r18
    33e6:	f0 01       	movw	r30, r0
    33e8:	83 9f       	mul	r24, r19
    33ea:	f0 0d       	add	r31, r0
    33ec:	11 24       	eor	r1, r1
    33ee:	e4 5a       	subi	r30, 0xA4	; 164
    33f0:	fe 4c       	sbci	r31, 0xCE	; 206
    33f2:	01 80       	ldd	r0, Z+1	; 0x01
    33f4:	f2 81       	ldd	r31, Z+2	; 0x02
    33f6:	e0 2d       	mov	r30, r0
    33f8:	80 85       	ldd	r24, Z+8	; 0x08
    33fa:	91 85       	ldd	r25, Z+9	; 0x09
    33fc:	80 93 88 31 	sts	0x3188, r24	; 0x803188 <pxCurrentTCB>
    3400:	90 93 89 31 	sts	0x3189, r25	; 0x803189 <pxCurrentTCB+0x1>
    3404:	08 95       	ret

00003406 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3406:	cf 92       	push	r12
    3408:	df 92       	push	r13
    340a:	ef 92       	push	r14
    340c:	ff 92       	push	r15
    340e:	6a 01       	movw	r12, r20
    3410:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3412:	60 91 88 31 	lds	r22, 0x3188	; 0x803188 <pxCurrentTCB>
    3416:	70 91 89 31 	lds	r23, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    341a:	62 5f       	subi	r22, 0xF2	; 242
    341c:	7f 4f       	sbci	r23, 0xFF	; 255
    341e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3422:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    3426:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    342a:	02 96       	adiw	r24, 0x02	; 2
    342c:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3430:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    3434:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    3438:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    343c:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	6c 0d       	add	r22, r12
    3446:	7d 1d       	adc	r23, r13
    3448:	8e 1d       	adc	r24, r14
    344a:	9f 1d       	adc	r25, r15
    344c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3450:	ff 90       	pop	r15
    3452:	ef 90       	pop	r14
    3454:	df 90       	pop	r13
    3456:	cf 90       	pop	r12
    3458:	08 95       	ret

0000345a <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3462:	dc 01       	movw	r26, r24
    3464:	17 96       	adiw	r26, 0x07	; 7
    3466:	ed 91       	ld	r30, X+
    3468:	fc 91       	ld	r31, X
    346a:	18 97       	sbiw	r26, 0x08	; 8
    346c:	c0 85       	ldd	r28, Z+8	; 0x08
    346e:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3470:	8e 01       	movw	r16, r28
    3472:	02 5f       	subi	r16, 0xF2	; 242
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	c8 01       	movw	r24, r16
    3478:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    347c:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <uxSchedulerSuspended>
    3480:	81 11       	cpse	r24, r1
    3482:	16 c0       	rjmp	.+44     	; 0x34b0 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3484:	0c 50       	subi	r16, 0x0C	; 12
    3486:	11 09       	sbc	r17, r1
    3488:	c8 01       	movw	r24, r16
    348a:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    348e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3490:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    3494:	98 17       	cp	r25, r24
    3496:	10 f4       	brcc	.+4      	; 0x349c <xTaskRemoveFromEventList+0x42>
    3498:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    349c:	bb e0       	ldi	r27, 0x0B	; 11
    349e:	8b 9f       	mul	r24, r27
    34a0:	c0 01       	movw	r24, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	b8 01       	movw	r22, r16
    34a6:	84 5a       	subi	r24, 0xA4	; 164
    34a8:	9e 4c       	sbci	r25, 0xCE	; 206
    34aa:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
    34ae:	05 c0       	rjmp	.+10     	; 0x34ba <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    34b0:	b8 01       	movw	r22, r16
    34b2:	87 e3       	ldi	r24, 0x37	; 55
    34b4:	91 e3       	ldi	r25, 0x31	; 49
    34b6:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    34ba:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    34be:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    34c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    34c8:	29 17       	cp	r18, r25
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <xTaskRemoveFromEventList+0x74>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
}
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	08 95       	ret

000034d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    34d8:	20 91 29 31 	lds	r18, 0x3129	; 0x803129 <xNumOfOverflows>
    34dc:	fc 01       	movw	r30, r24
    34de:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    34e0:	40 91 30 31 	lds	r20, 0x3130	; 0x803130 <xTickCount>
    34e4:	50 91 31 31 	lds	r21, 0x3131	; 0x803131 <xTickCount+0x1>
    34e8:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount+0x2>
    34ec:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x3>
    34f0:	41 83       	std	Z+1, r20	; 0x01
    34f2:	52 83       	std	Z+2, r21	; 0x02
    34f4:	63 83       	std	Z+3, r22	; 0x03
    34f6:	74 83       	std	Z+4, r23	; 0x04
    34f8:	08 95       	ret

000034fa <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    34fa:	8f 92       	push	r8
    34fc:	9f 92       	push	r9
    34fe:	af 92       	push	r10
    3500:	bf 92       	push	r11
    3502:	cf 92       	push	r12
    3504:	df 92       	push	r13
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    351a:	80 91 29 31 	lds	r24, 0x3129	; 0x803129 <xNumOfOverflows>
    351e:	90 81       	ld	r25, Z
    3520:	98 17       	cp	r25, r24
    3522:	89 f0       	breq	.+34     	; 0x3546 <xTaskCheckForTimeOut+0x4c>
    3524:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    3528:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    352c:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    3530:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    3534:	01 81       	ldd	r16, Z+1	; 0x01
    3536:	12 81       	ldd	r17, Z+2	; 0x02
    3538:	23 81       	ldd	r18, Z+3	; 0x03
    353a:	34 81       	ldd	r19, Z+4	; 0x04
    353c:	80 17       	cp	r24, r16
    353e:	91 07       	cpc	r25, r17
    3540:	a2 07       	cpc	r26, r18
    3542:	b3 07       	cpc	r27, r19
    3544:	a8 f5       	brcc	.+106    	; 0x35b0 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3546:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xTickCount>
    354a:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <xTickCount+0x1>
    354e:	a0 91 32 31 	lds	r26, 0x3132	; 0x803132 <xTickCount+0x2>
    3552:	b0 91 33 31 	lds	r27, 0x3133	; 0x803133 <xTickCount+0x3>
    3556:	c1 80       	ldd	r12, Z+1	; 0x01
    3558:	d2 80       	ldd	r13, Z+2	; 0x02
    355a:	e3 80       	ldd	r14, Z+3	; 0x03
    355c:	f4 80       	ldd	r15, Z+4	; 0x04
    355e:	eb 01       	movw	r28, r22
    3560:	08 81       	ld	r16, Y
    3562:	19 81       	ldd	r17, Y+1	; 0x01
    3564:	2a 81       	ldd	r18, Y+2	; 0x02
    3566:	3b 81       	ldd	r19, Y+3	; 0x03
    3568:	8c 19       	sub	r24, r12
    356a:	9d 09       	sbc	r25, r13
    356c:	ae 09       	sbc	r26, r14
    356e:	bf 09       	sbc	r27, r15
    3570:	80 17       	cp	r24, r16
    3572:	91 07       	cpc	r25, r17
    3574:	a2 07       	cpc	r26, r18
    3576:	b3 07       	cpc	r27, r19
    3578:	e8 f4       	brcc	.+58     	; 0x35b4 <xTaskCheckForTimeOut+0xba>
    357a:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    357c:	80 90 30 31 	lds	r8, 0x3130	; 0x803130 <xTickCount>
    3580:	90 90 31 31 	lds	r9, 0x3131	; 0x803131 <xTickCount+0x1>
    3584:	a0 90 32 31 	lds	r10, 0x3132	; 0x803132 <xTickCount+0x2>
    3588:	b0 90 33 31 	lds	r11, 0x3133	; 0x803133 <xTickCount+0x3>
    358c:	b5 01       	movw	r22, r10
    358e:	a4 01       	movw	r20, r8
    3590:	4c 19       	sub	r20, r12
    3592:	5d 09       	sbc	r21, r13
    3594:	6e 09       	sbc	r22, r14
    3596:	7f 09       	sbc	r23, r15
    3598:	04 1b       	sub	r16, r20
    359a:	15 0b       	sbc	r17, r21
    359c:	26 0b       	sbc	r18, r22
    359e:	37 0b       	sbc	r19, r23
    35a0:	08 83       	st	Y, r16
    35a2:	19 83       	std	Y+1, r17	; 0x01
    35a4:	2a 83       	std	Y+2, r18	; 0x02
    35a6:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    35a8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	03 c0       	rjmp	.+6      	; 0x35b6 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	01 c0       	rjmp	.+2      	; 0x35b6 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    35b6:	0f 90       	pop	r0
    35b8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	9f 90       	pop	r9
    35d0:	8f 90       	pop	r8
    35d2:	08 95       	ret

000035d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	80 93 2a 31 	sts	0x312A, r24	; 0x80312a <xMissedYield>
    35da:	08 95       	ret

000035dc <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	21 f4       	brne	.+8      	; 0x35e8 <uxTaskGetStackHighWaterMark+0xc>
    35e0:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    35e4:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    35e8:	dc 01       	movw	r26, r24
    35ea:	5b 96       	adiw	r26, 0x1b	; 27
    35ec:	ed 91       	ld	r30, X+
    35ee:	fc 91       	ld	r31, X
    35f0:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    35f2:	80 81       	ld	r24, Z
    35f4:	81 31       	cpi	r24, 0x11	; 17
    35f6:	41 f4       	brne	.+16     	; 0x3608 <uxTaskGetStackHighWaterMark+0x2c>
    35f8:	31 96       	adiw	r30, 0x01	; 1
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    35fe:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3600:	21 91       	ld	r18, Z+
    3602:	21 31       	cpi	r18, 0x11	; 17
    3604:	e1 f3       	breq	.-8      	; 0x35fe <uxTaskGetStackHighWaterMark+0x22>
    3606:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    360c:	08 95       	ret

0000360e <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    360e:	80 91 88 31 	lds	r24, 0x3188	; 0x803188 <pxCurrentTCB>
    3612:	90 91 89 31 	lds	r25, 0x3189	; 0x803189 <pxCurrentTCB+0x1>

		return xReturn;
	}
    3616:	08 95       	ret

00003618 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3622:	22 8d       	ldd	r18, Z+26	; 0x1a
    3624:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    3628:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    362c:	5a 96       	adiw	r26, 0x1a	; 26
    362e:	8c 91       	ld	r24, X
    3630:	28 17       	cp	r18, r24
    3632:	08 f0       	brcs	.+2      	; 0x3636 <vTaskPriorityInherit+0x1e>
    3634:	41 c0       	rjmp	.+130    	; 0x36b8 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3636:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    363a:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    363e:	5a 96       	adiw	r26, 0x1a	; 26
    3640:	3c 91       	ld	r19, X
    3642:	84 e0       	ldi	r24, 0x04	; 4
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e0       	ldi	r26, 0x00	; 0
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	83 1b       	sub	r24, r19
    364c:	91 09       	sbc	r25, r1
    364e:	a1 09       	sbc	r26, r1
    3650:	b1 09       	sbc	r27, r1
    3652:	86 87       	std	Z+14, r24	; 0x0e
    3654:	97 87       	std	Z+15, r25	; 0x0f
    3656:	a0 8b       	std	Z+16, r26	; 0x10
    3658:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    365a:	8b e0       	ldi	r24, 0x0B	; 11
    365c:	28 9f       	mul	r18, r24
    365e:	90 01       	movw	r18, r0
    3660:	11 24       	eor	r1, r1
    3662:	24 5a       	subi	r18, 0xA4	; 164
    3664:	3e 4c       	sbci	r19, 0xCE	; 206
    3666:	84 85       	ldd	r24, Z+12	; 0x0c
    3668:	95 85       	ldd	r25, Z+13	; 0x0d
    366a:	82 17       	cp	r24, r18
    366c:	93 07       	cpc	r25, r19
    366e:	e9 f4       	brne	.+58     	; 0x36aa <vTaskPriorityInherit+0x92>
    3670:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3672:	ef 01       	movw	r28, r30
    3674:	22 96       	adiw	r28, 0x02	; 2
    3676:	ce 01       	movw	r24, r28
    3678:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    367c:	e0 91 88 31 	lds	r30, 0x3188	; 0x803188 <pxCurrentTCB>
    3680:	f0 91 89 31 	lds	r31, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    3684:	82 8d       	ldd	r24, Z+26	; 0x1a
    3686:	f8 01       	movw	r30, r16
    3688:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    368a:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    368e:	98 17       	cp	r25, r24
    3690:	10 f4       	brcc	.+4      	; 0x3696 <vTaskPriorityInherit+0x7e>
    3692:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    3696:	fb e0       	ldi	r31, 0x0B	; 11
    3698:	8f 9f       	mul	r24, r31
    369a:	c0 01       	movw	r24, r0
    369c:	11 24       	eor	r1, r1
    369e:	be 01       	movw	r22, r28
    36a0:	84 5a       	subi	r24, 0xA4	; 164
    36a2:	9e 4c       	sbci	r25, 0xCE	; 206
    36a4:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    36aa:	a0 91 88 31 	lds	r26, 0x3188	; 0x803188 <pxCurrentTCB>
    36ae:	b0 91 89 31 	lds	r27, 0x3189	; 0x803189 <pxCurrentTCB+0x1>
    36b2:	5a 96       	adiw	r26, 0x1a	; 26
    36b4:	8c 91       	ld	r24, X
    36b6:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	08 95       	ret

000036c2 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	49 f1       	breq	.+82     	; 0x3720 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    36ce:	fc 01       	movw	r30, r24
    36d0:	32 8d       	ldd	r19, Z+26	; 0x1a
    36d2:	27 a1       	ldd	r18, Z+39	; 0x27
    36d4:	32 17       	cp	r19, r18
    36d6:	21 f1       	breq	.+72     	; 0x3720 <vTaskPriorityDisinherit+0x5e>
    36d8:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    36da:	8c 01       	movw	r16, r24
    36dc:	0e 5f       	subi	r16, 0xFE	; 254
    36de:	1f 4f       	sbci	r17, 0xFF	; 255
    36e0:	c8 01       	movw	r24, r16
    36e2:	0e 94 ac 11 	call	0x2358	; 0x2358 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    36e6:	8f a1       	ldd	r24, Y+39	; 0x27
    36e8:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    36ea:	44 e0       	ldi	r20, 0x04	; 4
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	48 1b       	sub	r20, r24
    36f4:	51 09       	sbc	r21, r1
    36f6:	61 09       	sbc	r22, r1
    36f8:	71 09       	sbc	r23, r1
    36fa:	4e 87       	std	Y+14, r20	; 0x0e
    36fc:	5f 87       	std	Y+15, r21	; 0x0f
    36fe:	68 8b       	std	Y+16, r22	; 0x10
    3700:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3702:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTopReadyPriority>
    3706:	98 17       	cp	r25, r24
    3708:	10 f4       	brcc	.+4      	; 0x370e <vTaskPriorityDisinherit+0x4c>
    370a:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxTopReadyPriority>
    370e:	fb e0       	ldi	r31, 0x0B	; 11
    3710:	8f 9f       	mul	r24, r31
    3712:	c0 01       	movw	r24, r0
    3714:	11 24       	eor	r1, r1
    3716:	b8 01       	movw	r22, r16
    3718:	84 5a       	subi	r24, 0xA4	; 164
    371a:	9e 4c       	sbci	r25, 0xCE	; 206
    371c:	0e 94 3a 11 	call	0x2274	; 0x2274 <vListInsertEnd>
			}
		}
	}
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <__divmodsi4>:
    372a:	05 2e       	mov	r0, r21
    372c:	97 fb       	bst	r25, 7
    372e:	1e f4       	brtc	.+6      	; 0x3736 <__divmodsi4+0xc>
    3730:	00 94       	com	r0
    3732:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__negsi2>
    3736:	57 fd       	sbrc	r21, 7
    3738:	07 d0       	rcall	.+14     	; 0x3748 <__divmodsi4_neg2>
    373a:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__udivmodsi4>
    373e:	07 fc       	sbrc	r0, 7
    3740:	03 d0       	rcall	.+6      	; 0x3748 <__divmodsi4_neg2>
    3742:	4e f4       	brtc	.+18     	; 0x3756 <__divmodsi4_exit>
    3744:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__negsi2>

00003748 <__divmodsi4_neg2>:
    3748:	50 95       	com	r21
    374a:	40 95       	com	r20
    374c:	30 95       	com	r19
    374e:	21 95       	neg	r18
    3750:	3f 4f       	sbci	r19, 0xFF	; 255
    3752:	4f 4f       	sbci	r20, 0xFF	; 255
    3754:	5f 4f       	sbci	r21, 0xFF	; 255

00003756 <__divmodsi4_exit>:
    3756:	08 95       	ret

00003758 <__negsi2>:
    3758:	90 95       	com	r25
    375a:	80 95       	com	r24
    375c:	70 95       	com	r23
    375e:	61 95       	neg	r22
    3760:	7f 4f       	sbci	r23, 0xFF	; 255
    3762:	8f 4f       	sbci	r24, 0xFF	; 255
    3764:	9f 4f       	sbci	r25, 0xFF	; 255
    3766:	08 95       	ret

00003768 <__udivmodsi4>:
    3768:	a1 e2       	ldi	r26, 0x21	; 33
    376a:	1a 2e       	mov	r1, r26
    376c:	aa 1b       	sub	r26, r26
    376e:	bb 1b       	sub	r27, r27
    3770:	fd 01       	movw	r30, r26
    3772:	0d c0       	rjmp	.+26     	; 0x378e <__udivmodsi4_ep>

00003774 <__udivmodsi4_loop>:
    3774:	aa 1f       	adc	r26, r26
    3776:	bb 1f       	adc	r27, r27
    3778:	ee 1f       	adc	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	a2 17       	cp	r26, r18
    377e:	b3 07       	cpc	r27, r19
    3780:	e4 07       	cpc	r30, r20
    3782:	f5 07       	cpc	r31, r21
    3784:	20 f0       	brcs	.+8      	; 0x378e <__udivmodsi4_ep>
    3786:	a2 1b       	sub	r26, r18
    3788:	b3 0b       	sbc	r27, r19
    378a:	e4 0b       	sbc	r30, r20
    378c:	f5 0b       	sbc	r31, r21

0000378e <__udivmodsi4_ep>:
    378e:	66 1f       	adc	r22, r22
    3790:	77 1f       	adc	r23, r23
    3792:	88 1f       	adc	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	1a 94       	dec	r1
    3798:	69 f7       	brne	.-38     	; 0x3774 <__udivmodsi4_loop>
    379a:	60 95       	com	r22
    379c:	70 95       	com	r23
    379e:	80 95       	com	r24
    37a0:	90 95       	com	r25
    37a2:	9b 01       	movw	r18, r22
    37a4:	ac 01       	movw	r20, r24
    37a6:	bd 01       	movw	r22, r26
    37a8:	cf 01       	movw	r24, r30
    37aa:	08 95       	ret

000037ac <memcpy>:
    37ac:	fb 01       	movw	r30, r22
    37ae:	dc 01       	movw	r26, r24
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <memcpy+0xa>
    37b2:	01 90       	ld	r0, Z+
    37b4:	0d 92       	st	X+, r0
    37b6:	41 50       	subi	r20, 0x01	; 1
    37b8:	50 40       	sbci	r21, 0x00	; 0
    37ba:	d8 f7       	brcc	.-10     	; 0x37b2 <memcpy+0x6>
    37bc:	08 95       	ret

000037be <memset>:
    37be:	dc 01       	movw	r26, r24
    37c0:	01 c0       	rjmp	.+2      	; 0x37c4 <memset+0x6>
    37c2:	6d 93       	st	X+, r22
    37c4:	41 50       	subi	r20, 0x01	; 1
    37c6:	50 40       	sbci	r21, 0x00	; 0
    37c8:	e0 f7       	brcc	.-8      	; 0x37c2 <memset+0x4>
    37ca:	08 95       	ret

000037cc <strncpy>:
    37cc:	fb 01       	movw	r30, r22
    37ce:	dc 01       	movw	r26, r24
    37d0:	41 50       	subi	r20, 0x01	; 1
    37d2:	50 40       	sbci	r21, 0x00	; 0
    37d4:	48 f0       	brcs	.+18     	; 0x37e8 <strncpy+0x1c>
    37d6:	01 90       	ld	r0, Z+
    37d8:	0d 92       	st	X+, r0
    37da:	00 20       	and	r0, r0
    37dc:	c9 f7       	brne	.-14     	; 0x37d0 <strncpy+0x4>
    37de:	01 c0       	rjmp	.+2      	; 0x37e2 <strncpy+0x16>
    37e0:	1d 92       	st	X+, r1
    37e2:	41 50       	subi	r20, 0x01	; 1
    37e4:	50 40       	sbci	r21, 0x00	; 0
    37e6:	e0 f7       	brcc	.-8      	; 0x37e0 <strncpy+0x14>
    37e8:	08 95       	ret

000037ea <__itoa_ncheck>:
    37ea:	bb 27       	eor	r27, r27
    37ec:	4a 30       	cpi	r20, 0x0A	; 10
    37ee:	31 f4       	brne	.+12     	; 0x37fc <__itoa_ncheck+0x12>
    37f0:	99 23       	and	r25, r25
    37f2:	22 f4       	brpl	.+8      	; 0x37fc <__itoa_ncheck+0x12>
    37f4:	bd e2       	ldi	r27, 0x2D	; 45
    37f6:	90 95       	com	r25
    37f8:	81 95       	neg	r24
    37fa:	9f 4f       	sbci	r25, 0xFF	; 255
    37fc:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__utoa_common>

00003800 <ultoa>:
    3800:	25 32       	cpi	r18, 0x25	; 37
    3802:	31 05       	cpc	r19, r1
    3804:	20 f4       	brcc	.+8      	; 0x380e <ultoa+0xe>
    3806:	22 30       	cpi	r18, 0x02	; 2
    3808:	10 f0       	brcs	.+4      	; 0x380e <ultoa+0xe>
    380a:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__ultoa_ncheck>
    380e:	fa 01       	movw	r30, r20
    3810:	10 82       	st	Z, r1
    3812:	ca 01       	movw	r24, r20
    3814:	08 95       	ret

00003816 <__ultoa_ncheck>:
    3816:	bb 27       	eor	r27, r27

00003818 <__ultoa_common>:
    3818:	fa 01       	movw	r30, r20
    381a:	a6 2f       	mov	r26, r22
    381c:	62 17       	cp	r22, r18
    381e:	71 05       	cpc	r23, r1
    3820:	81 05       	cpc	r24, r1
    3822:	91 05       	cpc	r25, r1
    3824:	33 0b       	sbc	r19, r19
    3826:	30 fb       	bst	r19, 0
    3828:	66 f0       	brts	.+24     	; 0x3842 <__ultoa_common+0x2a>
    382a:	aa 27       	eor	r26, r26
    382c:	66 0f       	add	r22, r22
    382e:	77 1f       	adc	r23, r23
    3830:	88 1f       	adc	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	aa 1f       	adc	r26, r26
    3836:	a2 17       	cp	r26, r18
    3838:	10 f0       	brcs	.+4      	; 0x383e <__ultoa_common+0x26>
    383a:	a2 1b       	sub	r26, r18
    383c:	63 95       	inc	r22
    383e:	38 50       	subi	r19, 0x08	; 8
    3840:	a9 f7       	brne	.-22     	; 0x382c <__ultoa_common+0x14>
    3842:	a0 5d       	subi	r26, 0xD0	; 208
    3844:	aa 33       	cpi	r26, 0x3A	; 58
    3846:	08 f0       	brcs	.+2      	; 0x384a <__ultoa_common+0x32>
    3848:	a9 5d       	subi	r26, 0xD9	; 217
    384a:	a1 93       	st	Z+, r26
    384c:	36 f7       	brtc	.-52     	; 0x381a <__ultoa_common+0x2>
    384e:	b1 11       	cpse	r27, r1
    3850:	b1 93       	st	Z+, r27
    3852:	10 82       	st	Z, r1
    3854:	ca 01       	movw	r24, r20
    3856:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <strrev>

0000385a <utoa>:
    385a:	45 32       	cpi	r20, 0x25	; 37
    385c:	51 05       	cpc	r21, r1
    385e:	20 f4       	brcc	.+8      	; 0x3868 <utoa+0xe>
    3860:	42 30       	cpi	r20, 0x02	; 2
    3862:	10 f0       	brcs	.+4      	; 0x3868 <utoa+0xe>
    3864:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__utoa_ncheck>
    3868:	fb 01       	movw	r30, r22
    386a:	10 82       	st	Z, r1
    386c:	cb 01       	movw	r24, r22
    386e:	08 95       	ret

00003870 <__utoa_ncheck>:
    3870:	bb 27       	eor	r27, r27

00003872 <__utoa_common>:
    3872:	fb 01       	movw	r30, r22
    3874:	55 27       	eor	r21, r21
    3876:	aa 27       	eor	r26, r26
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	aa 1f       	adc	r26, r26
    387e:	a4 17       	cp	r26, r20
    3880:	10 f0       	brcs	.+4      	; 0x3886 <__utoa_common+0x14>
    3882:	a4 1b       	sub	r26, r20
    3884:	83 95       	inc	r24
    3886:	50 51       	subi	r21, 0x10	; 16
    3888:	b9 f7       	brne	.-18     	; 0x3878 <__utoa_common+0x6>
    388a:	a0 5d       	subi	r26, 0xD0	; 208
    388c:	aa 33       	cpi	r26, 0x3A	; 58
    388e:	08 f0       	brcs	.+2      	; 0x3892 <__utoa_common+0x20>
    3890:	a9 5d       	subi	r26, 0xD9	; 217
    3892:	a1 93       	st	Z+, r26
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	79 f7       	brne	.-34     	; 0x3876 <__utoa_common+0x4>
    3898:	b1 11       	cpse	r27, r1
    389a:	b1 93       	st	Z+, r27
    389c:	11 92       	st	Z+, r1
    389e:	cb 01       	movw	r24, r22
    38a0:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <strrev>

000038a4 <strrev>:
    38a4:	dc 01       	movw	r26, r24
    38a6:	fc 01       	movw	r30, r24
    38a8:	67 2f       	mov	r22, r23
    38aa:	71 91       	ld	r23, Z+
    38ac:	77 23       	and	r23, r23
    38ae:	e1 f7       	brne	.-8      	; 0x38a8 <strrev+0x4>
    38b0:	32 97       	sbiw	r30, 0x02	; 2
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <strrev+0x18>
    38b4:	7c 91       	ld	r23, X
    38b6:	6d 93       	st	X+, r22
    38b8:	70 83       	st	Z, r23
    38ba:	62 91       	ld	r22, -Z
    38bc:	ae 17       	cp	r26, r30
    38be:	bf 07       	cpc	r27, r31
    38c0:	c8 f3       	brcs	.-14     	; 0x38b4 <strrev+0x10>
    38c2:	08 95       	ret

000038c4 <__mulsi3>:
    38c4:	db 01       	movw	r26, r22
    38c6:	8f 93       	push	r24
    38c8:	9f 93       	push	r25
    38ca:	0e 94 8f 1c 	call	0x391e	; 0x391e <__muluhisi3>
    38ce:	bf 91       	pop	r27
    38d0:	af 91       	pop	r26
    38d2:	a2 9f       	mul	r26, r18
    38d4:	80 0d       	add	r24, r0
    38d6:	91 1d       	adc	r25, r1
    38d8:	a3 9f       	mul	r26, r19
    38da:	90 0d       	add	r25, r0
    38dc:	b2 9f       	mul	r27, r18
    38de:	90 0d       	add	r25, r0
    38e0:	11 24       	eor	r1, r1
    38e2:	08 95       	ret

000038e4 <__divmodhi4>:
    38e4:	97 fb       	bst	r25, 7
    38e6:	07 2e       	mov	r0, r23
    38e8:	16 f4       	brtc	.+4      	; 0x38ee <__divmodhi4+0xa>
    38ea:	00 94       	com	r0
    38ec:	07 d0       	rcall	.+14     	; 0x38fc <__divmodhi4_neg1>
    38ee:	77 fd       	sbrc	r23, 7
    38f0:	09 d0       	rcall	.+18     	; 0x3904 <__divmodhi4_neg2>
    38f2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodhi4>
    38f6:	07 fc       	sbrc	r0, 7
    38f8:	05 d0       	rcall	.+10     	; 0x3904 <__divmodhi4_neg2>
    38fa:	3e f4       	brtc	.+14     	; 0x390a <__divmodhi4_exit>

000038fc <__divmodhi4_neg1>:
    38fc:	90 95       	com	r25
    38fe:	81 95       	neg	r24
    3900:	9f 4f       	sbci	r25, 0xFF	; 255
    3902:	08 95       	ret

00003904 <__divmodhi4_neg2>:
    3904:	70 95       	com	r23
    3906:	61 95       	neg	r22
    3908:	7f 4f       	sbci	r23, 0xFF	; 255

0000390a <__divmodhi4_exit>:
    390a:	08 95       	ret

0000390c <__tablejump2__>:
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	88 1f       	adc	r24, r24
    3912:	8b bf       	out	0x3b, r24	; 59
    3914:	07 90       	elpm	r0, Z+
    3916:	f6 91       	elpm	r31, Z
    3918:	e0 2d       	mov	r30, r0
    391a:	1b be       	out	0x3b, r1	; 59
    391c:	19 94       	eijmp

0000391e <__muluhisi3>:
    391e:	0e 94 ae 1c 	call	0x395c	; 0x395c <__umulhisi3>
    3922:	a5 9f       	mul	r26, r21
    3924:	90 0d       	add	r25, r0
    3926:	b4 9f       	mul	r27, r20
    3928:	90 0d       	add	r25, r0
    392a:	a4 9f       	mul	r26, r20
    392c:	80 0d       	add	r24, r0
    392e:	91 1d       	adc	r25, r1
    3930:	11 24       	eor	r1, r1
    3932:	08 95       	ret

00003934 <__udivmodhi4>:
    3934:	aa 1b       	sub	r26, r26
    3936:	bb 1b       	sub	r27, r27
    3938:	51 e1       	ldi	r21, 0x11	; 17
    393a:	07 c0       	rjmp	.+14     	; 0x394a <__udivmodhi4_ep>

0000393c <__udivmodhi4_loop>:
    393c:	aa 1f       	adc	r26, r26
    393e:	bb 1f       	adc	r27, r27
    3940:	a6 17       	cp	r26, r22
    3942:	b7 07       	cpc	r27, r23
    3944:	10 f0       	brcs	.+4      	; 0x394a <__udivmodhi4_ep>
    3946:	a6 1b       	sub	r26, r22
    3948:	b7 0b       	sbc	r27, r23

0000394a <__udivmodhi4_ep>:
    394a:	88 1f       	adc	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	5a 95       	dec	r21
    3950:	a9 f7       	brne	.-22     	; 0x393c <__udivmodhi4_loop>
    3952:	80 95       	com	r24
    3954:	90 95       	com	r25
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	08 95       	ret

0000395c <__umulhisi3>:
    395c:	a2 9f       	mul	r26, r18
    395e:	b0 01       	movw	r22, r0
    3960:	b3 9f       	mul	r27, r19
    3962:	c0 01       	movw	r24, r0
    3964:	a3 9f       	mul	r26, r19
    3966:	70 0d       	add	r23, r0
    3968:	81 1d       	adc	r24, r1
    396a:	11 24       	eor	r1, r1
    396c:	91 1d       	adc	r25, r1
    396e:	b2 9f       	mul	r27, r18
    3970:	70 0d       	add	r23, r0
    3972:	81 1d       	adc	r24, r1
    3974:	11 24       	eor	r1, r1
    3976:	91 1d       	adc	r25, r1
    3978:	08 95       	ret

0000397a <_exit>:
    397a:	f8 94       	cli

0000397c <__stop_program>:
    397c:	ff cf       	rjmp	.-2      	; 0x397c <__stop_program>
