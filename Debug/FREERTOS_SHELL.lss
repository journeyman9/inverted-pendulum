
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  00004582  00004616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010b6  008020de  008020de  000046f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00004764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00009b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000ca0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000e5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  000115ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00013b32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      64:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__vector_25>
      68:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      6c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      70:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_28>
      74:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      78:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      7c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      80:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      84:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      88:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      8c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      90:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      94:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      98:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      9c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c4:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__vector_49>
      c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e8:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__vector_58>
      ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     100:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     104:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     108:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     10c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     110:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     114:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     118:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     11c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     120:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     124:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     128:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     12c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     130:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     134:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     138:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     13c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     140:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     144:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     148:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     14c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     150:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     154:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     158:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     15c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     160:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_88>
     164:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     168:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     16c:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__vector_91>
     170:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     174:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     178:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     17c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     180:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     184:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     188:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     18c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     190:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     194:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     198:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     19c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1fc:	10 06       	cpc	r1, r16
     1fe:	13 06       	cpc	r1, r19
     200:	16 06       	cpc	r1, r22
     202:	19 06       	cpc	r1, r25
     204:	1c 06       	cpc	r1, r28
     206:	1f 06       	cpc	r1, r31
     208:	21 06       	cpc	r2, r17
     20a:	32 06       	cpc	r3, r18
     20c:	3a 06       	cpc	r3, r26
     20e:	44 06       	cpc	r4, r20
     210:	42 06       	cpc	r4, r18
     212:	07 0c       	add	r0, r7
     214:	88 0c       	add	r8, r8
     216:	88 0c       	add	r8, r8
     218:	88 0c       	add	r8, r8
     21a:	88 0c       	add	r8, r8
     21c:	88 0c       	add	r8, r8
     21e:	88 0c       	add	r8, r8
     220:	88 0c       	add	r8, r8
     222:	88 0c       	add	r8, r8
     224:	88 0c       	add	r8, r8
     226:	88 0c       	add	r8, r8
     228:	88 0c       	add	r8, r8
     22a:	88 0c       	add	r8, r8
     22c:	88 0c       	add	r8, r8
     22e:	88 0c       	add	r8, r8
     230:	88 0c       	add	r8, r8
     232:	88 0c       	add	r8, r8
     234:	88 0c       	add	r8, r8
     236:	88 0c       	add	r8, r8
     238:	88 0c       	add	r8, r8
     23a:	88 0c       	add	r8, r8
     23c:	88 0c       	add	r8, r8
     23e:	88 0c       	add	r8, r8
     240:	88 0c       	add	r8, r8
     242:	88 0c       	add	r8, r8
     244:	88 0c       	add	r8, r8
     246:	88 0c       	add	r8, r8
     248:	88 0c       	add	r8, r8
     24a:	88 0c       	add	r8, r8
     24c:	88 0c       	add	r8, r8
     24e:	88 0c       	add	r8, r8
     250:	88 0c       	add	r8, r8
     252:	88 0c       	add	r8, r8
     254:	88 0c       	add	r8, r8
     256:	88 0c       	add	r8, r8
     258:	88 0c       	add	r8, r8
     25a:	88 0c       	add	r8, r8
     25c:	88 0c       	add	r8, r8
     25e:	88 0c       	add	r8, r8
     260:	88 0c       	add	r8, r8
     262:	88 0c       	add	r8, r8
     264:	88 0c       	add	r8, r8
     266:	88 0c       	add	r8, r8
     268:	88 0c       	add	r8, r8
     26a:	88 0c       	add	r8, r8
     26c:	88 0c       	add	r8, r8
     26e:	88 0c       	add	r8, r8
     270:	88 0c       	add	r8, r8
     272:	88 0c       	add	r8, r8
     274:	88 0c       	add	r8, r8
     276:	88 0c       	add	r8, r8
     278:	88 0c       	add	r8, r8
     27a:	88 0c       	add	r8, r8
     27c:	88 0c       	add	r8, r8
     27e:	88 0c       	add	r8, r8
     280:	88 0c       	add	r8, r8
     282:	88 0c       	add	r8, r8
     284:	88 0c       	add	r8, r8
     286:	88 0c       	add	r8, r8
     288:	88 0c       	add	r8, r8
     28a:	88 0c       	add	r8, r8
     28c:	88 0c       	add	r8, r8
     28e:	88 0c       	add	r8, r8
     290:	88 0c       	add	r8, r8
     292:	88 0c       	add	r8, r8
     294:	88 0c       	add	r8, r8
     296:	88 0c       	add	r8, r8
     298:	88 0c       	add	r8, r8
     29a:	88 0c       	add	r8, r8
     29c:	88 0c       	add	r8, r8
     29e:	88 0c       	add	r8, r8
     2a0:	1c 0c       	add	r1, r12
     2a2:	88 0c       	add	r8, r8
     2a4:	52 0c       	add	r5, r2
     2a6:	07 0c       	add	r0, r7
     2a8:	88 0c       	add	r8, r8
     2aa:	38 0c       	add	r3, r8
     2ac:	03 0c       	add	r0, r3
     2ae:	88 0c       	add	r8, r8
     2b0:	88 0c       	add	r8, r8
     2b2:	88 0c       	add	r8, r8
     2b4:	88 0c       	add	r8, r8
     2b6:	88 0c       	add	r8, r8
     2b8:	c4 0a       	sbc	r12, r20
     2ba:	88 0c       	add	r8, r8
     2bc:	88 0c       	add	r8, r8
     2be:	88 0c       	add	r8, r8
     2c0:	6e 0c       	add	r6, r14
     2c2:	c9 0b       	sbc	r28, r25
     2c4:	88 0c       	add	r8, r8
     2c6:	88 0c       	add	r8, r8
     2c8:	d2 0a       	sbc	r13, r18

000002ca <__trampolines_start>:
     2ca:	0c 94 13 06 	jmp	0xc26	; 0xc26 <_ZN8emstreamlsE15ser_manipulator+0x24>
     2ce:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <_ZN22task_system_controller3runEv>
     2d2:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <_ZN5rs2327putcharEc>
     2d6:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <_ZN5rs23212clear_screenEv>
     2da:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN8emstream12transmit_nowEv>
     2de:	0c 94 42 06 	jmp	0xc84	; 0xc84 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2e2:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
     2e6:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <_ZN9task_user3runEv+0x374>
     2ea:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_ZN17task_limit_switch3runEv>
     2ee:	0c 94 16 04 	jmp	0x82c	; 0x82c <_ZN21task_pendulum_encoder3runEv>
     2f2:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN8emstream13ready_to_sendEv>
     2f6:	0c 94 28 05 	jmp	0xa50	; 0xa50 <_ZN18task_motor_command3runEv>
     2fa:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_ZN8emstreamlsE15ser_manipulator+0x3c>
     2fe:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN8emstream7getcharEv>
     302:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <_ZN8emstreamlsE15ser_manipulator+0x36>
     306:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_ZN5rs23214check_for_charEv>
     30a:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZN9task_user3runEv+0x3e8>
     30e:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_ZN8emstreamlsE15ser_manipulator+0x2a>
     312:	0c 94 07 04 	jmp	0x80e	; 0x80e <_call_static_run_method>
     316:	0c 94 10 06 	jmp	0xc20	; 0xc20 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     31a:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_ZN9task_user3runEv>
     31e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN8emstream14check_for_charEv>
     322:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <_ZN8frt_task12print_statusER8emstream>
     326:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN14frt_text_queue7putcharEc>
     32a:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <_ZN9task_user3runEv+0x486>
     32e:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <_ZN5rs2327getcharEv>
     332:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <_ZN9task_user3runEv+0x4be>
     336:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__cxa_pure_virtual>
     33a:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <_ZN9task_user3runEv+0x186>
     33e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_ZN8emstreamlsE15ser_manipulator+0x62>
     342:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_ZN8emstreamlsE15ser_manipulator+0x30>
     346:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
     34a:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <_ZN9task_user3runEv+0x4f2>
     34e:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_ZN9task_user3runEv+0x452>
     352:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_ZN8emstreamlsE15ser_manipulator+0x40>
     356:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <_ZN9task_user3runEv+0x41a>
     35a:	0c 94 07 0c 	jmp	0x180e	; 0x180e <_ZN9task_user3runEv+0x3f0>
     35e:	0c 94 81 04 	jmp	0x902	; 0x902 <_ZN18task_motor_encoder3runEv>
     362:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN8emstream12clear_screenEv>
     366:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_ZN9task_user3runEv+0x16a>
     36a:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_GLOBAL__sub_I_counter>
     36e:	0c 94 44 06 	jmp	0xc88	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     372:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <prvIdleTask>
     376:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_ZN8emstreamlsE15ser_manipulator+0x72>

0000037a <__trampolines_end>:
     37a:	09 09       	sbc	r16, r9
	...

0000037d <_ZZ15print_task_listP8emstreamE3__c_8>:
     37d:	2f 00                                               /.

0000037f <_ZZ15print_task_listP8emstreamE3__c_7>:
     37f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000038a <_ZZ15print_task_listP8emstreamE3__c_6>:
     38a:	09 2d 2d 2d 2d 00                                   .----.

00000390 <_ZZ15print_task_listP8emstreamE3__c_5>:
     390:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000039c <_ZZ15print_task_listP8emstreamE3__c_4>:
     39c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000003ad <_ZZ15print_task_listP8emstreamE3__c_3>:
     3ad:	09 52 75 6e 73 00                                   .Runs.

000003b3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     3b3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000003bf <_ZZ15print_task_listP8emstreamE3__c_1>:
     3bf:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000003d0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     3d0:	09 53 74 61 63 6b 00                                .Stack.

000003d7 <_ZZ15print_task_listP8emstreamE3__c>:
     3d7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000003e2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3e2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003ed <_ZZN9task_user11show_statusEvE3__c_3>:
     3ed:	2f 00                                               /.

000003ef <_ZZN9task_user11show_statusEvE3__c_2>:
     3ef:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003fd <_ZZN9task_user11show_statusEvE3__c_1>:
     3fd:	54 69 6d 65 3a 20 00                                Time: .

00000404 <_ZZN9task_user11show_statusEvE3__c_0>:
     404:	41 70 72 20 31 33 20 32 30 32 35 00                 Apr 13 2025.

00000410 <_ZZN9task_user11show_statusEvE3__c>:
     410:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     420:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000042f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     42f:	1b 5b 32 32 6d 00                                   .[22m.

00000435 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     435:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000440 <_ZZ17print_task_stacksP8emstreamE3__c>:
     440:	1b 5b 31 6d 00                                      .[1m.

00000445 <_ZZN9task_user3runEvE3__c_7>:
     445:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     455:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000462 <_ZZN9task_user3runEvE3__c_6>:
     462:	3a 57 54 46 3f 00                                   :WTF?.

00000468 <_ZZN9task_user3runEvE3__c_5>:
     468:	52 65 73 65 74 2c 20 74 72 79 20 48 6f 6d 69 6e     Reset, try Homin
     478:	67 20 61 67 61 69 6e 20 62 79 20 70 72 65 73 73     g again by press
     488:	69 6e 67 20 27 62 27 00                             ing 'b'.

00000490 <_ZZN9task_user3runEvE3__c_4>:
     490:	45 4d 45 52 47 45 4e 43 59 20 53 54 4f 50 00        EMERGENCY STOP.

0000049f <_ZZN9task_user3runEvE3__c_3>:
     49f:	43 6f 6d 6d 65 6e 63 65 20 42 61 6c 61 6e 63 65     Commence Balance
	...

000004b0 <_ZZN9task_user3runEvE3__c_2>:
     4b0:	42 65 67 69 6e 20 48 6f 6d 69 6e 67 00              Begin Homing.

000004bd <_ZZN9task_user3runEvE3__c_1>:
     4bd:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4cd:	65 00                                               e.

000004cf <_ZZN9task_user3runEvE3__c_0>:
     4cf:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004dd <_ZZN9task_user3runEvE3__c>:
     4dd:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ed:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004fb <_ZZN9task_user18print_help_messageEvE3__c_14>:
     4fb:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_13>:
     50a:	20 20 20 20 72 3a 20 20 20 52 65 73 65 74 20 74         r:   Reset t
     51a:	6f 20 49 64 6c 65 00                                o Idle.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_12>:
     521:	20 20 20 20 64 3a 20 20 20 45 6d 65 72 67 65 6e         d:   Emergen
     531:	63 79 20 53 74 6f 70 00                             cy Stop.

00000539 <_ZZN9task_user18print_help_messageEvE3__c_11>:
     539:	20 20 20 20 67 3a 20 20 20 53 74 61 72 74 20 42         g:   Start B
     549:	61 6c 61 6e 63 65 21 00                             alance!.

00000551 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     551:	20 20 20 20 62 3a 20 20 20 42 65 67 69 6e 20 43         b:   Begin C
     561:	61 6c 69 62 72 61 74 69 6f 6e 00                    alibration.

0000056c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     56c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     57c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000587 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     587:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     597:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005a5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5a5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5b5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5c5:	6d 61 74 69 6f 6e 00                                mation.

000005cc <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5cc:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5dc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000005ed <_ZZN9task_user18print_help_messageEvE3__c_5>:
     5ed:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     5fd:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000605 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     605:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     615:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000621 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     621:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     631:	68 65 20 41 56 52 00                                he AVR.

00000638 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     638:	20 68 65 6c 70 00                                    help.

0000063e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     63e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     64e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000065d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     65d:	1b 5b 33 30 6d 00                                   .[30m.

00000663 <_ZZN9task_user18print_help_messageEvE3__c>:
     663:	1b 5b 34 36 6d 00                                   .[46m.

00000669 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     669:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     679:	61 73 6b 20 00                                      ask .

0000067e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     67e:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

0000068c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     68c:	20 63 72 65 61 74 65 64 00                           created.

00000695 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     695:	54 61 73 6b 20 00                                   Task .

0000069b <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     69b:	1b 5b 32 32 6d 00                                   .[22m.

000006a1 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     6a1:	54 61 73 6b 3a 20 00                                Task: .

000006a8 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     6a8:	1b 5b 31 6d 00                                      .[1m.

000006ad <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     6ad:	09 00                                               ..

000006af <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     6af:	09 00                                               ..

000006b1 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     6b1:	2f 00                                               /.

000006b3 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     6b3:	09 00                                               ..

000006b5 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     6b5:	09 00                                               ..

000006b7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     6b7:	1b 5b 32 32 6d 00                                   .[22m.

000006bd <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     6bd:	1b 5b 31 6d 00                                      .[1m.

000006c2 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     6c2:	1b 5b 31 6d 00                                      .[1m.

000006c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     6c7:	20 20 00                                              .

000006ca <__ctors_start>:
     6ca:	fd 0f       	add	r31, r29

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf ef       	ldi	r28, 0xFF	; 255
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df e3       	ldi	r29, 0x3F	; 63
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	0c bf       	out	0x3c, r16	; 60
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	19 be       	out	0x39, r1	; 57
     6e0:	1a be       	out	0x3a, r1	; 58
     6e2:	1b be       	out	0x3b, r1	; 59

000006e4 <__do_copy_data>:
     6e4:	10 e2       	ldi	r17, 0x20	; 32
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e2       	ldi	r27, 0x20	; 32
     6ea:	e2 e8       	ldi	r30, 0x82	; 130
     6ec:	f5 e4       	ldi	r31, 0x45	; 69
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	ae 3d       	cpi	r26, 0xDE	; 222
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>
     6fe:	1b be       	out	0x3b, r1	; 59

00000700 <__do_clear_bss>:
     700:	21 e3       	ldi	r18, 0x31	; 49
     702:	ae ed       	ldi	r26, 0xDE	; 222
     704:	b0 e2       	ldi	r27, 0x20	; 32
     706:	01 c0       	rjmp	.+2      	; 0x70a <.do_clear_bss_start>

00000708 <.do_clear_bss_loop>:
     708:	1d 92       	st	X+, r1

0000070a <.do_clear_bss_start>:
     70a:	a4 39       	cpi	r26, 0x94	; 148
     70c:	b2 07       	cpc	r27, r18
     70e:	e1 f7       	brne	.-8      	; 0x708 <.do_clear_bss_loop>

00000710 <__do_global_ctors>:
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c6 e6       	ldi	r28, 0x66	; 102
     714:	d3 e0       	ldi	r29, 0x03	; 3
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	06 c0       	rjmp	.+12     	; 0x726 <__do_global_ctors+0x16>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	01 09       	sbc	r16, r1
     71e:	80 2f       	mov	r24, r16
     720:	fe 01       	movw	r30, r28
     722:	0e 94 88 22 	call	0x4510	; 0x4510 <__tablejump2__>
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	d1 07       	cpc	r29, r17
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 07       	cpc	r16, r24
     72e:	a9 f7       	brne	.-22     	; 0x71a <__do_global_ctors+0xa>
     730:	0e 94 21 10 	call	0x2042	; 0x2042 <main>
     734:	0c 94 bf 22 	jmp	0x457e	; 0x457e <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN8emstream12clear_screenEv>:
     73c:	08 95       	ret

0000073e <_ZN8emstream12transmit_nowEv>:
     73e:	08 95       	ret

00000740 <_ZN8emstream14check_for_charEv>:
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret

00000744 <_ZN8emstream7getcharEv>:
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <_ZN8emstream13ready_to_sendEv>:
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <__cxa_pure_virtual>:
     74e:	08 95       	ret

00000750 <_ZN10time_stamp10set_to_nowEv>:
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	0f 92       	push	r0
     75c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     760:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     764:	8c 83       	std	Y+4, r24	; 0x04
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
     76c:	68 83       	st	Y, r22
     76e:	79 83       	std	Y+1, r23	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	ce 01       	movw	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZN14frt_text_queue7getcharEv>:
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	3f ef       	ldi	r19, 0xFF	; 255
     792:	a9 01       	movw	r20, r18
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	80 85       	ldd	r24, Z+8	; 0x08
     79e:	91 85       	ldd	r25, Z+9	; 0x09
     7a0:	0e 94 ff 18 	call	0x31fe	; 0x31fe <xQueueGenericReceive>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	19 f4       	brne	.+6      	; 0x7ae <_ZN14frt_text_queue7getcharEv+0x2e>
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <_ZN14frt_text_queue7getcharEv+0x32>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <_ZN14frt_text_queue14check_for_charEv>:
     7bc:	fc 01       	movw	r30, r24
     7be:	80 85       	ldd	r24, Z+8	; 0x08
     7c0:	91 85       	ldd	r25, Z+9	; 0x09
     7c2:	0e 94 c3 19 	call	0x3386	; 0x3386 <uxQueueMessagesWaiting>
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_ZN14frt_text_queue14check_for_charEv+0x12>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	89 2f       	mov	r24, r25
     7d0:	08 95       	ret

000007d2 <_ZN14frt_text_queue7putcharEc>:
     7d2:	0f 93       	push	r16
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	69 83       	std	Y+1, r22	; 0x01
     7e0:	fc 01       	movw	r30, r24
     7e2:	22 85       	ldd	r18, Z+10	; 0x0a
     7e4:	33 85       	ldd	r19, Z+11	; 0x0b
     7e6:	44 85       	ldd	r20, Z+12	; 0x0c
     7e8:	55 85       	ldd	r21, Z+13	; 0x0d
     7ea:	00 e0       	ldi	r16, 0x00	; 0
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 85       	ldd	r24, Z+8	; 0x08
     7f4:	91 85       	ldd	r25, Z+9	; 0x09
     7f6:	0e 94 64 18 	call	0x30c8	; 0x30c8 <xQueueGenericSend>
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	81 11       	cpse	r24, r1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <_ZN14frt_text_queue7putcharEc+0x30>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	89 2f       	mov	r24, r25
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <_call_static_run_method>:
     80e:	ec 01       	movw	r28, r24
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	19 95       	eicall
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	1b 82       	std	Y+3, r1	; 0x03
     820:	6f ef       	ldi	r22, 0xFF	; 255
     822:	7f ef       	ldi	r23, 0xFF	; 255
     824:	cb 01       	movw	r24, r22
     826:	0e 94 75 1d 	call	0x3aea	; 0x3aea <vTaskDelay>
     82a:	fa cf       	rjmp	.-12     	; 0x820 <_call_static_run_method+0x12>

0000082c <_ZN21task_pendulum_encoder3runEv>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <_ZN21task_pendulum_encoder3runEv+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8c 01       	movw	r16, r24
     83a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	7a 83       	std	Y+2, r23	; 0x02
     842:	8b 83       	std	Y+3, r24	; 0x03
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	e0 e8       	ldi	r30, 0x80	; 128
     848:	f6 e0       	ldi	r31, 0x06	; 6
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	82 83       	std	Z+2, r24	; 0x02
     84e:	80 8b       	std	Z+16, r24	; 0x10
     850:	81 8b       	std	Z+17, r24	; 0x11
     852:	e0 e8       	ldi	r30, 0x80	; 128
     854:	f1 e0       	ldi	r31, 0x01	; 1
     856:	80 e7       	ldi	r24, 0x70	; 112
     858:	82 83       	std	Z+2, r24	; 0x02
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	82 87       	std	Z+10, r24	; 0x0a
     85e:	e0 e4       	ldi	r30, 0x40	; 64
     860:	f8 e0       	ldi	r31, 0x08	; 8
     862:	8a e6       	ldi	r24, 0x6A	; 106
     864:	83 83       	std	Z+3, r24	; 0x03
     866:	8d ec       	ldi	r24, 0xCD	; 205
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	86 a3       	std	Z+38, r24	; 0x26
     86c:	97 a3       	std	Z+39, r25	; 0x27
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	68 94       	set
     874:	cc 24       	eor	r12, r12
     876:	c6 f8       	bld	r12, 6
     878:	dd 24       	eor	r13, r13
     87a:	d3 f8       	bld	r13, 3
     87c:	f6 01       	movw	r30, r12
     87e:	60 a1       	ldd	r22, Z+32	; 0x20
     880:	71 a1       	ldd	r23, Z+33	; 0x21
     882:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <pendulum_encoder>
     886:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <pendulum_encoder+0x1>
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	0f 92       	push	r0
     890:	60 83       	st	Z, r22
     892:	71 83       	std	Z+1, r23	; 0x01
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	e0 90 ee 20 	lds	r14, 0x20EE	; 0x8020ee <pendulum_encoder_radians>
     89c:	f0 90 ef 20 	lds	r15, 0x20EF	; 0x8020ef <pendulum_encoder_radians+0x1>
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	0f 92       	push	r0
     8a6:	07 2e       	mov	r0, r23
     8a8:	00 0c       	add	r0, r0
     8aa:	88 0b       	sbc	r24, r24
     8ac:	99 0b       	sbc	r25, r25
     8ae:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__floatsisf>
     8b2:	28 e2       	ldi	r18, 0x28	; 40
     8b4:	3f e0       	ldi	r19, 0x0F	; 15
     8b6:	49 ec       	ldi	r20, 0xC9	; 201
     8b8:	50 e4       	ldi	r21, 0x40	; 64
     8ba:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 ea       	ldi	r19, 0xA0	; 160
     8c2:	49 ef       	ldi	r20, 0xF9	; 249
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 c1 20 	call	0x4182	; 0x4182 <__divsf3>
     8ca:	f7 01       	movw	r30, r14
     8cc:	60 83       	st	Z, r22
     8ce:	71 83       	std	Z+1, r23	; 0x01
     8d0:	82 83       	std	Z+2, r24	; 0x02
     8d2:	93 83       	std	Z+3, r25	; 0x03
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	f8 01       	movw	r30, r16
     8da:	86 85       	ldd	r24, Z+14	; 0x0e
     8dc:	97 85       	ldd	r25, Z+15	; 0x0f
     8de:	a0 89       	ldd	r26, Z+16	; 0x10
     8e0:	b1 89       	ldd	r27, Z+17	; 0x11
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	a1 1d       	adc	r26, r1
     8e6:	b1 1d       	adc	r27, r1
     8e8:	86 87       	std	Z+14, r24	; 0x0e
     8ea:	97 87       	std	Z+15, r25	; 0x0f
     8ec:	a0 8b       	std	Z+16, r26	; 0x10
     8ee:	b1 8b       	std	Z+17, r27	; 0x11
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskDelayUntil>
     900:	bd cf       	rjmp	.-134    	; 0x87c <_ZN21task_pendulum_encoder3runEv+0x50>

00000902 <_ZN18task_motor_encoder3runEv>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <_ZN18task_motor_encoder3runEv+0x6>
     908:	1f 92       	push	r1
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	7c 01       	movw	r14, r24
     910:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
     914:	69 83       	std	Y+1, r22	; 0x01
     916:	7a 83       	std	Y+2, r23	; 0x02
     918:	8b 83       	std	Y+3, r24	; 0x03
     91a:	9c 83       	std	Y+4, r25	; 0x04
     91c:	e0 e8       	ldi	r30, 0x80	; 128
     91e:	f6 e0       	ldi	r31, 0x06	; 6
     920:	8c e0       	ldi	r24, 0x0C	; 12
     922:	82 83       	std	Z+2, r24	; 0x02
     924:	82 89       	ldd	r24, Z+18	; 0x12
     926:	83 60       	ori	r24, 0x03	; 3
     928:	82 8b       	std	Z+18, r24	; 0x12
     92a:	83 89       	ldd	r24, Z+19	; 0x13
     92c:	83 60       	ori	r24, 0x03	; 3
     92e:	83 8b       	std	Z+19, r24	; 0x13
     930:	e0 e8       	ldi	r30, 0x80	; 128
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	82 e7       	ldi	r24, 0x72	; 114
     936:	80 83       	st	Z, r24
     938:	89 e0       	ldi	r24, 0x09	; 9
     93a:	80 87       	std	Z+8, r24	; 0x08
     93c:	e0 e0       	ldi	r30, 0x00	; 0
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	88 e6       	ldi	r24, 0x68	; 104
     942:	83 83       	std	Z+3, r24	; 0x03
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	9f ef       	ldi	r25, 0xFF	; 255
     948:	86 a3       	std	Z+38, r24	; 0x26
     94a:	97 a3       	std	Z+39, r25	; 0x27
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 83       	st	Z, r24
     950:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     954:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	0f 92       	push	r0
     95e:	10 82       	st	Z, r1
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	12 82       	std	Z+2, r1	; 0x02
     964:	13 82       	std	Z+3, r1	; 0x03
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 2e       	mov	r0, r31
     96c:	81 2c       	mov	r8, r1
     96e:	f9 e0       	ldi	r31, 0x09	; 9
     970:	9f 2e       	mov	r9, r31
     972:	f0 2d       	mov	r31, r0
     974:	0f 2e       	mov	r0, r31
     976:	f4 e6       	ldi	r31, 0x64	; 100
     978:	4f 2e       	mov	r4, r31
     97a:	51 2c       	mov	r5, r1
     97c:	61 2c       	mov	r6, r1
     97e:	71 2c       	mov	r7, r1
     980:	f0 2d       	mov	r31, r0
     982:	f4 01       	movw	r30, r8
     984:	00 a1       	ldd	r16, Z+32	; 0x20
     986:	11 a1       	ldd	r17, Z+33	; 0x21
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	0f 92       	push	r0
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	a0 90 f4 20 	lds	r10, 0x20F4	; 0x8020f4 <linear_position>
     996:	b0 90 f5 20 	lds	r11, 0x20F5	; 0x8020f5 <linear_position+0x1>
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	0f 92       	push	r0
     9a0:	c8 01       	movw	r24, r16
     9a2:	01 2e       	mov	r0, r17
     9a4:	00 0c       	add	r0, r0
     9a6:	aa 0b       	sbc	r26, r26
     9a8:	bb 0b       	sbc	r27, r27
     9aa:	ac 01       	movw	r20, r24
     9ac:	bd 01       	movw	r22, r26
     9ae:	44 0f       	add	r20, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	66 1f       	adc	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	84 0f       	add	r24, r20
     9b8:	95 1f       	adc	r25, r21
     9ba:	a6 1f       	adc	r26, r22
     9bc:	b7 1f       	adc	r27, r23
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	88 1f       	adc	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	a3 01       	movw	r20, r6
     9cc:	92 01       	movw	r18, r4
     9ce:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__divmodsi4>
     9d2:	ca 01       	movw	r24, r20
     9d4:	b9 01       	movw	r22, r18
     9d6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__floatsisf>
     9da:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     9de:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     9e2:	20 81       	ld	r18, Z
     9e4:	31 81       	ldd	r19, Z+1	; 0x01
     9e6:	42 81       	ldd	r20, Z+2	; 0x02
     9e8:	53 81       	ldd	r21, Z+3	; 0x03
     9ea:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__subsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	4a e7       	ldi	r20, 0x7A	; 122
     9f4:	54 e4       	ldi	r21, 0x44	; 68
     9f6:	0e 94 c1 20 	call	0x4182	; 0x4182 <__divsf3>
     9fa:	f5 01       	movw	r30, r10
     9fc:	60 83       	st	Z, r22
     9fe:	71 83       	std	Z+1, r23	; 0x01
     a00:	82 83       	std	Z+2, r24	; 0x02
     a02:	93 83       	std	Z+3, r25	; 0x03
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <thdMotor>
     a0c:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <thdMotor+0x1>
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	0f 92       	push	r0
     a16:	c8 01       	movw	r24, r16
     a18:	8c 19       	sub	r24, r12
     a1a:	9d 09       	sbc	r25, r13
     a1c:	80 83       	st	Z, r24
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	f7 01       	movw	r30, r14
     a26:	86 85       	ldd	r24, Z+14	; 0x0e
     a28:	97 85       	ldd	r25, Z+15	; 0x0f
     a2a:	a0 89       	ldd	r26, Z+16	; 0x10
     a2c:	b1 89       	ldd	r27, Z+17	; 0x11
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	a1 1d       	adc	r26, r1
     a32:	b1 1d       	adc	r27, r1
     a34:	86 87       	std	Z+14, r24	; 0x0e
     a36:	97 87       	std	Z+15, r25	; 0x0f
     a38:	a0 8b       	std	Z+16, r26	; 0x10
     a3a:	b1 8b       	std	Z+17, r27	; 0x11
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskDelayUntil>
     a4c:	68 01       	movw	r12, r16
     a4e:	99 cf       	rjmp	.-206    	; 0x982 <_ZN18task_motor_encoder3runEv+0x80>

00000a50 <_ZN18task_motor_command3runEv>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <_ZN18task_motor_command3runEv+0x6>
     a56:	1f 92       	push	r1
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	8c 01       	movw	r16, r24
     a5e:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
     a62:	69 83       	std	Y+1, r22	; 0x01
     a64:	7a 83       	std	Y+2, r23	; 0x02
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	a0 e4       	ldi	r26, 0x40	; 64
     a6c:	b6 e0       	ldi	r27, 0x06	; 6
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	8c 93       	st	X, r24
     a74:	11 97       	sbiw	r26, 0x01	; 1
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	15 96       	adiw	r26, 0x05	; 5
     a7a:	8c 93       	st	X, r24
     a7c:	15 97       	sbiw	r26, 0x05	; 5
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f8 e0       	ldi	r31, 0x08	; 8
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 83       	st	Z, r24
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	81 83       	std	Z+1, r24	; 0x01
     a8a:	a6 a3       	std	Z+38, r26	; 0x26
     a8c:	b7 a3       	std	Z+39, r27	; 0x27
     a8e:	10 a6       	std	Z+40, r1	; 0x28
     a90:	11 a6       	std	Z+41, r1	; 0x29
     a92:	12 a6       	std	Z+42, r1	; 0x2a
     a94:	13 a6       	std	Z+43, r1	; 0x2b
     a96:	81 81       	ldd	r24, Z+1	; 0x01
     a98:	80 63       	ori	r24, 0x30	; 48
     a9a:	81 83       	std	Z+1, r24	; 0x01
     a9c:	e1 2c       	mov	r14, r1
     a9e:	68 94       	set
     aa0:	ff 24       	eor	r15, r15
     aa2:	f3 f8       	bld	r15, 3
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	0f 92       	push	r0
     aaa:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
     aae:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	f8 01       	movw	r30, r16
     abc:	82 8b       	std	Z+18, r24	; 0x12
     abe:	93 8b       	std	Z+19, r25	; 0x13
     ac0:	99 23       	and	r25, r25
     ac2:	34 f0       	brlt	.+12     	; 0xad0 <_ZN18task_motor_command3runEv+0x80>
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 a7       	std	Z+40, r24	; 0x28
     ac8:	91 a7       	std	Z+41, r25	; 0x29
     aca:	12 a6       	std	Z+42, r1	; 0x2a
     acc:	13 a6       	std	Z+43, r1	; 0x2b
     ace:	0c c0       	rjmp	.+24     	; 0xae8 <_ZN18task_motor_command3runEv+0x98>
     ad0:	f7 01       	movw	r30, r14
     ad2:	10 a6       	std	Z+40, r1	; 0x28
     ad4:	11 a6       	std	Z+41, r1	; 0x29
     ad6:	f8 01       	movw	r30, r16
     ad8:	82 89       	ldd	r24, Z+18	; 0x12
     ada:	93 89       	ldd	r25, Z+19	; 0x13
     adc:	91 95       	neg	r25
     ade:	81 95       	neg	r24
     ae0:	91 09       	sbc	r25, r1
     ae2:	f7 01       	movw	r30, r14
     ae4:	82 a7       	std	Z+42, r24	; 0x2a
     ae6:	93 a7       	std	Z+43, r25	; 0x2b
     ae8:	f8 01       	movw	r30, r16
     aea:	86 85       	ldd	r24, Z+14	; 0x0e
     aec:	97 85       	ldd	r25, Z+15	; 0x0f
     aee:	a0 89       	ldd	r26, Z+16	; 0x10
     af0:	b1 89       	ldd	r27, Z+17	; 0x11
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	a1 1d       	adc	r26, r1
     af6:	b1 1d       	adc	r27, r1
     af8:	86 87       	std	Z+14, r24	; 0x0e
     afa:	97 87       	std	Z+15, r25	; 0x0f
     afc:	a0 8b       	std	Z+16, r26	; 0x10
     afe:	b1 8b       	std	Z+17, r27	; 0x11
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskDelayUntil>
     b10:	c9 cf       	rjmp	.-110    	; 0xaa4 <_ZN18task_motor_command3runEv+0x54>

00000b12 <_ZN17task_limit_switch3runEv>:
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN17task_limit_switch3runEv+0x6>
     b18:	1f 92       	push	r1
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	8c 01       	movw	r16, r24
     b20:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
     b24:	69 83       	std	Y+1, r22	; 0x01
     b26:	7a 83       	std	Y+2, r23	; 0x02
     b28:	8b 83       	std	Y+3, r24	; 0x03
     b2a:	9c 83       	std	Y+4, r25	; 0x04
     b2c:	e0 e6       	ldi	r30, 0x60	; 96
     b2e:	f6 e0       	ldi	r31, 0x06	; 6
     b30:	90 81       	ld	r25, Z
     b32:	d8 01       	movw	r26, r16
     b34:	52 96       	adiw	r26, 0x12	; 18
     b36:	8c 91       	ld	r24, X
     b38:	52 97       	sbiw	r26, 0x12	; 18
     b3a:	89 2b       	or	r24, r25
     b3c:	80 83       	st	Z, r24
     b3e:	94 81       	ldd	r25, Z+4	; 0x04
     b40:	52 96       	adiw	r26, 0x12	; 18
     b42:	8c 91       	ld	r24, X
     b44:	52 97       	sbiw	r26, 0x12	; 18
     b46:	89 2b       	or	r24, r25
     b48:	84 83       	std	Z+4, r24	; 0x04
     b4a:	52 96       	adiw	r26, 0x12	; 18
     b4c:	8c 91       	ld	r24, X
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	21 f4       	brne	.+8      	; 0xb5a <_ZN17task_limit_switch3runEv+0x48>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <_ZN17task_limit_switch3runEv+0x52>
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	19 f4       	brne	.+6      	; 0xb64 <_ZN17task_limit_switch3runEv+0x52>
     b5e:	88 e1       	ldi	r24, 0x18	; 24
     b60:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     b64:	0f 2e       	mov	r0, r31
     b66:	f8 e6       	ldi	r31, 0x68	; 104
     b68:	ef 2e       	mov	r14, r31
     b6a:	f6 e0       	ldi	r31, 0x06	; 6
     b6c:	ff 2e       	mov	r15, r31
     b6e:	f0 2d       	mov	r31, r0
     b70:	dd 24       	eor	r13, r13
     b72:	d3 94       	inc	r13
     b74:	f7 01       	movw	r30, r14
     b76:	80 81       	ld	r24, Z
     b78:	80 fd       	sbrc	r24, 0
     b7a:	0b c0       	rjmp	.+22     	; 0xb92 <_ZN17task_limit_switch3runEv+0x80>
     b7c:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <leftLimitSwitch>
     b80:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <leftLimitSwitch+0x1>
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	0f 92       	push	r0
     b8a:	d0 82       	st	Z, r13
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0a c0       	rjmp	.+20     	; 0xba6 <_ZN17task_limit_switch3runEv+0x94>
     b92:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <leftLimitSwitch>
     b96:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <leftLimitSwitch+0x1>
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	0f 92       	push	r0
     ba0:	10 82       	st	Z, r1
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	d7 01       	movw	r26, r14
     ba8:	8c 91       	ld	r24, X
     baa:	82 fd       	sbrc	r24, 2
     bac:	0b c0       	rjmp	.+22     	; 0xbc4 <_ZN17task_limit_switch3runEv+0xb2>
     bae:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <rightLimitSwitch>
     bb2:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <rightLimitSwitch+0x1>
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	0f 92       	push	r0
     bbc:	d0 82       	st	Z, r13
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <_ZN17task_limit_switch3runEv+0xc6>
     bc4:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <rightLimitSwitch>
     bc8:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <rightLimitSwitch+0x1>
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	0f 92       	push	r0
     bd2:	10 82       	st	Z, r1
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	f8 01       	movw	r30, r16
     bda:	86 85       	ldd	r24, Z+14	; 0x0e
     bdc:	97 85       	ldd	r25, Z+15	; 0x0f
     bde:	a0 89       	ldd	r26, Z+16	; 0x10
     be0:	b1 89       	ldd	r27, Z+17	; 0x11
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	a1 1d       	adc	r26, r1
     be6:	b1 1d       	adc	r27, r1
     be8:	86 87       	std	Z+14, r24	; 0x0e
     bea:	97 87       	std	Z+15, r25	; 0x0f
     bec:	a0 8b       	std	Z+16, r26	; 0x10
     bee:	b1 8b       	std	Z+17, r27	; 0x11
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskDelayUntil>
     c00:	b9 cf       	rjmp	.-142    	; 0xb74 <_ZN17task_limit_switch3runEv+0x62>

00000c02 <_ZN8emstreamlsE15ser_manipulator>:
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
     c08:	86 2f       	mov	r24, r22
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	8b 30       	cpi	r24, 0x0B	; 11
     c0e:	91 05       	cpc	r25, r1
     c10:	d8 f5       	brcc	.+118    	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c12:	fc 01       	movw	r30, r24
     c14:	88 27       	eor	r24, r24
     c16:	e2 50       	subi	r30, 0x02	; 2
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__tablejump2__>
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	8a 83       	std	Y+2, r24	; 0x02
     c24:	31 c0       	rjmp	.+98     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	8a 83       	std	Y+2, r24	; 0x02
     c2a:	2e c0       	rjmp	.+92     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c2c:	8a e0       	ldi	r24, 0x0A	; 10
     c2e:	8a 83       	std	Y+2, r24	; 0x02
     c30:	2b c0       	rjmp	.+86     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c32:	80 e1       	ldi	r24, 0x10	; 16
     c34:	8a 83       	std	Y+2, r24	; 0x02
     c36:	28 c0       	rjmp	.+80     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	25 c0       	rjmp	.+74     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c3e:	1b 82       	std	Y+3, r1	; 0x03
     c40:	23 c0       	rjmp	.+70     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c42:	e8 81       	ld	r30, Y
     c44:	f9 81       	ldd	r31, Y+1	; 0x01
     c46:	02 80       	ldd	r0, Z+2	; 0x02
     c48:	f3 81       	ldd	r31, Z+3	; 0x03
     c4a:	e0 2d       	mov	r30, r0
     c4c:	6d e0       	ldi	r22, 0x0D	; 13
     c4e:	ce 01       	movw	r24, r28
     c50:	19 95       	eicall
     c52:	e8 81       	ld	r30, Y
     c54:	f9 81       	ldd	r31, Y+1	; 0x01
     c56:	02 80       	ldd	r0, Z+2	; 0x02
     c58:	f3 81       	ldd	r31, Z+3	; 0x03
     c5a:	e0 2d       	mov	r30, r0
     c5c:	6a e0       	ldi	r22, 0x0A	; 10
     c5e:	ce 01       	movw	r24, r28
     c60:	19 95       	eicall
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c64:	e8 81       	ld	r30, Y
     c66:	f9 81       	ldd	r31, Y+1	; 0x01
     c68:	02 84       	ldd	r0, Z+10	; 0x0a
     c6a:	f3 85       	ldd	r31, Z+11	; 0x0b
     c6c:	e0 2d       	mov	r30, r0
     c6e:	ce 01       	movw	r24, r28
     c70:	19 95       	eicall
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c74:	e8 81       	ld	r30, Y
     c76:	f9 81       	ldd	r31, Y+1	; 0x01
     c78:	00 84       	ldd	r0, Z+8	; 0x08
     c7a:	f1 85       	ldd	r31, Z+9	; 0x09
     c7c:	e0 2d       	mov	r30, r0
     c7e:	ce 01       	movw	r24, r28
     c80:	19 95       	eicall
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 83       	std	Y+4, r24	; 0x04
     c88:	ce 01       	movw	r24, r28
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <_ZN8frt_task20print_status_in_listEP8emstream>:
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	8b 01       	movw	r16, r22
     c9c:	e8 81       	ld	r30, Y
     c9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ca0:	02 80       	ldd	r0, Z+2	; 0x02
     ca2:	f3 81       	ldd	r31, Z+3	; 0x03
     ca4:	e0 2d       	mov	r30, r0
     ca6:	19 95       	eicall
     ca8:	66 e0       	ldi	r22, 0x06	; 6
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f0       	breq	.+6      	; 0xcbe <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     cb8:	b8 01       	movw	r22, r16
     cba:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN8frt_task20print_status_in_listEP8emstream>
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <_ZN8emstream4putsEPKc>:
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	8c 01       	movw	r16, r24
     cd2:	fb 01       	movw	r30, r22
     cd4:	dc 01       	movw	r26, r24
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	8c 91       	ld	r24, X
     cda:	81 11       	cpse	r24, r1
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <_ZN8emstream4putsEPKc+0x1e>
     cde:	60 81       	ld	r22, Z
     ce0:	61 11       	cpse	r22, r1
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <_ZN8emstream4putsEPKc+0x4a>
     ce4:	23 c0       	rjmp	.+70     	; 0xd2c <_ZN8emstream4putsEPKc+0x64>
     ce6:	d8 01       	movw	r26, r16
     ce8:	14 96       	adiw	r26, 0x04	; 4
     cea:	1c 92       	st	X, r1
     cec:	eb 01       	movw	r28, r22
     cee:	21 96       	adiw	r28, 0x01	; 1
     cf0:	64 91       	lpm	r22, Z
     cf2:	66 23       	and	r22, r22
     cf4:	d9 f0       	breq	.+54     	; 0xd2c <_ZN8emstream4putsEPKc+0x64>
     cf6:	d8 01       	movw	r26, r16
     cf8:	ed 91       	ld	r30, X+
     cfa:	fc 91       	ld	r31, X
     cfc:	02 80       	ldd	r0, Z+2	; 0x02
     cfe:	f3 81       	ldd	r31, Z+3	; 0x03
     d00:	e0 2d       	mov	r30, r0
     d02:	c8 01       	movw	r24, r16
     d04:	19 95       	eicall
     d06:	fe 01       	movw	r30, r28
     d08:	64 91       	lpm	r22, Z
     d0a:	21 96       	adiw	r28, 0x01	; 1
     d0c:	61 11       	cpse	r22, r1
     d0e:	f3 cf       	rjmp	.-26     	; 0xcf6 <_ZN8emstream4putsEPKc+0x2e>
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <_ZN8emstream4putsEPKc+0x64>
     d12:	ef 01       	movw	r28, r30
     d14:	21 96       	adiw	r28, 0x01	; 1
     d16:	d8 01       	movw	r26, r16
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	02 80       	ldd	r0, Z+2	; 0x02
     d1e:	f3 81       	ldd	r31, Z+3	; 0x03
     d20:	e0 2d       	mov	r30, r0
     d22:	c8 01       	movw	r24, r16
     d24:	19 95       	eicall
     d26:	69 91       	ld	r22, Y+
     d28:	61 11       	cpse	r22, r1
     d2a:	f5 cf       	rjmp	.-22     	; 0xd16 <_ZN8emstream4putsEPKc+0x4e>
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <_ZN8emstreamlsEm>:
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	a1 97       	sbiw	r28, 0x21	; 33
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	8c 01       	movw	r16, r24
     d50:	d4 2e       	mov	r13, r20
     d52:	e5 2e       	mov	r14, r21
     d54:	f6 2e       	mov	r15, r22
     d56:	97 2f       	mov	r25, r23
     d58:	f8 01       	movw	r30, r16
     d5a:	22 81       	ldd	r18, Z+2	; 0x02
     d5c:	20 31       	cpi	r18, 0x10	; 16
     d5e:	21 f0       	breq	.+8      	; 0xd68 <_ZN8emstreamlsEm+0x32>
     d60:	28 30       	cpi	r18, 0x08	; 8
     d62:	11 f0       	breq	.+4      	; 0xd68 <_ZN8emstreamlsEm+0x32>
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	71 f4       	brne	.+28     	; 0xd84 <_ZN8emstreamlsEm+0x4e>
     d68:	69 2f       	mov	r22, r25
     d6a:	c8 01       	movw	r24, r16
     d6c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     d70:	6f 2d       	mov	r22, r15
     d72:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     d76:	6e 2d       	mov	r22, r14
     d78:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     d7c:	6d 2d       	mov	r22, r13
     d7e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     d82:	0f c0       	rjmp	.+30     	; 0xda2 <_ZN8emstreamlsEm+0x6c>
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	ae 01       	movw	r20, r28
     d88:	4f 5f       	subi	r20, 0xFF	; 255
     d8a:	5f 4f       	sbci	r21, 0xFF	; 255
     d8c:	6d 2d       	mov	r22, r13
     d8e:	7e 2d       	mov	r23, r14
     d90:	8f 2d       	mov	r24, r15
     d92:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <ultoa>
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	c8 01       	movw	r24, r16
     d9e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     da2:	c8 01       	movw	r24, r16
     da4:	a1 96       	adiw	r28, 0x21	; 33
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	08 95       	ret

00000dba <_ZN8emstreamlsEj>:
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	61 97       	sbiw	r28, 0x11	; 17
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	8c 01       	movw	r16, r24
     dd0:	f6 2e       	mov	r15, r22
     dd2:	97 2f       	mov	r25, r23
     dd4:	f8 01       	movw	r30, r16
     dd6:	42 81       	ldd	r20, Z+2	; 0x02
     dd8:	40 31       	cpi	r20, 0x10	; 16
     dda:	21 f0       	breq	.+8      	; 0xde4 <_ZN8emstreamlsEj+0x2a>
     ddc:	48 30       	cpi	r20, 0x08	; 8
     dde:	11 f0       	breq	.+4      	; 0xde4 <_ZN8emstreamlsEj+0x2a>
     de0:	42 30       	cpi	r20, 0x02	; 2
     de2:	41 f4       	brne	.+16     	; 0xdf4 <_ZN8emstreamlsEj+0x3a>
     de4:	69 2f       	mov	r22, r25
     de6:	c8 01       	movw	r24, r16
     de8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     dec:	6f 2d       	mov	r22, r15
     dee:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <_ZN8emstreamlsEj+0x54>
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	8f 2d       	mov	r24, r15
     dfe:	0e 94 1f 20 	call	0x403e	; 0x403e <utoa>
     e02:	be 01       	movw	r22, r28
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	c8 01       	movw	r24, r16
     e0a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     e0e:	c8 01       	movw	r24, r16
     e10:	61 96       	adiw	r28, 0x11	; 17
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	08 95       	ret

00000e22 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     e22:	5f 92       	push	r5
     e24:	6f 92       	push	r6
     e26:	7f 92       	push	r7
     e28:	8f 92       	push	r8
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	5c 01       	movw	r10, r24
     e42:	3b 01       	movw	r6, r22
     e44:	4a 01       	movw	r8, r20
     e46:	12 2f       	mov	r17, r18
     e48:	50 2e       	mov	r5, r16
     e4a:	63 e0       	ldi	r22, 0x03	; 3
     e4c:	ca 01       	movw	r24, r20
     e4e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     e52:	a6 14       	cp	r10, r6
     e54:	b7 04       	cpc	r11, r7
     e56:	08 f0       	brcs	.+2      	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     e58:	7c c0       	rjmp	.+248    	; 0xf52 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     e5a:	65 01       	movw	r12, r10
     e5c:	84 e1       	ldi	r24, 0x14	; 20
     e5e:	c8 0e       	add	r12, r24
     e60:	d1 1c       	adc	r13, r1
     e62:	00 e0       	ldi	r16, 0x00	; 0
     e64:	75 01       	movw	r14, r10
     e66:	b5 01       	movw	r22, r10
     e68:	c4 01       	movw	r24, r8
     e6a:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     e74:	67 ec       	ldi	r22, 0xC7	; 199
     e76:	76 e0       	ldi	r23, 0x06	; 6
     e78:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     e7c:	11 23       	and	r17, r17
     e7e:	09 f4       	brne	.+2      	; 0xe82 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     e80:	6d c0       	rjmp	.+218    	; 0xf5c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e82:	00 23       	and	r16, r16
     e84:	09 f4       	brne	.+2      	; 0xe88 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     e86:	6a c0       	rjmp	.+212    	; 0xf5c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e88:	6a e0       	ldi	r22, 0x0A	; 10
     e8a:	c4 01       	movw	r24, r8
     e8c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     e90:	62 ec       	ldi	r22, 0xC2	; 194
     e92:	76 e0       	ldi	r23, 0x06	; 6
     e94:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     e98:	61 c0       	rjmp	.+194    	; 0xf5c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e9a:	11 23       	and	r17, r17
     e9c:	71 f0       	breq	.+28     	; 0xeba <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e9e:	01 11       	cpse	r16, r1
     ea0:	0c c0       	rjmp	.+24     	; 0xeba <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     ea2:	88 81       	ld	r24, Y
     ea4:	85 15       	cp	r24, r5
     ea6:	49 f0       	breq	.+18     	; 0xeba <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     ea8:	6a e0       	ldi	r22, 0x0A	; 10
     eaa:	c4 01       	movw	r24, r8
     eac:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     eb0:	6d eb       	ldi	r22, 0xBD	; 189
     eb2:	76 e0       	ldi	r23, 0x06	; 6
     eb4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     eb8:	01 e0       	ldi	r16, 0x01	; 1
     eba:	69 91       	ld	r22, Y+
     ebc:	c4 01       	movw	r24, r8
     ebe:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
     ec2:	dc 01       	movw	r26, r24
     ec4:	ed 91       	ld	r30, X+
     ec6:	fc 91       	ld	r31, X
     ec8:	02 80       	ldd	r0, Z+2	; 0x02
     eca:	f3 81       	ldd	r31, Z+3	; 0x03
     ecc:	e0 2d       	mov	r30, r0
     ece:	60 e2       	ldi	r22, 0x20	; 32
     ed0:	19 95       	eicall
     ed2:	cc 16       	cp	r12, r28
     ed4:	dd 06       	cpc	r13, r29
     ed6:	09 f7       	brne	.-62     	; 0xe9a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     ed8:	11 23       	and	r17, r17
     eda:	89 f0       	breq	.+34     	; 0xefe <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     edc:	6a e0       	ldi	r22, 0x0A	; 10
     ede:	c4 01       	movw	r24, r8
     ee0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     ee4:	ec 01       	movw	r28, r24
     ee6:	67 eb       	ldi	r22, 0xB7	; 183
     ee8:	76 e0       	ldi	r23, 0x06	; 6
     eea:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
     eee:	e8 81       	ld	r30, Y
     ef0:	f9 81       	ldd	r31, Y+1	; 0x01
     ef2:	02 80       	ldd	r0, Z+2	; 0x02
     ef4:	f3 81       	ldd	r31, Z+3	; 0x03
     ef6:	e0 2d       	mov	r30, r0
     ef8:	60 e2       	ldi	r22, 0x20	; 32
     efa:	ce 01       	movw	r24, r28
     efc:	19 95       	eicall
     efe:	f7 01       	movw	r30, r14
     f00:	61 91       	ld	r22, Z+
     f02:	7f 01       	movw	r14, r30
     f04:	80 ee       	ldi	r24, 0xE0	; 224
     f06:	86 0f       	add	r24, r22
     f08:	8f 35       	cpi	r24, 0x5F	; 95
     f0a:	48 f4       	brcc	.+18     	; 0xf1e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     f0c:	d4 01       	movw	r26, r8
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	02 80       	ldd	r0, Z+2	; 0x02
     f14:	f3 81       	ldd	r31, Z+3	; 0x03
     f16:	e0 2d       	mov	r30, r0
     f18:	c4 01       	movw	r24, r8
     f1a:	19 95       	eicall
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     f1e:	d4 01       	movw	r26, r8
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	02 80       	ldd	r0, Z+2	; 0x02
     f26:	f3 81       	ldd	r31, Z+3	; 0x03
     f28:	e0 2d       	mov	r30, r0
     f2a:	6e e2       	ldi	r22, 0x2E	; 46
     f2c:	c4 01       	movw	r24, r8
     f2e:	19 95       	eicall
     f30:	ce 14       	cp	r12, r14
     f32:	df 04       	cpc	r13, r15
     f34:	21 f7       	brne	.-56     	; 0xefe <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     f36:	b4 e1       	ldi	r27, 0x14	; 20
     f38:	ab 0e       	add	r10, r27
     f3a:	b1 1c       	adc	r11, r1
     f3c:	66 e0       	ldi	r22, 0x06	; 6
     f3e:	c4 01       	movw	r24, r8
     f40:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     f44:	e4 e1       	ldi	r30, 0x14	; 20
     f46:	ce 0e       	add	r12, r30
     f48:	d1 1c       	adc	r13, r1
     f4a:	a6 14       	cp	r10, r6
     f4c:	b7 04       	cpc	r11, r7
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     f50:	89 cf       	rjmp	.-238    	; 0xe64 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     f52:	62 e0       	ldi	r22, 0x02	; 2
     f54:	c4 01       	movw	r24, r8
     f56:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     f5c:	e7 01       	movw	r28, r14
     f5e:	9d cf       	rjmp	.-198    	; 0xe9a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	8f 90       	pop	r8
     f78:	7f 90       	pop	r7
     f7a:	6f 90       	pop	r6
     f7c:	5f 90       	pop	r5
     f7e:	08 95       	ret

00000f80 <_ZlsR8emstreamR10time_stamp>:
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	2f 97       	sbiw	r28, 0x0f	; 15
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	8c 01       	movw	r16, r24
     fa0:	7b 01       	movw	r14, r22
     fa2:	db 01       	movw	r26, r22
     fa4:	6d 91       	ld	r22, X+
     fa6:	7d 91       	ld	r23, X+
     fa8:	8d 91       	ld	r24, X+
     faa:	9c 91       	ld	r25, X
     fac:	0f 2e       	mov	r0, r31
     fae:	f8 ee       	ldi	r31, 0xE8	; 232
     fb0:	8f 2e       	mov	r8, r31
     fb2:	f3 e0       	ldi	r31, 0x03	; 3
     fb4:	9f 2e       	mov	r9, r31
     fb6:	a1 2c       	mov	r10, r1
     fb8:	b1 2c       	mov	r11, r1
     fba:	f0 2d       	mov	r31, r0
     fbc:	a5 01       	movw	r20, r10
     fbe:	94 01       	movw	r18, r8
     fc0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__udivmodsi4>
     fc4:	ba 01       	movw	r22, r20
     fc6:	a9 01       	movw	r20, r18
     fc8:	c8 01       	movw	r24, r16
     fca:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN8emstreamlsEm>
     fce:	d8 01       	movw	r26, r16
     fd0:	ed 91       	ld	r30, X+
     fd2:	fc 91       	ld	r31, X
     fd4:	02 80       	ldd	r0, Z+2	; 0x02
     fd6:	f3 81       	ldd	r31, Z+3	; 0x03
     fd8:	e0 2d       	mov	r30, r0
     fda:	6e e2       	ldi	r22, 0x2E	; 46
     fdc:	c8 01       	movw	r24, r16
     fde:	19 95       	eicall
     fe0:	f7 01       	movw	r30, r14
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	a5 01       	movw	r20, r10
     fec:	94 01       	movw	r18, r8
     fee:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__udivmodsi4>
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	60 e4       	ldi	r22, 0x40	; 64
     ff8:	72 e4       	ldi	r23, 0x42	; 66
     ffa:	8f e0       	ldi	r24, 0x0F	; 15
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__mulsi3>
    1002:	a5 01       	movw	r20, r10
    1004:	94 01       	movw	r18, r8
    1006:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__udivmodsi4>
    100a:	49 01       	movw	r8, r18
    100c:	5a 01       	movw	r10, r20
    100e:	f7 01       	movw	r30, r14
    1010:	a4 81       	ldd	r26, Z+4	; 0x04
    1012:	b5 81       	ldd	r27, Z+5	; 0x05
    1014:	20 e4       	ldi	r18, 0x40	; 64
    1016:	32 e4       	ldi	r19, 0x42	; 66
    1018:	4f e0       	ldi	r20, 0x0F	; 15
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	0e 94 91 22 	call	0x4522	; 0x4522 <__muluhisi3>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	38 e4       	ldi	r19, 0x48	; 72
    1024:	48 ee       	ldi	r20, 0xE8	; 232
    1026:	51 e0       	ldi	r21, 0x01	; 1
    1028:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__udivmodsi4>
    102c:	c5 01       	movw	r24, r10
    102e:	b4 01       	movw	r22, r8
    1030:	62 0f       	add	r22, r18
    1032:	73 1f       	adc	r23, r19
    1034:	84 1f       	adc	r24, r20
    1036:	95 1f       	adc	r25, r21
    1038:	7e 01       	movw	r14, r28
    103a:	f7 e0       	ldi	r31, 0x07	; 7
    103c:	ef 0e       	add	r14, r31
    103e:	f1 1c       	adc	r15, r1
    1040:	9e 01       	movw	r18, r28
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	59 01       	movw	r10, r18
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__divmodsi4>
    1054:	e6 2f       	mov	r30, r22
    1056:	28 87       	std	Y+8, r18	; 0x08
    1058:	39 87       	std	Y+9, r19	; 0x09
    105a:	4a 87       	std	Y+10, r20	; 0x0a
    105c:	5b 87       	std	Y+11, r21	; 0x0b
    105e:	68 85       	ldd	r22, Y+8	; 0x08
    1060:	79 85       	ldd	r23, Y+9	; 0x09
    1062:	8a 85       	ldd	r24, Y+10	; 0x0a
    1064:	9b 85       	ldd	r25, Y+11	; 0x0b
    1066:	20 e3       	ldi	r18, 0x30	; 48
    1068:	2e 0f       	add	r18, r30
    106a:	d7 01       	movw	r26, r14
    106c:	2e 93       	st	-X, r18
    106e:	7d 01       	movw	r14, r26
    1070:	aa 15       	cp	r26, r10
    1072:	bb 05       	cpc	r27, r11
    1074:	49 f7       	brne	.-46     	; 0x1048 <_ZlsR8emstreamR10time_stamp+0xc8>
    1076:	1f 82       	std	Y+7, r1	; 0x07
    1078:	be 01       	movw	r22, r28
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	c8 01       	movw	r24, r16
    1080:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1084:	c8 01       	movw	r24, r16
    1086:	2f 96       	adiw	r28, 0x0f	; 15
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	08 95       	ret

000010a2 <_ZN8frt_task12print_statusER8emstream>:
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	8b 01       	movw	r16, r22
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <pcTaskGetTaskName>
    10c6:	bc 01       	movw	r22, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    10ce:	d8 01       	movw	r26, r16
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	02 80       	ldd	r0, Z+2	; 0x02
    10d6:	f3 81       	ldd	r31, Z+3	; 0x03
    10d8:	e0 2d       	mov	r30, r0
    10da:	69 e0       	ldi	r22, 0x09	; 9
    10dc:	c8 01       	movw	r24, r16
    10de:	19 95       	eicall
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <pcTaskGetTaskName>
    10e8:	fc 01       	movw	r30, r24
    10ea:	01 90       	ld	r0, Z+
    10ec:	00 20       	and	r0, r0
    10ee:	e9 f7       	brne	.-6      	; 0x10ea <_ZN8frt_task12print_statusER8emstream+0x48>
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	e8 1b       	sub	r30, r24
    10f4:	f9 0b       	sbc	r31, r25
    10f6:	38 97       	sbiw	r30, 0x08	; 8
    10f8:	48 f4       	brcc	.+18     	; 0x110c <_ZN8frt_task12print_statusER8emstream+0x6a>
    10fa:	d8 01       	movw	r26, r16
    10fc:	ed 91       	ld	r30, X+
    10fe:	fc 91       	ld	r31, X
    1100:	02 80       	ldd	r0, Z+2	; 0x02
    1102:	f3 81       	ldd	r31, Z+3	; 0x03
    1104:	e0 2d       	mov	r30, r0
    1106:	69 e0       	ldi	r22, 0x09	; 9
    1108:	c8 01       	movw	r24, r16
    110a:	19 95       	eicall
    110c:	ce 84       	ldd	r12, Y+14	; 0x0e
    110e:	df 84       	ldd	r13, Y+15	; 0x0f
    1110:	e8 88       	ldd	r14, Y+16	; 0x10
    1112:	f9 88       	ldd	r15, Y+17	; 0x11
    1114:	a8 84       	ldd	r10, Y+8	; 0x08
    1116:	b9 84       	ldd	r11, Y+9	; 0x09
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <uxTaskGetStackHighWaterMark>
    1120:	98 2e       	mov	r9, r24
    1122:	8c 84       	ldd	r8, Y+12	; 0x0c
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	0e 94 23 1b 	call	0x3646	; 0x3646 <uxTaskPriorityGet>
    112c:	68 2f       	mov	r22, r24
    112e:	c8 01       	movw	r24, r16
    1130:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
    1134:	6a e0       	ldi	r22, 0x0A	; 10
    1136:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    113a:	ec 01       	movw	r28, r24
    113c:	65 eb       	ldi	r22, 0xB5	; 181
    113e:	76 e0       	ldi	r23, 0x06	; 6
    1140:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1144:	68 2d       	mov	r22, r8
    1146:	ce 01       	movw	r24, r28
    1148:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
    114c:	6a e0       	ldi	r22, 0x0A	; 10
    114e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1152:	ec 01       	movw	r28, r24
    1154:	63 eb       	ldi	r22, 0xB3	; 179
    1156:	76 e0       	ldi	r23, 0x06	; 6
    1158:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    115c:	69 2d       	mov	r22, r9
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
    1164:	6a e0       	ldi	r22, 0x0A	; 10
    1166:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    116a:	ec 01       	movw	r28, r24
    116c:	61 eb       	ldi	r22, 0xB1	; 177
    116e:	76 e0       	ldi	r23, 0x06	; 6
    1170:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1174:	b5 01       	movw	r22, r10
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
    117c:	6a e0       	ldi	r22, 0x0A	; 10
    117e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1182:	ec 01       	movw	r28, r24
    1184:	6f ea       	ldi	r22, 0xAF	; 175
    1186:	76 e0       	ldi	r23, 0x06	; 6
    1188:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    118c:	6a e0       	ldi	r22, 0x0A	; 10
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1194:	ec 01       	movw	r28, r24
    1196:	6d ea       	ldi	r22, 0xAD	; 173
    1198:	76 e0       	ldi	r23, 0x06	; 6
    119a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    119e:	b7 01       	movw	r22, r14
    11a0:	a6 01       	movw	r20, r12
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN8emstreamlsEm>
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	08 95       	ret

000011c2 <_ZN8frt_task19print_stack_in_listEP8emstream>:
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
    11d4:	7b 01       	movw	r14, r22
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <pcTaskGetTaskName>
    11de:	6c 01       	movw	r12, r24
    11e0:	6a e0       	ldi	r22, 0x0A	; 10
    11e2:	c7 01       	movw	r24, r14
    11e4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    11e8:	8c 01       	movw	r16, r24
    11ea:	68 ea       	ldi	r22, 0xA8	; 168
    11ec:	76 e0       	ldi	r23, 0x06	; 6
    11ee:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    11f2:	6a e0       	ldi	r22, 0x0A	; 10
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    11fa:	8c 01       	movw	r16, r24
    11fc:	61 ea       	ldi	r22, 0xA1	; 161
    11fe:	76 e0       	ldi	r23, 0x06	; 6
    1200:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1204:	b6 01       	movw	r22, r12
    1206:	c8 01       	movw	r24, r16
    1208:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    120c:	6a e0       	ldi	r22, 0x0A	; 10
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1214:	8c 01       	movw	r16, r24
    1216:	6b e9       	ldi	r22, 0x9B	; 155
    1218:	76 e0       	ldi	r23, 0x06	; 6
    121a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    121e:	66 e0       	ldi	r22, 0x06	; 6
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1226:	8a 85       	ldd	r24, Y+10	; 0x0a
    1228:	9b 85       	ldd	r25, Y+11	; 0x0b
    122a:	e8 85       	ldd	r30, Y+8	; 0x08
    122c:	f9 85       	ldd	r31, Y+9	; 0x09
    122e:	01 e1       	ldi	r16, 0x11	; 17
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	a7 01       	movw	r20, r14
    1234:	bc 01       	movw	r22, r24
    1236:	8e 1b       	sub	r24, r30
    1238:	9f 0b       	sbc	r25, r31
    123a:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z15hex_dump_memoryPhS_P8emstreambh>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	19 f0       	breq	.+6      	; 0x124c <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    1246:	b7 01       	movw	r22, r14
    1248:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN8frt_task19print_stack_in_listEP8emstream>
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	08 95       	ret

0000125e <_ZN9task_user18print_help_messageEv>:
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	6a e0       	ldi	r22, 0x0A	; 10
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	9f 81       	ldd	r25, Y+7	; 0x07
    126e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1272:	8c 01       	movw	r16, r24
    1274:	63 e6       	ldi	r22, 0x63	; 99
    1276:	76 e0       	ldi	r23, 0x06	; 6
    1278:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    127c:	6a e0       	ldi	r22, 0x0A	; 10
    127e:	c8 01       	movw	r24, r16
    1280:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1284:	8c 01       	movw	r16, r24
    1286:	6d e5       	ldi	r22, 0x5D	; 93
    1288:	76 e0       	ldi	r23, 0x06	; 6
    128a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    128e:	67 e0       	ldi	r22, 0x07	; 7
    1290:	c8 01       	movw	r24, r16
    1292:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1296:	6a e0       	ldi	r22, 0x0A	; 10
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12a0:	8c 01       	movw	r16, r24
    12a2:	6e e3       	ldi	r22, 0x3E	; 62
    12a4:	76 e0       	ldi	r23, 0x06	; 6
    12a6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    12aa:	6a e0       	ldi	r22, 0x0A	; 10
    12ac:	c8 01       	movw	r24, r16
    12ae:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12b2:	8c 01       	movw	r16, r24
    12b4:	68 e3       	ldi	r22, 0x38	; 56
    12b6:	76 e0       	ldi	r23, 0x06	; 6
    12b8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    12bc:	66 e0       	ldi	r22, 0x06	; 6
    12be:	c8 01       	movw	r24, r16
    12c0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12c4:	6a e0       	ldi	r22, 0x0A	; 10
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12ce:	8c 01       	movw	r16, r24
    12d0:	61 e2       	ldi	r22, 0x21	; 33
    12d2:	76 e0       	ldi	r23, 0x06	; 6
    12d4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    12d8:	66 e0       	ldi	r22, 0x06	; 6
    12da:	c8 01       	movw	r24, r16
    12dc:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12e0:	6a e0       	ldi	r22, 0x0A	; 10
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12ea:	8c 01       	movw	r16, r24
    12ec:	65 e0       	ldi	r22, 0x05	; 5
    12ee:	76 e0       	ldi	r23, 0x06	; 6
    12f0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    12f4:	66 e0       	ldi	r22, 0x06	; 6
    12f6:	c8 01       	movw	r24, r16
    12f8:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    12fc:	6a e0       	ldi	r22, 0x0A	; 10
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1306:	8c 01       	movw	r16, r24
    1308:	6d ee       	ldi	r22, 0xED	; 237
    130a:	75 e0       	ldi	r23, 0x05	; 5
    130c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1310:	66 e0       	ldi	r22, 0x06	; 6
    1312:	c8 01       	movw	r24, r16
    1314:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1318:	6a e0       	ldi	r22, 0x0A	; 10
    131a:	8e 81       	ldd	r24, Y+6	; 0x06
    131c:	9f 81       	ldd	r25, Y+7	; 0x07
    131e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1322:	8c 01       	movw	r16, r24
    1324:	6c ec       	ldi	r22, 0xCC	; 204
    1326:	75 e0       	ldi	r23, 0x05	; 5
    1328:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    132c:	66 e0       	ldi	r22, 0x06	; 6
    132e:	c8 01       	movw	r24, r16
    1330:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1334:	6a e0       	ldi	r22, 0x0A	; 10
    1336:	8e 81       	ldd	r24, Y+6	; 0x06
    1338:	9f 81       	ldd	r25, Y+7	; 0x07
    133a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    133e:	8c 01       	movw	r16, r24
    1340:	65 ea       	ldi	r22, 0xA5	; 165
    1342:	75 e0       	ldi	r23, 0x05	; 5
    1344:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1348:	66 e0       	ldi	r22, 0x06	; 6
    134a:	c8 01       	movw	r24, r16
    134c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1350:	6a e0       	ldi	r22, 0x0A	; 10
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    135a:	8c 01       	movw	r16, r24
    135c:	67 e8       	ldi	r22, 0x87	; 135
    135e:	75 e0       	ldi	r23, 0x05	; 5
    1360:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1364:	66 e0       	ldi	r22, 0x06	; 6
    1366:	c8 01       	movw	r24, r16
    1368:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    136c:	6a e0       	ldi	r22, 0x0A	; 10
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1376:	8c 01       	movw	r16, r24
    1378:	6c e6       	ldi	r22, 0x6C	; 108
    137a:	75 e0       	ldi	r23, 0x05	; 5
    137c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	c8 01       	movw	r24, r16
    1384:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1388:	6a e0       	ldi	r22, 0x0A	; 10
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	9f 81       	ldd	r25, Y+7	; 0x07
    138e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1392:	8c 01       	movw	r16, r24
    1394:	61 e5       	ldi	r22, 0x51	; 81
    1396:	75 e0       	ldi	r23, 0x05	; 5
    1398:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    139c:	66 e0       	ldi	r22, 0x06	; 6
    139e:	c8 01       	movw	r24, r16
    13a0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13a4:	6a e0       	ldi	r22, 0x0A	; 10
    13a6:	8e 81       	ldd	r24, Y+6	; 0x06
    13a8:	9f 81       	ldd	r25, Y+7	; 0x07
    13aa:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13ae:	8c 01       	movw	r16, r24
    13b0:	69 e3       	ldi	r22, 0x39	; 57
    13b2:	75 e0       	ldi	r23, 0x05	; 5
    13b4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    13b8:	66 e0       	ldi	r22, 0x06	; 6
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13c0:	6a e0       	ldi	r22, 0x0A	; 10
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13ca:	8c 01       	movw	r16, r24
    13cc:	61 e2       	ldi	r22, 0x21	; 33
    13ce:	75 e0       	ldi	r23, 0x05	; 5
    13d0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    13d4:	66 e0       	ldi	r22, 0x06	; 6
    13d6:	c8 01       	movw	r24, r16
    13d8:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13dc:	6a e0       	ldi	r22, 0x0A	; 10
    13de:	8e 81       	ldd	r24, Y+6	; 0x06
    13e0:	9f 81       	ldd	r25, Y+7	; 0x07
    13e2:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13e6:	8c 01       	movw	r16, r24
    13e8:	6a e0       	ldi	r22, 0x0A	; 10
    13ea:	75 e0       	ldi	r23, 0x05	; 5
    13ec:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    13f0:	66 e0       	ldi	r22, 0x06	; 6
    13f2:	c8 01       	movw	r24, r16
    13f4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    13f8:	6a e0       	ldi	r22, 0x0A	; 10
    13fa:	8e 81       	ldd	r24, Y+6	; 0x06
    13fc:	9f 81       	ldd	r25, Y+7	; 0x07
    13fe:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1402:	ec 01       	movw	r28, r24
    1404:	6b ef       	ldi	r22, 0xFB	; 251
    1406:	74 e0       	ldi	r23, 0x04	; 4
    1408:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    140c:	66 e0       	ldi	r22, 0x06	; 6
    140e:	ce 01       	movw	r24, r28
    1410:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	08 95       	ret

0000141e <_ZN9task_user3runEv>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	2c 97       	sbiw	r28, 0x0c	; 12
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	7c 01       	movw	r14, r24
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	1a 82       	std	Y+2, r1	; 0x02
    1432:	1b 82       	std	Y+3, r1	; 0x03
    1434:	1c 82       	std	Y+4, r1	; 0x04
    1436:	1d 82       	std	Y+5, r1	; 0x05
    1438:	1e 82       	std	Y+6, r1	; 0x06
    143a:	6a e0       	ldi	r22, 0x0A	; 10
    143c:	dc 01       	movw	r26, r24
    143e:	16 96       	adiw	r26, 0x06	; 6
    1440:	8d 91       	ld	r24, X+
    1442:	9c 91       	ld	r25, X
    1444:	17 97       	sbiw	r26, 0x07	; 7
    1446:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    144a:	6c 01       	movw	r12, r24
    144c:	6d ed       	ldi	r22, 0xDD	; 221
    144e:	74 e0       	ldi	r23, 0x04	; 4
    1450:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1454:	66 e0       	ldi	r22, 0x06	; 6
    1456:	c6 01       	movw	r24, r12
    1458:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    145c:	11 e0       	ldi	r17, 0x01	; 1
    145e:	81 2c       	mov	r8, r1
    1460:	68 94       	set
    1462:	99 24       	eor	r9, r9
    1464:	93 f8       	bld	r9, 3
    1466:	0f 2e       	mov	r0, r31
    1468:	f0 ee       	ldi	r31, 0xE0	; 224
    146a:	af 2e       	mov	r10, r31
    146c:	f0 e2       	ldi	r31, 0x20	; 32
    146e:	bf 2e       	mov	r11, r31
    1470:	f0 2d       	mov	r31, r0
    1472:	f7 01       	movw	r30, r14
    1474:	84 85       	ldd	r24, Z+12	; 0x0c
    1476:	88 23       	and	r24, r24
    1478:	21 f0       	breq	.+8      	; 0x1482 <_ZN9task_user3runEv+0x64>
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	09 f4       	brne	.+2      	; 0x1480 <_ZN9task_user3runEv+0x62>
    147e:	60 c0       	rjmp	.+192    	; 0x1540 <_ZN9task_user3runEv+0x122>
    1480:	63 c2       	rjmp	.+1222   	; 0x1948 <_ZN9task_user3runEv+0x52a>
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	97 81       	ldd	r25, Z+7	; 0x07
    1486:	dc 01       	movw	r26, r24
    1488:	ed 91       	ld	r30, X+
    148a:	fc 91       	ld	r31, X
    148c:	04 80       	ldd	r0, Z+4	; 0x04
    148e:	f5 81       	ldd	r31, Z+5	; 0x05
    1490:	e0 2d       	mov	r30, r0
    1492:	19 95       	eicall
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <_ZN9task_user3runEv+0x7c>
    1498:	37 c0       	rjmp	.+110    	; 0x1508 <_ZN9task_user3runEv+0xea>
    149a:	f7 01       	movw	r30, r14
    149c:	86 81       	ldd	r24, Z+6	; 0x06
    149e:	97 81       	ldd	r25, Z+7	; 0x07
    14a0:	dc 01       	movw	r26, r24
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	06 80       	ldd	r0, Z+6	; 0x06
    14a8:	f7 81       	ldd	r31, Z+7	; 0x07
    14aa:	e0 2d       	mov	r30, r0
    14ac:	19 95       	eicall
    14ae:	99 27       	eor	r25, r25
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	f9 f0       	breq	.+62     	; 0x14f4 <_ZN9task_user3runEv+0xd6>
    14b6:	03 97       	sbiw	r24, 0x03	; 3
    14b8:	09 f0       	breq	.+2      	; 0x14bc <_ZN9task_user3runEv+0x9e>
    14ba:	61 c2       	rjmp	.+1218   	; 0x197e <_ZN9task_user3runEv+0x560>
    14bc:	6a e0       	ldi	r22, 0x0A	; 10
    14be:	f7 01       	movw	r30, r14
    14c0:	86 81       	ldd	r24, Z+6	; 0x06
    14c2:	97 81       	ldd	r25, Z+7	; 0x07
    14c4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    14c8:	7c 01       	movw	r14, r24
    14ca:	6f ec       	ldi	r22, 0xCF	; 207
    14cc:	74 e0       	ldi	r23, 0x04	; 4
    14ce:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    14d2:	66 e0       	ldi	r22, 0x06	; 6
    14d4:	c7 01       	movw	r24, r14
    14d6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	88 ed       	ldi	r24, 0xD8	; 216
    14de:	08 b6       	in	r0, 0x38	; 56
    14e0:	18 be       	out	0x38, r1	; 56
    14e2:	84 bf       	out	0x34, r24	; 52
    14e4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    14e8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    14ec:	81 fd       	sbrc	r24, 1
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <_ZN9task_user3runEv+0xca>
    14f0:	08 be       	out	0x38, r0	; 56
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <_ZN9task_user3runEv+0xd4>
    14f4:	c7 01       	movw	r24, r14
    14f6:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN9task_user18print_help_messageEv>
    14fa:	d7 01       	movw	r26, r14
    14fc:	1c 96       	adiw	r26, 0x0c	; 12
    14fe:	1c 93       	st	X, r17
    1500:	1c 97       	sbiw	r26, 0x0c	; 12
    1502:	1d 96       	adiw	r26, 0x0d	; 13
    1504:	1c 93       	st	X, r17
    1506:	3b c2       	rjmp	.+1142   	; 0x197e <_ZN9task_user3runEv+0x560>
    1508:	8a ef       	ldi	r24, 0xFA	; 250
    150a:	90 e2       	ldi	r25, 0x20	; 32
    150c:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
    1510:	88 23       	and	r24, r24
    1512:	09 f4       	brne	.+2      	; 0x1516 <_ZN9task_user3runEv+0xf8>
    1514:	34 c2       	rjmp	.+1128   	; 0x197e <_ZN9task_user3runEv+0x560>
    1516:	d7 01       	movw	r26, r14
    1518:	16 96       	adiw	r26, 0x06	; 6
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	17 97       	sbiw	r26, 0x07	; 7
    1520:	01 90       	ld	r0, Z+
    1522:	f0 81       	ld	r31, Z
    1524:	e0 2d       	mov	r30, r0
    1526:	c2 80       	ldd	r12, Z+2	; 0x02
    1528:	d3 80       	ldd	r13, Z+3	; 0x03
    152a:	8a ef       	ldi	r24, 0xFA	; 250
    152c:	90 e2       	ldi	r25, 0x20	; 32
    152e:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
    1532:	68 2f       	mov	r22, r24
    1534:	f7 01       	movw	r30, r14
    1536:	86 81       	ldd	r24, Z+6	; 0x06
    1538:	97 81       	ldd	r25, Z+7	; 0x07
    153a:	f6 01       	movw	r30, r12
    153c:	19 95       	eicall
    153e:	1f c2       	rjmp	.+1086   	; 0x197e <_ZN9task_user3runEv+0x560>
    1540:	86 81       	ldd	r24, Z+6	; 0x06
    1542:	97 81       	ldd	r25, Z+7	; 0x07
    1544:	dc 01       	movw	r26, r24
    1546:	ed 91       	ld	r30, X+
    1548:	fc 91       	ld	r31, X
    154a:	04 80       	ldd	r0, Z+4	; 0x04
    154c:	f5 81       	ldd	r31, Z+5	; 0x05
    154e:	e0 2d       	mov	r30, r0
    1550:	19 95       	eicall
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <_ZN9task_user3runEv+0x13a>
    1556:	13 c2       	rjmp	.+1062   	; 0x197e <_ZN9task_user3runEv+0x560>
    1558:	f7 01       	movw	r30, r14
    155a:	86 81       	ldd	r24, Z+6	; 0x06
    155c:	97 81       	ldd	r25, Z+7	; 0x07
    155e:	dc 01       	movw	r26, r24
    1560:	ed 91       	ld	r30, X+
    1562:	fc 91       	ld	r31, X
    1564:	06 80       	ldd	r0, Z+6	; 0x06
    1566:	f7 81       	ldd	r31, Z+7	; 0x07
    1568:	e0 2d       	mov	r30, r0
    156a:	19 95       	eicall
    156c:	bc 01       	movw	r22, r24
    156e:	fc 01       	movw	r30, r24
    1570:	ff 27       	eor	r31, r31
    1572:	7b 97       	sbiw	r30, 0x1b	; 27
    1574:	ec 35       	cpi	r30, 0x5C	; 92
    1576:	f1 05       	cpc	r31, r1
    1578:	08 f0       	brcs	.+2      	; 0x157c <_ZN9task_user3runEv+0x15e>
    157a:	ca c1       	rjmp	.+916    	; 0x1910 <_ZN9task_user3runEv+0x4f2>
    157c:	88 27       	eor	r24, r24
    157e:	e7 5f       	subi	r30, 0xF7	; 247
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__tablejump2__>
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    1590:	bc 01       	movw	r22, r24
    1592:	f7 01       	movw	r30, r14
    1594:	86 81       	ldd	r24, Z+6	; 0x06
    1596:	97 81       	ldd	r25, Z+7	; 0x07
    1598:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZlsR8emstreamR10time_stamp>
    159c:	66 e0       	ldi	r22, 0x06	; 6
    159e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    15a2:	ed c1       	rjmp	.+986    	; 0x197e <_ZN9task_user3runEv+0x560>
    15a4:	1f 82       	std	Y+7, r1	; 0x07
    15a6:	18 86       	std	Y+8, r1	; 0x08
    15a8:	19 86       	std	Y+9, r1	; 0x09
    15aa:	1a 86       	std	Y+10, r1	; 0x0a
    15ac:	1b 86       	std	Y+11, r1	; 0x0b
    15ae:	1c 86       	std	Y+12, r1	; 0x0c
    15b0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <xPortGetFreeHeapSize>
    15b4:	3c 01       	movw	r6, r24
    15b6:	ce 01       	movw	r24, r28
    15b8:	07 96       	adiw	r24, 0x07	; 7
    15ba:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    15be:	2c 01       	movw	r4, r24
    15c0:	66 e0       	ldi	r22, 0x06	; 6
    15c2:	d7 01       	movw	r26, r14
    15c4:	16 96       	adiw	r26, 0x06	; 6
    15c6:	8d 91       	ld	r24, X+
    15c8:	9c 91       	ld	r25, X
    15ca:	17 97       	sbiw	r26, 0x07	; 7
    15cc:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    15d0:	6a e0       	ldi	r22, 0x0A	; 10
    15d2:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    15d6:	6c 01       	movw	r12, r24
    15d8:	60 e1       	ldi	r22, 0x10	; 16
    15da:	74 e0       	ldi	r23, 0x04	; 4
    15dc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    15e0:	6a e0       	ldi	r22, 0x0A	; 10
    15e2:	c6 01       	movw	r24, r12
    15e4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    15e8:	6c 01       	movw	r12, r24
    15ea:	64 e0       	ldi	r22, 0x04	; 4
    15ec:	74 e0       	ldi	r23, 0x04	; 4
    15ee:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    15f2:	66 e0       	ldi	r22, 0x06	; 6
    15f4:	c6 01       	movw	r24, r12
    15f6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    15fa:	6a e0       	ldi	r22, 0x0A	; 10
    15fc:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1600:	6c 01       	movw	r12, r24
    1602:	6d ef       	ldi	r22, 0xFD	; 253
    1604:	73 e0       	ldi	r23, 0x03	; 3
    1606:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    160a:	b2 01       	movw	r22, r4
    160c:	c6 01       	movw	r24, r12
    160e:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZlsR8emstreamR10time_stamp>
    1612:	6a e0       	ldi	r22, 0x0A	; 10
    1614:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1618:	6c 01       	movw	r12, r24
    161a:	6f ee       	ldi	r22, 0xEF	; 239
    161c:	73 e0       	ldi	r23, 0x03	; 3
    161e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1622:	b3 01       	movw	r22, r6
    1624:	c6 01       	movw	r24, r12
    1626:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
    162a:	6a e0       	ldi	r22, 0x0A	; 10
    162c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1630:	6c 01       	movw	r12, r24
    1632:	6d ee       	ldi	r22, 0xED	; 237
    1634:	73 e0       	ldi	r23, 0x03	; 3
    1636:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    163a:	4f ef       	ldi	r20, 0xFF	; 255
    163c:	5f e0       	ldi	r21, 0x0F	; 15
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	c6 01       	movw	r24, r12
    1644:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN8emstreamlsEm>
    1648:	f4 01       	movw	r30, r8
    164a:	60 a4       	ldd	r6, Z+40	; 0x28
    164c:	71 a4       	ldd	r7, Z+41	; 0x29
    164e:	6a e0       	ldi	r22, 0x0A	; 10
    1650:	d7 01       	movw	r26, r14
    1652:	16 96       	adiw	r26, 0x06	; 6
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	17 97       	sbiw	r26, 0x07	; 7
    165a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    165e:	6c 01       	movw	r12, r24
    1660:	62 ee       	ldi	r22, 0xE2	; 226
    1662:	73 e0       	ldi	r23, 0x03	; 3
    1664:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1668:	b3 01       	movw	r22, r6
    166a:	c6 01       	movw	r24, r12
    166c:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
    1670:	66 e0       	ldi	r22, 0x06	; 6
    1672:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1676:	66 e0       	ldi	r22, 0x06	; 6
    1678:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    167c:	f7 01       	movw	r30, r14
    167e:	c6 80       	ldd	r12, Z+6	; 0x06
    1680:	d7 80       	ldd	r13, Z+7	; 0x07
    1682:	6a e0       	ldi	r22, 0x0A	; 10
    1684:	c6 01       	movw	r24, r12
    1686:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    168a:	3c 01       	movw	r6, r24
    168c:	67 ed       	ldi	r22, 0xD7	; 215
    168e:	73 e0       	ldi	r23, 0x03	; 3
    1690:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1694:	6a e0       	ldi	r22, 0x0A	; 10
    1696:	c3 01       	movw	r24, r6
    1698:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    169c:	3c 01       	movw	r6, r24
    169e:	60 ed       	ldi	r22, 0xD0	; 208
    16a0:	73 e0       	ldi	r23, 0x03	; 3
    16a2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    16a6:	66 e0       	ldi	r22, 0x06	; 6
    16a8:	c3 01       	movw	r24, r6
    16aa:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16ae:	6a e0       	ldi	r22, 0x0A	; 10
    16b0:	c6 01       	movw	r24, r12
    16b2:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16b6:	3c 01       	movw	r6, r24
    16b8:	6f eb       	ldi	r22, 0xBF	; 191
    16ba:	73 e0       	ldi	r23, 0x03	; 3
    16bc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    16c0:	6a e0       	ldi	r22, 0x0A	; 10
    16c2:	c3 01       	movw	r24, r6
    16c4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16c8:	3c 01       	movw	r6, r24
    16ca:	63 eb       	ldi	r22, 0xB3	; 179
    16cc:	73 e0       	ldi	r23, 0x03	; 3
    16ce:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    16d2:	6a e0       	ldi	r22, 0x0A	; 10
    16d4:	c3 01       	movw	r24, r6
    16d6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16da:	3c 01       	movw	r6, r24
    16dc:	6d ea       	ldi	r22, 0xAD	; 173
    16de:	73 e0       	ldi	r23, 0x03	; 3
    16e0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    16e4:	66 e0       	ldi	r22, 0x06	; 6
    16e6:	c3 01       	movw	r24, r6
    16e8:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16ec:	6a e0       	ldi	r22, 0x0A	; 10
    16ee:	c6 01       	movw	r24, r12
    16f0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    16f4:	3c 01       	movw	r6, r24
    16f6:	6c e9       	ldi	r22, 0x9C	; 156
    16f8:	73 e0       	ldi	r23, 0x03	; 3
    16fa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    16fe:	6a e0       	ldi	r22, 0x0A	; 10
    1700:	c3 01       	movw	r24, r6
    1702:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1706:	3c 01       	movw	r6, r24
    1708:	60 e9       	ldi	r22, 0x90	; 144
    170a:	73 e0       	ldi	r23, 0x03	; 3
    170c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1710:	6a e0       	ldi	r22, 0x0A	; 10
    1712:	c3 01       	movw	r24, r6
    1714:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1718:	3c 01       	movw	r6, r24
    171a:	6a e8       	ldi	r22, 0x8A	; 138
    171c:	73 e0       	ldi	r23, 0x03	; 3
    171e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1722:	66 e0       	ldi	r22, 0x06	; 6
    1724:	c3 01       	movw	r24, r6
    1726:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    172a:	d5 01       	movw	r26, r10
    172c:	8d 91       	ld	r24, X+
    172e:	9c 91       	ld	r25, X
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	19 f0       	breq	.+6      	; 0x173a <_ZN9task_user3runEv+0x31c>
    1734:	b6 01       	movw	r22, r12
    1736:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN8frt_task20print_status_in_listEP8emstream>
    173a:	0e 94 80 1b 	call	0x3700	; 0x3700 <xTaskGetIdleTaskHandle>
    173e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <uxTaskGetStackHighWaterMark>
    1742:	08 2f       	mov	r16, r24
    1744:	6a e0       	ldi	r22, 0x0A	; 10
    1746:	c6 01       	movw	r24, r12
    1748:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    174c:	6c 01       	movw	r12, r24
    174e:	6f e7       	ldi	r22, 0x7F	; 127
    1750:	73 e0       	ldi	r23, 0x03	; 3
    1752:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1756:	60 2f       	mov	r22, r16
    1758:	c6 01       	movw	r24, r12
    175a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN8emstreamlsEh>
    175e:	6a e0       	ldi	r22, 0x0A	; 10
    1760:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1764:	6c 01       	movw	r12, r24
    1766:	6d e7       	ldi	r22, 0x7D	; 125
    1768:	73 e0       	ldi	r23, 0x03	; 3
    176a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    176e:	64 e6       	ldi	r22, 0x64	; 100
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	c6 01       	movw	r24, r12
    1774:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
    1778:	6a e0       	ldi	r22, 0x0A	; 10
    177a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    177e:	6c 01       	movw	r12, r24
    1780:	6a e7       	ldi	r22, 0x7A	; 122
    1782:	73 e0       	ldi	r23, 0x03	; 3
    1784:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1788:	66 e0       	ldi	r22, 0x06	; 6
    178a:	c6 01       	movw	r24, r12
    178c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1790:	f6 c0       	rjmp	.+492    	; 0x197e <_ZN9task_user3runEv+0x560>
    1792:	f7 01       	movw	r30, r14
    1794:	c6 80       	ldd	r12, Z+6	; 0x06
    1796:	d7 80       	ldd	r13, Z+7	; 0x07
    1798:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    179c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	19 f0       	breq	.+6      	; 0x17aa <_ZN9task_user3runEv+0x38c>
    17a4:	b6 01       	movw	r22, r12
    17a6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN8frt_task19print_stack_in_listEP8emstream>
    17aa:	6a e0       	ldi	r22, 0x0A	; 10
    17ac:	c6 01       	movw	r24, r12
    17ae:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    17b2:	3c 01       	movw	r6, r24
    17b4:	60 e4       	ldi	r22, 0x40	; 64
    17b6:	74 e0       	ldi	r23, 0x04	; 4
    17b8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    17bc:	6a e0       	ldi	r22, 0x0A	; 10
    17be:	c3 01       	movw	r24, r6
    17c0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    17c4:	3c 01       	movw	r6, r24
    17c6:	65 e3       	ldi	r22, 0x35	; 53
    17c8:	74 e0       	ldi	r23, 0x04	; 4
    17ca:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    17ce:	6a e0       	ldi	r22, 0x0A	; 10
    17d0:	c3 01       	movw	r24, r6
    17d2:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    17d6:	3c 01       	movw	r6, r24
    17d8:	6f e2       	ldi	r22, 0x2F	; 47
    17da:	74 e0       	ldi	r23, 0x04	; 4
    17dc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    17e0:	66 e0       	ldi	r22, 0x06	; 6
    17e2:	c3 01       	movw	r24, r6
    17e4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    17e8:	80 91 92 31 	lds	r24, 0x3192	; 0x803192 <portStackTopForTask>
    17ec:	90 91 93 31 	lds	r25, 0x3193	; 0x803193 <portStackTopForTask+0x1>
    17f0:	bc 01       	movw	r22, r24
    17f2:	6f 5f       	subi	r22, 0xFF	; 255
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	01 e1       	ldi	r16, 0x11	; 17
    17f8:	21 2f       	mov	r18, r17
    17fa:	a6 01       	movw	r20, r12
    17fc:	83 56       	subi	r24, 0x63	; 99
    17fe:	91 09       	sbc	r25, r1
    1800:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z15hex_dump_memoryPhS_P8emstreambh>
    1804:	bc c0       	rjmp	.+376    	; 0x197e <_ZN9task_user3runEv+0x560>
    1806:	c7 01       	movw	r24, r14
    1808:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN9task_user18print_help_messageEv>
    180c:	b8 c0       	rjmp	.+368    	; 0x197e <_ZN9task_user3runEv+0x560>
    180e:	6a e0       	ldi	r22, 0x0A	; 10
    1810:	d7 01       	movw	r26, r14
    1812:	16 96       	adiw	r26, 0x06	; 6
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	17 97       	sbiw	r26, 0x07	; 7
    181a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    181e:	6c 01       	movw	r12, r24
    1820:	6d eb       	ldi	r22, 0xBD	; 189
    1822:	74 e0       	ldi	r23, 0x04	; 4
    1824:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1828:	66 e0       	ldi	r22, 0x06	; 6
    182a:	c6 01       	movw	r24, r12
    182c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1830:	f7 01       	movw	r30, r14
    1832:	14 86       	std	Z+12, r1	; 0x0c
    1834:	15 86       	std	Z+13, r1	; 0x0d
    1836:	a3 c0       	rjmp	.+326    	; 0x197e <_ZN9task_user3runEv+0x560>
    1838:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    183c:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	0f 92       	push	r0
    1846:	10 83       	st	Z, r17
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	6a e0       	ldi	r22, 0x0A	; 10
    184e:	d7 01       	movw	r26, r14
    1850:	16 96       	adiw	r26, 0x06	; 6
    1852:	8d 91       	ld	r24, X+
    1854:	9c 91       	ld	r25, X
    1856:	17 97       	sbiw	r26, 0x07	; 7
    1858:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    185c:	6c 01       	movw	r12, r24
    185e:	60 eb       	ldi	r22, 0xB0	; 176
    1860:	74 e0       	ldi	r23, 0x04	; 4
    1862:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1866:	66 e0       	ldi	r22, 0x06	; 6
    1868:	c6 01       	movw	r24, r12
    186a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    186e:	87 c0       	rjmp	.+270    	; 0x197e <_ZN9task_user3runEv+0x560>
    1870:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1874:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	0f 92       	push	r0
    187e:	10 83       	st	Z, r17
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	6a e0       	ldi	r22, 0x0A	; 10
    1886:	f7 01       	movw	r30, r14
    1888:	86 81       	ldd	r24, Z+6	; 0x06
    188a:	97 81       	ldd	r25, Z+7	; 0x07
    188c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1890:	6c 01       	movw	r12, r24
    1892:	6f e9       	ldi	r22, 0x9F	; 159
    1894:	74 e0       	ldi	r23, 0x04	; 4
    1896:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    189a:	66 e0       	ldi	r22, 0x06	; 6
    189c:	c6 01       	movw	r24, r12
    189e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    18a2:	6d c0       	rjmp	.+218    	; 0x197e <_ZN9task_user3runEv+0x560>
    18a4:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    18a8:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	0f 92       	push	r0
    18b2:	10 83       	st	Z, r17
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	6a e0       	ldi	r22, 0x0A	; 10
    18ba:	d7 01       	movw	r26, r14
    18bc:	16 96       	adiw	r26, 0x06	; 6
    18be:	8d 91       	ld	r24, X+
    18c0:	9c 91       	ld	r25, X
    18c2:	17 97       	sbiw	r26, 0x07	; 7
    18c4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    18c8:	6c 01       	movw	r12, r24
    18ca:	60 e9       	ldi	r22, 0x90	; 144
    18cc:	74 e0       	ldi	r23, 0x04	; 4
    18ce:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    18d2:	66 e0       	ldi	r22, 0x06	; 6
    18d4:	c6 01       	movw	r24, r12
    18d6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    18da:	51 c0       	rjmp	.+162    	; 0x197e <_ZN9task_user3runEv+0x560>
    18dc:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    18e0:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	0f 92       	push	r0
    18ea:	10 83       	st	Z, r17
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	6a e0       	ldi	r22, 0x0A	; 10
    18f2:	f7 01       	movw	r30, r14
    18f4:	86 81       	ldd	r24, Z+6	; 0x06
    18f6:	97 81       	ldd	r25, Z+7	; 0x07
    18f8:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    18fc:	6c 01       	movw	r12, r24
    18fe:	68 e6       	ldi	r22, 0x68	; 104
    1900:	74 e0       	ldi	r23, 0x04	; 4
    1902:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1906:	66 e0       	ldi	r22, 0x06	; 6
    1908:	c6 01       	movw	r24, r12
    190a:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    190e:	37 c0       	rjmp	.+110    	; 0x197e <_ZN9task_user3runEv+0x560>
    1910:	d7 01       	movw	r26, r14
    1912:	16 96       	adiw	r26, 0x06	; 6
    1914:	8d 91       	ld	r24, X+
    1916:	9c 91       	ld	r25, X
    1918:	17 97       	sbiw	r26, 0x07	; 7
    191a:	dc 01       	movw	r26, r24
    191c:	ed 91       	ld	r30, X+
    191e:	fc 91       	ld	r31, X
    1920:	02 80       	ldd	r0, Z+2	; 0x02
    1922:	f3 81       	ldd	r31, Z+3	; 0x03
    1924:	e0 2d       	mov	r30, r0
    1926:	19 95       	eicall
    1928:	6a e0       	ldi	r22, 0x0A	; 10
    192a:	f7 01       	movw	r30, r14
    192c:	86 81       	ldd	r24, Z+6	; 0x06
    192e:	97 81       	ldd	r25, Z+7	; 0x07
    1930:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1934:	6c 01       	movw	r12, r24
    1936:	62 e6       	ldi	r22, 0x62	; 98
    1938:	74 e0       	ldi	r23, 0x04	; 4
    193a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    193e:	66 e0       	ldi	r22, 0x06	; 6
    1940:	c6 01       	movw	r24, r12
    1942:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1946:	1b c0       	rjmp	.+54     	; 0x197e <_ZN9task_user3runEv+0x560>
    1948:	6a e0       	ldi	r22, 0x0A	; 10
    194a:	86 81       	ldd	r24, Z+6	; 0x06
    194c:	97 81       	ldd	r25, Z+7	; 0x07
    194e:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1952:	7c 01       	movw	r14, r24
    1954:	65 e4       	ldi	r22, 0x45	; 69
    1956:	74 e0       	ldi	r23, 0x04	; 4
    1958:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    195c:	66 e0       	ldi	r22, 0x06	; 6
    195e:	c7 01       	movw	r24, r14
    1960:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	88 ed       	ldi	r24, 0xD8	; 216
    1968:	08 b6       	in	r0, 0x38	; 56
    196a:	18 be       	out	0x38, r1	; 56
    196c:	84 bf       	out	0x34, r24	; 52
    196e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1972:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1976:	81 fd       	sbrc	r24, 1
    1978:	fc cf       	rjmp	.-8      	; 0x1972 <_ZN9task_user3runEv+0x554>
    197a:	08 be       	out	0x38, r0	; 56
    197c:	ff cf       	rjmp	.-2      	; 0x197c <_ZN9task_user3runEv+0x55e>
    197e:	f7 01       	movw	r30, r14
    1980:	86 85       	ldd	r24, Z+14	; 0x0e
    1982:	97 85       	ldd	r25, Z+15	; 0x0f
    1984:	a0 89       	ldd	r26, Z+16	; 0x10
    1986:	b1 89       	ldd	r27, Z+17	; 0x11
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	a1 1d       	adc	r26, r1
    198c:	b1 1d       	adc	r27, r1
    198e:	86 87       	std	Z+14, r24	; 0x0e
    1990:	97 87       	std	Z+15, r25	; 0x0f
    1992:	a0 8b       	std	Z+16, r26	; 0x10
    1994:	b1 8b       	std	Z+17, r27	; 0x11
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <vTaskDelay>
    19a2:	67 cd       	rjmp	.-1330   	; 0x1472 <_ZN9task_user3runEv+0x54>

000019a4 <_ZN22task_system_controller3runEv>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <_ZN22task_system_controller3runEv+0x6>
    19aa:	1f 92       	push	r1
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8c 01       	movw	r16, r24
    19b2:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTaskGetTickCount>
    19b6:	69 83       	std	Y+1, r22	; 0x01
    19b8:	7a 83       	std	Y+2, r23	; 0x02
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	0f 2e       	mov	r0, r31
    19c0:	f3 e0       	ldi	r31, 0x03	; 3
    19c2:	7f 2e       	mov	r7, r31
    19c4:	f0 2d       	mov	r31, r0
    19c6:	0f 2e       	mov	r0, r31
    19c8:	fc ed       	ldi	r31, 0xDC	; 220
    19ca:	ef 2e       	mov	r14, r31
    19cc:	f1 2c       	mov	r15, r1
    19ce:	f0 2d       	mov	r31, r0
    19d0:	0f 2e       	mov	r0, r31
    19d2:	f4 e6       	ldi	r31, 0x64	; 100
    19d4:	2f 2e       	mov	r2, r31
    19d6:	31 2c       	mov	r3, r1
    19d8:	f0 2d       	mov	r31, r0
    19da:	68 94       	set
    19dc:	66 24       	eor	r6, r6
    19de:	62 f8       	bld	r6, 2
    19e0:	0f 2e       	mov	r0, r31
    19e2:	f4 e6       	ldi	r31, 0x64	; 100
    19e4:	5f 2e       	mov	r5, r31
    19e6:	f0 2d       	mov	r31, r0
    19e8:	0f 2e       	mov	r0, r31
    19ea:	f4 e2       	ldi	r31, 0x24	; 36
    19ec:	cf 2e       	mov	r12, r31
    19ee:	dd 24       	eor	r13, r13
    19f0:	da 94       	dec	r13
    19f2:	f0 2d       	mov	r31, r0
    19f4:	68 94       	set
    19f6:	44 24       	eor	r4, r4
    19f8:	41 f8       	bld	r4, 1
    19fa:	d8 01       	movw	r26, r16
    19fc:	1c 96       	adiw	r26, 0x0c	; 12
    19fe:	8c 91       	ld	r24, X
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <_ZN22task_system_controller3runEv+0x62>
    1a04:	be c0       	rjmp	.+380    	; 0x1b82 <_ZN22task_system_controller3runEv+0x1de>
    1a06:	30 f4       	brcc	.+12     	; 0x1a14 <_ZN22task_system_controller3runEv+0x70>
    1a08:	88 23       	and	r24, r24
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <_ZN22task_system_controller3runEv+0x7e>
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <_ZN22task_system_controller3runEv+0x6e>
    1a10:	6d c0       	rjmp	.+218    	; 0x1aec <_ZN22task_system_controller3runEv+0x148>
    1a12:	b1 c1       	rjmp	.+866    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <_ZN22task_system_controller3runEv+0x76>
    1a18:	e4 c0       	rjmp	.+456    	; 0x1be2 <_ZN22task_system_controller3runEv+0x23e>
    1a1a:	84 36       	cpi	r24, 0x64	; 100
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <_ZN22task_system_controller3runEv+0x7c>
    1a1e:	8b c1       	rjmp	.+790    	; 0x1d36 <_ZN22task_system_controller3runEv+0x392>
    1a20:	aa c1       	rjmp	.+852    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1a22:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    1a26:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	10 82       	st	Z, r1
    1a32:	11 82       	std	Z+1, r1	; 0x01
    1a34:	12 82       	std	Z+2, r1	; 0x02
    1a36:	13 82       	std	Z+3, r1	; 0x03
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	0f 92       	push	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    1a4a:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <_ZN22task_system_controller3runEv+0xb2>
    1a54:	90 c1       	rjmp	.+800    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1a56:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1a5a:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	0f 92       	push	r0
    1a64:	10 82       	st	Z, r1
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    1a6e:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	0f 92       	push	r0
    1a78:	10 82       	st	Z, r1
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1a82:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	0f 92       	push	r0
    1a8c:	e0 82       	st	Z, r14
    1a8e:	f1 82       	std	Z+1, r15	; 0x01
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	0f 92       	push	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <rightLimitSwitch>
    1aa2:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <rightLimitSwitch+0x1>
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <_ZN22task_system_controller3runEv+0x10a>
    1aac:	64 c1       	rjmp	.+712    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	0f 92       	push	r0
    1ab4:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <linear_position>
    1ab8:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <linear_position+0x1>
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ac2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    1acc:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	0f 92       	push	r0
    1ad6:	80 83       	st	Z, r24
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	b3 83       	std	Z+3, r27	; 0x03
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	84 87       	std	Z+12, r24	; 0x0c
    1ae8:	85 87       	std	Z+13, r24	; 0x0d
    1aea:	45 c1       	rjmp	.+650    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1aec:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    1af0:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	10 82       	st	Z, r1
    1afc:	0f 90       	pop	r0
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b04:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	0f 92       	push	r0
    1b0e:	c0 82       	st	Z, r12
    1b10:	d1 82       	std	Z+1, r13	; 0x01
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	0f 92       	push	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <leftLimitSwitch>
    1b24:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <leftLimitSwitch+0x1>
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	c9 f0       	breq	.+50     	; 0x1b60 <_ZN22task_system_controller3runEv+0x1bc>
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	0f 92       	push	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <linear_position>
    1b3c:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <linear_position+0x1>
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	0e 94 33 21 	call	0x4266	; 0x4266 <__fixsfsi>
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	52 96       	adiw	r26, 0x12	; 18
    1b50:	6d 93       	st	X+, r22
    1b52:	7c 93       	st	X, r23
    1b54:	53 97       	sbiw	r26, 0x13	; 19
    1b56:	1c 96       	adiw	r26, 0x0c	; 12
    1b58:	4c 92       	st	X, r4
    1b5a:	1c 97       	sbiw	r26, 0x0c	; 12
    1b5c:	1d 96       	adiw	r26, 0x0d	; 13
    1b5e:	4c 92       	st	X, r4
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	0f 92       	push	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1b6e:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <_ZN22task_system_controller3runEv+0x1d6>
    1b78:	fe c0       	rjmp	.+508    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	14 86       	std	Z+12, r1	; 0x0c
    1b7e:	15 86       	std	Z+13, r1	; 0x0d
    1b80:	fa c0       	rjmp	.+500    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1b82:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b86:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	0f 92       	push	r0
    1b90:	10 82       	st	Z, r1
    1b92:	11 82       	std	Z+1, r1	; 0x01
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	68 ec       	ldi	r22, 0xC8	; 200
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <vTaskDelay>
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	0f 92       	push	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <leftLimitSwitch>
    1bb2:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <leftLimitSwitch+0x1>
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 23       	and	r24, r24
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <_ZN22task_system_controller3runEv+0x230>
    1bbc:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1bc0:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	0f 92       	push	r0
    1bca:	e0 82       	st	Z, r14
    1bcc:	f1 82       	std	Z+1, r15	; 0x01
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	d1 c0       	rjmp	.+418    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1bd4:	d8 01       	movw	r26, r16
    1bd6:	1c 96       	adiw	r26, 0x0c	; 12
    1bd8:	7c 92       	st	X, r7
    1bda:	1c 97       	sbiw	r26, 0x0c	; 12
    1bdc:	1d 96       	adiw	r26, 0x0d	; 13
    1bde:	7c 92       	st	X, r7
    1be0:	ca c0       	rjmp	.+404    	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1be2:	f8 01       	movw	r30, r16
    1be4:	62 89       	ldd	r22, Z+18	; 0x12
    1be6:	73 89       	ldd	r23, Z+19	; 0x13
    1be8:	77 23       	and	r23, r23
    1bea:	14 f4       	brge	.+4      	; 0x1bf0 <_ZN22task_system_controller3runEv+0x24c>
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	75 95       	asr	r23
    1bf2:	67 95       	ror	r22
    1bf4:	d8 01       	movw	r26, r16
    1bf6:	54 96       	adiw	r26, 0x14	; 20
    1bf8:	6d 93       	st	X+, r22
    1bfa:	7c 93       	st	X, r23
    1bfc:	55 97       	sbiw	r26, 0x15	; 21
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	0f 92       	push	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	07 2e       	mov	r0, r23
    1c0a:	00 0c       	add	r0, r0
    1c0c:	88 0b       	sbc	r24, r24
    1c0e:	99 0b       	sbc	r25, r25
    1c10:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__floatsisf>
    1c14:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <linear_position>
    1c18:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <linear_position+0x1>
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	42 81       	ldd	r20, Z+2	; 0x02
    1c22:	53 81       	ldd	r21, Z+3	; 0x03
    1c24:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__subsf3>
    1c28:	0e 94 33 21 	call	0x4266	; 0x4266 <__fixsfsi>
    1c2c:	4b 01       	movw	r8, r22
    1c2e:	5c 01       	movw	r10, r24
    1c30:	f8 01       	movw	r30, r16
    1c32:	66 8b       	std	Z+22, r22	; 0x16
    1c34:	77 8b       	std	Z+23, r23	; 0x17
    1c36:	20 8d       	ldd	r18, Z+24	; 0x18
    1c38:	31 8d       	ldd	r19, Z+25	; 0x19
    1c3a:	26 0f       	add	r18, r22
    1c3c:	37 1f       	adc	r19, r23
    1c3e:	20 8f       	std	Z+24, r18	; 0x18
    1c40:	31 8f       	std	Z+25, r19	; 0x19
    1c42:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1c46:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	d8 01       	movw	r26, r16
    1c52:	5c 96       	adiw	r26, 0x1c	; 28
    1c54:	4d 91       	ld	r20, X+
    1c56:	5c 91       	ld	r21, X
    1c58:	5d 97       	sbiw	r26, 0x1d	; 29
    1c5a:	24 9f       	mul	r18, r20
    1c5c:	c0 01       	movw	r24, r0
    1c5e:	25 9f       	mul	r18, r21
    1c60:	90 0d       	add	r25, r0
    1c62:	34 9f       	mul	r19, r20
    1c64:	90 0d       	add	r25, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	b1 01       	movw	r22, r2
    1c6a:	0e 94 74 22 	call	0x44e8	; 0x44e8 <__divmodhi4>
    1c6e:	d8 01       	movw	r26, r16
    1c70:	5a 96       	adiw	r26, 0x1a	; 26
    1c72:	2d 91       	ld	r18, X+
    1c74:	3c 91       	ld	r19, X
    1c76:	5b 97       	sbiw	r26, 0x1b	; 27
    1c78:	28 9d       	mul	r18, r8
    1c7a:	c0 01       	movw	r24, r0
    1c7c:	29 9d       	mul	r18, r9
    1c7e:	90 0d       	add	r25, r0
    1c80:	38 9d       	mul	r19, r8
    1c82:	90 0d       	add	r25, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	68 0f       	add	r22, r24
    1c88:	79 1f       	adc	r23, r25
    1c8a:	60 83       	st	Z, r22
    1c8c:	71 83       	std	Z+1, r23	; 0x01
    1c8e:	0f 90       	pop	r0
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	0f 92       	push	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <leftLimitSwitch>
    1ca0:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <leftLimitSwitch+0x1>
    1ca4:	80 81       	ld	r24, Z
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	0c c0       	rjmp	.+24     	; 0x1cc2 <_ZN22task_system_controller3runEv+0x31e>
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	0f 92       	push	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <rightLimitSwitch>
    1cb8:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <rightLimitSwitch+0x1>
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 23       	and	r24, r24
    1cc0:	91 f0       	breq	.+36     	; 0x1ce6 <_ZN22task_system_controller3runEv+0x342>
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	a6 80       	ldd	r10, Z+6	; 0x06
    1cc6:	b7 80       	ldd	r11, Z+7	; 0x07
    1cc8:	6e e6       	ldi	r22, 0x6E	; 110
    1cca:	70 e2       	ldi	r23, 0x20	; 32
    1ccc:	c5 01       	movw	r24, r10
    1cce:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	c5 01       	movw	r24, r10
    1cd6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1cda:	d8 01       	movw	r26, r16
    1cdc:	1c 96       	adiw	r26, 0x0c	; 12
    1cde:	5c 92       	st	X, r5
    1ce0:	1c 97       	sbiw	r26, 0x0c	; 12
    1ce2:	1d 96       	adiw	r26, 0x0d	; 13
    1ce4:	5c 92       	st	X, r5
    1ce6:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1cea:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	0f 92       	push	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 23       	and	r24, r24
    1cfc:	49 f0       	breq	.+18     	; 0x1d10 <_ZN22task_system_controller3runEv+0x36c>
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	0f 92       	push	r0
    1d04:	10 82       	st	Z, r1
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	14 86       	std	Z+12, r1	; 0x0c
    1d0e:	15 86       	std	Z+13, r1	; 0x0d
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	0f 92       	push	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1d1e:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1d22:	80 81       	ld	r24, Z
    1d24:	88 23       	and	r24, r24
    1d26:	39 f1       	breq	.+78     	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1d28:	d8 01       	movw	r26, r16
    1d2a:	1c 96       	adiw	r26, 0x0c	; 12
    1d2c:	6c 92       	st	X, r6
    1d2e:	1c 97       	sbiw	r26, 0x0c	; 12
    1d30:	1d 96       	adiw	r26, 0x0d	; 13
    1d32:	6c 92       	st	X, r6
    1d34:	20 c0       	rjmp	.+64     	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1d36:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1d3a:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	0f 92       	push	r0
    1d44:	10 82       	st	Z, r1
    1d46:	11 82       	std	Z+1, r1	; 0x01
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1d50:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	0f 92       	push	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 23       	and	r24, r24
    1d62:	49 f0       	breq	.+18     	; 0x1d76 <_ZN22task_system_controller3runEv+0x3d2>
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	0f 92       	push	r0
    1d6a:	10 82       	st	Z, r1
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	f8 01       	movw	r30, r16
    1d72:	14 86       	std	Z+12, r1	; 0x0c
    1d74:	15 86       	std	Z+13, r1	; 0x0d
    1d76:	f8 01       	movw	r30, r16
    1d78:	86 85       	ldd	r24, Z+14	; 0x0e
    1d7a:	97 85       	ldd	r25, Z+15	; 0x0f
    1d7c:	a0 89       	ldd	r26, Z+16	; 0x10
    1d7e:	b1 89       	ldd	r27, Z+17	; 0x11
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	a1 1d       	adc	r26, r1
    1d84:	b1 1d       	adc	r27, r1
    1d86:	86 87       	std	Z+14, r24	; 0x0e
    1d88:	97 87       	std	Z+15, r25	; 0x0f
    1d8a:	a0 8b       	std	Z+16, r26	; 0x10
    1d8c:	b1 8b       	std	Z+17, r27	; 0x11
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	ce 01       	movw	r24, r28
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskDelayUntil>
    1d9e:	2d ce       	rjmp	.-934    	; 0x19fa <_ZN22task_system_controller3runEv+0x56>

00001da0 <_ZN8frt_taskC2EPKchjP8emstream>:
    1da0:	4f 92       	push	r4
    1da2:	5f 92       	push	r5
    1da4:	6f 92       	push	r6
    1da6:	7f 92       	push	r7
    1da8:	8f 92       	push	r8
    1daa:	9f 92       	push	r9
    1dac:	af 92       	push	r10
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	2a 97       	sbiw	r28, 0x0a	; 10
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	4c 01       	movw	r8, r24
    1dcc:	29 01       	movw	r4, r18
    1dce:	38 01       	movw	r6, r16
    1dd0:	8a e0       	ldi	r24, 0x0A	; 10
    1dd2:	90 e2       	ldi	r25, 0x20	; 32
    1dd4:	f4 01       	movw	r30, r8
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	fb 01       	movw	r30, r22
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	69 f0       	breq	.+26     	; 0x1dfc <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1de2:	de 01       	movw	r26, r28
    1de4:	11 96       	adiw	r26, 0x01	; 1
    1de6:	31 96       	adiw	r30, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1dec:	99 30       	cpi	r25, 0x09	; 9
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1df0:	9f 5f       	subi	r25, 0xFF	; 255
    1df2:	8d 93       	st	X+, r24
    1df4:	81 91       	ld	r24, Z+
    1df6:	81 11       	cpse	r24, r1
    1df8:	f9 cf       	rjmp	.-14     	; 0x1dec <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	e1 e0       	ldi	r30, 0x01	; 1
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	ec 0f       	add	r30, r28
    1e04:	fd 1f       	adc	r31, r29
    1e06:	e9 0f       	add	r30, r25
    1e08:	f1 1d       	adc	r31, r1
    1e0a:	10 82       	st	Z, r1
    1e0c:	74 01       	movw	r14, r8
    1e0e:	f2 e0       	ldi	r31, 0x02	; 2
    1e10:	ef 0e       	add	r14, r31
    1e12:	f1 1c       	adc	r15, r1
    1e14:	a1 2c       	mov	r10, r1
    1e16:	b1 2c       	mov	r11, r1
    1e18:	c1 2c       	mov	r12, r1
    1e1a:	d1 2c       	mov	r13, r1
    1e1c:	04 2f       	mov	r16, r20
    1e1e:	94 01       	movw	r18, r8
    1e20:	a2 01       	movw	r20, r4
    1e22:	be 01       	movw	r22, r28
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	87 e0       	ldi	r24, 0x07	; 7
    1e2a:	94 e0       	ldi	r25, 0x04	; 4
    1e2c:	0e 94 21 1a 	call	0x3442	; 0x3442 <xTaskGenericCreate>
    1e30:	f4 01       	movw	r30, r8
    1e32:	66 82       	std	Z+6, r6	; 0x06
    1e34:	77 82       	std	Z+7, r7	; 0x07
    1e36:	40 86       	std	Z+8, r4	; 0x08
    1e38:	51 86       	std	Z+9, r5	; 0x09
    1e3a:	20 91 e0 20 	lds	r18, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    1e3e:	30 91 e1 20 	lds	r19, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    1e42:	24 83       	std	Z+4, r18	; 0x04
    1e44:	35 83       	std	Z+5, r19	; 0x05
    1e46:	80 92 e0 20 	sts	0x20E0, r8	; 0x8020e0 <last_created_task_pointer>
    1e4a:	90 92 e1 20 	sts	0x20E1, r9	; 0x8020e1 <last_created_task_pointer+0x1>
    1e4e:	14 86       	std	Z+12, r1	; 0x0c
    1e50:	15 86       	std	Z+13, r1	; 0x0d
    1e52:	40 90 92 31 	lds	r4, 0x3192	; 0x803192 <portStackTopForTask>
    1e56:	50 90 93 31 	lds	r5, 0x3193	; 0x803193 <portStackTopForTask+0x1>
    1e5a:	ff ef       	ldi	r31, 0xFF	; 255
    1e5c:	4f 1a       	sub	r4, r31
    1e5e:	5f 0a       	sbc	r5, r31
    1e60:	40 92 92 31 	sts	0x3192, r4	; 0x803192 <portStackTopForTask>
    1e64:	50 92 93 31 	sts	0x3193, r5	; 0x803193 <portStackTopForTask+0x1>
    1e68:	f4 01       	movw	r30, r8
    1e6a:	42 86       	std	Z+10, r4	; 0x0a
    1e6c:	53 86       	std	Z+11, r5	; 0x0b
    1e6e:	16 86       	std	Z+14, r1	; 0x0e
    1e70:	17 86       	std	Z+15, r1	; 0x0f
    1e72:	10 8a       	std	Z+16, r1	; 0x10
    1e74:	11 8a       	std	Z+17, r1	; 0x11
    1e76:	61 14       	cp	r6, r1
    1e78:	71 04       	cpc	r7, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1e7c:	44 c0       	rjmp	.+136    	; 0x1f06 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	79 f5       	brne	.+94     	; 0x1ee0 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1e82:	6a e0       	ldi	r22, 0x0A	; 10
    1e84:	c3 01       	movw	r24, r6
    1e86:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1e8a:	7c 01       	movw	r14, r24
    1e8c:	65 e9       	ldi	r22, 0x95	; 149
    1e8e:	76 e0       	ldi	r23, 0x06	; 6
    1e90:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1e94:	be 01       	movw	r22, r28
    1e96:	6f 5f       	subi	r22, 0xFF	; 255
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1ea0:	6a e0       	ldi	r22, 0x0A	; 10
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1ea8:	7c 01       	movw	r14, r24
    1eaa:	6c e8       	ldi	r22, 0x8C	; 140
    1eac:	76 e0       	ldi	r23, 0x06	; 6
    1eae:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1eb2:	6a e0       	ldi	r22, 0x0A	; 10
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1eba:	7c 01       	movw	r14, r24
    1ebc:	6e e7       	ldi	r22, 0x7E	; 126
    1ebe:	76 e0       	ldi	r23, 0x06	; 6
    1ec0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	c7 01       	movw	r24, r14
    1ec8:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1ecc:	b2 01       	movw	r22, r4
    1ece:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN8emstreamlsEj>
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1ed8:	66 e0       	ldi	r22, 0x06	; 6
    1eda:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1ede:	13 c0       	rjmp	.+38     	; 0x1f06 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1ee0:	6a e0       	ldi	r22, 0x0A	; 10
    1ee2:	c3 01       	movw	r24, r6
    1ee4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1ee8:	4c 01       	movw	r8, r24
    1eea:	69 e6       	ldi	r22, 0x69	; 105
    1eec:	76 e0       	ldi	r23, 0x06	; 6
    1eee:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1ef2:	be 01       	movw	r22, r28
    1ef4:	6f 5f       	subi	r22, 0xFF	; 255
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	c4 01       	movw	r24, r8
    1efa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    1efe:	66 e0       	ldi	r22, 0x06	; 6
    1f00:	c4 01       	movw	r24, r8
    1f02:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    1f06:	2a 96       	adiw	r28, 0x0a	; 10
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	08 95       	ret

00001f2e <_ZN5rs23212clear_screenEv>:
    1f2e:	dc 01       	movw	r26, r24
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	02 80       	ldd	r0, Z+2	; 0x02
    1f36:	f3 81       	ldd	r31, Z+3	; 0x03
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	6c e0       	ldi	r22, 0x0C	; 12
    1f3c:	19 95       	eicall
    1f3e:	08 95       	ret

00001f40 <_ZN5rs23214check_for_charEv>:
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	ec 01       	movw	r28, r24
    1f46:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f48:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f4a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f4c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	4d 91       	ld	r20, X+
    1f52:	5c 91       	ld	r21, X
    1f54:	20 81       	ld	r18, Z
    1f56:	31 81       	ldd	r19, Z+1	; 0x01
    1f58:	42 17       	cp	r20, r18
    1f5a:	53 07       	cpc	r21, r19
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <_ZN5rs23214check_for_charEv+0x20>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <_ZN5rs2327getcharEv>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	c1 8d       	ldd	r28, Z+25	; 0x19
    1f6e:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1f70:	28 81       	ld	r18, Y
    1f72:	39 81       	ldd	r19, Y+1	; 0x01
    1f74:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1f76:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1f78:	4d 91       	ld	r20, X+
    1f7a:	5c 91       	ld	r21, X
    1f7c:	24 17       	cp	r18, r20
    1f7e:	35 07       	cpc	r19, r21
    1f80:	e9 f3       	breq	.-6      	; 0x1f7c <_ZN5rs2327getcharEv+0x16>
    1f82:	a7 89       	ldd	r26, Z+23	; 0x17
    1f84:	b0 8d       	ldd	r27, Z+24	; 0x18
    1f86:	0d 90       	ld	r0, X+
    1f88:	bc 91       	ld	r27, X
    1f8a:	a0 2d       	mov	r26, r0
    1f8c:	a2 0f       	add	r26, r18
    1f8e:	b3 1f       	adc	r27, r19
    1f90:	8c 91       	ld	r24, X
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	28 83       	st	Y, r18
    1f98:	39 83       	std	Y+1, r19	; 0x01
    1f9a:	24 36       	cpi	r18, 0x64	; 100
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	28 f0       	brcs	.+10     	; 0x1faa <_ZN5rs2327getcharEv+0x44>
    1fa0:	01 8c       	ldd	r0, Z+25	; 0x19
    1fa2:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	10 82       	st	Z, r1
    1fa8:	11 82       	std	Z+1, r1	; 0x01
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <_ZN5rs2327putcharEc>:
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	50 96       	adiw	r26, 0x10	; 16
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	51 97       	sbiw	r26, 0x11	; 17
    1fbc:	80 81       	ld	r24, Z
    1fbe:	54 96       	adiw	r26, 0x14	; 20
    1fc0:	4c 91       	ld	r20, X
    1fc2:	54 97       	sbiw	r26, 0x14	; 20
    1fc4:	84 23       	and	r24, r20
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <_ZN5rs2327putcharEc+0x20>
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <_ZN5rs2327putcharEc+0x2a>
    1fca:	21 50       	subi	r18, 0x01	; 1
    1fcc:	31 09       	sbc	r19, r1
    1fce:	19 f4       	brne	.+6      	; 0x1fd6 <_ZN5rs2327putcharEc+0x24>
    1fd0:	12 c0       	rjmp	.+36     	; 0x1ff6 <_ZN5rs2327putcharEc+0x44>
    1fd2:	21 e2       	ldi	r18, 0x21	; 33
    1fd4:	3e e4       	ldi	r19, 0x4E	; 78
    1fd6:	90 81       	ld	r25, Z
    1fd8:	94 23       	and	r25, r20
    1fda:	b9 f3       	breq	.-18     	; 0x1fca <_ZN5rs2327putcharEc+0x18>
    1fdc:	90 81       	ld	r25, Z
    1fde:	56 96       	adiw	r26, 0x16	; 22
    1fe0:	8c 91       	ld	r24, X
    1fe2:	56 97       	sbiw	r26, 0x16	; 22
    1fe4:	89 2b       	or	r24, r25
    1fe6:	80 83       	st	Z, r24
    1fe8:	1e 96       	adiw	r26, 0x0e	; 14
    1fea:	ed 91       	ld	r30, X+
    1fec:	fc 91       	ld	r31, X
    1fee:	1f 97       	sbiw	r26, 0x0f	; 15
    1ff0:	60 83       	st	Z, r22
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	08 95       	ret
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	08 95       	ret

00001ffa <_GLOBAL__sub_I_counter>:
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	ca ef       	ldi	r28, 0xFA	; 250
    2000:	d0 e2       	ldi	r29, 0x20	; 32
    2002:	8a e0       	ldi	r24, 0x0A	; 10
    2004:	8a 83       	std	Y+2, r24	; 0x02
    2006:	1b 82       	std	Y+3, r1	; 0x03
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	1c 82       	std	Y+4, r1	; 0x04
    200e:	1e 82       	std	Y+6, r1	; 0x06
    2010:	1f 82       	std	Y+7, r1	; 0x07
    2012:	82 e6       	ldi	r24, 0x62	; 98
    2014:	90 e2       	ldi	r25, 0x20	; 32
    2016:	88 83       	st	Y, r24
    2018:	99 83       	std	Y+1, r25	; 0x01
    201a:	1e 86       	std	Y+14, r1	; 0x0e
    201c:	1f 86       	std	Y+15, r1	; 0x0f
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	80 e2       	ldi	r24, 0x20	; 32
    2024:	0e 94 36 18 	call	0x306c	; 0x306c <xQueueGenericCreate>
    2028:	88 87       	std	Y+8, r24	; 0x08
    202a:	99 87       	std	Y+9, r25	; 0x09
    202c:	8a e0       	ldi	r24, 0x0A	; 10
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	8a 87       	std	Y+10, r24	; 0x0a
    2036:	9b 87       	std	Y+11, r25	; 0x0b
    2038:	ac 87       	std	Y+12, r26	; 0x0c
    203a:	bd 87       	std	Y+13, r27	; 0x0d
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	08 95       	ret

00002042 <main>:
    2042:	8f 92       	push	r8
    2044:	9f 92       	push	r9
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	6e 97       	sbiw	r28, 0x1e	; 30
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	e0 e6       	ldi	r30, 0x60	; 96
    2064:	f6 e0       	ldi	r31, 0x06	; 6
    2066:	80 e1       	ldi	r24, 0x10	; 16
    2068:	81 83       	std	Z+1, r24	; 0x01
    206a:	85 83       	std	Z+5, r24	; 0x05
    206c:	f8 94       	cli
    206e:	e0 e5       	ldi	r30, 0x50	; 80
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	82 60       	ori	r24, 0x02	; 2
    2076:	80 83       	st	Z, r24
    2078:	81 81       	ldd	r24, Z+1	; 0x01
    207a:	81 ff       	sbrs	r24, 1
    207c:	fd cf       	rjmp	.-6      	; 0x2078 <main+0x36>
    207e:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    2082:	9f b7       	in	r25, 0x3f	; 63
    2084:	9e 8f       	std	Y+30, r25	; 0x1e
    2086:	f8 94       	cli
    2088:	1b be       	out	0x3b, r1	; 59
    208a:	88 7f       	andi	r24, 0xF8	; 248
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	20 e4       	ldi	r18, 0x40	; 64
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	f9 01       	movw	r30, r18
    2094:	08 ed       	ldi	r16, 0xD8	; 216
    2096:	04 bf       	out	0x34, r16	; 52
    2098:	80 83       	st	Z, r24
    209a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    209c:	8f bf       	out	0x3f, r24	; 63
    209e:	e0 e5       	ldi	r30, 0x50	; 80
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8e 7f       	andi	r24, 0xFE	; 254
    20a6:	80 83       	st	Z, r24
    20a8:	9d ef       	ldi	r25, 0xFD	; 253
    20aa:	88 ed       	ldi	r24, 0xD8	; 216
    20ac:	08 b6       	in	r0, 0x38	; 56
    20ae:	18 be       	out	0x38, r1	; 56
    20b0:	84 bf       	out	0x34, r24	; 52
    20b2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    20b6:	08 be       	out	0x38, r0	; 56
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    20c0:	80 93 f8 20 	sts	0x20F8, r24	; 0x8020f8 <leftLimitSwitch>
    20c4:	90 93 f9 20 	sts	0x20F9, r25	; 0x8020f9 <leftLimitSwitch+0x1>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    20d0:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <rightLimitSwitch>
    20d4:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <rightLimitSwitch+0x1>
    20d8:	84 e0       	ldi	r24, 0x04	; 4
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    20e0:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <linear_position>
    20e4:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <linear_position+0x1>
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    20f0:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <linear_position>
    20f4:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <linear_position+0x1>
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2108:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <thdMotor>
    210c:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <thdMotor+0x1>
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2118:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <pendulum_encoder>
    211c:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <pendulum_encoder+0x1>
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2128:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <pendulum_encoder_radians>
    212c:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <pendulum_encoder_radians+0x1>
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2138:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <linear_offset>
    213c:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <linear_offset+0x1>
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2148:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <motor_command>
    214c:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <motor_command+0x1>
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2158:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <begin>
    215c:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <begin+0x1>
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2168:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <go>
    216c:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <go+0x1>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2178:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <stop>
    217c:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <stop+0x1>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2188:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <reset>
    218c:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <reset+0x1>
    2190:	82 e5       	ldi	r24, 0x52	; 82
    2192:	90 e2       	ldi	r25, 0x20	; 32
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	8a e0       	ldi	r24, 0x0A	; 10
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	1c 82       	std	Y+4, r1	; 0x04
    219e:	23 e0       	ldi	r18, 0x03	; 3
    21a0:	2e 83       	std	Y+6, r18	; 0x06
    21a2:	1d 82       	std	Y+5, r1	; 0x05
    21a4:	1f 82       	std	Y+7, r1	; 0x07
    21a6:	18 86       	std	Y+8, r1	; 0x08
    21a8:	a0 e4       	ldi	r26, 0x40	; 64
    21aa:	b6 e0       	ldi	r27, 0x06	; 6
    21ac:	ab 87       	std	Y+11, r26	; 0x0b
    21ae:	bc 87       	std	Y+12, r27	; 0x0c
    21b0:	86 e0       	ldi	r24, 0x06	; 6
    21b2:	8d 87       	std	Y+13, r24	; 0x0d
    21b4:	0f 2e       	mov	r0, r31
    21b6:	f7 e0       	ldi	r31, 0x07	; 7
    21b8:	bf 2e       	mov	r11, r31
    21ba:	f0 2d       	mov	r31, r0
    21bc:	be 86       	std	Y+14, r11	; 0x0e
    21be:	e0 eb       	ldi	r30, 0xB0	; 176
    21c0:	f8 e0       	ldi	r31, 0x08	; 8
    21c2:	ef 87       	std	Y+15, r30	; 0x0f
    21c4:	f8 8b       	std	Y+16, r31	; 0x10
    21c6:	81 eb       	ldi	r24, 0xB1	; 177
    21c8:	98 e0       	ldi	r25, 0x08	; 8
    21ca:	89 8b       	std	Y+17, r24	; 0x11
    21cc:	9a 8b       	std	Y+18, r25	; 0x12
    21ce:	84 eb       	ldi	r24, 0xB4	; 180
    21d0:	98 e0       	ldi	r25, 0x08	; 8
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21d8:	14 96       	adiw	r26, 0x04	; 4
    21da:	3c 91       	ld	r19, X
    21dc:	14 97       	sbiw	r26, 0x04	; 4
    21de:	ee 24       	eor	r14, r14
    21e0:	e3 94       	inc	r14
    21e2:	f1 2c       	mov	r15, r1
    21e4:	a7 01       	movw	r20, r14
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <main+0x1aa>
    21e8:	44 0f       	add	r20, r20
    21ea:	55 1f       	adc	r21, r21
    21ec:	8a 95       	dec	r24
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <main+0x1a6>
    21f0:	ca 01       	movw	r24, r20
    21f2:	83 2b       	or	r24, r19
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	8c 93       	st	X, r24
    21f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    21fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    21fe:	3c 91       	ld	r19, X
    2200:	a7 01       	movw	r20, r14
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <main+0x1c6>
    2204:	44 0f       	add	r20, r20
    2206:	55 1f       	adc	r21, r21
    2208:	8a 95       	dec	r24
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <main+0x1c2>
    220c:	ca 01       	movw	r24, r20
    220e:	83 2b       	or	r24, r19
    2210:	8c 93       	st	X, r24
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	ab 85       	ldd	r26, Y+11	; 0x0b
    2216:	bc 85       	ldd	r27, Y+12	; 0x0c
    2218:	3c 91       	ld	r19, X
    221a:	a7 01       	movw	r20, r14
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <main+0x1e0>
    221e:	44 0f       	add	r20, r20
    2220:	55 1f       	adc	r21, r21
    2222:	8a 95       	dec	r24
    2224:	e2 f7       	brpl	.-8      	; 0x221e <main+0x1dc>
    2226:	ca 01       	movw	r24, r20
    2228:	80 95       	com	r24
    222a:	90 95       	com	r25
    222c:	83 23       	and	r24, r19
    222e:	8c 93       	st	X, r24
    2230:	80 e1       	ldi	r24, 0x10	; 16
    2232:	83 83       	std	Z+3, r24	; 0x03
    2234:	25 83       	std	Z+5, r18	; 0x05
    2236:	80 ef       	ldi	r24, 0xF0	; 240
    2238:	87 83       	std	Z+7, r24	; 0x07
    223a:	81 e2       	ldi	r24, 0x21	; 33
    223c:	86 83       	std	Z+6, r24	; 0x06
    223e:	88 e1       	ldi	r24, 0x18	; 24
    2240:	84 83       	std	Z+4, r24	; 0x04
    2242:	80 e8       	ldi	r24, 0x80	; 128
    2244:	8e 8b       	std	Y+22, r24	; 0x16
    2246:	80 e4       	ldi	r24, 0x40	; 64
    2248:	8f 8b       	std	Y+23, r24	; 0x17
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	8d 8b       	std	Y+21, r24	; 0x15
    224e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2250:	f8 89       	ldd	r31, Y+16	; 0x10
    2252:	80 81       	ld	r24, Z
    2254:	80 81       	ld	r24, Z
    2256:	82 e1       	ldi	r24, 0x12	; 18
    2258:	90 e2       	ldi	r25, 0x20	; 32
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	80 e2       	ldi	r24, 0x20	; 32
    2260:	91 e2       	ldi	r25, 0x21	; 33
    2262:	88 8f       	std	Y+24, r24	; 0x18
    2264:	99 8f       	std	Y+25, r25	; 0x19
    2266:	8e e1       	ldi	r24, 0x1E	; 30
    2268:	91 e2       	ldi	r25, 0x21	; 33
    226a:	8a 8f       	std	Y+26, r24	; 0x1a
    226c:	9b 8f       	std	Y+27, r25	; 0x1b
    226e:	8c e1       	ldi	r24, 0x1C	; 28
    2270:	91 e2       	ldi	r25, 0x21	; 33
    2272:	8c 8f       	std	Y+28, r24	; 0x1c
    2274:	9d 8f       	std	Y+29, r25	; 0x1d
    2276:	84 e6       	ldi	r24, 0x64	; 100
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    227e:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <rcvC1_buffer>
    2282:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <rcvC1_buffer+0x1>
    2286:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2288:	fb 8d       	ldd	r31, Y+27	; 0x1b
    228a:	10 82       	st	Z, r1
    228c:	11 82       	std	Z+1, r1	; 0x01
    228e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2290:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2292:	10 82       	st	Z, r1
    2294:	11 82       	std	Z+1, r1	; 0x01
    2296:	67 e0       	ldi	r22, 0x07	; 7
    2298:	ce 01       	movw	r24, r28
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    22a0:	6c 01       	movw	r12, r24
    22a2:	65 e8       	ldi	r22, 0x85	; 133
    22a4:	70 e2       	ldi	r23, 0x20	; 32
    22a6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    22aa:	66 e0       	ldi	r22, 0x06	; 6
    22ac:	c6 01       	movw	r24, r12
    22ae:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    22b2:	66 e0       	ldi	r22, 0x06	; 6
    22b4:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN8emstreamlsE15ser_manipulator>
    22b8:	82 e1       	ldi	r24, 0x12	; 18
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    22c0:	6c 01       	movw	r12, r24
    22c2:	8e 01       	movw	r16, r28
    22c4:	0f 5f       	subi	r16, 0xFF	; 255
    22c6:	1f 4f       	sbci	r17, 0xFF	; 255
    22c8:	24 e0       	ldi	r18, 0x04	; 4
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	64 ea       	ldi	r22, 0xA4	; 164
    22d0:	70 e2       	ldi	r23, 0x20	; 32
    22d2:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    22d6:	82 e2       	ldi	r24, 0x22	; 34
    22d8:	90 e2       	ldi	r25, 0x20	; 32
    22da:	f6 01       	movw	r30, r12
    22dc:	80 83       	st	Z, r24
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	83 e1       	ldi	r24, 0x13	; 19
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    22e8:	6c 01       	movw	r12, r24
    22ea:	24 e0       	ldi	r18, 0x04	; 4
    22ec:	31 e0       	ldi	r19, 0x01	; 1
    22ee:	44 e0       	ldi	r20, 0x04	; 4
    22f0:	6c ea       	ldi	r22, 0xAC	; 172
    22f2:	70 e2       	ldi	r23, 0x20	; 32
    22f4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    22f8:	0f 2e       	mov	r0, r31
    22fa:	fa e2       	ldi	r31, 0x2A	; 42
    22fc:	8f 2e       	mov	r8, r31
    22fe:	f0 e2       	ldi	r31, 0x20	; 32
    2300:	9f 2e       	mov	r9, r31
    2302:	f0 2d       	mov	r31, r0
    2304:	f6 01       	movw	r30, r12
    2306:	80 82       	st	Z, r8
    2308:	91 82       	std	Z+1, r9	; 0x01
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	82 8b       	std	Z+18, r24	; 0x12
    230e:	83 e1       	ldi	r24, 0x13	; 19
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2316:	6c 01       	movw	r12, r24
    2318:	24 e0       	ldi	r18, 0x04	; 4
    231a:	31 e0       	ldi	r19, 0x01	; 1
    231c:	44 e0       	ldi	r20, 0x04	; 4
    231e:	63 eb       	ldi	r22, 0xB3	; 179
    2320:	70 e2       	ldi	r23, 0x20	; 32
    2322:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    2326:	f6 01       	movw	r30, r12
    2328:	80 82       	st	Z, r8
    232a:	91 82       	std	Z+1, r9	; 0x01
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	82 8b       	std	Z+18, r24	; 0x12
    2330:	82 e1       	ldi	r24, 0x12	; 18
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    2338:	6c 01       	movw	r12, r24
    233a:	24 e0       	ldi	r18, 0x04	; 4
    233c:	31 e0       	ldi	r19, 0x01	; 1
    233e:	44 e0       	ldi	r20, 0x04	; 4
    2340:	6b eb       	ldi	r22, 0xBB	; 187
    2342:	70 e2       	ldi	r23, 0x20	; 32
    2344:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    2348:	82 e3       	ldi	r24, 0x32	; 50
    234a:	90 e2       	ldi	r25, 0x20	; 32
    234c:	f6 01       	movw	r30, r12
    234e:	80 83       	st	Z, r24
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	82 e1       	ldi	r24, 0x12	; 18
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    235a:	6c 01       	movw	r12, r24
    235c:	24 e0       	ldi	r18, 0x04	; 4
    235e:	31 e0       	ldi	r19, 0x01	; 1
    2360:	43 e0       	ldi	r20, 0x03	; 3
    2362:	62 ec       	ldi	r22, 0xC2	; 194
    2364:	70 e2       	ldi	r23, 0x20	; 32
    2366:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    236a:	8a e3       	ldi	r24, 0x3A	; 58
    236c:	90 e2       	ldi	r25, 0x20	; 32
    236e:	f6 01       	movw	r30, r12
    2370:	80 83       	st	Z, r24
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	8e e1       	ldi	r24, 0x1E	; 30
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    237c:	6c 01       	movw	r12, r24
    237e:	24 e0       	ldi	r18, 0x04	; 4
    2380:	31 e0       	ldi	r19, 0x01	; 1
    2382:	42 e0       	ldi	r20, 0x02	; 2
    2384:	69 ec       	ldi	r22, 0xC9	; 201
    2386:	70 e2       	ldi	r23, 0x20	; 32
    2388:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    238c:	82 e4       	ldi	r24, 0x42	; 66
    238e:	90 e2       	ldi	r25, 0x20	; 32
    2390:	f6 01       	movw	r30, r12
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	82 8f       	std	Z+26, r24	; 0x1a
    239c:	93 8f       	std	Z+27, r25	; 0x1b
    239e:	e4 8e       	std	Z+28, r14	; 0x1c
    23a0:	f5 8e       	std	Z+29, r15	; 0x1d
    23a2:	84 e1       	ldi	r24, 0x14	; 20
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    23aa:	7c 01       	movw	r14, r24
    23ac:	24 e0       	ldi	r18, 0x04	; 4
    23ae:	31 e0       	ldi	r19, 0x01	; 1
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	61 ed       	ldi	r22, 0xD1	; 209
    23b4:	70 e2       	ldi	r23, 0x20	; 32
    23b6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN8frt_taskC2EPKchjP8emstream>
    23ba:	8a e4       	ldi	r24, 0x4A	; 74
    23bc:	90 e2       	ldi	r25, 0x20	; 32
    23be:	f7 01       	movw	r30, r14
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	12 8a       	std	Z+18, r1	; 0x12
    23c6:	13 8a       	std	Z+19, r1	; 0x13
    23c8:	b0 92 a2 00 	sts	0x00A2, r11	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23cc:	78 94       	sei
    23ce:	0e 94 31 1b 	call	0x3662	; 0x3662 <vTaskStartScheduler>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	6e 96       	adiw	r28, 0x1e	; 30
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	08 95       	ret

000023f4 <__vector_58>:
    23f4:	1f 92       	push	r1
    23f6:	0f 92       	push	r0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	0f 92       	push	r0
    23fc:	11 24       	eor	r1, r1
    23fe:	08 b6       	in	r0, 0x38	; 56
    2400:	0f 92       	push	r0
    2402:	18 be       	out	0x38, r1	; 56
    2404:	0b b6       	in	r0, 0x3b	; 59
    2406:	0f 92       	push	r0
    2408:	1b be       	out	0x3b, r1	; 59
    240a:	2f 93       	push	r18
    240c:	3f 93       	push	r19
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
    2416:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    241a:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <rcvE0_buffer>
    241e:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <rcvE0_buffer+0x1>
    2422:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvE0_write_index>
    2426:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvE0_write_index+0x1>
    242a:	e8 0f       	add	r30, r24
    242c:	f9 1f       	adc	r31, r25
    242e:	20 83       	st	Z, r18
    2430:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvE0_write_index>
    2434:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvE0_write_index+0x1>
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	84 36       	cpi	r24, 0x64	; 100
    243c:	91 05       	cpc	r25, r1
    243e:	60 f4       	brcc	.+24     	; 0x2458 <__vector_58+0x64>
    2440:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvE0_write_index>
    2444:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvE0_write_index+0x1>
    2448:	20 91 0c 21 	lds	r18, 0x210C	; 0x80210c <rcvE0_read_index>
    244c:	30 91 0d 21 	lds	r19, 0x210D	; 0x80210d <rcvE0_read_index+0x1>
    2450:	82 17       	cp	r24, r18
    2452:	93 07       	cpc	r25, r19
    2454:	f1 f4       	brne	.+60     	; 0x2492 <__vector_58+0x9e>
    2456:	0c c0       	rjmp	.+24     	; 0x2470 <__vector_58+0x7c>
    2458:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvE0_write_index>
    245c:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvE0_write_index+0x1>
    2460:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <rcvE0_read_index>
    2464:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <rcvE0_read_index+0x1>
    2468:	18 16       	cp	r1, r24
    246a:	19 06       	cpc	r1, r25
    246c:	91 f4       	brne	.+36     	; 0x2492 <__vector_58+0x9e>
    246e:	0e c0       	rjmp	.+28     	; 0x248c <__vector_58+0x98>
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	84 36       	cpi	r24, 0x64	; 100
    2474:	91 05       	cpc	r25, r1
    2476:	28 f4       	brcc	.+10     	; 0x2482 <__vector_58+0x8e>
    2478:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <rcvE0_read_index>
    247c:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <rcvE0_read_index+0x1>
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <__vector_58+0x9e>
    2482:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <rcvE0_read_index>
    2486:	10 92 0d 21 	sts	0x210D, r1	; 0x80210d <rcvE0_read_index+0x1>
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <__vector_58+0x9e>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	f3 cf       	rjmp	.-26     	; 0x2478 <__vector_58+0x84>
    2492:	ff 91       	pop	r31
    2494:	ef 91       	pop	r30
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	3f 91       	pop	r19
    249c:	2f 91       	pop	r18
    249e:	0f 90       	pop	r0
    24a0:	0b be       	out	0x3b, r0	; 59
    24a2:	0f 90       	pop	r0
    24a4:	08 be       	out	0x38, r0	; 56
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
    24ac:	1f 90       	pop	r1
    24ae:	18 95       	reti

000024b0 <__vector_91>:
    24b0:	1f 92       	push	r1
    24b2:	0f 92       	push	r0
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	0f 92       	push	r0
    24b8:	11 24       	eor	r1, r1
    24ba:	08 b6       	in	r0, 0x38	; 56
    24bc:	0f 92       	push	r0
    24be:	18 be       	out	0x38, r1	; 56
    24c0:	0b b6       	in	r0, 0x3b	; 59
    24c2:	0f 92       	push	r0
    24c4:	1b be       	out	0x3b, r1	; 59
    24c6:	2f 93       	push	r18
    24c8:	3f 93       	push	r19
    24ca:	8f 93       	push	r24
    24cc:	9f 93       	push	r25
    24ce:	ef 93       	push	r30
    24d0:	ff 93       	push	r31
    24d2:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    24d6:	e0 91 14 21 	lds	r30, 0x2114	; 0x802114 <rcvD1_buffer>
    24da:	f0 91 15 21 	lds	r31, 0x2115	; 0x802115 <rcvD1_buffer+0x1>
    24de:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD1_write_index>
    24e2:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD1_write_index+0x1>
    24e6:	e8 0f       	add	r30, r24
    24e8:	f9 1f       	adc	r31, r25
    24ea:	20 83       	st	Z, r18
    24ec:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD1_write_index>
    24f0:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD1_write_index+0x1>
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	84 36       	cpi	r24, 0x64	; 100
    24f8:	91 05       	cpc	r25, r1
    24fa:	60 f4       	brcc	.+24     	; 0x2514 <__vector_91+0x64>
    24fc:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvD1_write_index>
    2500:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvD1_write_index+0x1>
    2504:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <rcvD1_read_index>
    2508:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <rcvD1_read_index+0x1>
    250c:	82 17       	cp	r24, r18
    250e:	93 07       	cpc	r25, r19
    2510:	f1 f4       	brne	.+60     	; 0x254e <__vector_91+0x9e>
    2512:	0c c0       	rjmp	.+24     	; 0x252c <__vector_91+0x7c>
    2514:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvD1_write_index>
    2518:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvD1_write_index+0x1>
    251c:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <rcvD1_read_index>
    2520:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <rcvD1_read_index+0x1>
    2524:	18 16       	cp	r1, r24
    2526:	19 06       	cpc	r1, r25
    2528:	91 f4       	brne	.+36     	; 0x254e <__vector_91+0x9e>
    252a:	0e c0       	rjmp	.+28     	; 0x2548 <__vector_91+0x98>
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	84 36       	cpi	r24, 0x64	; 100
    2530:	91 05       	cpc	r25, r1
    2532:	28 f4       	brcc	.+10     	; 0x253e <__vector_91+0x8e>
    2534:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <rcvD1_read_index>
    2538:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <rcvD1_read_index+0x1>
    253c:	08 c0       	rjmp	.+16     	; 0x254e <__vector_91+0x9e>
    253e:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <rcvD1_read_index>
    2542:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <rcvD1_read_index+0x1>
    2546:	03 c0       	rjmp	.+6      	; 0x254e <__vector_91+0x9e>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	f3 cf       	rjmp	.-26     	; 0x2534 <__vector_91+0x84>
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	3f 91       	pop	r19
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0b be       	out	0x3b, r0	; 59
    255e:	0f 90       	pop	r0
    2560:	08 be       	out	0x38, r0	; 56
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_88>:
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	08 b6       	in	r0, 0x38	; 56
    2578:	0f 92       	push	r0
    257a:	18 be       	out	0x38, r1	; 56
    257c:	0b b6       	in	r0, 0x3b	; 59
    257e:	0f 92       	push	r0
    2580:	1b be       	out	0x3b, r1	; 59
    2582:	2f 93       	push	r18
    2584:	3f 93       	push	r19
    2586:	8f 93       	push	r24
    2588:	9f 93       	push	r25
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    2592:	e0 91 1a 21 	lds	r30, 0x211A	; 0x80211a <rcvD0_buffer>
    2596:	f0 91 1b 21 	lds	r31, 0x211B	; 0x80211b <rcvD0_buffer+0x1>
    259a:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC0_write_index>
    259e:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC0_write_index+0x1>
    25a2:	e8 0f       	add	r30, r24
    25a4:	f9 1f       	adc	r31, r25
    25a6:	20 83       	st	Z, r18
    25a8:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvD0_write_index>
    25ac:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvD0_write_index+0x1>
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	84 36       	cpi	r24, 0x64	; 100
    25b4:	91 05       	cpc	r25, r1
    25b6:	60 f4       	brcc	.+24     	; 0x25d0 <__vector_88+0x64>
    25b8:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvD0_write_index>
    25bc:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvD0_write_index+0x1>
    25c0:	20 91 18 21 	lds	r18, 0x2118	; 0x802118 <rcvD0_read_index>
    25c4:	30 91 19 21 	lds	r19, 0x2119	; 0x802119 <rcvD0_read_index+0x1>
    25c8:	82 17       	cp	r24, r18
    25ca:	93 07       	cpc	r25, r19
    25cc:	f1 f4       	brne	.+60     	; 0x260a <__vector_88+0x9e>
    25ce:	0c c0       	rjmp	.+24     	; 0x25e8 <__vector_88+0x7c>
    25d0:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvD0_write_index>
    25d4:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvD0_write_index+0x1>
    25d8:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <rcvD0_read_index>
    25dc:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <rcvD0_read_index+0x1>
    25e0:	18 16       	cp	r1, r24
    25e2:	19 06       	cpc	r1, r25
    25e4:	91 f4       	brne	.+36     	; 0x260a <__vector_88+0x9e>
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <__vector_88+0x98>
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	84 36       	cpi	r24, 0x64	; 100
    25ec:	91 05       	cpc	r25, r1
    25ee:	28 f4       	brcc	.+10     	; 0x25fa <__vector_88+0x8e>
    25f0:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <rcvD0_read_index>
    25f4:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <rcvD0_read_index+0x1>
    25f8:	08 c0       	rjmp	.+16     	; 0x260a <__vector_88+0x9e>
    25fa:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <rcvD0_read_index>
    25fe:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <rcvD0_read_index+0x1>
    2602:	03 c0       	rjmp	.+6      	; 0x260a <__vector_88+0x9e>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	f3 cf       	rjmp	.-26     	; 0x25f0 <__vector_88+0x84>
    260a:	ff 91       	pop	r31
    260c:	ef 91       	pop	r30
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	3f 91       	pop	r19
    2614:	2f 91       	pop	r18
    2616:	0f 90       	pop	r0
    2618:	0b be       	out	0x3b, r0	; 59
    261a:	0f 90       	pop	r0
    261c:	08 be       	out	0x38, r0	; 56
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <__vector_28>:
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	08 b6       	in	r0, 0x38	; 56
    2634:	0f 92       	push	r0
    2636:	18 be       	out	0x38, r1	; 56
    2638:	0b b6       	in	r0, 0x3b	; 59
    263a:	0f 92       	push	r0
    263c:	1b be       	out	0x3b, r1	; 59
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	8f 93       	push	r24
    2644:	9f 93       	push	r25
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
    264a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    264e:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <rcvC1_buffer>
    2652:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <rcvC1_buffer+0x1>
    2656:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC1_write_index>
    265a:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC1_write_index+0x1>
    265e:	e8 0f       	add	r30, r24
    2660:	f9 1f       	adc	r31, r25
    2662:	20 83       	st	Z, r18
    2664:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC1_write_index>
    2668:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC1_write_index+0x1>
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	84 36       	cpi	r24, 0x64	; 100
    2670:	91 05       	cpc	r25, r1
    2672:	60 f4       	brcc	.+24     	; 0x268c <__vector_28+0x64>
    2674:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC1_write_index>
    2678:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC1_write_index+0x1>
    267c:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <rcvC1_read_index>
    2680:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <rcvC1_read_index+0x1>
    2684:	82 17       	cp	r24, r18
    2686:	93 07       	cpc	r25, r19
    2688:	f1 f4       	brne	.+60     	; 0x26c6 <__vector_28+0x9e>
    268a:	0c c0       	rjmp	.+24     	; 0x26a4 <__vector_28+0x7c>
    268c:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvC1_write_index>
    2690:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvC1_write_index+0x1>
    2694:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <rcvC1_read_index>
    2698:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <rcvC1_read_index+0x1>
    269c:	18 16       	cp	r1, r24
    269e:	19 06       	cpc	r1, r25
    26a0:	91 f4       	brne	.+36     	; 0x26c6 <__vector_28+0x9e>
    26a2:	0e c0       	rjmp	.+28     	; 0x26c0 <__vector_28+0x98>
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	84 36       	cpi	r24, 0x64	; 100
    26a8:	91 05       	cpc	r25, r1
    26aa:	28 f4       	brcc	.+10     	; 0x26b6 <__vector_28+0x8e>
    26ac:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <rcvC1_read_index>
    26b0:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <rcvC1_read_index+0x1>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <__vector_28+0x9e>
    26b6:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <rcvC1_read_index>
    26ba:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <rcvC1_read_index+0x1>
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <__vector_28+0x9e>
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	f3 cf       	rjmp	.-26     	; 0x26ac <__vector_28+0x84>
    26c6:	ff 91       	pop	r31
    26c8:	ef 91       	pop	r30
    26ca:	9f 91       	pop	r25
    26cc:	8f 91       	pop	r24
    26ce:	3f 91       	pop	r19
    26d0:	2f 91       	pop	r18
    26d2:	0f 90       	pop	r0
    26d4:	0b be       	out	0x3b, r0	; 59
    26d6:	0f 90       	pop	r0
    26d8:	08 be       	out	0x38, r0	; 56
    26da:	0f 90       	pop	r0
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	0f 90       	pop	r0
    26e0:	1f 90       	pop	r1
    26e2:	18 95       	reti

000026e4 <__vector_25>:
    26e4:	1f 92       	push	r1
    26e6:	0f 92       	push	r0
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	08 b6       	in	r0, 0x38	; 56
    26f0:	0f 92       	push	r0
    26f2:	18 be       	out	0x38, r1	; 56
    26f4:	0b b6       	in	r0, 0x3b	; 59
    26f6:	0f 92       	push	r0
    26f8:	1b be       	out	0x3b, r1	; 59
    26fa:	2f 93       	push	r18
    26fc:	3f 93       	push	r19
    26fe:	8f 93       	push	r24
    2700:	9f 93       	push	r25
    2702:	ef 93       	push	r30
    2704:	ff 93       	push	r31
    2706:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    270a:	e0 91 26 21 	lds	r30, 0x2126	; 0x802126 <rcvC0_buffer>
    270e:	f0 91 27 21 	lds	r31, 0x2127	; 0x802127 <rcvC0_buffer+0x1>
    2712:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC0_write_index>
    2716:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC0_write_index+0x1>
    271a:	e8 0f       	add	r30, r24
    271c:	f9 1f       	adc	r31, r25
    271e:	20 83       	st	Z, r18
    2720:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC0_write_index>
    2724:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC0_write_index+0x1>
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	84 36       	cpi	r24, 0x64	; 100
    272c:	91 05       	cpc	r25, r1
    272e:	60 f4       	brcc	.+24     	; 0x2748 <__vector_25+0x64>
    2730:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <rcvC0_write_index>
    2734:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <rcvC0_write_index+0x1>
    2738:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <rcvC0_read_index>
    273c:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <rcvC0_read_index+0x1>
    2740:	82 17       	cp	r24, r18
    2742:	93 07       	cpc	r25, r19
    2744:	f1 f4       	brne	.+60     	; 0x2782 <__vector_25+0x9e>
    2746:	0c c0       	rjmp	.+24     	; 0x2760 <__vector_25+0x7c>
    2748:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <rcvC0_write_index>
    274c:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <rcvC0_write_index+0x1>
    2750:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <rcvC0_read_index>
    2754:	90 91 25 21 	lds	r25, 0x2125	; 0x802125 <rcvC0_read_index+0x1>
    2758:	18 16       	cp	r1, r24
    275a:	19 06       	cpc	r1, r25
    275c:	91 f4       	brne	.+36     	; 0x2782 <__vector_25+0x9e>
    275e:	0e c0       	rjmp	.+28     	; 0x277c <__vector_25+0x98>
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	84 36       	cpi	r24, 0x64	; 100
    2764:	91 05       	cpc	r25, r1
    2766:	28 f4       	brcc	.+10     	; 0x2772 <__vector_25+0x8e>
    2768:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <rcvC0_read_index>
    276c:	90 93 25 21 	sts	0x2125, r25	; 0x802125 <rcvC0_read_index+0x1>
    2770:	08 c0       	rjmp	.+16     	; 0x2782 <__vector_25+0x9e>
    2772:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <rcvC0_read_index>
    2776:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <rcvC0_read_index+0x1>
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <__vector_25+0x9e>
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	f3 cf       	rjmp	.-26     	; 0x2768 <__vector_25+0x84>
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	3f 91       	pop	r19
    278c:	2f 91       	pop	r18
    278e:	0f 90       	pop	r0
    2790:	0b be       	out	0x3b, r0	; 59
    2792:	0f 90       	pop	r0
    2794:	08 be       	out	0x38, r0	; 56
    2796:	0f 90       	pop	r0
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	0f 90       	pop	r0
    279c:	1f 90       	pop	r1
    279e:	18 95       	reti

000027a0 <_ZN8emstreamlsEh>:
    27a0:	cf 92       	push	r12
    27a2:	df 92       	push	r13
    27a4:	ef 92       	push	r14
    27a6:	ff 92       	push	r15
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	29 97       	sbiw	r28, 0x09	; 9
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	8c 01       	movw	r16, r24
    27bc:	e6 2e       	mov	r14, r22
    27be:	dc 01       	movw	r26, r24
    27c0:	13 96       	adiw	r26, 0x03	; 3
    27c2:	8c 91       	ld	r24, X
    27c4:	13 97       	sbiw	r26, 0x03	; 3
    27c6:	88 23       	and	r24, r24
    27c8:	41 f0       	breq	.+16     	; 0x27da <_ZN8emstreamlsEh+0x3a>
    27ca:	ed 91       	ld	r30, X+
    27cc:	fc 91       	ld	r31, X
    27ce:	02 80       	ldd	r0, Z+2	; 0x02
    27d0:	f3 81       	ldd	r31, Z+3	; 0x03
    27d2:	e0 2d       	mov	r30, r0
    27d4:	c8 01       	movw	r24, r16
    27d6:	19 95       	eicall
    27d8:	56 c0       	rjmp	.+172    	; 0x2886 <_ZN8emstreamlsEh+0xe6>
    27da:	f8 01       	movw	r30, r16
    27dc:	42 81       	ldd	r20, Z+2	; 0x02
    27de:	42 30       	cpi	r20, 0x02	; 2
    27e0:	19 f5       	brne	.+70     	; 0x2828 <_ZN8emstreamlsEh+0x88>
    27e2:	68 94       	set
    27e4:	cc 24       	eor	r12, r12
    27e6:	c3 f8       	bld	r12, 3
    27e8:	d1 2c       	mov	r13, r1
    27ea:	68 94       	set
    27ec:	ff 24       	eor	r15, r15
    27ee:	f7 f8       	bld	r15, 7
    27f0:	8e 2d       	mov	r24, r14
    27f2:	8f 21       	and	r24, r15
    27f4:	51 f0       	breq	.+20     	; 0x280a <_ZN8emstreamlsEh+0x6a>
    27f6:	d8 01       	movw	r26, r16
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	02 80       	ldd	r0, Z+2	; 0x02
    27fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2800:	e0 2d       	mov	r30, r0
    2802:	61 e3       	ldi	r22, 0x31	; 49
    2804:	c8 01       	movw	r24, r16
    2806:	19 95       	eicall
    2808:	09 c0       	rjmp	.+18     	; 0x281c <_ZN8emstreamlsEh+0x7c>
    280a:	d8 01       	movw	r26, r16
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	02 80       	ldd	r0, Z+2	; 0x02
    2812:	f3 81       	ldd	r31, Z+3	; 0x03
    2814:	e0 2d       	mov	r30, r0
    2816:	60 e3       	ldi	r22, 0x30	; 48
    2818:	c8 01       	movw	r24, r16
    281a:	19 95       	eicall
    281c:	f6 94       	lsr	r15
    281e:	b1 e0       	ldi	r27, 0x01	; 1
    2820:	cb 1a       	sub	r12, r27
    2822:	d1 08       	sbc	r13, r1
    2824:	29 f7       	brne	.-54     	; 0x27f0 <_ZN8emstreamlsEh+0x50>
    2826:	2f c0       	rjmp	.+94     	; 0x2886 <_ZN8emstreamlsEh+0xe6>
    2828:	40 31       	cpi	r20, 0x10	; 16
    282a:	f9 f4       	brne	.+62     	; 0x286a <_ZN8emstreamlsEh+0xca>
    282c:	62 95       	swap	r22
    282e:	6f 70       	andi	r22, 0x0F	; 15
    2830:	01 90       	ld	r0, Z+
    2832:	f0 81       	ld	r31, Z
    2834:	e0 2d       	mov	r30, r0
    2836:	02 80       	ldd	r0, Z+2	; 0x02
    2838:	f3 81       	ldd	r31, Z+3	; 0x03
    283a:	e0 2d       	mov	r30, r0
    283c:	6a 30       	cpi	r22, 0x0A	; 10
    283e:	10 f0       	brcs	.+4      	; 0x2844 <_ZN8emstreamlsEh+0xa4>
    2840:	69 5c       	subi	r22, 0xC9	; 201
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <_ZN8emstreamlsEh+0xa6>
    2844:	60 5d       	subi	r22, 0xD0	; 208
    2846:	c8 01       	movw	r24, r16
    2848:	19 95       	eicall
    284a:	6e 2d       	mov	r22, r14
    284c:	6f 70       	andi	r22, 0x0F	; 15
    284e:	d8 01       	movw	r26, r16
    2850:	ed 91       	ld	r30, X+
    2852:	fc 91       	ld	r31, X
    2854:	02 80       	ldd	r0, Z+2	; 0x02
    2856:	f3 81       	ldd	r31, Z+3	; 0x03
    2858:	e0 2d       	mov	r30, r0
    285a:	6a 30       	cpi	r22, 0x0A	; 10
    285c:	10 f0       	brcs	.+4      	; 0x2862 <_ZN8emstreamlsEh+0xc2>
    285e:	69 5c       	subi	r22, 0xC9	; 201
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <_ZN8emstreamlsEh+0xc4>
    2862:	60 5d       	subi	r22, 0xD0	; 208
    2864:	c8 01       	movw	r24, r16
    2866:	19 95       	eicall
    2868:	0e c0       	rjmp	.+28     	; 0x2886 <_ZN8emstreamlsEh+0xe6>
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	be 01       	movw	r22, r28
    286e:	6f 5f       	subi	r22, 0xFF	; 255
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	8e 2d       	mov	r24, r14
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 1f 20 	call	0x403e	; 0x403e <utoa>
    287a:	be 01       	movw	r22, r28
    287c:	6f 5f       	subi	r22, 0xFF	; 255
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	c8 01       	movw	r24, r16
    2882:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN8emstream4putsEPKc>
    2886:	c8 01       	movw	r24, r16
    2888:	29 96       	adiw	r28, 0x09	; 9
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	ff 90       	pop	r15
    2898:	ef 90       	pop	r14
    289a:	df 90       	pop	r13
    289c:	cf 90       	pop	r12
    289e:	08 95       	ret

000028a0 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    28aa:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    28ae:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <xHeapHasBeenInitialised.4150>
    28b2:	81 11       	cpse	r24, r1
    28b4:	1d c0       	rjmp	.+58     	; 0x28f0 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    28b6:	ad e2       	ldi	r26, 0x2D	; 45
    28b8:	b1 e2       	ldi	r27, 0x21	; 33
    28ba:	e1 e3       	ldi	r30, 0x31	; 49
    28bc:	f1 e2       	ldi	r31, 0x21	; 33
    28be:	ed 93       	st	X+, r30
    28c0:	fc 93       	st	X, r31
    28c2:	11 97       	sbiw	r26, 0x01	; 1
    28c4:	12 96       	adiw	r26, 0x02	; 2
    28c6:	1d 92       	st	X+, r1
    28c8:	1c 92       	st	X, r1
    28ca:	13 97       	sbiw	r26, 0x03	; 3
    28cc:	a9 e2       	ldi	r26, 0x29	; 41
    28ce:	b1 e2       	ldi	r27, 0x21	; 33
    28d0:	8f ef       	ldi	r24, 0xFF	; 255
    28d2:	9f e0       	ldi	r25, 0x0F	; 15
    28d4:	12 96       	adiw	r26, 0x02	; 2
    28d6:	8d 93       	st	X+, r24
    28d8:	9c 93       	st	X, r25
    28da:	13 97       	sbiw	r26, 0x03	; 3
    28dc:	1d 92       	st	X+, r1
    28de:	1c 92       	st	X, r1
    28e0:	11 97       	sbiw	r26, 0x01	; 1
    28e2:	82 83       	std	Z+2, r24	; 0x02
    28e4:	93 83       	std	Z+3, r25	; 0x03
    28e6:	a0 83       	st	Z, r26
    28e8:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    28f0:	20 97       	sbiw	r28, 0x00	; 0
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <pvPortMalloc+0x56>
    28f4:	5f c0       	rjmp	.+190    	; 0x29b4 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    28f6:	9e 01       	movw	r18, r28
    28f8:	2b 5f       	subi	r18, 0xFB	; 251
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    28fc:	24 96       	adiw	r28, 0x04	; 4
    28fe:	ce 3f       	cpi	r28, 0xFE	; 254
    2900:	df 40       	sbci	r29, 0x0F	; 15
    2902:	08 f0       	brcs	.+2      	; 0x2906 <pvPortMalloc+0x66>
    2904:	5a c0       	rjmp	.+180    	; 0x29ba <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    2906:	e0 91 2d 21 	lds	r30, 0x212D	; 0x80212d <xStart>
    290a:	f0 91 2e 21 	lds	r31, 0x212E	; 0x80212e <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    290e:	ad e2       	ldi	r26, 0x2D	; 45
    2910:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <pvPortMalloc+0x78>
    2914:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    2916:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	82 17       	cp	r24, r18
    291e:	93 07       	cpc	r25, r19
    2920:	20 f4       	brcc	.+8      	; 0x292a <pvPortMalloc+0x8a>
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	a9 f7       	brne	.-22     	; 0x2914 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    292a:	c1 e2       	ldi	r28, 0x21	; 33
    292c:	e9 32       	cpi	r30, 0x29	; 41
    292e:	fc 07       	cpc	r31, r28
    2930:	09 f4       	brne	.+2      	; 0x2934 <pvPortMalloc+0x94>
    2932:	46 c0       	rjmp	.+140    	; 0x29c0 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2934:	cd 91       	ld	r28, X+
    2936:	dc 91       	ld	r29, X
    2938:	11 97       	sbiw	r26, 0x01	; 1
    293a:	8e 01       	movw	r16, r28
    293c:	0b 5f       	subi	r16, 0xFB	; 251
    293e:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	8d 93       	st	X+, r24
    2946:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	82 1b       	sub	r24, r18
    294e:	93 0b       	sbc	r25, r19
    2950:	8b 30       	cpi	r24, 0x0B	; 11
    2952:	91 05       	cpc	r25, r1
    2954:	10 f1       	brcs	.+68     	; 0x299a <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2956:	bf 01       	movw	r22, r30
    2958:	62 0f       	add	r22, r18
    295a:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    295c:	db 01       	movw	r26, r22
    295e:	12 96       	adiw	r26, 0x02	; 2
    2960:	8d 93       	st	X+, r24
    2962:	9c 93       	st	X, r25
    2964:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2966:	22 83       	std	Z+2, r18	; 0x02
    2968:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	4d 91       	ld	r20, X+
    296e:	5c 91       	ld	r21, X
    2970:	13 97       	sbiw	r26, 0x03	; 3
    2972:	8d e2       	ldi	r24, 0x2D	; 45
    2974:	91 e2       	ldi	r25, 0x21	; 33
    2976:	01 c0       	rjmp	.+2      	; 0x297a <pvPortMalloc+0xda>
    2978:	cd 01       	movw	r24, r26
    297a:	ec 01       	movw	r28, r24
    297c:	a8 81       	ld	r26, Y
    297e:	b9 81       	ldd	r27, Y+1	; 0x01
    2980:	12 96       	adiw	r26, 0x02	; 2
    2982:	2d 91       	ld	r18, X+
    2984:	3c 91       	ld	r19, X
    2986:	13 97       	sbiw	r26, 0x03	; 3
    2988:	24 17       	cp	r18, r20
    298a:	35 07       	cpc	r19, r21
    298c:	a8 f3       	brcs	.-22     	; 0x2978 <pvPortMalloc+0xd8>
    298e:	eb 01       	movw	r28, r22
    2990:	a8 83       	st	Y, r26
    2992:	b9 83       	std	Y+1, r27	; 0x01
    2994:	dc 01       	movw	r26, r24
    2996:	6d 93       	st	X+, r22
    2998:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    299a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    299e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    29a2:	22 81       	ldd	r18, Z+2	; 0x02
    29a4:	33 81       	ldd	r19, Z+3	; 0x03
    29a6:	82 1b       	sub	r24, r18
    29a8:	93 0b       	sbc	r25, r19
    29aa:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    29ae:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    29b4:	00 e0       	ldi	r16, 0x00	; 0
    29b6:	10 e0       	ldi	r17, 0x00	; 0
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <pvPortMalloc+0x124>
    29ba:	00 e0       	ldi	r16, 0x00	; 0
    29bc:	10 e0       	ldi	r17, 0x00	; 0
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <pvPortMalloc+0x124>
    29c0:	00 e0       	ldi	r16, 0x00	; 0
    29c2:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    29c4:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    29c8:	c8 01       	movw	r24, r16
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	08 95       	ret

000029d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	41 f1       	breq	.+80     	; 0x2a30 <vPortFree+0x5c>
    29e0:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    29e2:	8c 01       	movw	r16, r24
    29e4:	05 50       	subi	r16, 0x05	; 5
    29e6:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    29e8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    29ec:	f8 01       	movw	r30, r16
    29ee:	42 81       	ldd	r20, Z+2	; 0x02
    29f0:	53 81       	ldd	r21, Z+3	; 0x03
    29f2:	ad e2       	ldi	r26, 0x2D	; 45
    29f4:	b1 e2       	ldi	r27, 0x21	; 33
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <vPortFree+0x26>
    29f8:	df 01       	movw	r26, r30
    29fa:	ed 91       	ld	r30, X+
    29fc:	fc 91       	ld	r31, X
    29fe:	11 97       	sbiw	r26, 0x01	; 1
    2a00:	22 81       	ldd	r18, Z+2	; 0x02
    2a02:	33 81       	ldd	r19, Z+3	; 0x03
    2a04:	24 17       	cp	r18, r20
    2a06:	35 07       	cpc	r19, r21
    2a08:	b8 f3       	brcs	.-18     	; 0x29f8 <vPortFree+0x24>
    2a0a:	25 97       	sbiw	r28, 0x05	; 5
    2a0c:	e8 83       	st	Y, r30
    2a0e:	f9 83       	std	Y+1, r31	; 0x01
    2a10:	0d 93       	st	X+, r16
    2a12:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2a14:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2a18:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	82 0f       	add	r24, r18
    2a22:	93 1f       	adc	r25, r19
    2a24:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2a28:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    2a2c:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
	}
}
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	08 95       	ret

00002a3a <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2a3a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2a3e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2a42:	08 95       	ret

00002a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2a44:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2a46:	03 96       	adiw	r24, 0x03	; 3
    2a48:	81 83       	std	Z+1, r24	; 0x01
    2a4a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2a4c:	4f ef       	ldi	r20, 0xFF	; 255
    2a4e:	5f ef       	ldi	r21, 0xFF	; 255
    2a50:	ba 01       	movw	r22, r20
    2a52:	43 83       	std	Z+3, r20	; 0x03
    2a54:	54 83       	std	Z+4, r21	; 0x04
    2a56:	65 83       	std	Z+5, r22	; 0x05
    2a58:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2a5a:	87 83       	std	Z+7, r24	; 0x07
    2a5c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2a5e:	81 87       	std	Z+9, r24	; 0x09
    2a60:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2a62:	10 82       	st	Z, r1
    2a64:	08 95       	ret

00002a66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2a66:	fc 01       	movw	r30, r24
    2a68:	12 86       	std	Z+10, r1	; 0x0a
    2a6a:	13 86       	std	Z+11, r1	; 0x0b
    2a6c:	08 95       	ret

00002a6e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	fc 01       	movw	r30, r24
    2a74:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2a76:	21 81       	ldd	r18, Z+1	; 0x01
    2a78:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    2a7a:	e9 01       	movw	r28, r18
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a80:	14 96       	adiw	r26, 0x04	; 4
    2a82:	8d 93       	st	X+, r24
    2a84:	9c 93       	st	X, r25
    2a86:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2a88:	81 81       	ldd	r24, Z+1	; 0x01
    2a8a:	92 81       	ldd	r25, Z+2	; 0x02
    2a8c:	16 96       	adiw	r26, 0x06	; 6
    2a8e:	8d 93       	st	X+, r24
    2a90:	9c 93       	st	X, r25
    2a92:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2a94:	8c 81       	ldd	r24, Y+4	; 0x04
    2a96:	9d 81       	ldd	r25, Y+5	; 0x05
    2a98:	ec 01       	movw	r28, r24
    2a9a:	6e 83       	std	Y+6, r22	; 0x06
    2a9c:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a9e:	e9 01       	movw	r28, r18
    2aa0:	6c 83       	std	Y+4, r22	; 0x04
    2aa2:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2aa4:	61 83       	std	Z+1, r22	; 0x01
    2aa6:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2aa8:	1a 96       	adiw	r26, 0x0a	; 10
    2aaa:	ed 93       	st	X+, r30
    2aac:	fc 93       	st	X, r31
    2aae:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8f 5f       	subi	r24, 0xFF	; 255
    2ab4:	80 83       	st	Z, r24
}
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret

00002abc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2ac6:	08 81       	ld	r16, Y
    2ac8:	19 81       	ldd	r17, Y+1	; 0x01
    2aca:	2a 81       	ldd	r18, Y+2	; 0x02
    2acc:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2ace:	0f 3f       	cpi	r16, 0xFF	; 255
    2ad0:	4f ef       	ldi	r20, 0xFF	; 255
    2ad2:	14 07       	cpc	r17, r20
    2ad4:	24 07       	cpc	r18, r20
    2ad6:	34 07       	cpc	r19, r20
    2ad8:	31 f4       	brne	.+12     	; 0x2ae6 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2ada:	dc 01       	movw	r26, r24
    2adc:	19 96       	adiw	r26, 0x09	; 9
    2ade:	ed 91       	ld	r30, X+
    2ae0:	fc 91       	ld	r31, X
    2ae2:	1a 97       	sbiw	r26, 0x0a	; 10
    2ae4:	1f c0       	rjmp	.+62     	; 0x2b24 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	33 96       	adiw	r30, 0x03	; 3
    2aea:	dc 01       	movw	r26, r24
    2aec:	17 96       	adiw	r26, 0x07	; 7
    2aee:	4d 91       	ld	r20, X+
    2af0:	5c 91       	ld	r21, X
    2af2:	18 97       	sbiw	r26, 0x08	; 8
    2af4:	da 01       	movw	r26, r20
    2af6:	4d 91       	ld	r20, X+
    2af8:	5d 91       	ld	r21, X+
    2afa:	6d 91       	ld	r22, X+
    2afc:	7c 91       	ld	r23, X
    2afe:	04 17       	cp	r16, r20
    2b00:	15 07       	cpc	r17, r21
    2b02:	26 07       	cpc	r18, r22
    2b04:	37 07       	cpc	r19, r23
    2b06:	70 f0       	brcs	.+28     	; 0x2b24 <vListInsert+0x68>
    2b08:	04 80       	ldd	r0, Z+4	; 0x04
    2b0a:	f5 81       	ldd	r31, Z+5	; 0x05
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	a4 81       	ldd	r26, Z+4	; 0x04
    2b10:	b5 81       	ldd	r27, Z+5	; 0x05
    2b12:	4d 91       	ld	r20, X+
    2b14:	5d 91       	ld	r21, X+
    2b16:	6d 91       	ld	r22, X+
    2b18:	7c 91       	ld	r23, X
    2b1a:	04 17       	cp	r16, r20
    2b1c:	15 07       	cpc	r17, r21
    2b1e:	26 07       	cpc	r18, r22
    2b20:	37 07       	cpc	r19, r23
    2b22:	90 f7       	brcc	.-28     	; 0x2b08 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2b24:	a4 81       	ldd	r26, Z+4	; 0x04
    2b26:	b5 81       	ldd	r27, Z+5	; 0x05
    2b28:	ac 83       	std	Y+4, r26	; 0x04
    2b2a:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b2c:	16 96       	adiw	r26, 0x06	; 6
    2b2e:	cd 93       	st	X+, r28
    2b30:	dc 93       	st	X, r29
    2b32:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2b34:	ee 83       	std	Y+6, r30	; 0x06
    2b36:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b38:	c4 83       	std	Z+4, r28	; 0x04
    2b3a:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2b3c:	8a 87       	std	Y+10, r24	; 0x0a
    2b3e:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2b40:	fc 01       	movw	r30, r24
    2b42:	20 81       	ld	r18, Z
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	20 83       	st	Z, r18
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2b52:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2b54:	a4 81       	ldd	r26, Z+4	; 0x04
    2b56:	b5 81       	ldd	r27, Z+5	; 0x05
    2b58:	86 81       	ldd	r24, Z+6	; 0x06
    2b5a:	97 81       	ldd	r25, Z+7	; 0x07
    2b5c:	16 96       	adiw	r26, 0x06	; 6
    2b5e:	8d 93       	st	X+, r24
    2b60:	9c 93       	st	X, r25
    2b62:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2b64:	a6 81       	ldd	r26, Z+6	; 0x06
    2b66:	b7 81       	ldd	r27, Z+7	; 0x07
    2b68:	84 81       	ldd	r24, Z+4	; 0x04
    2b6a:	95 81       	ldd	r25, Z+5	; 0x05
    2b6c:	14 96       	adiw	r26, 0x04	; 4
    2b6e:	8d 93       	st	X+, r24
    2b70:	9c 93       	st	X, r25
    2b72:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2b74:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b76:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	8d 91       	ld	r24, X+
    2b7c:	9c 91       	ld	r25, X
    2b7e:	12 97       	sbiw	r26, 0x02	; 2
    2b80:	e8 17       	cp	r30, r24
    2b82:	f9 07       	cpc	r31, r25
    2b84:	31 f4       	brne	.+12     	; 0x2b92 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2b86:	86 81       	ldd	r24, Z+6	; 0x06
    2b88:	97 81       	ldd	r25, Z+7	; 0x07
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	8d 93       	st	X+, r24
    2b8e:	9c 93       	st	X, r25
    2b90:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2b92:	12 86       	std	Z+10, r1	; 0x0a
    2b94:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2b96:	8c 91       	ld	r24, X
    2b98:	81 50       	subi	r24, 0x01	; 1
    2b9a:	8c 93       	st	X, r24
    2b9c:	08 95       	ret

00002b9e <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2b9e:	80 93 92 31 	sts	0x3192, r24	; 0x803192 <portStackTopForTask>
    2ba2:	90 93 93 31 	sts	0x3193, r25	; 0x803193 <portStackTopForTask+0x1>
    2ba6:	31 e1       	ldi	r19, 0x11	; 17
    2ba8:	fc 01       	movw	r30, r24
    2baa:	30 83       	st	Z, r19
    2bac:	31 97       	sbiw	r30, 0x01	; 1
    2bae:	22 e2       	ldi	r18, 0x22	; 34
    2bb0:	20 83       	st	Z, r18
    2bb2:	31 97       	sbiw	r30, 0x01	; 1
    2bb4:	a3 e3       	ldi	r26, 0x33	; 51
    2bb6:	a0 83       	st	Z, r26
    2bb8:	31 97       	sbiw	r30, 0x01	; 1
    2bba:	60 83       	st	Z, r22
    2bbc:	31 97       	sbiw	r30, 0x01	; 1
    2bbe:	70 83       	st	Z, r23
    2bc0:	31 97       	sbiw	r30, 0x01	; 1
    2bc2:	10 82       	st	Z, r1
    2bc4:	31 97       	sbiw	r30, 0x01	; 1
    2bc6:	10 82       	st	Z, r1
    2bc8:	31 97       	sbiw	r30, 0x01	; 1
    2bca:	60 e8       	ldi	r22, 0x80	; 128
    2bcc:	60 83       	st	Z, r22
    2bce:	31 97       	sbiw	r30, 0x01	; 1
    2bd0:	10 82       	st	Z, r1
    2bd2:	31 97       	sbiw	r30, 0x01	; 1
    2bd4:	10 82       	st	Z, r1
    2bd6:	31 97       	sbiw	r30, 0x01	; 1
    2bd8:	10 82       	st	Z, r1
    2bda:	31 97       	sbiw	r30, 0x01	; 1
    2bdc:	62 e0       	ldi	r22, 0x02	; 2
    2bde:	60 83       	st	Z, r22
    2be0:	31 97       	sbiw	r30, 0x01	; 1
    2be2:	63 e0       	ldi	r22, 0x03	; 3
    2be4:	60 83       	st	Z, r22
    2be6:	31 97       	sbiw	r30, 0x01	; 1
    2be8:	64 e0       	ldi	r22, 0x04	; 4
    2bea:	60 83       	st	Z, r22
    2bec:	31 97       	sbiw	r30, 0x01	; 1
    2bee:	65 e0       	ldi	r22, 0x05	; 5
    2bf0:	60 83       	st	Z, r22
    2bf2:	31 97       	sbiw	r30, 0x01	; 1
    2bf4:	66 e0       	ldi	r22, 0x06	; 6
    2bf6:	60 83       	st	Z, r22
    2bf8:	31 97       	sbiw	r30, 0x01	; 1
    2bfa:	67 e0       	ldi	r22, 0x07	; 7
    2bfc:	60 83       	st	Z, r22
    2bfe:	31 97       	sbiw	r30, 0x01	; 1
    2c00:	68 e0       	ldi	r22, 0x08	; 8
    2c02:	60 83       	st	Z, r22
    2c04:	31 97       	sbiw	r30, 0x01	; 1
    2c06:	69 e0       	ldi	r22, 0x09	; 9
    2c08:	60 83       	st	Z, r22
    2c0a:	31 97       	sbiw	r30, 0x01	; 1
    2c0c:	60 e1       	ldi	r22, 0x10	; 16
    2c0e:	60 83       	st	Z, r22
    2c10:	31 97       	sbiw	r30, 0x01	; 1
    2c12:	30 83       	st	Z, r19
    2c14:	31 97       	sbiw	r30, 0x01	; 1
    2c16:	32 e1       	ldi	r19, 0x12	; 18
    2c18:	30 83       	st	Z, r19
    2c1a:	31 97       	sbiw	r30, 0x01	; 1
    2c1c:	33 e1       	ldi	r19, 0x13	; 19
    2c1e:	30 83       	st	Z, r19
    2c20:	31 97       	sbiw	r30, 0x01	; 1
    2c22:	34 e1       	ldi	r19, 0x14	; 20
    2c24:	30 83       	st	Z, r19
    2c26:	31 97       	sbiw	r30, 0x01	; 1
    2c28:	35 e1       	ldi	r19, 0x15	; 21
    2c2a:	30 83       	st	Z, r19
    2c2c:	31 97       	sbiw	r30, 0x01	; 1
    2c2e:	36 e1       	ldi	r19, 0x16	; 22
    2c30:	30 83       	st	Z, r19
    2c32:	31 97       	sbiw	r30, 0x01	; 1
    2c34:	37 e1       	ldi	r19, 0x17	; 23
    2c36:	30 83       	st	Z, r19
    2c38:	31 97       	sbiw	r30, 0x01	; 1
    2c3a:	38 e1       	ldi	r19, 0x18	; 24
    2c3c:	30 83       	st	Z, r19
    2c3e:	31 97       	sbiw	r30, 0x01	; 1
    2c40:	39 e1       	ldi	r19, 0x19	; 25
    2c42:	30 83       	st	Z, r19
    2c44:	31 97       	sbiw	r30, 0x01	; 1
    2c46:	30 e2       	ldi	r19, 0x20	; 32
    2c48:	30 83       	st	Z, r19
    2c4a:	31 97       	sbiw	r30, 0x01	; 1
    2c4c:	31 e2       	ldi	r19, 0x21	; 33
    2c4e:	30 83       	st	Z, r19
    2c50:	31 97       	sbiw	r30, 0x01	; 1
    2c52:	20 83       	st	Z, r18
    2c54:	31 97       	sbiw	r30, 0x01	; 1
    2c56:	23 e2       	ldi	r18, 0x23	; 35
    2c58:	20 83       	st	Z, r18
    2c5a:	31 97       	sbiw	r30, 0x01	; 1
    2c5c:	40 83       	st	Z, r20
    2c5e:	31 97       	sbiw	r30, 0x01	; 1
    2c60:	50 83       	st	Z, r21
    2c62:	31 97       	sbiw	r30, 0x01	; 1
    2c64:	26 e2       	ldi	r18, 0x26	; 38
    2c66:	20 83       	st	Z, r18
    2c68:	31 97       	sbiw	r30, 0x01	; 1
    2c6a:	27 e2       	ldi	r18, 0x27	; 39
    2c6c:	20 83       	st	Z, r18
    2c6e:	31 97       	sbiw	r30, 0x01	; 1
    2c70:	28 e2       	ldi	r18, 0x28	; 40
    2c72:	20 83       	st	Z, r18
    2c74:	31 97       	sbiw	r30, 0x01	; 1
    2c76:	29 e2       	ldi	r18, 0x29	; 41
    2c78:	20 83       	st	Z, r18
    2c7a:	31 97       	sbiw	r30, 0x01	; 1
    2c7c:	20 e3       	ldi	r18, 0x30	; 48
    2c7e:	20 83       	st	Z, r18
    2c80:	31 97       	sbiw	r30, 0x01	; 1
    2c82:	21 e3       	ldi	r18, 0x31	; 49
    2c84:	20 83       	st	Z, r18
    2c86:	89 97       	sbiw	r24, 0x29	; 41
    2c88:	08 95       	ret

00002c8a <xPortStartScheduler>:
    2c8a:	8c e7       	ldi	r24, 0x7C	; 124
    2c8c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2c90:	8f ef       	ldi	r24, 0xFF	; 255
    2c92:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2c9c:	91 e1       	ldi	r25, 0x11	; 17
    2c9e:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2ca2:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2ca6:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    2caa:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    2cae:	cd 91       	ld	r28, X+
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	dd 91       	ld	r29, X+
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	ff 91       	pop	r31
    2cb8:	ef 91       	pop	r30
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	bf 91       	pop	r27
    2cc0:	af 91       	pop	r26
    2cc2:	9f 91       	pop	r25
    2cc4:	8f 91       	pop	r24
    2cc6:	7f 91       	pop	r23
    2cc8:	6f 91       	pop	r22
    2cca:	5f 91       	pop	r21
    2ccc:	4f 91       	pop	r20
    2cce:	3f 91       	pop	r19
    2cd0:	2f 91       	pop	r18
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	bf 90       	pop	r11
    2ce0:	af 90       	pop	r10
    2ce2:	9f 90       	pop	r9
    2ce4:	8f 90       	pop	r8
    2ce6:	7f 90       	pop	r7
    2ce8:	6f 90       	pop	r6
    2cea:	5f 90       	pop	r5
    2cec:	4f 90       	pop	r4
    2cee:	3f 90       	pop	r3
    2cf0:	2f 90       	pop	r2
    2cf2:	1f 90       	pop	r1
    2cf4:	0f 90       	pop	r0
    2cf6:	0c be       	out	0x3c, r0	; 60
    2cf8:	0f 90       	pop	r0
    2cfa:	0b be       	out	0x3b, r0	; 59
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	0f 90       	pop	r0
    2d02:	08 95       	ret
    2d04:	08 95       	ret

00002d06 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2d06:	0f 92       	push	r0
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	0f 92       	push	r0
    2d0e:	0b b6       	in	r0, 0x3b	; 59
    2d10:	0f 92       	push	r0
    2d12:	0c b6       	in	r0, 0x3c	; 60
    2d14:	0f 92       	push	r0
    2d16:	1f 92       	push	r1
    2d18:	11 24       	eor	r1, r1
    2d1a:	2f 92       	push	r2
    2d1c:	3f 92       	push	r3
    2d1e:	4f 92       	push	r4
    2d20:	5f 92       	push	r5
    2d22:	6f 92       	push	r6
    2d24:	7f 92       	push	r7
    2d26:	8f 92       	push	r8
    2d28:	9f 92       	push	r9
    2d2a:	af 92       	push	r10
    2d2c:	bf 92       	push	r11
    2d2e:	cf 92       	push	r12
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	4f 93       	push	r20
    2d40:	5f 93       	push	r21
    2d42:	6f 93       	push	r22
    2d44:	7f 93       	push	r23
    2d46:	8f 93       	push	r24
    2d48:	9f 93       	push	r25
    2d4a:	af 93       	push	r26
    2d4c:	bf 93       	push	r27
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	ef 93       	push	r30
    2d54:	ff 93       	push	r31
    2d56:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    2d5a:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    2d5e:	0d b6       	in	r0, 0x3d	; 61
    2d60:	0d 92       	st	X+, r0
    2d62:	0e b6       	in	r0, 0x3e	; 62
    2d64:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2d66:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2d6a:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    2d6e:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    2d72:	cd 91       	ld	r28, X+
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	dd 91       	ld	r29, X+
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	ff 91       	pop	r31
    2d7c:	ef 91       	pop	r30
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	bf 91       	pop	r27
    2d84:	af 91       	pop	r26
    2d86:	9f 91       	pop	r25
    2d88:	8f 91       	pop	r24
    2d8a:	7f 91       	pop	r23
    2d8c:	6f 91       	pop	r22
    2d8e:	5f 91       	pop	r21
    2d90:	4f 91       	pop	r20
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	ff 90       	pop	r15
    2d9c:	ef 90       	pop	r14
    2d9e:	df 90       	pop	r13
    2da0:	cf 90       	pop	r12
    2da2:	bf 90       	pop	r11
    2da4:	af 90       	pop	r10
    2da6:	9f 90       	pop	r9
    2da8:	8f 90       	pop	r8
    2daa:	7f 90       	pop	r7
    2dac:	6f 90       	pop	r6
    2dae:	5f 90       	pop	r5
    2db0:	4f 90       	pop	r4
    2db2:	3f 90       	pop	r3
    2db4:	2f 90       	pop	r2
    2db6:	1f 90       	pop	r1
    2db8:	0f 90       	pop	r0
    2dba:	0c be       	out	0x3c, r0	; 60
    2dbc:	0f 90       	pop	r0
    2dbe:	0b be       	out	0x3b, r0	; 59
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2dc6:	08 95       	ret

00002dc8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2dc8:	0f 92       	push	r0
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	0f 92       	push	r0
    2dd0:	0b b6       	in	r0, 0x3b	; 59
    2dd2:	0f 92       	push	r0
    2dd4:	0c b6       	in	r0, 0x3c	; 60
    2dd6:	0f 92       	push	r0
    2dd8:	1f 92       	push	r1
    2dda:	11 24       	eor	r1, r1
    2ddc:	2f 92       	push	r2
    2dde:	3f 92       	push	r3
    2de0:	4f 92       	push	r4
    2de2:	5f 92       	push	r5
    2de4:	6f 92       	push	r6
    2de6:	7f 92       	push	r7
    2de8:	8f 92       	push	r8
    2dea:	9f 92       	push	r9
    2dec:	af 92       	push	r10
    2dee:	bf 92       	push	r11
    2df0:	cf 92       	push	r12
    2df2:	df 92       	push	r13
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	ef 93       	push	r30
    2e16:	ff 93       	push	r31
    2e18:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    2e1c:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    2e20:	0d b6       	in	r0, 0x3d	; 61
    2e22:	0d 92       	st	X+, r0
    2e24:	0e b6       	in	r0, 0x3e	; 62
    2e26:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2e28:	0e 94 85 1b 	call	0x370a	; 0x370a <vTaskIncrementTick>
	vTaskSwitchContext();
    2e2c:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2e30:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    2e34:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    2e38:	cd 91       	ld	r28, X+
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	dd 91       	ld	r29, X+
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	ff 91       	pop	r31
    2e42:	ef 91       	pop	r30
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	bf 91       	pop	r27
    2e4a:	af 91       	pop	r26
    2e4c:	9f 91       	pop	r25
    2e4e:	8f 91       	pop	r24
    2e50:	7f 91       	pop	r23
    2e52:	6f 91       	pop	r22
    2e54:	5f 91       	pop	r21
    2e56:	4f 91       	pop	r20
    2e58:	3f 91       	pop	r19
    2e5a:	2f 91       	pop	r18
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	bf 90       	pop	r11
    2e6a:	af 90       	pop	r10
    2e6c:	9f 90       	pop	r9
    2e6e:	8f 90       	pop	r8
    2e70:	7f 90       	pop	r7
    2e72:	6f 90       	pop	r6
    2e74:	5f 90       	pop	r5
    2e76:	4f 90       	pop	r4
    2e78:	3f 90       	pop	r3
    2e7a:	2f 90       	pop	r2
    2e7c:	1f 90       	pop	r1
    2e7e:	0f 90       	pop	r0
    2e80:	0c be       	out	0x3c, r0	; 60
    2e82:	0f 90       	pop	r0
    2e84:	0b be       	out	0x3b, r0	; 59
    2e86:	0f 90       	pop	r0
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2e8c:	08 95       	ret

00002e8e <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2e8e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2e92:	18 95       	reti

00002e94 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	ec 01       	movw	r28, r24
    2e9a:	88 a1       	ldd	r24, Y+32	; 0x20
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	0b c0       	rjmp	.+22     	; 0x2eb6 <prvCopyDataToQueue+0x22>
    2ea0:	88 81       	ld	r24, Y
    2ea2:	99 81       	ldd	r25, Y+1	; 0x01
    2ea4:	89 2b       	or	r24, r25
    2ea6:	e1 f5       	brne	.+120    	; 0x2f20 <prvCopyDataToQueue+0x8c>
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <vTaskPriorityDisinherit>
    2eb0:	1a 82       	std	Y+2, r1	; 0x02
    2eb2:	1b 82       	std	Y+3, r1	; 0x03
    2eb4:	35 c0       	rjmp	.+106    	; 0x2f20 <prvCopyDataToQueue+0x8c>
    2eb6:	41 11       	cpse	r20, r1
    2eb8:	17 c0       	rjmp	.+46     	; 0x2ee8 <prvCopyDataToQueue+0x54>
    2eba:	48 2f       	mov	r20, r24
    2ebc:	50 e0       	ldi	r21, 0x00	; 0
    2ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <memcpy>
    2ec6:	28 a1       	ldd	r18, Y+32	; 0x20
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ecc:	82 0f       	add	r24, r18
    2ece:	91 1d       	adc	r25, r1
    2ed0:	8c 83       	std	Y+4, r24	; 0x04
    2ed2:	9d 83       	std	Y+5, r25	; 0x05
    2ed4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ed6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ed8:	82 17       	cp	r24, r18
    2eda:	93 07       	cpc	r25, r19
    2edc:	08 f1       	brcs	.+66     	; 0x2f20 <prvCopyDataToQueue+0x8c>
    2ede:	88 81       	ld	r24, Y
    2ee0:	99 81       	ldd	r25, Y+1	; 0x01
    2ee2:	8c 83       	std	Y+4, r24	; 0x04
    2ee4:	9d 83       	std	Y+5, r25	; 0x05
    2ee6:	1c c0       	rjmp	.+56     	; 0x2f20 <prvCopyDataToQueue+0x8c>
    2ee8:	48 2f       	mov	r20, r24
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	8e 81       	ldd	r24, Y+6	; 0x06
    2eee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef0:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <memcpy>
    2ef4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	91 95       	neg	r25
    2efa:	81 95       	neg	r24
    2efc:	91 09       	sbc	r25, r1
    2efe:	2e 81       	ldd	r18, Y+6	; 0x06
    2f00:	3f 81       	ldd	r19, Y+7	; 0x07
    2f02:	28 0f       	add	r18, r24
    2f04:	39 1f       	adc	r19, r25
    2f06:	2e 83       	std	Y+6, r18	; 0x06
    2f08:	3f 83       	std	Y+7, r19	; 0x07
    2f0a:	48 81       	ld	r20, Y
    2f0c:	59 81       	ldd	r21, Y+1	; 0x01
    2f0e:	24 17       	cp	r18, r20
    2f10:	35 07       	cpc	r19, r21
    2f12:	30 f4       	brcc	.+12     	; 0x2f20 <prvCopyDataToQueue+0x8c>
    2f14:	2a 81       	ldd	r18, Y+2	; 0x02
    2f16:	3b 81       	ldd	r19, Y+3	; 0x03
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	8e 83       	std	Y+6, r24	; 0x06
    2f1e:	9f 83       	std	Y+7, r25	; 0x07
    2f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f22:	8f 5f       	subi	r24, 0xFF	; 255
    2f24:	8e 8f       	std	Y+30, r24	; 0x1e
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	08 95       	ret

00002f2c <prvCopyDataFromQueue>:
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	a1 f0       	breq	.+40     	; 0x2f5e <prvCopyDataFromQueue+0x32>
    2f36:	40 a1       	ldd	r20, Z+32	; 0x20
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	26 81       	ldd	r18, Z+6	; 0x06
    2f3c:	37 81       	ldd	r19, Z+7	; 0x07
    2f3e:	24 0f       	add	r18, r20
    2f40:	35 1f       	adc	r19, r21
    2f42:	26 83       	std	Z+6, r18	; 0x06
    2f44:	37 83       	std	Z+7, r19	; 0x07
    2f46:	a2 81       	ldd	r26, Z+2	; 0x02
    2f48:	b3 81       	ldd	r27, Z+3	; 0x03
    2f4a:	2a 17       	cp	r18, r26
    2f4c:	3b 07       	cpc	r19, r27
    2f4e:	10 f0       	brcs	.+4      	; 0x2f54 <prvCopyDataFromQueue+0x28>
    2f50:	86 83       	std	Z+6, r24	; 0x06
    2f52:	97 83       	std	Z+7, r25	; 0x07
    2f54:	cb 01       	movw	r24, r22
    2f56:	66 81       	ldd	r22, Z+6	; 0x06
    2f58:	77 81       	ldd	r23, Z+7	; 0x07
    2f5a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <memcpy>
    2f5e:	08 95       	ret

00002f60 <prvUnlockQueue>:
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	ec 01       	movw	r28, r24
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	0f 92       	push	r0
    2f70:	8a a1       	ldd	r24, Y+34	; 0x22
    2f72:	18 16       	cp	r1, r24
    2f74:	b4 f4       	brge	.+44     	; 0x2fa2 <prvUnlockQueue+0x42>
    2f76:	8b 89       	ldd	r24, Y+19	; 0x13
    2f78:	81 11       	cpse	r24, r1
    2f7a:	05 c0       	rjmp	.+10     	; 0x2f86 <prvUnlockQueue+0x26>
    2f7c:	12 c0       	rjmp	.+36     	; 0x2fa2 <prvUnlockQueue+0x42>
    2f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f80:	81 11       	cpse	r24, r1
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <prvUnlockQueue+0x2c>
    2f84:	0e c0       	rjmp	.+28     	; 0x2fa2 <prvUnlockQueue+0x42>
    2f86:	8e 01       	movw	r16, r28
    2f88:	0d 5e       	subi	r16, 0xED	; 237
    2f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8c:	c8 01       	movw	r24, r16
    2f8e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <xTaskRemoveFromEventList>
    2f92:	81 11       	cpse	r24, r1
    2f94:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <vTaskMissedYield>
    2f98:	8a a1       	ldd	r24, Y+34	; 0x22
    2f9a:	81 50       	subi	r24, 0x01	; 1
    2f9c:	8a a3       	std	Y+34, r24	; 0x22
    2f9e:	18 16       	cp	r1, r24
    2fa0:	74 f3       	brlt	.-36     	; 0x2f7e <prvUnlockQueue+0x1e>
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	8a a3       	std	Y+34, r24	; 0x22
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	0f 92       	push	r0
    2fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb2:	18 16       	cp	r1, r24
    2fb4:	b4 f4       	brge	.+44     	; 0x2fe2 <prvUnlockQueue+0x82>
    2fb6:	88 85       	ldd	r24, Y+8	; 0x08
    2fb8:	81 11       	cpse	r24, r1
    2fba:	05 c0       	rjmp	.+10     	; 0x2fc6 <prvUnlockQueue+0x66>
    2fbc:	12 c0       	rjmp	.+36     	; 0x2fe2 <prvUnlockQueue+0x82>
    2fbe:	88 85       	ldd	r24, Y+8	; 0x08
    2fc0:	81 11       	cpse	r24, r1
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <prvUnlockQueue+0x6c>
    2fc4:	0e c0       	rjmp	.+28     	; 0x2fe2 <prvUnlockQueue+0x82>
    2fc6:	8e 01       	movw	r16, r28
    2fc8:	08 5f       	subi	r16, 0xF8	; 248
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	c8 01       	movw	r24, r16
    2fce:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <xTaskRemoveFromEventList>
    2fd2:	81 11       	cpse	r24, r1
    2fd4:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <vTaskMissedYield>
    2fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fda:	81 50       	subi	r24, 0x01	; 1
    2fdc:	89 a3       	std	Y+33, r24	; 0x21
    2fde:	18 16       	cp	r1, r24
    2fe0:	74 f3       	brlt	.-36     	; 0x2fbe <prvUnlockQueue+0x5e>
    2fe2:	8f ef       	ldi	r24, 0xFF	; 255
    2fe4:	89 a3       	std	Y+33, r24	; 0x21
    2fe6:	0f 90       	pop	r0
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	08 95       	ret

00002ff4 <xQueueGenericReset>:
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	61 30       	cpi	r22, 0x01	; 1
    2ffc:	59 f0       	breq	.+22     	; 0x3014 <xQueueGenericReset+0x20>
    2ffe:	fc 01       	movw	r30, r24
    3000:	23 89       	ldd	r18, Z+19	; 0x13
    3002:	30 85       	ldd	r19, Z+8	; 0x08
    3004:	31 11       	cpse	r19, r1
    3006:	2c c0       	rjmp	.+88     	; 0x3060 <xQueueGenericReset+0x6c>
    3008:	11 e0       	ldi	r17, 0x01	; 1
    300a:	21 11       	cpse	r18, r1
    300c:	10 e0       	ldi	r17, 0x00	; 0
    300e:	21 11       	cpse	r18, r1
    3010:	28 c0       	rjmp	.+80     	; 0x3062 <xQueueGenericReset+0x6e>
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <xQueueGenericReset+0x22>
    3014:	11 e0       	ldi	r17, 0x01	; 1
    3016:	ec 01       	movw	r28, r24
    3018:	48 81       	ld	r20, Y
    301a:	59 81       	ldd	r21, Y+1	; 0x01
    301c:	28 a1       	ldd	r18, Y+32	; 0x20
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3022:	62 9f       	mul	r22, r18
    3024:	c0 01       	movw	r24, r0
    3026:	63 9f       	mul	r22, r19
    3028:	90 0d       	add	r25, r0
    302a:	11 24       	eor	r1, r1
    302c:	ba 01       	movw	r22, r20
    302e:	68 0f       	add	r22, r24
    3030:	79 1f       	adc	r23, r25
    3032:	6a 83       	std	Y+2, r22	; 0x02
    3034:	7b 83       	std	Y+3, r23	; 0x03
    3036:	1e 8e       	std	Y+30, r1	; 0x1e
    3038:	4c 83       	std	Y+4, r20	; 0x04
    303a:	5d 83       	std	Y+5, r21	; 0x05
    303c:	82 1b       	sub	r24, r18
    303e:	93 0b       	sbc	r25, r19
    3040:	84 0f       	add	r24, r20
    3042:	95 1f       	adc	r25, r21
    3044:	8e 83       	std	Y+6, r24	; 0x06
    3046:	9f 83       	std	Y+7, r25	; 0x07
    3048:	8f ef       	ldi	r24, 0xFF	; 255
    304a:	89 a3       	std	Y+33, r24	; 0x21
    304c:	8a a3       	std	Y+34, r24	; 0x22
    304e:	ce 01       	movw	r24, r28
    3050:	08 96       	adiw	r24, 0x08	; 8
    3052:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    3056:	ce 01       	movw	r24, r28
    3058:	43 96       	adiw	r24, 0x13	; 19
    305a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    305e:	01 c0       	rjmp	.+2      	; 0x3062 <xQueueGenericReset+0x6e>
    3060:	10 e0       	ldi	r17, 0x00	; 0
    3062:	81 2f       	mov	r24, r17
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	08 95       	ret

0000306c <xQueueGenericCreate>:
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	88 23       	and	r24, r24
    3076:	01 f1       	breq	.+64     	; 0x30b8 <xQueueGenericCreate+0x4c>
    3078:	06 2f       	mov	r16, r22
    307a:	18 2f       	mov	r17, r24
    307c:	83 e2       	ldi	r24, 0x23	; 35
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    3084:	ec 01       	movw	r28, r24
    3086:	89 2b       	or	r24, r25
    3088:	c9 f0       	breq	.+50     	; 0x30bc <xQueueGenericCreate+0x50>
    308a:	10 9f       	mul	r17, r16
    308c:	c0 01       	movw	r24, r0
    308e:	11 24       	eor	r1, r1
    3090:	01 96       	adiw	r24, 0x01	; 1
    3092:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    3096:	88 83       	st	Y, r24
    3098:	99 83       	std	Y+1, r25	; 0x01
    309a:	89 2b       	or	r24, r25
    309c:	39 f0       	breq	.+14     	; 0x30ac <xQueueGenericCreate+0x40>
    309e:	1f 8f       	std	Y+31, r17	; 0x1f
    30a0:	08 a3       	std	Y+32, r16	; 0x20
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	ce 01       	movw	r24, r28
    30a6:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xQueueGenericReset>
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <xQueueGenericCreate+0x50>
    30ac:	ce 01       	movw	r24, r28
    30ae:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <vPortFree>
    30b2:	c0 e0       	ldi	r28, 0x00	; 0
    30b4:	d0 e0       	ldi	r29, 0x00	; 0
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <xQueueGenericCreate+0x50>
    30b8:	c0 e0       	ldi	r28, 0x00	; 0
    30ba:	d0 e0       	ldi	r29, 0x00	; 0
    30bc:	ce 01       	movw	r24, r28
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	08 95       	ret

000030c8 <xQueueGenericSend>:
    30c8:	af 92       	push	r10
    30ca:	bf 92       	push	r11
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	29 97       	sbiw	r28, 0x09	; 9
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	7c 01       	movw	r14, r24
    30e8:	5b 01       	movw	r10, r22
    30ea:	2e 83       	std	Y+6, r18	; 0x06
    30ec:	3f 83       	std	Y+7, r19	; 0x07
    30ee:	48 87       	std	Y+8, r20	; 0x08
    30f0:	59 87       	std	Y+9, r21	; 0x09
    30f2:	10 e0       	ldi	r17, 0x00	; 0
    30f4:	6c 01       	movw	r12, r24
    30f6:	88 e0       	ldi	r24, 0x08	; 8
    30f8:	c8 0e       	add	r12, r24
    30fa:	d1 1c       	adc	r13, r1
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	0f 92       	push	r0
    3102:	f7 01       	movw	r30, r14
    3104:	96 8d       	ldd	r25, Z+30	; 0x1e
    3106:	87 8d       	ldd	r24, Z+31	; 0x1f
    3108:	98 17       	cp	r25, r24
    310a:	a8 f4       	brcc	.+42     	; 0x3136 <xQueueGenericSend+0x6e>
    310c:	40 2f       	mov	r20, r16
    310e:	b5 01       	movw	r22, r10
    3110:	c7 01       	movw	r24, r14
    3112:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <prvCopyDataToQueue>
    3116:	f7 01       	movw	r30, r14
    3118:	83 89       	ldd	r24, Z+19	; 0x13
    311a:	88 23       	and	r24, r24
    311c:	41 f0       	breq	.+16     	; 0x312e <xQueueGenericSend+0x66>
    311e:	c7 01       	movw	r24, r14
    3120:	43 96       	adiw	r24, 0x13	; 19
    3122:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <xTaskRemoveFromEventList>
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	11 f4       	brne	.+4      	; 0x312e <xQueueGenericSend+0x66>
    312a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    312e:	0f 90       	pop	r0
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	56 c0       	rjmp	.+172    	; 0x31e2 <xQueueGenericSend+0x11a>
    3136:	8e 81       	ldd	r24, Y+6	; 0x06
    3138:	9f 81       	ldd	r25, Y+7	; 0x07
    313a:	a8 85       	ldd	r26, Y+8	; 0x08
    313c:	b9 85       	ldd	r27, Y+9	; 0x09
    313e:	89 2b       	or	r24, r25
    3140:	8a 2b       	or	r24, r26
    3142:	8b 2b       	or	r24, r27
    3144:	21 f4       	brne	.+8      	; 0x314e <xQueueGenericSend+0x86>
    3146:	0f 90       	pop	r0
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	4a c0       	rjmp	.+148    	; 0x31e2 <xQueueGenericSend+0x11a>
    314e:	11 11       	cpse	r17, r1
    3150:	05 c0       	rjmp	.+10     	; 0x315c <xQueueGenericSend+0x94>
    3152:	ce 01       	movw	r24, r28
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vTaskSetTimeOutState>
    315a:	11 e0       	ldi	r17, 0x01	; 1
    315c:	0f 90       	pop	r0
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	0f 92       	push	r0
    316a:	f7 01       	movw	r30, r14
    316c:	81 a1       	ldd	r24, Z+33	; 0x21
    316e:	8f 3f       	cpi	r24, 0xFF	; 255
    3170:	09 f4       	brne	.+2      	; 0x3174 <xQueueGenericSend+0xac>
    3172:	11 a2       	std	Z+33, r1	; 0x21
    3174:	f7 01       	movw	r30, r14
    3176:	82 a1       	ldd	r24, Z+34	; 0x22
    3178:	8f 3f       	cpi	r24, 0xFF	; 255
    317a:	09 f4       	brne	.+2      	; 0x317e <xQueueGenericSend+0xb6>
    317c:	12 a2       	std	Z+34, r1	; 0x22
    317e:	0f 90       	pop	r0
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	be 01       	movw	r22, r28
    3184:	6a 5f       	subi	r22, 0xFA	; 250
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	ce 01       	movw	r24, r28
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <xTaskCheckForTimeOut>
    3190:	81 11       	cpse	r24, r1
    3192:	21 c0       	rjmp	.+66     	; 0x31d6 <xQueueGenericSend+0x10e>
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	0f 92       	push	r0
    319a:	f7 01       	movw	r30, r14
    319c:	96 8d       	ldd	r25, Z+30	; 0x1e
    319e:	0f 90       	pop	r0
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	87 8d       	ldd	r24, Z+31	; 0x1f
    31a4:	98 13       	cpse	r25, r24
    31a6:	11 c0       	rjmp	.+34     	; 0x31ca <xQueueGenericSend+0x102>
    31a8:	4e 81       	ldd	r20, Y+6	; 0x06
    31aa:	5f 81       	ldd	r21, Y+7	; 0x07
    31ac:	68 85       	ldd	r22, Y+8	; 0x08
    31ae:	79 85       	ldd	r23, Y+9	; 0x09
    31b0:	c6 01       	movw	r24, r12
    31b2:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vTaskPlaceOnEventList>
    31b6:	c7 01       	movw	r24, r14
    31b8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    31bc:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    31c0:	81 11       	cpse	r24, r1
    31c2:	9c cf       	rjmp	.-200    	; 0x30fc <xQueueGenericSend+0x34>
    31c4:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    31c8:	99 cf       	rjmp	.-206    	; 0x30fc <xQueueGenericSend+0x34>
    31ca:	c7 01       	movw	r24, r14
    31cc:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    31d0:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    31d4:	93 cf       	rjmp	.-218    	; 0x30fc <xQueueGenericSend+0x34>
    31d6:	c7 01       	movw	r24, r14
    31d8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    31dc:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	29 96       	adiw	r28, 0x09	; 9
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	ff 90       	pop	r15
    31f2:	ef 90       	pop	r14
    31f4:	df 90       	pop	r13
    31f6:	cf 90       	pop	r12
    31f8:	bf 90       	pop	r11
    31fa:	af 90       	pop	r10
    31fc:	08 95       	ret

000031fe <xQueueGenericReceive>:
    31fe:	af 92       	push	r10
    3200:	bf 92       	push	r11
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	29 97       	sbiw	r28, 0x09	; 9
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	7c 01       	movw	r14, r24
    321e:	5b 01       	movw	r10, r22
    3220:	2e 83       	std	Y+6, r18	; 0x06
    3222:	3f 83       	std	Y+7, r19	; 0x07
    3224:	48 87       	std	Y+8, r20	; 0x08
    3226:	59 87       	std	Y+9, r21	; 0x09
    3228:	10 e0       	ldi	r17, 0x00	; 0
    322a:	6c 01       	movw	r12, r24
    322c:	83 e1       	ldi	r24, 0x13	; 19
    322e:	c8 0e       	add	r12, r24
    3230:	d1 1c       	adc	r13, r1
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	0f 92       	push	r0
    3238:	f7 01       	movw	r30, r14
    323a:	86 8d       	ldd	r24, Z+30	; 0x1e
    323c:	88 23       	and	r24, r24
    323e:	99 f1       	breq	.+102    	; 0x32a6 <xQueueGenericReceive+0xa8>
    3240:	c6 80       	ldd	r12, Z+6	; 0x06
    3242:	d7 80       	ldd	r13, Z+7	; 0x07
    3244:	b5 01       	movw	r22, r10
    3246:	c7 01       	movw	r24, r14
    3248:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <prvCopyDataFromQueue>
    324c:	01 11       	cpse	r16, r1
    324e:	1a c0       	rjmp	.+52     	; 0x3284 <xQueueGenericReceive+0x86>
    3250:	f7 01       	movw	r30, r14
    3252:	86 8d       	ldd	r24, Z+30	; 0x1e
    3254:	81 50       	subi	r24, 0x01	; 1
    3256:	86 8f       	std	Z+30, r24	; 0x1e
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	89 2b       	or	r24, r25
    325e:	29 f4       	brne	.+10     	; 0x326a <xQueueGenericReceive+0x6c>
    3260:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <xTaskGetCurrentTaskHandle>
    3264:	f7 01       	movw	r30, r14
    3266:	82 83       	std	Z+2, r24	; 0x02
    3268:	93 83       	std	Z+3, r25	; 0x03
    326a:	f7 01       	movw	r30, r14
    326c:	80 85       	ldd	r24, Z+8	; 0x08
    326e:	88 23       	and	r24, r24
    3270:	b1 f0       	breq	.+44     	; 0x329e <xQueueGenericReceive+0xa0>
    3272:	c7 01       	movw	r24, r14
    3274:	08 96       	adiw	r24, 0x08	; 8
    3276:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <xTaskRemoveFromEventList>
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	81 f4       	brne	.+32     	; 0x329e <xQueueGenericReceive+0xa0>
    327e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    3282:	0d c0       	rjmp	.+26     	; 0x329e <xQueueGenericReceive+0xa0>
    3284:	f7 01       	movw	r30, r14
    3286:	c6 82       	std	Z+6, r12	; 0x06
    3288:	d7 82       	std	Z+7, r13	; 0x07
    328a:	83 89       	ldd	r24, Z+19	; 0x13
    328c:	88 23       	and	r24, r24
    328e:	39 f0       	breq	.+14     	; 0x329e <xQueueGenericReceive+0xa0>
    3290:	c7 01       	movw	r24, r14
    3292:	43 96       	adiw	r24, 0x13	; 19
    3294:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <xTaskRemoveFromEventList>
    3298:	81 11       	cpse	r24, r1
    329a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    329e:	0f 90       	pop	r0
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	62 c0       	rjmp	.+196    	; 0x336a <xQueueGenericReceive+0x16c>
    32a6:	8e 81       	ldd	r24, Y+6	; 0x06
    32a8:	9f 81       	ldd	r25, Y+7	; 0x07
    32aa:	a8 85       	ldd	r26, Y+8	; 0x08
    32ac:	b9 85       	ldd	r27, Y+9	; 0x09
    32ae:	89 2b       	or	r24, r25
    32b0:	8a 2b       	or	r24, r26
    32b2:	8b 2b       	or	r24, r27
    32b4:	21 f4       	brne	.+8      	; 0x32be <xQueueGenericReceive+0xc0>
    32b6:	0f 90       	pop	r0
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	56 c0       	rjmp	.+172    	; 0x336a <xQueueGenericReceive+0x16c>
    32be:	11 11       	cpse	r17, r1
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <xQueueGenericReceive+0xce>
    32c2:	ce 01       	movw	r24, r28
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vTaskSetTimeOutState>
    32ca:	11 e0       	ldi	r17, 0x01	; 1
    32cc:	0f 90       	pop	r0
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	0f 92       	push	r0
    32da:	f7 01       	movw	r30, r14
    32dc:	81 a1       	ldd	r24, Z+33	; 0x21
    32de:	8f 3f       	cpi	r24, 0xFF	; 255
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <xQueueGenericReceive+0xe6>
    32e2:	11 a2       	std	Z+33, r1	; 0x21
    32e4:	f7 01       	movw	r30, r14
    32e6:	82 a1       	ldd	r24, Z+34	; 0x22
    32e8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ea:	09 f4       	brne	.+2      	; 0x32ee <xQueueGenericReceive+0xf0>
    32ec:	12 a2       	std	Z+34, r1	; 0x22
    32ee:	0f 90       	pop	r0
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	be 01       	movw	r22, r28
    32f4:	6a 5f       	subi	r22, 0xFA	; 250
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	ce 01       	movw	r24, r28
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <xTaskCheckForTimeOut>
    3300:	81 11       	cpse	r24, r1
    3302:	2d c0       	rjmp	.+90     	; 0x335e <xQueueGenericReceive+0x160>
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	0f 92       	push	r0
    330a:	f7 01       	movw	r30, r14
    330c:	86 8d       	ldd	r24, Z+30	; 0x1e
    330e:	0f 90       	pop	r0
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	81 11       	cpse	r24, r1
    3314:	1e c0       	rjmp	.+60     	; 0x3352 <xQueueGenericReceive+0x154>
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	89 2b       	or	r24, r25
    331c:	49 f4       	brne	.+18     	; 0x3330 <xQueueGenericReceive+0x132>
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	0f 92       	push	r0
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vTaskPriorityInherit>
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	4e 81       	ldd	r20, Y+6	; 0x06
    3332:	5f 81       	ldd	r21, Y+7	; 0x07
    3334:	68 85       	ldd	r22, Y+8	; 0x08
    3336:	79 85       	ldd	r23, Y+9	; 0x09
    3338:	c6 01       	movw	r24, r12
    333a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <vTaskPlaceOnEventList>
    333e:	c7 01       	movw	r24, r14
    3340:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    3344:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    3348:	81 11       	cpse	r24, r1
    334a:	73 cf       	rjmp	.-282    	; 0x3232 <xQueueGenericReceive+0x34>
    334c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    3350:	70 cf       	rjmp	.-288    	; 0x3232 <xQueueGenericReceive+0x34>
    3352:	c7 01       	movw	r24, r14
    3354:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    3358:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    335c:	6a cf       	rjmp	.-300    	; 0x3232 <xQueueGenericReceive+0x34>
    335e:	c7 01       	movw	r24, r14
    3360:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <prvUnlockQueue>
    3364:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	29 96       	adiw	r28, 0x09	; 9
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	df 90       	pop	r13
    337e:	cf 90       	pop	r12
    3380:	bf 90       	pop	r11
    3382:	af 90       	pop	r10
    3384:	08 95       	ret

00003386 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    338c:	fc 01       	movw	r30, r24
    338e:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    3390:	0f 90       	pop	r0
    3392:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    3394:	08 95       	ret

00003396 <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    3396:	c4 e6       	ldi	r28, 0x64	; 100
    3398:	d1 e3       	ldi	r29, 0x31	; 49
    339a:	88 81       	ld	r24, Y
    339c:	82 30       	cpi	r24, 0x02	; 2
    339e:	e8 f3       	brcs	.-6      	; 0x339a <prvIdleTask+0x4>
    33a0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    33a4:	fa cf       	rjmp	.-12     	; 0x339a <prvIdleTask+0x4>

000033a6 <prvAddCurrentTaskToDelayedList>:
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	6b 01       	movw	r12, r22
    33b0:	7c 01       	movw	r14, r24
    33b2:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    33b6:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    33ba:	62 83       	std	Z+2, r22	; 0x02
    33bc:	73 83       	std	Z+3, r23	; 0x03
    33be:	84 83       	std	Z+4, r24	; 0x04
    33c0:	95 83       	std	Z+5, r25	; 0x05
    33c2:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    33c6:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    33ca:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    33ce:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    33d2:	c8 16       	cp	r12, r24
    33d4:	d9 06       	cpc	r13, r25
    33d6:	ea 06       	cpc	r14, r26
    33d8:	fb 06       	cpc	r15, r27
    33da:	68 f4       	brcc	.+26     	; 0x33f6 <prvAddCurrentTaskToDelayedList+0x50>
    33dc:	60 91 90 31 	lds	r22, 0x3190	; 0x803190 <pxCurrentTCB>
    33e0:	70 91 91 31 	lds	r23, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    33e4:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxOverflowDelayedTaskList>
    33e8:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxOverflowDelayedTaskList+0x1>
    33ec:	6e 5f       	subi	r22, 0xFE	; 254
    33ee:	7f 4f       	sbci	r23, 0xFF	; 255
    33f0:	0e 94 5e 15 	call	0x2abc	; 0x2abc <vListInsert>
    33f4:	21 c0       	rjmp	.+66     	; 0x3438 <prvAddCurrentTaskToDelayedList+0x92>
    33f6:	60 91 90 31 	lds	r22, 0x3190	; 0x803190 <pxCurrentTCB>
    33fa:	70 91 91 31 	lds	r23, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    33fe:	80 91 4c 31 	lds	r24, 0x314C	; 0x80314c <pxDelayedTaskList>
    3402:	90 91 4d 31 	lds	r25, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    3406:	6e 5f       	subi	r22, 0xFE	; 254
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <vListInsert>
    340e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3412:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3416:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    341a:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    341e:	c8 16       	cp	r12, r24
    3420:	d9 06       	cpc	r13, r25
    3422:	ea 06       	cpc	r14, r26
    3424:	fb 06       	cpc	r15, r27
    3426:	40 f4       	brcc	.+16     	; 0x3438 <prvAddCurrentTaskToDelayedList+0x92>
    3428:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    342c:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3430:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    3434:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    3438:	ff 90       	pop	r15
    343a:	ef 90       	pop	r14
    343c:	df 90       	pop	r13
    343e:	cf 90       	pop	r12
    3440:	08 95       	ret

00003442 <xTaskGenericCreate>:
    3442:	4f 92       	push	r4
    3444:	5f 92       	push	r5
    3446:	6f 92       	push	r6
    3448:	7f 92       	push	r7
    344a:	8f 92       	push	r8
    344c:	9f 92       	push	r9
    344e:	af 92       	push	r10
    3450:	bf 92       	push	r11
    3452:	cf 92       	push	r12
    3454:	df 92       	push	r13
    3456:	ef 92       	push	r14
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	5c 01       	movw	r10, r24
    3464:	4b 01       	movw	r8, r22
    3466:	3a 01       	movw	r6, r20
    3468:	29 01       	movw	r4, r18
    346a:	88 e2       	ldi	r24, 0x28	; 40
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    3472:	ec 01       	movw	r28, r24
    3474:	89 2b       	or	r24, r25
    3476:	09 f4       	brne	.+2      	; 0x347a <xTaskGenericCreate+0x38>
    3478:	d4 c0       	rjmp	.+424    	; 0x3622 <xTaskGenericCreate+0x1e0>
    347a:	c1 14       	cp	r12, r1
    347c:	d1 04       	cpc	r13, r1
    347e:	09 f0       	breq	.+2      	; 0x3482 <xTaskGenericCreate+0x40>
    3480:	cc c0       	rjmp	.+408    	; 0x361a <xTaskGenericCreate+0x1d8>
    3482:	c3 01       	movw	r24, r6
    3484:	0e 94 50 14 	call	0x28a0	; 0x28a0 <pvPortMalloc>
    3488:	8b 8f       	std	Y+27, r24	; 0x1b
    348a:	9c 8f       	std	Y+28, r25	; 0x1c
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	21 f4       	brne	.+8      	; 0x3498 <xTaskGenericCreate+0x56>
    3490:	ce 01       	movw	r24, r28
    3492:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <vPortFree>
    3496:	c5 c0       	rjmp	.+394    	; 0x3622 <xTaskGenericCreate+0x1e0>
    3498:	a3 01       	movw	r20, r6
    349a:	61 e1       	ldi	r22, 0x11	; 17
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <memset>
    34a2:	93 01       	movw	r18, r6
    34a4:	21 50       	subi	r18, 0x01	; 1
    34a6:	31 09       	sbc	r19, r1
    34a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ac:	3c 01       	movw	r6, r24
    34ae:	62 0e       	add	r6, r18
    34b0:	73 1e       	adc	r7, r19
    34b2:	4a e0       	ldi	r20, 0x0A	; 10
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	b4 01       	movw	r22, r8
    34b8:	ce 01       	movw	r24, r28
    34ba:	4d 96       	adiw	r24, 0x1d	; 29
    34bc:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <strncpy>
    34c0:	1e a2       	std	Y+38, r1	; 0x26
    34c2:	10 2f       	mov	r17, r16
    34c4:	04 30       	cpi	r16, 0x04	; 4
    34c6:	08 f0       	brcs	.+2      	; 0x34ca <xTaskGenericCreate+0x88>
    34c8:	13 e0       	ldi	r17, 0x03	; 3
    34ca:	1a 8f       	std	Y+26, r17	; 0x1a
    34cc:	1f a3       	std	Y+39, r17	; 0x27
    34ce:	6e 01       	movw	r12, r28
    34d0:	22 e0       	ldi	r18, 0x02	; 2
    34d2:	c2 0e       	add	r12, r18
    34d4:	d1 1c       	adc	r13, r1
    34d6:	c6 01       	movw	r24, r12
    34d8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <vListInitialiseItem>
    34dc:	ce 01       	movw	r24, r28
    34de:	0e 96       	adiw	r24, 0x0e	; 14
    34e0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <vListInitialiseItem>
    34e4:	ca 87       	std	Y+10, r28	; 0x0a
    34e6:	db 87       	std	Y+11, r29	; 0x0b
    34e8:	84 e0       	ldi	r24, 0x04	; 4
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	81 1b       	sub	r24, r17
    34f2:	91 09       	sbc	r25, r1
    34f4:	a1 09       	sbc	r26, r1
    34f6:	b1 09       	sbc	r27, r1
    34f8:	8e 87       	std	Y+14, r24	; 0x0e
    34fa:	9f 87       	std	Y+15, r25	; 0x0f
    34fc:	a8 8b       	std	Y+16, r26	; 0x10
    34fe:	b9 8b       	std	Y+17, r27	; 0x11
    3500:	ce 8b       	std	Y+22, r28	; 0x16
    3502:	df 8b       	std	Y+23, r29	; 0x17
    3504:	a2 01       	movw	r20, r4
    3506:	b5 01       	movw	r22, r10
    3508:	c3 01       	movw	r24, r6
    350a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <pxPortInitialiseStack>
    350e:	88 83       	st	Y, r24
    3510:	99 83       	std	Y+1, r25	; 0x01
    3512:	e1 14       	cp	r14, r1
    3514:	f1 04       	cpc	r15, r1
    3516:	19 f0       	breq	.+6      	; 0x351e <xTaskGenericCreate+0xdc>
    3518:	f7 01       	movw	r30, r14
    351a:	c0 83       	st	Z, r28
    351c:	d1 83       	std	Z+1, r29	; 0x01
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	0f 92       	push	r0
    3524:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <uxCurrentNumberOfTasks>
    3528:	8f 5f       	subi	r24, 0xFF	; 255
    352a:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <uxCurrentNumberOfTasks>
    352e:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3532:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3536:	89 2b       	or	r24, r25
    3538:	89 f5       	brne	.+98     	; 0x359c <xTaskGenericCreate+0x15a>
    353a:	c0 93 90 31 	sts	0x3190, r28	; 0x803190 <pxCurrentTCB>
    353e:	d0 93 91 31 	sts	0x3191, r29	; 0x803191 <pxCurrentTCB+0x1>
    3542:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <uxCurrentNumberOfTasks>
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	c1 f5       	brne	.+112    	; 0x35ba <xTaskGenericCreate+0x178>
    354a:	84 e6       	ldi	r24, 0x64	; 100
    354c:	91 e3       	ldi	r25, 0x31	; 49
    354e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    3552:	8f e6       	ldi	r24, 0x6F	; 111
    3554:	91 e3       	ldi	r25, 0x31	; 49
    3556:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    355a:	8a e7       	ldi	r24, 0x7A	; 122
    355c:	91 e3       	ldi	r25, 0x31	; 49
    355e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    3562:	85 e8       	ldi	r24, 0x85	; 133
    3564:	91 e3       	ldi	r25, 0x31	; 49
    3566:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    356a:	89 e5       	ldi	r24, 0x59	; 89
    356c:	91 e3       	ldi	r25, 0x31	; 49
    356e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    3572:	8e e4       	ldi	r24, 0x4E	; 78
    3574:	91 e3       	ldi	r25, 0x31	; 49
    3576:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    357a:	8f e3       	ldi	r24, 0x3F	; 63
    357c:	91 e3       	ldi	r25, 0x31	; 49
    357e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vListInitialise>
    3582:	89 e5       	ldi	r24, 0x59	; 89
    3584:	91 e3       	ldi	r25, 0x31	; 49
    3586:	80 93 4c 31 	sts	0x314C, r24	; 0x80314c <pxDelayedTaskList>
    358a:	90 93 4d 31 	sts	0x314D, r25	; 0x80314d <pxDelayedTaskList+0x1>
    358e:	8e e4       	ldi	r24, 0x4E	; 78
    3590:	91 e3       	ldi	r25, 0x31	; 49
    3592:	80 93 4a 31 	sts	0x314A, r24	; 0x80314a <pxOverflowDelayedTaskList>
    3596:	90 93 4b 31 	sts	0x314B, r25	; 0x80314b <pxOverflowDelayedTaskList+0x1>
    359a:	0f c0       	rjmp	.+30     	; 0x35ba <xTaskGenericCreate+0x178>
    359c:	80 91 35 31 	lds	r24, 0x3135	; 0x803135 <xSchedulerRunning>
    35a0:	81 11       	cpse	r24, r1
    35a2:	0b c0       	rjmp	.+22     	; 0x35ba <xTaskGenericCreate+0x178>
    35a4:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    35a8:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    35ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ae:	08 17       	cp	r16, r24
    35b0:	20 f0       	brcs	.+8      	; 0x35ba <xTaskGenericCreate+0x178>
    35b2:	c0 93 90 31 	sts	0x3190, r28	; 0x803190 <pxCurrentTCB>
    35b6:	d0 93 91 31 	sts	0x3191, r29	; 0x803191 <pxCurrentTCB+0x1>
    35ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35bc:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <uxTopUsedPriority>
    35c0:	98 17       	cp	r25, r24
    35c2:	10 f4       	brcc	.+4      	; 0x35c8 <xTaskGenericCreate+0x186>
    35c4:	80 93 37 31 	sts	0x3137, r24	; 0x803137 <uxTopUsedPriority>
    35c8:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTaskNumber>
    35cc:	9f 5f       	subi	r25, 0xFF	; 255
    35ce:	90 93 30 31 	sts	0x3130, r25	; 0x803130 <uxTaskNumber>
    35d2:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    35d6:	98 17       	cp	r25, r24
    35d8:	10 f4       	brcc	.+4      	; 0x35de <xTaskGenericCreate+0x19c>
    35da:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    35de:	fb e0       	ldi	r31, 0x0B	; 11
    35e0:	8f 9f       	mul	r24, r31
    35e2:	c0 01       	movw	r24, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	b6 01       	movw	r22, r12
    35e8:	8c 59       	subi	r24, 0x9C	; 156
    35ea:	9e 4c       	sbci	r25, 0xCE	; 206
    35ec:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
    35f0:	0f 90       	pop	r0
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	80 91 35 31 	lds	r24, 0x3135	; 0x803135 <xSchedulerRunning>
    35f8:	88 23       	and	r24, r24
    35fa:	59 f0       	breq	.+22     	; 0x3612 <xTaskGenericCreate+0x1d0>
    35fc:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    3600:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3604:	82 8d       	ldd	r24, Z+26	; 0x1a
    3606:	80 17       	cp	r24, r16
    3608:	30 f4       	brcc	.+12     	; 0x3616 <xTaskGenericCreate+0x1d4>
    360a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	09 c0       	rjmp	.+18     	; 0x3624 <xTaskGenericCreate+0x1e2>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	07 c0       	rjmp	.+14     	; 0x3624 <xTaskGenericCreate+0x1e2>
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <xTaskGenericCreate+0x1e2>
    361a:	cb 8e       	std	Y+27, r12	; 0x1b
    361c:	dc 8e       	std	Y+28, r13	; 0x1c
    361e:	c6 01       	movw	r24, r12
    3620:	3b cf       	rjmp	.-394    	; 0x3498 <xTaskGenericCreate+0x56>
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	9f 90       	pop	r9
    363a:	8f 90       	pop	r8
    363c:	7f 90       	pop	r7
    363e:	6f 90       	pop	r6
    3640:	5f 90       	pop	r5
    3642:	4f 90       	pop	r4
    3644:	08 95       	ret

00003646 <uxTaskPriorityGet>:
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	0f 92       	push	r0
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	21 f4       	brne	.+8      	; 0x3658 <uxTaskPriorityGet+0x12>
    3650:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3654:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3658:	0f 90       	pop	r0
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	fc 01       	movw	r30, r24
    365e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3660:	08 95       	ret

00003662 <vTaskStartScheduler>:
    3662:	af 92       	push	r10
    3664:	bf 92       	push	r11
    3666:	cf 92       	push	r12
    3668:	df 92       	push	r13
    366a:	ef 92       	push	r14
    366c:	ff 92       	push	r15
    366e:	0f 93       	push	r16
    3670:	a1 2c       	mov	r10, r1
    3672:	b1 2c       	mov	r11, r1
    3674:	c1 2c       	mov	r12, r1
    3676:	d1 2c       	mov	r13, r1
    3678:	0f 2e       	mov	r0, r31
    367a:	fd e3       	ldi	r31, 0x3D	; 61
    367c:	ef 2e       	mov	r14, r31
    367e:	f1 e3       	ldi	r31, 0x31	; 49
    3680:	ff 2e       	mov	r15, r31
    3682:	f0 2d       	mov	r31, r0
    3684:	00 e0       	ldi	r16, 0x00	; 0
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	44 e6       	ldi	r20, 0x64	; 100
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	68 ed       	ldi	r22, 0xD8	; 216
    3690:	70 e2       	ldi	r23, 0x20	; 32
    3692:	8b ec       	ldi	r24, 0xCB	; 203
    3694:	99 e1       	ldi	r25, 0x19	; 25
    3696:	0e 94 21 1a 	call	0x3442	; 0x3442 <xTaskGenericCreate>
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	69 f4       	brne	.+26     	; 0x36b8 <vTaskStartScheduler+0x56>
    369e:	f8 94       	cli
    36a0:	80 93 35 31 	sts	0x3135, r24	; 0x803135 <xSchedulerRunning>
    36a4:	10 92 38 31 	sts	0x3138, r1	; 0x803138 <xTickCount>
    36a8:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <xTickCount+0x1>
    36ac:	10 92 3a 31 	sts	0x313A, r1	; 0x80313a <xTickCount+0x2>
    36b0:	10 92 3b 31 	sts	0x313B, r1	; 0x80313b <xTickCount+0x3>
    36b4:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <xPortStartScheduler>
    36b8:	0f 91       	pop	r16
    36ba:	ff 90       	pop	r15
    36bc:	ef 90       	pop	r14
    36be:	df 90       	pop	r13
    36c0:	cf 90       	pop	r12
    36c2:	bf 90       	pop	r11
    36c4:	af 90       	pop	r10
    36c6:	08 95       	ret

000036c8 <vTaskSuspendAll>:
    36c8:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxSchedulerSuspended>
    36d2:	08 95       	ret

000036d4 <xTaskGetTickCount>:
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	0f 92       	push	r0
    36da:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount>
    36de:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x1>
    36e2:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <xTickCount+0x2>
    36e6:	90 91 3b 31 	lds	r25, 0x313B	; 0x80313b <xTickCount+0x3>
    36ea:	0f 90       	pop	r0
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	08 95       	ret

000036f0 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	21 f4       	brne	.+8      	; 0x36fc <pcTaskGetTaskName+0xc>
    36f4:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    36f8:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    36fc:	4d 96       	adiw	r24, 0x1d	; 29
    36fe:	08 95       	ret

00003700 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    3700:	80 91 3d 31 	lds	r24, 0x313D	; 0x80313d <xIdleTaskHandle>
    3704:	90 91 3e 31 	lds	r25, 0x313E	; 0x80313e <xIdleTaskHandle+0x1>
    3708:	08 95       	ret

0000370a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    370a:	ff 92       	push	r15
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3714:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    3718:	81 11       	cpse	r24, r1
    371a:	ed c0       	rjmp	.+474    	; 0x38f6 <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    371c:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3720:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3724:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3728:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    372c:	01 96       	adiw	r24, 0x01	; 1
    372e:	a1 1d       	adc	r26, r1
    3730:	b1 1d       	adc	r27, r1
    3732:	80 93 38 31 	sts	0x3138, r24	; 0x803138 <xTickCount>
    3736:	90 93 39 31 	sts	0x3139, r25	; 0x803139 <xTickCount+0x1>
    373a:	a0 93 3a 31 	sts	0x313A, r26	; 0x80313a <xTickCount+0x2>
    373e:	b0 93 3b 31 	sts	0x313B, r27	; 0x80313b <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    3742:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3746:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    374a:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    374e:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    3752:	89 2b       	or	r24, r25
    3754:	8a 2b       	or	r24, r26
    3756:	8b 2b       	or	r24, r27
    3758:	f1 f5       	brne	.+124    	; 0x37d6 <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    375a:	80 91 4c 31 	lds	r24, 0x314C	; 0x80314c <pxDelayedTaskList>
    375e:	90 91 4d 31 	lds	r25, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3762:	20 91 4a 31 	lds	r18, 0x314A	; 0x80314a <pxOverflowDelayedTaskList>
    3766:	30 91 4b 31 	lds	r19, 0x314B	; 0x80314b <pxOverflowDelayedTaskList+0x1>
    376a:	20 93 4c 31 	sts	0x314C, r18	; 0x80314c <pxDelayedTaskList>
    376e:	30 93 4d 31 	sts	0x314D, r19	; 0x80314d <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    3772:	80 93 4a 31 	sts	0x314A, r24	; 0x80314a <pxOverflowDelayedTaskList>
    3776:	90 93 4b 31 	sts	0x314B, r25	; 0x80314b <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    377a:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <xNumOfOverflows>
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3784:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    3788:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    378c:	80 81       	ld	r24, Z
    378e:	81 11       	cpse	r24, r1
    3790:	0c c0       	rjmp	.+24     	; 0x37aa <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3792:	8f ef       	ldi	r24, 0xFF	; 255
    3794:	9f ef       	ldi	r25, 0xFF	; 255
    3796:	dc 01       	movw	r26, r24
    3798:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    379c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    37a0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    37a4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    37a8:	16 c0       	rjmp	.+44     	; 0x37d6 <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    37aa:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    37ae:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    37b2:	07 80       	ldd	r0, Z+7	; 0x07
    37b4:	f0 85       	ldd	r31, Z+8	; 0x08
    37b6:	e0 2d       	mov	r30, r0
    37b8:	00 84       	ldd	r0, Z+8	; 0x08
    37ba:	f1 85       	ldd	r31, Z+9	; 0x09
    37bc:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	a4 81       	ldd	r26, Z+4	; 0x04
    37c4:	b5 81       	ldd	r27, Z+5	; 0x05
    37c6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    37ca:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    37ce:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    37d2:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    37d6:	40 91 38 31 	lds	r20, 0x3138	; 0x803138 <xTickCount>
    37da:	50 91 39 31 	lds	r21, 0x3139	; 0x803139 <xTickCount+0x1>
    37de:	60 91 3a 31 	lds	r22, 0x313A	; 0x80313a <xTickCount+0x2>
    37e2:	70 91 3b 31 	lds	r23, 0x313B	; 0x80313b <xTickCount+0x3>
    37e6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    37ea:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    37ee:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    37f2:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    37f6:	48 17       	cp	r20, r24
    37f8:	59 07       	cpc	r21, r25
    37fa:	6a 07       	cpc	r22, r26
    37fc:	7b 07       	cpc	r23, r27
    37fe:	08 f4       	brcc	.+2      	; 0x3802 <vTaskIncrementTick+0xf8>
    3800:	7f c0       	rjmp	.+254    	; 0x3900 <vTaskIncrementTick+0x1f6>
    3802:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    3806:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    380a:	80 81       	ld	r24, Z
    380c:	88 23       	and	r24, r24
    380e:	f9 f0       	breq	.+62     	; 0x384e <vTaskIncrementTick+0x144>
    3810:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    3814:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    3818:	07 80       	ldd	r0, Z+7	; 0x07
    381a:	f0 85       	ldd	r31, Z+8	; 0x08
    381c:	e0 2d       	mov	r30, r0
    381e:	c0 85       	ldd	r28, Z+8	; 0x08
    3820:	d1 85       	ldd	r29, Z+9	; 0x09
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	ac 81       	ldd	r26, Y+4	; 0x04
    3828:	bd 81       	ldd	r27, Y+5	; 0x05
    382a:	40 91 38 31 	lds	r20, 0x3138	; 0x803138 <xTickCount>
    382e:	50 91 39 31 	lds	r21, 0x3139	; 0x803139 <xTickCount+0x1>
    3832:	60 91 3a 31 	lds	r22, 0x313A	; 0x80313a <xTickCount+0x2>
    3836:	70 91 3b 31 	lds	r23, 0x313B	; 0x80313b <xTickCount+0x3>
    383a:	48 17       	cp	r20, r24
    383c:	59 07       	cpc	r21, r25
    383e:	6a 07       	cpc	r22, r26
    3840:	7b 07       	cpc	r23, r27
    3842:	58 f1       	brcs	.+86     	; 0x389a <vTaskIncrementTick+0x190>
    3844:	0f 2e       	mov	r0, r31
    3846:	fb e0       	ldi	r31, 0x0B	; 11
    3848:	ff 2e       	mov	r15, r31
    384a:	f0 2d       	mov	r31, r0
    384c:	2f c0       	rjmp	.+94     	; 0x38ac <vTaskIncrementTick+0x1a2>
    384e:	8f ef       	ldi	r24, 0xFF	; 255
    3850:	9f ef       	ldi	r25, 0xFF	; 255
    3852:	dc 01       	movw	r26, r24
    3854:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3858:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    385c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3860:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3864:	4d c0       	rjmp	.+154    	; 0x3900 <vTaskIncrementTick+0x1f6>
    3866:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    386a:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    386e:	07 80       	ldd	r0, Z+7	; 0x07
    3870:	f0 85       	ldd	r31, Z+8	; 0x08
    3872:	e0 2d       	mov	r30, r0
    3874:	c0 85       	ldd	r28, Z+8	; 0x08
    3876:	d1 85       	ldd	r29, Z+9	; 0x09
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	9b 81       	ldd	r25, Y+3	; 0x03
    387c:	ac 81       	ldd	r26, Y+4	; 0x04
    387e:	bd 81       	ldd	r27, Y+5	; 0x05
    3880:	40 91 38 31 	lds	r20, 0x3138	; 0x803138 <xTickCount>
    3884:	50 91 39 31 	lds	r21, 0x3139	; 0x803139 <xTickCount+0x1>
    3888:	60 91 3a 31 	lds	r22, 0x313A	; 0x80313a <xTickCount+0x2>
    388c:	70 91 3b 31 	lds	r23, 0x313B	; 0x80313b <xTickCount+0x3>
    3890:	48 17       	cp	r20, r24
    3892:	59 07       	cpc	r21, r25
    3894:	6a 07       	cpc	r22, r26
    3896:	7b 07       	cpc	r23, r27
    3898:	48 f4       	brcc	.+18     	; 0x38ac <vTaskIncrementTick+0x1a2>
    389a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    389e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    38a2:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    38a6:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    38aa:	2a c0       	rjmp	.+84     	; 0x3900 <vTaskIncrementTick+0x1f6>
    38ac:	8e 01       	movw	r16, r28
    38ae:	0e 5f       	subi	r16, 0xFE	; 254
    38b0:	1f 4f       	sbci	r17, 0xFF	; 255
    38b2:	c8 01       	movw	r24, r16
    38b4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
    38b8:	88 8d       	ldd	r24, Y+24	; 0x18
    38ba:	99 8d       	ldd	r25, Y+25	; 0x19
    38bc:	89 2b       	or	r24, r25
    38be:	21 f0       	breq	.+8      	; 0x38c8 <vTaskIncrementTick+0x1be>
    38c0:	ce 01       	movw	r24, r28
    38c2:	0e 96       	adiw	r24, 0x0e	; 14
    38c4:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
    38c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38ca:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    38ce:	98 17       	cp	r25, r24
    38d0:	10 f4       	brcc	.+4      	; 0x38d6 <vTaskIncrementTick+0x1cc>
    38d2:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    38d6:	f8 9e       	mul	r15, r24
    38d8:	c0 01       	movw	r24, r0
    38da:	11 24       	eor	r1, r1
    38dc:	b8 01       	movw	r22, r16
    38de:	8c 59       	subi	r24, 0x9C	; 156
    38e0:	9e 4c       	sbci	r25, 0xCE	; 206
    38e2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
    38e6:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <pxDelayedTaskList>
    38ea:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <pxDelayedTaskList+0x1>
    38ee:	80 81       	ld	r24, Z
    38f0:	81 11       	cpse	r24, r1
    38f2:	b9 cf       	rjmp	.-142    	; 0x3866 <vTaskIncrementTick+0x15c>
    38f4:	ac cf       	rjmp	.-168    	; 0x384e <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    38f6:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <uxMissedTicks>
    38fa:	8f 5f       	subi	r24, 0xFF	; 255
    38fc:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	08 95       	ret

0000390c <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    390c:	cf 92       	push	r12
    390e:	df 92       	push	r13
    3910:	ef 92       	push	r14
    3912:	ff 92       	push	r15
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3922:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    3926:	81 50       	subi	r24, 0x01	; 1
    3928:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    392c:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    3930:	81 11       	cpse	r24, r1
    3932:	60 c0       	rjmp	.+192    	; 0x39f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3934:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <uxCurrentNumberOfTasks>
    3938:	81 11       	cpse	r24, r1
    393a:	2c c0       	rjmp	.+88     	; 0x3994 <xTaskResumeAll+0x88>
    393c:	5e c0       	rjmp	.+188    	; 0x39fa <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    393e:	d7 01       	movw	r26, r14
    3940:	17 96       	adiw	r26, 0x07	; 7
    3942:	ed 91       	ld	r30, X+
    3944:	fc 91       	ld	r31, X
    3946:	18 97       	sbiw	r26, 0x08	; 8
    3948:	c0 85       	ldd	r28, Z+8	; 0x08
    394a:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    394c:	ce 01       	movw	r24, r28
    394e:	0e 96       	adiw	r24, 0x0e	; 14
    3950:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3954:	8e 01       	movw	r16, r28
    3956:	0e 5f       	subi	r16, 0xFE	; 254
    3958:	1f 4f       	sbci	r17, 0xFF	; 255
    395a:	c8 01       	movw	r24, r16
    395c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3960:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3962:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    3966:	98 17       	cp	r25, r24
    3968:	10 f4       	brcc	.+4      	; 0x396e <xTaskResumeAll+0x62>
    396a:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    396e:	d8 9e       	mul	r13, r24
    3970:	c0 01       	movw	r24, r0
    3972:	11 24       	eor	r1, r1
    3974:	b8 01       	movw	r22, r16
    3976:	8c 59       	subi	r24, 0x9C	; 156
    3978:	9e 4c       	sbci	r25, 0xCE	; 206
    397a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    397e:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    3982:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3986:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3988:	82 8d       	ldd	r24, Z+26	; 0x1a
    398a:	98 17       	cp	r25, r24
    398c:	70 f0       	brcs	.+28     	; 0x39aa <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    398e:	cc 24       	eor	r12, r12
    3990:	c3 94       	inc	r12
    3992:	0b c0       	rjmp	.+22     	; 0x39aa <xTaskResumeAll+0x9e>
    3994:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3996:	0f 2e       	mov	r0, r31
    3998:	ff e3       	ldi	r31, 0x3F	; 63
    399a:	ef 2e       	mov	r14, r31
    399c:	f1 e3       	ldi	r31, 0x31	; 49
    399e:	ff 2e       	mov	r15, r31
    39a0:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    39a2:	0f 2e       	mov	r0, r31
    39a4:	fb e0       	ldi	r31, 0x0B	; 11
    39a6:	df 2e       	mov	r13, r31
    39a8:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    39aa:	f7 01       	movw	r30, r14
    39ac:	80 81       	ld	r24, Z
    39ae:	81 11       	cpse	r24, r1
    39b0:	c6 cf       	rjmp	.-116    	; 0x393e <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    39b2:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <uxMissedTicks>
    39b6:	88 23       	and	r24, r24
    39b8:	81 f0       	breq	.+32     	; 0x39da <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    39ba:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <uxMissedTicks>
    39be:	88 23       	and	r24, r24
    39c0:	99 f0       	breq	.+38     	; 0x39e8 <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    39c2:	0e 94 85 1b 	call	0x370a	; 0x370a <vTaskIncrementTick>
						--uxMissedTicks;
    39c6:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <uxMissedTicks>
    39ca:	81 50       	subi	r24, 0x01	; 1
    39cc:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    39d0:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <uxMissedTicks>
    39d4:	81 11       	cpse	r24, r1
    39d6:	f5 cf       	rjmp	.-22     	; 0x39c2 <xTaskResumeAll+0xb6>
    39d8:	07 c0       	rjmp	.+14     	; 0x39e8 <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    39da:	f1 e0       	ldi	r31, 0x01	; 1
    39dc:	cf 16       	cp	r12, r31
    39de:	21 f0       	breq	.+8      	; 0x39e8 <xTaskResumeAll+0xdc>
    39e0:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xMissedYield>
    39e4:	81 30       	cpi	r24, 0x01	; 1
    39e6:	41 f4       	brne	.+16     	; 0x39f8 <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    39e8:	10 92 32 31 	sts	0x3132, r1	; 0x803132 <xMissedYield>
					portYIELD_WITHIN_API();
    39ec:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	01 c0       	rjmp	.+2      	; 0x39fa <xTaskResumeAll+0xee>
    39f8:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    39fa:	0f 90       	pop	r0
    39fc:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	ff 90       	pop	r15
    3a08:	ef 90       	pop	r14
    3a0a:	df 90       	pop	r13
    3a0c:	cf 90       	pop	r12
    3a0e:	08 95       	ret

00003a10 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3a10:	cf 92       	push	r12
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	ec 01       	movw	r28, r24
    3a1e:	6a 01       	movw	r12, r20
    3a20:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3a22:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3a26:	88 81       	ld	r24, Y
    3a28:	99 81       	ldd	r25, Y+1	; 0x01
    3a2a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2c:	bb 81       	ldd	r27, Y+3	; 0x03
    3a2e:	c8 0e       	add	r12, r24
    3a30:	d9 1e       	adc	r13, r25
    3a32:	ea 1e       	adc	r14, r26
    3a34:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    3a36:	40 91 38 31 	lds	r20, 0x3138	; 0x803138 <xTickCount>
    3a3a:	50 91 39 31 	lds	r21, 0x3139	; 0x803139 <xTickCount+0x1>
    3a3e:	60 91 3a 31 	lds	r22, 0x313A	; 0x80313a <xTickCount+0x2>
    3a42:	70 91 3b 31 	lds	r23, 0x313B	; 0x80313b <xTickCount+0x3>
    3a46:	48 17       	cp	r20, r24
    3a48:	59 07       	cpc	r21, r25
    3a4a:	6a 07       	cpc	r22, r26
    3a4c:	7b 07       	cpc	r23, r27
    3a4e:	b8 f4       	brcc	.+46     	; 0x3a7e <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3a50:	c8 16       	cp	r12, r24
    3a52:	d9 06       	cpc	r13, r25
    3a54:	ea 06       	cpc	r14, r26
    3a56:	fb 06       	cpc	r15, r27
    3a58:	e0 f5       	brcc	.+120    	; 0x3ad2 <vTaskDelayUntil+0xc2>
    3a5a:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3a5e:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3a62:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3a66:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3a6a:	c8 82       	st	Y, r12
    3a6c:	d9 82       	std	Y+1, r13	; 0x01
    3a6e:	ea 82       	std	Y+2, r14	; 0x02
    3a70:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3a72:	8c 15       	cp	r24, r12
    3a74:	9d 05       	cpc	r25, r13
    3a76:	ae 05       	cpc	r26, r14
    3a78:	bf 05       	cpc	r27, r15
    3a7a:	f8 f4       	brcc	.+62     	; 0x3aba <vTaskDelayUntil+0xaa>
    3a7c:	13 c0       	rjmp	.+38     	; 0x3aa4 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3a7e:	c8 16       	cp	r12, r24
    3a80:	d9 06       	cpc	r13, r25
    3a82:	ea 06       	cpc	r14, r26
    3a84:	fb 06       	cpc	r15, r27
    3a86:	00 f1       	brcs	.+64     	; 0x3ac8 <vTaskDelayUntil+0xb8>
    3a88:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3a8c:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3a90:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3a94:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    3a98:	8c 15       	cp	r24, r12
    3a9a:	9d 05       	cpc	r25, r13
    3a9c:	ae 05       	cpc	r26, r14
    3a9e:	bf 05       	cpc	r27, r15
    3aa0:	98 f0       	brcs	.+38     	; 0x3ac8 <vTaskDelayUntil+0xb8>
    3aa2:	17 c0       	rjmp	.+46     	; 0x3ad2 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3aa4:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3aa8:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3aac:	02 96       	adiw	r24, 0x02	; 2
    3aae:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3ab2:	c7 01       	movw	r24, r14
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3aba:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3abe:	81 11       	cpse	r24, r1
    3ac0:	0d c0       	rjmp	.+26     	; 0x3adc <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3ac2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
		}
	}
    3ac6:	0a c0       	rjmp	.+20     	; 0x3adc <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3ac8:	c8 82       	st	Y, r12
    3aca:	d9 82       	std	Y+1, r13	; 0x01
    3acc:	ea 82       	std	Y+2, r14	; 0x02
    3ace:	fb 82       	std	Y+3, r15	; 0x03
    3ad0:	e9 cf       	rjmp	.-46     	; 0x3aa4 <vTaskDelayUntil+0x94>
    3ad2:	c8 82       	st	Y, r12
    3ad4:	d9 82       	std	Y+1, r13	; 0x01
    3ad6:	ea 82       	std	Y+2, r14	; 0x02
    3ad8:	fb 82       	std	Y+3, r15	; 0x03
    3ada:	ef cf       	rjmp	.-34     	; 0x3aba <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	08 95       	ret

00003aea <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3aea:	cf 92       	push	r12
    3aec:	df 92       	push	r13
    3aee:	ef 92       	push	r14
    3af0:	ff 92       	push	r15
    3af2:	6b 01       	movw	r12, r22
    3af4:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3af6:	67 2b       	or	r22, r23
    3af8:	68 2b       	or	r22, r24
    3afa:	69 2b       	or	r22, r25
    3afc:	e9 f0       	breq	.+58     	; 0x3b38 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3afe:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3b02:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3b06:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3b0a:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3b0e:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    3b12:	c8 0e       	add	r12, r24
    3b14:	d9 1e       	adc	r13, r25
    3b16:	ea 1e       	adc	r14, r26
    3b18:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3b1a:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3b1e:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3b22:	02 96       	adiw	r24, 0x02	; 2
    3b24:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3b28:	c7 01       	movw	r24, r14
    3b2a:	b6 01       	movw	r22, r12
    3b2c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3b30:	0e 94 86 1c 	call	0x390c	; 0x390c <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3b34:	81 11       	cpse	r24, r1
    3b36:	02 c0       	rjmp	.+4      	; 0x3b3c <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3b38:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vPortYield>
		}
	}
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	08 95       	ret

00003b46 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3b46:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	0c c0       	rjmp	.+24     	; 0x3b66 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3b4e:	e0 91 36 31 	lds	r30, 0x3136	; 0x803136 <uxTopReadyPriority>
    3b52:	4b e0       	ldi	r20, 0x0B	; 11
    3b54:	e4 9f       	mul	r30, r20
    3b56:	f0 01       	movw	r30, r0
    3b58:	11 24       	eor	r1, r1
    3b5a:	ec 59       	subi	r30, 0x9C	; 156
    3b5c:	fe 4c       	sbci	r31, 0xCE	; 206
    3b5e:	80 81       	ld	r24, Z
    3b60:	88 23       	and	r24, r24
    3b62:	29 f0       	breq	.+10     	; 0x3b6e <vTaskSwitchContext+0x28>
    3b64:	14 c0       	rjmp	.+40     	; 0x3b8e <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <xMissedYield>
    3b6c:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3b6e:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3b70:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <uxTopReadyPriority>
    3b74:	81 50       	subi	r24, 0x01	; 1
    3b76:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3b7a:	e0 91 36 31 	lds	r30, 0x3136	; 0x803136 <uxTopReadyPriority>
    3b7e:	9e 9f       	mul	r25, r30
    3b80:	f0 01       	movw	r30, r0
    3b82:	11 24       	eor	r1, r1
    3b84:	ec 59       	subi	r30, 0x9C	; 156
    3b86:	fe 4c       	sbci	r31, 0xCE	; 206
    3b88:	80 81       	ld	r24, Z
    3b8a:	88 23       	and	r24, r24
    3b8c:	89 f3       	breq	.-30     	; 0x3b70 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3b8e:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <uxTopReadyPriority>
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	4b e0       	ldi	r20, 0x0B	; 11
    3b98:	84 9f       	mul	r24, r20
    3b9a:	c0 01       	movw	r24, r0
    3b9c:	11 24       	eor	r1, r1
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	ac 59       	subi	r26, 0x9C	; 156
    3ba2:	be 4c       	sbci	r27, 0xCE	; 206
    3ba4:	11 96       	adiw	r26, 0x01	; 1
    3ba6:	ed 91       	ld	r30, X+
    3ba8:	fc 91       	ld	r31, X
    3baa:	12 97       	sbiw	r26, 0x02	; 2
    3bac:	04 80       	ldd	r0, Z+4	; 0x04
    3bae:	f5 81       	ldd	r31, Z+5	; 0x05
    3bb0:	e0 2d       	mov	r30, r0
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	ed 93       	st	X+, r30
    3bb6:	fc 93       	st	X, r31
    3bb8:	12 97       	sbiw	r26, 0x02	; 2
    3bba:	89 59       	subi	r24, 0x99	; 153
    3bbc:	9e 4c       	sbci	r25, 0xCE	; 206
    3bbe:	e8 17       	cp	r30, r24
    3bc0:	f9 07       	cpc	r31, r25
    3bc2:	61 f4       	brne	.+24     	; 0x3bdc <vTaskSwitchContext+0x96>
    3bc4:	84 81       	ldd	r24, Z+4	; 0x04
    3bc6:	95 81       	ldd	r25, Z+5	; 0x05
    3bc8:	4b e0       	ldi	r20, 0x0B	; 11
    3bca:	42 9f       	mul	r20, r18
    3bcc:	f0 01       	movw	r30, r0
    3bce:	43 9f       	mul	r20, r19
    3bd0:	f0 0d       	add	r31, r0
    3bd2:	11 24       	eor	r1, r1
    3bd4:	ec 59       	subi	r30, 0x9C	; 156
    3bd6:	fe 4c       	sbci	r31, 0xCE	; 206
    3bd8:	81 83       	std	Z+1, r24	; 0x01
    3bda:	92 83       	std	Z+2, r25	; 0x02
    3bdc:	8b e0       	ldi	r24, 0x0B	; 11
    3bde:	82 9f       	mul	r24, r18
    3be0:	f0 01       	movw	r30, r0
    3be2:	83 9f       	mul	r24, r19
    3be4:	f0 0d       	add	r31, r0
    3be6:	11 24       	eor	r1, r1
    3be8:	ec 59       	subi	r30, 0x9C	; 156
    3bea:	fe 4c       	sbci	r31, 0xCE	; 206
    3bec:	01 80       	ldd	r0, Z+1	; 0x01
    3bee:	f2 81       	ldd	r31, Z+2	; 0x02
    3bf0:	e0 2d       	mov	r30, r0
    3bf2:	80 85       	ldd	r24, Z+8	; 0x08
    3bf4:	91 85       	ldd	r25, Z+9	; 0x09
    3bf6:	80 93 90 31 	sts	0x3190, r24	; 0x803190 <pxCurrentTCB>
    3bfa:	90 93 91 31 	sts	0x3191, r25	; 0x803191 <pxCurrentTCB+0x1>
    3bfe:	08 95       	ret

00003c00 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3c00:	cf 92       	push	r12
    3c02:	df 92       	push	r13
    3c04:	ef 92       	push	r14
    3c06:	ff 92       	push	r15
    3c08:	6a 01       	movw	r12, r20
    3c0a:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3c0c:	60 91 90 31 	lds	r22, 0x3190	; 0x803190 <pxCurrentTCB>
    3c10:	70 91 91 31 	lds	r23, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3c14:	62 5f       	subi	r22, 0xF2	; 242
    3c16:	7f 4f       	sbci	r23, 0xFF	; 255
    3c18:	0e 94 5e 15 	call	0x2abc	; 0x2abc <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3c1c:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3c20:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3c24:	02 96       	adiw	r24, 0x02	; 2
    3c26:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3c2a:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3c2e:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3c32:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3c36:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	6c 0d       	add	r22, r12
    3c40:	7d 1d       	adc	r23, r13
    3c42:	8e 1d       	adc	r24, r14
    3c44:	9f 1d       	adc	r25, r15
    3c46:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	df 90       	pop	r13
    3c50:	cf 90       	pop	r12
    3c52:	08 95       	ret

00003c54 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	17 96       	adiw	r26, 0x07	; 7
    3c60:	ed 91       	ld	r30, X+
    3c62:	fc 91       	ld	r31, X
    3c64:	18 97       	sbiw	r26, 0x08	; 8
    3c66:	c0 85       	ldd	r28, Z+8	; 0x08
    3c68:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3c6a:	8e 01       	movw	r16, r28
    3c6c:	02 5f       	subi	r16, 0xF2	; 242
    3c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c70:	c8 01       	movw	r24, r16
    3c72:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3c76:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxSchedulerSuspended>
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	16 c0       	rjmp	.+44     	; 0x3caa <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3c7e:	0c 50       	subi	r16, 0x0C	; 12
    3c80:	11 09       	sbc	r17, r1
    3c82:	c8 01       	movw	r24, r16
    3c84:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3c88:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c8a:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    3c8e:	98 17       	cp	r25, r24
    3c90:	10 f4       	brcc	.+4      	; 0x3c96 <xTaskRemoveFromEventList+0x42>
    3c92:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    3c96:	bb e0       	ldi	r27, 0x0B	; 11
    3c98:	8b 9f       	mul	r24, r27
    3c9a:	c0 01       	movw	r24, r0
    3c9c:	11 24       	eor	r1, r1
    3c9e:	b8 01       	movw	r22, r16
    3ca0:	8c 59       	subi	r24, 0x9C	; 156
    3ca2:	9e 4c       	sbci	r25, 0xCE	; 206
    3ca4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
    3ca8:	05 c0       	rjmp	.+10     	; 0x3cb4 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3caa:	b8 01       	movw	r22, r16
    3cac:	8f e3       	ldi	r24, 0x3F	; 63
    3cae:	91 e3       	ldi	r25, 0x31	; 49
    3cb0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3cb4:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    3cb8:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3cc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cc2:	29 17       	cp	r18, r25
    3cc4:	08 f4       	brcc	.+2      	; 0x3cc8 <xTaskRemoveFromEventList+0x74>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
}
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	1f 91       	pop	r17
    3cce:	0f 91       	pop	r16
    3cd0:	08 95       	ret

00003cd2 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3cd2:	20 91 31 31 	lds	r18, 0x3131	; 0x803131 <xNumOfOverflows>
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3cda:	40 91 38 31 	lds	r20, 0x3138	; 0x803138 <xTickCount>
    3cde:	50 91 39 31 	lds	r21, 0x3139	; 0x803139 <xTickCount+0x1>
    3ce2:	60 91 3a 31 	lds	r22, 0x313A	; 0x80313a <xTickCount+0x2>
    3ce6:	70 91 3b 31 	lds	r23, 0x313B	; 0x80313b <xTickCount+0x3>
    3cea:	41 83       	std	Z+1, r20	; 0x01
    3cec:	52 83       	std	Z+2, r21	; 0x02
    3cee:	63 83       	std	Z+3, r22	; 0x03
    3cf0:	74 83       	std	Z+4, r23	; 0x04
    3cf2:	08 95       	ret

00003cf4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3cf4:	8f 92       	push	r8
    3cf6:	9f 92       	push	r9
    3cf8:	af 92       	push	r10
    3cfa:	bf 92       	push	r11
    3cfc:	cf 92       	push	r12
    3cfe:	df 92       	push	r13
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3d14:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <xNumOfOverflows>
    3d18:	90 81       	ld	r25, Z
    3d1a:	98 17       	cp	r25, r24
    3d1c:	89 f0       	breq	.+34     	; 0x3d40 <xTaskCheckForTimeOut+0x4c>
    3d1e:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3d22:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3d26:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3d2a:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    3d2e:	01 81       	ldd	r16, Z+1	; 0x01
    3d30:	12 81       	ldd	r17, Z+2	; 0x02
    3d32:	23 81       	ldd	r18, Z+3	; 0x03
    3d34:	34 81       	ldd	r19, Z+4	; 0x04
    3d36:	80 17       	cp	r24, r16
    3d38:	91 07       	cpc	r25, r17
    3d3a:	a2 07       	cpc	r26, r18
    3d3c:	b3 07       	cpc	r27, r19
    3d3e:	a8 f5       	brcc	.+106    	; 0x3daa <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3d40:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount>
    3d44:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x1>
    3d48:	a0 91 3a 31 	lds	r26, 0x313A	; 0x80313a <xTickCount+0x2>
    3d4c:	b0 91 3b 31 	lds	r27, 0x313B	; 0x80313b <xTickCount+0x3>
    3d50:	c1 80       	ldd	r12, Z+1	; 0x01
    3d52:	d2 80       	ldd	r13, Z+2	; 0x02
    3d54:	e3 80       	ldd	r14, Z+3	; 0x03
    3d56:	f4 80       	ldd	r15, Z+4	; 0x04
    3d58:	eb 01       	movw	r28, r22
    3d5a:	08 81       	ld	r16, Y
    3d5c:	19 81       	ldd	r17, Y+1	; 0x01
    3d5e:	2a 81       	ldd	r18, Y+2	; 0x02
    3d60:	3b 81       	ldd	r19, Y+3	; 0x03
    3d62:	8c 19       	sub	r24, r12
    3d64:	9d 09       	sbc	r25, r13
    3d66:	ae 09       	sbc	r26, r14
    3d68:	bf 09       	sbc	r27, r15
    3d6a:	80 17       	cp	r24, r16
    3d6c:	91 07       	cpc	r25, r17
    3d6e:	a2 07       	cpc	r26, r18
    3d70:	b3 07       	cpc	r27, r19
    3d72:	e8 f4       	brcc	.+58     	; 0x3dae <xTaskCheckForTimeOut+0xba>
    3d74:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3d76:	80 90 38 31 	lds	r8, 0x3138	; 0x803138 <xTickCount>
    3d7a:	90 90 39 31 	lds	r9, 0x3139	; 0x803139 <xTickCount+0x1>
    3d7e:	a0 90 3a 31 	lds	r10, 0x313A	; 0x80313a <xTickCount+0x2>
    3d82:	b0 90 3b 31 	lds	r11, 0x313B	; 0x80313b <xTickCount+0x3>
    3d86:	b5 01       	movw	r22, r10
    3d88:	a4 01       	movw	r20, r8
    3d8a:	4c 19       	sub	r20, r12
    3d8c:	5d 09       	sbc	r21, r13
    3d8e:	6e 09       	sbc	r22, r14
    3d90:	7f 09       	sbc	r23, r15
    3d92:	04 1b       	sub	r16, r20
    3d94:	15 0b       	sbc	r17, r21
    3d96:	26 0b       	sbc	r18, r22
    3d98:	37 0b       	sbc	r19, r23
    3d9a:	08 83       	st	Y, r16
    3d9c:	19 83       	std	Y+1, r17	; 0x01
    3d9e:	2a 83       	std	Y+2, r18	; 0x02
    3da0:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3da2:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	03 c0       	rjmp	.+6      	; 0x3db0 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	01 c0       	rjmp	.+2      	; 0x3db0 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3db0:	0f 90       	pop	r0
    3db2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	ff 90       	pop	r15
    3dbe:	ef 90       	pop	r14
    3dc0:	df 90       	pop	r13
    3dc2:	cf 90       	pop	r12
    3dc4:	bf 90       	pop	r11
    3dc6:	af 90       	pop	r10
    3dc8:	9f 90       	pop	r9
    3dca:	8f 90       	pop	r8
    3dcc:	08 95       	ret

00003dce <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <xMissedYield>
    3dd4:	08 95       	ret

00003dd6 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	21 f4       	brne	.+8      	; 0x3de2 <uxTaskGetStackHighWaterMark+0xc>
    3dda:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3dde:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3de2:	dc 01       	movw	r26, r24
    3de4:	5b 96       	adiw	r26, 0x1b	; 27
    3de6:	ed 91       	ld	r30, X+
    3de8:	fc 91       	ld	r31, X
    3dea:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3dec:	80 81       	ld	r24, Z
    3dee:	81 31       	cpi	r24, 0x11	; 17
    3df0:	41 f4       	brne	.+16     	; 0x3e02 <uxTaskGetStackHighWaterMark+0x2c>
    3df2:	31 96       	adiw	r30, 0x01	; 1
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3df8:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3dfa:	21 91       	ld	r18, Z+
    3dfc:	21 31       	cpi	r18, 0x11	; 17
    3dfe:	e1 f3       	breq	.-8      	; 0x3df8 <uxTaskGetStackHighWaterMark+0x22>
    3e00:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3e06:	08 95       	ret

00003e08 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e08:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <pxCurrentTCB>
    3e0c:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <pxCurrentTCB+0x1>

		return xReturn;
	}
    3e10:	08 95       	ret

00003e12 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3e1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e1e:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    3e22:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3e26:	5a 96       	adiw	r26, 0x1a	; 26
    3e28:	8c 91       	ld	r24, X
    3e2a:	28 17       	cp	r18, r24
    3e2c:	08 f0       	brcs	.+2      	; 0x3e30 <vTaskPriorityInherit+0x1e>
    3e2e:	41 c0       	rjmp	.+130    	; 0x3eb2 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3e30:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    3e34:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3e38:	5a 96       	adiw	r26, 0x1a	; 26
    3e3a:	3c 91       	ld	r19, X
    3e3c:	84 e0       	ldi	r24, 0x04	; 4
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	a0 e0       	ldi	r26, 0x00	; 0
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	83 1b       	sub	r24, r19
    3e46:	91 09       	sbc	r25, r1
    3e48:	a1 09       	sbc	r26, r1
    3e4a:	b1 09       	sbc	r27, r1
    3e4c:	86 87       	std	Z+14, r24	; 0x0e
    3e4e:	97 87       	std	Z+15, r25	; 0x0f
    3e50:	a0 8b       	std	Z+16, r26	; 0x10
    3e52:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3e54:	8b e0       	ldi	r24, 0x0B	; 11
    3e56:	28 9f       	mul	r18, r24
    3e58:	90 01       	movw	r18, r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	2c 59       	subi	r18, 0x9C	; 156
    3e5e:	3e 4c       	sbci	r19, 0xCE	; 206
    3e60:	84 85       	ldd	r24, Z+12	; 0x0c
    3e62:	95 85       	ldd	r25, Z+13	; 0x0d
    3e64:	82 17       	cp	r24, r18
    3e66:	93 07       	cpc	r25, r19
    3e68:	e9 f4       	brne	.+58     	; 0x3ea4 <vTaskPriorityInherit+0x92>
    3e6a:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3e6c:	ef 01       	movw	r28, r30
    3e6e:	22 96       	adiw	r28, 0x02	; 2
    3e70:	ce 01       	movw	r24, r28
    3e72:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3e76:	e0 91 90 31 	lds	r30, 0x3190	; 0x803190 <pxCurrentTCB>
    3e7a:	f0 91 91 31 	lds	r31, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3e7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e80:	f8 01       	movw	r30, r16
    3e82:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3e84:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    3e88:	98 17       	cp	r25, r24
    3e8a:	10 f4       	brcc	.+4      	; 0x3e90 <vTaskPriorityInherit+0x7e>
    3e8c:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    3e90:	fb e0       	ldi	r31, 0x0B	; 11
    3e92:	8f 9f       	mul	r24, r31
    3e94:	c0 01       	movw	r24, r0
    3e96:	11 24       	eor	r1, r1
    3e98:	be 01       	movw	r22, r28
    3e9a:	8c 59       	subi	r24, 0x9C	; 156
    3e9c:	9e 4c       	sbci	r25, 0xCE	; 206
    3e9e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
    3ea2:	07 c0       	rjmp	.+14     	; 0x3eb2 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3ea4:	a0 91 90 31 	lds	r26, 0x3190	; 0x803190 <pxCurrentTCB>
    3ea8:	b0 91 91 31 	lds	r27, 0x3191	; 0x803191 <pxCurrentTCB+0x1>
    3eac:	5a 96       	adiw	r26, 0x1a	; 26
    3eae:	8c 91       	ld	r24, X
    3eb0:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	08 95       	ret

00003ebc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3ec4:	00 97       	sbiw	r24, 0x00	; 0
    3ec6:	49 f1       	breq	.+82     	; 0x3f1a <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3ec8:	fc 01       	movw	r30, r24
    3eca:	32 8d       	ldd	r19, Z+26	; 0x1a
    3ecc:	27 a1       	ldd	r18, Z+39	; 0x27
    3ece:	32 17       	cp	r19, r18
    3ed0:	21 f1       	breq	.+72     	; 0x3f1a <vTaskPriorityDisinherit+0x5e>
    3ed2:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3ed4:	8c 01       	movw	r16, r24
    3ed6:	0e 5f       	subi	r16, 0xFE	; 254
    3ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eda:	c8 01       	movw	r24, r16
    3edc:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3ee0:	8f a1       	ldd	r24, Y+39	; 0x27
    3ee2:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3ee4:	44 e0       	ldi	r20, 0x04	; 4
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	48 1b       	sub	r20, r24
    3eee:	51 09       	sbc	r21, r1
    3ef0:	61 09       	sbc	r22, r1
    3ef2:	71 09       	sbc	r23, r1
    3ef4:	4e 87       	std	Y+14, r20	; 0x0e
    3ef6:	5f 87       	std	Y+15, r21	; 0x0f
    3ef8:	68 8b       	std	Y+16, r22	; 0x10
    3efa:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3efc:	90 91 36 31 	lds	r25, 0x3136	; 0x803136 <uxTopReadyPriority>
    3f00:	98 17       	cp	r25, r24
    3f02:	10 f4       	brcc	.+4      	; 0x3f08 <vTaskPriorityDisinherit+0x4c>
    3f04:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxTopReadyPriority>
    3f08:	fb e0       	ldi	r31, 0x0B	; 11
    3f0a:	8f 9f       	mul	r24, r31
    3f0c:	c0 01       	movw	r24, r0
    3f0e:	11 24       	eor	r1, r1
    3f10:	b8 01       	movw	r22, r16
    3f12:	8c 59       	subi	r24, 0x9C	; 156
    3f14:	9e 4c       	sbci	r25, 0xCE	; 206
    3f16:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <vListInsertEnd>
			}
		}
	}
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	08 95       	ret

00003f24 <__divmodsi4>:
    3f24:	05 2e       	mov	r0, r21
    3f26:	97 fb       	bst	r25, 7
    3f28:	1e f4       	brtc	.+6      	; 0x3f30 <__divmodsi4+0xc>
    3f2a:	00 94       	com	r0
    3f2c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__negsi2>
    3f30:	57 fd       	sbrc	r21, 7
    3f32:	07 d0       	rcall	.+14     	; 0x3f42 <__divmodsi4_neg2>
    3f34:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <__udivmodsi4>
    3f38:	07 fc       	sbrc	r0, 7
    3f3a:	03 d0       	rcall	.+6      	; 0x3f42 <__divmodsi4_neg2>
    3f3c:	4e f4       	brtc	.+18     	; 0x3f50 <__divmodsi4_exit>
    3f3e:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__negsi2>

00003f42 <__divmodsi4_neg2>:
    3f42:	50 95       	com	r21
    3f44:	40 95       	com	r20
    3f46:	30 95       	com	r19
    3f48:	21 95       	neg	r18
    3f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f4e:	5f 4f       	sbci	r21, 0xFF	; 255

00003f50 <__divmodsi4_exit>:
    3f50:	08 95       	ret

00003f52 <__negsi2>:
    3f52:	90 95       	com	r25
    3f54:	80 95       	com	r24
    3f56:	70 95       	com	r23
    3f58:	61 95       	neg	r22
    3f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f60:	08 95       	ret

00003f62 <__udivmodsi4>:
    3f62:	a1 e2       	ldi	r26, 0x21	; 33
    3f64:	1a 2e       	mov	r1, r26
    3f66:	aa 1b       	sub	r26, r26
    3f68:	bb 1b       	sub	r27, r27
    3f6a:	fd 01       	movw	r30, r26
    3f6c:	0d c0       	rjmp	.+26     	; 0x3f88 <__udivmodsi4_ep>

00003f6e <__udivmodsi4_loop>:
    3f6e:	aa 1f       	adc	r26, r26
    3f70:	bb 1f       	adc	r27, r27
    3f72:	ee 1f       	adc	r30, r30
    3f74:	ff 1f       	adc	r31, r31
    3f76:	a2 17       	cp	r26, r18
    3f78:	b3 07       	cpc	r27, r19
    3f7a:	e4 07       	cpc	r30, r20
    3f7c:	f5 07       	cpc	r31, r21
    3f7e:	20 f0       	brcs	.+8      	; 0x3f88 <__udivmodsi4_ep>
    3f80:	a2 1b       	sub	r26, r18
    3f82:	b3 0b       	sbc	r27, r19
    3f84:	e4 0b       	sbc	r30, r20
    3f86:	f5 0b       	sbc	r31, r21

00003f88 <__udivmodsi4_ep>:
    3f88:	66 1f       	adc	r22, r22
    3f8a:	77 1f       	adc	r23, r23
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	1a 94       	dec	r1
    3f92:	69 f7       	brne	.-38     	; 0x3f6e <__udivmodsi4_loop>
    3f94:	60 95       	com	r22
    3f96:	70 95       	com	r23
    3f98:	80 95       	com	r24
    3f9a:	90 95       	com	r25
    3f9c:	9b 01       	movw	r18, r22
    3f9e:	ac 01       	movw	r20, r24
    3fa0:	bd 01       	movw	r22, r26
    3fa2:	cf 01       	movw	r24, r30
    3fa4:	08 95       	ret

00003fa6 <memcpy>:
    3fa6:	fb 01       	movw	r30, r22
    3fa8:	dc 01       	movw	r26, r24
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <memcpy+0xa>
    3fac:	01 90       	ld	r0, Z+
    3fae:	0d 92       	st	X+, r0
    3fb0:	41 50       	subi	r20, 0x01	; 1
    3fb2:	50 40       	sbci	r21, 0x00	; 0
    3fb4:	d8 f7       	brcc	.-10     	; 0x3fac <memcpy+0x6>
    3fb6:	08 95       	ret

00003fb8 <memset>:
    3fb8:	dc 01       	movw	r26, r24
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <memset+0x6>
    3fbc:	6d 93       	st	X+, r22
    3fbe:	41 50       	subi	r20, 0x01	; 1
    3fc0:	50 40       	sbci	r21, 0x00	; 0
    3fc2:	e0 f7       	brcc	.-8      	; 0x3fbc <memset+0x4>
    3fc4:	08 95       	ret

00003fc6 <strncpy>:
    3fc6:	fb 01       	movw	r30, r22
    3fc8:	dc 01       	movw	r26, r24
    3fca:	41 50       	subi	r20, 0x01	; 1
    3fcc:	50 40       	sbci	r21, 0x00	; 0
    3fce:	48 f0       	brcs	.+18     	; 0x3fe2 <strncpy+0x1c>
    3fd0:	01 90       	ld	r0, Z+
    3fd2:	0d 92       	st	X+, r0
    3fd4:	00 20       	and	r0, r0
    3fd6:	c9 f7       	brne	.-14     	; 0x3fca <strncpy+0x4>
    3fd8:	01 c0       	rjmp	.+2      	; 0x3fdc <strncpy+0x16>
    3fda:	1d 92       	st	X+, r1
    3fdc:	41 50       	subi	r20, 0x01	; 1
    3fde:	50 40       	sbci	r21, 0x00	; 0
    3fe0:	e0 f7       	brcc	.-8      	; 0x3fda <strncpy+0x14>
    3fe2:	08 95       	ret

00003fe4 <ultoa>:
    3fe4:	25 32       	cpi	r18, 0x25	; 37
    3fe6:	31 05       	cpc	r19, r1
    3fe8:	20 f4       	brcc	.+8      	; 0x3ff2 <ultoa+0xe>
    3fea:	22 30       	cpi	r18, 0x02	; 2
    3fec:	10 f0       	brcs	.+4      	; 0x3ff2 <ultoa+0xe>
    3fee:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__ultoa_ncheck>
    3ff2:	fa 01       	movw	r30, r20
    3ff4:	10 82       	st	Z, r1
    3ff6:	ca 01       	movw	r24, r20
    3ff8:	08 95       	ret

00003ffa <__ultoa_ncheck>:
    3ffa:	bb 27       	eor	r27, r27

00003ffc <__ultoa_common>:
    3ffc:	fa 01       	movw	r30, r20
    3ffe:	a6 2f       	mov	r26, r22
    4000:	62 17       	cp	r22, r18
    4002:	71 05       	cpc	r23, r1
    4004:	81 05       	cpc	r24, r1
    4006:	91 05       	cpc	r25, r1
    4008:	33 0b       	sbc	r19, r19
    400a:	30 fb       	bst	r19, 0
    400c:	66 f0       	brts	.+24     	; 0x4026 <__stack+0x27>
    400e:	aa 27       	eor	r26, r26
    4010:	66 0f       	add	r22, r22
    4012:	77 1f       	adc	r23, r23
    4014:	88 1f       	adc	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	aa 1f       	adc	r26, r26
    401a:	a2 17       	cp	r26, r18
    401c:	10 f0       	brcs	.+4      	; 0x4022 <__stack+0x23>
    401e:	a2 1b       	sub	r26, r18
    4020:	63 95       	inc	r22
    4022:	38 50       	subi	r19, 0x08	; 8
    4024:	a9 f7       	brne	.-22     	; 0x4010 <__stack+0x11>
    4026:	a0 5d       	subi	r26, 0xD0	; 208
    4028:	aa 33       	cpi	r26, 0x3A	; 58
    402a:	08 f0       	brcs	.+2      	; 0x402e <__stack+0x2f>
    402c:	a9 5d       	subi	r26, 0xD9	; 217
    402e:	a1 93       	st	Z+, r26
    4030:	36 f7       	brtc	.-52     	; 0x3ffe <__ultoa_common+0x2>
    4032:	b1 11       	cpse	r27, r1
    4034:	b1 93       	st	Z+, r27
    4036:	10 82       	st	Z, r1
    4038:	ca 01       	movw	r24, r20
    403a:	0c 94 44 20 	jmp	0x4088	; 0x4088 <strrev>

0000403e <utoa>:
    403e:	45 32       	cpi	r20, 0x25	; 37
    4040:	51 05       	cpc	r21, r1
    4042:	20 f4       	brcc	.+8      	; 0x404c <utoa+0xe>
    4044:	42 30       	cpi	r20, 0x02	; 2
    4046:	10 f0       	brcs	.+4      	; 0x404c <utoa+0xe>
    4048:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__utoa_ncheck>
    404c:	fb 01       	movw	r30, r22
    404e:	10 82       	st	Z, r1
    4050:	cb 01       	movw	r24, r22
    4052:	08 95       	ret

00004054 <__utoa_ncheck>:
    4054:	bb 27       	eor	r27, r27

00004056 <__utoa_common>:
    4056:	fb 01       	movw	r30, r22
    4058:	55 27       	eor	r21, r21
    405a:	aa 27       	eor	r26, r26
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	aa 1f       	adc	r26, r26
    4062:	a4 17       	cp	r26, r20
    4064:	10 f0       	brcs	.+4      	; 0x406a <__utoa_common+0x14>
    4066:	a4 1b       	sub	r26, r20
    4068:	83 95       	inc	r24
    406a:	50 51       	subi	r21, 0x10	; 16
    406c:	b9 f7       	brne	.-18     	; 0x405c <__utoa_common+0x6>
    406e:	a0 5d       	subi	r26, 0xD0	; 208
    4070:	aa 33       	cpi	r26, 0x3A	; 58
    4072:	08 f0       	brcs	.+2      	; 0x4076 <__utoa_common+0x20>
    4074:	a9 5d       	subi	r26, 0xD9	; 217
    4076:	a1 93       	st	Z+, r26
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	79 f7       	brne	.-34     	; 0x405a <__utoa_common+0x4>
    407c:	b1 11       	cpse	r27, r1
    407e:	b1 93       	st	Z+, r27
    4080:	11 92       	st	Z+, r1
    4082:	cb 01       	movw	r24, r22
    4084:	0c 94 44 20 	jmp	0x4088	; 0x4088 <strrev>

00004088 <strrev>:
    4088:	dc 01       	movw	r26, r24
    408a:	fc 01       	movw	r30, r24
    408c:	67 2f       	mov	r22, r23
    408e:	71 91       	ld	r23, Z+
    4090:	77 23       	and	r23, r23
    4092:	e1 f7       	brne	.-8      	; 0x408c <strrev+0x4>
    4094:	32 97       	sbiw	r30, 0x02	; 2
    4096:	04 c0       	rjmp	.+8      	; 0x40a0 <strrev+0x18>
    4098:	7c 91       	ld	r23, X
    409a:	6d 93       	st	X+, r22
    409c:	70 83       	st	Z, r23
    409e:	62 91       	ld	r22, -Z
    40a0:	ae 17       	cp	r26, r30
    40a2:	bf 07       	cpc	r27, r31
    40a4:	c8 f3       	brcs	.-14     	; 0x4098 <strrev+0x10>
    40a6:	08 95       	ret

000040a8 <__subsf3>:
    40a8:	50 58       	subi	r21, 0x80	; 128

000040aa <__addsf3>:
    40aa:	bb 27       	eor	r27, r27
    40ac:	aa 27       	eor	r26, r26
    40ae:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__addsf3x>
    40b2:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_round>
    40b6:	0e 94 af 21 	call	0x435e	; 0x435e <__fp_pscA>
    40ba:	38 f0       	brcs	.+14     	; 0x40ca <__addsf3+0x20>
    40bc:	0e 94 b6 21 	call	0x436c	; 0x436c <__fp_pscB>
    40c0:	20 f0       	brcs	.+8      	; 0x40ca <__addsf3+0x20>
    40c2:	39 f4       	brne	.+14     	; 0x40d2 <__addsf3+0x28>
    40c4:	9f 3f       	cpi	r25, 0xFF	; 255
    40c6:	19 f4       	brne	.+6      	; 0x40ce <__addsf3+0x24>
    40c8:	26 f4       	brtc	.+8      	; 0x40d2 <__addsf3+0x28>
    40ca:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__fp_nan>
    40ce:	0e f4       	brtc	.+2      	; 0x40d2 <__addsf3+0x28>
    40d0:	e0 95       	com	r30
    40d2:	e7 fb       	bst	r30, 7
    40d4:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__fp_inf>

000040d8 <__addsf3x>:
    40d8:	e9 2f       	mov	r30, r25
    40da:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_split3>
    40de:	58 f3       	brcs	.-42     	; 0x40b6 <__addsf3+0xc>
    40e0:	ba 17       	cp	r27, r26
    40e2:	62 07       	cpc	r22, r18
    40e4:	73 07       	cpc	r23, r19
    40e6:	84 07       	cpc	r24, r20
    40e8:	95 07       	cpc	r25, r21
    40ea:	20 f0       	brcs	.+8      	; 0x40f4 <__addsf3x+0x1c>
    40ec:	79 f4       	brne	.+30     	; 0x410c <__addsf3x+0x34>
    40ee:	a6 f5       	brtc	.+104    	; 0x4158 <__addsf3x+0x80>
    40f0:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__fp_zero>
    40f4:	0e f4       	brtc	.+2      	; 0x40f8 <__addsf3x+0x20>
    40f6:	e0 95       	com	r30
    40f8:	0b 2e       	mov	r0, r27
    40fa:	ba 2f       	mov	r27, r26
    40fc:	a0 2d       	mov	r26, r0
    40fe:	0b 01       	movw	r0, r22
    4100:	b9 01       	movw	r22, r18
    4102:	90 01       	movw	r18, r0
    4104:	0c 01       	movw	r0, r24
    4106:	ca 01       	movw	r24, r20
    4108:	a0 01       	movw	r20, r0
    410a:	11 24       	eor	r1, r1
    410c:	ff 27       	eor	r31, r31
    410e:	59 1b       	sub	r21, r25
    4110:	99 f0       	breq	.+38     	; 0x4138 <__addsf3x+0x60>
    4112:	59 3f       	cpi	r21, 0xF9	; 249
    4114:	50 f4       	brcc	.+20     	; 0x412a <__addsf3x+0x52>
    4116:	50 3e       	cpi	r21, 0xE0	; 224
    4118:	68 f1       	brcs	.+90     	; 0x4174 <__addsf3x+0x9c>
    411a:	1a 16       	cp	r1, r26
    411c:	f0 40       	sbci	r31, 0x00	; 0
    411e:	a2 2f       	mov	r26, r18
    4120:	23 2f       	mov	r18, r19
    4122:	34 2f       	mov	r19, r20
    4124:	44 27       	eor	r20, r20
    4126:	58 5f       	subi	r21, 0xF8	; 248
    4128:	f3 cf       	rjmp	.-26     	; 0x4110 <__addsf3x+0x38>
    412a:	46 95       	lsr	r20
    412c:	37 95       	ror	r19
    412e:	27 95       	ror	r18
    4130:	a7 95       	ror	r26
    4132:	f0 40       	sbci	r31, 0x00	; 0
    4134:	53 95       	inc	r21
    4136:	c9 f7       	brne	.-14     	; 0x412a <__addsf3x+0x52>
    4138:	7e f4       	brtc	.+30     	; 0x4158 <__addsf3x+0x80>
    413a:	1f 16       	cp	r1, r31
    413c:	ba 0b       	sbc	r27, r26
    413e:	62 0b       	sbc	r22, r18
    4140:	73 0b       	sbc	r23, r19
    4142:	84 0b       	sbc	r24, r20
    4144:	ba f0       	brmi	.+46     	; 0x4174 <__addsf3x+0x9c>
    4146:	91 50       	subi	r25, 0x01	; 1
    4148:	a1 f0       	breq	.+40     	; 0x4172 <__addsf3x+0x9a>
    414a:	ff 0f       	add	r31, r31
    414c:	bb 1f       	adc	r27, r27
    414e:	66 1f       	adc	r22, r22
    4150:	77 1f       	adc	r23, r23
    4152:	88 1f       	adc	r24, r24
    4154:	c2 f7       	brpl	.-16     	; 0x4146 <__addsf3x+0x6e>
    4156:	0e c0       	rjmp	.+28     	; 0x4174 <__addsf3x+0x9c>
    4158:	ba 0f       	add	r27, r26
    415a:	62 1f       	adc	r22, r18
    415c:	73 1f       	adc	r23, r19
    415e:	84 1f       	adc	r24, r20
    4160:	48 f4       	brcc	.+18     	; 0x4174 <__addsf3x+0x9c>
    4162:	87 95       	ror	r24
    4164:	77 95       	ror	r23
    4166:	67 95       	ror	r22
    4168:	b7 95       	ror	r27
    416a:	f7 95       	ror	r31
    416c:	9e 3f       	cpi	r25, 0xFE	; 254
    416e:	08 f0       	brcs	.+2      	; 0x4172 <__addsf3x+0x9a>
    4170:	b0 cf       	rjmp	.-160    	; 0x40d2 <__addsf3+0x28>
    4172:	93 95       	inc	r25
    4174:	88 0f       	add	r24, r24
    4176:	08 f0       	brcs	.+2      	; 0x417a <__addsf3x+0xa2>
    4178:	99 27       	eor	r25, r25
    417a:	ee 0f       	add	r30, r30
    417c:	97 95       	ror	r25
    417e:	87 95       	ror	r24
    4180:	08 95       	ret

00004182 <__divsf3>:
    4182:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__divsf3x>
    4186:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_round>
    418a:	0e 94 b6 21 	call	0x436c	; 0x436c <__fp_pscB>
    418e:	58 f0       	brcs	.+22     	; 0x41a6 <__divsf3+0x24>
    4190:	0e 94 af 21 	call	0x435e	; 0x435e <__fp_pscA>
    4194:	40 f0       	brcs	.+16     	; 0x41a6 <__divsf3+0x24>
    4196:	29 f4       	brne	.+10     	; 0x41a2 <__divsf3+0x20>
    4198:	5f 3f       	cpi	r21, 0xFF	; 255
    419a:	29 f0       	breq	.+10     	; 0x41a6 <__divsf3+0x24>
    419c:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__fp_inf>
    41a0:	51 11       	cpse	r21, r1
    41a2:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__fp_szero>
    41a6:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__fp_nan>

000041aa <__divsf3x>:
    41aa:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_split3>
    41ae:	68 f3       	brcs	.-38     	; 0x418a <__divsf3+0x8>

000041b0 <__divsf3_pse>:
    41b0:	99 23       	and	r25, r25
    41b2:	b1 f3       	breq	.-20     	; 0x41a0 <__divsf3+0x1e>
    41b4:	55 23       	and	r21, r21
    41b6:	91 f3       	breq	.-28     	; 0x419c <__divsf3+0x1a>
    41b8:	95 1b       	sub	r25, r21
    41ba:	55 0b       	sbc	r21, r21
    41bc:	bb 27       	eor	r27, r27
    41be:	aa 27       	eor	r26, r26
    41c0:	62 17       	cp	r22, r18
    41c2:	73 07       	cpc	r23, r19
    41c4:	84 07       	cpc	r24, r20
    41c6:	38 f0       	brcs	.+14     	; 0x41d6 <__divsf3_pse+0x26>
    41c8:	9f 5f       	subi	r25, 0xFF	; 255
    41ca:	5f 4f       	sbci	r21, 0xFF	; 255
    41cc:	22 0f       	add	r18, r18
    41ce:	33 1f       	adc	r19, r19
    41d0:	44 1f       	adc	r20, r20
    41d2:	aa 1f       	adc	r26, r26
    41d4:	a9 f3       	breq	.-22     	; 0x41c0 <__divsf3_pse+0x10>
    41d6:	35 d0       	rcall	.+106    	; 0x4242 <__divsf3_pse+0x92>
    41d8:	0e 2e       	mov	r0, r30
    41da:	3a f0       	brmi	.+14     	; 0x41ea <__divsf3_pse+0x3a>
    41dc:	e0 e8       	ldi	r30, 0x80	; 128
    41de:	32 d0       	rcall	.+100    	; 0x4244 <__divsf3_pse+0x94>
    41e0:	91 50       	subi	r25, 0x01	; 1
    41e2:	50 40       	sbci	r21, 0x00	; 0
    41e4:	e6 95       	lsr	r30
    41e6:	00 1c       	adc	r0, r0
    41e8:	ca f7       	brpl	.-14     	; 0x41dc <__divsf3_pse+0x2c>
    41ea:	2b d0       	rcall	.+86     	; 0x4242 <__divsf3_pse+0x92>
    41ec:	fe 2f       	mov	r31, r30
    41ee:	29 d0       	rcall	.+82     	; 0x4242 <__divsf3_pse+0x92>
    41f0:	66 0f       	add	r22, r22
    41f2:	77 1f       	adc	r23, r23
    41f4:	88 1f       	adc	r24, r24
    41f6:	bb 1f       	adc	r27, r27
    41f8:	26 17       	cp	r18, r22
    41fa:	37 07       	cpc	r19, r23
    41fc:	48 07       	cpc	r20, r24
    41fe:	ab 07       	cpc	r26, r27
    4200:	b0 e8       	ldi	r27, 0x80	; 128
    4202:	09 f0       	breq	.+2      	; 0x4206 <__divsf3_pse+0x56>
    4204:	bb 0b       	sbc	r27, r27
    4206:	80 2d       	mov	r24, r0
    4208:	bf 01       	movw	r22, r30
    420a:	ff 27       	eor	r31, r31
    420c:	93 58       	subi	r25, 0x83	; 131
    420e:	5f 4f       	sbci	r21, 0xFF	; 255
    4210:	3a f0       	brmi	.+14     	; 0x4220 <__divsf3_pse+0x70>
    4212:	9e 3f       	cpi	r25, 0xFE	; 254
    4214:	51 05       	cpc	r21, r1
    4216:	78 f0       	brcs	.+30     	; 0x4236 <__divsf3_pse+0x86>
    4218:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__fp_inf>
    421c:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__fp_szero>
    4220:	5f 3f       	cpi	r21, 0xFF	; 255
    4222:	e4 f3       	brlt	.-8      	; 0x421c <__divsf3_pse+0x6c>
    4224:	98 3e       	cpi	r25, 0xE8	; 232
    4226:	d4 f3       	brlt	.-12     	; 0x421c <__divsf3_pse+0x6c>
    4228:	86 95       	lsr	r24
    422a:	77 95       	ror	r23
    422c:	67 95       	ror	r22
    422e:	b7 95       	ror	r27
    4230:	f7 95       	ror	r31
    4232:	9f 5f       	subi	r25, 0xFF	; 255
    4234:	c9 f7       	brne	.-14     	; 0x4228 <__divsf3_pse+0x78>
    4236:	88 0f       	add	r24, r24
    4238:	91 1d       	adc	r25, r1
    423a:	96 95       	lsr	r25
    423c:	87 95       	ror	r24
    423e:	97 f9       	bld	r25, 7
    4240:	08 95       	ret
    4242:	e1 e0       	ldi	r30, 0x01	; 1
    4244:	66 0f       	add	r22, r22
    4246:	77 1f       	adc	r23, r23
    4248:	88 1f       	adc	r24, r24
    424a:	bb 1f       	adc	r27, r27
    424c:	62 17       	cp	r22, r18
    424e:	73 07       	cpc	r23, r19
    4250:	84 07       	cpc	r24, r20
    4252:	ba 07       	cpc	r27, r26
    4254:	20 f0       	brcs	.+8      	; 0x425e <__divsf3_pse+0xae>
    4256:	62 1b       	sub	r22, r18
    4258:	73 0b       	sbc	r23, r19
    425a:	84 0b       	sbc	r24, r20
    425c:	ba 0b       	sbc	r27, r26
    425e:	ee 1f       	adc	r30, r30
    4260:	88 f7       	brcc	.-30     	; 0x4244 <__divsf3_pse+0x94>
    4262:	e0 95       	com	r30
    4264:	08 95       	ret

00004266 <__fixsfsi>:
    4266:	0e 94 3a 21 	call	0x4274	; 0x4274 <__fixunssfsi>
    426a:	68 94       	set
    426c:	b1 11       	cpse	r27, r1
    426e:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__fp_szero>
    4272:	08 95       	ret

00004274 <__fixunssfsi>:
    4274:	0e 94 d6 21 	call	0x43ac	; 0x43ac <__fp_splitA>
    4278:	88 f0       	brcs	.+34     	; 0x429c <__fixunssfsi+0x28>
    427a:	9f 57       	subi	r25, 0x7F	; 127
    427c:	98 f0       	brcs	.+38     	; 0x42a4 <__fixunssfsi+0x30>
    427e:	b9 2f       	mov	r27, r25
    4280:	99 27       	eor	r25, r25
    4282:	b7 51       	subi	r27, 0x17	; 23
    4284:	b0 f0       	brcs	.+44     	; 0x42b2 <__fixunssfsi+0x3e>
    4286:	e1 f0       	breq	.+56     	; 0x42c0 <__fixunssfsi+0x4c>
    4288:	66 0f       	add	r22, r22
    428a:	77 1f       	adc	r23, r23
    428c:	88 1f       	adc	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	1a f0       	brmi	.+6      	; 0x4298 <__fixunssfsi+0x24>
    4292:	ba 95       	dec	r27
    4294:	c9 f7       	brne	.-14     	; 0x4288 <__fixunssfsi+0x14>
    4296:	14 c0       	rjmp	.+40     	; 0x42c0 <__fixunssfsi+0x4c>
    4298:	b1 30       	cpi	r27, 0x01	; 1
    429a:	91 f0       	breq	.+36     	; 0x42c0 <__fixunssfsi+0x4c>
    429c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__fp_zero>
    42a0:	b1 e0       	ldi	r27, 0x01	; 1
    42a2:	08 95       	ret
    42a4:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__fp_zero>
    42a8:	67 2f       	mov	r22, r23
    42aa:	78 2f       	mov	r23, r24
    42ac:	88 27       	eor	r24, r24
    42ae:	b8 5f       	subi	r27, 0xF8	; 248
    42b0:	39 f0       	breq	.+14     	; 0x42c0 <__fixunssfsi+0x4c>
    42b2:	b9 3f       	cpi	r27, 0xF9	; 249
    42b4:	cc f3       	brlt	.-14     	; 0x42a8 <__fixunssfsi+0x34>
    42b6:	86 95       	lsr	r24
    42b8:	77 95       	ror	r23
    42ba:	67 95       	ror	r22
    42bc:	b3 95       	inc	r27
    42be:	d9 f7       	brne	.-10     	; 0x42b6 <__fixunssfsi+0x42>
    42c0:	3e f4       	brtc	.+14     	; 0x42d0 <__fixunssfsi+0x5c>
    42c2:	90 95       	com	r25
    42c4:	80 95       	com	r24
    42c6:	70 95       	com	r23
    42c8:	61 95       	neg	r22
    42ca:	7f 4f       	sbci	r23, 0xFF	; 255
    42cc:	8f 4f       	sbci	r24, 0xFF	; 255
    42ce:	9f 4f       	sbci	r25, 0xFF	; 255
    42d0:	08 95       	ret

000042d2 <__floatunsisf>:
    42d2:	e8 94       	clt
    42d4:	09 c0       	rjmp	.+18     	; 0x42e8 <__floatsisf+0x12>

000042d6 <__floatsisf>:
    42d6:	97 fb       	bst	r25, 7
    42d8:	3e f4       	brtc	.+14     	; 0x42e8 <__floatsisf+0x12>
    42da:	90 95       	com	r25
    42dc:	80 95       	com	r24
    42de:	70 95       	com	r23
    42e0:	61 95       	neg	r22
    42e2:	7f 4f       	sbci	r23, 0xFF	; 255
    42e4:	8f 4f       	sbci	r24, 0xFF	; 255
    42e6:	9f 4f       	sbci	r25, 0xFF	; 255
    42e8:	99 23       	and	r25, r25
    42ea:	a9 f0       	breq	.+42     	; 0x4316 <__floatsisf+0x40>
    42ec:	f9 2f       	mov	r31, r25
    42ee:	96 e9       	ldi	r25, 0x96	; 150
    42f0:	bb 27       	eor	r27, r27
    42f2:	93 95       	inc	r25
    42f4:	f6 95       	lsr	r31
    42f6:	87 95       	ror	r24
    42f8:	77 95       	ror	r23
    42fa:	67 95       	ror	r22
    42fc:	b7 95       	ror	r27
    42fe:	f1 11       	cpse	r31, r1
    4300:	f8 cf       	rjmp	.-16     	; 0x42f2 <__floatsisf+0x1c>
    4302:	fa f4       	brpl	.+62     	; 0x4342 <__floatsisf+0x6c>
    4304:	bb 0f       	add	r27, r27
    4306:	11 f4       	brne	.+4      	; 0x430c <__floatsisf+0x36>
    4308:	60 ff       	sbrs	r22, 0
    430a:	1b c0       	rjmp	.+54     	; 0x4342 <__floatsisf+0x6c>
    430c:	6f 5f       	subi	r22, 0xFF	; 255
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	8f 4f       	sbci	r24, 0xFF	; 255
    4312:	9f 4f       	sbci	r25, 0xFF	; 255
    4314:	16 c0       	rjmp	.+44     	; 0x4342 <__floatsisf+0x6c>
    4316:	88 23       	and	r24, r24
    4318:	11 f0       	breq	.+4      	; 0x431e <__floatsisf+0x48>
    431a:	96 e9       	ldi	r25, 0x96	; 150
    431c:	11 c0       	rjmp	.+34     	; 0x4340 <__floatsisf+0x6a>
    431e:	77 23       	and	r23, r23
    4320:	21 f0       	breq	.+8      	; 0x432a <__floatsisf+0x54>
    4322:	9e e8       	ldi	r25, 0x8E	; 142
    4324:	87 2f       	mov	r24, r23
    4326:	76 2f       	mov	r23, r22
    4328:	05 c0       	rjmp	.+10     	; 0x4334 <__floatsisf+0x5e>
    432a:	66 23       	and	r22, r22
    432c:	71 f0       	breq	.+28     	; 0x434a <__floatsisf+0x74>
    432e:	96 e8       	ldi	r25, 0x86	; 134
    4330:	86 2f       	mov	r24, r22
    4332:	70 e0       	ldi	r23, 0x00	; 0
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	2a f0       	brmi	.+10     	; 0x4342 <__floatsisf+0x6c>
    4338:	9a 95       	dec	r25
    433a:	66 0f       	add	r22, r22
    433c:	77 1f       	adc	r23, r23
    433e:	88 1f       	adc	r24, r24
    4340:	da f7       	brpl	.-10     	; 0x4338 <__floatsisf+0x62>
    4342:	88 0f       	add	r24, r24
    4344:	96 95       	lsr	r25
    4346:	87 95       	ror	r24
    4348:	97 f9       	bld	r25, 7
    434a:	08 95       	ret

0000434c <__fp_inf>:
    434c:	97 f9       	bld	r25, 7
    434e:	9f 67       	ori	r25, 0x7F	; 127
    4350:	80 e8       	ldi	r24, 0x80	; 128
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	08 95       	ret

00004358 <__fp_nan>:
    4358:	9f ef       	ldi	r25, 0xFF	; 255
    435a:	80 ec       	ldi	r24, 0xC0	; 192
    435c:	08 95       	ret

0000435e <__fp_pscA>:
    435e:	00 24       	eor	r0, r0
    4360:	0a 94       	dec	r0
    4362:	16 16       	cp	r1, r22
    4364:	17 06       	cpc	r1, r23
    4366:	18 06       	cpc	r1, r24
    4368:	09 06       	cpc	r0, r25
    436a:	08 95       	ret

0000436c <__fp_pscB>:
    436c:	00 24       	eor	r0, r0
    436e:	0a 94       	dec	r0
    4370:	12 16       	cp	r1, r18
    4372:	13 06       	cpc	r1, r19
    4374:	14 06       	cpc	r1, r20
    4376:	05 06       	cpc	r0, r21
    4378:	08 95       	ret

0000437a <__fp_round>:
    437a:	09 2e       	mov	r0, r25
    437c:	03 94       	inc	r0
    437e:	00 0c       	add	r0, r0
    4380:	11 f4       	brne	.+4      	; 0x4386 <__fp_round+0xc>
    4382:	88 23       	and	r24, r24
    4384:	52 f0       	brmi	.+20     	; 0x439a <__fp_round+0x20>
    4386:	bb 0f       	add	r27, r27
    4388:	40 f4       	brcc	.+16     	; 0x439a <__fp_round+0x20>
    438a:	bf 2b       	or	r27, r31
    438c:	11 f4       	brne	.+4      	; 0x4392 <__fp_round+0x18>
    438e:	60 ff       	sbrs	r22, 0
    4390:	04 c0       	rjmp	.+8      	; 0x439a <__fp_round+0x20>
    4392:	6f 5f       	subi	r22, 0xFF	; 255
    4394:	7f 4f       	sbci	r23, 0xFF	; 255
    4396:	8f 4f       	sbci	r24, 0xFF	; 255
    4398:	9f 4f       	sbci	r25, 0xFF	; 255
    439a:	08 95       	ret

0000439c <__fp_split3>:
    439c:	57 fd       	sbrc	r21, 7
    439e:	90 58       	subi	r25, 0x80	; 128
    43a0:	44 0f       	add	r20, r20
    43a2:	55 1f       	adc	r21, r21
    43a4:	59 f0       	breq	.+22     	; 0x43bc <__fp_splitA+0x10>
    43a6:	5f 3f       	cpi	r21, 0xFF	; 255
    43a8:	71 f0       	breq	.+28     	; 0x43c6 <__fp_splitA+0x1a>
    43aa:	47 95       	ror	r20

000043ac <__fp_splitA>:
    43ac:	88 0f       	add	r24, r24
    43ae:	97 fb       	bst	r25, 7
    43b0:	99 1f       	adc	r25, r25
    43b2:	61 f0       	breq	.+24     	; 0x43cc <__fp_splitA+0x20>
    43b4:	9f 3f       	cpi	r25, 0xFF	; 255
    43b6:	79 f0       	breq	.+30     	; 0x43d6 <__fp_splitA+0x2a>
    43b8:	87 95       	ror	r24
    43ba:	08 95       	ret
    43bc:	12 16       	cp	r1, r18
    43be:	13 06       	cpc	r1, r19
    43c0:	14 06       	cpc	r1, r20
    43c2:	55 1f       	adc	r21, r21
    43c4:	f2 cf       	rjmp	.-28     	; 0x43aa <__fp_split3+0xe>
    43c6:	46 95       	lsr	r20
    43c8:	f1 df       	rcall	.-30     	; 0x43ac <__fp_splitA>
    43ca:	08 c0       	rjmp	.+16     	; 0x43dc <__fp_splitA+0x30>
    43cc:	16 16       	cp	r1, r22
    43ce:	17 06       	cpc	r1, r23
    43d0:	18 06       	cpc	r1, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	f1 cf       	rjmp	.-30     	; 0x43b8 <__fp_splitA+0xc>
    43d6:	86 95       	lsr	r24
    43d8:	71 05       	cpc	r23, r1
    43da:	61 05       	cpc	r22, r1
    43dc:	08 94       	sec
    43de:	08 95       	ret

000043e0 <__fp_zero>:
    43e0:	e8 94       	clt

000043e2 <__fp_szero>:
    43e2:	bb 27       	eor	r27, r27
    43e4:	66 27       	eor	r22, r22
    43e6:	77 27       	eor	r23, r23
    43e8:	cb 01       	movw	r24, r22
    43ea:	97 f9       	bld	r25, 7
    43ec:	08 95       	ret

000043ee <__mulsf3>:
    43ee:	0e 94 0a 22 	call	0x4414	; 0x4414 <__mulsf3x>
    43f2:	0c 94 bd 21 	jmp	0x437a	; 0x437a <__fp_round>
    43f6:	0e 94 af 21 	call	0x435e	; 0x435e <__fp_pscA>
    43fa:	38 f0       	brcs	.+14     	; 0x440a <__mulsf3+0x1c>
    43fc:	0e 94 b6 21 	call	0x436c	; 0x436c <__fp_pscB>
    4400:	20 f0       	brcs	.+8      	; 0x440a <__mulsf3+0x1c>
    4402:	95 23       	and	r25, r21
    4404:	11 f0       	breq	.+4      	; 0x440a <__mulsf3+0x1c>
    4406:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__fp_inf>
    440a:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__fp_nan>
    440e:	11 24       	eor	r1, r1
    4410:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__fp_szero>

00004414 <__mulsf3x>:
    4414:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_split3>
    4418:	70 f3       	brcs	.-36     	; 0x43f6 <__mulsf3+0x8>

0000441a <__mulsf3_pse>:
    441a:	95 9f       	mul	r25, r21
    441c:	c1 f3       	breq	.-16     	; 0x440e <__mulsf3+0x20>
    441e:	95 0f       	add	r25, r21
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	55 1f       	adc	r21, r21
    4424:	62 9f       	mul	r22, r18
    4426:	f0 01       	movw	r30, r0
    4428:	72 9f       	mul	r23, r18
    442a:	bb 27       	eor	r27, r27
    442c:	f0 0d       	add	r31, r0
    442e:	b1 1d       	adc	r27, r1
    4430:	63 9f       	mul	r22, r19
    4432:	aa 27       	eor	r26, r26
    4434:	f0 0d       	add	r31, r0
    4436:	b1 1d       	adc	r27, r1
    4438:	aa 1f       	adc	r26, r26
    443a:	64 9f       	mul	r22, r20
    443c:	66 27       	eor	r22, r22
    443e:	b0 0d       	add	r27, r0
    4440:	a1 1d       	adc	r26, r1
    4442:	66 1f       	adc	r22, r22
    4444:	82 9f       	mul	r24, r18
    4446:	22 27       	eor	r18, r18
    4448:	b0 0d       	add	r27, r0
    444a:	a1 1d       	adc	r26, r1
    444c:	62 1f       	adc	r22, r18
    444e:	73 9f       	mul	r23, r19
    4450:	b0 0d       	add	r27, r0
    4452:	a1 1d       	adc	r26, r1
    4454:	62 1f       	adc	r22, r18
    4456:	83 9f       	mul	r24, r19
    4458:	a0 0d       	add	r26, r0
    445a:	61 1d       	adc	r22, r1
    445c:	22 1f       	adc	r18, r18
    445e:	74 9f       	mul	r23, r20
    4460:	33 27       	eor	r19, r19
    4462:	a0 0d       	add	r26, r0
    4464:	61 1d       	adc	r22, r1
    4466:	23 1f       	adc	r18, r19
    4468:	84 9f       	mul	r24, r20
    446a:	60 0d       	add	r22, r0
    446c:	21 1d       	adc	r18, r1
    446e:	82 2f       	mov	r24, r18
    4470:	76 2f       	mov	r23, r22
    4472:	6a 2f       	mov	r22, r26
    4474:	11 24       	eor	r1, r1
    4476:	9f 57       	subi	r25, 0x7F	; 127
    4478:	50 40       	sbci	r21, 0x00	; 0
    447a:	9a f0       	brmi	.+38     	; 0x44a2 <__mulsf3_pse+0x88>
    447c:	f1 f0       	breq	.+60     	; 0x44ba <__mulsf3_pse+0xa0>
    447e:	88 23       	and	r24, r24
    4480:	4a f0       	brmi	.+18     	; 0x4494 <__mulsf3_pse+0x7a>
    4482:	ee 0f       	add	r30, r30
    4484:	ff 1f       	adc	r31, r31
    4486:	bb 1f       	adc	r27, r27
    4488:	66 1f       	adc	r22, r22
    448a:	77 1f       	adc	r23, r23
    448c:	88 1f       	adc	r24, r24
    448e:	91 50       	subi	r25, 0x01	; 1
    4490:	50 40       	sbci	r21, 0x00	; 0
    4492:	a9 f7       	brne	.-22     	; 0x447e <__mulsf3_pse+0x64>
    4494:	9e 3f       	cpi	r25, 0xFE	; 254
    4496:	51 05       	cpc	r21, r1
    4498:	80 f0       	brcs	.+32     	; 0x44ba <__mulsf3_pse+0xa0>
    449a:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__fp_inf>
    449e:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__fp_szero>
    44a2:	5f 3f       	cpi	r21, 0xFF	; 255
    44a4:	e4 f3       	brlt	.-8      	; 0x449e <__mulsf3_pse+0x84>
    44a6:	98 3e       	cpi	r25, 0xE8	; 232
    44a8:	d4 f3       	brlt	.-12     	; 0x449e <__mulsf3_pse+0x84>
    44aa:	86 95       	lsr	r24
    44ac:	77 95       	ror	r23
    44ae:	67 95       	ror	r22
    44b0:	b7 95       	ror	r27
    44b2:	f7 95       	ror	r31
    44b4:	e7 95       	ror	r30
    44b6:	9f 5f       	subi	r25, 0xFF	; 255
    44b8:	c1 f7       	brne	.-16     	; 0x44aa <__mulsf3_pse+0x90>
    44ba:	fe 2b       	or	r31, r30
    44bc:	88 0f       	add	r24, r24
    44be:	91 1d       	adc	r25, r1
    44c0:	96 95       	lsr	r25
    44c2:	87 95       	ror	r24
    44c4:	97 f9       	bld	r25, 7
    44c6:	08 95       	ret

000044c8 <__mulsi3>:
    44c8:	db 01       	movw	r26, r22
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	0e 94 91 22 	call	0x4522	; 0x4522 <__muluhisi3>
    44d2:	bf 91       	pop	r27
    44d4:	af 91       	pop	r26
    44d6:	a2 9f       	mul	r26, r18
    44d8:	80 0d       	add	r24, r0
    44da:	91 1d       	adc	r25, r1
    44dc:	a3 9f       	mul	r26, r19
    44de:	90 0d       	add	r25, r0
    44e0:	b2 9f       	mul	r27, r18
    44e2:	90 0d       	add	r25, r0
    44e4:	11 24       	eor	r1, r1
    44e6:	08 95       	ret

000044e8 <__divmodhi4>:
    44e8:	97 fb       	bst	r25, 7
    44ea:	07 2e       	mov	r0, r23
    44ec:	16 f4       	brtc	.+4      	; 0x44f2 <__divmodhi4+0xa>
    44ee:	00 94       	com	r0
    44f0:	07 d0       	rcall	.+14     	; 0x4500 <__divmodhi4_neg1>
    44f2:	77 fd       	sbrc	r23, 7
    44f4:	09 d0       	rcall	.+18     	; 0x4508 <__divmodhi4_neg2>
    44f6:	0e 94 9c 22 	call	0x4538	; 0x4538 <__udivmodhi4>
    44fa:	07 fc       	sbrc	r0, 7
    44fc:	05 d0       	rcall	.+10     	; 0x4508 <__divmodhi4_neg2>
    44fe:	3e f4       	brtc	.+14     	; 0x450e <__divmodhi4_exit>

00004500 <__divmodhi4_neg1>:
    4500:	90 95       	com	r25
    4502:	81 95       	neg	r24
    4504:	9f 4f       	sbci	r25, 0xFF	; 255
    4506:	08 95       	ret

00004508 <__divmodhi4_neg2>:
    4508:	70 95       	com	r23
    450a:	61 95       	neg	r22
    450c:	7f 4f       	sbci	r23, 0xFF	; 255

0000450e <__divmodhi4_exit>:
    450e:	08 95       	ret

00004510 <__tablejump2__>:
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	88 1f       	adc	r24, r24
    4516:	8b bf       	out	0x3b, r24	; 59
    4518:	07 90       	elpm	r0, Z+
    451a:	f6 91       	elpm	r31, Z
    451c:	e0 2d       	mov	r30, r0
    451e:	1b be       	out	0x3b, r1	; 59
    4520:	19 94       	eijmp

00004522 <__muluhisi3>:
    4522:	0e 94 b0 22 	call	0x4560	; 0x4560 <__umulhisi3>
    4526:	a5 9f       	mul	r26, r21
    4528:	90 0d       	add	r25, r0
    452a:	b4 9f       	mul	r27, r20
    452c:	90 0d       	add	r25, r0
    452e:	a4 9f       	mul	r26, r20
    4530:	80 0d       	add	r24, r0
    4532:	91 1d       	adc	r25, r1
    4534:	11 24       	eor	r1, r1
    4536:	08 95       	ret

00004538 <__udivmodhi4>:
    4538:	aa 1b       	sub	r26, r26
    453a:	bb 1b       	sub	r27, r27
    453c:	51 e1       	ldi	r21, 0x11	; 17
    453e:	07 c0       	rjmp	.+14     	; 0x454e <__udivmodhi4_ep>

00004540 <__udivmodhi4_loop>:
    4540:	aa 1f       	adc	r26, r26
    4542:	bb 1f       	adc	r27, r27
    4544:	a6 17       	cp	r26, r22
    4546:	b7 07       	cpc	r27, r23
    4548:	10 f0       	brcs	.+4      	; 0x454e <__udivmodhi4_ep>
    454a:	a6 1b       	sub	r26, r22
    454c:	b7 0b       	sbc	r27, r23

0000454e <__udivmodhi4_ep>:
    454e:	88 1f       	adc	r24, r24
    4550:	99 1f       	adc	r25, r25
    4552:	5a 95       	dec	r21
    4554:	a9 f7       	brne	.-22     	; 0x4540 <__udivmodhi4_loop>
    4556:	80 95       	com	r24
    4558:	90 95       	com	r25
    455a:	bc 01       	movw	r22, r24
    455c:	cd 01       	movw	r24, r26
    455e:	08 95       	ret

00004560 <__umulhisi3>:
    4560:	a2 9f       	mul	r26, r18
    4562:	b0 01       	movw	r22, r0
    4564:	b3 9f       	mul	r27, r19
    4566:	c0 01       	movw	r24, r0
    4568:	a3 9f       	mul	r26, r19
    456a:	70 0d       	add	r23, r0
    456c:	81 1d       	adc	r24, r1
    456e:	11 24       	eor	r1, r1
    4570:	91 1d       	adc	r25, r1
    4572:	b2 9f       	mul	r27, r18
    4574:	70 0d       	add	r23, r0
    4576:	81 1d       	adc	r24, r1
    4578:	11 24       	eor	r1, r1
    457a:	91 1d       	adc	r25, r1
    457c:	08 95       	ret

0000457e <_exit>:
    457e:	f8 94       	cli

00004580 <__stop_program>:
    4580:	ff cf       	rjmp	.-2      	; 0x4580 <__stop_program>
