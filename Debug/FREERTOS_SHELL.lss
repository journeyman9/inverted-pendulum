
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  000040b6  0000414a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010b4  008020de  008020de  00004228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00009657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000c541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  0001111e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00013666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      64:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_25>
      68:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      6c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      70:	0c 94 be 12 	jmp	0x257c	; 0x257c <__vector_28>
      74:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      78:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      7c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      80:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      84:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      88:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      8c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      90:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      94:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      98:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      9c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c4:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__vector_49>
      c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e8:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_58>
      ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     100:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     104:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     108:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     10c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     110:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     114:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     118:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     11c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     120:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     124:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     128:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     12c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     130:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     134:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     138:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     13c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     140:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     144:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     148:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     14c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     150:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     154:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     158:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     15c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     160:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_88>
     164:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     168:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     16c:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_91>
     170:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     174:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     178:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     17c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     180:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     184:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     188:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     18c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     190:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     194:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     198:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     19c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1fc:	e0 05       	cpc	r30, r0
     1fe:	e3 05       	cpc	r30, r3
     200:	e6 05       	cpc	r30, r6
     202:	e9 05       	cpc	r30, r9
     204:	ec 05       	cpc	r30, r12
     206:	ef 05       	cpc	r30, r15
     208:	f1 05       	cpc	r31, r1
     20a:	02 06       	cpc	r0, r18
     20c:	0a 06       	cpc	r0, r26
     20e:	14 06       	cpc	r1, r20
     210:	12 06       	cpc	r1, r18
     212:	d7 0b       	sbc	r29, r23
     214:	58 0c       	add	r5, r8
     216:	58 0c       	add	r5, r8
     218:	58 0c       	add	r5, r8
     21a:	58 0c       	add	r5, r8
     21c:	58 0c       	add	r5, r8
     21e:	58 0c       	add	r5, r8
     220:	58 0c       	add	r5, r8
     222:	58 0c       	add	r5, r8
     224:	58 0c       	add	r5, r8
     226:	58 0c       	add	r5, r8
     228:	58 0c       	add	r5, r8
     22a:	58 0c       	add	r5, r8
     22c:	58 0c       	add	r5, r8
     22e:	58 0c       	add	r5, r8
     230:	58 0c       	add	r5, r8
     232:	58 0c       	add	r5, r8
     234:	58 0c       	add	r5, r8
     236:	58 0c       	add	r5, r8
     238:	58 0c       	add	r5, r8
     23a:	58 0c       	add	r5, r8
     23c:	58 0c       	add	r5, r8
     23e:	58 0c       	add	r5, r8
     240:	58 0c       	add	r5, r8
     242:	58 0c       	add	r5, r8
     244:	58 0c       	add	r5, r8
     246:	58 0c       	add	r5, r8
     248:	58 0c       	add	r5, r8
     24a:	58 0c       	add	r5, r8
     24c:	58 0c       	add	r5, r8
     24e:	58 0c       	add	r5, r8
     250:	58 0c       	add	r5, r8
     252:	58 0c       	add	r5, r8
     254:	58 0c       	add	r5, r8
     256:	58 0c       	add	r5, r8
     258:	58 0c       	add	r5, r8
     25a:	58 0c       	add	r5, r8
     25c:	58 0c       	add	r5, r8
     25e:	58 0c       	add	r5, r8
     260:	58 0c       	add	r5, r8
     262:	58 0c       	add	r5, r8
     264:	58 0c       	add	r5, r8
     266:	58 0c       	add	r5, r8
     268:	58 0c       	add	r5, r8
     26a:	58 0c       	add	r5, r8
     26c:	58 0c       	add	r5, r8
     26e:	58 0c       	add	r5, r8
     270:	58 0c       	add	r5, r8
     272:	58 0c       	add	r5, r8
     274:	58 0c       	add	r5, r8
     276:	58 0c       	add	r5, r8
     278:	58 0c       	add	r5, r8
     27a:	58 0c       	add	r5, r8
     27c:	58 0c       	add	r5, r8
     27e:	58 0c       	add	r5, r8
     280:	58 0c       	add	r5, r8
     282:	58 0c       	add	r5, r8
     284:	58 0c       	add	r5, r8
     286:	58 0c       	add	r5, r8
     288:	58 0c       	add	r5, r8
     28a:	58 0c       	add	r5, r8
     28c:	58 0c       	add	r5, r8
     28e:	58 0c       	add	r5, r8
     290:	58 0c       	add	r5, r8
     292:	58 0c       	add	r5, r8
     294:	58 0c       	add	r5, r8
     296:	58 0c       	add	r5, r8
     298:	58 0c       	add	r5, r8
     29a:	58 0c       	add	r5, r8
     29c:	58 0c       	add	r5, r8
     29e:	58 0c       	add	r5, r8
     2a0:	ec 0b       	sbc	r30, r28
     2a2:	58 0c       	add	r5, r8
     2a4:	22 0c       	add	r2, r2
     2a6:	d7 0b       	sbc	r29, r23
     2a8:	58 0c       	add	r5, r8
     2aa:	08 0c       	add	r0, r8
     2ac:	d3 0b       	sbc	r29, r19
     2ae:	58 0c       	add	r5, r8
     2b0:	58 0c       	add	r5, r8
     2b2:	58 0c       	add	r5, r8
     2b4:	58 0c       	add	r5, r8
     2b6:	58 0c       	add	r5, r8
     2b8:	94 0a       	sbc	r9, r20
     2ba:	58 0c       	add	r5, r8
     2bc:	58 0c       	add	r5, r8
     2be:	58 0c       	add	r5, r8
     2c0:	3e 0c       	add	r3, r14
     2c2:	99 0b       	sbc	r25, r25
     2c4:	58 0c       	add	r5, r8
     2c6:	58 0c       	add	r5, r8
     2c8:	a2 0a       	sbc	r10, r18

000002ca <__trampolines_start>:
     2ca:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2ce:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_ZN8emstreamlsE15ser_manipulator+0x3c>
     2d2:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_ZN5rs2327putcharEc>
     2d6:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_ZN8emstreamlsE15ser_manipulator+0x36>
     2da:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <_ZN5rs23212clear_screenEv>
     2de:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_ZN8emstreamlsE15ser_manipulator+0x2a>
     2e2:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN8emstream12transmit_nowEv>
     2e6:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
     2ea:	0c 94 16 04 	jmp	0x82c	; 0x82c <_ZN21task_pendulum_encoder3runEv>
     2ee:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN8emstream13ready_to_sendEv>
     2f2:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_ZN18task_motor_encoder3runEv>
     2f6:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_ZN17task_limit_switch3runEv>
     2fa:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN8emstream7getcharEv>
     2fe:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_ZN9task_user3runEv+0x186>
     302:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_ZN5rs23214check_for_charEv>
     306:	0c 94 07 04 	jmp	0x80e	; 0x80e <_call_static_run_method>
     30a:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <_ZN9task_user3runEv+0x486>
     30e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN8emstream14check_for_charEv>
     312:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN14frt_text_queue7putcharEc>
     316:	0c 94 df 09 	jmp	0x13be	; 0x13be <_ZN9task_user3runEv>
     31a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     31e:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_ZN5rs2327getcharEv>
     322:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <_ZN9task_user3runEv+0x41a>
     326:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__cxa_pure_virtual>
     32a:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_ZN8emstreamlsE15ser_manipulator+0x40>
     32e:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
     332:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     336:	0c 94 21 08 	jmp	0x1042	; 0x1042 <_ZN8frt_task12print_statusER8emstream>
     33a:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <_ZN9task_user3runEv+0x452>
     33e:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <_ZN22task_system_controller3runEv>
     342:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <_ZN9task_user3runEv+0x16a>
     346:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <_ZN9task_user3runEv+0x3f0>
     34a:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN18task_motor_command3runEv>
     34e:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_ZN9task_user3runEv+0x4be>
     352:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <_ZN9task_user3runEv+0x374>
     356:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_ZN8emstreamlsE15ser_manipulator+0x62>
     35a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_ZN8emstreamlsE15ser_manipulator+0x24>
     35e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_ZN8emstreamlsE15ser_manipulator+0x72>
     362:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_ZN8emstreamlsE15ser_manipulator+0x30>
     366:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <_ZN9task_user3runEv+0x4f2>
     36a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN8emstream12clear_screenEv>
     36e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <_GLOBAL__sub_I_counter>
     372:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_ZN9task_user3runEv+0x3e8>
     376:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <prvIdleTask>

0000037a <__trampolines_end>:
     37a:	09 09       	sbc	r16, r9
	...

0000037d <_ZZ15print_task_listP8emstreamE3__c_8>:
     37d:	2f 00                                               /.

0000037f <_ZZ15print_task_listP8emstreamE3__c_7>:
     37f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000038a <_ZZ15print_task_listP8emstreamE3__c_6>:
     38a:	09 2d 2d 2d 2d 00                                   .----.

00000390 <_ZZ15print_task_listP8emstreamE3__c_5>:
     390:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000039c <_ZZ15print_task_listP8emstreamE3__c_4>:
     39c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000003ad <_ZZ15print_task_listP8emstreamE3__c_3>:
     3ad:	09 52 75 6e 73 00                                   .Runs.

000003b3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     3b3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000003bf <_ZZ15print_task_listP8emstreamE3__c_1>:
     3bf:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000003d0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     3d0:	09 53 74 61 63 6b 00                                .Stack.

000003d7 <_ZZ15print_task_listP8emstreamE3__c>:
     3d7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000003e2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3e2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003ed <_ZZN9task_user11show_statusEvE3__c_3>:
     3ed:	2f 00                                               /.

000003ef <_ZZN9task_user11show_statusEvE3__c_2>:
     3ef:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003fd <_ZZN9task_user11show_statusEvE3__c_1>:
     3fd:	54 69 6d 65 3a 20 00                                Time: .

00000404 <_ZZN9task_user11show_statusEvE3__c_0>:
     404:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000410 <_ZZN9task_user11show_statusEvE3__c>:
     410:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     420:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000042f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     42f:	1b 5b 32 32 6d 00                                   .[22m.

00000435 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     435:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000440 <_ZZ17print_task_stacksP8emstreamE3__c>:
     440:	1b 5b 31 6d 00                                      .[1m.

00000445 <_ZZN9task_user3runEvE3__c_7>:
     445:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     455:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000462 <_ZZN9task_user3runEvE3__c_6>:
     462:	3a 57 54 46 3f 00                                   :WTF?.

00000468 <_ZZN9task_user3runEvE3__c_5>:
     468:	52 65 73 65 74 2c 20 74 72 79 20 48 6f 6d 69 6e     Reset, try Homin
     478:	67 20 61 67 61 69 6e 20 62 79 20 70 72 65 73 73     g again by press
     488:	69 6e 67 20 27 62 27 00                             ing 'b'.

00000490 <_ZZN9task_user3runEvE3__c_4>:
     490:	45 4d 45 52 47 45 4e 43 59 20 53 54 4f 50 00        EMERGENCY STOP.

0000049f <_ZZN9task_user3runEvE3__c_3>:
     49f:	43 6f 6d 6d 65 6e 63 65 20 42 61 6c 61 6e 63 65     Commence Balance
	...

000004b0 <_ZZN9task_user3runEvE3__c_2>:
     4b0:	42 65 67 69 6e 20 48 6f 6d 69 6e 67 00              Begin Homing.

000004bd <_ZZN9task_user3runEvE3__c_1>:
     4bd:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4cd:	65 00                                               e.

000004cf <_ZZN9task_user3runEvE3__c_0>:
     4cf:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004dd <_ZZN9task_user3runEvE3__c>:
     4dd:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ed:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004fb <_ZZN9task_user18print_help_messageEvE3__c_14>:
     4fb:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_13>:
     50a:	20 20 20 20 72 3a 20 20 20 52 65 73 65 74 20 74         r:   Reset t
     51a:	6f 20 49 64 6c 65 00                                o Idle.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_12>:
     521:	20 20 20 20 64 3a 20 20 20 45 6d 65 72 67 65 6e         d:   Emergen
     531:	63 79 20 53 74 6f 70 00                             cy Stop.

00000539 <_ZZN9task_user18print_help_messageEvE3__c_11>:
     539:	20 20 20 20 67 3a 20 20 20 53 74 61 72 74 20 42         g:   Start B
     549:	61 6c 61 6e 63 65 21 00                             alance!.

00000551 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     551:	20 20 20 20 62 3a 20 20 20 42 65 67 69 6e 20 43         b:   Begin C
     561:	61 6c 69 62 72 61 74 69 6f 6e 00                    alibration.

0000056c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     56c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     57c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000587 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     587:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     597:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005a5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5a5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5b5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5c5:	6d 61 74 69 6f 6e 00                                mation.

000005cc <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5cc:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5dc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000005ed <_ZZN9task_user18print_help_messageEvE3__c_5>:
     5ed:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     5fd:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000605 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     605:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     615:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000621 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     621:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     631:	68 65 20 41 56 52 00                                he AVR.

00000638 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     638:	20 68 65 6c 70 00                                    help.

0000063e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     63e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     64e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000065d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     65d:	1b 5b 33 30 6d 00                                   .[30m.

00000663 <_ZZN9task_user18print_help_messageEvE3__c>:
     663:	1b 5b 34 36 6d 00                                   .[46m.

00000669 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     669:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     679:	61 73 6b 20 00                                      ask .

0000067e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     67e:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

0000068c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     68c:	20 63 72 65 61 74 65 64 00                           created.

00000695 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     695:	54 61 73 6b 20 00                                   Task .

0000069b <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     69b:	1b 5b 32 32 6d 00                                   .[22m.

000006a1 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     6a1:	54 61 73 6b 3a 20 00                                Task: .

000006a8 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     6a8:	1b 5b 31 6d 00                                      .[1m.

000006ad <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     6ad:	09 00                                               ..

000006af <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     6af:	09 00                                               ..

000006b1 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     6b1:	2f 00                                               /.

000006b3 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     6b3:	09 00                                               ..

000006b5 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     6b5:	09 00                                               ..

000006b7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     6b7:	1b 5b 32 32 6d 00                                   .[22m.

000006bd <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     6bd:	1b 5b 31 6d 00                                      .[1m.

000006c2 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     6c2:	1b 5b 31 6d 00                                      .[1m.

000006c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     6c7:	20 20 00                                              .

000006ca <__ctors_start>:
     6ca:	b7 0f       	add	r27, r23

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf ef       	ldi	r28, 0xFF	; 255
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df e3       	ldi	r29, 0x3F	; 63
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	0c bf       	out	0x3c, r16	; 60
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	19 be       	out	0x39, r1	; 57
     6e0:	1a be       	out	0x3a, r1	; 58
     6e2:	1b be       	out	0x3b, r1	; 59

000006e4 <__do_copy_data>:
     6e4:	10 e2       	ldi	r17, 0x20	; 32
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e2       	ldi	r27, 0x20	; 32
     6ea:	e6 eb       	ldi	r30, 0xB6	; 182
     6ec:	f0 e4       	ldi	r31, 0x40	; 64
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	ae 3d       	cpi	r26, 0xDE	; 222
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>
     6fe:	1b be       	out	0x3b, r1	; 59

00000700 <__do_clear_bss>:
     700:	21 e3       	ldi	r18, 0x31	; 49
     702:	ae ed       	ldi	r26, 0xDE	; 222
     704:	b0 e2       	ldi	r27, 0x20	; 32
     706:	01 c0       	rjmp	.+2      	; 0x70a <.do_clear_bss_start>

00000708 <.do_clear_bss_loop>:
     708:	1d 92       	st	X+, r1

0000070a <.do_clear_bss_start>:
     70a:	a2 39       	cpi	r26, 0x92	; 146
     70c:	b2 07       	cpc	r27, r18
     70e:	e1 f7       	brne	.-8      	; 0x708 <.do_clear_bss_loop>

00000710 <__do_global_ctors>:
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c6 e6       	ldi	r28, 0x66	; 102
     714:	d3 e0       	ldi	r29, 0x03	; 3
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	06 c0       	rjmp	.+12     	; 0x726 <__do_global_ctors+0x16>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	01 09       	sbc	r16, r1
     71e:	80 2f       	mov	r24, r16
     720:	fe 01       	movw	r30, r28
     722:	0e 94 22 20 	call	0x4044	; 0x4044 <__tablejump2__>
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	d1 07       	cpc	r29, r17
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 07       	cpc	r16, r24
     72e:	a9 f7       	brne	.-22     	; 0x71a <__do_global_ctors+0xa>
     730:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
     734:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN8emstream12clear_screenEv>:
     73c:	08 95       	ret

0000073e <_ZN8emstream12transmit_nowEv>:
     73e:	08 95       	ret

00000740 <_ZN8emstream14check_for_charEv>:
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret

00000744 <_ZN8emstream7getcharEv>:
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <_ZN8emstream13ready_to_sendEv>:
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <__cxa_pure_virtual>:
     74e:	08 95       	ret

00000750 <_ZN10time_stamp10set_to_nowEv>:
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	0f 92       	push	r0
     75c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     760:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     764:	8c 83       	std	Y+4, r24	; 0x04
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
     76c:	68 83       	st	Y, r22
     76e:	79 83       	std	Y+1, r23	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	ce 01       	movw	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZN14frt_text_queue7getcharEv>:
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	3f ef       	ldi	r19, 0xFF	; 255
     792:	a9 01       	movw	r20, r18
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	80 85       	ldd	r24, Z+8	; 0x08
     79e:	91 85       	ldd	r25, Z+9	; 0x09
     7a0:	0e 94 a9 18 	call	0x3152	; 0x3152 <xQueueGenericReceive>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	19 f4       	brne	.+6      	; 0x7ae <_ZN14frt_text_queue7getcharEv+0x2e>
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <_ZN14frt_text_queue7getcharEv+0x32>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <_ZN14frt_text_queue14check_for_charEv>:
     7bc:	fc 01       	movw	r30, r24
     7be:	80 85       	ldd	r24, Z+8	; 0x08
     7c0:	91 85       	ldd	r25, Z+9	; 0x09
     7c2:	0e 94 6d 19 	call	0x32da	; 0x32da <uxQueueMessagesWaiting>
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_ZN14frt_text_queue14check_for_charEv+0x12>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	89 2f       	mov	r24, r25
     7d0:	08 95       	ret

000007d2 <_ZN14frt_text_queue7putcharEc>:
     7d2:	0f 93       	push	r16
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	69 83       	std	Y+1, r22	; 0x01
     7e0:	fc 01       	movw	r30, r24
     7e2:	22 85       	ldd	r18, Z+10	; 0x0a
     7e4:	33 85       	ldd	r19, Z+11	; 0x0b
     7e6:	44 85       	ldd	r20, Z+12	; 0x0c
     7e8:	55 85       	ldd	r21, Z+13	; 0x0d
     7ea:	00 e0       	ldi	r16, 0x00	; 0
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 85       	ldd	r24, Z+8	; 0x08
     7f4:	91 85       	ldd	r25, Z+9	; 0x09
     7f6:	0e 94 0e 18 	call	0x301c	; 0x301c <xQueueGenericSend>
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	81 11       	cpse	r24, r1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <_ZN14frt_text_queue7putcharEc+0x30>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	89 2f       	mov	r24, r25
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <_call_static_run_method>:
     80e:	ec 01       	movw	r28, r24
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	19 95       	eicall
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	1b 82       	std	Y+3, r1	; 0x03
     820:	6f ef       	ldi	r22, 0xFF	; 255
     822:	7f ef       	ldi	r23, 0xFF	; 255
     824:	cb 01       	movw	r24, r22
     826:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <vTaskDelay>
     82a:	fa cf       	rjmp	.-12     	; 0x820 <_call_static_run_method+0x12>

0000082c <_ZN21task_pendulum_encoder3runEv>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <_ZN21task_pendulum_encoder3runEv+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8c 01       	movw	r16, r24
     83a:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	7a 83       	std	Y+2, r23	; 0x02
     842:	8b 83       	std	Y+3, r24	; 0x03
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	e0 e8       	ldi	r30, 0x80	; 128
     848:	f6 e0       	ldi	r31, 0x06	; 6
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	82 83       	std	Z+2, r24	; 0x02
     84e:	80 8b       	std	Z+16, r24	; 0x10
     850:	81 8b       	std	Z+17, r24	; 0x11
     852:	e0 e8       	ldi	r30, 0x80	; 128
     854:	f1 e0       	ldi	r31, 0x01	; 1
     856:	80 e7       	ldi	r24, 0x70	; 112
     858:	82 83       	std	Z+2, r24	; 0x02
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	82 87       	std	Z+10, r24	; 0x0a
     85e:	e0 e4       	ldi	r30, 0x40	; 64
     860:	f8 e0       	ldi	r31, 0x08	; 8
     862:	8a e6       	ldi	r24, 0x6A	; 106
     864:	83 83       	std	Z+3, r24	; 0x03
     866:	8d ec       	ldi	r24, 0xCD	; 205
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	86 a3       	std	Z+38, r24	; 0x26
     86c:	97 a3       	std	Z+39, r25	; 0x27
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	68 94       	set
     874:	ee 24       	eor	r14, r14
     876:	e6 f8       	bld	r14, 6
     878:	ff 24       	eor	r15, r15
     87a:	f3 f8       	bld	r15, 3
     87c:	f7 01       	movw	r30, r14
     87e:	80 a1       	ldd	r24, Z+32	; 0x20
     880:	91 a1       	ldd	r25, Z+33	; 0x21
     882:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <pendulum_encoder>
     886:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <pendulum_encoder+0x1>
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	0f 92       	push	r0
     890:	80 83       	st	Z, r24
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	f8 01       	movw	r30, r16
     89a:	86 85       	ldd	r24, Z+14	; 0x0e
     89c:	97 85       	ldd	r25, Z+15	; 0x0f
     89e:	a0 89       	ldd	r26, Z+16	; 0x10
     8a0:	b1 89       	ldd	r27, Z+17	; 0x11
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	a1 1d       	adc	r26, r1
     8a6:	b1 1d       	adc	r27, r1
     8a8:	86 87       	std	Z+14, r24	; 0x0e
     8aa:	97 87       	std	Z+15, r25	; 0x0f
     8ac:	a0 8b       	std	Z+16, r26	; 0x10
     8ae:	b1 8b       	std	Z+17, r27	; 0x11
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vTaskDelayUntil>
     8c0:	dd cf       	rjmp	.-70     	; 0x87c <_ZN21task_pendulum_encoder3runEv+0x50>

000008c2 <_ZN18task_motor_encoder3runEv>:
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <_ZN18task_motor_encoder3runEv+0x6>
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	7c 01       	movw	r14, r24
     8d0:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
     8d4:	69 83       	std	Y+1, r22	; 0x01
     8d6:	7a 83       	std	Y+2, r23	; 0x02
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	9c 83       	std	Y+4, r25	; 0x04
     8dc:	e0 e8       	ldi	r30, 0x80	; 128
     8de:	f6 e0       	ldi	r31, 0x06	; 6
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	82 83       	std	Z+2, r24	; 0x02
     8e4:	82 89       	ldd	r24, Z+18	; 0x12
     8e6:	83 60       	ori	r24, 0x03	; 3
     8e8:	82 8b       	std	Z+18, r24	; 0x12
     8ea:	83 89       	ldd	r24, Z+19	; 0x13
     8ec:	83 60       	ori	r24, 0x03	; 3
     8ee:	83 8b       	std	Z+19, r24	; 0x13
     8f0:	e0 e8       	ldi	r30, 0x80	; 128
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	82 e7       	ldi	r24, 0x72	; 114
     8f6:	80 83       	st	Z, r24
     8f8:	89 e0       	ldi	r24, 0x09	; 9
     8fa:	80 87       	std	Z+8, r24	; 0x08
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	88 e6       	ldi	r24, 0x68	; 104
     902:	83 83       	std	Z+3, r24	; 0x03
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	86 a3       	std	Z+38, r24	; 0x26
     90a:	97 a3       	std	Z+39, r25	; 0x27
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 83       	st	Z, r24
     910:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     914:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	0f 92       	push	r0
     91e:	10 82       	st	Z, r1
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 2e       	mov	r0, r31
     928:	81 2c       	mov	r8, r1
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	9f 2e       	mov	r9, r31
     92e:	f0 2d       	mov	r31, r0
     930:	0f 2e       	mov	r0, r31
     932:	f4 e6       	ldi	r31, 0x64	; 100
     934:	4f 2e       	mov	r4, r31
     936:	51 2c       	mov	r5, r1
     938:	61 2c       	mov	r6, r1
     93a:	71 2c       	mov	r7, r1
     93c:	f0 2d       	mov	r31, r0
     93e:	f4 01       	movw	r30, r8
     940:	00 a1       	ldd	r16, Z+32	; 0x20
     942:	11 a1       	ldd	r17, Z+33	; 0x21
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	0f 92       	push	r0
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	a0 90 f2 20 	lds	r10, 0x20F2	; 0x8020f2 <linear_position>
     952:	b0 90 f3 20 	lds	r11, 0x20F3	; 0x8020f3 <linear_position+0x1>
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	0f 92       	push	r0
     95c:	c8 01       	movw	r24, r16
     95e:	01 2e       	mov	r0, r17
     960:	00 0c       	add	r0, r0
     962:	aa 0b       	sbc	r26, r26
     964:	bb 0b       	sbc	r27, r27
     966:	ac 01       	movw	r20, r24
     968:	bd 01       	movw	r22, r26
     96a:	44 0f       	add	r20, r20
     96c:	55 1f       	adc	r21, r21
     96e:	66 1f       	adc	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	84 0f       	add	r24, r20
     974:	95 1f       	adc	r25, r21
     976:	a6 1f       	adc	r26, r22
     978:	b7 1f       	adc	r27, r23
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	88 1f       	adc	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	a3 01       	movw	r20, r6
     988:	92 01       	movw	r18, r4
     98a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divmodsi4>
     98e:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     992:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	28 1b       	sub	r18, r24
     99c:	39 0b       	sbc	r19, r25
     99e:	f5 01       	movw	r30, r10
     9a0:	20 83       	st	Z, r18
     9a2:	31 83       	std	Z+1, r19	; 0x01
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <thdMotor>
     9ac:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <thdMotor+0x1>
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	0f 92       	push	r0
     9b6:	c8 01       	movw	r24, r16
     9b8:	8c 19       	sub	r24, r12
     9ba:	9d 09       	sbc	r25, r13
     9bc:	80 83       	st	Z, r24
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	f7 01       	movw	r30, r14
     9c6:	86 85       	ldd	r24, Z+14	; 0x0e
     9c8:	97 85       	ldd	r25, Z+15	; 0x0f
     9ca:	a0 89       	ldd	r26, Z+16	; 0x10
     9cc:	b1 89       	ldd	r27, Z+17	; 0x11
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	a1 1d       	adc	r26, r1
     9d2:	b1 1d       	adc	r27, r1
     9d4:	86 87       	std	Z+14, r24	; 0x0e
     9d6:	97 87       	std	Z+15, r25	; 0x0f
     9d8:	a0 8b       	std	Z+16, r26	; 0x10
     9da:	b1 8b       	std	Z+17, r27	; 0x11
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vTaskDelayUntil>
     9ec:	68 01       	movw	r12, r16
     9ee:	a7 cf       	rjmp	.-178    	; 0x93e <_ZN18task_motor_encoder3runEv+0x7c>

000009f0 <_ZN18task_motor_command3runEv>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN18task_motor_command3runEv+0x6>
     9f6:	1f 92       	push	r1
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	8c 01       	movw	r16, r24
     9fe:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
     a02:	69 83       	std	Y+1, r22	; 0x01
     a04:	7a 83       	std	Y+2, r23	; 0x02
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	a0 e4       	ldi	r26, 0x40	; 64
     a0c:	b6 e0       	ldi	r27, 0x06	; 6
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	8c 93       	st	X, r24
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	15 96       	adiw	r26, 0x05	; 5
     a1a:	8c 93       	st	X, r24
     a1c:	15 97       	sbiw	r26, 0x05	; 5
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f8 e0       	ldi	r31, 0x08	; 8
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 83       	st	Z, r24
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	81 83       	std	Z+1, r24	; 0x01
     a2a:	a6 a3       	std	Z+38, r26	; 0x26
     a2c:	b7 a3       	std	Z+39, r27	; 0x27
     a2e:	10 a6       	std	Z+40, r1	; 0x28
     a30:	11 a6       	std	Z+41, r1	; 0x29
     a32:	12 a6       	std	Z+42, r1	; 0x2a
     a34:	13 a6       	std	Z+43, r1	; 0x2b
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	80 63       	ori	r24, 0x30	; 48
     a3a:	81 83       	std	Z+1, r24	; 0x01
     a3c:	e1 2c       	mov	r14, r1
     a3e:	68 94       	set
     a40:	ff 24       	eor	r15, r15
     a42:	f3 f8       	bld	r15, 3
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	0f 92       	push	r0
     a4a:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
     a4e:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	f8 01       	movw	r30, r16
     a5c:	82 8b       	std	Z+18, r24	; 0x12
     a5e:	93 8b       	std	Z+19, r25	; 0x13
     a60:	99 23       	and	r25, r25
     a62:	34 f0       	brlt	.+12     	; 0xa70 <_ZN18task_motor_command3runEv+0x80>
     a64:	f7 01       	movw	r30, r14
     a66:	80 a7       	std	Z+40, r24	; 0x28
     a68:	91 a7       	std	Z+41, r25	; 0x29
     a6a:	12 a6       	std	Z+42, r1	; 0x2a
     a6c:	13 a6       	std	Z+43, r1	; 0x2b
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <_ZN18task_motor_command3runEv+0x98>
     a70:	f7 01       	movw	r30, r14
     a72:	10 a6       	std	Z+40, r1	; 0x28
     a74:	11 a6       	std	Z+41, r1	; 0x29
     a76:	f8 01       	movw	r30, r16
     a78:	82 89       	ldd	r24, Z+18	; 0x12
     a7a:	93 89       	ldd	r25, Z+19	; 0x13
     a7c:	91 95       	neg	r25
     a7e:	81 95       	neg	r24
     a80:	91 09       	sbc	r25, r1
     a82:	f7 01       	movw	r30, r14
     a84:	82 a7       	std	Z+42, r24	; 0x2a
     a86:	93 a7       	std	Z+43, r25	; 0x2b
     a88:	f8 01       	movw	r30, r16
     a8a:	86 85       	ldd	r24, Z+14	; 0x0e
     a8c:	97 85       	ldd	r25, Z+15	; 0x0f
     a8e:	a0 89       	ldd	r26, Z+16	; 0x10
     a90:	b1 89       	ldd	r27, Z+17	; 0x11
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	a1 1d       	adc	r26, r1
     a96:	b1 1d       	adc	r27, r1
     a98:	86 87       	std	Z+14, r24	; 0x0e
     a9a:	97 87       	std	Z+15, r25	; 0x0f
     a9c:	a0 8b       	std	Z+16, r26	; 0x10
     a9e:	b1 8b       	std	Z+17, r27	; 0x11
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vTaskDelayUntil>
     ab0:	c9 cf       	rjmp	.-110    	; 0xa44 <_ZN18task_motor_command3runEv+0x54>

00000ab2 <_ZN17task_limit_switch3runEv>:
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <_ZN17task_limit_switch3runEv+0x6>
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	8c 01       	movw	r16, r24
     ac0:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
     ac4:	69 83       	std	Y+1, r22	; 0x01
     ac6:	7a 83       	std	Y+2, r23	; 0x02
     ac8:	8b 83       	std	Y+3, r24	; 0x03
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	e0 e6       	ldi	r30, 0x60	; 96
     ace:	f6 e0       	ldi	r31, 0x06	; 6
     ad0:	90 81       	ld	r25, Z
     ad2:	d8 01       	movw	r26, r16
     ad4:	52 96       	adiw	r26, 0x12	; 18
     ad6:	8c 91       	ld	r24, X
     ad8:	52 97       	sbiw	r26, 0x12	; 18
     ada:	89 2b       	or	r24, r25
     adc:	80 83       	st	Z, r24
     ade:	94 81       	ldd	r25, Z+4	; 0x04
     ae0:	52 96       	adiw	r26, 0x12	; 18
     ae2:	8c 91       	ld	r24, X
     ae4:	52 97       	sbiw	r26, 0x12	; 18
     ae6:	89 2b       	or	r24, r25
     ae8:	84 83       	std	Z+4, r24	; 0x04
     aea:	52 96       	adiw	r26, 0x12	; 18
     aec:	8c 91       	ld	r24, X
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	21 f4       	brne	.+8      	; 0xafa <_ZN17task_limit_switch3runEv+0x48>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <_ZN17task_limit_switch3runEv+0x52>
     afa:	84 30       	cpi	r24, 0x04	; 4
     afc:	19 f4       	brne	.+6      	; 0xb04 <_ZN17task_limit_switch3runEv+0x52>
     afe:	88 e1       	ldi	r24, 0x18	; 24
     b00:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     b04:	0f 2e       	mov	r0, r31
     b06:	f8 e6       	ldi	r31, 0x68	; 104
     b08:	ef 2e       	mov	r14, r31
     b0a:	f6 e0       	ldi	r31, 0x06	; 6
     b0c:	ff 2e       	mov	r15, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	dd 24       	eor	r13, r13
     b12:	d3 94       	inc	r13
     b14:	f7 01       	movw	r30, r14
     b16:	80 81       	ld	r24, Z
     b18:	80 fd       	sbrc	r24, 0
     b1a:	0b c0       	rjmp	.+22     	; 0xb32 <_ZN17task_limit_switch3runEv+0x80>
     b1c:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
     b20:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	0f 92       	push	r0
     b2a:	d0 82       	st	Z, r13
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <_ZN17task_limit_switch3runEv+0x94>
     b32:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
     b36:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	0f 92       	push	r0
     b40:	10 82       	st	Z, r1
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	d7 01       	movw	r26, r14
     b48:	8c 91       	ld	r24, X
     b4a:	82 fd       	sbrc	r24, 2
     b4c:	0b c0       	rjmp	.+22     	; 0xb64 <_ZN17task_limit_switch3runEv+0xb2>
     b4e:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
     b52:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	0f 92       	push	r0
     b5c:	d0 82       	st	Z, r13
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <_ZN17task_limit_switch3runEv+0xc6>
     b64:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
     b68:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	0f 92       	push	r0
     b72:	10 82       	st	Z, r1
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	f8 01       	movw	r30, r16
     b7a:	86 85       	ldd	r24, Z+14	; 0x0e
     b7c:	97 85       	ldd	r25, Z+15	; 0x0f
     b7e:	a0 89       	ldd	r26, Z+16	; 0x10
     b80:	b1 89       	ldd	r27, Z+17	; 0x11
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	a1 1d       	adc	r26, r1
     b86:	b1 1d       	adc	r27, r1
     b88:	86 87       	std	Z+14, r24	; 0x0e
     b8a:	97 87       	std	Z+15, r25	; 0x0f
     b8c:	a0 8b       	std	Z+16, r26	; 0x10
     b8e:	b1 8b       	std	Z+17, r27	; 0x11
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vTaskDelayUntil>
     ba0:	b9 cf       	rjmp	.-142    	; 0xb14 <_ZN17task_limit_switch3runEv+0x62>

00000ba2 <_ZN8emstreamlsE15ser_manipulator>:
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
     ba8:	86 2f       	mov	r24, r22
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	8b 30       	cpi	r24, 0x0B	; 11
     bae:	91 05       	cpc	r25, r1
     bb0:	d8 f5       	brcc	.+118    	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bb2:	fc 01       	movw	r30, r24
     bb4:	88 27       	eor	r24, r24
     bb6:	e2 50       	subi	r30, 0x02	; 2
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__tablejump2__>
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	8a 83       	std	Y+2, r24	; 0x02
     bc4:	31 c0       	rjmp	.+98     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	8a 83       	std	Y+2, r24	; 0x02
     bca:	2e c0       	rjmp	.+92     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	2b c0       	rjmp	.+86     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	8a 83       	std	Y+2, r24	; 0x02
     bd6:	28 c0       	rjmp	.+80     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	8b 83       	std	Y+3, r24	; 0x03
     bdc:	25 c0       	rjmp	.+74     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bde:	1b 82       	std	Y+3, r1	; 0x03
     be0:	23 c0       	rjmp	.+70     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     be2:	e8 81       	ld	r30, Y
     be4:	f9 81       	ldd	r31, Y+1	; 0x01
     be6:	02 80       	ldd	r0, Z+2	; 0x02
     be8:	f3 81       	ldd	r31, Z+3	; 0x03
     bea:	e0 2d       	mov	r30, r0
     bec:	6d e0       	ldi	r22, 0x0D	; 13
     bee:	ce 01       	movw	r24, r28
     bf0:	19 95       	eicall
     bf2:	e8 81       	ld	r30, Y
     bf4:	f9 81       	ldd	r31, Y+1	; 0x01
     bf6:	02 80       	ldd	r0, Z+2	; 0x02
     bf8:	f3 81       	ldd	r31, Z+3	; 0x03
     bfa:	e0 2d       	mov	r30, r0
     bfc:	6a e0       	ldi	r22, 0x0A	; 10
     bfe:	ce 01       	movw	r24, r28
     c00:	19 95       	eicall
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c04:	e8 81       	ld	r30, Y
     c06:	f9 81       	ldd	r31, Y+1	; 0x01
     c08:	02 84       	ldd	r0, Z+10	; 0x0a
     c0a:	f3 85       	ldd	r31, Z+11	; 0x0b
     c0c:	e0 2d       	mov	r30, r0
     c0e:	ce 01       	movw	r24, r28
     c10:	19 95       	eicall
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c14:	e8 81       	ld	r30, Y
     c16:	f9 81       	ldd	r31, Y+1	; 0x01
     c18:	00 84       	ldd	r0, Z+8	; 0x08
     c1a:	f1 85       	ldd	r31, Z+9	; 0x09
     c1c:	e0 2d       	mov	r30, r0
     c1e:	ce 01       	movw	r24, r28
     c20:	19 95       	eicall
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8c 83       	std	Y+4, r24	; 0x04
     c28:	ce 01       	movw	r24, r28
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZN8frt_task20print_status_in_listEP8emstream>:
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	8b 01       	movw	r16, r22
     c3c:	e8 81       	ld	r30, Y
     c3e:	f9 81       	ldd	r31, Y+1	; 0x01
     c40:	02 80       	ldd	r0, Z+2	; 0x02
     c42:	f3 81       	ldd	r31, Z+3	; 0x03
     c44:	e0 2d       	mov	r30, r0
     c46:	19 95       	eicall
     c48:	66 e0       	ldi	r22, 0x06	; 6
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	9d 81       	ldd	r25, Y+5	; 0x05
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	19 f0       	breq	.+6      	; 0xc5e <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     c58:	b8 01       	movw	r22, r16
     c5a:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8frt_task20print_status_in_listEP8emstream>
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <_ZN8emstream4putsEPKc>:
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	8c 01       	movw	r16, r24
     c72:	fb 01       	movw	r30, r22
     c74:	dc 01       	movw	r26, r24
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	8c 91       	ld	r24, X
     c7a:	81 11       	cpse	r24, r1
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <_ZN8emstream4putsEPKc+0x1e>
     c7e:	60 81       	ld	r22, Z
     c80:	61 11       	cpse	r22, r1
     c82:	17 c0       	rjmp	.+46     	; 0xcb2 <_ZN8emstream4putsEPKc+0x4a>
     c84:	23 c0       	rjmp	.+70     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     c86:	d8 01       	movw	r26, r16
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	1c 92       	st	X, r1
     c8c:	eb 01       	movw	r28, r22
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	64 91       	lpm	r22, Z
     c92:	66 23       	and	r22, r22
     c94:	d9 f0       	breq	.+54     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     c96:	d8 01       	movw	r26, r16
     c98:	ed 91       	ld	r30, X+
     c9a:	fc 91       	ld	r31, X
     c9c:	02 80       	ldd	r0, Z+2	; 0x02
     c9e:	f3 81       	ldd	r31, Z+3	; 0x03
     ca0:	e0 2d       	mov	r30, r0
     ca2:	c8 01       	movw	r24, r16
     ca4:	19 95       	eicall
     ca6:	fe 01       	movw	r30, r28
     ca8:	64 91       	lpm	r22, Z
     caa:	21 96       	adiw	r28, 0x01	; 1
     cac:	61 11       	cpse	r22, r1
     cae:	f3 cf       	rjmp	.-26     	; 0xc96 <_ZN8emstream4putsEPKc+0x2e>
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     cb2:	ef 01       	movw	r28, r30
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	d8 01       	movw	r26, r16
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	02 80       	ldd	r0, Z+2	; 0x02
     cbe:	f3 81       	ldd	r31, Z+3	; 0x03
     cc0:	e0 2d       	mov	r30, r0
     cc2:	c8 01       	movw	r24, r16
     cc4:	19 95       	eicall
     cc6:	69 91       	ld	r22, Y+
     cc8:	61 11       	cpse	r22, r1
     cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <_ZN8emstream4putsEPKc+0x4e>
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <_ZN8emstreamlsEm>:
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	a1 97       	sbiw	r28, 0x21	; 33
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	8c 01       	movw	r16, r24
     cf0:	d4 2e       	mov	r13, r20
     cf2:	e5 2e       	mov	r14, r21
     cf4:	f6 2e       	mov	r15, r22
     cf6:	97 2f       	mov	r25, r23
     cf8:	f8 01       	movw	r30, r16
     cfa:	22 81       	ldd	r18, Z+2	; 0x02
     cfc:	20 31       	cpi	r18, 0x10	; 16
     cfe:	21 f0       	breq	.+8      	; 0xd08 <_ZN8emstreamlsEm+0x32>
     d00:	28 30       	cpi	r18, 0x08	; 8
     d02:	11 f0       	breq	.+4      	; 0xd08 <_ZN8emstreamlsEm+0x32>
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	71 f4       	brne	.+28     	; 0xd24 <_ZN8emstreamlsEm+0x4e>
     d08:	69 2f       	mov	r22, r25
     d0a:	c8 01       	movw	r24, r16
     d0c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d10:	6f 2d       	mov	r22, r15
     d12:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d16:	6e 2d       	mov	r22, r14
     d18:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d1c:	6d 2d       	mov	r22, r13
     d1e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <_ZN8emstreamlsEm+0x6c>
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	6d 2d       	mov	r22, r13
     d2e:	7e 2d       	mov	r23, r14
     d30:	8f 2d       	mov	r24, r15
     d32:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <ultoa>
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     d42:	c8 01       	movw	r24, r16
     d44:	a1 96       	adiw	r28, 0x21	; 33
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	08 95       	ret

00000d5a <_ZN8emstreamlsEj>:
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	61 97       	sbiw	r28, 0x11	; 17
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	8c 01       	movw	r16, r24
     d70:	f6 2e       	mov	r15, r22
     d72:	97 2f       	mov	r25, r23
     d74:	f8 01       	movw	r30, r16
     d76:	42 81       	ldd	r20, Z+2	; 0x02
     d78:	40 31       	cpi	r20, 0x10	; 16
     d7a:	21 f0       	breq	.+8      	; 0xd84 <_ZN8emstreamlsEj+0x2a>
     d7c:	48 30       	cpi	r20, 0x08	; 8
     d7e:	11 f0       	breq	.+4      	; 0xd84 <_ZN8emstreamlsEj+0x2a>
     d80:	42 30       	cpi	r20, 0x02	; 2
     d82:	41 f4       	brne	.+16     	; 0xd94 <_ZN8emstreamlsEj+0x3a>
     d84:	69 2f       	mov	r22, r25
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d8c:	6f 2d       	mov	r22, r15
     d8e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     d92:	0d c0       	rjmp	.+26     	; 0xdae <_ZN8emstreamlsEj+0x54>
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 2d       	mov	r24, r15
     d9e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <utoa>
     da2:	be 01       	movw	r22, r28
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	c8 01       	movw	r24, r16
     daa:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     dae:	c8 01       	movw	r24, r16
     db0:	61 96       	adiw	r28, 0x11	; 17
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	08 95       	ret

00000dc2 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	5c 01       	movw	r10, r24
     de2:	3b 01       	movw	r6, r22
     de4:	4a 01       	movw	r8, r20
     de6:	12 2f       	mov	r17, r18
     de8:	50 2e       	mov	r5, r16
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	ca 01       	movw	r24, r20
     dee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     df2:	a6 14       	cp	r10, r6
     df4:	b7 04       	cpc	r11, r7
     df6:	08 f0       	brcs	.+2      	; 0xdfa <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     df8:	7c c0       	rjmp	.+248    	; 0xef2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     dfa:	65 01       	movw	r12, r10
     dfc:	84 e1       	ldi	r24, 0x14	; 20
     dfe:	c8 0e       	add	r12, r24
     e00:	d1 1c       	adc	r13, r1
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	75 01       	movw	r14, r10
     e06:	b5 01       	movw	r22, r10
     e08:	c4 01       	movw	r24, r8
     e0a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
     e0e:	6a e0       	ldi	r22, 0x0A	; 10
     e10:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e14:	67 ec       	ldi	r22, 0xC7	; 199
     e16:	76 e0       	ldi	r23, 0x06	; 6
     e18:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e1c:	11 23       	and	r17, r17
     e1e:	09 f4       	brne	.+2      	; 0xe22 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     e20:	6d c0       	rjmp	.+218    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e22:	00 23       	and	r16, r16
     e24:	09 f4       	brne	.+2      	; 0xe28 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     e26:	6a c0       	rjmp	.+212    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	c4 01       	movw	r24, r8
     e2c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e30:	62 ec       	ldi	r22, 0xC2	; 194
     e32:	76 e0       	ldi	r23, 0x06	; 6
     e34:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e38:	61 c0       	rjmp	.+194    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e3a:	11 23       	and	r17, r17
     e3c:	71 f0       	breq	.+28     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e3e:	01 11       	cpse	r16, r1
     e40:	0c c0       	rjmp	.+24     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e42:	88 81       	ld	r24, Y
     e44:	85 15       	cp	r24, r5
     e46:	49 f0       	breq	.+18     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	c4 01       	movw	r24, r8
     e4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e50:	6d eb       	ldi	r22, 0xBD	; 189
     e52:	76 e0       	ldi	r23, 0x06	; 6
     e54:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e58:	01 e0       	ldi	r16, 0x01	; 1
     e5a:	69 91       	ld	r22, Y+
     e5c:	c4 01       	movw	r24, r8
     e5e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
     e62:	dc 01       	movw	r26, r24
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	02 80       	ldd	r0, Z+2	; 0x02
     e6a:	f3 81       	ldd	r31, Z+3	; 0x03
     e6c:	e0 2d       	mov	r30, r0
     e6e:	60 e2       	ldi	r22, 0x20	; 32
     e70:	19 95       	eicall
     e72:	cc 16       	cp	r12, r28
     e74:	dd 06       	cpc	r13, r29
     e76:	09 f7       	brne	.-62     	; 0xe3a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     e78:	11 23       	and	r17, r17
     e7a:	89 f0       	breq	.+34     	; 0xe9e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	c4 01       	movw	r24, r8
     e80:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e84:	ec 01       	movw	r28, r24
     e86:	67 eb       	ldi	r22, 0xB7	; 183
     e88:	76 e0       	ldi	r23, 0x06	; 6
     e8a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	02 80       	ldd	r0, Z+2	; 0x02
     e94:	f3 81       	ldd	r31, Z+3	; 0x03
     e96:	e0 2d       	mov	r30, r0
     e98:	60 e2       	ldi	r22, 0x20	; 32
     e9a:	ce 01       	movw	r24, r28
     e9c:	19 95       	eicall
     e9e:	f7 01       	movw	r30, r14
     ea0:	61 91       	ld	r22, Z+
     ea2:	7f 01       	movw	r14, r30
     ea4:	80 ee       	ldi	r24, 0xE0	; 224
     ea6:	86 0f       	add	r24, r22
     ea8:	8f 35       	cpi	r24, 0x5F	; 95
     eaa:	48 f4       	brcc	.+18     	; 0xebe <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     eac:	d4 01       	movw	r26, r8
     eae:	ed 91       	ld	r30, X+
     eb0:	fc 91       	ld	r31, X
     eb2:	02 80       	ldd	r0, Z+2	; 0x02
     eb4:	f3 81       	ldd	r31, Z+3	; 0x03
     eb6:	e0 2d       	mov	r30, r0
     eb8:	c4 01       	movw	r24, r8
     eba:	19 95       	eicall
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     ebe:	d4 01       	movw	r26, r8
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	02 80       	ldd	r0, Z+2	; 0x02
     ec6:	f3 81       	ldd	r31, Z+3	; 0x03
     ec8:	e0 2d       	mov	r30, r0
     eca:	6e e2       	ldi	r22, 0x2E	; 46
     ecc:	c4 01       	movw	r24, r8
     ece:	19 95       	eicall
     ed0:	ce 14       	cp	r12, r14
     ed2:	df 04       	cpc	r13, r15
     ed4:	21 f7       	brne	.-56     	; 0xe9e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     ed6:	b4 e1       	ldi	r27, 0x14	; 20
     ed8:	ab 0e       	add	r10, r27
     eda:	b1 1c       	adc	r11, r1
     edc:	66 e0       	ldi	r22, 0x06	; 6
     ede:	c4 01       	movw	r24, r8
     ee0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     ee4:	e4 e1       	ldi	r30, 0x14	; 20
     ee6:	ce 0e       	add	r12, r30
     ee8:	d1 1c       	adc	r13, r1
     eea:	a6 14       	cp	r10, r6
     eec:	b7 04       	cpc	r11, r7
     eee:	08 f4       	brcc	.+2      	; 0xef2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     ef0:	89 cf       	rjmp	.-238    	; 0xe04 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     ef2:	62 e0       	ldi	r22, 0x02	; 2
     ef4:	c4 01       	movw	r24, r8
     ef6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     efc:	e7 01       	movw	r28, r14
     efe:	9d cf       	rjmp	.-198    	; 0xe3a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
     f1a:	6f 90       	pop	r6
     f1c:	5f 90       	pop	r5
     f1e:	08 95       	ret

00000f20 <_ZlsR8emstreamR10time_stamp>:
     f20:	8f 92       	push	r8
     f22:	9f 92       	push	r9
     f24:	af 92       	push	r10
     f26:	bf 92       	push	r11
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2f 97       	sbiw	r28, 0x0f	; 15
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	8c 01       	movw	r16, r24
     f40:	7b 01       	movw	r14, r22
     f42:	db 01       	movw	r26, r22
     f44:	6d 91       	ld	r22, X+
     f46:	7d 91       	ld	r23, X+
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f8 ee       	ldi	r31, 0xE8	; 232
     f50:	8f 2e       	mov	r8, r31
     f52:	f3 e0       	ldi	r31, 0x03	; 3
     f54:	9f 2e       	mov	r9, r31
     f56:	a1 2c       	mov	r10, r1
     f58:	b1 2c       	mov	r11, r1
     f5a:	f0 2d       	mov	r31, r0
     f5c:	a5 01       	movw	r20, r10
     f5e:	94 01       	movw	r18, r8
     f60:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__udivmodsi4>
     f64:	ba 01       	movw	r22, r20
     f66:	a9 01       	movw	r20, r18
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
     f6e:	d8 01       	movw	r26, r16
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	02 80       	ldd	r0, Z+2	; 0x02
     f76:	f3 81       	ldd	r31, Z+3	; 0x03
     f78:	e0 2d       	mov	r30, r0
     f7a:	6e e2       	ldi	r22, 0x2E	; 46
     f7c:	c8 01       	movw	r24, r16
     f7e:	19 95       	eicall
     f80:	f7 01       	movw	r30, r14
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	a5 01       	movw	r20, r10
     f8c:	94 01       	movw	r18, r8
     f8e:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__udivmodsi4>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	60 e4       	ldi	r22, 0x40	; 64
     f98:	72 e4       	ldi	r23, 0x42	; 66
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__mulsi3>
     fa2:	a5 01       	movw	r20, r10
     fa4:	94 01       	movw	r18, r8
     fa6:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__udivmodsi4>
     faa:	49 01       	movw	r8, r18
     fac:	5a 01       	movw	r10, r20
     fae:	f7 01       	movw	r30, r14
     fb0:	a4 81       	ldd	r26, Z+4	; 0x04
     fb2:	b5 81       	ldd	r27, Z+5	; 0x05
     fb4:	20 e4       	ldi	r18, 0x40	; 64
     fb6:	32 e4       	ldi	r19, 0x42	; 66
     fb8:	4f e0       	ldi	r20, 0x0F	; 15
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	0e 94 2b 20 	call	0x4056	; 0x4056 <__muluhisi3>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	38 e4       	ldi	r19, 0x48	; 72
     fc4:	48 ee       	ldi	r20, 0xE8	; 232
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__udivmodsi4>
     fcc:	c5 01       	movw	r24, r10
     fce:	b4 01       	movw	r22, r8
     fd0:	62 0f       	add	r22, r18
     fd2:	73 1f       	adc	r23, r19
     fd4:	84 1f       	adc	r24, r20
     fd6:	95 1f       	adc	r25, r21
     fd8:	7e 01       	movw	r14, r28
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	ef 0e       	add	r14, r31
     fde:	f1 1c       	adc	r15, r1
     fe0:	9e 01       	movw	r18, r28
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	59 01       	movw	r10, r18
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divmodsi4>
     ff4:	e6 2f       	mov	r30, r22
     ff6:	28 87       	std	Y+8, r18	; 0x08
     ff8:	39 87       	std	Y+9, r19	; 0x09
     ffa:	4a 87       	std	Y+10, r20	; 0x0a
     ffc:	5b 87       	std	Y+11, r21	; 0x0b
     ffe:	68 85       	ldd	r22, Y+8	; 0x08
    1000:	79 85       	ldd	r23, Y+9	; 0x09
    1002:	8a 85       	ldd	r24, Y+10	; 0x0a
    1004:	9b 85       	ldd	r25, Y+11	; 0x0b
    1006:	20 e3       	ldi	r18, 0x30	; 48
    1008:	2e 0f       	add	r18, r30
    100a:	d7 01       	movw	r26, r14
    100c:	2e 93       	st	-X, r18
    100e:	7d 01       	movw	r14, r26
    1010:	aa 15       	cp	r26, r10
    1012:	bb 05       	cpc	r27, r11
    1014:	49 f7       	brne	.-46     	; 0xfe8 <_ZlsR8emstreamR10time_stamp+0xc8>
    1016:	1f 82       	std	Y+7, r1	; 0x07
    1018:	be 01       	movw	r22, r28
    101a:	6f 5f       	subi	r22, 0xFF	; 255
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	c8 01       	movw	r24, r16
    1020:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1024:	c8 01       	movw	r24, r16
    1026:	2f 96       	adiw	r28, 0x0f	; 15
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	9f 90       	pop	r9
    103e:	8f 90       	pop	r8
    1040:	08 95       	ret

00001042 <_ZN8frt_task12print_statusER8emstream>:
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
    105c:	8b 01       	movw	r16, r22
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	0e 94 22 1b 	call	0x3644	; 0x3644 <pcTaskGetTaskName>
    1066:	bc 01       	movw	r22, r24
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    106e:	d8 01       	movw	r26, r16
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	02 80       	ldd	r0, Z+2	; 0x02
    1076:	f3 81       	ldd	r31, Z+3	; 0x03
    1078:	e0 2d       	mov	r30, r0
    107a:	69 e0       	ldi	r22, 0x09	; 9
    107c:	c8 01       	movw	r24, r16
    107e:	19 95       	eicall
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	0e 94 22 1b 	call	0x3644	; 0x3644 <pcTaskGetTaskName>
    1088:	fc 01       	movw	r30, r24
    108a:	01 90       	ld	r0, Z+
    108c:	00 20       	and	r0, r0
    108e:	e9 f7       	brne	.-6      	; 0x108a <_ZN8frt_task12print_statusER8emstream+0x48>
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	e8 1b       	sub	r30, r24
    1094:	f9 0b       	sbc	r31, r25
    1096:	38 97       	sbiw	r30, 0x08	; 8
    1098:	48 f4       	brcc	.+18     	; 0x10ac <_ZN8frt_task12print_statusER8emstream+0x6a>
    109a:	d8 01       	movw	r26, r16
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	02 80       	ldd	r0, Z+2	; 0x02
    10a2:	f3 81       	ldd	r31, Z+3	; 0x03
    10a4:	e0 2d       	mov	r30, r0
    10a6:	69 e0       	ldi	r22, 0x09	; 9
    10a8:	c8 01       	movw	r24, r16
    10aa:	19 95       	eicall
    10ac:	ce 84       	ldd	r12, Y+14	; 0x0e
    10ae:	df 84       	ldd	r13, Y+15	; 0x0f
    10b0:	e8 88       	ldd	r14, Y+16	; 0x10
    10b2:	f9 88       	ldd	r15, Y+17	; 0x11
    10b4:	a8 84       	ldd	r10, Y+8	; 0x08
    10b6:	b9 84       	ldd	r11, Y+9	; 0x09
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <uxTaskGetStackHighWaterMark>
    10c0:	98 2e       	mov	r9, r24
    10c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	0e 94 cd 1a 	call	0x359a	; 0x359a <uxTaskPriorityGet>
    10cc:	68 2f       	mov	r22, r24
    10ce:	c8 01       	movw	r24, r16
    10d0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
    10d4:	6a e0       	ldi	r22, 0x0A	; 10
    10d6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    10da:	ec 01       	movw	r28, r24
    10dc:	65 eb       	ldi	r22, 0xB5	; 181
    10de:	76 e0       	ldi	r23, 0x06	; 6
    10e0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    10e4:	68 2d       	mov	r22, r8
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
    10ec:	6a e0       	ldi	r22, 0x0A	; 10
    10ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    10f2:	ec 01       	movw	r28, r24
    10f4:	63 eb       	ldi	r22, 0xB3	; 179
    10f6:	76 e0       	ldi	r23, 0x06	; 6
    10f8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    10fc:	69 2d       	mov	r22, r9
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
    1104:	6a e0       	ldi	r22, 0x0A	; 10
    1106:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    110a:	ec 01       	movw	r28, r24
    110c:	61 eb       	ldi	r22, 0xB1	; 177
    110e:	76 e0       	ldi	r23, 0x06	; 6
    1110:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1114:	b5 01       	movw	r22, r10
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    111c:	6a e0       	ldi	r22, 0x0A	; 10
    111e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1122:	ec 01       	movw	r28, r24
    1124:	6f ea       	ldi	r22, 0xAF	; 175
    1126:	76 e0       	ldi	r23, 0x06	; 6
    1128:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1134:	ec 01       	movw	r28, r24
    1136:	6d ea       	ldi	r22, 0xAD	; 173
    1138:	76 e0       	ldi	r23, 0x06	; 6
    113a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    113e:	b7 01       	movw	r22, r14
    1140:	a6 01       	movw	r20, r12
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <_ZN8frt_task19print_stack_in_listEP8emstream>:
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	7b 01       	movw	r14, r22
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	0e 94 22 1b 	call	0x3644	; 0x3644 <pcTaskGetTaskName>
    117e:	6c 01       	movw	r12, r24
    1180:	6a e0       	ldi	r22, 0x0A	; 10
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1188:	8c 01       	movw	r16, r24
    118a:	68 ea       	ldi	r22, 0xA8	; 168
    118c:	76 e0       	ldi	r23, 0x06	; 6
    118e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1192:	6a e0       	ldi	r22, 0x0A	; 10
    1194:	c8 01       	movw	r24, r16
    1196:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    119a:	8c 01       	movw	r16, r24
    119c:	61 ea       	ldi	r22, 0xA1	; 161
    119e:	76 e0       	ldi	r23, 0x06	; 6
    11a0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11a4:	b6 01       	movw	r22, r12
    11a6:	c8 01       	movw	r24, r16
    11a8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11ac:	6a e0       	ldi	r22, 0x0A	; 10
    11ae:	c8 01       	movw	r24, r16
    11b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    11b4:	8c 01       	movw	r16, r24
    11b6:	6b e9       	ldi	r22, 0x9B	; 155
    11b8:	76 e0       	ldi	r23, 0x06	; 6
    11ba:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11be:	66 e0       	ldi	r22, 0x06	; 6
    11c0:	c8 01       	movw	r24, r16
    11c2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    11c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ca:	e8 85       	ldd	r30, Y+8	; 0x08
    11cc:	f9 85       	ldd	r31, Y+9	; 0x09
    11ce:	01 e1       	ldi	r16, 0x11	; 17
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	a7 01       	movw	r20, r14
    11d4:	bc 01       	movw	r22, r24
    11d6:	8e 1b       	sub	r24, r30
    11d8:	9f 0b       	sbc	r25, r31
    11da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z15hex_dump_memoryPhS_P8emstreambh>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	19 f0       	breq	.+6      	; 0x11ec <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    11e6:	b7 01       	movw	r22, r14
    11e8:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN8frt_task19print_stack_in_listEP8emstream>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	08 95       	ret

000011fe <_ZN9task_user18print_help_messageEv>:
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	6a e0       	ldi	r22, 0x0A	; 10
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	9f 81       	ldd	r25, Y+7	; 0x07
    120e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1212:	8c 01       	movw	r16, r24
    1214:	63 e6       	ldi	r22, 0x63	; 99
    1216:	76 e0       	ldi	r23, 0x06	; 6
    1218:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    121c:	6a e0       	ldi	r22, 0x0A	; 10
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1224:	8c 01       	movw	r16, r24
    1226:	6d e5       	ldi	r22, 0x5D	; 93
    1228:	76 e0       	ldi	r23, 0x06	; 6
    122a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    122e:	67 e0       	ldi	r22, 0x07	; 7
    1230:	c8 01       	movw	r24, r16
    1232:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1236:	6a e0       	ldi	r22, 0x0A	; 10
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	9f 81       	ldd	r25, Y+7	; 0x07
    123c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1240:	8c 01       	movw	r16, r24
    1242:	6e e3       	ldi	r22, 0x3E	; 62
    1244:	76 e0       	ldi	r23, 0x06	; 6
    1246:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    124a:	6a e0       	ldi	r22, 0x0A	; 10
    124c:	c8 01       	movw	r24, r16
    124e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1252:	8c 01       	movw	r16, r24
    1254:	68 e3       	ldi	r22, 0x38	; 56
    1256:	76 e0       	ldi	r23, 0x06	; 6
    1258:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    125c:	66 e0       	ldi	r22, 0x06	; 6
    125e:	c8 01       	movw	r24, r16
    1260:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1264:	6a e0       	ldi	r22, 0x0A	; 10
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    126e:	8c 01       	movw	r16, r24
    1270:	61 e2       	ldi	r22, 0x21	; 33
    1272:	76 e0       	ldi	r23, 0x06	; 6
    1274:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1278:	66 e0       	ldi	r22, 0x06	; 6
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1280:	6a e0       	ldi	r22, 0x0A	; 10
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    128a:	8c 01       	movw	r16, r24
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	76 e0       	ldi	r23, 0x06	; 6
    1290:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1294:	66 e0       	ldi	r22, 0x06	; 6
    1296:	c8 01       	movw	r24, r16
    1298:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    129c:	6a e0       	ldi	r22, 0x0A	; 10
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12a6:	8c 01       	movw	r16, r24
    12a8:	6d ee       	ldi	r22, 0xED	; 237
    12aa:	75 e0       	ldi	r23, 0x05	; 5
    12ac:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12b0:	66 e0       	ldi	r22, 0x06	; 6
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12c2:	8c 01       	movw	r16, r24
    12c4:	6c ec       	ldi	r22, 0xCC	; 204
    12c6:	75 e0       	ldi	r23, 0x05	; 5
    12c8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	c8 01       	movw	r24, r16
    12d0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12d4:	6a e0       	ldi	r22, 0x0A	; 10
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12de:	8c 01       	movw	r16, r24
    12e0:	65 ea       	ldi	r22, 0xA5	; 165
    12e2:	75 e0       	ldi	r23, 0x05	; 5
    12e4:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12e8:	66 e0       	ldi	r22, 0x06	; 6
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12f0:	6a e0       	ldi	r22, 0x0A	; 10
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12fa:	8c 01       	movw	r16, r24
    12fc:	67 e8       	ldi	r22, 0x87	; 135
    12fe:	75 e0       	ldi	r23, 0x05	; 5
    1300:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1304:	66 e0       	ldi	r22, 0x06	; 6
    1306:	c8 01       	movw	r24, r16
    1308:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    130c:	6a e0       	ldi	r22, 0x0A	; 10
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1316:	8c 01       	movw	r16, r24
    1318:	6c e6       	ldi	r22, 0x6C	; 108
    131a:	75 e0       	ldi	r23, 0x05	; 5
    131c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	c8 01       	movw	r24, r16
    1324:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1328:	6a e0       	ldi	r22, 0x0A	; 10
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1332:	8c 01       	movw	r16, r24
    1334:	61 e5       	ldi	r22, 0x51	; 81
    1336:	75 e0       	ldi	r23, 0x05	; 5
    1338:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    133c:	66 e0       	ldi	r22, 0x06	; 6
    133e:	c8 01       	movw	r24, r16
    1340:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1344:	6a e0       	ldi	r22, 0x0A	; 10
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    134e:	8c 01       	movw	r16, r24
    1350:	69 e3       	ldi	r22, 0x39	; 57
    1352:	75 e0       	ldi	r23, 0x05	; 5
    1354:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1360:	6a e0       	ldi	r22, 0x0A	; 10
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    136a:	8c 01       	movw	r16, r24
    136c:	61 e2       	ldi	r22, 0x21	; 33
    136e:	75 e0       	ldi	r23, 0x05	; 5
    1370:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1374:	66 e0       	ldi	r22, 0x06	; 6
    1376:	c8 01       	movw	r24, r16
    1378:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    137c:	6a e0       	ldi	r22, 0x0A	; 10
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1386:	8c 01       	movw	r16, r24
    1388:	6a e0       	ldi	r22, 0x0A	; 10
    138a:	75 e0       	ldi	r23, 0x05	; 5
    138c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1390:	66 e0       	ldi	r22, 0x06	; 6
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13a2:	ec 01       	movw	r28, r24
    13a4:	6b ef       	ldi	r22, 0xFB	; 251
    13a6:	74 e0       	ldi	r23, 0x04	; 4
    13a8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    13ac:	66 e0       	ldi	r22, 0x06	; 6
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <_ZN9task_user3runEv>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	2c 97       	sbiw	r28, 0x0c	; 12
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	7c 01       	movw	r14, r24
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	1a 82       	std	Y+2, r1	; 0x02
    13d2:	1b 82       	std	Y+3, r1	; 0x03
    13d4:	1c 82       	std	Y+4, r1	; 0x04
    13d6:	1d 82       	std	Y+5, r1	; 0x05
    13d8:	1e 82       	std	Y+6, r1	; 0x06
    13da:	6a e0       	ldi	r22, 0x0A	; 10
    13dc:	dc 01       	movw	r26, r24
    13de:	16 96       	adiw	r26, 0x06	; 6
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	17 97       	sbiw	r26, 0x07	; 7
    13e6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13ea:	6c 01       	movw	r12, r24
    13ec:	6d ed       	ldi	r22, 0xDD	; 221
    13ee:	74 e0       	ldi	r23, 0x04	; 4
    13f0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    13f4:	66 e0       	ldi	r22, 0x06	; 6
    13f6:	c6 01       	movw	r24, r12
    13f8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13fc:	11 e0       	ldi	r17, 0x01	; 1
    13fe:	81 2c       	mov	r8, r1
    1400:	68 94       	set
    1402:	99 24       	eor	r9, r9
    1404:	93 f8       	bld	r9, 3
    1406:	0f 2e       	mov	r0, r31
    1408:	f0 ee       	ldi	r31, 0xE0	; 224
    140a:	af 2e       	mov	r10, r31
    140c:	f0 e2       	ldi	r31, 0x20	; 32
    140e:	bf 2e       	mov	r11, r31
    1410:	f0 2d       	mov	r31, r0
    1412:	f7 01       	movw	r30, r14
    1414:	84 85       	ldd	r24, Z+12	; 0x0c
    1416:	88 23       	and	r24, r24
    1418:	21 f0       	breq	.+8      	; 0x1422 <_ZN9task_user3runEv+0x64>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f4       	brne	.+2      	; 0x1420 <_ZN9task_user3runEv+0x62>
    141e:	60 c0       	rjmp	.+192    	; 0x14e0 <_ZN9task_user3runEv+0x122>
    1420:	63 c2       	rjmp	.+1222   	; 0x18e8 <_ZN9task_user3runEv+0x52a>
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	97 81       	ldd	r25, Z+7	; 0x07
    1426:	dc 01       	movw	r26, r24
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	04 80       	ldd	r0, Z+4	; 0x04
    142e:	f5 81       	ldd	r31, Z+5	; 0x05
    1430:	e0 2d       	mov	r30, r0
    1432:	19 95       	eicall
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <_ZN9task_user3runEv+0x7c>
    1438:	37 c0       	rjmp	.+110    	; 0x14a8 <_ZN9task_user3runEv+0xea>
    143a:	f7 01       	movw	r30, r14
    143c:	86 81       	ldd	r24, Z+6	; 0x06
    143e:	97 81       	ldd	r25, Z+7	; 0x07
    1440:	dc 01       	movw	r26, r24
    1442:	ed 91       	ld	r30, X+
    1444:	fc 91       	ld	r31, X
    1446:	06 80       	ldd	r0, Z+6	; 0x06
    1448:	f7 81       	ldd	r31, Z+7	; 0x07
    144a:	e0 2d       	mov	r30, r0
    144c:	19 95       	eicall
    144e:	99 27       	eor	r25, r25
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	f9 f0       	breq	.+62     	; 0x1494 <_ZN9task_user3runEv+0xd6>
    1456:	03 97       	sbiw	r24, 0x03	; 3
    1458:	09 f0       	breq	.+2      	; 0x145c <_ZN9task_user3runEv+0x9e>
    145a:	61 c2       	rjmp	.+1218   	; 0x191e <_ZN9task_user3runEv+0x560>
    145c:	6a e0       	ldi	r22, 0x0A	; 10
    145e:	f7 01       	movw	r30, r14
    1460:	86 81       	ldd	r24, Z+6	; 0x06
    1462:	97 81       	ldd	r25, Z+7	; 0x07
    1464:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1468:	7c 01       	movw	r14, r24
    146a:	6f ec       	ldi	r22, 0xCF	; 207
    146c:	74 e0       	ldi	r23, 0x04	; 4
    146e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1472:	66 e0       	ldi	r22, 0x06	; 6
    1474:	c7 01       	movw	r24, r14
    1476:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	88 ed       	ldi	r24, 0xD8	; 216
    147e:	08 b6       	in	r0, 0x38	; 56
    1480:	18 be       	out	0x38, r1	; 56
    1482:	84 bf       	out	0x34, r24	; 52
    1484:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1488:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    148c:	81 fd       	sbrc	r24, 1
    148e:	fc cf       	rjmp	.-8      	; 0x1488 <_ZN9task_user3runEv+0xca>
    1490:	08 be       	out	0x38, r0	; 56
    1492:	ff cf       	rjmp	.-2      	; 0x1492 <_ZN9task_user3runEv+0xd4>
    1494:	c7 01       	movw	r24, r14
    1496:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN9task_user18print_help_messageEv>
    149a:	d7 01       	movw	r26, r14
    149c:	1c 96       	adiw	r26, 0x0c	; 12
    149e:	1c 93       	st	X, r17
    14a0:	1c 97       	sbiw	r26, 0x0c	; 12
    14a2:	1d 96       	adiw	r26, 0x0d	; 13
    14a4:	1c 93       	st	X, r17
    14a6:	3b c2       	rjmp	.+1142   	; 0x191e <_ZN9task_user3runEv+0x560>
    14a8:	88 ef       	ldi	r24, 0xF8	; 248
    14aa:	90 e2       	ldi	r25, 0x20	; 32
    14ac:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <_ZN9task_user3runEv+0xf8>
    14b4:	34 c2       	rjmp	.+1128   	; 0x191e <_ZN9task_user3runEv+0x560>
    14b6:	d7 01       	movw	r26, r14
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	17 97       	sbiw	r26, 0x07	; 7
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	c2 80       	ldd	r12, Z+2	; 0x02
    14c8:	d3 80       	ldd	r13, Z+3	; 0x03
    14ca:	88 ef       	ldi	r24, 0xF8	; 248
    14cc:	90 e2       	ldi	r25, 0x20	; 32
    14ce:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
    14d2:	68 2f       	mov	r22, r24
    14d4:	f7 01       	movw	r30, r14
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	97 81       	ldd	r25, Z+7	; 0x07
    14da:	f6 01       	movw	r30, r12
    14dc:	19 95       	eicall
    14de:	1f c2       	rjmp	.+1086   	; 0x191e <_ZN9task_user3runEv+0x560>
    14e0:	86 81       	ldd	r24, Z+6	; 0x06
    14e2:	97 81       	ldd	r25, Z+7	; 0x07
    14e4:	dc 01       	movw	r26, r24
    14e6:	ed 91       	ld	r30, X+
    14e8:	fc 91       	ld	r31, X
    14ea:	04 80       	ldd	r0, Z+4	; 0x04
    14ec:	f5 81       	ldd	r31, Z+5	; 0x05
    14ee:	e0 2d       	mov	r30, r0
    14f0:	19 95       	eicall
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <_ZN9task_user3runEv+0x13a>
    14f6:	13 c2       	rjmp	.+1062   	; 0x191e <_ZN9task_user3runEv+0x560>
    14f8:	f7 01       	movw	r30, r14
    14fa:	86 81       	ldd	r24, Z+6	; 0x06
    14fc:	97 81       	ldd	r25, Z+7	; 0x07
    14fe:	dc 01       	movw	r26, r24
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	06 80       	ldd	r0, Z+6	; 0x06
    1506:	f7 81       	ldd	r31, Z+7	; 0x07
    1508:	e0 2d       	mov	r30, r0
    150a:	19 95       	eicall
    150c:	bc 01       	movw	r22, r24
    150e:	fc 01       	movw	r30, r24
    1510:	ff 27       	eor	r31, r31
    1512:	7b 97       	sbiw	r30, 0x1b	; 27
    1514:	ec 35       	cpi	r30, 0x5C	; 92
    1516:	f1 05       	cpc	r31, r1
    1518:	08 f0       	brcs	.+2      	; 0x151c <_ZN9task_user3runEv+0x15e>
    151a:	ca c1       	rjmp	.+916    	; 0x18b0 <_ZN9task_user3runEv+0x4f2>
    151c:	88 27       	eor	r24, r24
    151e:	e7 5f       	subi	r30, 0xF7	; 247
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	8f 4f       	sbci	r24, 0xFF	; 255
    1524:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__tablejump2__>
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    1530:	bc 01       	movw	r22, r24
    1532:	f7 01       	movw	r30, r14
    1534:	86 81       	ldd	r24, Z+6	; 0x06
    1536:	97 81       	ldd	r25, Z+7	; 0x07
    1538:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZlsR8emstreamR10time_stamp>
    153c:	66 e0       	ldi	r22, 0x06	; 6
    153e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1542:	ed c1       	rjmp	.+986    	; 0x191e <_ZN9task_user3runEv+0x560>
    1544:	1f 82       	std	Y+7, r1	; 0x07
    1546:	18 86       	std	Y+8, r1	; 0x08
    1548:	19 86       	std	Y+9, r1	; 0x09
    154a:	1a 86       	std	Y+10, r1	; 0x0a
    154c:	1b 86       	std	Y+11, r1	; 0x0b
    154e:	1c 86       	std	Y+12, r1	; 0x0c
    1550:	0e 94 c7 14 	call	0x298e	; 0x298e <xPortGetFreeHeapSize>
    1554:	3c 01       	movw	r6, r24
    1556:	ce 01       	movw	r24, r28
    1558:	07 96       	adiw	r24, 0x07	; 7
    155a:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    155e:	2c 01       	movw	r4, r24
    1560:	66 e0       	ldi	r22, 0x06	; 6
    1562:	d7 01       	movw	r26, r14
    1564:	16 96       	adiw	r26, 0x06	; 6
    1566:	8d 91       	ld	r24, X+
    1568:	9c 91       	ld	r25, X
    156a:	17 97       	sbiw	r26, 0x07	; 7
    156c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1570:	6a e0       	ldi	r22, 0x0A	; 10
    1572:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1576:	6c 01       	movw	r12, r24
    1578:	60 e1       	ldi	r22, 0x10	; 16
    157a:	74 e0       	ldi	r23, 0x04	; 4
    157c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1580:	6a e0       	ldi	r22, 0x0A	; 10
    1582:	c6 01       	movw	r24, r12
    1584:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1588:	6c 01       	movw	r12, r24
    158a:	64 e0       	ldi	r22, 0x04	; 4
    158c:	74 e0       	ldi	r23, 0x04	; 4
    158e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1592:	66 e0       	ldi	r22, 0x06	; 6
    1594:	c6 01       	movw	r24, r12
    1596:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    159a:	6a e0       	ldi	r22, 0x0A	; 10
    159c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15a0:	6c 01       	movw	r12, r24
    15a2:	6d ef       	ldi	r22, 0xFD	; 253
    15a4:	73 e0       	ldi	r23, 0x03	; 3
    15a6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15aa:	b2 01       	movw	r22, r4
    15ac:	c6 01       	movw	r24, r12
    15ae:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZlsR8emstreamR10time_stamp>
    15b2:	6a e0       	ldi	r22, 0x0A	; 10
    15b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15b8:	6c 01       	movw	r12, r24
    15ba:	6f ee       	ldi	r22, 0xEF	; 239
    15bc:	73 e0       	ldi	r23, 0x03	; 3
    15be:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15c2:	b3 01       	movw	r22, r6
    15c4:	c6 01       	movw	r24, r12
    15c6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    15ca:	6a e0       	ldi	r22, 0x0A	; 10
    15cc:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15d0:	6c 01       	movw	r12, r24
    15d2:	6d ee       	ldi	r22, 0xED	; 237
    15d4:	73 e0       	ldi	r23, 0x03	; 3
    15d6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15da:	4f ef       	ldi	r20, 0xFF	; 255
    15dc:	5f e0       	ldi	r21, 0x0F	; 15
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	c6 01       	movw	r24, r12
    15e4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
    15e8:	f4 01       	movw	r30, r8
    15ea:	60 a4       	ldd	r6, Z+40	; 0x28
    15ec:	71 a4       	ldd	r7, Z+41	; 0x29
    15ee:	6a e0       	ldi	r22, 0x0A	; 10
    15f0:	d7 01       	movw	r26, r14
    15f2:	16 96       	adiw	r26, 0x06	; 6
    15f4:	8d 91       	ld	r24, X+
    15f6:	9c 91       	ld	r25, X
    15f8:	17 97       	sbiw	r26, 0x07	; 7
    15fa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15fe:	6c 01       	movw	r12, r24
    1600:	62 ee       	ldi	r22, 0xE2	; 226
    1602:	73 e0       	ldi	r23, 0x03	; 3
    1604:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1608:	b3 01       	movw	r22, r6
    160a:	c6 01       	movw	r24, r12
    160c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1610:	66 e0       	ldi	r22, 0x06	; 6
    1612:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    161c:	f7 01       	movw	r30, r14
    161e:	c6 80       	ldd	r12, Z+6	; 0x06
    1620:	d7 80       	ldd	r13, Z+7	; 0x07
    1622:	6a e0       	ldi	r22, 0x0A	; 10
    1624:	c6 01       	movw	r24, r12
    1626:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    162a:	3c 01       	movw	r6, r24
    162c:	67 ed       	ldi	r22, 0xD7	; 215
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1634:	6a e0       	ldi	r22, 0x0A	; 10
    1636:	c3 01       	movw	r24, r6
    1638:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    163c:	3c 01       	movw	r6, r24
    163e:	60 ed       	ldi	r22, 0xD0	; 208
    1640:	73 e0       	ldi	r23, 0x03	; 3
    1642:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1646:	66 e0       	ldi	r22, 0x06	; 6
    1648:	c3 01       	movw	r24, r6
    164a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    164e:	6a e0       	ldi	r22, 0x0A	; 10
    1650:	c6 01       	movw	r24, r12
    1652:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1656:	3c 01       	movw	r6, r24
    1658:	6f eb       	ldi	r22, 0xBF	; 191
    165a:	73 e0       	ldi	r23, 0x03	; 3
    165c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1660:	6a e0       	ldi	r22, 0x0A	; 10
    1662:	c3 01       	movw	r24, r6
    1664:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1668:	3c 01       	movw	r6, r24
    166a:	63 eb       	ldi	r22, 0xB3	; 179
    166c:	73 e0       	ldi	r23, 0x03	; 3
    166e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1672:	6a e0       	ldi	r22, 0x0A	; 10
    1674:	c3 01       	movw	r24, r6
    1676:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    167a:	3c 01       	movw	r6, r24
    167c:	6d ea       	ldi	r22, 0xAD	; 173
    167e:	73 e0       	ldi	r23, 0x03	; 3
    1680:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1684:	66 e0       	ldi	r22, 0x06	; 6
    1686:	c3 01       	movw	r24, r6
    1688:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    168c:	6a e0       	ldi	r22, 0x0A	; 10
    168e:	c6 01       	movw	r24, r12
    1690:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1694:	3c 01       	movw	r6, r24
    1696:	6c e9       	ldi	r22, 0x9C	; 156
    1698:	73 e0       	ldi	r23, 0x03	; 3
    169a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    169e:	6a e0       	ldi	r22, 0x0A	; 10
    16a0:	c3 01       	movw	r24, r6
    16a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16a6:	3c 01       	movw	r6, r24
    16a8:	60 e9       	ldi	r22, 0x90	; 144
    16aa:	73 e0       	ldi	r23, 0x03	; 3
    16ac:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16b0:	6a e0       	ldi	r22, 0x0A	; 10
    16b2:	c3 01       	movw	r24, r6
    16b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16b8:	3c 01       	movw	r6, r24
    16ba:	6a e8       	ldi	r22, 0x8A	; 138
    16bc:	73 e0       	ldi	r23, 0x03	; 3
    16be:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16c2:	66 e0       	ldi	r22, 0x06	; 6
    16c4:	c3 01       	movw	r24, r6
    16c6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16ca:	d5 01       	movw	r26, r10
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	19 f0       	breq	.+6      	; 0x16da <_ZN9task_user3runEv+0x31c>
    16d4:	b6 01       	movw	r22, r12
    16d6:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8frt_task20print_status_in_listEP8emstream>
    16da:	0e 94 2a 1b 	call	0x3654	; 0x3654 <xTaskGetIdleTaskHandle>
    16de:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <uxTaskGetStackHighWaterMark>
    16e2:	08 2f       	mov	r16, r24
    16e4:	6a e0       	ldi	r22, 0x0A	; 10
    16e6:	c6 01       	movw	r24, r12
    16e8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16ec:	6c 01       	movw	r12, r24
    16ee:	6f e7       	ldi	r22, 0x7F	; 127
    16f0:	73 e0       	ldi	r23, 0x03	; 3
    16f2:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16f6:	60 2f       	mov	r22, r16
    16f8:	c6 01       	movw	r24, r12
    16fa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN8emstreamlsEh>
    16fe:	6a e0       	ldi	r22, 0x0A	; 10
    1700:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1704:	6c 01       	movw	r12, r24
    1706:	6d e7       	ldi	r22, 0x7D	; 125
    1708:	73 e0       	ldi	r23, 0x03	; 3
    170a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    170e:	64 e6       	ldi	r22, 0x64	; 100
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	c6 01       	movw	r24, r12
    1714:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1718:	6a e0       	ldi	r22, 0x0A	; 10
    171a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    171e:	6c 01       	movw	r12, r24
    1720:	6a e7       	ldi	r22, 0x7A	; 122
    1722:	73 e0       	ldi	r23, 0x03	; 3
    1724:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1728:	66 e0       	ldi	r22, 0x06	; 6
    172a:	c6 01       	movw	r24, r12
    172c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1730:	f6 c0       	rjmp	.+492    	; 0x191e <_ZN9task_user3runEv+0x560>
    1732:	f7 01       	movw	r30, r14
    1734:	c6 80       	ldd	r12, Z+6	; 0x06
    1736:	d7 80       	ldd	r13, Z+7	; 0x07
    1738:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    173c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	19 f0       	breq	.+6      	; 0x174a <_ZN9task_user3runEv+0x38c>
    1744:	b6 01       	movw	r22, r12
    1746:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN8frt_task19print_stack_in_listEP8emstream>
    174a:	6a e0       	ldi	r22, 0x0A	; 10
    174c:	c6 01       	movw	r24, r12
    174e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1752:	3c 01       	movw	r6, r24
    1754:	60 e4       	ldi	r22, 0x40	; 64
    1756:	74 e0       	ldi	r23, 0x04	; 4
    1758:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    175c:	6a e0       	ldi	r22, 0x0A	; 10
    175e:	c3 01       	movw	r24, r6
    1760:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1764:	3c 01       	movw	r6, r24
    1766:	65 e3       	ldi	r22, 0x35	; 53
    1768:	74 e0       	ldi	r23, 0x04	; 4
    176a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    176e:	6a e0       	ldi	r22, 0x0A	; 10
    1770:	c3 01       	movw	r24, r6
    1772:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1776:	3c 01       	movw	r6, r24
    1778:	6f e2       	ldi	r22, 0x2F	; 47
    177a:	74 e0       	ldi	r23, 0x04	; 4
    177c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	c3 01       	movw	r24, r6
    1784:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1788:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <portStackTopForTask>
    178c:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <portStackTopForTask+0x1>
    1790:	bc 01       	movw	r22, r24
    1792:	6f 5f       	subi	r22, 0xFF	; 255
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	01 e1       	ldi	r16, 0x11	; 17
    1798:	21 2f       	mov	r18, r17
    179a:	a6 01       	movw	r20, r12
    179c:	83 56       	subi	r24, 0x63	; 99
    179e:	91 09       	sbc	r25, r1
    17a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z15hex_dump_memoryPhS_P8emstreambh>
    17a4:	bc c0       	rjmp	.+376    	; 0x191e <_ZN9task_user3runEv+0x560>
    17a6:	c7 01       	movw	r24, r14
    17a8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN9task_user18print_help_messageEv>
    17ac:	b8 c0       	rjmp	.+368    	; 0x191e <_ZN9task_user3runEv+0x560>
    17ae:	6a e0       	ldi	r22, 0x0A	; 10
    17b0:	d7 01       	movw	r26, r14
    17b2:	16 96       	adiw	r26, 0x06	; 6
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	17 97       	sbiw	r26, 0x07	; 7
    17ba:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17be:	6c 01       	movw	r12, r24
    17c0:	6d eb       	ldi	r22, 0xBD	; 189
    17c2:	74 e0       	ldi	r23, 0x04	; 4
    17c4:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    17c8:	66 e0       	ldi	r22, 0x06	; 6
    17ca:	c6 01       	movw	r24, r12
    17cc:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17d0:	f7 01       	movw	r30, r14
    17d2:	14 86       	std	Z+12, r1	; 0x0c
    17d4:	15 86       	std	Z+13, r1	; 0x0d
    17d6:	a3 c0       	rjmp	.+326    	; 0x191e <_ZN9task_user3runEv+0x560>
    17d8:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    17dc:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	0f 92       	push	r0
    17e6:	10 83       	st	Z, r17
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	6a e0       	ldi	r22, 0x0A	; 10
    17ee:	d7 01       	movw	r26, r14
    17f0:	16 96       	adiw	r26, 0x06	; 6
    17f2:	8d 91       	ld	r24, X+
    17f4:	9c 91       	ld	r25, X
    17f6:	17 97       	sbiw	r26, 0x07	; 7
    17f8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17fc:	6c 01       	movw	r12, r24
    17fe:	60 eb       	ldi	r22, 0xB0	; 176
    1800:	74 e0       	ldi	r23, 0x04	; 4
    1802:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1806:	66 e0       	ldi	r22, 0x06	; 6
    1808:	c6 01       	movw	r24, r12
    180a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    180e:	87 c0       	rjmp	.+270    	; 0x191e <_ZN9task_user3runEv+0x560>
    1810:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1814:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	0f 92       	push	r0
    181e:	10 83       	st	Z, r17
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	6a e0       	ldi	r22, 0x0A	; 10
    1826:	f7 01       	movw	r30, r14
    1828:	86 81       	ldd	r24, Z+6	; 0x06
    182a:	97 81       	ldd	r25, Z+7	; 0x07
    182c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1830:	6c 01       	movw	r12, r24
    1832:	6f e9       	ldi	r22, 0x9F	; 159
    1834:	74 e0       	ldi	r23, 0x04	; 4
    1836:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    183a:	66 e0       	ldi	r22, 0x06	; 6
    183c:	c6 01       	movw	r24, r12
    183e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1842:	6d c0       	rjmp	.+218    	; 0x191e <_ZN9task_user3runEv+0x560>
    1844:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    1848:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	0f 92       	push	r0
    1852:	10 83       	st	Z, r17
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	6a e0       	ldi	r22, 0x0A	; 10
    185a:	d7 01       	movw	r26, r14
    185c:	16 96       	adiw	r26, 0x06	; 6
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	17 97       	sbiw	r26, 0x07	; 7
    1864:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1868:	6c 01       	movw	r12, r24
    186a:	60 e9       	ldi	r22, 0x90	; 144
    186c:	74 e0       	ldi	r23, 0x04	; 4
    186e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1872:	66 e0       	ldi	r22, 0x06	; 6
    1874:	c6 01       	movw	r24, r12
    1876:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    187a:	51 c0       	rjmp	.+162    	; 0x191e <_ZN9task_user3runEv+0x560>
    187c:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1880:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	0f 92       	push	r0
    188a:	10 83       	st	Z, r17
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	6a e0       	ldi	r22, 0x0A	; 10
    1892:	f7 01       	movw	r30, r14
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	97 81       	ldd	r25, Z+7	; 0x07
    1898:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    189c:	6c 01       	movw	r12, r24
    189e:	68 e6       	ldi	r22, 0x68	; 104
    18a0:	74 e0       	ldi	r23, 0x04	; 4
    18a2:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	c6 01       	movw	r24, r12
    18aa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18ae:	37 c0       	rjmp	.+110    	; 0x191e <_ZN9task_user3runEv+0x560>
    18b0:	d7 01       	movw	r26, r14
    18b2:	16 96       	adiw	r26, 0x06	; 6
    18b4:	8d 91       	ld	r24, X+
    18b6:	9c 91       	ld	r25, X
    18b8:	17 97       	sbiw	r26, 0x07	; 7
    18ba:	dc 01       	movw	r26, r24
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	02 80       	ldd	r0, Z+2	; 0x02
    18c2:	f3 81       	ldd	r31, Z+3	; 0x03
    18c4:	e0 2d       	mov	r30, r0
    18c6:	19 95       	eicall
    18c8:	6a e0       	ldi	r22, 0x0A	; 10
    18ca:	f7 01       	movw	r30, r14
    18cc:	86 81       	ldd	r24, Z+6	; 0x06
    18ce:	97 81       	ldd	r25, Z+7	; 0x07
    18d0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18d4:	6c 01       	movw	r12, r24
    18d6:	62 e6       	ldi	r22, 0x62	; 98
    18d8:	74 e0       	ldi	r23, 0x04	; 4
    18da:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18de:	66 e0       	ldi	r22, 0x06	; 6
    18e0:	c6 01       	movw	r24, r12
    18e2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18e6:	1b c0       	rjmp	.+54     	; 0x191e <_ZN9task_user3runEv+0x560>
    18e8:	6a e0       	ldi	r22, 0x0A	; 10
    18ea:	86 81       	ldd	r24, Z+6	; 0x06
    18ec:	97 81       	ldd	r25, Z+7	; 0x07
    18ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18f2:	7c 01       	movw	r14, r24
    18f4:	65 e4       	ldi	r22, 0x45	; 69
    18f6:	74 e0       	ldi	r23, 0x04	; 4
    18f8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18fc:	66 e0       	ldi	r22, 0x06	; 6
    18fe:	c7 01       	movw	r24, r14
    1900:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	88 ed       	ldi	r24, 0xD8	; 216
    1908:	08 b6       	in	r0, 0x38	; 56
    190a:	18 be       	out	0x38, r1	; 56
    190c:	84 bf       	out	0x34, r24	; 52
    190e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1912:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1916:	81 fd       	sbrc	r24, 1
    1918:	fc cf       	rjmp	.-8      	; 0x1912 <_ZN9task_user3runEv+0x554>
    191a:	08 be       	out	0x38, r0	; 56
    191c:	ff cf       	rjmp	.-2      	; 0x191c <_ZN9task_user3runEv+0x55e>
    191e:	f7 01       	movw	r30, r14
    1920:	86 85       	ldd	r24, Z+14	; 0x0e
    1922:	97 85       	ldd	r25, Z+15	; 0x0f
    1924:	a0 89       	ldd	r26, Z+16	; 0x10
    1926:	b1 89       	ldd	r27, Z+17	; 0x11
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	a1 1d       	adc	r26, r1
    192c:	b1 1d       	adc	r27, r1
    192e:	86 87       	std	Z+14, r24	; 0x0e
    1930:	97 87       	std	Z+15, r25	; 0x0f
    1932:	a0 8b       	std	Z+16, r26	; 0x10
    1934:	b1 8b       	std	Z+17, r27	; 0x11
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <vTaskDelay>
    1942:	67 cd       	rjmp	.-1330   	; 0x1412 <_ZN9task_user3runEv+0x54>

00001944 <_ZN22task_system_controller3runEv>:
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	00 d0       	rcall	.+0      	; 0x194a <_ZN22task_system_controller3runEv+0x6>
    194a:	1f 92       	push	r1
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8c 01       	movw	r16, r24
    1952:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTaskGetTickCount>
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	0f 2e       	mov	r0, r31
    1960:	f3 e0       	ldi	r31, 0x03	; 3
    1962:	af 2e       	mov	r10, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	0f 2e       	mov	r0, r31
    1968:	fc ed       	ldi	r31, 0xDC	; 220
    196a:	ef 2e       	mov	r14, r31
    196c:	f1 2c       	mov	r15, r1
    196e:	f0 2d       	mov	r31, r0
    1970:	0f 2e       	mov	r0, r31
    1972:	f4 e6       	ldi	r31, 0x64	; 100
    1974:	4f 2e       	mov	r4, r31
    1976:	51 2c       	mov	r5, r1
    1978:	f0 2d       	mov	r31, r0
    197a:	68 94       	set
    197c:	bb 24       	eor	r11, r11
    197e:	b2 f8       	bld	r11, 2
    1980:	0f 2e       	mov	r0, r31
    1982:	f4 e6       	ldi	r31, 0x64	; 100
    1984:	7f 2e       	mov	r7, r31
    1986:	f0 2d       	mov	r31, r0
    1988:	33 24       	eor	r3, r3
    198a:	33 94       	inc	r3
    198c:	0f 2e       	mov	r0, r31
    198e:	f4 e2       	ldi	r31, 0x24	; 36
    1990:	cf 2e       	mov	r12, r31
    1992:	dd 24       	eor	r13, r13
    1994:	da 94       	dec	r13
    1996:	f0 2d       	mov	r31, r0
    1998:	68 94       	set
    199a:	66 24       	eor	r6, r6
    199c:	61 f8       	bld	r6, 1
    199e:	d8 01       	movw	r26, r16
    19a0:	1c 96       	adiw	r26, 0x0c	; 12
    19a2:	8c 91       	ld	r24, X
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	09 f4       	brne	.+2      	; 0x19aa <_ZN22task_system_controller3runEv+0x66>
    19a8:	b3 c0       	rjmp	.+358    	; 0x1b10 <_ZN22task_system_controller3runEv+0x1cc>
    19aa:	30 f4       	brcc	.+12     	; 0x19b8 <_ZN22task_system_controller3runEv+0x74>
    19ac:	88 23       	and	r24, r24
    19ae:	59 f0       	breq	.+22     	; 0x19c6 <_ZN22task_system_controller3runEv+0x82>
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <_ZN22task_system_controller3runEv+0x72>
    19b4:	66 c0       	rjmp	.+204    	; 0x1a82 <_ZN22task_system_controller3runEv+0x13e>
    19b6:	99 c1       	rjmp	.+818    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	09 f4       	brne	.+2      	; 0x19be <_ZN22task_system_controller3runEv+0x7a>
    19bc:	d9 c0       	rjmp	.+434    	; 0x1b70 <_ZN22task_system_controller3runEv+0x22c>
    19be:	84 36       	cpi	r24, 0x64	; 100
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <_ZN22task_system_controller3runEv+0x80>
    19c2:	73 c1       	rjmp	.+742    	; 0x1caa <_ZN22task_system_controller3runEv+0x366>
    19c4:	92 c1       	rjmp	.+804    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    19c6:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    19ca:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	0f 92       	push	r0
    19d4:	10 82       	st	Z, r1
    19d6:	11 82       	std	Z+1, r1	; 0x01
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	0f 92       	push	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    19ea:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    19ee:	80 81       	ld	r24, Z
    19f0:	88 23       	and	r24, r24
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <_ZN22task_system_controller3runEv+0xb2>
    19f4:	7a c1       	rjmp	.+756    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    19f6:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    19fa:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	0f 92       	push	r0
    1a04:	10 82       	st	Z, r1
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    1a0e:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	0f 92       	push	r0
    1a18:	10 82       	st	Z, r1
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1a22:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	0f 92       	push	r0
    1a2c:	e0 82       	st	Z, r14
    1a2e:	f1 82       	std	Z+1, r15	; 0x01
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	0f 92       	push	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
    1a42:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
    1a46:	80 81       	ld	r24, Z
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <_ZN22task_system_controller3runEv+0x10a>
    1a4c:	4e c1       	rjmp	.+668    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    1a54:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1a58:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    1a68:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	0f 92       	push	r0
    1a72:	80 83       	st	Z, r24
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	34 86       	std	Z+12, r3	; 0x0c
    1a7e:	35 86       	std	Z+13, r3	; 0x0d
    1a80:	34 c1       	rjmp	.+616    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1a82:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    1a86:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	0f 92       	push	r0
    1a90:	10 82       	st	Z, r1
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1a9a:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	0f 92       	push	r0
    1aa4:	c0 82       	st	Z, r12
    1aa6:	d1 82       	std	Z+1, r13	; 0x01
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	0f 92       	push	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1aba:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	a9 f0       	breq	.+42     	; 0x1aee <_ZN22task_system_controller3runEv+0x1aa>
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	0f 92       	push	r0
    1aca:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1ace:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	d8 01       	movw	r26, r16
    1adc:	52 96       	adiw	r26, 0x12	; 18
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
    1ae2:	53 97       	sbiw	r26, 0x13	; 19
    1ae4:	1c 96       	adiw	r26, 0x0c	; 12
    1ae6:	6c 92       	st	X, r6
    1ae8:	1c 97       	sbiw	r26, 0x0c	; 12
    1aea:	1d 96       	adiw	r26, 0x0d	; 13
    1aec:	6c 92       	st	X, r6
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	0f 92       	push	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1afc:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1b00:	80 81       	ld	r24, Z
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <_ZN22task_system_controller3runEv+0x1c4>
    1b06:	f1 c0       	rjmp	.+482    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	14 86       	std	Z+12, r1	; 0x0c
    1b0c:	15 86       	std	Z+13, r1	; 0x0d
    1b0e:	ed c0       	rjmp	.+474    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1b10:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b14:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	0f 92       	push	r0
    1b1e:	10 82       	st	Z, r1
    1b20:	11 82       	std	Z+1, r1	; 0x01
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	68 ec       	ldi	r22, 0xC8	; 200
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <vTaskDelay>
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	0f 92       	push	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1b40:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1b44:	80 81       	ld	r24, Z
    1b46:	88 23       	and	r24, r24
    1b48:	61 f0       	breq	.+24     	; 0x1b62 <_ZN22task_system_controller3runEv+0x21e>
    1b4a:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b4e:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	0f 92       	push	r0
    1b58:	e0 82       	st	Z, r14
    1b5a:	f1 82       	std	Z+1, r15	; 0x01
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	c4 c0       	rjmp	.+392    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1b62:	d8 01       	movw	r26, r16
    1b64:	1c 96       	adiw	r26, 0x0c	; 12
    1b66:	ac 92       	st	X, r10
    1b68:	1c 97       	sbiw	r26, 0x0c	; 12
    1b6a:	1d 96       	adiw	r26, 0x0d	; 13
    1b6c:	ac 92       	st	X, r10
    1b6e:	bd c0       	rjmp	.+378    	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1b70:	f8 01       	movw	r30, r16
    1b72:	22 89       	ldd	r18, Z+18	; 0x12
    1b74:	33 89       	ldd	r19, Z+19	; 0x13
    1b76:	33 23       	and	r19, r19
    1b78:	14 f4       	brge	.+4      	; 0x1b7e <_ZN22task_system_controller3runEv+0x23a>
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	35 95       	asr	r19
    1b80:	27 95       	ror	r18
    1b82:	d8 01       	movw	r26, r16
    1b84:	54 96       	adiw	r26, 0x14	; 20
    1b86:	2d 93       	st	X+, r18
    1b88:	3c 93       	st	X, r19
    1b8a:	55 97       	sbiw	r26, 0x15	; 21
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	0f 92       	push	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1b9a:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	28 1b       	sub	r18, r24
    1ba4:	39 0b       	sbc	r19, r25
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	26 8b       	std	Z+22, r18	; 0x16
    1baa:	37 8b       	std	Z+23, r19	; 0x17
    1bac:	40 8d       	ldd	r20, Z+24	; 0x18
    1bae:	51 8d       	ldd	r21, Z+25	; 0x19
    1bb0:	42 0f       	add	r20, r18
    1bb2:	53 1f       	adc	r21, r19
    1bb4:	40 8f       	std	Z+24, r20	; 0x18
    1bb6:	51 8f       	std	Z+25, r21	; 0x19
    1bb8:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1bbc:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	0f 92       	push	r0
    1bc6:	5c 96       	adiw	r26, 0x1c	; 28
    1bc8:	6d 91       	ld	r22, X+
    1bca:	7c 91       	ld	r23, X
    1bcc:	5d 97       	sbiw	r26, 0x1d	; 29
    1bce:	46 9f       	mul	r20, r22
    1bd0:	c0 01       	movw	r24, r0
    1bd2:	47 9f       	mul	r20, r23
    1bd4:	90 0d       	add	r25, r0
    1bd6:	56 9f       	mul	r21, r22
    1bd8:	90 0d       	add	r25, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	b2 01       	movw	r22, r4
    1bde:	0e 94 0e 20 	call	0x401c	; 0x401c <__divmodhi4>
    1be2:	d8 01       	movw	r26, r16
    1be4:	5a 96       	adiw	r26, 0x1a	; 26
    1be6:	4d 91       	ld	r20, X+
    1be8:	5c 91       	ld	r21, X
    1bea:	5b 97       	sbiw	r26, 0x1b	; 27
    1bec:	24 9f       	mul	r18, r20
    1bee:	c0 01       	movw	r24, r0
    1bf0:	25 9f       	mul	r18, r21
    1bf2:	90 0d       	add	r25, r0
    1bf4:	34 9f       	mul	r19, r20
    1bf6:	90 0d       	add	r25, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	68 0f       	add	r22, r24
    1bfc:	79 1f       	adc	r23, r25
    1bfe:	60 83       	st	Z, r22
    1c00:	71 83       	std	Z+1, r23	; 0x01
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	0f 92       	push	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1c14:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1c18:	80 81       	ld	r24, Z
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	0c c0       	rjmp	.+24     	; 0x1c36 <_ZN22task_system_controller3runEv+0x2f2>
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	0f 92       	push	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
    1c2c:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
    1c30:	80 81       	ld	r24, Z
    1c32:	88 23       	and	r24, r24
    1c34:	91 f0       	breq	.+36     	; 0x1c5a <_ZN22task_system_controller3runEv+0x316>
    1c36:	f8 01       	movw	r30, r16
    1c38:	86 80       	ldd	r8, Z+6	; 0x06
    1c3a:	97 80       	ldd	r9, Z+7	; 0x07
    1c3c:	6e e6       	ldi	r22, 0x6E	; 110
    1c3e:	70 e2       	ldi	r23, 0x20	; 32
    1c40:	c4 01       	movw	r24, r8
    1c42:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1c46:	66 e0       	ldi	r22, 0x06	; 6
    1c48:	c4 01       	movw	r24, r8
    1c4a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1c4e:	d8 01       	movw	r26, r16
    1c50:	1c 96       	adiw	r26, 0x0c	; 12
    1c52:	7c 92       	st	X, r7
    1c54:	1c 97       	sbiw	r26, 0x0c	; 12
    1c56:	1d 96       	adiw	r26, 0x0d	; 13
    1c58:	7c 92       	st	X, r7
    1c5a:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1c5e:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	0f 92       	push	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 23       	and	r24, r24
    1c70:	49 f0       	breq	.+18     	; 0x1c84 <_ZN22task_system_controller3runEv+0x340>
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	0f 92       	push	r0
    1c78:	10 82       	st	Z, r1
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	f8 01       	movw	r30, r16
    1c80:	14 86       	std	Z+12, r1	; 0x0c
    1c82:	15 86       	std	Z+13, r1	; 0x0d
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	0f 92       	push	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1c92:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	39 f1       	breq	.+78     	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	1c 96       	adiw	r26, 0x0c	; 12
    1ca0:	bc 92       	st	X, r11
    1ca2:	1c 97       	sbiw	r26, 0x0c	; 12
    1ca4:	1d 96       	adiw	r26, 0x0d	; 13
    1ca6:	bc 92       	st	X, r11
    1ca8:	20 c0       	rjmp	.+64     	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1caa:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1cae:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	0f 92       	push	r0
    1cb8:	10 82       	st	Z, r1
    1cba:	11 82       	std	Z+1, r1	; 0x01
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1cc4:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	0f 92       	push	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 23       	and	r24, r24
    1cd6:	49 f0       	breq	.+18     	; 0x1cea <_ZN22task_system_controller3runEv+0x3a6>
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	0f 92       	push	r0
    1cde:	10 82       	st	Z, r1
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	14 86       	std	Z+12, r1	; 0x0c
    1ce8:	15 86       	std	Z+13, r1	; 0x0d
    1cea:	f8 01       	movw	r30, r16
    1cec:	86 85       	ldd	r24, Z+14	; 0x0e
    1cee:	97 85       	ldd	r25, Z+15	; 0x0f
    1cf0:	a0 89       	ldd	r26, Z+16	; 0x10
    1cf2:	b1 89       	ldd	r27, Z+17	; 0x11
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	a1 1d       	adc	r26, r1
    1cf8:	b1 1d       	adc	r27, r1
    1cfa:	86 87       	std	Z+14, r24	; 0x0e
    1cfc:	97 87       	std	Z+15, r25	; 0x0f
    1cfe:	a0 8b       	std	Z+16, r26	; 0x10
    1d00:	b1 8b       	std	Z+17, r27	; 0x11
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <vTaskDelayUntil>
    1d12:	45 ce       	rjmp	.-886    	; 0x199e <_ZN22task_system_controller3runEv+0x5a>

00001d14 <_ZN8frt_taskC2EPKchjP8emstream>:
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	2a 97       	sbiw	r28, 0x0a	; 10
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	4c 01       	movw	r8, r24
    1d40:	29 01       	movw	r4, r18
    1d42:	38 01       	movw	r6, r16
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	90 e2       	ldi	r25, 0x20	; 32
    1d48:	f4 01       	movw	r30, r8
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	fb 01       	movw	r30, r22
    1d50:	80 81       	ld	r24, Z
    1d52:	88 23       	and	r24, r24
    1d54:	69 f0       	breq	.+26     	; 0x1d70 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1d56:	de 01       	movw	r26, r28
    1d58:	11 96       	adiw	r26, 0x01	; 1
    1d5a:	31 96       	adiw	r30, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1d60:	99 30       	cpi	r25, 0x09	; 9
    1d62:	39 f0       	breq	.+14     	; 0x1d72 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1d64:	9f 5f       	subi	r25, 0xFF	; 255
    1d66:	8d 93       	st	X+, r24
    1d68:	81 91       	ld	r24, Z+
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	f9 cf       	rjmp	.-14     	; 0x1d60 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	e1 e0       	ldi	r30, 0x01	; 1
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	ec 0f       	add	r30, r28
    1d78:	fd 1f       	adc	r31, r29
    1d7a:	e9 0f       	add	r30, r25
    1d7c:	f1 1d       	adc	r31, r1
    1d7e:	10 82       	st	Z, r1
    1d80:	74 01       	movw	r14, r8
    1d82:	f2 e0       	ldi	r31, 0x02	; 2
    1d84:	ef 0e       	add	r14, r31
    1d86:	f1 1c       	adc	r15, r1
    1d88:	a1 2c       	mov	r10, r1
    1d8a:	b1 2c       	mov	r11, r1
    1d8c:	c1 2c       	mov	r12, r1
    1d8e:	d1 2c       	mov	r13, r1
    1d90:	04 2f       	mov	r16, r20
    1d92:	94 01       	movw	r18, r8
    1d94:	a2 01       	movw	r20, r4
    1d96:	be 01       	movw	r22, r28
    1d98:	6f 5f       	subi	r22, 0xFF	; 255
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	87 e0       	ldi	r24, 0x07	; 7
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	0e 94 cb 19 	call	0x3396	; 0x3396 <xTaskGenericCreate>
    1da4:	f4 01       	movw	r30, r8
    1da6:	66 82       	std	Z+6, r6	; 0x06
    1da8:	77 82       	std	Z+7, r7	; 0x07
    1daa:	40 86       	std	Z+8, r4	; 0x08
    1dac:	51 86       	std	Z+9, r5	; 0x09
    1dae:	20 91 e0 20 	lds	r18, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    1db2:	30 91 e1 20 	lds	r19, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    1db6:	24 83       	std	Z+4, r18	; 0x04
    1db8:	35 83       	std	Z+5, r19	; 0x05
    1dba:	80 92 e0 20 	sts	0x20E0, r8	; 0x8020e0 <last_created_task_pointer>
    1dbe:	90 92 e1 20 	sts	0x20E1, r9	; 0x8020e1 <last_created_task_pointer+0x1>
    1dc2:	14 86       	std	Z+12, r1	; 0x0c
    1dc4:	15 86       	std	Z+13, r1	; 0x0d
    1dc6:	40 90 90 31 	lds	r4, 0x3190	; 0x803190 <portStackTopForTask>
    1dca:	50 90 91 31 	lds	r5, 0x3191	; 0x803191 <portStackTopForTask+0x1>
    1dce:	ff ef       	ldi	r31, 0xFF	; 255
    1dd0:	4f 1a       	sub	r4, r31
    1dd2:	5f 0a       	sbc	r5, r31
    1dd4:	40 92 90 31 	sts	0x3190, r4	; 0x803190 <portStackTopForTask>
    1dd8:	50 92 91 31 	sts	0x3191, r5	; 0x803191 <portStackTopForTask+0x1>
    1ddc:	f4 01       	movw	r30, r8
    1dde:	42 86       	std	Z+10, r4	; 0x0a
    1de0:	53 86       	std	Z+11, r5	; 0x0b
    1de2:	16 86       	std	Z+14, r1	; 0x0e
    1de4:	17 86       	std	Z+15, r1	; 0x0f
    1de6:	10 8a       	std	Z+16, r1	; 0x10
    1de8:	11 8a       	std	Z+17, r1	; 0x11
    1dea:	61 14       	cp	r6, r1
    1dec:	71 04       	cpc	r7, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1df0:	44 c0       	rjmp	.+136    	; 0x1e7a <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	79 f5       	brne	.+94     	; 0x1e54 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1df6:	6a e0       	ldi	r22, 0x0A	; 10
    1df8:	c3 01       	movw	r24, r6
    1dfa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1dfe:	7c 01       	movw	r14, r24
    1e00:	65 e9       	ldi	r22, 0x95	; 149
    1e02:	76 e0       	ldi	r23, 0x06	; 6
    1e04:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e08:	be 01       	movw	r22, r28
    1e0a:	6f 5f       	subi	r22, 0xFF	; 255
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	c7 01       	movw	r24, r14
    1e10:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e14:	6a e0       	ldi	r22, 0x0A	; 10
    1e16:	c7 01       	movw	r24, r14
    1e18:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e1c:	7c 01       	movw	r14, r24
    1e1e:	6c e8       	ldi	r22, 0x8C	; 140
    1e20:	76 e0       	ldi	r23, 0x06	; 6
    1e22:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e26:	6a e0       	ldi	r22, 0x0A	; 10
    1e28:	c7 01       	movw	r24, r14
    1e2a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e2e:	7c 01       	movw	r14, r24
    1e30:	6e e7       	ldi	r22, 0x7E	; 126
    1e32:	76 e0       	ldi	r23, 0x06	; 6
    1e34:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e38:	63 e0       	ldi	r22, 0x03	; 3
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e40:	b2 01       	movw	r22, r4
    1e42:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e4c:	66 e0       	ldi	r22, 0x06	; 6
    1e4e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e52:	13 c0       	rjmp	.+38     	; 0x1e7a <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1e54:	6a e0       	ldi	r22, 0x0A	; 10
    1e56:	c3 01       	movw	r24, r6
    1e58:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e5c:	4c 01       	movw	r8, r24
    1e5e:	69 e6       	ldi	r22, 0x69	; 105
    1e60:	76 e0       	ldi	r23, 0x06	; 6
    1e62:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e66:	be 01       	movw	r22, r28
    1e68:	6f 5f       	subi	r22, 0xFF	; 255
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	c4 01       	movw	r24, r8
    1e6e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e72:	66 e0       	ldi	r22, 0x06	; 6
    1e74:	c4 01       	movw	r24, r8
    1e76:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e7a:	2a 96       	adiw	r28, 0x0a	; 10
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	ef 90       	pop	r14
    1e8c:	df 90       	pop	r13
    1e8e:	cf 90       	pop	r12
    1e90:	bf 90       	pop	r11
    1e92:	af 90       	pop	r10
    1e94:	9f 90       	pop	r9
    1e96:	8f 90       	pop	r8
    1e98:	7f 90       	pop	r7
    1e9a:	6f 90       	pop	r6
    1e9c:	5f 90       	pop	r5
    1e9e:	4f 90       	pop	r4
    1ea0:	08 95       	ret

00001ea2 <_ZN5rs23212clear_screenEv>:
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	ed 91       	ld	r30, X+
    1ea6:	fc 91       	ld	r31, X
    1ea8:	02 80       	ldd	r0, Z+2	; 0x02
    1eaa:	f3 81       	ldd	r31, Z+3	; 0x03
    1eac:	e0 2d       	mov	r30, r0
    1eae:	6c e0       	ldi	r22, 0x0C	; 12
    1eb0:	19 95       	eicall
    1eb2:	08 95       	ret

00001eb4 <_ZN5rs23214check_for_charEv>:
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	ec 01       	movw	r28, r24
    1eba:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ebc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ebe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ec0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	4d 91       	ld	r20, X+
    1ec6:	5c 91       	ld	r21, X
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	42 17       	cp	r20, r18
    1ece:	53 07       	cpc	r21, r19
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <_ZN5rs23214check_for_charEv+0x20>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	08 95       	ret

00001eda <_ZN5rs2327getcharEv>:
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	fc 01       	movw	r30, r24
    1ee0:	c1 8d       	ldd	r28, Z+25	; 0x19
    1ee2:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1ee4:	28 81       	ld	r18, Y
    1ee6:	39 81       	ldd	r19, Y+1	; 0x01
    1ee8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1eea:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1eec:	4d 91       	ld	r20, X+
    1eee:	5c 91       	ld	r21, X
    1ef0:	24 17       	cp	r18, r20
    1ef2:	35 07       	cpc	r19, r21
    1ef4:	e9 f3       	breq	.-6      	; 0x1ef0 <_ZN5rs2327getcharEv+0x16>
    1ef6:	a7 89       	ldd	r26, Z+23	; 0x17
    1ef8:	b0 8d       	ldd	r27, Z+24	; 0x18
    1efa:	0d 90       	ld	r0, X+
    1efc:	bc 91       	ld	r27, X
    1efe:	a0 2d       	mov	r26, r0
    1f00:	a2 0f       	add	r26, r18
    1f02:	b3 1f       	adc	r27, r19
    1f04:	8c 91       	ld	r24, X
    1f06:	2f 5f       	subi	r18, 0xFF	; 255
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	28 83       	st	Y, r18
    1f0c:	39 83       	std	Y+1, r19	; 0x01
    1f0e:	24 36       	cpi	r18, 0x64	; 100
    1f10:	31 05       	cpc	r19, r1
    1f12:	28 f0       	brcs	.+10     	; 0x1f1e <_ZN5rs2327getcharEv+0x44>
    1f14:	01 8c       	ldd	r0, Z+25	; 0x19
    1f16:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	10 82       	st	Z, r1
    1f1c:	11 82       	std	Z+1, r1	; 0x01
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <_ZN5rs2327putcharEc>:
    1f26:	dc 01       	movw	r26, r24
    1f28:	50 96       	adiw	r26, 0x10	; 16
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	51 97       	sbiw	r26, 0x11	; 17
    1f30:	80 81       	ld	r24, Z
    1f32:	54 96       	adiw	r26, 0x14	; 20
    1f34:	4c 91       	ld	r20, X
    1f36:	54 97       	sbiw	r26, 0x14	; 20
    1f38:	84 23       	and	r24, r20
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <_ZN5rs2327putcharEc+0x20>
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <_ZN5rs2327putcharEc+0x2a>
    1f3e:	21 50       	subi	r18, 0x01	; 1
    1f40:	31 09       	sbc	r19, r1
    1f42:	19 f4       	brne	.+6      	; 0x1f4a <_ZN5rs2327putcharEc+0x24>
    1f44:	12 c0       	rjmp	.+36     	; 0x1f6a <_ZN5rs2327putcharEc+0x44>
    1f46:	21 e2       	ldi	r18, 0x21	; 33
    1f48:	3e e4       	ldi	r19, 0x4E	; 78
    1f4a:	90 81       	ld	r25, Z
    1f4c:	94 23       	and	r25, r20
    1f4e:	b9 f3       	breq	.-18     	; 0x1f3e <_ZN5rs2327putcharEc+0x18>
    1f50:	90 81       	ld	r25, Z
    1f52:	56 96       	adiw	r26, 0x16	; 22
    1f54:	8c 91       	ld	r24, X
    1f56:	56 97       	sbiw	r26, 0x16	; 22
    1f58:	89 2b       	or	r24, r25
    1f5a:	80 83       	st	Z, r24
    1f5c:	1e 96       	adiw	r26, 0x0e	; 14
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	1f 97       	sbiw	r26, 0x0f	; 15
    1f64:	60 83       	st	Z, r22
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	08 95       	ret
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	08 95       	ret

00001f6e <_GLOBAL__sub_I_counter>:
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	c8 ef       	ldi	r28, 0xF8	; 248
    1f74:	d0 e2       	ldi	r29, 0x20	; 32
    1f76:	8a e0       	ldi	r24, 0x0A	; 10
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	1b 82       	std	Y+3, r1	; 0x03
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	1c 82       	std	Y+4, r1	; 0x04
    1f82:	1e 82       	std	Y+6, r1	; 0x06
    1f84:	1f 82       	std	Y+7, r1	; 0x07
    1f86:	82 e6       	ldi	r24, 0x62	; 98
    1f88:	90 e2       	ldi	r25, 0x20	; 32
    1f8a:	88 83       	st	Y, r24
    1f8c:	99 83       	std	Y+1, r25	; 0x01
    1f8e:	1e 86       	std	Y+14, r1	; 0x0e
    1f90:	1f 86       	std	Y+15, r1	; 0x0f
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	80 e2       	ldi	r24, 0x20	; 32
    1f98:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <xQueueGenericCreate>
    1f9c:	88 87       	std	Y+8, r24	; 0x08
    1f9e:	99 87       	std	Y+9, r25	; 0x09
    1fa0:	8a e0       	ldi	r24, 0x0A	; 10
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	8a 87       	std	Y+10, r24	; 0x0a
    1faa:	9b 87       	std	Y+11, r25	; 0x0b
    1fac:	ac 87       	std	Y+12, r26	; 0x0c
    1fae:	bd 87       	std	Y+13, r27	; 0x0d
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <main>:
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	6e 97       	sbiw	r28, 0x1e	; 30
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	e0 e6       	ldi	r30, 0x60	; 96
    1fd8:	f6 e0       	ldi	r31, 0x06	; 6
    1fda:	80 e1       	ldi	r24, 0x10	; 16
    1fdc:	81 83       	std	Z+1, r24	; 0x01
    1fde:	85 83       	std	Z+5, r24	; 0x05
    1fe0:	f8 94       	cli
    1fe2:	e0 e5       	ldi	r30, 0x50	; 80
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	82 60       	ori	r24, 0x02	; 2
    1fea:	80 83       	st	Z, r24
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	81 ff       	sbrs	r24, 1
    1ff0:	fd cf       	rjmp	.-6      	; 0x1fec <main+0x36>
    1ff2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1ff6:	9f b7       	in	r25, 0x3f	; 63
    1ff8:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffa:	f8 94       	cli
    1ffc:	1b be       	out	0x3b, r1	; 59
    1ffe:	88 7f       	andi	r24, 0xF8	; 248
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	20 e4       	ldi	r18, 0x40	; 64
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	f9 01       	movw	r30, r18
    2008:	08 ed       	ldi	r16, 0xD8	; 216
    200a:	04 bf       	out	0x34, r16	; 52
    200c:	80 83       	st	Z, r24
    200e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2010:	8f bf       	out	0x3f, r24	; 63
    2012:	e0 e5       	ldi	r30, 0x50	; 80
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8e 7f       	andi	r24, 0xFE	; 254
    201a:	80 83       	st	Z, r24
    201c:	9d ef       	ldi	r25, 0xFD	; 253
    201e:	88 ed       	ldi	r24, 0xD8	; 216
    2020:	08 b6       	in	r0, 0x38	; 56
    2022:	18 be       	out	0x38, r1	; 56
    2024:	84 bf       	out	0x34, r24	; 52
    2026:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    202a:	08 be       	out	0x38, r0	; 56
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2034:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <leftLimitSwitch>
    2038:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <leftLimitSwitch+0x1>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2044:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <rightLimitSwitch>
    2048:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <rightLimitSwitch+0x1>
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2054:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <linear_position>
    2058:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <linear_position+0x1>
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    206c:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <thdMotor>
    2070:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <thdMotor+0x1>
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    207c:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <pendulum_encoder>
    2080:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <pendulum_encoder+0x1>
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    208c:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <linear_offset>
    2090:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <linear_offset+0x1>
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    209c:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <motor_command>
    20a0:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <motor_command+0x1>
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    20ac:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <begin>
    20b0:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <begin+0x1>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    20bc:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <go>
    20c0:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <go+0x1>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    20cc:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <stop>
    20d0:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <stop+0x1>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    20dc:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <reset>
    20e0:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <reset+0x1>
    20e4:	82 e5       	ldi	r24, 0x52	; 82
    20e6:	90 e2       	ldi	r25, 0x20	; 32
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	8a e0       	ldi	r24, 0x0A	; 10
    20ee:	8b 83       	std	Y+3, r24	; 0x03
    20f0:	1c 82       	std	Y+4, r1	; 0x04
    20f2:	23 e0       	ldi	r18, 0x03	; 3
    20f4:	2e 83       	std	Y+6, r18	; 0x06
    20f6:	1d 82       	std	Y+5, r1	; 0x05
    20f8:	1f 82       	std	Y+7, r1	; 0x07
    20fa:	18 86       	std	Y+8, r1	; 0x08
    20fc:	a0 e4       	ldi	r26, 0x40	; 64
    20fe:	b6 e0       	ldi	r27, 0x06	; 6
    2100:	ab 87       	std	Y+11, r26	; 0x0b
    2102:	bc 87       	std	Y+12, r27	; 0x0c
    2104:	86 e0       	ldi	r24, 0x06	; 6
    2106:	8d 87       	std	Y+13, r24	; 0x0d
    2108:	0f 2e       	mov	r0, r31
    210a:	f7 e0       	ldi	r31, 0x07	; 7
    210c:	bf 2e       	mov	r11, r31
    210e:	f0 2d       	mov	r31, r0
    2110:	be 86       	std	Y+14, r11	; 0x0e
    2112:	e0 eb       	ldi	r30, 0xB0	; 176
    2114:	f8 e0       	ldi	r31, 0x08	; 8
    2116:	ef 87       	std	Y+15, r30	; 0x0f
    2118:	f8 8b       	std	Y+16, r31	; 0x10
    211a:	81 eb       	ldi	r24, 0xB1	; 177
    211c:	98 e0       	ldi	r25, 0x08	; 8
    211e:	89 8b       	std	Y+17, r24	; 0x11
    2120:	9a 8b       	std	Y+18, r25	; 0x12
    2122:	84 eb       	ldi	r24, 0xB4	; 180
    2124:	98 e0       	ldi	r25, 0x08	; 8
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8e 85       	ldd	r24, Y+14	; 0x0e
    212c:	14 96       	adiw	r26, 0x04	; 4
    212e:	3c 91       	ld	r19, X
    2130:	14 97       	sbiw	r26, 0x04	; 4
    2132:	ee 24       	eor	r14, r14
    2134:	e3 94       	inc	r14
    2136:	f1 2c       	mov	r15, r1
    2138:	a7 01       	movw	r20, r14
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <main+0x18a>
    213c:	44 0f       	add	r20, r20
    213e:	55 1f       	adc	r21, r21
    2140:	8a 95       	dec	r24
    2142:	e2 f7       	brpl	.-8      	; 0x213c <main+0x186>
    2144:	ca 01       	movw	r24, r20
    2146:	83 2b       	or	r24, r19
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	8c 93       	st	X, r24
    214c:	8e 85       	ldd	r24, Y+14	; 0x0e
    214e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2150:	bc 85       	ldd	r27, Y+12	; 0x0c
    2152:	3c 91       	ld	r19, X
    2154:	a7 01       	movw	r20, r14
    2156:	02 c0       	rjmp	.+4      	; 0x215c <main+0x1a6>
    2158:	44 0f       	add	r20, r20
    215a:	55 1f       	adc	r21, r21
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <main+0x1a2>
    2160:	ca 01       	movw	r24, r20
    2162:	83 2b       	or	r24, r19
    2164:	8c 93       	st	X, r24
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	ab 85       	ldd	r26, Y+11	; 0x0b
    216a:	bc 85       	ldd	r27, Y+12	; 0x0c
    216c:	3c 91       	ld	r19, X
    216e:	a7 01       	movw	r20, r14
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <main+0x1c0>
    2172:	44 0f       	add	r20, r20
    2174:	55 1f       	adc	r21, r21
    2176:	8a 95       	dec	r24
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <main+0x1bc>
    217a:	ca 01       	movw	r24, r20
    217c:	80 95       	com	r24
    217e:	90 95       	com	r25
    2180:	83 23       	and	r24, r19
    2182:	8c 93       	st	X, r24
    2184:	80 e1       	ldi	r24, 0x10	; 16
    2186:	83 83       	std	Z+3, r24	; 0x03
    2188:	25 83       	std	Z+5, r18	; 0x05
    218a:	80 ef       	ldi	r24, 0xF0	; 240
    218c:	87 83       	std	Z+7, r24	; 0x07
    218e:	81 e2       	ldi	r24, 0x21	; 33
    2190:	86 83       	std	Z+6, r24	; 0x06
    2192:	88 e1       	ldi	r24, 0x18	; 24
    2194:	84 83       	std	Z+4, r24	; 0x04
    2196:	80 e8       	ldi	r24, 0x80	; 128
    2198:	8e 8b       	std	Y+22, r24	; 0x16
    219a:	80 e4       	ldi	r24, 0x40	; 64
    219c:	8f 8b       	std	Y+23, r24	; 0x17
    219e:	80 e2       	ldi	r24, 0x20	; 32
    21a0:	8d 8b       	std	Y+21, r24	; 0x15
    21a2:	ef 85       	ldd	r30, Y+15	; 0x0f
    21a4:	f8 89       	ldd	r31, Y+16	; 0x10
    21a6:	80 81       	ld	r24, Z
    21a8:	80 81       	ld	r24, Z
    21aa:	82 e1       	ldi	r24, 0x12	; 18
    21ac:	90 e2       	ldi	r25, 0x20	; 32
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	8e e1       	ldi	r24, 0x1E	; 30
    21b4:	91 e2       	ldi	r25, 0x21	; 33
    21b6:	88 8f       	std	Y+24, r24	; 0x18
    21b8:	99 8f       	std	Y+25, r25	; 0x19
    21ba:	8c e1       	ldi	r24, 0x1C	; 28
    21bc:	91 e2       	ldi	r25, 0x21	; 33
    21be:	8a 8f       	std	Y+26, r24	; 0x1a
    21c0:	9b 8f       	std	Y+27, r25	; 0x1b
    21c2:	8a e1       	ldi	r24, 0x1A	; 26
    21c4:	91 e2       	ldi	r25, 0x21	; 33
    21c6:	8c 8f       	std	Y+28, r24	; 0x1c
    21c8:	9d 8f       	std	Y+29, r25	; 0x1d
    21ca:	84 e6       	ldi	r24, 0x64	; 100
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    21d2:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <rcvC1_buffer>
    21d6:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <rcvC1_buffer+0x1>
    21da:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21dc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    21de:	10 82       	st	Z, r1
    21e0:	11 82       	std	Z+1, r1	; 0x01
    21e2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    21e4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    21e6:	10 82       	st	Z, r1
    21e8:	11 82       	std	Z+1, r1	; 0x01
    21ea:	67 e0       	ldi	r22, 0x07	; 7
    21ec:	ce 01       	movw	r24, r28
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    21f4:	6c 01       	movw	r12, r24
    21f6:	65 e8       	ldi	r22, 0x85	; 133
    21f8:	70 e2       	ldi	r23, 0x20	; 32
    21fa:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    21fe:	66 e0       	ldi	r22, 0x06	; 6
    2200:	c6 01       	movw	r24, r12
    2202:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    2206:	66 e0       	ldi	r22, 0x06	; 6
    2208:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    220c:	82 e1       	ldi	r24, 0x12	; 18
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2214:	6c 01       	movw	r12, r24
    2216:	8e 01       	movw	r16, r28
    2218:	0f 5f       	subi	r16, 0xFF	; 255
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	24 e0       	ldi	r18, 0x04	; 4
    221e:	31 e0       	ldi	r19, 0x01	; 1
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	64 ea       	ldi	r22, 0xA4	; 164
    2224:	70 e2       	ldi	r23, 0x20	; 32
    2226:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    222a:	82 e2       	ldi	r24, 0x22	; 34
    222c:	90 e2       	ldi	r25, 0x20	; 32
    222e:	f6 01       	movw	r30, r12
    2230:	80 83       	st	Z, r24
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	83 e1       	ldi	r24, 0x13	; 19
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    223c:	6c 01       	movw	r12, r24
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	31 e0       	ldi	r19, 0x01	; 1
    2242:	44 e0       	ldi	r20, 0x04	; 4
    2244:	6c ea       	ldi	r22, 0xAC	; 172
    2246:	70 e2       	ldi	r23, 0x20	; 32
    2248:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    224c:	0f 2e       	mov	r0, r31
    224e:	fa e2       	ldi	r31, 0x2A	; 42
    2250:	8f 2e       	mov	r8, r31
    2252:	f0 e2       	ldi	r31, 0x20	; 32
    2254:	9f 2e       	mov	r9, r31
    2256:	f0 2d       	mov	r31, r0
    2258:	f6 01       	movw	r30, r12
    225a:	80 82       	st	Z, r8
    225c:	91 82       	std	Z+1, r9	; 0x01
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	82 8b       	std	Z+18, r24	; 0x12
    2262:	83 e1       	ldi	r24, 0x13	; 19
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    226a:	6c 01       	movw	r12, r24
    226c:	24 e0       	ldi	r18, 0x04	; 4
    226e:	31 e0       	ldi	r19, 0x01	; 1
    2270:	44 e0       	ldi	r20, 0x04	; 4
    2272:	63 eb       	ldi	r22, 0xB3	; 179
    2274:	70 e2       	ldi	r23, 0x20	; 32
    2276:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    227a:	f6 01       	movw	r30, r12
    227c:	80 82       	st	Z, r8
    227e:	91 82       	std	Z+1, r9	; 0x01
    2280:	84 e0       	ldi	r24, 0x04	; 4
    2282:	82 8b       	std	Z+18, r24	; 0x12
    2284:	82 e1       	ldi	r24, 0x12	; 18
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    228c:	6c 01       	movw	r12, r24
    228e:	24 e0       	ldi	r18, 0x04	; 4
    2290:	31 e0       	ldi	r19, 0x01	; 1
    2292:	44 e0       	ldi	r20, 0x04	; 4
    2294:	6b eb       	ldi	r22, 0xBB	; 187
    2296:	70 e2       	ldi	r23, 0x20	; 32
    2298:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    229c:	82 e3       	ldi	r24, 0x32	; 50
    229e:	90 e2       	ldi	r25, 0x20	; 32
    22a0:	f6 01       	movw	r30, r12
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	82 e1       	ldi	r24, 0x12	; 18
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    22ae:	6c 01       	movw	r12, r24
    22b0:	24 e0       	ldi	r18, 0x04	; 4
    22b2:	31 e0       	ldi	r19, 0x01	; 1
    22b4:	43 e0       	ldi	r20, 0x03	; 3
    22b6:	62 ec       	ldi	r22, 0xC2	; 194
    22b8:	70 e2       	ldi	r23, 0x20	; 32
    22ba:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    22be:	8a e3       	ldi	r24, 0x3A	; 58
    22c0:	90 e2       	ldi	r25, 0x20	; 32
    22c2:	f6 01       	movw	r30, r12
    22c4:	80 83       	st	Z, r24
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	8e e1       	ldi	r24, 0x1E	; 30
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    22d0:	6c 01       	movw	r12, r24
    22d2:	24 e0       	ldi	r18, 0x04	; 4
    22d4:	31 e0       	ldi	r19, 0x01	; 1
    22d6:	42 e0       	ldi	r20, 0x02	; 2
    22d8:	69 ec       	ldi	r22, 0xC9	; 201
    22da:	70 e2       	ldi	r23, 0x20	; 32
    22dc:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    22e0:	82 e4       	ldi	r24, 0x42	; 66
    22e2:	90 e2       	ldi	r25, 0x20	; 32
    22e4:	f6 01       	movw	r30, r12
    22e6:	80 83       	st	Z, r24
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	82 8f       	std	Z+26, r24	; 0x1a
    22f0:	93 8f       	std	Z+27, r25	; 0x1b
    22f2:	e4 8e       	std	Z+28, r14	; 0x1c
    22f4:	f5 8e       	std	Z+29, r15	; 0x1d
    22f6:	84 e1       	ldi	r24, 0x14	; 20
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    22fe:	7c 01       	movw	r14, r24
    2300:	24 e0       	ldi	r18, 0x04	; 4
    2302:	31 e0       	ldi	r19, 0x01	; 1
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	61 ed       	ldi	r22, 0xD1	; 209
    2308:	70 e2       	ldi	r23, 0x20	; 32
    230a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN8frt_taskC2EPKchjP8emstream>
    230e:	8a e4       	ldi	r24, 0x4A	; 74
    2310:	90 e2       	ldi	r25, 0x20	; 32
    2312:	f7 01       	movw	r30, r14
    2314:	80 83       	st	Z, r24
    2316:	91 83       	std	Z+1, r25	; 0x01
    2318:	12 8a       	std	Z+18, r1	; 0x12
    231a:	13 8a       	std	Z+19, r1	; 0x13
    231c:	b0 92 a2 00 	sts	0x00A2, r11	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2320:	78 94       	sei
    2322:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <vTaskStartScheduler>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	6e 96       	adiw	r28, 0x1e	; 30
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	bf 90       	pop	r11
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	08 95       	ret

00002348 <__vector_58>:
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	08 b6       	in	r0, 0x38	; 56
    2354:	0f 92       	push	r0
    2356:	18 be       	out	0x38, r1	; 56
    2358:	0b b6       	in	r0, 0x3b	; 59
    235a:	0f 92       	push	r0
    235c:	1b be       	out	0x3b, r1	; 59
    235e:	2f 93       	push	r18
    2360:	3f 93       	push	r19
    2362:	8f 93       	push	r24
    2364:	9f 93       	push	r25
    2366:	ef 93       	push	r30
    2368:	ff 93       	push	r31
    236a:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    236e:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <rcvE0_buffer>
    2372:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <rcvE0_buffer+0x1>
    2376:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvE0_write_index>
    237a:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvE0_write_index+0x1>
    237e:	e8 0f       	add	r30, r24
    2380:	f9 1f       	adc	r31, r25
    2382:	20 83       	st	Z, r18
    2384:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvE0_write_index>
    2388:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvE0_write_index+0x1>
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	84 36       	cpi	r24, 0x64	; 100
    2390:	91 05       	cpc	r25, r1
    2392:	60 f4       	brcc	.+24     	; 0x23ac <__vector_58+0x64>
    2394:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <rcvE0_write_index>
    2398:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <rcvE0_write_index+0x1>
    239c:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <rcvE0_read_index>
    23a0:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <rcvE0_read_index+0x1>
    23a4:	82 17       	cp	r24, r18
    23a6:	93 07       	cpc	r25, r19
    23a8:	f1 f4       	brne	.+60     	; 0x23e6 <__vector_58+0x9e>
    23aa:	0c c0       	rjmp	.+24     	; 0x23c4 <__vector_58+0x7c>
    23ac:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <rcvE0_write_index>
    23b0:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <rcvE0_write_index+0x1>
    23b4:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvE0_read_index>
    23b8:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvE0_read_index+0x1>
    23bc:	18 16       	cp	r1, r24
    23be:	19 06       	cpc	r1, r25
    23c0:	91 f4       	brne	.+36     	; 0x23e6 <__vector_58+0x9e>
    23c2:	0e c0       	rjmp	.+28     	; 0x23e0 <__vector_58+0x98>
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	84 36       	cpi	r24, 0x64	; 100
    23c8:	91 05       	cpc	r25, r1
    23ca:	28 f4       	brcc	.+10     	; 0x23d6 <__vector_58+0x8e>
    23cc:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvE0_read_index>
    23d0:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvE0_read_index+0x1>
    23d4:	08 c0       	rjmp	.+16     	; 0x23e6 <__vector_58+0x9e>
    23d6:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvE0_read_index>
    23da:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvE0_read_index+0x1>
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <__vector_58+0x9e>
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	f3 cf       	rjmp	.-26     	; 0x23cc <__vector_58+0x84>
    23e6:	ff 91       	pop	r31
    23e8:	ef 91       	pop	r30
    23ea:	9f 91       	pop	r25
    23ec:	8f 91       	pop	r24
    23ee:	3f 91       	pop	r19
    23f0:	2f 91       	pop	r18
    23f2:	0f 90       	pop	r0
    23f4:	0b be       	out	0x3b, r0	; 59
    23f6:	0f 90       	pop	r0
    23f8:	08 be       	out	0x38, r0	; 56
    23fa:	0f 90       	pop	r0
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	0f 90       	pop	r0
    2400:	1f 90       	pop	r1
    2402:	18 95       	reti

00002404 <__vector_91>:
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	08 b6       	in	r0, 0x38	; 56
    2410:	0f 92       	push	r0
    2412:	18 be       	out	0x38, r1	; 56
    2414:	0b b6       	in	r0, 0x3b	; 59
    2416:	0f 92       	push	r0
    2418:	1b be       	out	0x3b, r1	; 59
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31
    2426:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    242a:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <rcvD1_buffer>
    242e:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <rcvD1_buffer+0x1>
    2432:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD1_write_index>
    2436:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD1_write_index+0x1>
    243a:	e8 0f       	add	r30, r24
    243c:	f9 1f       	adc	r31, r25
    243e:	20 83       	st	Z, r18
    2440:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD1_write_index>
    2444:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD1_write_index+0x1>
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	84 36       	cpi	r24, 0x64	; 100
    244c:	91 05       	cpc	r25, r1
    244e:	60 f4       	brcc	.+24     	; 0x2468 <__vector_91+0x64>
    2450:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <rcvD1_write_index>
    2454:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <rcvD1_write_index+0x1>
    2458:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <rcvD1_read_index>
    245c:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <rcvD1_read_index+0x1>
    2460:	82 17       	cp	r24, r18
    2462:	93 07       	cpc	r25, r19
    2464:	f1 f4       	brne	.+60     	; 0x24a2 <__vector_91+0x9e>
    2466:	0c c0       	rjmp	.+24     	; 0x2480 <__vector_91+0x7c>
    2468:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <rcvD1_write_index>
    246c:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <rcvD1_write_index+0x1>
    2470:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD1_read_index>
    2474:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD1_read_index+0x1>
    2478:	18 16       	cp	r1, r24
    247a:	19 06       	cpc	r1, r25
    247c:	91 f4       	brne	.+36     	; 0x24a2 <__vector_91+0x9e>
    247e:	0e c0       	rjmp	.+28     	; 0x249c <__vector_91+0x98>
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	84 36       	cpi	r24, 0x64	; 100
    2484:	91 05       	cpc	r25, r1
    2486:	28 f4       	brcc	.+10     	; 0x2492 <__vector_91+0x8e>
    2488:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvD1_read_index>
    248c:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvD1_read_index+0x1>
    2490:	08 c0       	rjmp	.+16     	; 0x24a2 <__vector_91+0x9e>
    2492:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvD1_read_index>
    2496:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvD1_read_index+0x1>
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <__vector_91+0x9e>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	f3 cf       	rjmp	.-26     	; 0x2488 <__vector_91+0x84>
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	9f 91       	pop	r25
    24a8:	8f 91       	pop	r24
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	0b be       	out	0x3b, r0	; 59
    24b2:	0f 90       	pop	r0
    24b4:	08 be       	out	0x38, r0	; 56
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	0f 90       	pop	r0
    24bc:	1f 90       	pop	r1
    24be:	18 95       	reti

000024c0 <__vector_88>:
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	08 b6       	in	r0, 0x38	; 56
    24cc:	0f 92       	push	r0
    24ce:	18 be       	out	0x38, r1	; 56
    24d0:	0b b6       	in	r0, 0x3b	; 59
    24d2:	0f 92       	push	r0
    24d4:	1b be       	out	0x3b, r1	; 59
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	ef 93       	push	r30
    24e0:	ff 93       	push	r31
    24e2:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    24e6:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <rcvD0_buffer>
    24ea:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <rcvD0_buffer+0x1>
    24ee:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    24f2:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    24f6:	e8 0f       	add	r30, r24
    24f8:	f9 1f       	adc	r31, r25
    24fa:	20 83       	st	Z, r18
    24fc:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvD0_write_index>
    2500:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvD0_write_index+0x1>
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	84 36       	cpi	r24, 0x64	; 100
    2508:	91 05       	cpc	r25, r1
    250a:	60 f4       	brcc	.+24     	; 0x2524 <__vector_88+0x64>
    250c:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rcvD0_write_index>
    2510:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rcvD0_write_index+0x1>
    2514:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <rcvD0_read_index>
    2518:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <rcvD0_read_index+0x1>
    251c:	82 17       	cp	r24, r18
    251e:	93 07       	cpc	r25, r19
    2520:	f1 f4       	brne	.+60     	; 0x255e <__vector_88+0x9e>
    2522:	0c c0       	rjmp	.+24     	; 0x253c <__vector_88+0x7c>
    2524:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <rcvD0_write_index>
    2528:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <rcvD0_write_index+0x1>
    252c:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvD0_read_index>
    2530:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvD0_read_index+0x1>
    2534:	18 16       	cp	r1, r24
    2536:	19 06       	cpc	r1, r25
    2538:	91 f4       	brne	.+36     	; 0x255e <__vector_88+0x9e>
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <__vector_88+0x98>
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	84 36       	cpi	r24, 0x64	; 100
    2540:	91 05       	cpc	r25, r1
    2542:	28 f4       	brcc	.+10     	; 0x254e <__vector_88+0x8e>
    2544:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvD0_read_index>
    2548:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvD0_read_index+0x1>
    254c:	08 c0       	rjmp	.+16     	; 0x255e <__vector_88+0x9e>
    254e:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvD0_read_index>
    2552:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvD0_read_index+0x1>
    2556:	03 c0       	rjmp	.+6      	; 0x255e <__vector_88+0x9e>
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	f3 cf       	rjmp	.-26     	; 0x2544 <__vector_88+0x84>
    255e:	ff 91       	pop	r31
    2560:	ef 91       	pop	r30
    2562:	9f 91       	pop	r25
    2564:	8f 91       	pop	r24
    2566:	3f 91       	pop	r19
    2568:	2f 91       	pop	r18
    256a:	0f 90       	pop	r0
    256c:	0b be       	out	0x3b, r0	; 59
    256e:	0f 90       	pop	r0
    2570:	08 be       	out	0x38, r0	; 56
    2572:	0f 90       	pop	r0
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	0f 90       	pop	r0
    2578:	1f 90       	pop	r1
    257a:	18 95       	reti

0000257c <__vector_28>:
    257c:	1f 92       	push	r1
    257e:	0f 92       	push	r0
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	0f 92       	push	r0
    2584:	11 24       	eor	r1, r1
    2586:	08 b6       	in	r0, 0x38	; 56
    2588:	0f 92       	push	r0
    258a:	18 be       	out	0x38, r1	; 56
    258c:	0b b6       	in	r0, 0x3b	; 59
    258e:	0f 92       	push	r0
    2590:	1b be       	out	0x3b, r1	; 59
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	8f 93       	push	r24
    2598:	9f 93       	push	r25
    259a:	ef 93       	push	r30
    259c:	ff 93       	push	r31
    259e:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    25a2:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <rcvC1_buffer>
    25a6:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <rcvC1_buffer+0x1>
    25aa:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC1_write_index>
    25ae:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC1_write_index+0x1>
    25b2:	e8 0f       	add	r30, r24
    25b4:	f9 1f       	adc	r31, r25
    25b6:	20 83       	st	Z, r18
    25b8:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC1_write_index>
    25bc:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC1_write_index+0x1>
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	84 36       	cpi	r24, 0x64	; 100
    25c4:	91 05       	cpc	r25, r1
    25c6:	60 f4       	brcc	.+24     	; 0x25e0 <__vector_28+0x64>
    25c8:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvC1_write_index>
    25cc:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvC1_write_index+0x1>
    25d0:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <rcvC1_read_index>
    25d4:	30 91 1d 21 	lds	r19, 0x211D	; 0x80211d <rcvC1_read_index+0x1>
    25d8:	82 17       	cp	r24, r18
    25da:	93 07       	cpc	r25, r19
    25dc:	f1 f4       	brne	.+60     	; 0x261a <__vector_28+0x9e>
    25de:	0c c0       	rjmp	.+24     	; 0x25f8 <__vector_28+0x7c>
    25e0:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <rcvC1_write_index>
    25e4:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <rcvC1_write_index+0x1>
    25e8:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC1_read_index>
    25ec:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC1_read_index+0x1>
    25f0:	18 16       	cp	r1, r24
    25f2:	19 06       	cpc	r1, r25
    25f4:	91 f4       	brne	.+36     	; 0x261a <__vector_28+0x9e>
    25f6:	0e c0       	rjmp	.+28     	; 0x2614 <__vector_28+0x98>
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	84 36       	cpi	r24, 0x64	; 100
    25fc:	91 05       	cpc	r25, r1
    25fe:	28 f4       	brcc	.+10     	; 0x260a <__vector_28+0x8e>
    2600:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC1_read_index>
    2604:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC1_read_index+0x1>
    2608:	08 c0       	rjmp	.+16     	; 0x261a <__vector_28+0x9e>
    260a:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvC1_read_index>
    260e:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvC1_read_index+0x1>
    2612:	03 c0       	rjmp	.+6      	; 0x261a <__vector_28+0x9e>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	f3 cf       	rjmp	.-26     	; 0x2600 <__vector_28+0x84>
    261a:	ff 91       	pop	r31
    261c:	ef 91       	pop	r30
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	3f 91       	pop	r19
    2624:	2f 91       	pop	r18
    2626:	0f 90       	pop	r0
    2628:	0b be       	out	0x3b, r0	; 59
    262a:	0f 90       	pop	r0
    262c:	08 be       	out	0x38, r0	; 56
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_25>:
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	08 b6       	in	r0, 0x38	; 56
    2644:	0f 92       	push	r0
    2646:	18 be       	out	0x38, r1	; 56
    2648:	0b b6       	in	r0, 0x3b	; 59
    264a:	0f 92       	push	r0
    264c:	1b be       	out	0x3b, r1	; 59
    264e:	2f 93       	push	r18
    2650:	3f 93       	push	r19
    2652:	8f 93       	push	r24
    2654:	9f 93       	push	r25
    2656:	ef 93       	push	r30
    2658:	ff 93       	push	r31
    265a:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    265e:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <rcvC0_buffer>
    2662:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <rcvC0_buffer+0x1>
    2666:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    266a:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    266e:	e8 0f       	add	r30, r24
    2670:	f9 1f       	adc	r31, r25
    2672:	20 83       	st	Z, r18
    2674:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    2678:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	84 36       	cpi	r24, 0x64	; 100
    2680:	91 05       	cpc	r25, r1
    2682:	60 f4       	brcc	.+24     	; 0x269c <__vector_25+0x64>
    2684:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <rcvC0_write_index>
    2688:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <rcvC0_write_index+0x1>
    268c:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <rcvC0_read_index>
    2690:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <rcvC0_read_index+0x1>
    2694:	82 17       	cp	r24, r18
    2696:	93 07       	cpc	r25, r19
    2698:	f1 f4       	brne	.+60     	; 0x26d6 <__vector_25+0x9e>
    269a:	0c c0       	rjmp	.+24     	; 0x26b4 <__vector_25+0x7c>
    269c:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <rcvC0_write_index>
    26a0:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <rcvC0_write_index+0x1>
    26a4:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC0_read_index>
    26a8:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC0_read_index+0x1>
    26ac:	18 16       	cp	r1, r24
    26ae:	19 06       	cpc	r1, r25
    26b0:	91 f4       	brne	.+36     	; 0x26d6 <__vector_25+0x9e>
    26b2:	0e c0       	rjmp	.+28     	; 0x26d0 <__vector_25+0x98>
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	84 36       	cpi	r24, 0x64	; 100
    26b8:	91 05       	cpc	r25, r1
    26ba:	28 f4       	brcc	.+10     	; 0x26c6 <__vector_25+0x8e>
    26bc:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <rcvC0_read_index>
    26c0:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <rcvC0_read_index+0x1>
    26c4:	08 c0       	rjmp	.+16     	; 0x26d6 <__vector_25+0x9e>
    26c6:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <rcvC0_read_index>
    26ca:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <rcvC0_read_index+0x1>
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <__vector_25+0x9e>
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	f3 cf       	rjmp	.-26     	; 0x26bc <__vector_25+0x84>
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	9f 91       	pop	r25
    26dc:	8f 91       	pop	r24
    26de:	3f 91       	pop	r19
    26e0:	2f 91       	pop	r18
    26e2:	0f 90       	pop	r0
    26e4:	0b be       	out	0x3b, r0	; 59
    26e6:	0f 90       	pop	r0
    26e8:	08 be       	out	0x38, r0	; 56
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	0f 90       	pop	r0
    26f0:	1f 90       	pop	r1
    26f2:	18 95       	reti

000026f4 <_ZN8emstreamlsEh>:
    26f4:	cf 92       	push	r12
    26f6:	df 92       	push	r13
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	29 97       	sbiw	r28, 0x09	; 9
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	8c 01       	movw	r16, r24
    2710:	e6 2e       	mov	r14, r22
    2712:	dc 01       	movw	r26, r24
    2714:	13 96       	adiw	r26, 0x03	; 3
    2716:	8c 91       	ld	r24, X
    2718:	13 97       	sbiw	r26, 0x03	; 3
    271a:	88 23       	and	r24, r24
    271c:	41 f0       	breq	.+16     	; 0x272e <_ZN8emstreamlsEh+0x3a>
    271e:	ed 91       	ld	r30, X+
    2720:	fc 91       	ld	r31, X
    2722:	02 80       	ldd	r0, Z+2	; 0x02
    2724:	f3 81       	ldd	r31, Z+3	; 0x03
    2726:	e0 2d       	mov	r30, r0
    2728:	c8 01       	movw	r24, r16
    272a:	19 95       	eicall
    272c:	56 c0       	rjmp	.+172    	; 0x27da <_ZN8emstreamlsEh+0xe6>
    272e:	f8 01       	movw	r30, r16
    2730:	42 81       	ldd	r20, Z+2	; 0x02
    2732:	42 30       	cpi	r20, 0x02	; 2
    2734:	19 f5       	brne	.+70     	; 0x277c <_ZN8emstreamlsEh+0x88>
    2736:	68 94       	set
    2738:	cc 24       	eor	r12, r12
    273a:	c3 f8       	bld	r12, 3
    273c:	d1 2c       	mov	r13, r1
    273e:	68 94       	set
    2740:	ff 24       	eor	r15, r15
    2742:	f7 f8       	bld	r15, 7
    2744:	8e 2d       	mov	r24, r14
    2746:	8f 21       	and	r24, r15
    2748:	51 f0       	breq	.+20     	; 0x275e <_ZN8emstreamlsEh+0x6a>
    274a:	d8 01       	movw	r26, r16
    274c:	ed 91       	ld	r30, X+
    274e:	fc 91       	ld	r31, X
    2750:	02 80       	ldd	r0, Z+2	; 0x02
    2752:	f3 81       	ldd	r31, Z+3	; 0x03
    2754:	e0 2d       	mov	r30, r0
    2756:	61 e3       	ldi	r22, 0x31	; 49
    2758:	c8 01       	movw	r24, r16
    275a:	19 95       	eicall
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <_ZN8emstreamlsEh+0x7c>
    275e:	d8 01       	movw	r26, r16
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	02 80       	ldd	r0, Z+2	; 0x02
    2766:	f3 81       	ldd	r31, Z+3	; 0x03
    2768:	e0 2d       	mov	r30, r0
    276a:	60 e3       	ldi	r22, 0x30	; 48
    276c:	c8 01       	movw	r24, r16
    276e:	19 95       	eicall
    2770:	f6 94       	lsr	r15
    2772:	b1 e0       	ldi	r27, 0x01	; 1
    2774:	cb 1a       	sub	r12, r27
    2776:	d1 08       	sbc	r13, r1
    2778:	29 f7       	brne	.-54     	; 0x2744 <_ZN8emstreamlsEh+0x50>
    277a:	2f c0       	rjmp	.+94     	; 0x27da <_ZN8emstreamlsEh+0xe6>
    277c:	40 31       	cpi	r20, 0x10	; 16
    277e:	f9 f4       	brne	.+62     	; 0x27be <_ZN8emstreamlsEh+0xca>
    2780:	62 95       	swap	r22
    2782:	6f 70       	andi	r22, 0x0F	; 15
    2784:	01 90       	ld	r0, Z+
    2786:	f0 81       	ld	r31, Z
    2788:	e0 2d       	mov	r30, r0
    278a:	02 80       	ldd	r0, Z+2	; 0x02
    278c:	f3 81       	ldd	r31, Z+3	; 0x03
    278e:	e0 2d       	mov	r30, r0
    2790:	6a 30       	cpi	r22, 0x0A	; 10
    2792:	10 f0       	brcs	.+4      	; 0x2798 <_ZN8emstreamlsEh+0xa4>
    2794:	69 5c       	subi	r22, 0xC9	; 201
    2796:	01 c0       	rjmp	.+2      	; 0x279a <_ZN8emstreamlsEh+0xa6>
    2798:	60 5d       	subi	r22, 0xD0	; 208
    279a:	c8 01       	movw	r24, r16
    279c:	19 95       	eicall
    279e:	6e 2d       	mov	r22, r14
    27a0:	6f 70       	andi	r22, 0x0F	; 15
    27a2:	d8 01       	movw	r26, r16
    27a4:	ed 91       	ld	r30, X+
    27a6:	fc 91       	ld	r31, X
    27a8:	02 80       	ldd	r0, Z+2	; 0x02
    27aa:	f3 81       	ldd	r31, Z+3	; 0x03
    27ac:	e0 2d       	mov	r30, r0
    27ae:	6a 30       	cpi	r22, 0x0A	; 10
    27b0:	10 f0       	brcs	.+4      	; 0x27b6 <_ZN8emstreamlsEh+0xc2>
    27b2:	69 5c       	subi	r22, 0xC9	; 201
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <_ZN8emstreamlsEh+0xc4>
    27b6:	60 5d       	subi	r22, 0xD0	; 208
    27b8:	c8 01       	movw	r24, r16
    27ba:	19 95       	eicall
    27bc:	0e c0       	rjmp	.+28     	; 0x27da <_ZN8emstreamlsEh+0xe6>
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	be 01       	movw	r22, r28
    27c2:	6f 5f       	subi	r22, 0xFF	; 255
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	8e 2d       	mov	r24, r14
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <utoa>
    27ce:	be 01       	movw	r22, r28
    27d0:	6f 5f       	subi	r22, 0xFF	; 255
    27d2:	7f 4f       	sbci	r23, 0xFF	; 255
    27d4:	c8 01       	movw	r24, r16
    27d6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    27da:	c8 01       	movw	r24, r16
    27dc:	29 96       	adiw	r28, 0x09	; 9
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
    27f2:	08 95       	ret

000027f4 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    27fe:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    2802:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <xHeapHasBeenInitialised.4150>
    2806:	81 11       	cpse	r24, r1
    2808:	1d c0       	rjmp	.+58     	; 0x2844 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    280a:	ab e2       	ldi	r26, 0x2B	; 43
    280c:	b1 e2       	ldi	r27, 0x21	; 33
    280e:	ef e2       	ldi	r30, 0x2F	; 47
    2810:	f1 e2       	ldi	r31, 0x21	; 33
    2812:	ed 93       	st	X+, r30
    2814:	fc 93       	st	X, r31
    2816:	11 97       	sbiw	r26, 0x01	; 1
    2818:	12 96       	adiw	r26, 0x02	; 2
    281a:	1d 92       	st	X+, r1
    281c:	1c 92       	st	X, r1
    281e:	13 97       	sbiw	r26, 0x03	; 3
    2820:	a7 e2       	ldi	r26, 0x27	; 39
    2822:	b1 e2       	ldi	r27, 0x21	; 33
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	9f e0       	ldi	r25, 0x0F	; 15
    2828:	12 96       	adiw	r26, 0x02	; 2
    282a:	8d 93       	st	X+, r24
    282c:	9c 93       	st	X, r25
    282e:	13 97       	sbiw	r26, 0x03	; 3
    2830:	1d 92       	st	X+, r1
    2832:	1c 92       	st	X, r1
    2834:	11 97       	sbiw	r26, 0x01	; 1
    2836:	82 83       	std	Z+2, r24	; 0x02
    2838:	93 83       	std	Z+3, r25	; 0x03
    283a:	a0 83       	st	Z, r26
    283c:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    2844:	20 97       	sbiw	r28, 0x00	; 0
    2846:	09 f4       	brne	.+2      	; 0x284a <pvPortMalloc+0x56>
    2848:	5f c0       	rjmp	.+190    	; 0x2908 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    284a:	9e 01       	movw	r18, r28
    284c:	2b 5f       	subi	r18, 0xFB	; 251
    284e:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    2850:	24 96       	adiw	r28, 0x04	; 4
    2852:	ce 3f       	cpi	r28, 0xFE	; 254
    2854:	df 40       	sbci	r29, 0x0F	; 15
    2856:	08 f0       	brcs	.+2      	; 0x285a <pvPortMalloc+0x66>
    2858:	5a c0       	rjmp	.+180    	; 0x290e <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    285a:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <xStart>
    285e:	f0 91 2c 21 	lds	r31, 0x212C	; 0x80212c <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2862:	ab e2       	ldi	r26, 0x2B	; 43
    2864:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2866:	02 c0       	rjmp	.+4      	; 0x286c <pvPortMalloc+0x78>
    2868:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    286a:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	82 17       	cp	r24, r18
    2872:	93 07       	cpc	r25, r19
    2874:	20 f4       	brcc	.+8      	; 0x287e <pvPortMalloc+0x8a>
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	a9 f7       	brne	.-22     	; 0x2868 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    287e:	c1 e2       	ldi	r28, 0x21	; 33
    2880:	e7 32       	cpi	r30, 0x27	; 39
    2882:	fc 07       	cpc	r31, r28
    2884:	09 f4       	brne	.+2      	; 0x2888 <pvPortMalloc+0x94>
    2886:	46 c0       	rjmp	.+140    	; 0x2914 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2888:	cd 91       	ld	r28, X+
    288a:	dc 91       	ld	r29, X
    288c:	11 97       	sbiw	r26, 0x01	; 1
    288e:	8e 01       	movw	r16, r28
    2890:	0b 5f       	subi	r16, 0xFB	; 251
    2892:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	8d 93       	st	X+, r24
    289a:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	82 1b       	sub	r24, r18
    28a2:	93 0b       	sbc	r25, r19
    28a4:	8b 30       	cpi	r24, 0x0B	; 11
    28a6:	91 05       	cpc	r25, r1
    28a8:	10 f1       	brcs	.+68     	; 0x28ee <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    28aa:	bf 01       	movw	r22, r30
    28ac:	62 0f       	add	r22, r18
    28ae:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    28b0:	db 01       	movw	r26, r22
    28b2:	12 96       	adiw	r26, 0x02	; 2
    28b4:	8d 93       	st	X+, r24
    28b6:	9c 93       	st	X, r25
    28b8:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    28ba:	22 83       	std	Z+2, r18	; 0x02
    28bc:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    28be:	12 96       	adiw	r26, 0x02	; 2
    28c0:	4d 91       	ld	r20, X+
    28c2:	5c 91       	ld	r21, X
    28c4:	13 97       	sbiw	r26, 0x03	; 3
    28c6:	8b e2       	ldi	r24, 0x2B	; 43
    28c8:	91 e2       	ldi	r25, 0x21	; 33
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <pvPortMalloc+0xda>
    28cc:	cd 01       	movw	r24, r26
    28ce:	ec 01       	movw	r28, r24
    28d0:	a8 81       	ld	r26, Y
    28d2:	b9 81       	ldd	r27, Y+1	; 0x01
    28d4:	12 96       	adiw	r26, 0x02	; 2
    28d6:	2d 91       	ld	r18, X+
    28d8:	3c 91       	ld	r19, X
    28da:	13 97       	sbiw	r26, 0x03	; 3
    28dc:	24 17       	cp	r18, r20
    28de:	35 07       	cpc	r19, r21
    28e0:	a8 f3       	brcs	.-22     	; 0x28cc <pvPortMalloc+0xd8>
    28e2:	eb 01       	movw	r28, r22
    28e4:	a8 83       	st	Y, r26
    28e6:	b9 83       	std	Y+1, r27	; 0x01
    28e8:	dc 01       	movw	r26, r24
    28ea:	6d 93       	st	X+, r22
    28ec:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    28ee:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    28f2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    28f6:	22 81       	ldd	r18, Z+2	; 0x02
    28f8:	33 81       	ldd	r19, Z+3	; 0x03
    28fa:	82 1b       	sub	r24, r18
    28fc:	93 0b       	sbc	r25, r19
    28fe:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2902:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2906:	08 c0       	rjmp	.+16     	; 0x2918 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2908:	00 e0       	ldi	r16, 0x00	; 0
    290a:	10 e0       	ldi	r17, 0x00	; 0
    290c:	05 c0       	rjmp	.+10     	; 0x2918 <pvPortMalloc+0x124>
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <pvPortMalloc+0x124>
    2914:	00 e0       	ldi	r16, 0x00	; 0
    2916:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2918:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    291c:	c8 01       	movw	r24, r16
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	41 f1       	breq	.+80     	; 0x2984 <vPortFree+0x5c>
    2934:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2936:	8c 01       	movw	r16, r24
    2938:	05 50       	subi	r16, 0x05	; 5
    293a:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    293c:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    2940:	f8 01       	movw	r30, r16
    2942:	42 81       	ldd	r20, Z+2	; 0x02
    2944:	53 81       	ldd	r21, Z+3	; 0x03
    2946:	ab e2       	ldi	r26, 0x2B	; 43
    2948:	b1 e2       	ldi	r27, 0x21	; 33
    294a:	01 c0       	rjmp	.+2      	; 0x294e <vPortFree+0x26>
    294c:	df 01       	movw	r26, r30
    294e:	ed 91       	ld	r30, X+
    2950:	fc 91       	ld	r31, X
    2952:	11 97       	sbiw	r26, 0x01	; 1
    2954:	22 81       	ldd	r18, Z+2	; 0x02
    2956:	33 81       	ldd	r19, Z+3	; 0x03
    2958:	24 17       	cp	r18, r20
    295a:	35 07       	cpc	r19, r21
    295c:	b8 f3       	brcs	.-18     	; 0x294c <vPortFree+0x24>
    295e:	25 97       	sbiw	r28, 0x05	; 5
    2960:	e8 83       	st	Y, r30
    2962:	f9 83       	std	Y+1, r31	; 0x01
    2964:	0d 93       	st	X+, r16
    2966:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2968:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    296c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    297c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    2980:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
	}
}
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	08 95       	ret

0000298e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    298e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2992:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2996:	08 95       	ret

00002998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2998:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    299a:	03 96       	adiw	r24, 0x03	; 3
    299c:	81 83       	std	Z+1, r24	; 0x01
    299e:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    29a0:	4f ef       	ldi	r20, 0xFF	; 255
    29a2:	5f ef       	ldi	r21, 0xFF	; 255
    29a4:	ba 01       	movw	r22, r20
    29a6:	43 83       	std	Z+3, r20	; 0x03
    29a8:	54 83       	std	Z+4, r21	; 0x04
    29aa:	65 83       	std	Z+5, r22	; 0x05
    29ac:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    29ae:	87 83       	std	Z+7, r24	; 0x07
    29b0:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    29b2:	81 87       	std	Z+9, r24	; 0x09
    29b4:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    29b6:	10 82       	st	Z, r1
    29b8:	08 95       	ret

000029ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    29ba:	fc 01       	movw	r30, r24
    29bc:	12 86       	std	Z+10, r1	; 0x0a
    29be:	13 86       	std	Z+11, r1	; 0x0b
    29c0:	08 95       	ret

000029c2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	fc 01       	movw	r30, r24
    29c8:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    29ca:	21 81       	ldd	r18, Z+1	; 0x01
    29cc:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    29ce:	e9 01       	movw	r28, r18
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	9d 81       	ldd	r25, Y+5	; 0x05
    29d4:	14 96       	adiw	r26, 0x04	; 4
    29d6:	8d 93       	st	X+, r24
    29d8:	9c 93       	st	X, r25
    29da:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    29dc:	81 81       	ldd	r24, Z+1	; 0x01
    29de:	92 81       	ldd	r25, Z+2	; 0x02
    29e0:	16 96       	adiw	r26, 0x06	; 6
    29e2:	8d 93       	st	X+, r24
    29e4:	9c 93       	st	X, r25
    29e6:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	9d 81       	ldd	r25, Y+5	; 0x05
    29ec:	ec 01       	movw	r28, r24
    29ee:	6e 83       	std	Y+6, r22	; 0x06
    29f0:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    29f2:	e9 01       	movw	r28, r18
    29f4:	6c 83       	std	Y+4, r22	; 0x04
    29f6:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    29f8:	61 83       	std	Z+1, r22	; 0x01
    29fa:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29fc:	1a 96       	adiw	r26, 0x0a	; 10
    29fe:	ed 93       	st	X+, r30
    2a00:	fc 93       	st	X, r31
    2a02:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2a04:	80 81       	ld	r24, Z
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	80 83       	st	Z, r24
}
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	08 95       	ret

00002a10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2a1a:	08 81       	ld	r16, Y
    2a1c:	19 81       	ldd	r17, Y+1	; 0x01
    2a1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a20:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2a22:	0f 3f       	cpi	r16, 0xFF	; 255
    2a24:	4f ef       	ldi	r20, 0xFF	; 255
    2a26:	14 07       	cpc	r17, r20
    2a28:	24 07       	cpc	r18, r20
    2a2a:	34 07       	cpc	r19, r20
    2a2c:	31 f4       	brne	.+12     	; 0x2a3a <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2a2e:	dc 01       	movw	r26, r24
    2a30:	19 96       	adiw	r26, 0x09	; 9
    2a32:	ed 91       	ld	r30, X+
    2a34:	fc 91       	ld	r31, X
    2a36:	1a 97       	sbiw	r26, 0x0a	; 10
    2a38:	1f c0       	rjmp	.+62     	; 0x2a78 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	33 96       	adiw	r30, 0x03	; 3
    2a3e:	dc 01       	movw	r26, r24
    2a40:	17 96       	adiw	r26, 0x07	; 7
    2a42:	4d 91       	ld	r20, X+
    2a44:	5c 91       	ld	r21, X
    2a46:	18 97       	sbiw	r26, 0x08	; 8
    2a48:	da 01       	movw	r26, r20
    2a4a:	4d 91       	ld	r20, X+
    2a4c:	5d 91       	ld	r21, X+
    2a4e:	6d 91       	ld	r22, X+
    2a50:	7c 91       	ld	r23, X
    2a52:	04 17       	cp	r16, r20
    2a54:	15 07       	cpc	r17, r21
    2a56:	26 07       	cpc	r18, r22
    2a58:	37 07       	cpc	r19, r23
    2a5a:	70 f0       	brcs	.+28     	; 0x2a78 <vListInsert+0x68>
    2a5c:	04 80       	ldd	r0, Z+4	; 0x04
    2a5e:	f5 81       	ldd	r31, Z+5	; 0x05
    2a60:	e0 2d       	mov	r30, r0
    2a62:	a4 81       	ldd	r26, Z+4	; 0x04
    2a64:	b5 81       	ldd	r27, Z+5	; 0x05
    2a66:	4d 91       	ld	r20, X+
    2a68:	5d 91       	ld	r21, X+
    2a6a:	6d 91       	ld	r22, X+
    2a6c:	7c 91       	ld	r23, X
    2a6e:	04 17       	cp	r16, r20
    2a70:	15 07       	cpc	r17, r21
    2a72:	26 07       	cpc	r18, r22
    2a74:	37 07       	cpc	r19, r23
    2a76:	90 f7       	brcc	.-28     	; 0x2a5c <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a78:	a4 81       	ldd	r26, Z+4	; 0x04
    2a7a:	b5 81       	ldd	r27, Z+5	; 0x05
    2a7c:	ac 83       	std	Y+4, r26	; 0x04
    2a7e:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2a80:	16 96       	adiw	r26, 0x06	; 6
    2a82:	cd 93       	st	X+, r28
    2a84:	dc 93       	st	X, r29
    2a86:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2a88:	ee 83       	std	Y+6, r30	; 0x06
    2a8a:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a8c:	c4 83       	std	Z+4, r28	; 0x04
    2a8e:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a90:	8a 87       	std	Y+10, r24	; 0x0a
    2a92:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2a94:	fc 01       	movw	r30, r24
    2a96:	20 81       	ld	r18, Z
    2a98:	2f 5f       	subi	r18, 0xFF	; 255
    2a9a:	20 83       	st	Z, r18
}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	08 95       	ret

00002aa6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2aa6:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2aa8:	a4 81       	ldd	r26, Z+4	; 0x04
    2aaa:	b5 81       	ldd	r27, Z+5	; 0x05
    2aac:	86 81       	ldd	r24, Z+6	; 0x06
    2aae:	97 81       	ldd	r25, Z+7	; 0x07
    2ab0:	16 96       	adiw	r26, 0x06	; 6
    2ab2:	8d 93       	st	X+, r24
    2ab4:	9c 93       	st	X, r25
    2ab6:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2ab8:	a6 81       	ldd	r26, Z+6	; 0x06
    2aba:	b7 81       	ldd	r27, Z+7	; 0x07
    2abc:	84 81       	ldd	r24, Z+4	; 0x04
    2abe:	95 81       	ldd	r25, Z+5	; 0x05
    2ac0:	14 96       	adiw	r26, 0x04	; 4
    2ac2:	8d 93       	st	X+, r24
    2ac4:	9c 93       	st	X, r25
    2ac6:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2ac8:	a2 85       	ldd	r26, Z+10	; 0x0a
    2aca:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2acc:	11 96       	adiw	r26, 0x01	; 1
    2ace:	8d 91       	ld	r24, X+
    2ad0:	9c 91       	ld	r25, X
    2ad2:	12 97       	sbiw	r26, 0x02	; 2
    2ad4:	e8 17       	cp	r30, r24
    2ad6:	f9 07       	cpc	r31, r25
    2ad8:	31 f4       	brne	.+12     	; 0x2ae6 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ada:	86 81       	ldd	r24, Z+6	; 0x06
    2adc:	97 81       	ldd	r25, Z+7	; 0x07
    2ade:	11 96       	adiw	r26, 0x01	; 1
    2ae0:	8d 93       	st	X+, r24
    2ae2:	9c 93       	st	X, r25
    2ae4:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2ae6:	12 86       	std	Z+10, r1	; 0x0a
    2ae8:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2aea:	8c 91       	ld	r24, X
    2aec:	81 50       	subi	r24, 0x01	; 1
    2aee:	8c 93       	st	X, r24
    2af0:	08 95       	ret

00002af2 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2af2:	80 93 90 31 	sts	0x3190, r24	; 0x803190 <portStackTopForTask>
    2af6:	90 93 91 31 	sts	0x3191, r25	; 0x803191 <portStackTopForTask+0x1>
    2afa:	31 e1       	ldi	r19, 0x11	; 17
    2afc:	fc 01       	movw	r30, r24
    2afe:	30 83       	st	Z, r19
    2b00:	31 97       	sbiw	r30, 0x01	; 1
    2b02:	22 e2       	ldi	r18, 0x22	; 34
    2b04:	20 83       	st	Z, r18
    2b06:	31 97       	sbiw	r30, 0x01	; 1
    2b08:	a3 e3       	ldi	r26, 0x33	; 51
    2b0a:	a0 83       	st	Z, r26
    2b0c:	31 97       	sbiw	r30, 0x01	; 1
    2b0e:	60 83       	st	Z, r22
    2b10:	31 97       	sbiw	r30, 0x01	; 1
    2b12:	70 83       	st	Z, r23
    2b14:	31 97       	sbiw	r30, 0x01	; 1
    2b16:	10 82       	st	Z, r1
    2b18:	31 97       	sbiw	r30, 0x01	; 1
    2b1a:	10 82       	st	Z, r1
    2b1c:	31 97       	sbiw	r30, 0x01	; 1
    2b1e:	60 e8       	ldi	r22, 0x80	; 128
    2b20:	60 83       	st	Z, r22
    2b22:	31 97       	sbiw	r30, 0x01	; 1
    2b24:	10 82       	st	Z, r1
    2b26:	31 97       	sbiw	r30, 0x01	; 1
    2b28:	10 82       	st	Z, r1
    2b2a:	31 97       	sbiw	r30, 0x01	; 1
    2b2c:	10 82       	st	Z, r1
    2b2e:	31 97       	sbiw	r30, 0x01	; 1
    2b30:	62 e0       	ldi	r22, 0x02	; 2
    2b32:	60 83       	st	Z, r22
    2b34:	31 97       	sbiw	r30, 0x01	; 1
    2b36:	63 e0       	ldi	r22, 0x03	; 3
    2b38:	60 83       	st	Z, r22
    2b3a:	31 97       	sbiw	r30, 0x01	; 1
    2b3c:	64 e0       	ldi	r22, 0x04	; 4
    2b3e:	60 83       	st	Z, r22
    2b40:	31 97       	sbiw	r30, 0x01	; 1
    2b42:	65 e0       	ldi	r22, 0x05	; 5
    2b44:	60 83       	st	Z, r22
    2b46:	31 97       	sbiw	r30, 0x01	; 1
    2b48:	66 e0       	ldi	r22, 0x06	; 6
    2b4a:	60 83       	st	Z, r22
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	67 e0       	ldi	r22, 0x07	; 7
    2b50:	60 83       	st	Z, r22
    2b52:	31 97       	sbiw	r30, 0x01	; 1
    2b54:	68 e0       	ldi	r22, 0x08	; 8
    2b56:	60 83       	st	Z, r22
    2b58:	31 97       	sbiw	r30, 0x01	; 1
    2b5a:	69 e0       	ldi	r22, 0x09	; 9
    2b5c:	60 83       	st	Z, r22
    2b5e:	31 97       	sbiw	r30, 0x01	; 1
    2b60:	60 e1       	ldi	r22, 0x10	; 16
    2b62:	60 83       	st	Z, r22
    2b64:	31 97       	sbiw	r30, 0x01	; 1
    2b66:	30 83       	st	Z, r19
    2b68:	31 97       	sbiw	r30, 0x01	; 1
    2b6a:	32 e1       	ldi	r19, 0x12	; 18
    2b6c:	30 83       	st	Z, r19
    2b6e:	31 97       	sbiw	r30, 0x01	; 1
    2b70:	33 e1       	ldi	r19, 0x13	; 19
    2b72:	30 83       	st	Z, r19
    2b74:	31 97       	sbiw	r30, 0x01	; 1
    2b76:	34 e1       	ldi	r19, 0x14	; 20
    2b78:	30 83       	st	Z, r19
    2b7a:	31 97       	sbiw	r30, 0x01	; 1
    2b7c:	35 e1       	ldi	r19, 0x15	; 21
    2b7e:	30 83       	st	Z, r19
    2b80:	31 97       	sbiw	r30, 0x01	; 1
    2b82:	36 e1       	ldi	r19, 0x16	; 22
    2b84:	30 83       	st	Z, r19
    2b86:	31 97       	sbiw	r30, 0x01	; 1
    2b88:	37 e1       	ldi	r19, 0x17	; 23
    2b8a:	30 83       	st	Z, r19
    2b8c:	31 97       	sbiw	r30, 0x01	; 1
    2b8e:	38 e1       	ldi	r19, 0x18	; 24
    2b90:	30 83       	st	Z, r19
    2b92:	31 97       	sbiw	r30, 0x01	; 1
    2b94:	39 e1       	ldi	r19, 0x19	; 25
    2b96:	30 83       	st	Z, r19
    2b98:	31 97       	sbiw	r30, 0x01	; 1
    2b9a:	30 e2       	ldi	r19, 0x20	; 32
    2b9c:	30 83       	st	Z, r19
    2b9e:	31 97       	sbiw	r30, 0x01	; 1
    2ba0:	31 e2       	ldi	r19, 0x21	; 33
    2ba2:	30 83       	st	Z, r19
    2ba4:	31 97       	sbiw	r30, 0x01	; 1
    2ba6:	20 83       	st	Z, r18
    2ba8:	31 97       	sbiw	r30, 0x01	; 1
    2baa:	23 e2       	ldi	r18, 0x23	; 35
    2bac:	20 83       	st	Z, r18
    2bae:	31 97       	sbiw	r30, 0x01	; 1
    2bb0:	40 83       	st	Z, r20
    2bb2:	31 97       	sbiw	r30, 0x01	; 1
    2bb4:	50 83       	st	Z, r21
    2bb6:	31 97       	sbiw	r30, 0x01	; 1
    2bb8:	26 e2       	ldi	r18, 0x26	; 38
    2bba:	20 83       	st	Z, r18
    2bbc:	31 97       	sbiw	r30, 0x01	; 1
    2bbe:	27 e2       	ldi	r18, 0x27	; 39
    2bc0:	20 83       	st	Z, r18
    2bc2:	31 97       	sbiw	r30, 0x01	; 1
    2bc4:	28 e2       	ldi	r18, 0x28	; 40
    2bc6:	20 83       	st	Z, r18
    2bc8:	31 97       	sbiw	r30, 0x01	; 1
    2bca:	29 e2       	ldi	r18, 0x29	; 41
    2bcc:	20 83       	st	Z, r18
    2bce:	31 97       	sbiw	r30, 0x01	; 1
    2bd0:	20 e3       	ldi	r18, 0x30	; 48
    2bd2:	20 83       	st	Z, r18
    2bd4:	31 97       	sbiw	r30, 0x01	; 1
    2bd6:	21 e3       	ldi	r18, 0x31	; 49
    2bd8:	20 83       	st	Z, r18
    2bda:	89 97       	sbiw	r24, 0x29	; 41
    2bdc:	08 95       	ret

00002bde <xPortStartScheduler>:
    2bde:	8c e7       	ldi	r24, 0x7C	; 124
    2be0:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2bf0:	91 e1       	ldi	r25, 0x11	; 17
    2bf2:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2bf6:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2bfa:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2bfe:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2c02:	cd 91       	ld	r28, X+
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	dd 91       	ld	r29, X+
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	bf 91       	pop	r27
    2c14:	af 91       	pop	r26
    2c16:	9f 91       	pop	r25
    2c18:	8f 91       	pop	r24
    2c1a:	7f 91       	pop	r23
    2c1c:	6f 91       	pop	r22
    2c1e:	5f 91       	pop	r21
    2c20:	4f 91       	pop	r20
    2c22:	3f 91       	pop	r19
    2c24:	2f 91       	pop	r18
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	8f 90       	pop	r8
    2c3a:	7f 90       	pop	r7
    2c3c:	6f 90       	pop	r6
    2c3e:	5f 90       	pop	r5
    2c40:	4f 90       	pop	r4
    2c42:	3f 90       	pop	r3
    2c44:	2f 90       	pop	r2
    2c46:	1f 90       	pop	r1
    2c48:	0f 90       	pop	r0
    2c4a:	0c be       	out	0x3c, r0	; 60
    2c4c:	0f 90       	pop	r0
    2c4e:	0b be       	out	0x3b, r0	; 59
    2c50:	0f 90       	pop	r0
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	0f 90       	pop	r0
    2c56:	08 95       	ret
    2c58:	08 95       	ret

00002c5a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2c5a:	0f 92       	push	r0
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	0f 92       	push	r0
    2c62:	0b b6       	in	r0, 0x3b	; 59
    2c64:	0f 92       	push	r0
    2c66:	0c b6       	in	r0, 0x3c	; 60
    2c68:	0f 92       	push	r0
    2c6a:	1f 92       	push	r1
    2c6c:	11 24       	eor	r1, r1
    2c6e:	2f 92       	push	r2
    2c70:	3f 92       	push	r3
    2c72:	4f 92       	push	r4
    2c74:	5f 92       	push	r5
    2c76:	6f 92       	push	r6
    2c78:	7f 92       	push	r7
    2c7a:	8f 92       	push	r8
    2c7c:	9f 92       	push	r9
    2c7e:	af 92       	push	r10
    2c80:	bf 92       	push	r11
    2c82:	cf 92       	push	r12
    2c84:	df 92       	push	r13
    2c86:	ef 92       	push	r14
    2c88:	ff 92       	push	r15
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	2f 93       	push	r18
    2c90:	3f 93       	push	r19
    2c92:	4f 93       	push	r20
    2c94:	5f 93       	push	r21
    2c96:	6f 93       	push	r22
    2c98:	7f 93       	push	r23
    2c9a:	8f 93       	push	r24
    2c9c:	9f 93       	push	r25
    2c9e:	af 93       	push	r26
    2ca0:	bf 93       	push	r27
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ef 93       	push	r30
    2ca8:	ff 93       	push	r31
    2caa:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2cae:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2cb2:	0d b6       	in	r0, 0x3d	; 61
    2cb4:	0d 92       	st	X+, r0
    2cb6:	0e b6       	in	r0, 0x3e	; 62
    2cb8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2cba:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2cbe:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2cc2:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2cc6:	cd 91       	ld	r28, X+
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	dd 91       	ld	r29, X+
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	bf 91       	pop	r27
    2cd8:	af 91       	pop	r26
    2cda:	9f 91       	pop	r25
    2cdc:	8f 91       	pop	r24
    2cde:	7f 91       	pop	r23
    2ce0:	6f 91       	pop	r22
    2ce2:	5f 91       	pop	r21
    2ce4:	4f 91       	pop	r20
    2ce6:	3f 91       	pop	r19
    2ce8:	2f 91       	pop	r18
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	8f 90       	pop	r8
    2cfe:	7f 90       	pop	r7
    2d00:	6f 90       	pop	r6
    2d02:	5f 90       	pop	r5
    2d04:	4f 90       	pop	r4
    2d06:	3f 90       	pop	r3
    2d08:	2f 90       	pop	r2
    2d0a:	1f 90       	pop	r1
    2d0c:	0f 90       	pop	r0
    2d0e:	0c be       	out	0x3c, r0	; 60
    2d10:	0f 90       	pop	r0
    2d12:	0b be       	out	0x3b, r0	; 59
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2d1a:	08 95       	ret

00002d1c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	0f 92       	push	r0
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	0c b6       	in	r0, 0x3c	; 60
    2d2a:	0f 92       	push	r0
    2d2c:	1f 92       	push	r1
    2d2e:	11 24       	eor	r1, r1
    2d30:	2f 92       	push	r2
    2d32:	3f 92       	push	r3
    2d34:	4f 92       	push	r4
    2d36:	5f 92       	push	r5
    2d38:	6f 92       	push	r6
    2d3a:	7f 92       	push	r7
    2d3c:	8f 92       	push	r8
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	2f 93       	push	r18
    2d52:	3f 93       	push	r19
    2d54:	4f 93       	push	r20
    2d56:	5f 93       	push	r21
    2d58:	6f 93       	push	r22
    2d5a:	7f 93       	push	r23
    2d5c:	8f 93       	push	r24
    2d5e:	9f 93       	push	r25
    2d60:	af 93       	push	r26
    2d62:	bf 93       	push	r27
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	ef 93       	push	r30
    2d6a:	ff 93       	push	r31
    2d6c:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2d70:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2d74:	0d b6       	in	r0, 0x3d	; 61
    2d76:	0d 92       	st	X+, r0
    2d78:	0e b6       	in	r0, 0x3e	; 62
    2d7a:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2d7c:	0e 94 2f 1b 	call	0x365e	; 0x365e <vTaskIncrementTick>
	vTaskSwitchContext();
    2d80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2d84:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2d88:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2d8c:	cd 91       	ld	r28, X+
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	dd 91       	ld	r29, X+
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	ff 91       	pop	r31
    2d96:	ef 91       	pop	r30
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	bf 91       	pop	r27
    2d9e:	af 91       	pop	r26
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	7f 91       	pop	r23
    2da6:	6f 91       	pop	r22
    2da8:	5f 91       	pop	r21
    2daa:	4f 91       	pop	r20
    2dac:	3f 91       	pop	r19
    2dae:	2f 91       	pop	r18
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	bf 90       	pop	r11
    2dbe:	af 90       	pop	r10
    2dc0:	9f 90       	pop	r9
    2dc2:	8f 90       	pop	r8
    2dc4:	7f 90       	pop	r7
    2dc6:	6f 90       	pop	r6
    2dc8:	5f 90       	pop	r5
    2dca:	4f 90       	pop	r4
    2dcc:	3f 90       	pop	r3
    2dce:	2f 90       	pop	r2
    2dd0:	1f 90       	pop	r1
    2dd2:	0f 90       	pop	r0
    2dd4:	0c be       	out	0x3c, r0	; 60
    2dd6:	0f 90       	pop	r0
    2dd8:	0b be       	out	0x3b, r0	; 59
    2dda:	0f 90       	pop	r0
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2de0:	08 95       	ret

00002de2 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2de2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <vPortYieldFromTick>
		asm volatile ( "reti" );
    2de6:	18 95       	reti

00002de8 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	ec 01       	movw	r28, r24
    2dee:	88 a1       	ldd	r24, Y+32	; 0x20
    2df0:	81 11       	cpse	r24, r1
    2df2:	0b c0       	rjmp	.+22     	; 0x2e0a <prvCopyDataToQueue+0x22>
    2df4:	88 81       	ld	r24, Y
    2df6:	99 81       	ldd	r25, Y+1	; 0x01
    2df8:	89 2b       	or	r24, r25
    2dfa:	e1 f5       	brne	.+120    	; 0x2e74 <prvCopyDataToQueue+0x8c>
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <vTaskPriorityDisinherit>
    2e04:	1a 82       	std	Y+2, r1	; 0x02
    2e06:	1b 82       	std	Y+3, r1	; 0x03
    2e08:	35 c0       	rjmp	.+106    	; 0x2e74 <prvCopyDataToQueue+0x8c>
    2e0a:	41 11       	cpse	r20, r1
    2e0c:	17 c0       	rjmp	.+46     	; 0x2e3c <prvCopyDataToQueue+0x54>
    2e0e:	48 2f       	mov	r20, r24
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	9d 81       	ldd	r25, Y+5	; 0x05
    2e16:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
    2e1a:	28 a1       	ldd	r18, Y+32	; 0x20
    2e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e20:	82 0f       	add	r24, r18
    2e22:	91 1d       	adc	r25, r1
    2e24:	8c 83       	std	Y+4, r24	; 0x04
    2e26:	9d 83       	std	Y+5, r25	; 0x05
    2e28:	2a 81       	ldd	r18, Y+2	; 0x02
    2e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e2c:	82 17       	cp	r24, r18
    2e2e:	93 07       	cpc	r25, r19
    2e30:	08 f1       	brcs	.+66     	; 0x2e74 <prvCopyDataToQueue+0x8c>
    2e32:	88 81       	ld	r24, Y
    2e34:	99 81       	ldd	r25, Y+1	; 0x01
    2e36:	8c 83       	std	Y+4, r24	; 0x04
    2e38:	9d 83       	std	Y+5, r25	; 0x05
    2e3a:	1c c0       	rjmp	.+56     	; 0x2e74 <prvCopyDataToQueue+0x8c>
    2e3c:	48 2f       	mov	r20, r24
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	8e 81       	ldd	r24, Y+6	; 0x06
    2e42:	9f 81       	ldd	r25, Y+7	; 0x07
    2e44:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
    2e48:	88 a1       	ldd	r24, Y+32	; 0x20
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	91 95       	neg	r25
    2e4e:	81 95       	neg	r24
    2e50:	91 09       	sbc	r25, r1
    2e52:	2e 81       	ldd	r18, Y+6	; 0x06
    2e54:	3f 81       	ldd	r19, Y+7	; 0x07
    2e56:	28 0f       	add	r18, r24
    2e58:	39 1f       	adc	r19, r25
    2e5a:	2e 83       	std	Y+6, r18	; 0x06
    2e5c:	3f 83       	std	Y+7, r19	; 0x07
    2e5e:	48 81       	ld	r20, Y
    2e60:	59 81       	ldd	r21, Y+1	; 0x01
    2e62:	24 17       	cp	r18, r20
    2e64:	35 07       	cpc	r19, r21
    2e66:	30 f4       	brcc	.+12     	; 0x2e74 <prvCopyDataToQueue+0x8c>
    2e68:	2a 81       	ldd	r18, Y+2	; 0x02
    2e6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e6c:	82 0f       	add	r24, r18
    2e6e:	93 1f       	adc	r25, r19
    2e70:	8e 83       	std	Y+6, r24	; 0x06
    2e72:	9f 83       	std	Y+7, r25	; 0x07
    2e74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	8e 8f       	std	Y+30, r24	; 0x1e
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	08 95       	ret

00002e80 <prvCopyDataFromQueue>:
    2e80:	fc 01       	movw	r30, r24
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	a1 f0       	breq	.+40     	; 0x2eb2 <prvCopyDataFromQueue+0x32>
    2e8a:	40 a1       	ldd	r20, Z+32	; 0x20
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	26 81       	ldd	r18, Z+6	; 0x06
    2e90:	37 81       	ldd	r19, Z+7	; 0x07
    2e92:	24 0f       	add	r18, r20
    2e94:	35 1f       	adc	r19, r21
    2e96:	26 83       	std	Z+6, r18	; 0x06
    2e98:	37 83       	std	Z+7, r19	; 0x07
    2e9a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e9c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e9e:	2a 17       	cp	r18, r26
    2ea0:	3b 07       	cpc	r19, r27
    2ea2:	10 f0       	brcs	.+4      	; 0x2ea8 <prvCopyDataFromQueue+0x28>
    2ea4:	86 83       	std	Z+6, r24	; 0x06
    2ea6:	97 83       	std	Z+7, r25	; 0x07
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	66 81       	ldd	r22, Z+6	; 0x06
    2eac:	77 81       	ldd	r23, Z+7	; 0x07
    2eae:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <memcpy>
    2eb2:	08 95       	ret

00002eb4 <prvUnlockQueue>:
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	ec 01       	movw	r28, r24
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	0f 92       	push	r0
    2ec4:	8a a1       	ldd	r24, Y+34	; 0x22
    2ec6:	18 16       	cp	r1, r24
    2ec8:	b4 f4       	brge	.+44     	; 0x2ef6 <prvUnlockQueue+0x42>
    2eca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ecc:	81 11       	cpse	r24, r1
    2ece:	05 c0       	rjmp	.+10     	; 0x2eda <prvUnlockQueue+0x26>
    2ed0:	12 c0       	rjmp	.+36     	; 0x2ef6 <prvUnlockQueue+0x42>
    2ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <prvUnlockQueue+0x2c>
    2ed8:	0e c0       	rjmp	.+28     	; 0x2ef6 <prvUnlockQueue+0x42>
    2eda:	8e 01       	movw	r16, r28
    2edc:	0d 5e       	subi	r16, 0xED	; 237
    2ede:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <xTaskRemoveFromEventList>
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <vTaskMissedYield>
    2eec:	8a a1       	ldd	r24, Y+34	; 0x22
    2eee:	81 50       	subi	r24, 0x01	; 1
    2ef0:	8a a3       	std	Y+34, r24	; 0x22
    2ef2:	18 16       	cp	r1, r24
    2ef4:	74 f3       	brlt	.-36     	; 0x2ed2 <prvUnlockQueue+0x1e>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	8a a3       	std	Y+34, r24	; 0x22
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	0f 92       	push	r0
    2f04:	89 a1       	ldd	r24, Y+33	; 0x21
    2f06:	18 16       	cp	r1, r24
    2f08:	b4 f4       	brge	.+44     	; 0x2f36 <prvUnlockQueue+0x82>
    2f0a:	88 85       	ldd	r24, Y+8	; 0x08
    2f0c:	81 11       	cpse	r24, r1
    2f0e:	05 c0       	rjmp	.+10     	; 0x2f1a <prvUnlockQueue+0x66>
    2f10:	12 c0       	rjmp	.+36     	; 0x2f36 <prvUnlockQueue+0x82>
    2f12:	88 85       	ldd	r24, Y+8	; 0x08
    2f14:	81 11       	cpse	r24, r1
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <prvUnlockQueue+0x6c>
    2f18:	0e c0       	rjmp	.+28     	; 0x2f36 <prvUnlockQueue+0x82>
    2f1a:	8e 01       	movw	r16, r28
    2f1c:	08 5f       	subi	r16, 0xF8	; 248
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	c8 01       	movw	r24, r16
    2f22:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <xTaskRemoveFromEventList>
    2f26:	81 11       	cpse	r24, r1
    2f28:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <vTaskMissedYield>
    2f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2e:	81 50       	subi	r24, 0x01	; 1
    2f30:	89 a3       	std	Y+33, r24	; 0x21
    2f32:	18 16       	cp	r1, r24
    2f34:	74 f3       	brlt	.-36     	; 0x2f12 <prvUnlockQueue+0x5e>
    2f36:	8f ef       	ldi	r24, 0xFF	; 255
    2f38:	89 a3       	std	Y+33, r24	; 0x21
    2f3a:	0f 90       	pop	r0
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	08 95       	ret

00002f48 <xQueueGenericReset>:
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	61 30       	cpi	r22, 0x01	; 1
    2f50:	59 f0       	breq	.+22     	; 0x2f68 <xQueueGenericReset+0x20>
    2f52:	fc 01       	movw	r30, r24
    2f54:	23 89       	ldd	r18, Z+19	; 0x13
    2f56:	30 85       	ldd	r19, Z+8	; 0x08
    2f58:	31 11       	cpse	r19, r1
    2f5a:	2c c0       	rjmp	.+88     	; 0x2fb4 <xQueueGenericReset+0x6c>
    2f5c:	11 e0       	ldi	r17, 0x01	; 1
    2f5e:	21 11       	cpse	r18, r1
    2f60:	10 e0       	ldi	r17, 0x00	; 0
    2f62:	21 11       	cpse	r18, r1
    2f64:	28 c0       	rjmp	.+80     	; 0x2fb6 <xQueueGenericReset+0x6e>
    2f66:	01 c0       	rjmp	.+2      	; 0x2f6a <xQueueGenericReset+0x22>
    2f68:	11 e0       	ldi	r17, 0x01	; 1
    2f6a:	ec 01       	movw	r28, r24
    2f6c:	48 81       	ld	r20, Y
    2f6e:	59 81       	ldd	r21, Y+1	; 0x01
    2f70:	28 a1       	ldd	r18, Y+32	; 0x20
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f76:	62 9f       	mul	r22, r18
    2f78:	c0 01       	movw	r24, r0
    2f7a:	63 9f       	mul	r22, r19
    2f7c:	90 0d       	add	r25, r0
    2f7e:	11 24       	eor	r1, r1
    2f80:	ba 01       	movw	r22, r20
    2f82:	68 0f       	add	r22, r24
    2f84:	79 1f       	adc	r23, r25
    2f86:	6a 83       	std	Y+2, r22	; 0x02
    2f88:	7b 83       	std	Y+3, r23	; 0x03
    2f8a:	1e 8e       	std	Y+30, r1	; 0x1e
    2f8c:	4c 83       	std	Y+4, r20	; 0x04
    2f8e:	5d 83       	std	Y+5, r21	; 0x05
    2f90:	82 1b       	sub	r24, r18
    2f92:	93 0b       	sbc	r25, r19
    2f94:	84 0f       	add	r24, r20
    2f96:	95 1f       	adc	r25, r21
    2f98:	8e 83       	std	Y+6, r24	; 0x06
    2f9a:	9f 83       	std	Y+7, r25	; 0x07
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	89 a3       	std	Y+33, r24	; 0x21
    2fa0:	8a a3       	std	Y+34, r24	; 0x22
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	08 96       	adiw	r24, 0x08	; 8
    2fa6:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    2faa:	ce 01       	movw	r24, r28
    2fac:	43 96       	adiw	r24, 0x13	; 19
    2fae:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <xQueueGenericReset+0x6e>
    2fb4:	10 e0       	ldi	r17, 0x00	; 0
    2fb6:	81 2f       	mov	r24, r17
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	08 95       	ret

00002fc0 <xQueueGenericCreate>:
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	88 23       	and	r24, r24
    2fca:	01 f1       	breq	.+64     	; 0x300c <xQueueGenericCreate+0x4c>
    2fcc:	06 2f       	mov	r16, r22
    2fce:	18 2f       	mov	r17, r24
    2fd0:	83 e2       	ldi	r24, 0x23	; 35
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2fd8:	ec 01       	movw	r28, r24
    2fda:	89 2b       	or	r24, r25
    2fdc:	c9 f0       	breq	.+50     	; 0x3010 <xQueueGenericCreate+0x50>
    2fde:	10 9f       	mul	r17, r16
    2fe0:	c0 01       	movw	r24, r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	01 96       	adiw	r24, 0x01	; 1
    2fe6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    2fea:	88 83       	st	Y, r24
    2fec:	99 83       	std	Y+1, r25	; 0x01
    2fee:	89 2b       	or	r24, r25
    2ff0:	39 f0       	breq	.+14     	; 0x3000 <xQueueGenericCreate+0x40>
    2ff2:	1f 8f       	std	Y+31, r17	; 0x1f
    2ff4:	08 a3       	std	Y+32, r16	; 0x20
    2ff6:	61 e0       	ldi	r22, 0x01	; 1
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <xQueueGenericReset>
    2ffe:	08 c0       	rjmp	.+16     	; 0x3010 <xQueueGenericCreate+0x50>
    3000:	ce 01       	movw	r24, r28
    3002:	0e 94 94 14 	call	0x2928	; 0x2928 <vPortFree>
    3006:	c0 e0       	ldi	r28, 0x00	; 0
    3008:	d0 e0       	ldi	r29, 0x00	; 0
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <xQueueGenericCreate+0x50>
    300c:	c0 e0       	ldi	r28, 0x00	; 0
    300e:	d0 e0       	ldi	r29, 0x00	; 0
    3010:	ce 01       	movw	r24, r28
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	08 95       	ret

0000301c <xQueueGenericSend>:
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	29 97       	sbiw	r28, 0x09	; 9
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	7c 01       	movw	r14, r24
    303c:	5b 01       	movw	r10, r22
    303e:	2e 83       	std	Y+6, r18	; 0x06
    3040:	3f 83       	std	Y+7, r19	; 0x07
    3042:	48 87       	std	Y+8, r20	; 0x08
    3044:	59 87       	std	Y+9, r21	; 0x09
    3046:	10 e0       	ldi	r17, 0x00	; 0
    3048:	6c 01       	movw	r12, r24
    304a:	88 e0       	ldi	r24, 0x08	; 8
    304c:	c8 0e       	add	r12, r24
    304e:	d1 1c       	adc	r13, r1
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	0f 92       	push	r0
    3056:	f7 01       	movw	r30, r14
    3058:	96 8d       	ldd	r25, Z+30	; 0x1e
    305a:	87 8d       	ldd	r24, Z+31	; 0x1f
    305c:	98 17       	cp	r25, r24
    305e:	a8 f4       	brcc	.+42     	; 0x308a <xQueueGenericSend+0x6e>
    3060:	40 2f       	mov	r20, r16
    3062:	b5 01       	movw	r22, r10
    3064:	c7 01       	movw	r24, r14
    3066:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <prvCopyDataToQueue>
    306a:	f7 01       	movw	r30, r14
    306c:	83 89       	ldd	r24, Z+19	; 0x13
    306e:	88 23       	and	r24, r24
    3070:	41 f0       	breq	.+16     	; 0x3082 <xQueueGenericSend+0x66>
    3072:	c7 01       	movw	r24, r14
    3074:	43 96       	adiw	r24, 0x13	; 19
    3076:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <xTaskRemoveFromEventList>
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	11 f4       	brne	.+4      	; 0x3082 <xQueueGenericSend+0x66>
    307e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    3082:	0f 90       	pop	r0
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	56 c0       	rjmp	.+172    	; 0x3136 <xQueueGenericSend+0x11a>
    308a:	8e 81       	ldd	r24, Y+6	; 0x06
    308c:	9f 81       	ldd	r25, Y+7	; 0x07
    308e:	a8 85       	ldd	r26, Y+8	; 0x08
    3090:	b9 85       	ldd	r27, Y+9	; 0x09
    3092:	89 2b       	or	r24, r25
    3094:	8a 2b       	or	r24, r26
    3096:	8b 2b       	or	r24, r27
    3098:	21 f4       	brne	.+8      	; 0x30a2 <xQueueGenericSend+0x86>
    309a:	0f 90       	pop	r0
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	4a c0       	rjmp	.+148    	; 0x3136 <xQueueGenericSend+0x11a>
    30a2:	11 11       	cpse	r17, r1
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <xQueueGenericSend+0x94>
    30a6:	ce 01       	movw	r24, r28
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <vTaskSetTimeOutState>
    30ae:	11 e0       	ldi	r17, 0x01	; 1
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	0f 92       	push	r0
    30be:	f7 01       	movw	r30, r14
    30c0:	81 a1       	ldd	r24, Z+33	; 0x21
    30c2:	8f 3f       	cpi	r24, 0xFF	; 255
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <xQueueGenericSend+0xac>
    30c6:	11 a2       	std	Z+33, r1	; 0x21
    30c8:	f7 01       	movw	r30, r14
    30ca:	82 a1       	ldd	r24, Z+34	; 0x22
    30cc:	8f 3f       	cpi	r24, 0xFF	; 255
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <xQueueGenericSend+0xb6>
    30d0:	12 a2       	std	Z+34, r1	; 0x22
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	be 01       	movw	r22, r28
    30d8:	6a 5f       	subi	r22, 0xFA	; 250
    30da:	7f 4f       	sbci	r23, 0xFF	; 255
    30dc:	ce 01       	movw	r24, r28
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <xTaskCheckForTimeOut>
    30e4:	81 11       	cpse	r24, r1
    30e6:	21 c0       	rjmp	.+66     	; 0x312a <xQueueGenericSend+0x10e>
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	0f 92       	push	r0
    30ee:	f7 01       	movw	r30, r14
    30f0:	96 8d       	ldd	r25, Z+30	; 0x1e
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	87 8d       	ldd	r24, Z+31	; 0x1f
    30f8:	98 13       	cpse	r25, r24
    30fa:	11 c0       	rjmp	.+34     	; 0x311e <xQueueGenericSend+0x102>
    30fc:	4e 81       	ldd	r20, Y+6	; 0x06
    30fe:	5f 81       	ldd	r21, Y+7	; 0x07
    3100:	68 85       	ldd	r22, Y+8	; 0x08
    3102:	79 85       	ldd	r23, Y+9	; 0x09
    3104:	c6 01       	movw	r24, r12
    3106:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <vTaskPlaceOnEventList>
    310a:	c7 01       	movw	r24, r14
    310c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    3110:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    3114:	81 11       	cpse	r24, r1
    3116:	9c cf       	rjmp	.-200    	; 0x3050 <xQueueGenericSend+0x34>
    3118:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    311c:	99 cf       	rjmp	.-206    	; 0x3050 <xQueueGenericSend+0x34>
    311e:	c7 01       	movw	r24, r14
    3120:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    3124:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    3128:	93 cf       	rjmp	.-218    	; 0x3050 <xQueueGenericSend+0x34>
    312a:	c7 01       	movw	r24, r14
    312c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    3130:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	29 96       	adiw	r28, 0x09	; 9
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	bf 90       	pop	r11
    314e:	af 90       	pop	r10
    3150:	08 95       	ret

00003152 <xQueueGenericReceive>:
    3152:	af 92       	push	r10
    3154:	bf 92       	push	r11
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	29 97       	sbiw	r28, 0x09	; 9
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	7c 01       	movw	r14, r24
    3172:	5b 01       	movw	r10, r22
    3174:	2e 83       	std	Y+6, r18	; 0x06
    3176:	3f 83       	std	Y+7, r19	; 0x07
    3178:	48 87       	std	Y+8, r20	; 0x08
    317a:	59 87       	std	Y+9, r21	; 0x09
    317c:	10 e0       	ldi	r17, 0x00	; 0
    317e:	6c 01       	movw	r12, r24
    3180:	83 e1       	ldi	r24, 0x13	; 19
    3182:	c8 0e       	add	r12, r24
    3184:	d1 1c       	adc	r13, r1
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	0f 92       	push	r0
    318c:	f7 01       	movw	r30, r14
    318e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3190:	88 23       	and	r24, r24
    3192:	99 f1       	breq	.+102    	; 0x31fa <xQueueGenericReceive+0xa8>
    3194:	c6 80       	ldd	r12, Z+6	; 0x06
    3196:	d7 80       	ldd	r13, Z+7	; 0x07
    3198:	b5 01       	movw	r22, r10
    319a:	c7 01       	movw	r24, r14
    319c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <prvCopyDataFromQueue>
    31a0:	01 11       	cpse	r16, r1
    31a2:	1a c0       	rjmp	.+52     	; 0x31d8 <xQueueGenericReceive+0x86>
    31a4:	f7 01       	movw	r30, r14
    31a6:	86 8d       	ldd	r24, Z+30	; 0x1e
    31a8:	81 50       	subi	r24, 0x01	; 1
    31aa:	86 8f       	std	Z+30, r24	; 0x1e
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	89 2b       	or	r24, r25
    31b2:	29 f4       	brne	.+10     	; 0x31be <xQueueGenericReceive+0x6c>
    31b4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <xTaskGetCurrentTaskHandle>
    31b8:	f7 01       	movw	r30, r14
    31ba:	82 83       	std	Z+2, r24	; 0x02
    31bc:	93 83       	std	Z+3, r25	; 0x03
    31be:	f7 01       	movw	r30, r14
    31c0:	80 85       	ldd	r24, Z+8	; 0x08
    31c2:	88 23       	and	r24, r24
    31c4:	b1 f0       	breq	.+44     	; 0x31f2 <xQueueGenericReceive+0xa0>
    31c6:	c7 01       	movw	r24, r14
    31c8:	08 96       	adiw	r24, 0x08	; 8
    31ca:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <xTaskRemoveFromEventList>
    31ce:	81 30       	cpi	r24, 0x01	; 1
    31d0:	81 f4       	brne	.+32     	; 0x31f2 <xQueueGenericReceive+0xa0>
    31d2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    31d6:	0d c0       	rjmp	.+26     	; 0x31f2 <xQueueGenericReceive+0xa0>
    31d8:	f7 01       	movw	r30, r14
    31da:	c6 82       	std	Z+6, r12	; 0x06
    31dc:	d7 82       	std	Z+7, r13	; 0x07
    31de:	83 89       	ldd	r24, Z+19	; 0x13
    31e0:	88 23       	and	r24, r24
    31e2:	39 f0       	breq	.+14     	; 0x31f2 <xQueueGenericReceive+0xa0>
    31e4:	c7 01       	movw	r24, r14
    31e6:	43 96       	adiw	r24, 0x13	; 19
    31e8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <xTaskRemoveFromEventList>
    31ec:	81 11       	cpse	r24, r1
    31ee:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    31f2:	0f 90       	pop	r0
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	62 c0       	rjmp	.+196    	; 0x32be <xQueueGenericReceive+0x16c>
    31fa:	8e 81       	ldd	r24, Y+6	; 0x06
    31fc:	9f 81       	ldd	r25, Y+7	; 0x07
    31fe:	a8 85       	ldd	r26, Y+8	; 0x08
    3200:	b9 85       	ldd	r27, Y+9	; 0x09
    3202:	89 2b       	or	r24, r25
    3204:	8a 2b       	or	r24, r26
    3206:	8b 2b       	or	r24, r27
    3208:	21 f4       	brne	.+8      	; 0x3212 <xQueueGenericReceive+0xc0>
    320a:	0f 90       	pop	r0
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	56 c0       	rjmp	.+172    	; 0x32be <xQueueGenericReceive+0x16c>
    3212:	11 11       	cpse	r17, r1
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <xQueueGenericReceive+0xce>
    3216:	ce 01       	movw	r24, r28
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <vTaskSetTimeOutState>
    321e:	11 e0       	ldi	r17, 0x01	; 1
    3220:	0f 90       	pop	r0
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	0f 92       	push	r0
    322e:	f7 01       	movw	r30, r14
    3230:	81 a1       	ldd	r24, Z+33	; 0x21
    3232:	8f 3f       	cpi	r24, 0xFF	; 255
    3234:	09 f4       	brne	.+2      	; 0x3238 <xQueueGenericReceive+0xe6>
    3236:	11 a2       	std	Z+33, r1	; 0x21
    3238:	f7 01       	movw	r30, r14
    323a:	82 a1       	ldd	r24, Z+34	; 0x22
    323c:	8f 3f       	cpi	r24, 0xFF	; 255
    323e:	09 f4       	brne	.+2      	; 0x3242 <xQueueGenericReceive+0xf0>
    3240:	12 a2       	std	Z+34, r1	; 0x22
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	be 01       	movw	r22, r28
    3248:	6a 5f       	subi	r22, 0xFA	; 250
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	ce 01       	movw	r24, r28
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <xTaskCheckForTimeOut>
    3254:	81 11       	cpse	r24, r1
    3256:	2d c0       	rjmp	.+90     	; 0x32b2 <xQueueGenericReceive+0x160>
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	0f 92       	push	r0
    325e:	f7 01       	movw	r30, r14
    3260:	86 8d       	ldd	r24, Z+30	; 0x1e
    3262:	0f 90       	pop	r0
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	81 11       	cpse	r24, r1
    3268:	1e c0       	rjmp	.+60     	; 0x32a6 <xQueueGenericReceive+0x154>
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	89 2b       	or	r24, r25
    3270:	49 f4       	brne	.+18     	; 0x3284 <xQueueGenericReceive+0x132>
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	0f 92       	push	r0
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <vTaskPriorityInherit>
    3280:	0f 90       	pop	r0
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	4e 81       	ldd	r20, Y+6	; 0x06
    3286:	5f 81       	ldd	r21, Y+7	; 0x07
    3288:	68 85       	ldd	r22, Y+8	; 0x08
    328a:	79 85       	ldd	r23, Y+9	; 0x09
    328c:	c6 01       	movw	r24, r12
    328e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <vTaskPlaceOnEventList>
    3292:	c7 01       	movw	r24, r14
    3294:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    3298:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    329c:	81 11       	cpse	r24, r1
    329e:	73 cf       	rjmp	.-282    	; 0x3186 <xQueueGenericReceive+0x34>
    32a0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    32a4:	70 cf       	rjmp	.-288    	; 0x3186 <xQueueGenericReceive+0x34>
    32a6:	c7 01       	movw	r24, r14
    32a8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    32ac:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    32b0:	6a cf       	rjmp	.-300    	; 0x3186 <xQueueGenericReceive+0x34>
    32b2:	c7 01       	movw	r24, r14
    32b4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <prvUnlockQueue>
    32b8:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	29 96       	adiw	r28, 0x09	; 9
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	df 90       	pop	r13
    32d2:	cf 90       	pop	r12
    32d4:	bf 90       	pop	r11
    32d6:	af 90       	pop	r10
    32d8:	08 95       	ret

000032da <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    32e0:	fc 01       	movw	r30, r24
    32e2:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    32e4:	0f 90       	pop	r0
    32e6:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    32e8:	08 95       	ret

000032ea <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    32ea:	c2 e6       	ldi	r28, 0x62	; 98
    32ec:	d1 e3       	ldi	r29, 0x31	; 49
    32ee:	88 81       	ld	r24, Y
    32f0:	82 30       	cpi	r24, 0x02	; 2
    32f2:	e8 f3       	brcs	.-6      	; 0x32ee <prvIdleTask+0x4>
    32f4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    32f8:	fa cf       	rjmp	.-12     	; 0x32ee <prvIdleTask+0x4>

000032fa <prvAddCurrentTaskToDelayedList>:
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	6b 01       	movw	r12, r22
    3304:	7c 01       	movw	r14, r24
    3306:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    330a:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    330e:	62 83       	std	Z+2, r22	; 0x02
    3310:	73 83       	std	Z+3, r23	; 0x03
    3312:	84 83       	std	Z+4, r24	; 0x04
    3314:	95 83       	std	Z+5, r25	; 0x05
    3316:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    331a:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    331e:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3322:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3326:	c8 16       	cp	r12, r24
    3328:	d9 06       	cpc	r13, r25
    332a:	ea 06       	cpc	r14, r26
    332c:	fb 06       	cpc	r15, r27
    332e:	68 f4       	brcc	.+26     	; 0x334a <prvAddCurrentTaskToDelayedList+0x50>
    3330:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3334:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3338:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    333c:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    3340:	6e 5f       	subi	r22, 0xFE	; 254
    3342:	7f 4f       	sbci	r23, 0xFF	; 255
    3344:	0e 94 08 15 	call	0x2a10	; 0x2a10 <vListInsert>
    3348:	21 c0       	rjmp	.+66     	; 0x338c <prvAddCurrentTaskToDelayedList+0x92>
    334a:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    334e:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3352:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    3356:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    335a:	6e 5f       	subi	r22, 0xFE	; 254
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <vListInsert>
    3362:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3366:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    336a:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    336e:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3372:	c8 16       	cp	r12, r24
    3374:	d9 06       	cpc	r13, r25
    3376:	ea 06       	cpc	r14, r26
    3378:	fb 06       	cpc	r15, r27
    337a:	40 f4       	brcc	.+16     	; 0x338c <prvAddCurrentTaskToDelayedList+0x92>
    337c:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    3380:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3384:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    3388:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    338c:	ff 90       	pop	r15
    338e:	ef 90       	pop	r14
    3390:	df 90       	pop	r13
    3392:	cf 90       	pop	r12
    3394:	08 95       	ret

00003396 <xTaskGenericCreate>:
    3396:	4f 92       	push	r4
    3398:	5f 92       	push	r5
    339a:	6f 92       	push	r6
    339c:	7f 92       	push	r7
    339e:	8f 92       	push	r8
    33a0:	9f 92       	push	r9
    33a2:	af 92       	push	r10
    33a4:	bf 92       	push	r11
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	5c 01       	movw	r10, r24
    33b8:	4b 01       	movw	r8, r22
    33ba:	3a 01       	movw	r6, r20
    33bc:	29 01       	movw	r4, r18
    33be:	88 e2       	ldi	r24, 0x28	; 40
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    33c6:	ec 01       	movw	r28, r24
    33c8:	89 2b       	or	r24, r25
    33ca:	09 f4       	brne	.+2      	; 0x33ce <xTaskGenericCreate+0x38>
    33cc:	d4 c0       	rjmp	.+424    	; 0x3576 <xTaskGenericCreate+0x1e0>
    33ce:	c1 14       	cp	r12, r1
    33d0:	d1 04       	cpc	r13, r1
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <xTaskGenericCreate+0x40>
    33d4:	cc c0       	rjmp	.+408    	; 0x356e <xTaskGenericCreate+0x1d8>
    33d6:	c3 01       	movw	r24, r6
    33d8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <pvPortMalloc>
    33dc:	8b 8f       	std	Y+27, r24	; 0x1b
    33de:	9c 8f       	std	Y+28, r25	; 0x1c
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	21 f4       	brne	.+8      	; 0x33ec <xTaskGenericCreate+0x56>
    33e4:	ce 01       	movw	r24, r28
    33e6:	0e 94 94 14 	call	0x2928	; 0x2928 <vPortFree>
    33ea:	c5 c0       	rjmp	.+394    	; 0x3576 <xTaskGenericCreate+0x1e0>
    33ec:	a3 01       	movw	r20, r6
    33ee:	61 e1       	ldi	r22, 0x11	; 17
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <memset>
    33f6:	93 01       	movw	r18, r6
    33f8:	21 50       	subi	r18, 0x01	; 1
    33fa:	31 09       	sbc	r19, r1
    33fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3400:	3c 01       	movw	r6, r24
    3402:	62 0e       	add	r6, r18
    3404:	73 1e       	adc	r7, r19
    3406:	4a e0       	ldi	r20, 0x0A	; 10
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	b4 01       	movw	r22, r8
    340c:	ce 01       	movw	r24, r28
    340e:	4d 96       	adiw	r24, 0x1d	; 29
    3410:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <strncpy>
    3414:	1e a2       	std	Y+38, r1	; 0x26
    3416:	10 2f       	mov	r17, r16
    3418:	04 30       	cpi	r16, 0x04	; 4
    341a:	08 f0       	brcs	.+2      	; 0x341e <xTaskGenericCreate+0x88>
    341c:	13 e0       	ldi	r17, 0x03	; 3
    341e:	1a 8f       	std	Y+26, r17	; 0x1a
    3420:	1f a3       	std	Y+39, r17	; 0x27
    3422:	6e 01       	movw	r12, r28
    3424:	22 e0       	ldi	r18, 0x02	; 2
    3426:	c2 0e       	add	r12, r18
    3428:	d1 1c       	adc	r13, r1
    342a:	c6 01       	movw	r24, r12
    342c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vListInitialiseItem>
    3430:	ce 01       	movw	r24, r28
    3432:	0e 96       	adiw	r24, 0x0e	; 14
    3434:	0e 94 dd 14 	call	0x29ba	; 0x29ba <vListInitialiseItem>
    3438:	ca 87       	std	Y+10, r28	; 0x0a
    343a:	db 87       	std	Y+11, r29	; 0x0b
    343c:	84 e0       	ldi	r24, 0x04	; 4
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e0       	ldi	r26, 0x00	; 0
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	81 1b       	sub	r24, r17
    3446:	91 09       	sbc	r25, r1
    3448:	a1 09       	sbc	r26, r1
    344a:	b1 09       	sbc	r27, r1
    344c:	8e 87       	std	Y+14, r24	; 0x0e
    344e:	9f 87       	std	Y+15, r25	; 0x0f
    3450:	a8 8b       	std	Y+16, r26	; 0x10
    3452:	b9 8b       	std	Y+17, r27	; 0x11
    3454:	ce 8b       	std	Y+22, r28	; 0x16
    3456:	df 8b       	std	Y+23, r29	; 0x17
    3458:	a2 01       	movw	r20, r4
    345a:	b5 01       	movw	r22, r10
    345c:	c3 01       	movw	r24, r6
    345e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <pxPortInitialiseStack>
    3462:	88 83       	st	Y, r24
    3464:	99 83       	std	Y+1, r25	; 0x01
    3466:	e1 14       	cp	r14, r1
    3468:	f1 04       	cpc	r15, r1
    346a:	19 f0       	breq	.+6      	; 0x3472 <xTaskGenericCreate+0xdc>
    346c:	f7 01       	movw	r30, r14
    346e:	c0 83       	st	Z, r28
    3470:	d1 83       	std	Z+1, r29	; 0x01
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	0f 92       	push	r0
    3478:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    347c:	8f 5f       	subi	r24, 0xFF	; 255
    347e:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxCurrentNumberOfTasks>
    3482:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3486:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    348a:	89 2b       	or	r24, r25
    348c:	89 f5       	brne	.+98     	; 0x34f0 <xTaskGenericCreate+0x15a>
    348e:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    3492:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    3496:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	c1 f5       	brne	.+112    	; 0x350e <xTaskGenericCreate+0x178>
    349e:	82 e6       	ldi	r24, 0x62	; 98
    34a0:	91 e3       	ldi	r25, 0x31	; 49
    34a2:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34a6:	8d e6       	ldi	r24, 0x6D	; 109
    34a8:	91 e3       	ldi	r25, 0x31	; 49
    34aa:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34ae:	88 e7       	ldi	r24, 0x78	; 120
    34b0:	91 e3       	ldi	r25, 0x31	; 49
    34b2:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34b6:	83 e8       	ldi	r24, 0x83	; 131
    34b8:	91 e3       	ldi	r25, 0x31	; 49
    34ba:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34be:	87 e5       	ldi	r24, 0x57	; 87
    34c0:	91 e3       	ldi	r25, 0x31	; 49
    34c2:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34c6:	8c e4       	ldi	r24, 0x4C	; 76
    34c8:	91 e3       	ldi	r25, 0x31	; 49
    34ca:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34ce:	8d e3       	ldi	r24, 0x3D	; 61
    34d0:	91 e3       	ldi	r25, 0x31	; 49
    34d2:	0e 94 cc 14 	call	0x2998	; 0x2998 <vListInitialise>
    34d6:	87 e5       	ldi	r24, 0x57	; 87
    34d8:	91 e3       	ldi	r25, 0x31	; 49
    34da:	80 93 4a 31 	sts	0x314A, r24	; 0x80314a <pxDelayedTaskList>
    34de:	90 93 4b 31 	sts	0x314B, r25	; 0x80314b <pxDelayedTaskList+0x1>
    34e2:	8c e4       	ldi	r24, 0x4C	; 76
    34e4:	91 e3       	ldi	r25, 0x31	; 49
    34e6:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    34ea:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <xTaskGenericCreate+0x178>
    34f0:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    34f4:	81 11       	cpse	r24, r1
    34f6:	0b c0       	rjmp	.+22     	; 0x350e <xTaskGenericCreate+0x178>
    34f8:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    34fc:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3500:	82 8d       	ldd	r24, Z+26	; 0x1a
    3502:	08 17       	cp	r16, r24
    3504:	20 f0       	brcs	.+8      	; 0x350e <xTaskGenericCreate+0x178>
    3506:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    350a:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    350e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3510:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <uxTopUsedPriority>
    3514:	98 17       	cp	r25, r24
    3516:	10 f4       	brcc	.+4      	; 0x351c <xTaskGenericCreate+0x186>
    3518:	80 93 35 31 	sts	0x3135, r24	; 0x803135 <uxTopUsedPriority>
    351c:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTaskNumber>
    3520:	9f 5f       	subi	r25, 0xFF	; 255
    3522:	90 93 2e 31 	sts	0x312E, r25	; 0x80312e <uxTaskNumber>
    3526:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    352a:	98 17       	cp	r25, r24
    352c:	10 f4       	brcc	.+4      	; 0x3532 <xTaskGenericCreate+0x19c>
    352e:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3532:	fb e0       	ldi	r31, 0x0B	; 11
    3534:	8f 9f       	mul	r24, r31
    3536:	c0 01       	movw	r24, r0
    3538:	11 24       	eor	r1, r1
    353a:	b6 01       	movw	r22, r12
    353c:	8e 59       	subi	r24, 0x9E	; 158
    353e:	9e 4c       	sbci	r25, 0xCE	; 206
    3540:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
    3544:	0f 90       	pop	r0
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    354c:	88 23       	and	r24, r24
    354e:	59 f0       	breq	.+22     	; 0x3566 <xTaskGenericCreate+0x1d0>
    3550:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3554:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3558:	82 8d       	ldd	r24, Z+26	; 0x1a
    355a:	80 17       	cp	r24, r16
    355c:	30 f4       	brcc	.+12     	; 0x356a <xTaskGenericCreate+0x1d4>
    355e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	09 c0       	rjmp	.+18     	; 0x3578 <xTaskGenericCreate+0x1e2>
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	07 c0       	rjmp	.+14     	; 0x3578 <xTaskGenericCreate+0x1e2>
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <xTaskGenericCreate+0x1e2>
    356e:	cb 8e       	std	Y+27, r12	; 0x1b
    3570:	dc 8e       	std	Y+28, r13	; 0x1c
    3572:	c6 01       	movw	r24, r12
    3574:	3b cf       	rjmp	.-394    	; 0x33ec <xTaskGenericCreate+0x56>
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	df 90       	pop	r13
    3586:	cf 90       	pop	r12
    3588:	bf 90       	pop	r11
    358a:	af 90       	pop	r10
    358c:	9f 90       	pop	r9
    358e:	8f 90       	pop	r8
    3590:	7f 90       	pop	r7
    3592:	6f 90       	pop	r6
    3594:	5f 90       	pop	r5
    3596:	4f 90       	pop	r4
    3598:	08 95       	ret

0000359a <uxTaskPriorityGet>:
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	0f 92       	push	r0
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	21 f4       	brne	.+8      	; 0x35ac <uxTaskPriorityGet+0x12>
    35a4:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    35a8:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    35ac:	0f 90       	pop	r0
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	fc 01       	movw	r30, r24
    35b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    35b4:	08 95       	ret

000035b6 <vTaskStartScheduler>:
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	a1 2c       	mov	r10, r1
    35c6:	b1 2c       	mov	r11, r1
    35c8:	c1 2c       	mov	r12, r1
    35ca:	d1 2c       	mov	r13, r1
    35cc:	0f 2e       	mov	r0, r31
    35ce:	fb e3       	ldi	r31, 0x3B	; 59
    35d0:	ef 2e       	mov	r14, r31
    35d2:	f1 e3       	ldi	r31, 0x31	; 49
    35d4:	ff 2e       	mov	r15, r31
    35d6:	f0 2d       	mov	r31, r0
    35d8:	00 e0       	ldi	r16, 0x00	; 0
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	44 e6       	ldi	r20, 0x64	; 100
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	68 ed       	ldi	r22, 0xD8	; 216
    35e4:	70 e2       	ldi	r23, 0x20	; 32
    35e6:	85 e7       	ldi	r24, 0x75	; 117
    35e8:	99 e1       	ldi	r25, 0x19	; 25
    35ea:	0e 94 cb 19 	call	0x3396	; 0x3396 <xTaskGenericCreate>
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	69 f4       	brne	.+26     	; 0x360c <vTaskStartScheduler+0x56>
    35f2:	f8 94       	cli
    35f4:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <xSchedulerRunning>
    35f8:	10 92 36 31 	sts	0x3136, r1	; 0x803136 <xTickCount>
    35fc:	10 92 37 31 	sts	0x3137, r1	; 0x803137 <xTickCount+0x1>
    3600:	10 92 38 31 	sts	0x3138, r1	; 0x803138 <xTickCount+0x2>
    3604:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <xTickCount+0x3>
    3608:	0e 94 ef 15 	call	0x2bde	; 0x2bde <xPortStartScheduler>
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	df 90       	pop	r13
    3614:	cf 90       	pop	r12
    3616:	bf 90       	pop	r11
    3618:	af 90       	pop	r10
    361a:	08 95       	ret

0000361c <vTaskSuspendAll>:
    361c:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>
    3626:	08 95       	ret

00003628 <xTaskGetTickCount>:
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	0f 92       	push	r0
    362e:	60 91 36 31 	lds	r22, 0x3136	; 0x803136 <xTickCount>
    3632:	70 91 37 31 	lds	r23, 0x3137	; 0x803137 <xTickCount+0x1>
    3636:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount+0x2>
    363a:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x3>
    363e:	0f 90       	pop	r0
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	08 95       	ret

00003644 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	21 f4       	brne	.+8      	; 0x3650 <pcTaskGetTaskName+0xc>
    3648:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    364c:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    3650:	4d 96       	adiw	r24, 0x1d	; 29
    3652:	08 95       	ret

00003654 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    3654:	80 91 3b 31 	lds	r24, 0x313B	; 0x80313b <xIdleTaskHandle>
    3658:	90 91 3c 31 	lds	r25, 0x313C	; 0x80313c <xIdleTaskHandle+0x1>
    365c:	08 95       	ret

0000365e <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3668:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    366c:	81 11       	cpse	r24, r1
    366e:	ed c0       	rjmp	.+474    	; 0x384a <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    3670:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3674:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3678:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    367c:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	a1 1d       	adc	r26, r1
    3684:	b1 1d       	adc	r27, r1
    3686:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <xTickCount>
    368a:	90 93 37 31 	sts	0x3137, r25	; 0x803137 <xTickCount+0x1>
    368e:	a0 93 38 31 	sts	0x3138, r26	; 0x803138 <xTickCount+0x2>
    3692:	b0 93 39 31 	sts	0x3139, r27	; 0x803139 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    3696:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    369a:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    369e:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    36a2:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    36a6:	89 2b       	or	r24, r25
    36a8:	8a 2b       	or	r24, r26
    36aa:	8b 2b       	or	r24, r27
    36ac:	f1 f5       	brne	.+124    	; 0x372a <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    36ae:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    36b2:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    36b6:	20 91 48 31 	lds	r18, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    36ba:	30 91 49 31 	lds	r19, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    36be:	20 93 4a 31 	sts	0x314A, r18	; 0x80314a <pxDelayedTaskList>
    36c2:	30 93 4b 31 	sts	0x314B, r19	; 0x80314b <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    36c6:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    36ca:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    36ce:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    36d2:	8f 5f       	subi	r24, 0xFF	; 255
    36d4:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    36d8:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    36dc:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    36e0:	80 81       	ld	r24, Z
    36e2:	81 11       	cpse	r24, r1
    36e4:	0c c0       	rjmp	.+24     	; 0x36fe <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	9f ef       	ldi	r25, 0xFF	; 255
    36ea:	dc 01       	movw	r26, r24
    36ec:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    36f0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    36f4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    36f8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    36fc:	16 c0       	rjmp	.+44     	; 0x372a <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    36fe:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3702:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3706:	07 80       	ldd	r0, Z+7	; 0x07
    3708:	f0 85       	ldd	r31, Z+8	; 0x08
    370a:	e0 2d       	mov	r30, r0
    370c:	00 84       	ldd	r0, Z+8	; 0x08
    370e:	f1 85       	ldd	r31, Z+9	; 0x09
    3710:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	a4 81       	ldd	r26, Z+4	; 0x04
    3718:	b5 81       	ldd	r27, Z+5	; 0x05
    371a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    371e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3722:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3726:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    372a:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    372e:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3732:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3736:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    373a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    373e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3742:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3746:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    374a:	48 17       	cp	r20, r24
    374c:	59 07       	cpc	r21, r25
    374e:	6a 07       	cpc	r22, r26
    3750:	7b 07       	cpc	r23, r27
    3752:	08 f4       	brcc	.+2      	; 0x3756 <vTaskIncrementTick+0xf8>
    3754:	7f c0       	rjmp	.+254    	; 0x3854 <vTaskIncrementTick+0x1f6>
    3756:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    375a:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    375e:	80 81       	ld	r24, Z
    3760:	88 23       	and	r24, r24
    3762:	f9 f0       	breq	.+62     	; 0x37a2 <vTaskIncrementTick+0x144>
    3764:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3768:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    376c:	07 80       	ldd	r0, Z+7	; 0x07
    376e:	f0 85       	ldd	r31, Z+8	; 0x08
    3770:	e0 2d       	mov	r30, r0
    3772:	c0 85       	ldd	r28, Z+8	; 0x08
    3774:	d1 85       	ldd	r29, Z+9	; 0x09
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	9b 81       	ldd	r25, Y+3	; 0x03
    377a:	ac 81       	ldd	r26, Y+4	; 0x04
    377c:	bd 81       	ldd	r27, Y+5	; 0x05
    377e:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3782:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3786:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    378a:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    378e:	48 17       	cp	r20, r24
    3790:	59 07       	cpc	r21, r25
    3792:	6a 07       	cpc	r22, r26
    3794:	7b 07       	cpc	r23, r27
    3796:	58 f1       	brcs	.+86     	; 0x37ee <vTaskIncrementTick+0x190>
    3798:	0f 2e       	mov	r0, r31
    379a:	fb e0       	ldi	r31, 0x0B	; 11
    379c:	ff 2e       	mov	r15, r31
    379e:	f0 2d       	mov	r31, r0
    37a0:	2f c0       	rjmp	.+94     	; 0x3800 <vTaskIncrementTick+0x1a2>
    37a2:	8f ef       	ldi	r24, 0xFF	; 255
    37a4:	9f ef       	ldi	r25, 0xFF	; 255
    37a6:	dc 01       	movw	r26, r24
    37a8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    37ac:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    37b0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    37b4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    37b8:	4d c0       	rjmp	.+154    	; 0x3854 <vTaskIncrementTick+0x1f6>
    37ba:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    37be:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    37c2:	07 80       	ldd	r0, Z+7	; 0x07
    37c4:	f0 85       	ldd	r31, Z+8	; 0x08
    37c6:	e0 2d       	mov	r30, r0
    37c8:	c0 85       	ldd	r28, Z+8	; 0x08
    37ca:	d1 85       	ldd	r29, Z+9	; 0x09
    37cc:	8a 81       	ldd	r24, Y+2	; 0x02
    37ce:	9b 81       	ldd	r25, Y+3	; 0x03
    37d0:	ac 81       	ldd	r26, Y+4	; 0x04
    37d2:	bd 81       	ldd	r27, Y+5	; 0x05
    37d4:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    37d8:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    37dc:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    37e0:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    37e4:	48 17       	cp	r20, r24
    37e6:	59 07       	cpc	r21, r25
    37e8:	6a 07       	cpc	r22, r26
    37ea:	7b 07       	cpc	r23, r27
    37ec:	48 f4       	brcc	.+18     	; 0x3800 <vTaskIncrementTick+0x1a2>
    37ee:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    37f2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    37f6:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    37fa:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    37fe:	2a c0       	rjmp	.+84     	; 0x3854 <vTaskIncrementTick+0x1f6>
    3800:	8e 01       	movw	r16, r28
    3802:	0e 5f       	subi	r16, 0xFE	; 254
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	c8 01       	movw	r24, r16
    3808:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
    380c:	88 8d       	ldd	r24, Y+24	; 0x18
    380e:	99 8d       	ldd	r25, Y+25	; 0x19
    3810:	89 2b       	or	r24, r25
    3812:	21 f0       	breq	.+8      	; 0x381c <vTaskIncrementTick+0x1be>
    3814:	ce 01       	movw	r24, r28
    3816:	0e 96       	adiw	r24, 0x0e	; 14
    3818:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
    381c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    381e:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3822:	98 17       	cp	r25, r24
    3824:	10 f4       	brcc	.+4      	; 0x382a <vTaskIncrementTick+0x1cc>
    3826:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    382a:	f8 9e       	mul	r15, r24
    382c:	c0 01       	movw	r24, r0
    382e:	11 24       	eor	r1, r1
    3830:	b8 01       	movw	r22, r16
    3832:	8e 59       	subi	r24, 0x9E	; 158
    3834:	9e 4c       	sbci	r25, 0xCE	; 206
    3836:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
    383a:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    383e:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3842:	80 81       	ld	r24, Z
    3844:	81 11       	cpse	r24, r1
    3846:	b9 cf       	rjmp	.-142    	; 0x37ba <vTaskIncrementTick+0x15c>
    3848:	ac cf       	rjmp	.-168    	; 0x37a2 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    384a:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    384e:	8f 5f       	subi	r24, 0xFF	; 255
    3850:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	08 95       	ret

00003860 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3876:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    387a:	81 50       	subi	r24, 0x01	; 1
    387c:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3880:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3884:	81 11       	cpse	r24, r1
    3886:	60 c0       	rjmp	.+192    	; 0x3948 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3888:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    388c:	81 11       	cpse	r24, r1
    388e:	2c c0       	rjmp	.+88     	; 0x38e8 <xTaskResumeAll+0x88>
    3890:	5e c0       	rjmp	.+188    	; 0x394e <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3892:	d7 01       	movw	r26, r14
    3894:	17 96       	adiw	r26, 0x07	; 7
    3896:	ed 91       	ld	r30, X+
    3898:	fc 91       	ld	r31, X
    389a:	18 97       	sbiw	r26, 0x08	; 8
    389c:	c0 85       	ldd	r28, Z+8	; 0x08
    389e:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    38a0:	ce 01       	movw	r24, r28
    38a2:	0e 96       	adiw	r24, 0x0e	; 14
    38a4:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    38a8:	8e 01       	movw	r16, r28
    38aa:	0e 5f       	subi	r16, 0xFE	; 254
    38ac:	1f 4f       	sbci	r17, 0xFF	; 255
    38ae:	c8 01       	movw	r24, r16
    38b0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    38b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38b6:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    38ba:	98 17       	cp	r25, r24
    38bc:	10 f4       	brcc	.+4      	; 0x38c2 <xTaskResumeAll+0x62>
    38be:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    38c2:	d8 9e       	mul	r13, r24
    38c4:	c0 01       	movw	r24, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	b8 01       	movw	r22, r16
    38ca:	8e 59       	subi	r24, 0x9E	; 158
    38cc:	9e 4c       	sbci	r25, 0xCE	; 206
    38ce:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38d2:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    38d6:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    38da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    38de:	98 17       	cp	r25, r24
    38e0:	70 f0       	brcs	.+28     	; 0x38fe <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    38e2:	cc 24       	eor	r12, r12
    38e4:	c3 94       	inc	r12
    38e6:	0b c0       	rjmp	.+22     	; 0x38fe <xTaskResumeAll+0x9e>
    38e8:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    38ea:	0f 2e       	mov	r0, r31
    38ec:	fd e3       	ldi	r31, 0x3D	; 61
    38ee:	ef 2e       	mov	r14, r31
    38f0:	f1 e3       	ldi	r31, 0x31	; 49
    38f2:	ff 2e       	mov	r15, r31
    38f4:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    38f6:	0f 2e       	mov	r0, r31
    38f8:	fb e0       	ldi	r31, 0x0B	; 11
    38fa:	df 2e       	mov	r13, r31
    38fc:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    38fe:	f7 01       	movw	r30, r14
    3900:	80 81       	ld	r24, Z
    3902:	81 11       	cpse	r24, r1
    3904:	c6 cf       	rjmp	.-116    	; 0x3892 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3906:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    390a:	88 23       	and	r24, r24
    390c:	81 f0       	breq	.+32     	; 0x392e <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    390e:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3912:	88 23       	and	r24, r24
    3914:	99 f0       	breq	.+38     	; 0x393c <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    3916:	0e 94 2f 1b 	call	0x365e	; 0x365e <vTaskIncrementTick>
						--uxMissedTicks;
    391a:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    391e:	81 50       	subi	r24, 0x01	; 1
    3920:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3924:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3928:	81 11       	cpse	r24, r1
    392a:	f5 cf       	rjmp	.-22     	; 0x3916 <xTaskResumeAll+0xb6>
    392c:	07 c0       	rjmp	.+14     	; 0x393c <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    392e:	f1 e0       	ldi	r31, 0x01	; 1
    3930:	cf 16       	cp	r12, r31
    3932:	21 f0       	breq	.+8      	; 0x393c <xTaskResumeAll+0xdc>
    3934:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xMissedYield>
    3938:	81 30       	cpi	r24, 0x01	; 1
    393a:	41 f4       	brne	.+16     	; 0x394c <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    393c:	10 92 30 31 	sts	0x3130, r1	; 0x803130 <xMissedYield>
					portYIELD_WITHIN_API();
    3940:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	03 c0       	rjmp	.+6      	; 0x394e <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	01 c0       	rjmp	.+2      	; 0x394e <xTaskResumeAll+0xee>
    394c:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    394e:	0f 90       	pop	r0
    3950:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	08 95       	ret

00003964 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3964:	cf 92       	push	r12
    3966:	df 92       	push	r13
    3968:	ef 92       	push	r14
    396a:	ff 92       	push	r15
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	ec 01       	movw	r28, r24
    3972:	6a 01       	movw	r12, r20
    3974:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3976:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    397a:	88 81       	ld	r24, Y
    397c:	99 81       	ldd	r25, Y+1	; 0x01
    397e:	aa 81       	ldd	r26, Y+2	; 0x02
    3980:	bb 81       	ldd	r27, Y+3	; 0x03
    3982:	c8 0e       	add	r12, r24
    3984:	d9 1e       	adc	r13, r25
    3986:	ea 1e       	adc	r14, r26
    3988:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    398a:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    398e:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3992:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3996:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    399a:	48 17       	cp	r20, r24
    399c:	59 07       	cpc	r21, r25
    399e:	6a 07       	cpc	r22, r26
    39a0:	7b 07       	cpc	r23, r27
    39a2:	b8 f4       	brcc	.+46     	; 0x39d2 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    39a4:	c8 16       	cp	r12, r24
    39a6:	d9 06       	cpc	r13, r25
    39a8:	ea 06       	cpc	r14, r26
    39aa:	fb 06       	cpc	r15, r27
    39ac:	e0 f5       	brcc	.+120    	; 0x3a26 <vTaskDelayUntil+0xc2>
    39ae:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    39b2:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    39b6:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    39ba:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    39be:	c8 82       	st	Y, r12
    39c0:	d9 82       	std	Y+1, r13	; 0x01
    39c2:	ea 82       	std	Y+2, r14	; 0x02
    39c4:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    39c6:	8c 15       	cp	r24, r12
    39c8:	9d 05       	cpc	r25, r13
    39ca:	ae 05       	cpc	r26, r14
    39cc:	bf 05       	cpc	r27, r15
    39ce:	f8 f4       	brcc	.+62     	; 0x3a0e <vTaskDelayUntil+0xaa>
    39d0:	13 c0       	rjmp	.+38     	; 0x39f8 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    39d2:	c8 16       	cp	r12, r24
    39d4:	d9 06       	cpc	r13, r25
    39d6:	ea 06       	cpc	r14, r26
    39d8:	fb 06       	cpc	r15, r27
    39da:	00 f1       	brcs	.+64     	; 0x3a1c <vTaskDelayUntil+0xb8>
    39dc:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    39e0:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    39e4:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    39e8:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    39ec:	8c 15       	cp	r24, r12
    39ee:	9d 05       	cpc	r25, r13
    39f0:	ae 05       	cpc	r26, r14
    39f2:	bf 05       	cpc	r27, r15
    39f4:	98 f0       	brcs	.+38     	; 0x3a1c <vTaskDelayUntil+0xb8>
    39f6:	17 c0       	rjmp	.+46     	; 0x3a26 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39f8:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    39fc:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3a00:	02 96       	adiw	r24, 0x02	; 2
    3a02:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a06:	c7 01       	movw	r24, r14
    3a08:	b6 01       	movw	r22, r12
    3a0a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3a0e:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a12:	81 11       	cpse	r24, r1
    3a14:	0d c0       	rjmp	.+26     	; 0x3a30 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3a16:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
		}
	}
    3a1a:	0a c0       	rjmp	.+20     	; 0x3a30 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3a1c:	c8 82       	st	Y, r12
    3a1e:	d9 82       	std	Y+1, r13	; 0x01
    3a20:	ea 82       	std	Y+2, r14	; 0x02
    3a22:	fb 82       	std	Y+3, r15	; 0x03
    3a24:	e9 cf       	rjmp	.-46     	; 0x39f8 <vTaskDelayUntil+0x94>
    3a26:	c8 82       	st	Y, r12
    3a28:	d9 82       	std	Y+1, r13	; 0x01
    3a2a:	ea 82       	std	Y+2, r14	; 0x02
    3a2c:	fb 82       	std	Y+3, r15	; 0x03
    3a2e:	ef cf       	rjmp	.-34     	; 0x3a0e <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	ff 90       	pop	r15
    3a36:	ef 90       	pop	r14
    3a38:	df 90       	pop	r13
    3a3a:	cf 90       	pop	r12
    3a3c:	08 95       	ret

00003a3e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3a3e:	cf 92       	push	r12
    3a40:	df 92       	push	r13
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	6b 01       	movw	r12, r22
    3a48:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3a4a:	67 2b       	or	r22, r23
    3a4c:	68 2b       	or	r22, r24
    3a4e:	69 2b       	or	r22, r25
    3a50:	e9 f0       	breq	.+58     	; 0x3a8c <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3a52:	0e 94 0e 1b 	call	0x361c	; 0x361c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3a56:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3a5a:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3a5e:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3a62:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3a66:	c8 0e       	add	r12, r24
    3a68:	d9 1e       	adc	r13, r25
    3a6a:	ea 1e       	adc	r14, r26
    3a6c:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3a6e:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3a72:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3a76:	02 96       	adiw	r24, 0x02	; 2
    3a78:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a7c:	c7 01       	movw	r24, r14
    3a7e:	b6 01       	movw	r22, r12
    3a80:	0e 94 7d 19 	call	0x32fa	; 0x32fa <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3a84:	0e 94 30 1c 	call	0x3860	; 0x3860 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a88:	81 11       	cpse	r24, r1
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3a8c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vPortYield>
		}
	}
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	cf 90       	pop	r12
    3a98:	08 95       	ret

00003a9a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3a9a:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3a9e:	81 11       	cpse	r24, r1
    3aa0:	0c c0       	rjmp	.+24     	; 0x3aba <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3aa2:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3aa6:	4b e0       	ldi	r20, 0x0B	; 11
    3aa8:	e4 9f       	mul	r30, r20
    3aaa:	f0 01       	movw	r30, r0
    3aac:	11 24       	eor	r1, r1
    3aae:	ee 59       	subi	r30, 0x9E	; 158
    3ab0:	fe 4c       	sbci	r31, 0xCE	; 206
    3ab2:	80 81       	ld	r24, Z
    3ab4:	88 23       	and	r24, r24
    3ab6:	29 f0       	breq	.+10     	; 0x3ac2 <vTaskSwitchContext+0x28>
    3ab8:	14 c0       	rjmp	.+40     	; 0x3ae2 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    3ac0:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ac2:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3ac4:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3ac8:	81 50       	subi	r24, 0x01	; 1
    3aca:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3ace:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3ad2:	9e 9f       	mul	r25, r30
    3ad4:	f0 01       	movw	r30, r0
    3ad6:	11 24       	eor	r1, r1
    3ad8:	ee 59       	subi	r30, 0x9E	; 158
    3ada:	fe 4c       	sbci	r31, 0xCE	; 206
    3adc:	80 81       	ld	r24, Z
    3ade:	88 23       	and	r24, r24
    3ae0:	89 f3       	breq	.-30     	; 0x3ac4 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3ae2:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3ae6:	28 2f       	mov	r18, r24
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4b e0       	ldi	r20, 0x0B	; 11
    3aec:	84 9f       	mul	r24, r20
    3aee:	c0 01       	movw	r24, r0
    3af0:	11 24       	eor	r1, r1
    3af2:	dc 01       	movw	r26, r24
    3af4:	ae 59       	subi	r26, 0x9E	; 158
    3af6:	be 4c       	sbci	r27, 0xCE	; 206
    3af8:	11 96       	adiw	r26, 0x01	; 1
    3afa:	ed 91       	ld	r30, X+
    3afc:	fc 91       	ld	r31, X
    3afe:	12 97       	sbiw	r26, 0x02	; 2
    3b00:	04 80       	ldd	r0, Z+4	; 0x04
    3b02:	f5 81       	ldd	r31, Z+5	; 0x05
    3b04:	e0 2d       	mov	r30, r0
    3b06:	11 96       	adiw	r26, 0x01	; 1
    3b08:	ed 93       	st	X+, r30
    3b0a:	fc 93       	st	X, r31
    3b0c:	12 97       	sbiw	r26, 0x02	; 2
    3b0e:	8b 59       	subi	r24, 0x9B	; 155
    3b10:	9e 4c       	sbci	r25, 0xCE	; 206
    3b12:	e8 17       	cp	r30, r24
    3b14:	f9 07       	cpc	r31, r25
    3b16:	61 f4       	brne	.+24     	; 0x3b30 <vTaskSwitchContext+0x96>
    3b18:	84 81       	ldd	r24, Z+4	; 0x04
    3b1a:	95 81       	ldd	r25, Z+5	; 0x05
    3b1c:	4b e0       	ldi	r20, 0x0B	; 11
    3b1e:	42 9f       	mul	r20, r18
    3b20:	f0 01       	movw	r30, r0
    3b22:	43 9f       	mul	r20, r19
    3b24:	f0 0d       	add	r31, r0
    3b26:	11 24       	eor	r1, r1
    3b28:	ee 59       	subi	r30, 0x9E	; 158
    3b2a:	fe 4c       	sbci	r31, 0xCE	; 206
    3b2c:	81 83       	std	Z+1, r24	; 0x01
    3b2e:	92 83       	std	Z+2, r25	; 0x02
    3b30:	8b e0       	ldi	r24, 0x0B	; 11
    3b32:	82 9f       	mul	r24, r18
    3b34:	f0 01       	movw	r30, r0
    3b36:	83 9f       	mul	r24, r19
    3b38:	f0 0d       	add	r31, r0
    3b3a:	11 24       	eor	r1, r1
    3b3c:	ee 59       	subi	r30, 0x9E	; 158
    3b3e:	fe 4c       	sbci	r31, 0xCE	; 206
    3b40:	01 80       	ldd	r0, Z+1	; 0x01
    3b42:	f2 81       	ldd	r31, Z+2	; 0x02
    3b44:	e0 2d       	mov	r30, r0
    3b46:	80 85       	ldd	r24, Z+8	; 0x08
    3b48:	91 85       	ldd	r25, Z+9	; 0x09
    3b4a:	80 93 8e 31 	sts	0x318E, r24	; 0x80318e <pxCurrentTCB>
    3b4e:	90 93 8f 31 	sts	0x318F, r25	; 0x80318f <pxCurrentTCB+0x1>
    3b52:	08 95       	ret

00003b54 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	6a 01       	movw	r12, r20
    3b5e:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3b60:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3b64:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3b68:	62 5f       	subi	r22, 0xF2	; 242
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6c:	0e 94 08 15 	call	0x2a10	; 0x2a10 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3b70:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3b74:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3b78:	02 96       	adiw	r24, 0x02	; 2
    3b7a:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3b7e:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3b82:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3b86:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3b8a:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	6c 0d       	add	r22, r12
    3b94:	7d 1d       	adc	r23, r13
    3b96:	8e 1d       	adc	r24, r14
    3b98:	9f 1d       	adc	r25, r15
    3b9a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3b9e:	ff 90       	pop	r15
    3ba0:	ef 90       	pop	r14
    3ba2:	df 90       	pop	r13
    3ba4:	cf 90       	pop	r12
    3ba6:	08 95       	ret

00003ba8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3ba8:	0f 93       	push	r16
    3baa:	1f 93       	push	r17
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	17 96       	adiw	r26, 0x07	; 7
    3bb4:	ed 91       	ld	r30, X+
    3bb6:	fc 91       	ld	r31, X
    3bb8:	18 97       	sbiw	r26, 0x08	; 8
    3bba:	c0 85       	ldd	r28, Z+8	; 0x08
    3bbc:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3bbe:	8e 01       	movw	r16, r28
    3bc0:	02 5f       	subi	r16, 0xF2	; 242
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	c8 01       	movw	r24, r16
    3bc6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3bca:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3bce:	81 11       	cpse	r24, r1
    3bd0:	16 c0       	rjmp	.+44     	; 0x3bfe <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3bd2:	0c 50       	subi	r16, 0x0C	; 12
    3bd4:	11 09       	sbc	r17, r1
    3bd6:	c8 01       	movw	r24, r16
    3bd8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3bdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3bde:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3be2:	98 17       	cp	r25, r24
    3be4:	10 f4       	brcc	.+4      	; 0x3bea <xTaskRemoveFromEventList+0x42>
    3be6:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3bea:	bb e0       	ldi	r27, 0x0B	; 11
    3bec:	8b 9f       	mul	r24, r27
    3bee:	c0 01       	movw	r24, r0
    3bf0:	11 24       	eor	r1, r1
    3bf2:	b8 01       	movw	r22, r16
    3bf4:	8e 59       	subi	r24, 0x9E	; 158
    3bf6:	9e 4c       	sbci	r25, 0xCE	; 206
    3bf8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
    3bfc:	05 c0       	rjmp	.+10     	; 0x3c08 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3bfe:	b8 01       	movw	r22, r16
    3c00:	8d e3       	ldi	r24, 0x3D	; 61
    3c02:	91 e3       	ldi	r25, 0x31	; 49
    3c04:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c08:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3c0c:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3c14:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c16:	29 17       	cp	r18, r25
    3c18:	08 f4       	brcc	.+2      	; 0x3c1c <xTaskRemoveFromEventList+0x74>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
}
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	08 95       	ret

00003c26 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3c26:	20 91 2f 31 	lds	r18, 0x312F	; 0x80312f <xNumOfOverflows>
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3c2e:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3c32:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3c36:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3c3a:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3c3e:	41 83       	std	Z+1, r20	; 0x01
    3c40:	52 83       	std	Z+2, r21	; 0x02
    3c42:	63 83       	std	Z+3, r22	; 0x03
    3c44:	74 83       	std	Z+4, r23	; 0x04
    3c46:	08 95       	ret

00003c48 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3c48:	8f 92       	push	r8
    3c4a:	9f 92       	push	r9
    3c4c:	af 92       	push	r10
    3c4e:	bf 92       	push	r11
    3c50:	cf 92       	push	r12
    3c52:	df 92       	push	r13
    3c54:	ef 92       	push	r14
    3c56:	ff 92       	push	r15
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3c68:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    3c6c:	90 81       	ld	r25, Z
    3c6e:	98 17       	cp	r25, r24
    3c70:	89 f0       	breq	.+34     	; 0x3c94 <xTaskCheckForTimeOut+0x4c>
    3c72:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3c76:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3c7a:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3c7e:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3c82:	01 81       	ldd	r16, Z+1	; 0x01
    3c84:	12 81       	ldd	r17, Z+2	; 0x02
    3c86:	23 81       	ldd	r18, Z+3	; 0x03
    3c88:	34 81       	ldd	r19, Z+4	; 0x04
    3c8a:	80 17       	cp	r24, r16
    3c8c:	91 07       	cpc	r25, r17
    3c8e:	a2 07       	cpc	r26, r18
    3c90:	b3 07       	cpc	r27, r19
    3c92:	a8 f5       	brcc	.+106    	; 0x3cfe <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3c94:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3c98:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3c9c:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3ca0:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3ca4:	c1 80       	ldd	r12, Z+1	; 0x01
    3ca6:	d2 80       	ldd	r13, Z+2	; 0x02
    3ca8:	e3 80       	ldd	r14, Z+3	; 0x03
    3caa:	f4 80       	ldd	r15, Z+4	; 0x04
    3cac:	eb 01       	movw	r28, r22
    3cae:	08 81       	ld	r16, Y
    3cb0:	19 81       	ldd	r17, Y+1	; 0x01
    3cb2:	2a 81       	ldd	r18, Y+2	; 0x02
    3cb4:	3b 81       	ldd	r19, Y+3	; 0x03
    3cb6:	8c 19       	sub	r24, r12
    3cb8:	9d 09       	sbc	r25, r13
    3cba:	ae 09       	sbc	r26, r14
    3cbc:	bf 09       	sbc	r27, r15
    3cbe:	80 17       	cp	r24, r16
    3cc0:	91 07       	cpc	r25, r17
    3cc2:	a2 07       	cpc	r26, r18
    3cc4:	b3 07       	cpc	r27, r19
    3cc6:	e8 f4       	brcc	.+58     	; 0x3d02 <xTaskCheckForTimeOut+0xba>
    3cc8:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3cca:	80 90 36 31 	lds	r8, 0x3136	; 0x803136 <xTickCount>
    3cce:	90 90 37 31 	lds	r9, 0x3137	; 0x803137 <xTickCount+0x1>
    3cd2:	a0 90 38 31 	lds	r10, 0x3138	; 0x803138 <xTickCount+0x2>
    3cd6:	b0 90 39 31 	lds	r11, 0x3139	; 0x803139 <xTickCount+0x3>
    3cda:	b5 01       	movw	r22, r10
    3cdc:	a4 01       	movw	r20, r8
    3cde:	4c 19       	sub	r20, r12
    3ce0:	5d 09       	sbc	r21, r13
    3ce2:	6e 09       	sbc	r22, r14
    3ce4:	7f 09       	sbc	r23, r15
    3ce6:	04 1b       	sub	r16, r20
    3ce8:	15 0b       	sbc	r17, r21
    3cea:	26 0b       	sbc	r18, r22
    3cec:	37 0b       	sbc	r19, r23
    3cee:	08 83       	st	Y, r16
    3cf0:	19 83       	std	Y+1, r17	; 0x01
    3cf2:	2a 83       	std	Y+2, r18	; 0x02
    3cf4:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3cf6:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	03 c0       	rjmp	.+6      	; 0x3d04 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	01 c0       	rjmp	.+2      	; 0x3d04 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3d02:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3d04:	0f 90       	pop	r0
    3d06:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	1f 91       	pop	r17
    3d0e:	0f 91       	pop	r16
    3d10:	ff 90       	pop	r15
    3d12:	ef 90       	pop	r14
    3d14:	df 90       	pop	r13
    3d16:	cf 90       	pop	r12
    3d18:	bf 90       	pop	r11
    3d1a:	af 90       	pop	r10
    3d1c:	9f 90       	pop	r9
    3d1e:	8f 90       	pop	r8
    3d20:	08 95       	ret

00003d22 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    3d28:	08 95       	ret

00003d2a <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	21 f4       	brne	.+8      	; 0x3d36 <uxTaskGetStackHighWaterMark+0xc>
    3d2e:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3d32:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3d36:	dc 01       	movw	r26, r24
    3d38:	5b 96       	adiw	r26, 0x1b	; 27
    3d3a:	ed 91       	ld	r30, X+
    3d3c:	fc 91       	ld	r31, X
    3d3e:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3d40:	80 81       	ld	r24, Z
    3d42:	81 31       	cpi	r24, 0x11	; 17
    3d44:	41 f4       	brne	.+16     	; 0x3d56 <uxTaskGetStackHighWaterMark+0x2c>
    3d46:	31 96       	adiw	r30, 0x01	; 1
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3d4c:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3d4e:	21 91       	ld	r18, Z+
    3d50:	21 31       	cpi	r18, 0x11	; 17
    3d52:	e1 f3       	breq	.-8      	; 0x3d4c <uxTaskGetStackHighWaterMark+0x22>
    3d54:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3d5a:	08 95       	ret

00003d5c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3d5c:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3d60:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		return xReturn;
	}
    3d64:	08 95       	ret

00003d66 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3d70:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d72:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3d76:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d7a:	5a 96       	adiw	r26, 0x1a	; 26
    3d7c:	8c 91       	ld	r24, X
    3d7e:	28 17       	cp	r18, r24
    3d80:	08 f0       	brcs	.+2      	; 0x3d84 <vTaskPriorityInherit+0x1e>
    3d82:	41 c0       	rjmp	.+130    	; 0x3e06 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3d84:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3d88:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d8c:	5a 96       	adiw	r26, 0x1a	; 26
    3d8e:	3c 91       	ld	r19, X
    3d90:	84 e0       	ldi	r24, 0x04	; 4
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	a0 e0       	ldi	r26, 0x00	; 0
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	83 1b       	sub	r24, r19
    3d9a:	91 09       	sbc	r25, r1
    3d9c:	a1 09       	sbc	r26, r1
    3d9e:	b1 09       	sbc	r27, r1
    3da0:	86 87       	std	Z+14, r24	; 0x0e
    3da2:	97 87       	std	Z+15, r25	; 0x0f
    3da4:	a0 8b       	std	Z+16, r26	; 0x10
    3da6:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3da8:	8b e0       	ldi	r24, 0x0B	; 11
    3daa:	28 9f       	mul	r18, r24
    3dac:	90 01       	movw	r18, r0
    3dae:	11 24       	eor	r1, r1
    3db0:	2e 59       	subi	r18, 0x9E	; 158
    3db2:	3e 4c       	sbci	r19, 0xCE	; 206
    3db4:	84 85       	ldd	r24, Z+12	; 0x0c
    3db6:	95 85       	ldd	r25, Z+13	; 0x0d
    3db8:	82 17       	cp	r24, r18
    3dba:	93 07       	cpc	r25, r19
    3dbc:	e9 f4       	brne	.+58     	; 0x3df8 <vTaskPriorityInherit+0x92>
    3dbe:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3dc0:	ef 01       	movw	r28, r30
    3dc2:	22 96       	adiw	r28, 0x02	; 2
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3dca:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3dce:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3dd8:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3ddc:	98 17       	cp	r25, r24
    3dde:	10 f4       	brcc	.+4      	; 0x3de4 <vTaskPriorityInherit+0x7e>
    3de0:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3de4:	fb e0       	ldi	r31, 0x0B	; 11
    3de6:	8f 9f       	mul	r24, r31
    3de8:	c0 01       	movw	r24, r0
    3dea:	11 24       	eor	r1, r1
    3dec:	be 01       	movw	r22, r28
    3dee:	8e 59       	subi	r24, 0x9E	; 158
    3df0:	9e 4c       	sbci	r25, 0xCE	; 206
    3df2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
    3df6:	07 c0       	rjmp	.+14     	; 0x3e06 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3df8:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3dfc:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3e00:	5a 96       	adiw	r26, 0x1a	; 26
    3e02:	8c 91       	ld	r24, X
    3e04:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	1f 91       	pop	r17
    3e0c:	0f 91       	pop	r16
    3e0e:	08 95       	ret

00003e10 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	49 f1       	breq	.+82     	; 0x3e6e <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3e20:	27 a1       	ldd	r18, Z+39	; 0x27
    3e22:	32 17       	cp	r19, r18
    3e24:	21 f1       	breq	.+72     	; 0x3e6e <vTaskPriorityDisinherit+0x5e>
    3e26:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3e28:	8c 01       	movw	r16, r24
    3e2a:	0e 5f       	subi	r16, 0xFE	; 254
    3e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e2e:	c8 01       	movw	r24, r16
    3e30:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3e34:	8f a1       	ldd	r24, Y+39	; 0x27
    3e36:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3e38:	44 e0       	ldi	r20, 0x04	; 4
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	60 e0       	ldi	r22, 0x00	; 0
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	48 1b       	sub	r20, r24
    3e42:	51 09       	sbc	r21, r1
    3e44:	61 09       	sbc	r22, r1
    3e46:	71 09       	sbc	r23, r1
    3e48:	4e 87       	std	Y+14, r20	; 0x0e
    3e4a:	5f 87       	std	Y+15, r21	; 0x0f
    3e4c:	68 8b       	std	Y+16, r22	; 0x10
    3e4e:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3e50:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e54:	98 17       	cp	r25, r24
    3e56:	10 f4       	brcc	.+4      	; 0x3e5c <vTaskPriorityDisinherit+0x4c>
    3e58:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3e5c:	fb e0       	ldi	r31, 0x0B	; 11
    3e5e:	8f 9f       	mul	r24, r31
    3e60:	c0 01       	movw	r24, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	b8 01       	movw	r22, r16
    3e66:	8e 59       	subi	r24, 0x9E	; 158
    3e68:	9e 4c       	sbci	r25, 0xCE	; 206
    3e6a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vListInsertEnd>
			}
		}
	}
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	08 95       	ret

00003e78 <__divmodsi4>:
    3e78:	05 2e       	mov	r0, r21
    3e7a:	97 fb       	bst	r25, 7
    3e7c:	1e f4       	brtc	.+6      	; 0x3e84 <__divmodsi4+0xc>
    3e7e:	00 94       	com	r0
    3e80:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__negsi2>
    3e84:	57 fd       	sbrc	r21, 7
    3e86:	07 d0       	rcall	.+14     	; 0x3e96 <__divmodsi4_neg2>
    3e88:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__udivmodsi4>
    3e8c:	07 fc       	sbrc	r0, 7
    3e8e:	03 d0       	rcall	.+6      	; 0x3e96 <__divmodsi4_neg2>
    3e90:	4e f4       	brtc	.+18     	; 0x3ea4 <__divmodsi4_exit>
    3e92:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__negsi2>

00003e96 <__divmodsi4_neg2>:
    3e96:	50 95       	com	r21
    3e98:	40 95       	com	r20
    3e9a:	30 95       	com	r19
    3e9c:	21 95       	neg	r18
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	4f 4f       	sbci	r20, 0xFF	; 255
    3ea2:	5f 4f       	sbci	r21, 0xFF	; 255

00003ea4 <__divmodsi4_exit>:
    3ea4:	08 95       	ret

00003ea6 <__negsi2>:
    3ea6:	90 95       	com	r25
    3ea8:	80 95       	com	r24
    3eaa:	70 95       	com	r23
    3eac:	61 95       	neg	r22
    3eae:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb4:	08 95       	ret

00003eb6 <__udivmodsi4>:
    3eb6:	a1 e2       	ldi	r26, 0x21	; 33
    3eb8:	1a 2e       	mov	r1, r26
    3eba:	aa 1b       	sub	r26, r26
    3ebc:	bb 1b       	sub	r27, r27
    3ebe:	fd 01       	movw	r30, r26
    3ec0:	0d c0       	rjmp	.+26     	; 0x3edc <__udivmodsi4_ep>

00003ec2 <__udivmodsi4_loop>:
    3ec2:	aa 1f       	adc	r26, r26
    3ec4:	bb 1f       	adc	r27, r27
    3ec6:	ee 1f       	adc	r30, r30
    3ec8:	ff 1f       	adc	r31, r31
    3eca:	a2 17       	cp	r26, r18
    3ecc:	b3 07       	cpc	r27, r19
    3ece:	e4 07       	cpc	r30, r20
    3ed0:	f5 07       	cpc	r31, r21
    3ed2:	20 f0       	brcs	.+8      	; 0x3edc <__udivmodsi4_ep>
    3ed4:	a2 1b       	sub	r26, r18
    3ed6:	b3 0b       	sbc	r27, r19
    3ed8:	e4 0b       	sbc	r30, r20
    3eda:	f5 0b       	sbc	r31, r21

00003edc <__udivmodsi4_ep>:
    3edc:	66 1f       	adc	r22, r22
    3ede:	77 1f       	adc	r23, r23
    3ee0:	88 1f       	adc	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	1a 94       	dec	r1
    3ee6:	69 f7       	brne	.-38     	; 0x3ec2 <__udivmodsi4_loop>
    3ee8:	60 95       	com	r22
    3eea:	70 95       	com	r23
    3eec:	80 95       	com	r24
    3eee:	90 95       	com	r25
    3ef0:	9b 01       	movw	r18, r22
    3ef2:	ac 01       	movw	r20, r24
    3ef4:	bd 01       	movw	r22, r26
    3ef6:	cf 01       	movw	r24, r30
    3ef8:	08 95       	ret

00003efa <memcpy>:
    3efa:	fb 01       	movw	r30, r22
    3efc:	dc 01       	movw	r26, r24
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <memcpy+0xa>
    3f00:	01 90       	ld	r0, Z+
    3f02:	0d 92       	st	X+, r0
    3f04:	41 50       	subi	r20, 0x01	; 1
    3f06:	50 40       	sbci	r21, 0x00	; 0
    3f08:	d8 f7       	brcc	.-10     	; 0x3f00 <memcpy+0x6>
    3f0a:	08 95       	ret

00003f0c <memset>:
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	01 c0       	rjmp	.+2      	; 0x3f12 <memset+0x6>
    3f10:	6d 93       	st	X+, r22
    3f12:	41 50       	subi	r20, 0x01	; 1
    3f14:	50 40       	sbci	r21, 0x00	; 0
    3f16:	e0 f7       	brcc	.-8      	; 0x3f10 <memset+0x4>
    3f18:	08 95       	ret

00003f1a <strncpy>:
    3f1a:	fb 01       	movw	r30, r22
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	41 50       	subi	r20, 0x01	; 1
    3f20:	50 40       	sbci	r21, 0x00	; 0
    3f22:	48 f0       	brcs	.+18     	; 0x3f36 <strncpy+0x1c>
    3f24:	01 90       	ld	r0, Z+
    3f26:	0d 92       	st	X+, r0
    3f28:	00 20       	and	r0, r0
    3f2a:	c9 f7       	brne	.-14     	; 0x3f1e <strncpy+0x4>
    3f2c:	01 c0       	rjmp	.+2      	; 0x3f30 <strncpy+0x16>
    3f2e:	1d 92       	st	X+, r1
    3f30:	41 50       	subi	r20, 0x01	; 1
    3f32:	50 40       	sbci	r21, 0x00	; 0
    3f34:	e0 f7       	brcc	.-8      	; 0x3f2e <strncpy+0x14>
    3f36:	08 95       	ret

00003f38 <ultoa>:
    3f38:	25 32       	cpi	r18, 0x25	; 37
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	20 f4       	brcc	.+8      	; 0x3f46 <ultoa+0xe>
    3f3e:	22 30       	cpi	r18, 0x02	; 2
    3f40:	10 f0       	brcs	.+4      	; 0x3f46 <ultoa+0xe>
    3f42:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__ultoa_ncheck>
    3f46:	fa 01       	movw	r30, r20
    3f48:	10 82       	st	Z, r1
    3f4a:	ca 01       	movw	r24, r20
    3f4c:	08 95       	ret

00003f4e <__ultoa_ncheck>:
    3f4e:	bb 27       	eor	r27, r27

00003f50 <__ultoa_common>:
    3f50:	fa 01       	movw	r30, r20
    3f52:	a6 2f       	mov	r26, r22
    3f54:	62 17       	cp	r22, r18
    3f56:	71 05       	cpc	r23, r1
    3f58:	81 05       	cpc	r24, r1
    3f5a:	91 05       	cpc	r25, r1
    3f5c:	33 0b       	sbc	r19, r19
    3f5e:	30 fb       	bst	r19, 0
    3f60:	66 f0       	brts	.+24     	; 0x3f7a <__ultoa_common+0x2a>
    3f62:	aa 27       	eor	r26, r26
    3f64:	66 0f       	add	r22, r22
    3f66:	77 1f       	adc	r23, r23
    3f68:	88 1f       	adc	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	aa 1f       	adc	r26, r26
    3f6e:	a2 17       	cp	r26, r18
    3f70:	10 f0       	brcs	.+4      	; 0x3f76 <__ultoa_common+0x26>
    3f72:	a2 1b       	sub	r26, r18
    3f74:	63 95       	inc	r22
    3f76:	38 50       	subi	r19, 0x08	; 8
    3f78:	a9 f7       	brne	.-22     	; 0x3f64 <__ultoa_common+0x14>
    3f7a:	a0 5d       	subi	r26, 0xD0	; 208
    3f7c:	aa 33       	cpi	r26, 0x3A	; 58
    3f7e:	08 f0       	brcs	.+2      	; 0x3f82 <__ultoa_common+0x32>
    3f80:	a9 5d       	subi	r26, 0xD9	; 217
    3f82:	a1 93       	st	Z+, r26
    3f84:	36 f7       	brtc	.-52     	; 0x3f52 <__ultoa_common+0x2>
    3f86:	b1 11       	cpse	r27, r1
    3f88:	b1 93       	st	Z+, r27
    3f8a:	10 82       	st	Z, r1
    3f8c:	ca 01       	movw	r24, r20
    3f8e:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <strrev>

00003f92 <utoa>:
    3f92:	45 32       	cpi	r20, 0x25	; 37
    3f94:	51 05       	cpc	r21, r1
    3f96:	20 f4       	brcc	.+8      	; 0x3fa0 <utoa+0xe>
    3f98:	42 30       	cpi	r20, 0x02	; 2
    3f9a:	10 f0       	brcs	.+4      	; 0x3fa0 <utoa+0xe>
    3f9c:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__utoa_ncheck>
    3fa0:	fb 01       	movw	r30, r22
    3fa2:	10 82       	st	Z, r1
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	08 95       	ret

00003fa8 <__utoa_ncheck>:
    3fa8:	bb 27       	eor	r27, r27

00003faa <__utoa_common>:
    3faa:	fb 01       	movw	r30, r22
    3fac:	55 27       	eor	r21, r21
    3fae:	aa 27       	eor	r26, r26
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	aa 1f       	adc	r26, r26
    3fb6:	a4 17       	cp	r26, r20
    3fb8:	10 f0       	brcs	.+4      	; 0x3fbe <__utoa_common+0x14>
    3fba:	a4 1b       	sub	r26, r20
    3fbc:	83 95       	inc	r24
    3fbe:	50 51       	subi	r21, 0x10	; 16
    3fc0:	b9 f7       	brne	.-18     	; 0x3fb0 <__utoa_common+0x6>
    3fc2:	a0 5d       	subi	r26, 0xD0	; 208
    3fc4:	aa 33       	cpi	r26, 0x3A	; 58
    3fc6:	08 f0       	brcs	.+2      	; 0x3fca <__utoa_common+0x20>
    3fc8:	a9 5d       	subi	r26, 0xD9	; 217
    3fca:	a1 93       	st	Z+, r26
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	79 f7       	brne	.-34     	; 0x3fae <__utoa_common+0x4>
    3fd0:	b1 11       	cpse	r27, r1
    3fd2:	b1 93       	st	Z+, r27
    3fd4:	11 92       	st	Z+, r1
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <strrev>

00003fdc <strrev>:
    3fdc:	dc 01       	movw	r26, r24
    3fde:	fc 01       	movw	r30, r24
    3fe0:	67 2f       	mov	r22, r23
    3fe2:	71 91       	ld	r23, Z+
    3fe4:	77 23       	and	r23, r23
    3fe6:	e1 f7       	brne	.-8      	; 0x3fe0 <strrev+0x4>
    3fe8:	32 97       	sbiw	r30, 0x02	; 2
    3fea:	04 c0       	rjmp	.+8      	; 0x3ff4 <strrev+0x18>
    3fec:	7c 91       	ld	r23, X
    3fee:	6d 93       	st	X+, r22
    3ff0:	70 83       	st	Z, r23
    3ff2:	62 91       	ld	r22, -Z
    3ff4:	ae 17       	cp	r26, r30
    3ff6:	bf 07       	cpc	r27, r31
    3ff8:	c8 f3       	brcs	.-14     	; 0x3fec <strrev+0x10>
    3ffa:	08 95       	ret

00003ffc <__mulsi3>:
    3ffc:	db 01       	movw	r26, r22
    3ffe:	8f 93       	push	r24
    4000:	9f 93       	push	r25
    4002:	0e 94 2b 20 	call	0x4056	; 0x4056 <__muluhisi3>
    4006:	bf 91       	pop	r27
    4008:	af 91       	pop	r26
    400a:	a2 9f       	mul	r26, r18
    400c:	80 0d       	add	r24, r0
    400e:	91 1d       	adc	r25, r1
    4010:	a3 9f       	mul	r26, r19
    4012:	90 0d       	add	r25, r0
    4014:	b2 9f       	mul	r27, r18
    4016:	90 0d       	add	r25, r0
    4018:	11 24       	eor	r1, r1
    401a:	08 95       	ret

0000401c <__divmodhi4>:
    401c:	97 fb       	bst	r25, 7
    401e:	07 2e       	mov	r0, r23
    4020:	16 f4       	brtc	.+4      	; 0x4026 <__divmodhi4+0xa>
    4022:	00 94       	com	r0
    4024:	07 d0       	rcall	.+14     	; 0x4034 <__divmodhi4_neg1>
    4026:	77 fd       	sbrc	r23, 7
    4028:	09 d0       	rcall	.+18     	; 0x403c <__divmodhi4_neg2>
    402a:	0e 94 36 20 	call	0x406c	; 0x406c <__udivmodhi4>
    402e:	07 fc       	sbrc	r0, 7
    4030:	05 d0       	rcall	.+10     	; 0x403c <__divmodhi4_neg2>
    4032:	3e f4       	brtc	.+14     	; 0x4042 <__divmodhi4_exit>

00004034 <__divmodhi4_neg1>:
    4034:	90 95       	com	r25
    4036:	81 95       	neg	r24
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	08 95       	ret

0000403c <__divmodhi4_neg2>:
    403c:	70 95       	com	r23
    403e:	61 95       	neg	r22
    4040:	7f 4f       	sbci	r23, 0xFF	; 255

00004042 <__divmodhi4_exit>:
    4042:	08 95       	ret

00004044 <__tablejump2__>:
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	88 1f       	adc	r24, r24
    404a:	8b bf       	out	0x3b, r24	; 59
    404c:	07 90       	elpm	r0, Z+
    404e:	f6 91       	elpm	r31, Z
    4050:	e0 2d       	mov	r30, r0
    4052:	1b be       	out	0x3b, r1	; 59
    4054:	19 94       	eijmp

00004056 <__muluhisi3>:
    4056:	0e 94 4a 20 	call	0x4094	; 0x4094 <__umulhisi3>
    405a:	a5 9f       	mul	r26, r21
    405c:	90 0d       	add	r25, r0
    405e:	b4 9f       	mul	r27, r20
    4060:	90 0d       	add	r25, r0
    4062:	a4 9f       	mul	r26, r20
    4064:	80 0d       	add	r24, r0
    4066:	91 1d       	adc	r25, r1
    4068:	11 24       	eor	r1, r1
    406a:	08 95       	ret

0000406c <__udivmodhi4>:
    406c:	aa 1b       	sub	r26, r26
    406e:	bb 1b       	sub	r27, r27
    4070:	51 e1       	ldi	r21, 0x11	; 17
    4072:	07 c0       	rjmp	.+14     	; 0x4082 <__udivmodhi4_ep>

00004074 <__udivmodhi4_loop>:
    4074:	aa 1f       	adc	r26, r26
    4076:	bb 1f       	adc	r27, r27
    4078:	a6 17       	cp	r26, r22
    407a:	b7 07       	cpc	r27, r23
    407c:	10 f0       	brcs	.+4      	; 0x4082 <__udivmodhi4_ep>
    407e:	a6 1b       	sub	r26, r22
    4080:	b7 0b       	sbc	r27, r23

00004082 <__udivmodhi4_ep>:
    4082:	88 1f       	adc	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	5a 95       	dec	r21
    4088:	a9 f7       	brne	.-22     	; 0x4074 <__udivmodhi4_loop>
    408a:	80 95       	com	r24
    408c:	90 95       	com	r25
    408e:	bc 01       	movw	r22, r24
    4090:	cd 01       	movw	r24, r26
    4092:	08 95       	ret

00004094 <__umulhisi3>:
    4094:	a2 9f       	mul	r26, r18
    4096:	b0 01       	movw	r22, r0
    4098:	b3 9f       	mul	r27, r19
    409a:	c0 01       	movw	r24, r0
    409c:	a3 9f       	mul	r26, r19
    409e:	70 0d       	add	r23, r0
    40a0:	81 1d       	adc	r24, r1
    40a2:	11 24       	eor	r1, r1
    40a4:	91 1d       	adc	r25, r1
    40a6:	b2 9f       	mul	r27, r18
    40a8:	70 0d       	add	r23, r0
    40aa:	81 1d       	adc	r24, r1
    40ac:	11 24       	eor	r1, r1
    40ae:	91 1d       	adc	r25, r1
    40b0:	08 95       	ret

000040b2 <_exit>:
    40b2:	f8 94       	cli

000040b4 <__stop_program>:
    40b4:	ff cf       	rjmp	.-2      	; 0x40b4 <__stop_program>
