
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00802000  00003b6a  00003bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a0  008020f6  008020f6  00003cf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000efce  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f61  00000000  00000000  000133da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e71  00000000  00000000  0001933b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001274  00000000  00000000  0001e1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004de9  00000000  00000000  0001f420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b7f  00000000  00000000  00024209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  00029d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 02 	jmp	0x552	; 0x552 <__ctors_end>
       4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
       8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
       c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      10:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      14:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      18:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      1c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      20:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      24:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      28:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      30:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      34:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      38:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      3c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      40:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      44:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      48:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      4c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      50:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      54:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      58:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      5c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      60:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      64:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__vector_25>
      68:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      6c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      70:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__vector_28>
      74:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      78:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      7c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      80:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      84:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      88:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      8c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      90:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      94:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      98:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      9c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      ac:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      bc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      c0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      c4:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_49>
      c8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      cc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      dc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e8:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_58>
      ec:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      fc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     100:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     104:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     108:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     10c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     110:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     114:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     118:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     11c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     120:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     124:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     128:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     12c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     130:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     134:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     138:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     13c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     140:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     144:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     148:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     14c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     150:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     154:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     158:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     15c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     160:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__vector_88>
     164:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     168:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     16c:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <__vector_91>
     170:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     174:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     178:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     17c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     180:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     184:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     188:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     18c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     190:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     194:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     198:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     19c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1ac:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1bc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1cc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1dc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1ec:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1fc:	ea 17       	cp	r30, r26
     1fe:	ed 17       	cp	r30, r29
     200:	f0 17       	cp	r31, r16
     202:	f3 17       	cp	r31, r19
     204:	f6 17       	cp	r31, r22
     206:	f9 17       	cp	r31, r25
     208:	fb 17       	cp	r31, r27
     20a:	0c 18       	sub	r0, r12
     20c:	14 18       	sub	r1, r4
     20e:	1e 18       	sub	r1, r14
     210:	1c 18       	sub	r1, r12

00000212 <__trampolines_start>:
     212:	0c 94 8d 19 	jmp	0x331a	; 0x331a <_ZN5rs23212clear_screenEv>
     216:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <_ZN14frt_text_queue14check_for_charEv>
     21a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <_ZN8frt_task12print_statusER8emstream>
     21e:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <prvIdleTask>
     222:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <_ZN8emstream13ready_to_sendEv>
     226:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <_ZN8emstream14check_for_charEv>
     22a:	0c 94 14 18 	jmp	0x3028	; 0x3028 <_ZN8emstreamlsE15ser_manipulator+0x72>
     22e:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_ZN21task_pendulum_encoder3runEv>
     232:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <_GLOBAL__sub_I_counter>
     236:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <_ZN8emstream12transmit_nowEv>
     23a:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__cxa_pure_virtual>
     23e:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <_ZN8emstream12clear_screenEv>
     242:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <_ZN8emstreamlsE15ser_manipulator+0x40>
     246:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <_ZN14frt_text_queue7getcharEv>
     24a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_ZN9task_user3runEv>
     24e:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <_ZN8emstreamlsE15ser_manipulator+0x30>
     252:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     256:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN18task_motor_command3runEv>
     25a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <_ZN8emstreamlsE15ser_manipulator+0x82>
     25e:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <_ZN8emstreamlsE15ser_manipulator+0x36>
     262:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <_ZN14frt_text_queue7putcharEc>
     266:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     26a:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <_ZN8emstreamlsE15ser_manipulator+0x24>
     26e:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_call_static_run_method>
     272:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_ZN22task_system_controller3runEv>
     276:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_ZN8emstream7getcharEv>
     27a:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     27e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <_ZN8emstreamlsE15ser_manipulator+0x62>
     282:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <_ZN5rs2327getcharEv>
     286:	0c 94 1e 18 	jmp	0x303c	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
     28a:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN18task_motor_encoder3runEv>
     28e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_ZN17task_limit_switch3runEv>
     292:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <_ZN5rs23214check_for_charEv>
     296:	0c 94 30 19 	jmp	0x3260	; 0x3260 <_ZN5rs2327putcharEc>

0000029a <__trampolines_end>:
     29a:	2c 20       	and	r2, r12
     29c:	54 43       	sbci	r21, 0x34	; 52
     29e:	43 30       	cpi	r20, 0x03	; 3
     2a0:	43 43       	sbci	r20, 0x33	; 51
     2a2:	41 3d       	cpi	r20, 0xD1	; 209
	...

000002a5 <_ZZN9task_user11show_statusEvE3__c_3>:
     2a5:	2f 00                                               /.

000002a7 <_ZZN9task_user11show_statusEvE3__c_2>:
     2a7:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000002b5 <_ZZN9task_user11show_statusEvE3__c_1>:
     2b5:	54 69 6d 65 3a 20 00                                Time: .

000002bc <_ZZN9task_user11show_statusEvE3__c_0>:
     2bc:	46 65 62 20 32 32 20 32 30 32 35 00                 Feb 22 2025.

000002c8 <_ZZN9task_user11show_statusEvE3__c>:
     2c8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     2d8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000002e7 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     2e7:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000002f6 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     2f6:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     306:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000311 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     311:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     321:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000032f <_ZZN9task_user18print_help_messageEvE3__c_7>:
     32f:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     33f:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     34f:	6d 61 74 69 6f 6e 00                                mation.

00000356 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     356:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     366:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000377 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     377:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     387:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000038f <_ZZN9task_user18print_help_messageEvE3__c_4>:
     38f:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     39f:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000003ab <_ZZN9task_user18print_help_messageEvE3__c_3>:
     3ab:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     3bb:	68 65 20 41 56 52 00                                he AVR.

000003c2 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     3c2:	20 68 65 6c 70 00                                    help.

000003c8 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     3c8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3d8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000003e7 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     3e7:	1b 5b 33 30 6d 00                                   .[30m.

000003ed <_ZZN9task_user18print_help_messageEvE3__c>:
     3ed:	1b 5b 34 36 6d 00                                   .[46m.

000003f3 <_ZZN9task_user3runEvE3__c_3>:
     3f3:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     403:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000410 <_ZZN9task_user3runEvE3__c_2>:
     410:	3a 57 54 46 3f 00                                   :WTF?.

00000416 <_ZZN9task_user3runEvE3__c_1>:
     416:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     426:	65 00                                               e.

00000428 <_ZZN9task_user3runEvE3__c_0>:
     428:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

00000436 <_ZZN9task_user3runEvE3__c>:
     436:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     446:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

00000454 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     454:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

0000045e <_ZZN8frt_task15emergency_resetEvE3__c>:
     45e:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

0000046d <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     46d:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     47d:	61 73 6b 20 00                                      ask .

00000482 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     482:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000490 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     490:	20 63 72 65 61 74 65 64 00                           created.

00000499 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     499:	54 61 73 6b 20 00                                   Task .

0000049f <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     49f:	1b 5b 32 32 6d 00                                   .[22m.

000004a5 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     4a5:	54 61 73 6b 3a 20 00                                Task: .

000004ac <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     4ac:	1b 5b 31 6d 00                                      .[1m.

000004b1 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     4b1:	1b 5b 32 32 6d 00                                   .[22m.

000004b7 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     4b7:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000004c2 <_ZZ17print_task_stacksP8emstreamE3__c>:
     4c2:	1b 5b 31 6d 00                                      .[1m.

000004c7 <_ZZ15print_task_listP8emstreamE3__c_9>:
     4c7:	09 09 00                                            ...

000004ca <_ZZ15print_task_listP8emstreamE3__c_8>:
     4ca:	2f 00                                               /.

000004cc <_ZZ15print_task_listP8emstreamE3__c_7>:
     4cc:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000004d7 <_ZZ15print_task_listP8emstreamE3__c_6>:
     4d7:	09 2d 2d 2d 2d 00                                   .----.

000004dd <_ZZ15print_task_listP8emstreamE3__c_5>:
     4dd:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000004e9 <_ZZ15print_task_listP8emstreamE3__c_4>:
     4e9:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000004fa <_ZZ15print_task_listP8emstreamE3__c_3>:
     4fa:	09 52 75 6e 73 00                                   .Runs.

00000500 <_ZZ15print_task_listP8emstreamE3__c_2>:
     500:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

0000050c <_ZZ15print_task_listP8emstreamE3__c_1>:
     50c:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

0000051d <_ZZ15print_task_listP8emstreamE3__c_0>:
     51d:	09 53 74 61 63 6b 00                                .Stack.

00000524 <_ZZ15print_task_listP8emstreamE3__c>:
     524:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

0000052f <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     52f:	09 00                                               ..

00000531 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     531:	09 00                                               ..

00000533 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     533:	2f 00                                               /.

00000535 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     535:	09 00                                               ..

00000537 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     537:	09 00                                               ..

00000539 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     539:	1b 5b 32 32 6d 00                                   .[22m.

0000053f <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     53f:	1b 5b 31 6d 00                                      .[1m.

00000544 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     544:	1b 5b 31 6d 00                                      .[1m.

00000549 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     549:	20 20 00                                              .

0000054c <_call_static_run_method>:
     54c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <_ZN8frt_task22_call_users_run_methodEPS_>

00000550 <__ctors_start>:
     550:	ad 1c       	adc	r10, r13

00000552 <__ctors_end>:
     552:	11 24       	eor	r1, r1
     554:	1f be       	out	0x3f, r1	; 63
     556:	cf ef       	ldi	r28, 0xFF	; 255
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df e3       	ldi	r29, 0x3F	; 63
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	00 e0       	ldi	r16, 0x00	; 0
     560:	0c bf       	out	0x3c, r16	; 60
     562:	18 be       	out	0x38, r1	; 56
     564:	19 be       	out	0x39, r1	; 57
     566:	1a be       	out	0x3a, r1	; 58
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_copy_data>:
     56a:	10 e2       	ldi	r17, 0x20	; 32
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	ea e6       	ldi	r30, 0x6A	; 106
     572:	fb e3       	ldi	r31, 0x3B	; 59
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	0b bf       	out	0x3b, r16	; 59
     578:	02 c0       	rjmp	.+4      	; 0x57e <__do_copy_data+0x14>
     57a:	07 90       	elpm	r0, Z+
     57c:	0d 92       	st	X+, r0
     57e:	a6 3f       	cpi	r26, 0xF6	; 246
     580:	b1 07       	cpc	r27, r17
     582:	d9 f7       	brne	.-10     	; 0x57a <__do_copy_data+0x10>
     584:	1b be       	out	0x3b, r1	; 59

00000586 <__do_clear_bss>:
     586:	21 e3       	ldi	r18, 0x31	; 49
     588:	a6 ef       	ldi	r26, 0xF6	; 246
     58a:	b0 e2       	ldi	r27, 0x20	; 32
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a6 39       	cpi	r26, 0x96	; 150
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>

00000596 <__do_global_ctors>:
     596:	12 e0       	ldi	r17, 0x02	; 2
     598:	c9 ea       	ldi	r28, 0xA9	; 169
     59a:	d2 e0       	ldi	r29, 0x02	; 2
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <__do_global_ctors+0x16>
     5a0:	21 97       	sbiw	r28, 0x01	; 1
     5a2:	01 09       	sbc	r16, r1
     5a4:	80 2f       	mov	r24, r16
     5a6:	fe 01       	movw	r30, r28
     5a8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__tablejump2__>
     5ac:	c8 3a       	cpi	r28, 0xA8	; 168
     5ae:	d1 07       	cpc	r29, r17
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	08 07       	cpc	r16, r24
     5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__do_global_ctors+0xa>
     5b6:	0e 94 01 1c 	call	0x3802	; 0x3802 <main>
     5ba:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <_exit>

000005be <__bad_interrupt>:
     5be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c2 <_ZN17task_limit_switch3runEv>:
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
}


void task_limit_switch::run(void) {
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <_ZN17task_limit_switch3runEv+0x6>
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     5d0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
     5d4:	69 83       	std	Y+1, r22	; 0x01
     5d6:	7a 83       	std	Y+2, r23	; 0x02
     5d8:	8b 83       	std	Y+3, r24	; 0x03
     5da:	9c 83       	std	Y+4, r25	; 0x04

	PORTD.OUTSET |= bit_mask;
     5dc:	e0 e6       	ldi	r30, 0x60	; 96
     5de:	f6 e0       	ldi	r31, 0x06	; 6
     5e0:	95 81       	ldd	r25, Z+5	; 0x05
     5e2:	d8 01       	movw	r26, r16
     5e4:	52 96       	adiw	r26, 0x12	; 18
     5e6:	8c 91       	ld	r24, X
     5e8:	52 97       	sbiw	r26, 0x12	; 18
     5ea:	89 2b       	or	r24, r25
     5ec:	85 83       	std	Z+5, r24	; 0x05
	//PORTD.OUTCLR |= bit_mask;
	
	if (bit_mask == PIN0_bm) {
     5ee:	52 96       	adiw	r26, 0x12	; 18
     5f0:	8c 91       	ld	r24, X
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	99 f4       	brne	.+38     	; 0x61c <_ZN17task_limit_switch3runEv+0x5a>
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
     5f6:	88 e1       	ldi	r24, 0x18	; 24
     5f8:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f8 e6       	ldi	r31, 0x68	; 104
     600:	cf 2e       	mov	r12, r31
     602:	f6 e0       	ldi	r31, 0x06	; 6
     604:	df 2e       	mov	r13, r31
     606:	f0 2d       	mov	r31, r0
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
     608:	ff 24       	eor	r15, r15
     60a:	f3 94       	inc	r15
			rightLimit = false;
			rightLimitSwitch->put(rightLimit);
		}
		
		
		if(runs%100==0) {
     60c:	0f 2e       	mov	r0, r31
     60e:	f4 e6       	ldi	r31, 0x64	; 100
     610:	4f 2e       	mov	r4, r31
     612:	51 2c       	mov	r5, r1
     614:	61 2c       	mov	r6, r1
     616:	71 2c       	mov	r7, r1
     618:	f0 2d       	mov	r31, r0
     61a:	06 c0       	rjmp	.+12     	; 0x628 <_ZN17task_limit_switch3runEv+0x66>
	//PORTD.OUTCLR |= bit_mask;
	
	if (bit_mask == PIN0_bm) {
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
	}
	else if (bit_mask == PIN2_bm) {
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	71 f7       	brne	.-36     	; 0x5fc <_ZN17task_limit_switch3runEv+0x3a>
		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
     620:	88 e1       	ldi	r24, 0x18	; 24
     622:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     626:	ea cf       	rjmp	.-44     	; 0x5fc <_ZN17task_limit_switch3runEv+0x3a>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
     628:	f6 01       	movw	r30, r12
     62a:	80 81       	ld	r24, Z
     62c:	80 fd       	sbrc	r24, 0
     62e:	0c c0       	rjmp	.+24     	; 0x648 <_ZN17task_limit_switch3runEv+0x86>
				leftLimit = true;
				leftLimitSwitch->put(leftLimit);
     630:	e0 91 82 31 	lds	r30, 0x3182	; 0x803182 <leftLimitSwitch>
     634:	f0 91 83 31 	lds	r31, 0x3183	; 0x803183 <leftLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	0f 92       	push	r0
			the_data = new_data;
     63e:	f0 82       	st	Z, r15
			portEXIT_CRITICAL ();
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
				leftLimit = true;
     644:	bf 2c       	mov	r11, r15
     646:	0b c0       	rjmp	.+22     	; 0x65e <_ZN17task_limit_switch3runEv+0x9c>
				leftLimitSwitch->put(leftLimit);
		}
		else {
			leftLimit = false;
			leftLimitSwitch->put(leftLimit);
     648:	e0 91 82 31 	lds	r30, 0x3182	; 0x803182 <leftLimitSwitch>
     64c:	f0 91 83 31 	lds	r31, 0x3183	; 0x803183 <leftLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	0f 92       	push	r0
			the_data = new_data;
     656:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
				leftLimit = true;
				leftLimitSwitch->put(leftLimit);
		}
		else {
			leftLimit = false;
     65c:	b1 2c       	mov	r11, r1
			leftLimitSwitch->put(leftLimit);
		}

		if (!(PORTD_IN & PIN2_bm)) {				// check whether limit is pressed (pin D1 is high)
     65e:	d6 01       	movw	r26, r12
     660:	8c 91       	ld	r24, X
     662:	82 fd       	sbrc	r24, 2
     664:	0c c0       	rjmp	.+24     	; 0x67e <_ZN17task_limit_switch3runEv+0xbc>
			rightLimit = true;
			rightLimitSwitch->put(rightLimit);
     666:	e0 91 80 31 	lds	r30, 0x3180	; 0x803180 <rightLimitSwitch>
     66a:	f0 91 81 31 	lds	r31, 0x3181	; 0x803181 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	0f 92       	push	r0
			the_data = new_data;
     674:	f0 82       	st	Z, r15
			portEXIT_CRITICAL ();
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
			leftLimit = false;
			leftLimitSwitch->put(leftLimit);
		}

		if (!(PORTD_IN & PIN2_bm)) {				// check whether limit is pressed (pin D1 is high)
			rightLimit = true;
     67a:	ef 2c       	mov	r14, r15
     67c:	0b c0       	rjmp	.+22     	; 0x694 <_ZN17task_limit_switch3runEv+0xd2>
			rightLimitSwitch->put(rightLimit);

		}
		else {
			rightLimit = false;
			rightLimitSwitch->put(rightLimit);
     67e:	e0 91 80 31 	lds	r30, 0x3180	; 0x803180 <rightLimitSwitch>
     682:	f0 91 81 31 	lds	r31, 0x3181	; 0x803181 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	0f 92       	push	r0
			the_data = new_data;
     68c:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
			rightLimit = true;
			rightLimitSwitch->put(rightLimit);

		}
		else {
			rightLimit = false;
     692:	e1 2c       	mov	r14, r1
			rightLimitSwitch->put(rightLimit);
		}
		
		
		if(runs%100==0) {
     694:	f8 01       	movw	r30, r16
     696:	66 85       	ldd	r22, Z+14	; 0x0e
     698:	77 85       	ldd	r23, Z+15	; 0x0f
     69a:	80 89       	ldd	r24, Z+16	; 0x10
     69c:	91 89       	ldd	r25, Z+17	; 0x11
     69e:	a3 01       	movw	r20, r6
     6a0:	92 01       	movw	r18, r4
     6a2:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
     6a6:	67 2b       	or	r22, r23
     6a8:	68 2b       	or	r22, r24
     6aa:	69 2b       	or	r22, r25
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <_ZN17task_limit_switch3runEv+0xee>
     6ae:	69 c0       	rjmp	.+210    	; 0x782 <_ZN17task_limit_switch3runEv+0x1c0>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	0f 92       	push	r0
			temporary_copy = the_data;
     6b6:	e0 91 82 31 	lds	r30, 0x3182	; 0x803182 <leftLimitSwitch>
     6ba:	f0 91 83 31 	lds	r31, 0x3183	; 0x803183 <leftLimitSwitch+0x1>
     6be:	a0 80       	ld	r10, Z
			portEXIT_CRITICAL ();
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
			*p_serial << "Left" << leftLimitSwitch->get() << "\t";
     6c4:	d8 01       	movw	r26, r16
     6c6:	16 96       	adiw	r26, 0x06	; 6
     6c8:	8d 90       	ld	r8, X+
     6ca:	9c 90       	ld	r9, X
     6cc:	17 97       	sbiw	r26, 0x07	; 7
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     6ce:	66 e0       	ldi	r22, 0x06	; 6
     6d0:	70 e2       	ldi	r23, 0x20	; 32
     6d2:	c4 01       	movw	r24, r8
     6d4:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     6d8:	6a 2d       	mov	r22, r10
     6da:	c4 01       	movw	r24, r8
     6dc:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     6e0:	6b e0       	ldi	r22, 0x0B	; 11
     6e2:	70 e2       	ldi	r23, 0x20	; 32
     6e4:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	0f 92       	push	r0
			temporary_copy = the_data;
     6ee:	e0 91 80 31 	lds	r30, 0x3180	; 0x803180 <rightLimitSwitch>
     6f2:	f0 91 81 31 	lds	r31, 0x3181	; 0x803181 <rightLimitSwitch+0x1>
     6f6:	a0 80       	ld	r10, Z
			portEXIT_CRITICAL ();
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
			*p_serial << "Right" << rightLimitSwitch->get() << endl;
     6fc:	f8 01       	movw	r30, r16
     6fe:	86 80       	ldd	r8, Z+6	; 0x06
     700:	97 80       	ldd	r9, Z+7	; 0x07
     702:	6d e0       	ldi	r22, 0x0D	; 13
     704:	70 e2       	ldi	r23, 0x20	; 32
     706:	c4 01       	movw	r24, r8
     708:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     70c:	6a 2d       	mov	r22, r10
     70e:	c4 01       	movw	r24, r8
     710:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
			*p_serial << "leftLimit: " << leftLimit << endl;
     71a:	d8 01       	movw	r26, r16
     71c:	16 96       	adiw	r26, 0x06	; 6
     71e:	8d 90       	ld	r8, X+
     720:	9c 90       	ld	r9, X
     722:	17 97       	sbiw	r26, 0x07	; 7
     724:	63 e1       	ldi	r22, 0x13	; 19
     726:	70 e2       	ldi	r23, 0x20	; 32
     728:	c4 01       	movw	r24, r8
     72a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     72e:	6b 2d       	mov	r22, r11
     730:	c4 01       	movw	r24, r8
     732:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     736:	66 e0       	ldi	r22, 0x06	; 6
     738:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
			*p_serial << "limits: " << leftLimit << rightLimit << endl;
     73c:	f8 01       	movw	r30, r16
     73e:	86 80       	ldd	r8, Z+6	; 0x06
     740:	97 80       	ldd	r9, Z+7	; 0x07
     742:	6f e1       	ldi	r22, 0x1F	; 31
     744:	70 e2       	ldi	r23, 0x20	; 32
     746:	c4 01       	movw	r24, r8
     748:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     74c:	6b 2d       	mov	r22, r11
     74e:	c4 01       	movw	r24, r8
     750:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     754:	6e 2d       	mov	r22, r14
     756:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     75a:	66 e0       	ldi	r22, 0x06	; 6
     75c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
			*p_serial << "rightLimit: " << rightLimit << endl;
     760:	d8 01       	movw	r26, r16
     762:	16 96       	adiw	r26, 0x06	; 6
     764:	ad 90       	ld	r10, X+
     766:	bc 90       	ld	r11, X
     768:	17 97       	sbiw	r26, 0x07	; 7
     76a:	68 e2       	ldi	r22, 0x28	; 40
     76c:	70 e2       	ldi	r23, 0x20	; 32
     76e:	c5 01       	movw	r24, r10
     770:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     774:	6e 2d       	mov	r22, r14
     776:	c5 01       	movw	r24, r10
     778:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN8emstreamlsEb>
     77c:	66 e0       	ldi	r22, 0x06	; 6
     77e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
		}
		
	
		// Increment counter for debugging
		runs++;
     782:	f8 01       	movw	r30, r16
     784:	86 85       	ldd	r24, Z+14	; 0x0e
     786:	97 85       	ldd	r25, Z+15	; 0x0f
     788:	a0 89       	ldd	r26, Z+16	; 0x10
     78a:	b1 89       	ldd	r27, Z+17	; 0x11
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	a1 1d       	adc	r26, r1
     790:	b1 1d       	adc	r27, r1
     792:	86 87       	std	Z+14, r24	; 0x0e
     794:	97 87       	std	Z+15, r25	; 0x0f
     796:	a0 8b       	std	Z+16, r26	; 0x10
     798:	b1 8b       	std	Z+17, r27	; 0x11
		 *                    delay so as to get precise, regular timing
		 *  @param interval The duration of the delay interval in RTOS ticks
		 */
		void delay_from_to (portTickType& from_ticks, portTickType interval)
		{
			vTaskDelayUntil (&from_ticks, interval);
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelayUntil>
     7aa:	3e cf       	rjmp	.-388    	; 0x628 <_ZN17task_limit_switch3runEv+0x66>

000007ac <_ZN17task_limit_switchC1EPKchjP8emstreamh>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_limit_switch.h"               // Template

task_limit_switch::task_limit_switch (
     7ac:	ef 92       	push	r14
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ec 01       	movw	r28, r24
	size_t a_stack_size,
	emstream* p_ser_dev,
	uint8_t a_bit_mask
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     7b8:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     7bc:	89 e3       	ldi	r24, 0x39	; 57
     7be:	90 e2       	ldi	r25, 0x20	; 32
     7c0:	88 83       	st	Y, r24
     7c2:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
     7c4:	ea 8a       	std	Y+18, r14	; 0x12
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <_ZN18task_motor_command3runEv>:
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}


void task_motor_command::run(void) {
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <_ZN18task_motor_command3runEv+0x6>
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     7e0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
     7e4:	69 83       	std	Y+1, r22	; 0x01
     7e6:	7a 83       	std	Y+2, r23	; 0x02
     7e8:	8b 83       	std	Y+3, r24	; 0x03
     7ea:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     7ec:	f8 01       	movw	r30, r16
     7ee:	86 85       	ldd	r24, Z+14	; 0x0e
     7f0:	97 85       	ldd	r25, Z+15	; 0x0f
     7f2:	a0 89       	ldd	r26, Z+16	; 0x10
     7f4:	b1 89       	ldd	r27, Z+17	; 0x11
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	a1 1d       	adc	r26, r1
     7fa:	b1 1d       	adc	r27, r1
     7fc:	86 87       	std	Z+14, r24	; 0x0e
     7fe:	97 87       	std	Z+15, r25	; 0x0f
     800:	a0 8b       	std	Z+16, r26	; 0x10
     802:	b1 8b       	std	Z+17, r27	; 0x11
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelayUntil>
     814:	eb cf       	rjmp	.-42     	; 0x7ec <_ZN18task_motor_command3runEv+0x1a>

00000816 <_ZN18task_motor_commandC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_motor_command.h"                  // Template

task_motor_command::task_motor_command(
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     820:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     824:	81 e4       	ldi	r24, 0x41	; 65
     826:	90 e2       	ldi	r25, 0x20	; 32
     828:	88 83       	st	Y, r24
     82a:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <_ZN18task_motor_encoder3runEv>:
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
		// Nothing to do in this constructor other than call the parent constructor
}

void task_motor_encoder::run(void) {
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <_ZN18task_motor_encoder3runEv+0x6>
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     844:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
     848:	69 83       	std	Y+1, r22	; 0x01
     84a:	7a 83       	std	Y+2, r23	; 0x02
     84c:	8b 83       	std	Y+3, r24	; 0x03
     84e:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     850:	f8 01       	movw	r30, r16
     852:	86 85       	ldd	r24, Z+14	; 0x0e
     854:	97 85       	ldd	r25, Z+15	; 0x0f
     856:	a0 89       	ldd	r26, Z+16	; 0x10
     858:	b1 89       	ldd	r27, Z+17	; 0x11
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	a1 1d       	adc	r26, r1
     85e:	b1 1d       	adc	r27, r1
     860:	86 87       	std	Z+14, r24	; 0x0e
     862:	97 87       	std	Z+15, r25	; 0x0f
     864:	a0 8b       	std	Z+16, r26	; 0x10
     866:	b1 8b       	std	Z+17, r27	; 0x11
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelayUntil>
     878:	eb cf       	rjmp	.-42     	; 0x850 <_ZN18task_motor_encoder3runEv+0x1a>

0000087a <_ZN18task_motor_encoderC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_motor_encoder.h"                  // Template

task_motor_encoder::task_motor_encoder(
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     884:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     888:	89 e4       	ldi	r24, 0x49	; 73
     88a:	90 e2       	ldi	r25, 0x20	; 32
     88c:	88 83       	st	Y, r24
     88e:	99 83       	std	Y+1, r25	; 0x01
		// Nothing to do in this constructor other than call the parent constructor
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <_ZN21task_pendulum_encoder3runEv>:
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}

void task_pendulum_encoder::run(void) {
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <_ZN21task_pendulum_encoder3runEv+0x6>
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     8a8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
     8ac:	69 83       	std	Y+1, r22	; 0x01
     8ae:	7a 83       	std	Y+2, r23	; 0x02
     8b0:	8b 83       	std	Y+3, r24	; 0x03
     8b2:	9c 83       	std	Y+4, r25	; 0x04
			*p_serial << "Scary, scary skeletons!" << endl;
		}
		*/
				
		// Increment counter for debugging
		runs++;
     8b4:	f8 01       	movw	r30, r16
     8b6:	86 85       	ldd	r24, Z+14	; 0x0e
     8b8:	97 85       	ldd	r25, Z+15	; 0x0f
     8ba:	a0 89       	ldd	r26, Z+16	; 0x10
     8bc:	b1 89       	ldd	r27, Z+17	; 0x11
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	a1 1d       	adc	r26, r1
     8c2:	b1 1d       	adc	r27, r1
     8c4:	86 87       	std	Z+14, r24	; 0x0e
     8c6:	97 87       	std	Z+15, r25	; 0x0f
     8c8:	a0 8b       	std	Z+16, r26	; 0x10
     8ca:	b1 8b       	std	Z+17, r27	; 0x11
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelayUntil>
     8dc:	eb cf       	rjmp	.-42     	; 0x8b4 <_ZN21task_pendulum_encoder3runEv+0x1a>

000008de <_ZN21task_pendulum_encoderC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_pendulum_encoder.h"

task_pendulum_encoder::task_pendulum_encoder(
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     8e8:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     8ec:	81 e5       	ldi	r24, 0x51	; 81
     8ee:	90 e2       	ldi	r25, 0x20	; 32
     8f0:	88 83       	st	Y, r24
     8f2:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <_ZN22task_system_controller3runEv>:
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}


void task_system_controller::run(void) {
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	00 d0       	rcall	.+0      	; 0x904 <_ZN22task_system_controller3runEv+0x6>
     904:	1f 92       	push	r1
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     90c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
     910:	69 83       	std	Y+1, r22	; 0x01
     912:	7a 83       	std	Y+2, r23	; 0x02
     914:	8b 83       	std	Y+3, r24	; 0x03
     916:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     918:	f8 01       	movw	r30, r16
     91a:	86 85       	ldd	r24, Z+14	; 0x0e
     91c:	97 85       	ldd	r25, Z+15	; 0x0f
     91e:	a0 89       	ldd	r26, Z+16	; 0x10
     920:	b1 89       	ldd	r27, Z+17	; 0x11
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	a1 1d       	adc	r26, r1
     926:	b1 1d       	adc	r27, r1
     928:	86 87       	std	Z+14, r24	; 0x0e
     92a:	97 87       	std	Z+15, r25	; 0x0f
     92c:	a0 8b       	std	Z+16, r26	; 0x10
     92e:	b1 8b       	std	Z+17, r27	; 0x11
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelayUntil>
     940:	eb cf       	rjmp	.-42     	; 0x918 <_ZN22task_system_controller3runEv+0x1a>

00000942 <_ZN22task_system_controllerC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_system_controller.h"                  // Template

task_system_controller::task_system_controller(
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     94c:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     950:	89 e5       	ldi	r24, 0x59	; 89
     952:	90 e2       	ldi	r25, 0x20	; 32
     954:	88 83       	st	Y, r24
     956:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	08 95       	ret

00000962 <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
     96c:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN8frt_taskC1EPKchjP8emstream>
     970:	81 e6       	ldi	r24, 0x61	; 97
     972:	90 e2       	ldi	r25, 0x20	; 32
     974:	88 83       	st	Y, r24
     976:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
     98c:	6a e0       	ldi	r22, 0x0A	; 10
     98e:	8e 81       	ldd	r24, Y+6	; 0x06
     990:	9f 81       	ldd	r25, Y+7	; 0x07
     992:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     996:	8c 01       	movw	r16, r24
     998:	6d ee       	ldi	r22, 0xED	; 237
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     9a0:	6a e0       	ldi	r22, 0x0A	; 10
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     9a8:	8c 01       	movw	r16, r24
     9aa:	67 ee       	ldi	r22, 0xE7	; 231
     9ac:	73 e0       	ldi	r23, 0x03	; 3
     9ae:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     9b2:	67 e0       	ldi	r22, 0x07	; 7
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
     9ba:	6a e0       	ldi	r22, 0x0A	; 10
     9bc:	8e 81       	ldd	r24, Y+6	; 0x06
     9be:	9f 81       	ldd	r25, Y+7	; 0x07
     9c0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     9c4:	8c 01       	movw	r16, r24
     9c6:	68 ec       	ldi	r22, 0xC8	; 200
     9c8:	73 e0       	ldi	r23, 0x03	; 3
     9ca:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	c8 01       	movw	r24, r16
     9d2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     9d6:	8c 01       	movw	r16, r24
     9d8:	62 ec       	ldi	r22, 0xC2	; 194
     9da:	73 e0       	ldi	r23, 0x03	; 3
     9dc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     9e0:	66 e0       	ldi	r22, 0x06	; 6
     9e2:	c8 01       	movw	r24, r16
     9e4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
     9e8:	6a e0       	ldi	r22, 0x0A	; 10
     9ea:	8e 81       	ldd	r24, Y+6	; 0x06
     9ec:	9f 81       	ldd	r25, Y+7	; 0x07
     9ee:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     9f2:	8c 01       	movw	r16, r24
     9f4:	6b ea       	ldi	r22, 0xAB	; 171
     9f6:	73 e0       	ldi	r23, 0x03	; 3
     9f8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     9fc:	66 e0       	ldi	r22, 0x06	; 6
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
     a04:	6a e0       	ldi	r22, 0x0A	; 10
     a06:	8e 81       	ldd	r24, Y+6	; 0x06
     a08:	9f 81       	ldd	r25, Y+7	; 0x07
     a0a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a0e:	8c 01       	movw	r16, r24
     a10:	6f e8       	ldi	r22, 0x8F	; 143
     a12:	73 e0       	ldi	r23, 0x03	; 3
     a14:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     a18:	66 e0       	ldi	r22, 0x06	; 6
     a1a:	c8 01       	movw	r24, r16
     a1c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
     a20:	6a e0       	ldi	r22, 0x0A	; 10
     a22:	8e 81       	ldd	r24, Y+6	; 0x06
     a24:	9f 81       	ldd	r25, Y+7	; 0x07
     a26:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a2a:	8c 01       	movw	r16, r24
     a2c:	67 e7       	ldi	r22, 0x77	; 119
     a2e:	73 e0       	ldi	r23, 0x03	; 3
     a30:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     a34:	66 e0       	ldi	r22, 0x06	; 6
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
     a3c:	6a e0       	ldi	r22, 0x0A	; 10
     a3e:	8e 81       	ldd	r24, Y+6	; 0x06
     a40:	9f 81       	ldd	r25, Y+7	; 0x07
     a42:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a46:	8c 01       	movw	r16, r24
     a48:	66 e5       	ldi	r22, 0x56	; 86
     a4a:	73 e0       	ldi	r23, 0x03	; 3
     a4c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     a50:	66 e0       	ldi	r22, 0x06	; 6
     a52:	c8 01       	movw	r24, r16
     a54:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	8e 81       	ldd	r24, Y+6	; 0x06
     a5c:	9f 81       	ldd	r25, Y+7	; 0x07
     a5e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a62:	8c 01       	movw	r16, r24
     a64:	6f e2       	ldi	r22, 0x2F	; 47
     a66:	73 e0       	ldi	r23, 0x03	; 3
     a68:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     a6c:	66 e0       	ldi	r22, 0x06	; 6
     a6e:	c8 01       	movw	r24, r16
     a70:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
     a74:	6a e0       	ldi	r22, 0x0A	; 10
     a76:	8e 81       	ldd	r24, Y+6	; 0x06
     a78:	9f 81       	ldd	r25, Y+7	; 0x07
     a7a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a7e:	8c 01       	movw	r16, r24
     a80:	61 e1       	ldi	r22, 0x11	; 17
     a82:	73 e0       	ldi	r23, 0x03	; 3
     a84:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     a88:	66 e0       	ldi	r22, 0x06	; 6
     a8a:	c8 01       	movw	r24, r16
     a8c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
     a90:	6a e0       	ldi	r22, 0x0A	; 10
     a92:	8e 81       	ldd	r24, Y+6	; 0x06
     a94:	9f 81       	ldd	r25, Y+7	; 0x07
     a96:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     a9a:	8c 01       	movw	r16, r24
     a9c:	66 ef       	ldi	r22, 0xF6	; 246
     a9e:	72 e0       	ldi	r23, 0x02	; 2
     aa0:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     aa4:	66 e0       	ldi	r22, 0x06	; 6
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
     aac:	6a e0       	ldi	r22, 0x0A	; 10
     aae:	8e 81       	ldd	r24, Y+6	; 0x06
     ab0:	9f 81       	ldd	r25, Y+7	; 0x07
     ab2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     ab6:	ec 01       	movw	r28, r24
     ab8:	67 ee       	ldi	r22, 0xE7	; 231
     aba:	72 e0       	ldi	r23, 0x02	; 2
     abc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     ac0:	66 e0       	ldi	r22, 0x06	; 6
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <_ZN9task_user11show_statusEv+0x16>
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN9task_user11show_statusEv+0x18>
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     af0:	19 82       	std	Y+1, r1	; 0x01
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	1b 82       	std	Y+3, r1	; 0x03
     af6:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     af8:	1d 82       	std	Y+5, r1	; 0x05
     afa:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
     afc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <xPortGetFreeHeapSize>
     b00:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN10time_stamp10set_to_nowEv>
     b0a:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
     b0c:	66 e0       	ldi	r22, 0x06	; 6
     b0e:	f8 01       	movw	r30, r16
     b10:	86 81       	ldd	r24, Z+6	; 0x06
     b12:	97 81       	ldd	r25, Z+7	; 0x07
     b14:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b18:	6a e0       	ldi	r22, 0x0A	; 10
     b1a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b1e:	7c 01       	movw	r14, r24
     b20:	68 ec       	ldi	r22, 0xC8	; 200
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     b28:	6a e0       	ldi	r22, 0x0A	; 10
     b2a:	c7 01       	movw	r24, r14
     b2c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b30:	7c 01       	movw	r14, r24
     b32:	6c eb       	ldi	r22, 0xBC	; 188
     b34:	72 e0       	ldi	r23, 0x02	; 2
     b36:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     b3a:	66 e0       	ldi	r22, 0x06	; 6
     b3c:	c7 01       	movw	r24, r14
     b3e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
     b42:	6a e0       	ldi	r22, 0x0A	; 10
     b44:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b48:	7c 01       	movw	r14, r24
     b4a:	65 eb       	ldi	r22, 0xB5	; 181
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     b52:	b5 01       	movw	r22, r10
     b54:	c7 01       	movw	r24, r14
     b56:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
     b5a:	6a e0       	ldi	r22, 0x0A	; 10
     b5c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b60:	7c 01       	movw	r14, r24
     b62:	67 ea       	ldi	r22, 0xA7	; 167
     b64:	72 e0       	ldi	r23, 0x02	; 2
     b66:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     b6a:	b6 01       	movw	r22, r12
     b6c:	c7 01       	movw	r24, r14
     b6e:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
     b72:	6a e0       	ldi	r22, 0x0A	; 10
     b74:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     b78:	7c 01       	movw	r14, r24
     b7a:	65 ea       	ldi	r22, 0xA5	; 165
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
     b82:	4f ef       	ldi	r20, 0xFF	; 255
     b84:	5f e0       	ldi	r21, 0x0F	; 15
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	c7 01       	movw	r24, r14
     b8c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
     b90:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     b94:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     b98:	6a e0       	ldi	r22, 0x0A	; 10
     b9a:	f8 01       	movw	r30, r16
     b9c:	86 81       	ldd	r24, Z+6	; 0x06
     b9e:	97 81       	ldd	r25, Z+7	; 0x07
     ba0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     ba4:	7c 01       	movw	r14, r24
     ba6:	6a e9       	ldi	r22, 0x9A	; 154
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     bae:	b6 01       	movw	r22, r12
     bb0:	c7 01       	movw	r24, r14
     bb2:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     bbc:	66 e0       	ldi	r22, 0x06	; 6
     bbe:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
     bc2:	f8 01       	movw	r30, r16
     bc4:	86 81       	ldd	r24, Z+6	; 0x06
     bc6:	97 81       	ldd	r25, Z+7	; 0x07
     bc8:	0e 94 84 14 	call	0x2908	; 0x2908 <_Z15print_task_listP8emstream>
}
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	bf 90       	pop	r11
     be4:	af 90       	pop	r10
     be6:	08 95       	ret

00000be8 <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <_ZN9task_user3runEv+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <_ZN9task_user3runEv+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     bf6:	19 82       	std	Y+1, r1	; 0x01
     bf8:	1a 82       	std	Y+2, r1	; 0x02
     bfa:	1b 82       	std	Y+3, r1	; 0x03
     bfc:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     bfe:	1d 82       	std	Y+5, r1	; 0x05
     c00:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
     c02:	6a e0       	ldi	r22, 0x0A	; 10
     c04:	dc 01       	movw	r26, r24
     c06:	16 96       	adiw	r26, 0x06	; 6
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	17 97       	sbiw	r26, 0x07	; 7
     c0e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     c12:	7c 01       	movw	r14, r24
     c14:	66 e3       	ldi	r22, 0x36	; 54
     c16:	74 e0       	ldi	r23, 0x04	; 4
     c18:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     c1c:	66 e0       	ldi	r22, 0x06	; 6
     c1e:	c7 01       	movw	r24, r14
     c20:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
     c24:	f8 01       	movw	r30, r16
     c26:	84 85       	ldd	r24, Z+12	; 0x0c
     c28:	88 23       	and	r24, r24
     c2a:	21 f0       	breq	.+8      	; 0xc34 <_ZN9task_user3runEv+0x4c>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <_ZN9task_user3runEv+0x4a>
     c30:	5d c0       	rjmp	.+186    	; 0xcec <_ZN9task_user3runEv+0x104>
     c32:	d8 c0       	rjmp	.+432    	; 0xde4 <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
     c34:	86 81       	ldd	r24, Z+6	; 0x06
     c36:	97 81       	ldd	r25, Z+7	; 0x07
     c38:	dc 01       	movw	r26, r24
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	04 80       	ldd	r0, Z+4	; 0x04
     c40:	f5 81       	ldd	r31, Z+5	; 0x05
     c42:	e0 2d       	mov	r30, r0
     c44:	19 95       	eicall
     c46:	88 23       	and	r24, r24
     c48:	a9 f1       	breq	.+106    	; 0xcb4 <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
     c4a:	f8 01       	movw	r30, r16
     c4c:	86 81       	ldd	r24, Z+6	; 0x06
     c4e:	97 81       	ldd	r25, Z+7	; 0x07
     c50:	dc 01       	movw	r26, r24
     c52:	ed 91       	ld	r30, X+
     c54:	fc 91       	ld	r31, X
     c56:	06 80       	ldd	r0, Z+6	; 0x06
     c58:	f7 81       	ldd	r31, Z+7	; 0x07
     c5a:	e0 2d       	mov	r30, r0
     c5c:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
     c5e:	99 27       	eor	r25, r25
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	f9 f0       	breq	.+62     	; 0xca4 <_ZN9task_user3runEv+0xbc>
     c66:	03 97       	sbiw	r24, 0x03	; 3
     c68:	09 f0       	breq	.+2      	; 0xc6c <_ZN9task_user3runEv+0x84>
     c6a:	d8 c0       	rjmp	.+432    	; 0xe1c <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
     c6c:	6a e0       	ldi	r22, 0x0A	; 10
     c6e:	f8 01       	movw	r30, r16
     c70:	86 81       	ldd	r24, Z+6	; 0x06
     c72:	97 81       	ldd	r25, Z+7	; 0x07
     c74:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     c78:	8c 01       	movw	r16, r24
     c7a:	68 e2       	ldi	r22, 0x28	; 40
     c7c:	74 e0       	ldi	r23, 0x04	; 4
     c7e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     c82:	66 e0       	ldi	r22, 0x06	; 6
     c84:	c8 01       	movw	r24, r16
     c86:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	88 ed       	ldi	r24, 0xD8	; 216
     c8e:	08 b6       	in	r0, 0x38	; 56
     c90:	18 be       	out	0x38, r1	; 56
     c92:	84 bf       	out	0x34, r24	; 52
     c94:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     c98:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     c9c:	81 fd       	sbrc	r24, 1
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <_ZN9task_user3runEv+0xb0>
     ca0:	08 be       	out	0x38, r0	; 56
     ca2:	ff cf       	rjmp	.-2      	; 0xca2 <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN9task_user18print_help_messageEv>
							transition_to (1);
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN8frt_task13transition_toEh>
							break;
     cb2:	b4 c0       	rjmp	.+360    	; 0xe1c <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
     cb4:	84 e8       	ldi	r24, 0x84	; 132
     cb6:	91 e3       	ldi	r25, 0x31	; 49
     cb8:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_ZN14frt_text_queue14check_for_charEv>
     cbc:	88 23       	and	r24, r24
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <_ZN9task_user3runEv+0xda>
     cc0:	ad c0       	rjmp	.+346    	; 0xe1c <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
     cc2:	d8 01       	movw	r26, r16
     cc4:	16 96       	adiw	r26, 0x06	; 6
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	17 97       	sbiw	r26, 0x07	; 7
     ccc:	01 90       	ld	r0, Z+
     cce:	f0 81       	ld	r31, Z
     cd0:	e0 2d       	mov	r30, r0
     cd2:	e2 80       	ldd	r14, Z+2	; 0x02
     cd4:	f3 80       	ldd	r15, Z+3	; 0x03
     cd6:	84 e8       	ldi	r24, 0x84	; 132
     cd8:	91 e3       	ldi	r25, 0x31	; 49
     cda:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN14frt_text_queue7getcharEv>
     cde:	68 2f       	mov	r22, r24
     ce0:	f8 01       	movw	r30, r16
     ce2:	86 81       	ldd	r24, Z+6	; 0x06
     ce4:	97 81       	ldd	r25, Z+7	; 0x07
     ce6:	f7 01       	movw	r30, r14
     ce8:	19 95       	eicall
     cea:	98 c0       	rjmp	.+304    	; 0xe1c <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
     cec:	86 81       	ldd	r24, Z+6	; 0x06
     cee:	97 81       	ldd	r25, Z+7	; 0x07
     cf0:	dc 01       	movw	r26, r24
     cf2:	ed 91       	ld	r30, X+
     cf4:	fc 91       	ld	r31, X
     cf6:	04 80       	ldd	r0, Z+4	; 0x04
     cf8:	f5 81       	ldd	r31, Z+5	; 0x05
     cfa:	e0 2d       	mov	r30, r0
     cfc:	19 95       	eicall
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <_ZN9task_user3runEv+0x11c>
     d02:	8c c0       	rjmp	.+280    	; 0xe1c <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
     d04:	f8 01       	movw	r30, r16
     d06:	86 81       	ldd	r24, Z+6	; 0x06
     d08:	97 81       	ldd	r25, Z+7	; 0x07
     d0a:	dc 01       	movw	r26, r24
     d0c:	ed 91       	ld	r30, X+
     d0e:	fc 91       	ld	r31, X
     d10:	06 80       	ldd	r0, Z+6	; 0x06
     d12:	f7 81       	ldd	r31, Z+7	; 0x07
     d14:	e0 2d       	mov	r30, r0
     d16:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
     d18:	9c 01       	movw	r18, r24
     d1a:	33 27       	eor	r19, r19
     d1c:	28 36       	cpi	r18, 0x68	; 104
     d1e:	31 05       	cpc	r19, r1
     d20:	59 f1       	breq	.+86     	; 0xd78 <_ZN9task_user3runEv+0x190>
     d22:	3c f4       	brge	.+14     	; 0xd32 <_ZN9task_user3runEv+0x14a>
     d24:	2b 31       	cpi	r18, 0x1B	; 27
     d26:	31 05       	cpc	r19, r1
     d28:	59 f1       	breq	.+86     	; 0xd80 <_ZN9task_user3runEv+0x198>
     d2a:	25 36       	cpi	r18, 0x65	; 101
     d2c:	31 05       	cpc	r19, r1
     d2e:	41 f1       	breq	.+80     	; 0xd80 <_ZN9task_user3runEv+0x198>
     d30:	3b c0       	rjmp	.+118    	; 0xda8 <_ZN9task_user3runEv+0x1c0>
     d32:	23 37       	cpi	r18, 0x73	; 115
     d34:	31 05       	cpc	r19, r1
     d36:	c1 f0       	breq	.+48     	; 0xd68 <_ZN9task_user3runEv+0x180>
     d38:	26 37       	cpi	r18, 0x76	; 118
     d3a:	31 05       	cpc	r19, r1
     d3c:	89 f0       	breq	.+34     	; 0xd60 <_ZN9task_user3runEv+0x178>
     d3e:	2e 36       	cpi	r18, 0x6E	; 110
     d40:	31 05       	cpc	r19, r1
     d42:	91 f5       	brne	.+100    	; 0xda8 <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN10time_stamp10set_to_nowEv>
     d4c:	bc 01       	movw	r22, r24
     d4e:	f8 01       	movw	r30, r16
     d50:	86 81       	ldd	r24, Z+6	; 0x06
     d52:	97 81       	ldd	r25, Z+7	; 0x07
     d54:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZlsR8emstreamR10time_stamp>
     d58:	66 e0       	ldi	r22, 0x06	; 6
     d5a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
							break;
     d5e:	5e c0       	rjmp	.+188    	; 0xe1c <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN9task_user11show_statusEv>
							break;
     d66:	5a c0       	rjmp	.+180    	; 0xe1c <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
     d68:	d8 01       	movw	r26, r16
     d6a:	16 96       	adiw	r26, 0x06	; 6
     d6c:	8d 91       	ld	r24, X+
     d6e:	9c 91       	ld	r25, X
     d70:	17 97       	sbiw	r26, 0x07	; 7
     d72:	0e 94 8b 13 	call	0x2716	; 0x2716 <_Z17print_task_stacksP8emstream>
							break;
     d76:	52 c0       	rjmp	.+164    	; 0xe1c <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
     d78:	c8 01       	movw	r24, r16
     d7a:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN9task_user18print_help_messageEv>
							break;
     d7e:	4e c0       	rjmp	.+156    	; 0xe1c <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
     d80:	6a e0       	ldi	r22, 0x0A	; 10
     d82:	f8 01       	movw	r30, r16
     d84:	86 81       	ldd	r24, Z+6	; 0x06
     d86:	97 81       	ldd	r25, Z+7	; 0x07
     d88:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     d8c:	7c 01       	movw	r14, r24
     d8e:	66 e1       	ldi	r22, 0x16	; 22
     d90:	74 e0       	ldi	r23, 0x04	; 4
     d92:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     d96:	66 e0       	ldi	r22, 0x06	; 6
     d98:	c7 01       	movw	r24, r14
     d9a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	c8 01       	movw	r24, r16
     da2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN8frt_task13transition_toEh>
							break;
     da6:	3a c0       	rjmp	.+116    	; 0xe1c <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
     da8:	f8 01       	movw	r30, r16
     daa:	a6 81       	ldd	r26, Z+6	; 0x06
     dac:	b7 81       	ldd	r27, Z+7	; 0x07
     dae:	ed 91       	ld	r30, X+
     db0:	fc 91       	ld	r31, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	02 80       	ldd	r0, Z+2	; 0x02
     db6:	f3 81       	ldd	r31, Z+3	; 0x03
     db8:	e0 2d       	mov	r30, r0
     dba:	68 2f       	mov	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
     dc0:	6a e0       	ldi	r22, 0x0A	; 10
     dc2:	d8 01       	movw	r26, r16
     dc4:	16 96       	adiw	r26, 0x06	; 6
     dc6:	8d 91       	ld	r24, X+
     dc8:	9c 91       	ld	r25, X
     dca:	17 97       	sbiw	r26, 0x07	; 7
     dcc:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     dd0:	7c 01       	movw	r14, r24
     dd2:	60 e1       	ldi	r22, 0x10	; 16
     dd4:	74 e0       	ldi	r23, 0x04	; 4
     dd6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     dda:	66 e0       	ldi	r22, 0x06	; 6
     ddc:	c7 01       	movw	r24, r14
     dde:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
							break;
     de2:	1c c0       	rjmp	.+56     	; 0xe1c <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
     de4:	6a e0       	ldi	r22, 0x0A	; 10
     de6:	f8 01       	movw	r30, r16
     de8:	86 81       	ldd	r24, Z+6	; 0x06
     dea:	97 81       	ldd	r25, Z+7	; 0x07
     dec:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
     df0:	8c 01       	movw	r16, r24
     df2:	63 ef       	ldi	r22, 0xF3	; 243
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
     dfa:	66 e0       	ldi	r22, 0x06	; 6
     dfc:	c8 01       	movw	r24, r16
     dfe:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	88 ed       	ldi	r24, 0xD8	; 216
     e06:	08 b6       	in	r0, 0x38	; 56
     e08:	18 be       	out	0x38, r1	; 56
     e0a:	84 bf       	out	0x34, r24	; 52
     e0c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e10:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     e14:	81 fd       	sbrc	r24, 1
     e16:	fc cf       	rjmp	.-8      	; 0xe10 <_ZN9task_user3runEv+0x228>
     e18:	08 be       	out	0x38, r0	; 56
     e1a:	ff cf       	rjmp	.-2      	; 0xe1a <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
     e1c:	f8 01       	movw	r30, r16
     e1e:	86 85       	ldd	r24, Z+14	; 0x0e
     e20:	97 85       	ldd	r25, Z+15	; 0x0f
     e22:	a0 89       	ldd	r26, Z+16	; 0x10
     e24:	b1 89       	ldd	r27, Z+17	; 0x11
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	a1 1d       	adc	r26, r1
     e2a:	b1 1d       	adc	r27, r1
     e2c:	86 87       	std	Z+14, r24	; 0x0e
     e2e:	97 87       	std	Z+15, r25	; 0x0f
     e30:	a0 8b       	std	Z+16, r26	; 0x10
     e32:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 46 10 	call	0x208c	; 0x208c <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
     e40:	f1 ce       	rjmp	.-542    	; 0xc24 <_ZN9task_user3runEv+0x3c>

00000e42 <pvPortMalloc>:
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
     e50:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <__data_end>
     e54:	81 11       	cpse	r24, r1
     e56:	1d c0       	rjmp	.+58     	; 0xe92 <pvPortMalloc+0x50>
     e58:	ab ef       	ldi	r26, 0xFB	; 251
     e5a:	b0 e2       	ldi	r27, 0x20	; 32
     e5c:	ef ef       	ldi	r30, 0xFF	; 255
     e5e:	f0 e2       	ldi	r31, 0x20	; 32
     e60:	ed 93       	st	X+, r30
     e62:	fc 93       	st	X, r31
     e64:	11 97       	sbiw	r26, 0x01	; 1
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	1d 92       	st	X+, r1
     e6a:	1c 92       	st	X, r1
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	a7 ef       	ldi	r26, 0xF7	; 247
     e70:	b0 e2       	ldi	r27, 0x20	; 32
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f e0       	ldi	r25, 0x0F	; 15
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 93       	st	X+, r24
     e7a:	9c 93       	st	X, r25
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	1d 92       	st	X+, r1
     e80:	1c 92       	st	X, r1
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 83       	std	Z+2, r24	; 0x02
     e86:	93 83       	std	Z+3, r25	; 0x03
     e88:	a0 83       	st	Z, r26
     e8a:	b1 83       	std	Z+1, r27	; 0x01
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <__data_end>
     e92:	20 97       	sbiw	r28, 0x00	; 0
     e94:	09 f4       	brne	.+2      	; 0xe98 <pvPortMalloc+0x56>
     e96:	5f c0       	rjmp	.+190    	; 0xf56 <pvPortMalloc+0x114>
     e98:	9e 01       	movw	r18, r28
     e9a:	2b 5f       	subi	r18, 0xFB	; 251
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	24 96       	adiw	r28, 0x04	; 4
     ea0:	ce 3f       	cpi	r28, 0xFE	; 254
     ea2:	df 40       	sbci	r29, 0x0F	; 15
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <pvPortMalloc+0x66>
     ea6:	5a c0       	rjmp	.+180    	; 0xf5c <pvPortMalloc+0x11a>
     ea8:	e0 91 fb 20 	lds	r30, 0x20FB	; 0x8020fb <xStart>
     eac:	f0 91 fc 20 	lds	r31, 0x20FC	; 0x8020fc <xStart+0x1>
     eb0:	ab ef       	ldi	r26, 0xFB	; 251
     eb2:	b0 e2       	ldi	r27, 0x20	; 32
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <pvPortMalloc+0x78>
     eb6:	df 01       	movw	r26, r30
     eb8:	fc 01       	movw	r30, r24
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	20 f4       	brcc	.+8      	; 0xecc <pvPortMalloc+0x8a>
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	a9 f7       	brne	.-22     	; 0xeb6 <pvPortMalloc+0x74>
     ecc:	c0 e2       	ldi	r28, 0x20	; 32
     ece:	e7 3f       	cpi	r30, 0xF7	; 247
     ed0:	fc 07       	cpc	r31, r28
     ed2:	09 f4       	brne	.+2      	; 0xed6 <pvPortMalloc+0x94>
     ed4:	46 c0       	rjmp	.+140    	; 0xf62 <pvPortMalloc+0x120>
     ed6:	cd 91       	ld	r28, X+
     ed8:	dc 91       	ld	r29, X
     eda:	11 97       	sbiw	r26, 0x01	; 1
     edc:	8e 01       	movw	r16, r28
     ede:	0b 5f       	subi	r16, 0xFB	; 251
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	8d 93       	st	X+, r24
     ee8:	9c 93       	st	X, r25
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	82 1b       	sub	r24, r18
     ef0:	93 0b       	sbc	r25, r19
     ef2:	8b 30       	cpi	r24, 0x0B	; 11
     ef4:	91 05       	cpc	r25, r1
     ef6:	10 f1       	brcs	.+68     	; 0xf3c <pvPortMalloc+0xfa>
     ef8:	bf 01       	movw	r22, r30
     efa:	62 0f       	add	r22, r18
     efc:	73 1f       	adc	r23, r19
     efe:	db 01       	movw	r26, r22
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	8d 93       	st	X+, r24
     f04:	9c 93       	st	X, r25
     f06:	13 97       	sbiw	r26, 0x03	; 3
     f08:	22 83       	std	Z+2, r18	; 0x02
     f0a:	33 83       	std	Z+3, r19	; 0x03
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	4d 91       	ld	r20, X+
     f10:	5c 91       	ld	r21, X
     f12:	13 97       	sbiw	r26, 0x03	; 3
     f14:	8b ef       	ldi	r24, 0xFB	; 251
     f16:	90 e2       	ldi	r25, 0x20	; 32
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <pvPortMalloc+0xda>
     f1a:	cd 01       	movw	r24, r26
     f1c:	ec 01       	movw	r28, r24
     f1e:	a8 81       	ld	r26, Y
     f20:	b9 81       	ldd	r27, Y+1	; 0x01
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	2d 91       	ld	r18, X+
     f26:	3c 91       	ld	r19, X
     f28:	13 97       	sbiw	r26, 0x03	; 3
     f2a:	24 17       	cp	r18, r20
     f2c:	35 07       	cpc	r19, r21
     f2e:	a8 f3       	brcs	.-22     	; 0xf1a <pvPortMalloc+0xd8>
     f30:	eb 01       	movw	r28, r22
     f32:	a8 83       	st	Y, r26
     f34:	b9 83       	std	Y+1, r27	; 0x01
     f36:	dc 01       	movw	r26, r24
     f38:	6d 93       	st	X+, r22
     f3a:	7c 93       	st	X, r23
     f3c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     f40:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     f44:	22 81       	ldd	r18, Z+2	; 0x02
     f46:	33 81       	ldd	r19, Z+3	; 0x03
     f48:	82 1b       	sub	r24, r18
     f4a:	93 0b       	sbc	r25, r19
     f4c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
     f50:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <pvPortMalloc+0x124>
     f56:	00 e0       	ldi	r16, 0x00	; 0
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <pvPortMalloc+0x124>
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <pvPortMalloc+0x124>
     f62:	00 e0       	ldi	r16, 0x00	; 0
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
     f6a:	c8 01       	movw	r24, r16
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <vPortFree>:
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	41 f1       	breq	.+80     	; 0xfd2 <vPortFree+0x5c>
     f82:	ec 01       	movw	r28, r24
     f84:	8c 01       	movw	r16, r24
     f86:	05 50       	subi	r16, 0x05	; 5
     f88:	11 09       	sbc	r17, r1
     f8a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
     f8e:	f8 01       	movw	r30, r16
     f90:	42 81       	ldd	r20, Z+2	; 0x02
     f92:	53 81       	ldd	r21, Z+3	; 0x03
     f94:	ab ef       	ldi	r26, 0xFB	; 251
     f96:	b0 e2       	ldi	r27, 0x20	; 32
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <vPortFree+0x26>
     f9a:	df 01       	movw	r26, r30
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	22 81       	ldd	r18, Z+2	; 0x02
     fa4:	33 81       	ldd	r19, Z+3	; 0x03
     fa6:	24 17       	cp	r18, r20
     fa8:	35 07       	cpc	r19, r21
     faa:	b8 f3       	brcs	.-18     	; 0xf9a <vPortFree+0x24>
     fac:	25 97       	sbiw	r28, 0x05	; 5
     fae:	e8 83       	st	Y, r30
     fb0:	f9 83       	std	Y+1, r31	; 0x01
     fb2:	0d 93       	st	X+, r16
     fb4:	1c 93       	st	X, r17
     fb6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     fba:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
     fca:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     fce:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <xPortGetFreeHeapSize>:
     fdc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     fe0:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     fe4:	08 95       	ret

00000fe6 <vListInitialise>:
     fe6:	fc 01       	movw	r30, r24
     fe8:	03 96       	adiw	r24, 0x03	; 3
     fea:	81 83       	std	Z+1, r24	; 0x01
     fec:	92 83       	std	Z+2, r25	; 0x02
     fee:	4f ef       	ldi	r20, 0xFF	; 255
     ff0:	5f ef       	ldi	r21, 0xFF	; 255
     ff2:	ba 01       	movw	r22, r20
     ff4:	43 83       	std	Z+3, r20	; 0x03
     ff6:	54 83       	std	Z+4, r21	; 0x04
     ff8:	65 83       	std	Z+5, r22	; 0x05
     ffa:	76 83       	std	Z+6, r23	; 0x06
     ffc:	87 83       	std	Z+7, r24	; 0x07
     ffe:	90 87       	std	Z+8, r25	; 0x08
    1000:	81 87       	std	Z+9, r24	; 0x09
    1002:	92 87       	std	Z+10, r25	; 0x0a
    1004:	10 82       	st	Z, r1
    1006:	08 95       	ret

00001008 <vListInitialiseItem>:
    1008:	fc 01       	movw	r30, r24
    100a:	12 86       	std	Z+10, r1	; 0x0a
    100c:	13 86       	std	Z+11, r1	; 0x0b
    100e:	08 95       	ret

00001010 <vListInsertEnd>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	fc 01       	movw	r30, r24
    1016:	db 01       	movw	r26, r22
    1018:	21 81       	ldd	r18, Z+1	; 0x01
    101a:	32 81       	ldd	r19, Z+2	; 0x02
    101c:	e9 01       	movw	r28, r18
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	8d 93       	st	X+, r24
    1026:	9c 93       	st	X, r25
    1028:	15 97       	sbiw	r26, 0x05	; 5
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	92 81       	ldd	r25, Z+2	; 0x02
    102e:	16 96       	adiw	r26, 0x06	; 6
    1030:	8d 93       	st	X+, r24
    1032:	9c 93       	st	X, r25
    1034:	17 97       	sbiw	r26, 0x07	; 7
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	ec 01       	movw	r28, r24
    103c:	6e 83       	std	Y+6, r22	; 0x06
    103e:	7f 83       	std	Y+7, r23	; 0x07
    1040:	e9 01       	movw	r28, r18
    1042:	6c 83       	std	Y+4, r22	; 0x04
    1044:	7d 83       	std	Y+5, r23	; 0x05
    1046:	61 83       	std	Z+1, r22	; 0x01
    1048:	72 83       	std	Z+2, r23	; 0x02
    104a:	1a 96       	adiw	r26, 0x0a	; 10
    104c:	ed 93       	st	X+, r30
    104e:	fc 93       	st	X, r31
    1050:	1b 97       	sbiw	r26, 0x0b	; 11
    1052:	80 81       	ld	r24, Z
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	80 83       	st	Z, r24
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <vListInsert>:
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	eb 01       	movw	r28, r22
    1068:	08 81       	ld	r16, Y
    106a:	19 81       	ldd	r17, Y+1	; 0x01
    106c:	2a 81       	ldd	r18, Y+2	; 0x02
    106e:	3b 81       	ldd	r19, Y+3	; 0x03
    1070:	0f 3f       	cpi	r16, 0xFF	; 255
    1072:	4f ef       	ldi	r20, 0xFF	; 255
    1074:	14 07       	cpc	r17, r20
    1076:	24 07       	cpc	r18, r20
    1078:	34 07       	cpc	r19, r20
    107a:	31 f4       	brne	.+12     	; 0x1088 <vListInsert+0x2a>
    107c:	dc 01       	movw	r26, r24
    107e:	19 96       	adiw	r26, 0x09	; 9
    1080:	ed 91       	ld	r30, X+
    1082:	fc 91       	ld	r31, X
    1084:	1a 97       	sbiw	r26, 0x0a	; 10
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <vListInsert+0x68>
    1088:	fc 01       	movw	r30, r24
    108a:	33 96       	adiw	r30, 0x03	; 3
    108c:	dc 01       	movw	r26, r24
    108e:	17 96       	adiw	r26, 0x07	; 7
    1090:	4d 91       	ld	r20, X+
    1092:	5c 91       	ld	r21, X
    1094:	18 97       	sbiw	r26, 0x08	; 8
    1096:	da 01       	movw	r26, r20
    1098:	4d 91       	ld	r20, X+
    109a:	5d 91       	ld	r21, X+
    109c:	6d 91       	ld	r22, X+
    109e:	7c 91       	ld	r23, X
    10a0:	04 17       	cp	r16, r20
    10a2:	15 07       	cpc	r17, r21
    10a4:	26 07       	cpc	r18, r22
    10a6:	37 07       	cpc	r19, r23
    10a8:	70 f0       	brcs	.+28     	; 0x10c6 <vListInsert+0x68>
    10aa:	04 80       	ldd	r0, Z+4	; 0x04
    10ac:	f5 81       	ldd	r31, Z+5	; 0x05
    10ae:	e0 2d       	mov	r30, r0
    10b0:	a4 81       	ldd	r26, Z+4	; 0x04
    10b2:	b5 81       	ldd	r27, Z+5	; 0x05
    10b4:	4d 91       	ld	r20, X+
    10b6:	5d 91       	ld	r21, X+
    10b8:	6d 91       	ld	r22, X+
    10ba:	7c 91       	ld	r23, X
    10bc:	04 17       	cp	r16, r20
    10be:	15 07       	cpc	r17, r21
    10c0:	26 07       	cpc	r18, r22
    10c2:	37 07       	cpc	r19, r23
    10c4:	90 f7       	brcc	.-28     	; 0x10aa <vListInsert+0x4c>
    10c6:	a4 81       	ldd	r26, Z+4	; 0x04
    10c8:	b5 81       	ldd	r27, Z+5	; 0x05
    10ca:	ac 83       	std	Y+4, r26	; 0x04
    10cc:	bd 83       	std	Y+5, r27	; 0x05
    10ce:	16 96       	adiw	r26, 0x06	; 6
    10d0:	cd 93       	st	X+, r28
    10d2:	dc 93       	st	X, r29
    10d4:	17 97       	sbiw	r26, 0x07	; 7
    10d6:	ee 83       	std	Y+6, r30	; 0x06
    10d8:	ff 83       	std	Y+7, r31	; 0x07
    10da:	c4 83       	std	Z+4, r28	; 0x04
    10dc:	d5 83       	std	Z+5, r29	; 0x05
    10de:	8a 87       	std	Y+10, r24	; 0x0a
    10e0:	9b 87       	std	Y+11, r25	; 0x0b
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 81       	ld	r18, Z
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	20 83       	st	Z, r18
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <vListRemove>:
    10f4:	fc 01       	movw	r30, r24
    10f6:	a4 81       	ldd	r26, Z+4	; 0x04
    10f8:	b5 81       	ldd	r27, Z+5	; 0x05
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	97 81       	ldd	r25, Z+7	; 0x07
    10fe:	16 96       	adiw	r26, 0x06	; 6
    1100:	8d 93       	st	X+, r24
    1102:	9c 93       	st	X, r25
    1104:	17 97       	sbiw	r26, 0x07	; 7
    1106:	a6 81       	ldd	r26, Z+6	; 0x06
    1108:	b7 81       	ldd	r27, Z+7	; 0x07
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	95 81       	ldd	r25, Z+5	; 0x05
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	8d 93       	st	X+, r24
    1112:	9c 93       	st	X, r25
    1114:	15 97       	sbiw	r26, 0x05	; 5
    1116:	a2 85       	ldd	r26, Z+10	; 0x0a
    1118:	b3 85       	ldd	r27, Z+11	; 0x0b
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	8d 91       	ld	r24, X+
    111e:	9c 91       	ld	r25, X
    1120:	12 97       	sbiw	r26, 0x02	; 2
    1122:	e8 17       	cp	r30, r24
    1124:	f9 07       	cpc	r31, r25
    1126:	31 f4       	brne	.+12     	; 0x1134 <vListRemove+0x40>
    1128:	86 81       	ldd	r24, Z+6	; 0x06
    112a:	97 81       	ldd	r25, Z+7	; 0x07
    112c:	11 96       	adiw	r26, 0x01	; 1
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
    1132:	12 97       	sbiw	r26, 0x02	; 2
    1134:	12 86       	std	Z+10, r1	; 0x0a
    1136:	13 86       	std	Z+11, r1	; 0x0b
    1138:	8c 91       	ld	r24, X
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	8c 93       	st	X, r24
    113e:	08 95       	ret

00001140 <pxPortInitialiseStack>:
    1140:	80 93 94 31 	sts	0x3194, r24	; 0x803194 <portStackTopForTask>
    1144:	90 93 95 31 	sts	0x3195, r25	; 0x803195 <portStackTopForTask+0x1>
    1148:	31 e1       	ldi	r19, 0x11	; 17
    114a:	fc 01       	movw	r30, r24
    114c:	30 83       	st	Z, r19
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	22 e2       	ldi	r18, 0x22	; 34
    1152:	20 83       	st	Z, r18
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	a3 e3       	ldi	r26, 0x33	; 51
    1158:	a0 83       	st	Z, r26
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	60 83       	st	Z, r22
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	70 83       	st	Z, r23
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	10 82       	st	Z, r1
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	10 82       	st	Z, r1
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	60 e8       	ldi	r22, 0x80	; 128
    116e:	60 83       	st	Z, r22
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	10 82       	st	Z, r1
    1174:	31 97       	sbiw	r30, 0x01	; 1
    1176:	10 82       	st	Z, r1
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	10 82       	st	Z, r1
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	60 83       	st	Z, r22
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	63 e0       	ldi	r22, 0x03	; 3
    1186:	60 83       	st	Z, r22
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	60 83       	st	Z, r22
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	65 e0       	ldi	r22, 0x05	; 5
    1192:	60 83       	st	Z, r22
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	66 e0       	ldi	r22, 0x06	; 6
    1198:	60 83       	st	Z, r22
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	67 e0       	ldi	r22, 0x07	; 7
    119e:	60 83       	st	Z, r22
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	68 e0       	ldi	r22, 0x08	; 8
    11a4:	60 83       	st	Z, r22
    11a6:	31 97       	sbiw	r30, 0x01	; 1
    11a8:	69 e0       	ldi	r22, 0x09	; 9
    11aa:	60 83       	st	Z, r22
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	60 e1       	ldi	r22, 0x10	; 16
    11b0:	60 83       	st	Z, r22
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	30 83       	st	Z, r19
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	32 e1       	ldi	r19, 0x12	; 18
    11ba:	30 83       	st	Z, r19
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	33 e1       	ldi	r19, 0x13	; 19
    11c0:	30 83       	st	Z, r19
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	34 e1       	ldi	r19, 0x14	; 20
    11c6:	30 83       	st	Z, r19
    11c8:	31 97       	sbiw	r30, 0x01	; 1
    11ca:	35 e1       	ldi	r19, 0x15	; 21
    11cc:	30 83       	st	Z, r19
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	36 e1       	ldi	r19, 0x16	; 22
    11d2:	30 83       	st	Z, r19
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	37 e1       	ldi	r19, 0x17	; 23
    11d8:	30 83       	st	Z, r19
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	38 e1       	ldi	r19, 0x18	; 24
    11de:	30 83       	st	Z, r19
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	39 e1       	ldi	r19, 0x19	; 25
    11e4:	30 83       	st	Z, r19
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	30 e2       	ldi	r19, 0x20	; 32
    11ea:	30 83       	st	Z, r19
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	31 e2       	ldi	r19, 0x21	; 33
    11f0:	30 83       	st	Z, r19
    11f2:	31 97       	sbiw	r30, 0x01	; 1
    11f4:	20 83       	st	Z, r18
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	23 e2       	ldi	r18, 0x23	; 35
    11fa:	20 83       	st	Z, r18
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	40 83       	st	Z, r20
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	50 83       	st	Z, r21
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	26 e2       	ldi	r18, 0x26	; 38
    1208:	20 83       	st	Z, r18
    120a:	31 97       	sbiw	r30, 0x01	; 1
    120c:	27 e2       	ldi	r18, 0x27	; 39
    120e:	20 83       	st	Z, r18
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	28 e2       	ldi	r18, 0x28	; 40
    1214:	20 83       	st	Z, r18
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	29 e2       	ldi	r18, 0x29	; 41
    121a:	20 83       	st	Z, r18
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	20 e3       	ldi	r18, 0x30	; 48
    1220:	20 83       	st	Z, r18
    1222:	31 97       	sbiw	r30, 0x01	; 1
    1224:	21 e3       	ldi	r18, 0x31	; 49
    1226:	20 83       	st	Z, r18
    1228:	89 97       	sbiw	r24, 0x29	; 41
    122a:	08 95       	ret

0000122c <xPortStartScheduler>:
    122c:	8c e7       	ldi	r24, 0x7C	; 124
    122e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    123e:	91 e1       	ldi	r25, 0x11	; 17
    1240:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1244:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    1248:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    124c:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1250:	cd 91       	ld	r28, X+
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	dd 91       	ld	r29, X+
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	4f 90       	pop	r4
    1290:	3f 90       	pop	r3
    1292:	2f 90       	pop	r2
    1294:	1f 90       	pop	r1
    1296:	0f 90       	pop	r0
    1298:	0c be       	out	0x3c, r0	; 60
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	08 95       	ret
    12a6:	08 95       	ret

000012a8 <vPortYield>:
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	0f 92       	push	r0
    12b0:	0b b6       	in	r0, 0x3b	; 59
    12b2:	0f 92       	push	r0
    12b4:	0c b6       	in	r0, 0x3c	; 60
    12b6:	0f 92       	push	r0
    12b8:	1f 92       	push	r1
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 92       	push	r2
    12be:	3f 92       	push	r3
    12c0:	4f 92       	push	r4
    12c2:	5f 92       	push	r5
    12c4:	6f 92       	push	r6
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
    12f8:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    12fc:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1300:	0d b6       	in	r0, 0x3d	; 61
    1302:	0d 92       	st	X+, r0
    1304:	0e b6       	in	r0, 0x3e	; 62
    1306:	0d 92       	st	X+, r0
    1308:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vTaskSwitchContext>
    130c:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    1310:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1314:	cd 91       	ld	r28, X+
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	dd 91       	ld	r29, X+
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	7f 91       	pop	r23
    132e:	6f 91       	pop	r22
    1330:	5f 91       	pop	r21
    1332:	4f 91       	pop	r20
    1334:	3f 91       	pop	r19
    1336:	2f 91       	pop	r18
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	7f 90       	pop	r7
    134e:	6f 90       	pop	r6
    1350:	5f 90       	pop	r5
    1352:	4f 90       	pop	r4
    1354:	3f 90       	pop	r3
    1356:	2f 90       	pop	r2
    1358:	1f 90       	pop	r1
    135a:	0f 90       	pop	r0
    135c:	0c be       	out	0x3c, r0	; 60
    135e:	0f 90       	pop	r0
    1360:	0b be       	out	0x3b, r0	; 59
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	08 95       	ret

0000136a <vPortYieldFromTick>:
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	0f 92       	push	r0
    1372:	0b b6       	in	r0, 0x3b	; 59
    1374:	0f 92       	push	r0
    1376:	0c b6       	in	r0, 0x3c	; 60
    1378:	0f 92       	push	r0
    137a:	1f 92       	push	r1
    137c:	11 24       	eor	r1, r1
    137e:	2f 92       	push	r2
    1380:	3f 92       	push	r3
    1382:	4f 92       	push	r4
    1384:	5f 92       	push	r5
    1386:	6f 92       	push	r6
    1388:	7f 92       	push	r7
    138a:	8f 92       	push	r8
    138c:	9f 92       	push	r9
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    13be:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    13c2:	0d b6       	in	r0, 0x3d	; 61
    13c4:	0d 92       	st	X+, r0
    13c6:	0e b6       	in	r0, 0x3e	; 62
    13c8:	0d 92       	st	X+, r0
    13ca:	0e 94 56 0e 	call	0x1cac	; 0x1cac <vTaskIncrementTick>
    13ce:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vTaskSwitchContext>
    13d2:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    13d6:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    13da:	cd 91       	ld	r28, X+
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	dd 91       	ld	r29, X+
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	9f 90       	pop	r9
    1410:	8f 90       	pop	r8
    1412:	7f 90       	pop	r7
    1414:	6f 90       	pop	r6
    1416:	5f 90       	pop	r5
    1418:	4f 90       	pop	r4
    141a:	3f 90       	pop	r3
    141c:	2f 90       	pop	r2
    141e:	1f 90       	pop	r1
    1420:	0f 90       	pop	r0
    1422:	0c be       	out	0x3c, r0	; 60
    1424:	0f 90       	pop	r0
    1426:	0b be       	out	0x3b, r0	; 59
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	08 95       	ret

00001430 <__vector_49>:
    1430:	0e 94 b5 09 	call	0x136a	; 0x136a <vPortYieldFromTick>
    1434:	18 95       	reti

00001436 <prvCopyDataToQueue>:
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	88 a1       	ldd	r24, Y+32	; 0x20
    143e:	81 11       	cpse	r24, r1
    1440:	0b c0       	rjmp	.+22     	; 0x1458 <prvCopyDataToQueue+0x22>
    1442:	88 81       	ld	r24, Y
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	89 2b       	or	r24, r25
    1448:	e1 f5       	brne	.+120    	; 0x14c2 <prvCopyDataToQueue+0x8c>
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	0e 94 2f 12 	call	0x245e	; 0x245e <vTaskPriorityDisinherit>
    1452:	1a 82       	std	Y+2, r1	; 0x02
    1454:	1b 82       	std	Y+3, r1	; 0x03
    1456:	35 c0       	rjmp	.+106    	; 0x14c2 <prvCopyDataToQueue+0x8c>
    1458:	41 11       	cpse	r20, r1
    145a:	17 c0       	rjmp	.+46     	; 0x148a <prvCopyDataToQueue+0x54>
    145c:	48 2f       	mov	r20, r24
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <memcpy>
    1468:	28 a1       	ldd	r18, Y+32	; 0x20
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	82 0f       	add	r24, r18
    1470:	91 1d       	adc	r25, r1
    1472:	8c 83       	std	Y+4, r24	; 0x04
    1474:	9d 83       	std	Y+5, r25	; 0x05
    1476:	2a 81       	ldd	r18, Y+2	; 0x02
    1478:	3b 81       	ldd	r19, Y+3	; 0x03
    147a:	82 17       	cp	r24, r18
    147c:	93 07       	cpc	r25, r19
    147e:	08 f1       	brcs	.+66     	; 0x14c2 <prvCopyDataToQueue+0x8c>
    1480:	88 81       	ld	r24, Y
    1482:	99 81       	ldd	r25, Y+1	; 0x01
    1484:	8c 83       	std	Y+4, r24	; 0x04
    1486:	9d 83       	std	Y+5, r25	; 0x05
    1488:	1c c0       	rjmp	.+56     	; 0x14c2 <prvCopyDataToQueue+0x8c>
    148a:	48 2f       	mov	r20, r24
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <memcpy>
    1496:	88 a1       	ldd	r24, Y+32	; 0x20
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	91 95       	neg	r25
    149c:	81 95       	neg	r24
    149e:	91 09       	sbc	r25, r1
    14a0:	2e 81       	ldd	r18, Y+6	; 0x06
    14a2:	3f 81       	ldd	r19, Y+7	; 0x07
    14a4:	28 0f       	add	r18, r24
    14a6:	39 1f       	adc	r19, r25
    14a8:	2e 83       	std	Y+6, r18	; 0x06
    14aa:	3f 83       	std	Y+7, r19	; 0x07
    14ac:	48 81       	ld	r20, Y
    14ae:	59 81       	ldd	r21, Y+1	; 0x01
    14b0:	24 17       	cp	r18, r20
    14b2:	35 07       	cpc	r19, r21
    14b4:	30 f4       	brcc	.+12     	; 0x14c2 <prvCopyDataToQueue+0x8c>
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	8e 83       	std	Y+6, r24	; 0x06
    14c0:	9f 83       	std	Y+7, r25	; 0x07
    14c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8e 8f       	std	Y+30, r24	; 0x1e
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <prvCopyDataFromQueue>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	a1 f0       	breq	.+40     	; 0x1500 <prvCopyDataFromQueue+0x32>
    14d8:	40 a1       	ldd	r20, Z+32	; 0x20
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	26 81       	ldd	r18, Z+6	; 0x06
    14de:	37 81       	ldd	r19, Z+7	; 0x07
    14e0:	24 0f       	add	r18, r20
    14e2:	35 1f       	adc	r19, r21
    14e4:	26 83       	std	Z+6, r18	; 0x06
    14e6:	37 83       	std	Z+7, r19	; 0x07
    14e8:	a2 81       	ldd	r26, Z+2	; 0x02
    14ea:	b3 81       	ldd	r27, Z+3	; 0x03
    14ec:	2a 17       	cp	r18, r26
    14ee:	3b 07       	cpc	r19, r27
    14f0:	10 f0       	brcs	.+4      	; 0x14f6 <prvCopyDataFromQueue+0x28>
    14f2:	86 83       	std	Z+6, r24	; 0x06
    14f4:	97 83       	std	Z+7, r25	; 0x07
    14f6:	cb 01       	movw	r24, r22
    14f8:	66 81       	ldd	r22, Z+6	; 0x06
    14fa:	77 81       	ldd	r23, Z+7	; 0x07
    14fc:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <memcpy>
    1500:	08 95       	ret

00001502 <prvUnlockQueue>:
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	0f 92       	push	r0
    1512:	8a a1       	ldd	r24, Y+34	; 0x22
    1514:	18 16       	cp	r1, r24
    1516:	b4 f4       	brge	.+44     	; 0x1544 <prvUnlockQueue+0x42>
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	81 11       	cpse	r24, r1
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <prvUnlockQueue+0x26>
    151e:	12 c0       	rjmp	.+36     	; 0x1544 <prvUnlockQueue+0x42>
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	81 11       	cpse	r24, r1
    1524:	04 c0       	rjmp	.+8      	; 0x152e <prvUnlockQueue+0x2c>
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <prvUnlockQueue+0x42>
    1528:	8e 01       	movw	r16, r28
    152a:	0d 5e       	subi	r16, 0xED	; 237
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	c8 01       	movw	r24, r16
    1530:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskRemoveFromEventList>
    1534:	81 11       	cpse	r24, r1
    1536:	0e 94 b8 11 	call	0x2370	; 0x2370 <vTaskMissedYield>
    153a:	8a a1       	ldd	r24, Y+34	; 0x22
    153c:	81 50       	subi	r24, 0x01	; 1
    153e:	8a a3       	std	Y+34, r24	; 0x22
    1540:	18 16       	cp	r1, r24
    1542:	74 f3       	brlt	.-36     	; 0x1520 <prvUnlockQueue+0x1e>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	8a a3       	std	Y+34, r24	; 0x22
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	0f 92       	push	r0
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	18 16       	cp	r1, r24
    1556:	b4 f4       	brge	.+44     	; 0x1584 <prvUnlockQueue+0x82>
    1558:	88 85       	ldd	r24, Y+8	; 0x08
    155a:	81 11       	cpse	r24, r1
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <prvUnlockQueue+0x66>
    155e:	12 c0       	rjmp	.+36     	; 0x1584 <prvUnlockQueue+0x82>
    1560:	88 85       	ldd	r24, Y+8	; 0x08
    1562:	81 11       	cpse	r24, r1
    1564:	04 c0       	rjmp	.+8      	; 0x156e <prvUnlockQueue+0x6c>
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <prvUnlockQueue+0x82>
    1568:	8e 01       	movw	r16, r28
    156a:	08 5f       	subi	r16, 0xF8	; 248
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	c8 01       	movw	r24, r16
    1570:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskRemoveFromEventList>
    1574:	81 11       	cpse	r24, r1
    1576:	0e 94 b8 11 	call	0x2370	; 0x2370 <vTaskMissedYield>
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	81 50       	subi	r24, 0x01	; 1
    157e:	89 a3       	std	Y+33, r24	; 0x21
    1580:	18 16       	cp	r1, r24
    1582:	74 f3       	brlt	.-36     	; 0x1560 <prvUnlockQueue+0x5e>
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	89 a3       	std	Y+33, r24	; 0x21
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	08 95       	ret

00001596 <xQueueGenericReset>:
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	61 30       	cpi	r22, 0x01	; 1
    159e:	59 f0       	breq	.+22     	; 0x15b6 <xQueueGenericReset+0x20>
    15a0:	fc 01       	movw	r30, r24
    15a2:	23 89       	ldd	r18, Z+19	; 0x13
    15a4:	30 85       	ldd	r19, Z+8	; 0x08
    15a6:	31 11       	cpse	r19, r1
    15a8:	2c c0       	rjmp	.+88     	; 0x1602 <xQueueGenericReset+0x6c>
    15aa:	11 e0       	ldi	r17, 0x01	; 1
    15ac:	21 11       	cpse	r18, r1
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	21 11       	cpse	r18, r1
    15b2:	28 c0       	rjmp	.+80     	; 0x1604 <xQueueGenericReset+0x6e>
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <xQueueGenericReset+0x22>
    15b6:	11 e0       	ldi	r17, 0x01	; 1
    15b8:	ec 01       	movw	r28, r24
    15ba:	48 81       	ld	r20, Y
    15bc:	59 81       	ldd	r21, Y+1	; 0x01
    15be:	28 a1       	ldd	r18, Y+32	; 0x20
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15c4:	62 9f       	mul	r22, r18
    15c6:	c0 01       	movw	r24, r0
    15c8:	63 9f       	mul	r22, r19
    15ca:	90 0d       	add	r25, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	ba 01       	movw	r22, r20
    15d0:	68 0f       	add	r22, r24
    15d2:	79 1f       	adc	r23, r25
    15d4:	6a 83       	std	Y+2, r22	; 0x02
    15d6:	7b 83       	std	Y+3, r23	; 0x03
    15d8:	1e 8e       	std	Y+30, r1	; 0x1e
    15da:	4c 83       	std	Y+4, r20	; 0x04
    15dc:	5d 83       	std	Y+5, r21	; 0x05
    15de:	82 1b       	sub	r24, r18
    15e0:	93 0b       	sbc	r25, r19
    15e2:	84 0f       	add	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	8e 83       	std	Y+6, r24	; 0x06
    15e8:	9f 83       	std	Y+7, r25	; 0x07
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	89 a3       	std	Y+33, r24	; 0x21
    15ee:	8a a3       	std	Y+34, r24	; 0x22
    15f0:	ce 01       	movw	r24, r28
    15f2:	08 96       	adiw	r24, 0x08	; 8
    15f4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    15f8:	ce 01       	movw	r24, r28
    15fa:	43 96       	adiw	r24, 0x13	; 19
    15fc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <xQueueGenericReset+0x6e>
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	81 2f       	mov	r24, r17
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	08 95       	ret

0000160e <xQueueGenericCreate>:
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	88 23       	and	r24, r24
    1618:	01 f1       	breq	.+64     	; 0x165a <xQueueGenericCreate+0x4c>
    161a:	06 2f       	mov	r16, r22
    161c:	18 2f       	mov	r17, r24
    161e:	83 e2       	ldi	r24, 0x23	; 35
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    1626:	ec 01       	movw	r28, r24
    1628:	89 2b       	or	r24, r25
    162a:	c9 f0       	breq	.+50     	; 0x165e <xQueueGenericCreate+0x50>
    162c:	10 9f       	mul	r17, r16
    162e:	c0 01       	movw	r24, r0
    1630:	11 24       	eor	r1, r1
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    1638:	88 83       	st	Y, r24
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	89 2b       	or	r24, r25
    163e:	39 f0       	breq	.+14     	; 0x164e <xQueueGenericCreate+0x40>
    1640:	1f 8f       	std	Y+31, r17	; 0x1f
    1642:	08 a3       	std	Y+32, r16	; 0x20
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	ce 01       	movw	r24, r28
    1648:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericReset>
    164c:	08 c0       	rjmp	.+16     	; 0x165e <xQueueGenericCreate+0x50>
    164e:	ce 01       	movw	r24, r28
    1650:	0e 94 bb 07 	call	0xf76	; 0xf76 <vPortFree>
    1654:	c0 e0       	ldi	r28, 0x00	; 0
    1656:	d0 e0       	ldi	r29, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <xQueueGenericCreate+0x50>
    165a:	c0 e0       	ldi	r28, 0x00	; 0
    165c:	d0 e0       	ldi	r29, 0x00	; 0
    165e:	ce 01       	movw	r24, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <xQueueGenericSend>:
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	29 97       	sbiw	r28, 0x09	; 9
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	7c 01       	movw	r14, r24
    168a:	5b 01       	movw	r10, r22
    168c:	2e 83       	std	Y+6, r18	; 0x06
    168e:	3f 83       	std	Y+7, r19	; 0x07
    1690:	48 87       	std	Y+8, r20	; 0x08
    1692:	59 87       	std	Y+9, r21	; 0x09
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	6c 01       	movw	r12, r24
    1698:	88 e0       	ldi	r24, 0x08	; 8
    169a:	c8 0e       	add	r12, r24
    169c:	d1 1c       	adc	r13, r1
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
    16a4:	f7 01       	movw	r30, r14
    16a6:	96 8d       	ldd	r25, Z+30	; 0x1e
    16a8:	87 8d       	ldd	r24, Z+31	; 0x1f
    16aa:	98 17       	cp	r25, r24
    16ac:	a8 f4       	brcc	.+42     	; 0x16d8 <xQueueGenericSend+0x6e>
    16ae:	40 2f       	mov	r20, r16
    16b0:	b5 01       	movw	r22, r10
    16b2:	c7 01       	movw	r24, r14
    16b4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <prvCopyDataToQueue>
    16b8:	f7 01       	movw	r30, r14
    16ba:	83 89       	ldd	r24, Z+19	; 0x13
    16bc:	88 23       	and	r24, r24
    16be:	41 f0       	breq	.+16     	; 0x16d0 <xQueueGenericSend+0x66>
    16c0:	c7 01       	movw	r24, r14
    16c2:	43 96       	adiw	r24, 0x13	; 19
    16c4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskRemoveFromEventList>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <xQueueGenericSend+0x66>
    16cc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	56 c0       	rjmp	.+172    	; 0x1784 <xQueueGenericSend+0x11a>
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	a8 85       	ldd	r26, Y+8	; 0x08
    16de:	b9 85       	ldd	r27, Y+9	; 0x09
    16e0:	89 2b       	or	r24, r25
    16e2:	8a 2b       	or	r24, r26
    16e4:	8b 2b       	or	r24, r27
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <xQueueGenericSend+0x86>
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	4a c0       	rjmp	.+148    	; 0x1784 <xQueueGenericSend+0x11a>
    16f0:	11 11       	cpse	r17, r1
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <xQueueGenericSend+0x94>
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	0e 94 3a 11 	call	0x2274	; 0x2274 <vTaskSetTimeOutState>
    16fc:	11 e0       	ldi	r17, 0x01	; 1
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	0f 92       	push	r0
    170c:	f7 01       	movw	r30, r14
    170e:	81 a1       	ldd	r24, Z+33	; 0x21
    1710:	8f 3f       	cpi	r24, 0xFF	; 255
    1712:	09 f4       	brne	.+2      	; 0x1716 <xQueueGenericSend+0xac>
    1714:	11 a2       	std	Z+33, r1	; 0x21
    1716:	f7 01       	movw	r30, r14
    1718:	82 a1       	ldd	r24, Z+34	; 0x22
    171a:	8f 3f       	cpi	r24, 0xFF	; 255
    171c:	09 f4       	brne	.+2      	; 0x1720 <xQueueGenericSend+0xb6>
    171e:	12 a2       	std	Z+34, r1	; 0x22
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	be 01       	movw	r22, r28
    1726:	6a 5f       	subi	r22, 0xFA	; 250
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	ce 01       	movw	r24, r28
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskCheckForTimeOut>
    1732:	81 11       	cpse	r24, r1
    1734:	21 c0       	rjmp	.+66     	; 0x1778 <xQueueGenericSend+0x10e>
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	f7 01       	movw	r30, r14
    173e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	87 8d       	ldd	r24, Z+31	; 0x1f
    1746:	98 13       	cpse	r25, r24
    1748:	11 c0       	rjmp	.+34     	; 0x176c <xQueueGenericSend+0x102>
    174a:	4e 81       	ldd	r20, Y+6	; 0x06
    174c:	5f 81       	ldd	r21, Y+7	; 0x07
    174e:	68 85       	ldd	r22, Y+8	; 0x08
    1750:	79 85       	ldd	r23, Y+9	; 0x09
    1752:	c6 01       	movw	r24, r12
    1754:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <vTaskPlaceOnEventList>
    1758:	c7 01       	movw	r24, r14
    175a:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    175e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    1762:	81 11       	cpse	r24, r1
    1764:	9c cf       	rjmp	.-200    	; 0x169e <xQueueGenericSend+0x34>
    1766:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    176a:	99 cf       	rjmp	.-206    	; 0x169e <xQueueGenericSend+0x34>
    176c:	c7 01       	movw	r24, r14
    176e:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    1772:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    1776:	93 cf       	rjmp	.-218    	; 0x169e <xQueueGenericSend+0x34>
    1778:	c7 01       	movw	r24, r14
    177a:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    177e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	29 96       	adiw	r28, 0x09	; 9
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	08 95       	ret

000017a0 <xQueueGenericReceive>:
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	29 97       	sbiw	r28, 0x09	; 9
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	7c 01       	movw	r14, r24
    17c0:	5b 01       	movw	r10, r22
    17c2:	2e 83       	std	Y+6, r18	; 0x06
    17c4:	3f 83       	std	Y+7, r19	; 0x07
    17c6:	48 87       	std	Y+8, r20	; 0x08
    17c8:	59 87       	std	Y+9, r21	; 0x09
    17ca:	10 e0       	ldi	r17, 0x00	; 0
    17cc:	6c 01       	movw	r12, r24
    17ce:	83 e1       	ldi	r24, 0x13	; 19
    17d0:	c8 0e       	add	r12, r24
    17d2:	d1 1c       	adc	r13, r1
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	0f 92       	push	r0
    17da:	f7 01       	movw	r30, r14
    17dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    17de:	88 23       	and	r24, r24
    17e0:	99 f1       	breq	.+102    	; 0x1848 <xQueueGenericReceive+0xa8>
    17e2:	c6 80       	ldd	r12, Z+6	; 0x06
    17e4:	d7 80       	ldd	r13, Z+7	; 0x07
    17e6:	b5 01       	movw	r22, r10
    17e8:	c7 01       	movw	r24, r14
    17ea:	0e 94 67 0a 	call	0x14ce	; 0x14ce <prvCopyDataFromQueue>
    17ee:	01 11       	cpse	r16, r1
    17f0:	1a c0       	rjmp	.+52     	; 0x1826 <xQueueGenericReceive+0x86>
    17f2:	f7 01       	movw	r30, r14
    17f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	86 8f       	std	Z+30, r24	; 0x1e
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	89 2b       	or	r24, r25
    1800:	29 f4       	brne	.+10     	; 0x180c <xQueueGenericReceive+0x6c>
    1802:	0e 94 d5 11 	call	0x23aa	; 0x23aa <xTaskGetCurrentTaskHandle>
    1806:	f7 01       	movw	r30, r14
    1808:	82 83       	std	Z+2, r24	; 0x02
    180a:	93 83       	std	Z+3, r25	; 0x03
    180c:	f7 01       	movw	r30, r14
    180e:	80 85       	ldd	r24, Z+8	; 0x08
    1810:	88 23       	and	r24, r24
    1812:	b1 f0       	breq	.+44     	; 0x1840 <xQueueGenericReceive+0xa0>
    1814:	c7 01       	movw	r24, r14
    1816:	08 96       	adiw	r24, 0x08	; 8
    1818:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskRemoveFromEventList>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	81 f4       	brne	.+32     	; 0x1840 <xQueueGenericReceive+0xa0>
    1820:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    1824:	0d c0       	rjmp	.+26     	; 0x1840 <xQueueGenericReceive+0xa0>
    1826:	f7 01       	movw	r30, r14
    1828:	c6 82       	std	Z+6, r12	; 0x06
    182a:	d7 82       	std	Z+7, r13	; 0x07
    182c:	83 89       	ldd	r24, Z+19	; 0x13
    182e:	88 23       	and	r24, r24
    1830:	39 f0       	breq	.+14     	; 0x1840 <xQueueGenericReceive+0xa0>
    1832:	c7 01       	movw	r24, r14
    1834:	43 96       	adiw	r24, 0x13	; 19
    1836:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskRemoveFromEventList>
    183a:	81 11       	cpse	r24, r1
    183c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	62 c0       	rjmp	.+196    	; 0x190c <xQueueGenericReceive+0x16c>
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	9f 81       	ldd	r25, Y+7	; 0x07
    184c:	a8 85       	ldd	r26, Y+8	; 0x08
    184e:	b9 85       	ldd	r27, Y+9	; 0x09
    1850:	89 2b       	or	r24, r25
    1852:	8a 2b       	or	r24, r26
    1854:	8b 2b       	or	r24, r27
    1856:	21 f4       	brne	.+8      	; 0x1860 <xQueueGenericReceive+0xc0>
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	56 c0       	rjmp	.+172    	; 0x190c <xQueueGenericReceive+0x16c>
    1860:	11 11       	cpse	r17, r1
    1862:	05 c0       	rjmp	.+10     	; 0x186e <xQueueGenericReceive+0xce>
    1864:	ce 01       	movw	r24, r28
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	0e 94 3a 11 	call	0x2274	; 0x2274 <vTaskSetTimeOutState>
    186c:	11 e0       	ldi	r17, 0x01	; 1
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	0f 92       	push	r0
    187c:	f7 01       	movw	r30, r14
    187e:	81 a1       	ldd	r24, Z+33	; 0x21
    1880:	8f 3f       	cpi	r24, 0xFF	; 255
    1882:	09 f4       	brne	.+2      	; 0x1886 <xQueueGenericReceive+0xe6>
    1884:	11 a2       	std	Z+33, r1	; 0x21
    1886:	f7 01       	movw	r30, r14
    1888:	82 a1       	ldd	r24, Z+34	; 0x22
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	09 f4       	brne	.+2      	; 0x1890 <xQueueGenericReceive+0xf0>
    188e:	12 a2       	std	Z+34, r1	; 0x22
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	be 01       	movw	r22, r28
    1896:	6a 5f       	subi	r22, 0xFA	; 250
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 4b 11 	call	0x2296	; 0x2296 <xTaskCheckForTimeOut>
    18a2:	81 11       	cpse	r24, r1
    18a4:	2d c0       	rjmp	.+90     	; 0x1900 <xQueueGenericReceive+0x160>
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	0f 92       	push	r0
    18ac:	f7 01       	movw	r30, r14
    18ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	81 11       	cpse	r24, r1
    18b6:	1e c0       	rjmp	.+60     	; 0x18f4 <xQueueGenericReceive+0x154>
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	89 2b       	or	r24, r25
    18be:	49 f4       	brne	.+18     	; 0x18d2 <xQueueGenericReceive+0x132>
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	0f 92       	push	r0
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	0e 94 da 11 	call	0x23b4	; 0x23b4 <vTaskPriorityInherit>
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	4e 81       	ldd	r20, Y+6	; 0x06
    18d4:	5f 81       	ldd	r21, Y+7	; 0x07
    18d6:	68 85       	ldd	r22, Y+8	; 0x08
    18d8:	79 85       	ldd	r23, Y+9	; 0x09
    18da:	c6 01       	movw	r24, r12
    18dc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <vTaskPlaceOnEventList>
    18e0:	c7 01       	movw	r24, r14
    18e2:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    18e6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    18ea:	81 11       	cpse	r24, r1
    18ec:	73 cf       	rjmp	.-282    	; 0x17d4 <xQueueGenericReceive+0x34>
    18ee:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    18f2:	70 cf       	rjmp	.-288    	; 0x17d4 <xQueueGenericReceive+0x34>
    18f4:	c7 01       	movw	r24, r14
    18f6:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    18fa:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    18fe:	6a cf       	rjmp	.-300    	; 0x17d4 <xQueueGenericReceive+0x34>
    1900:	c7 01       	movw	r24, r14
    1902:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvUnlockQueue>
    1906:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	29 96       	adiw	r28, 0x09	; 9
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	bf 90       	pop	r11
    1924:	af 90       	pop	r10
    1926:	08 95       	ret

00001928 <uxQueueMessagesWaiting>:
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	0f 92       	push	r0
    192e:	fc 01       	movw	r30, r24
    1930:	86 8d       	ldd	r24, Z+30	; 0x1e
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	08 95       	ret

00001938 <prvIdleTask>:
    1938:	c2 e3       	ldi	r28, 0x32	; 50
    193a:	d1 e3       	ldi	r29, 0x31	; 49
    193c:	88 81       	ld	r24, Y
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	e8 f3       	brcs	.-6      	; 0x193c <prvIdleTask+0x4>
    1942:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    1946:	fa cf       	rjmp	.-12     	; 0x193c <prvIdleTask+0x4>

00001948 <prvAddCurrentTaskToDelayedList>:
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    1958:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    195c:	62 83       	std	Z+2, r22	; 0x02
    195e:	73 83       	std	Z+3, r23	; 0x03
    1960:	84 83       	std	Z+4, r24	; 0x04
    1962:	95 83       	std	Z+5, r25	; 0x05
    1964:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    1968:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    196c:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    1970:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    1974:	c8 16       	cp	r12, r24
    1976:	d9 06       	cpc	r13, r25
    1978:	ea 06       	cpc	r14, r26
    197a:	fb 06       	cpc	r15, r27
    197c:	68 f4       	brcc	.+26     	; 0x1998 <prvAddCurrentTaskToDelayedList+0x50>
    197e:	60 91 5e 31 	lds	r22, 0x315E	; 0x80315e <pxCurrentTCB>
    1982:	70 91 5f 31 	lds	r23, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1986:	80 91 18 31 	lds	r24, 0x3118	; 0x803118 <pxOverflowDelayedTaskList>
    198a:	90 91 19 31 	lds	r25, 0x3119	; 0x803119 <pxOverflowDelayedTaskList+0x1>
    198e:	6e 5f       	subi	r22, 0xFE	; 254
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	0e 94 2f 08 	call	0x105e	; 0x105e <vListInsert>
    1996:	21 c0       	rjmp	.+66     	; 0x19da <prvAddCurrentTaskToDelayedList+0x92>
    1998:	60 91 5e 31 	lds	r22, 0x315E	; 0x80315e <pxCurrentTCB>
    199c:	70 91 5f 31 	lds	r23, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    19a0:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <pxDelayedTaskList>
    19a4:	90 91 1b 31 	lds	r25, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    19a8:	6e 5f       	subi	r22, 0xFE	; 254
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	0e 94 2f 08 	call	0x105e	; 0x105e <vListInsert>
    19b0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    19b4:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    19b8:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    19bc:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    19c0:	c8 16       	cp	r12, r24
    19c2:	d9 06       	cpc	r13, r25
    19c4:	ea 06       	cpc	r14, r26
    19c6:	fb 06       	cpc	r15, r27
    19c8:	40 f4       	brcc	.+16     	; 0x19da <prvAddCurrentTaskToDelayedList+0x92>
    19ca:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    19ce:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    19d2:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    19d6:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	08 95       	ret

000019e4 <xTaskGenericCreate>:
    19e4:	4f 92       	push	r4
    19e6:	5f 92       	push	r5
    19e8:	6f 92       	push	r6
    19ea:	7f 92       	push	r7
    19ec:	8f 92       	push	r8
    19ee:	9f 92       	push	r9
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	5c 01       	movw	r10, r24
    1a06:	4b 01       	movw	r8, r22
    1a08:	3a 01       	movw	r6, r20
    1a0a:	29 01       	movw	r4, r18
    1a0c:	88 e2       	ldi	r24, 0x28	; 40
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    1a14:	ec 01       	movw	r28, r24
    1a16:	89 2b       	or	r24, r25
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <xTaskGenericCreate+0x38>
    1a1a:	d4 c0       	rjmp	.+424    	; 0x1bc4 <xTaskGenericCreate+0x1e0>
    1a1c:	c1 14       	cp	r12, r1
    1a1e:	d1 04       	cpc	r13, r1
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <xTaskGenericCreate+0x40>
    1a22:	cc c0       	rjmp	.+408    	; 0x1bbc <xTaskGenericCreate+0x1d8>
    1a24:	c3 01       	movw	r24, r6
    1a26:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    1a2a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a2c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <xTaskGenericCreate+0x56>
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 bb 07 	call	0xf76	; 0xf76 <vPortFree>
    1a38:	c5 c0       	rjmp	.+394    	; 0x1bc4 <xTaskGenericCreate+0x1e0>
    1a3a:	a3 01       	movw	r20, r6
    1a3c:	61 e1       	ldi	r22, 0x11	; 17
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <memset>
    1a44:	93 01       	movw	r18, r6
    1a46:	21 50       	subi	r18, 0x01	; 1
    1a48:	31 09       	sbc	r19, r1
    1a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4e:	3c 01       	movw	r6, r24
    1a50:	62 0e       	add	r6, r18
    1a52:	73 1e       	adc	r7, r19
    1a54:	4a e0       	ldi	r20, 0x0A	; 10
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	b4 01       	movw	r22, r8
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	4d 96       	adiw	r24, 0x1d	; 29
    1a5e:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <strncpy>
    1a62:	1e a2       	std	Y+38, r1	; 0x26
    1a64:	10 2f       	mov	r17, r16
    1a66:	04 30       	cpi	r16, 0x04	; 4
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <xTaskGenericCreate+0x88>
    1a6a:	13 e0       	ldi	r17, 0x03	; 3
    1a6c:	1a 8f       	std	Y+26, r17	; 0x1a
    1a6e:	1f a3       	std	Y+39, r17	; 0x27
    1a70:	6e 01       	movw	r12, r28
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	c2 0e       	add	r12, r18
    1a76:	d1 1c       	adc	r13, r1
    1a78:	c6 01       	movw	r24, r12
    1a7a:	0e 94 04 08 	call	0x1008	; 0x1008 <vListInitialiseItem>
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0e 96       	adiw	r24, 0x0e	; 14
    1a82:	0e 94 04 08 	call	0x1008	; 0x1008 <vListInitialiseItem>
    1a86:	ca 87       	std	Y+10, r28	; 0x0a
    1a88:	db 87       	std	Y+11, r29	; 0x0b
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	81 1b       	sub	r24, r17
    1a94:	91 09       	sbc	r25, r1
    1a96:	a1 09       	sbc	r26, r1
    1a98:	b1 09       	sbc	r27, r1
    1a9a:	8e 87       	std	Y+14, r24	; 0x0e
    1a9c:	9f 87       	std	Y+15, r25	; 0x0f
    1a9e:	a8 8b       	std	Y+16, r26	; 0x10
    1aa0:	b9 8b       	std	Y+17, r27	; 0x11
    1aa2:	ce 8b       	std	Y+22, r28	; 0x16
    1aa4:	df 8b       	std	Y+23, r29	; 0x17
    1aa6:	a2 01       	movw	r20, r4
    1aa8:	b5 01       	movw	r22, r10
    1aaa:	c3 01       	movw	r24, r6
    1aac:	0e 94 a0 08 	call	0x1140	; 0x1140 <pxPortInitialiseStack>
    1ab0:	88 83       	st	Y, r24
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	e1 14       	cp	r14, r1
    1ab6:	f1 04       	cpc	r15, r1
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <xTaskGenericCreate+0xdc>
    1aba:	f7 01       	movw	r30, r14
    1abc:	c0 83       	st	Z, r28
    1abe:	d1 83       	std	Z+1, r29	; 0x01
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	0f 92       	push	r0
    1ac6:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <uxCurrentNumberOfTasks>
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <uxCurrentNumberOfTasks>
    1ad0:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    1ad4:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1ad8:	89 2b       	or	r24, r25
    1ada:	89 f5       	brne	.+98     	; 0x1b3e <xTaskGenericCreate+0x15a>
    1adc:	c0 93 5e 31 	sts	0x315E, r28	; 0x80315e <pxCurrentTCB>
    1ae0:	d0 93 5f 31 	sts	0x315F, r29	; 0x80315f <pxCurrentTCB+0x1>
    1ae4:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <uxCurrentNumberOfTasks>
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	c1 f5       	brne	.+112    	; 0x1b5c <xTaskGenericCreate+0x178>
    1aec:	82 e3       	ldi	r24, 0x32	; 50
    1aee:	91 e3       	ldi	r25, 0x31	; 49
    1af0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1af4:	8d e3       	ldi	r24, 0x3D	; 61
    1af6:	91 e3       	ldi	r25, 0x31	; 49
    1af8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1afc:	88 e4       	ldi	r24, 0x48	; 72
    1afe:	91 e3       	ldi	r25, 0x31	; 49
    1b00:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1b04:	83 e5       	ldi	r24, 0x53	; 83
    1b06:	91 e3       	ldi	r25, 0x31	; 49
    1b08:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1b0c:	87 e2       	ldi	r24, 0x27	; 39
    1b0e:	91 e3       	ldi	r25, 0x31	; 49
    1b10:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1b14:	8c e1       	ldi	r24, 0x1C	; 28
    1b16:	91 e3       	ldi	r25, 0x31	; 49
    1b18:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1b1c:	8d e0       	ldi	r24, 0x0D	; 13
    1b1e:	91 e3       	ldi	r25, 0x31	; 49
    1b20:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInitialise>
    1b24:	87 e2       	ldi	r24, 0x27	; 39
    1b26:	91 e3       	ldi	r25, 0x31	; 49
    1b28:	80 93 1a 31 	sts	0x311A, r24	; 0x80311a <pxDelayedTaskList>
    1b2c:	90 93 1b 31 	sts	0x311B, r25	; 0x80311b <pxDelayedTaskList+0x1>
    1b30:	8c e1       	ldi	r24, 0x1C	; 28
    1b32:	91 e3       	ldi	r25, 0x31	; 49
    1b34:	80 93 18 31 	sts	0x3118, r24	; 0x803118 <pxOverflowDelayedTaskList>
    1b38:	90 93 19 31 	sts	0x3119, r25	; 0x803119 <pxOverflowDelayedTaskList+0x1>
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <xTaskGenericCreate+0x178>
    1b3e:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <xSchedulerRunning>
    1b42:	81 11       	cpse	r24, r1
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <xTaskGenericCreate+0x178>
    1b46:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    1b4a:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b50:	08 17       	cp	r16, r24
    1b52:	20 f0       	brcs	.+8      	; 0x1b5c <xTaskGenericCreate+0x178>
    1b54:	c0 93 5e 31 	sts	0x315E, r28	; 0x80315e <pxCurrentTCB>
    1b58:	d0 93 5f 31 	sts	0x315F, r29	; 0x80315f <pxCurrentTCB+0x1>
    1b5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b5e:	90 91 05 31 	lds	r25, 0x3105	; 0x803105 <uxTopUsedPriority>
    1b62:	98 17       	cp	r25, r24
    1b64:	10 f4       	brcc	.+4      	; 0x1b6a <xTaskGenericCreate+0x186>
    1b66:	80 93 05 31 	sts	0x3105, r24	; 0x803105 <uxTopUsedPriority>
    1b6a:	90 91 fe 30 	lds	r25, 0x30FE	; 0x8030fe <uxTaskNumber>
    1b6e:	9f 5f       	subi	r25, 0xFF	; 255
    1b70:	90 93 fe 30 	sts	0x30FE, r25	; 0x8030fe <uxTaskNumber>
    1b74:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    1b78:	98 17       	cp	r25, r24
    1b7a:	10 f4       	brcc	.+4      	; 0x1b80 <xTaskGenericCreate+0x19c>
    1b7c:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    1b80:	fb e0       	ldi	r31, 0x0B	; 11
    1b82:	8f 9f       	mul	r24, r31
    1b84:	c0 01       	movw	r24, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	b6 01       	movw	r22, r12
    1b8a:	8e 5c       	subi	r24, 0xCE	; 206
    1b8c:	9e 4c       	sbci	r25, 0xCE	; 206
    1b8e:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <xSchedulerRunning>
    1b9a:	88 23       	and	r24, r24
    1b9c:	59 f0       	breq	.+22     	; 0x1bb4 <xTaskGenericCreate+0x1d0>
    1b9e:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    1ba2:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ba8:	80 17       	cp	r24, r16
    1baa:	30 f4       	brcc	.+12     	; 0x1bb8 <xTaskGenericCreate+0x1d4>
    1bac:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	09 c0       	rjmp	.+18     	; 0x1bc6 <xTaskGenericCreate+0x1e2>
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <xTaskGenericCreate+0x1e2>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <xTaskGenericCreate+0x1e2>
    1bbc:	cb 8e       	std	Y+27, r12	; 0x1b
    1bbe:	dc 8e       	std	Y+28, r13	; 0x1c
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	3b cf       	rjmp	.-394    	; 0x1a3a <xTaskGenericCreate+0x56>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	9f 90       	pop	r9
    1bdc:	8f 90       	pop	r8
    1bde:	7f 90       	pop	r7
    1be0:	6f 90       	pop	r6
    1be2:	5f 90       	pop	r5
    1be4:	4f 90       	pop	r4
    1be6:	08 95       	ret

00001be8 <uxTaskPriorityGet>:
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	0f 92       	push	r0
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <uxTaskPriorityGet+0x12>
    1bf2:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    1bf6:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	fc 01       	movw	r30, r24
    1c00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c02:	08 95       	ret

00001c04 <vTaskStartScheduler>:
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	a1 2c       	mov	r10, r1
    1c14:	b1 2c       	mov	r11, r1
    1c16:	c1 2c       	mov	r12, r1
    1c18:	d1 2c       	mov	r13, r1
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	fb e0       	ldi	r31, 0x0B	; 11
    1c1e:	ef 2e       	mov	r14, r31
    1c20:	f1 e3       	ldi	r31, 0x31	; 49
    1c22:	ff 2e       	mov	r15, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	00 e0       	ldi	r16, 0x00	; 0
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	44 e6       	ldi	r20, 0x64	; 100
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	65 e6       	ldi	r22, 0x65	; 101
    1c32:	70 e2       	ldi	r23, 0x20	; 32
    1c34:	8c e9       	ldi	r24, 0x9C	; 156
    1c36:	9c e0       	ldi	r25, 0x0C	; 12
    1c38:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskGenericCreate>
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	69 f4       	brne	.+26     	; 0x1c5a <vTaskStartScheduler+0x56>
    1c40:	f8 94       	cli
    1c42:	80 93 03 31 	sts	0x3103, r24	; 0x803103 <xSchedulerRunning>
    1c46:	10 92 06 31 	sts	0x3106, r1	; 0x803106 <xTickCount>
    1c4a:	10 92 07 31 	sts	0x3107, r1	; 0x803107 <xTickCount+0x1>
    1c4e:	10 92 08 31 	sts	0x3108, r1	; 0x803108 <xTickCount+0x2>
    1c52:	10 92 09 31 	sts	0x3109, r1	; 0x803109 <xTickCount+0x3>
    1c56:	0e 94 16 09 	call	0x122c	; 0x122c <xPortStartScheduler>
    1c5a:	0f 91       	pop	r16
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	bf 90       	pop	r11
    1c66:	af 90       	pop	r10
    1c68:	08 95       	ret

00001c6a <vTaskSuspendAll>:
    1c6a:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <uxSchedulerSuspended>
    1c74:	08 95       	ret

00001c76 <xTaskGetTickCount>:
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	0f 92       	push	r0
    1c7c:	60 91 06 31 	lds	r22, 0x3106	; 0x803106 <xTickCount>
    1c80:	70 91 07 31 	lds	r23, 0x3107	; 0x803107 <xTickCount+0x1>
    1c84:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount+0x2>
    1c88:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x3>
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	08 95       	ret

00001c92 <pcTaskGetTaskName>:
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <pcTaskGetTaskName+0xc>
    1c96:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    1c9a:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1c9e:	4d 96       	adiw	r24, 0x1d	; 29
    1ca0:	08 95       	ret

00001ca2 <xTaskGetIdleTaskHandle>:
    1ca2:	80 91 0b 31 	lds	r24, 0x310B	; 0x80310b <xIdleTaskHandle>
    1ca6:	90 91 0c 31 	lds	r25, 0x310C	; 0x80310c <xIdleTaskHandle+0x1>
    1caa:	08 95       	ret

00001cac <vTaskIncrementTick>:
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    1cba:	81 11       	cpse	r24, r1
    1cbc:	ed c0       	rjmp	.+474    	; 0x1e98 <vTaskIncrementTick+0x1ec>
    1cbe:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    1cc2:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    1cc6:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    1cca:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	a1 1d       	adc	r26, r1
    1cd2:	b1 1d       	adc	r27, r1
    1cd4:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <xTickCount>
    1cd8:	90 93 07 31 	sts	0x3107, r25	; 0x803107 <xTickCount+0x1>
    1cdc:	a0 93 08 31 	sts	0x3108, r26	; 0x803108 <xTickCount+0x2>
    1ce0:	b0 93 09 31 	sts	0x3109, r27	; 0x803109 <xTickCount+0x3>
    1ce4:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    1ce8:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    1cec:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    1cf0:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    1cf4:	89 2b       	or	r24, r25
    1cf6:	8a 2b       	or	r24, r26
    1cf8:	8b 2b       	or	r24, r27
    1cfa:	f1 f5       	brne	.+124    	; 0x1d78 <vTaskIncrementTick+0xcc>
    1cfc:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <pxDelayedTaskList>
    1d00:	90 91 1b 31 	lds	r25, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1d04:	20 91 18 31 	lds	r18, 0x3118	; 0x803118 <pxOverflowDelayedTaskList>
    1d08:	30 91 19 31 	lds	r19, 0x3119	; 0x803119 <pxOverflowDelayedTaskList+0x1>
    1d0c:	20 93 1a 31 	sts	0x311A, r18	; 0x80311a <pxDelayedTaskList>
    1d10:	30 93 1b 31 	sts	0x311B, r19	; 0x80311b <pxDelayedTaskList+0x1>
    1d14:	80 93 18 31 	sts	0x3118, r24	; 0x803118 <pxOverflowDelayedTaskList>
    1d18:	90 93 19 31 	sts	0x3119, r25	; 0x803119 <pxOverflowDelayedTaskList+0x1>
    1d1c:	80 91 ff 30 	lds	r24, 0x30FF	; 0x8030ff <xNumOfOverflows>
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	80 93 ff 30 	sts	0x30FF, r24	; 0x8030ff <xNumOfOverflows>
    1d26:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1d2a:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1d2e:	80 81       	ld	r24, Z
    1d30:	81 11       	cpse	r24, r1
    1d32:	0c c0       	rjmp	.+24     	; 0x1d4c <vTaskIncrementTick+0xa0>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	dc 01       	movw	r26, r24
    1d3a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1d3e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1d42:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1d46:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <vTaskIncrementTick+0xcc>
    1d4c:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1d50:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1d54:	07 80       	ldd	r0, Z+7	; 0x07
    1d56:	f0 85       	ldd	r31, Z+8	; 0x08
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	00 84       	ldd	r0, Z+8	; 0x08
    1d5c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	a4 81       	ldd	r26, Z+4	; 0x04
    1d66:	b5 81       	ldd	r27, Z+5	; 0x05
    1d68:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1d6c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1d70:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1d74:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1d78:	40 91 06 31 	lds	r20, 0x3106	; 0x803106 <xTickCount>
    1d7c:	50 91 07 31 	lds	r21, 0x3107	; 0x803107 <xTickCount+0x1>
    1d80:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount+0x2>
    1d84:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x3>
    1d88:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    1d8c:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    1d90:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    1d94:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    1d98:	48 17       	cp	r20, r24
    1d9a:	59 07       	cpc	r21, r25
    1d9c:	6a 07       	cpc	r22, r26
    1d9e:	7b 07       	cpc	r23, r27
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <vTaskIncrementTick+0xf8>
    1da2:	7f c0       	rjmp	.+254    	; 0x1ea2 <vTaskIncrementTick+0x1f6>
    1da4:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1da8:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	f9 f0       	breq	.+62     	; 0x1df0 <vTaskIncrementTick+0x144>
    1db2:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1db6:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1dba:	07 80       	ldd	r0, Z+7	; 0x07
    1dbc:	f0 85       	ldd	r31, Z+8	; 0x08
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	c0 85       	ldd	r28, Z+8	; 0x08
    1dc2:	d1 85       	ldd	r29, Z+9	; 0x09
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	ac 81       	ldd	r26, Y+4	; 0x04
    1dca:	bd 81       	ldd	r27, Y+5	; 0x05
    1dcc:	40 91 06 31 	lds	r20, 0x3106	; 0x803106 <xTickCount>
    1dd0:	50 91 07 31 	lds	r21, 0x3107	; 0x803107 <xTickCount+0x1>
    1dd4:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount+0x2>
    1dd8:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x3>
    1ddc:	48 17       	cp	r20, r24
    1dde:	59 07       	cpc	r21, r25
    1de0:	6a 07       	cpc	r22, r26
    1de2:	7b 07       	cpc	r23, r27
    1de4:	58 f1       	brcs	.+86     	; 0x1e3c <vTaskIncrementTick+0x190>
    1de6:	0f 2e       	mov	r0, r31
    1de8:	fb e0       	ldi	r31, 0x0B	; 11
    1dea:	ff 2e       	mov	r15, r31
    1dec:	f0 2d       	mov	r31, r0
    1dee:	2f c0       	rjmp	.+94     	; 0x1e4e <vTaskIncrementTick+0x1a2>
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	dc 01       	movw	r26, r24
    1df6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1dfa:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1dfe:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1e02:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1e06:	4d c0       	rjmp	.+154    	; 0x1ea2 <vTaskIncrementTick+0x1f6>
    1e08:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1e0c:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1e10:	07 80       	ldd	r0, Z+7	; 0x07
    1e12:	f0 85       	ldd	r31, Z+8	; 0x08
    1e14:	e0 2d       	mov	r30, r0
    1e16:	c0 85       	ldd	r28, Z+8	; 0x08
    1e18:	d1 85       	ldd	r29, Z+9	; 0x09
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1e:	ac 81       	ldd	r26, Y+4	; 0x04
    1e20:	bd 81       	ldd	r27, Y+5	; 0x05
    1e22:	40 91 06 31 	lds	r20, 0x3106	; 0x803106 <xTickCount>
    1e26:	50 91 07 31 	lds	r21, 0x3107	; 0x803107 <xTickCount+0x1>
    1e2a:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount+0x2>
    1e2e:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x3>
    1e32:	48 17       	cp	r20, r24
    1e34:	59 07       	cpc	r21, r25
    1e36:	6a 07       	cpc	r22, r26
    1e38:	7b 07       	cpc	r23, r27
    1e3a:	48 f4       	brcc	.+18     	; 0x1e4e <vTaskIncrementTick+0x1a2>
    1e3c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1e40:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1e44:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1e48:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1e4c:	2a c0       	rjmp	.+84     	; 0x1ea2 <vTaskIncrementTick+0x1f6>
    1e4e:	8e 01       	movw	r16, r28
    1e50:	0e 5f       	subi	r16, 0xFE	; 254
    1e52:	1f 4f       	sbci	r17, 0xFF	; 255
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    1e5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e5e:	89 2b       	or	r24, r25
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <vTaskIncrementTick+0x1be>
    1e62:	ce 01       	movw	r24, r28
    1e64:	0e 96       	adiw	r24, 0x0e	; 14
    1e66:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    1e6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6c:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    1e70:	98 17       	cp	r25, r24
    1e72:	10 f4       	brcc	.+4      	; 0x1e78 <vTaskIncrementTick+0x1cc>
    1e74:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    1e78:	f8 9e       	mul	r15, r24
    1e7a:	c0 01       	movw	r24, r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	b8 01       	movw	r22, r16
    1e80:	8e 5c       	subi	r24, 0xCE	; 206
    1e82:	9e 4c       	sbci	r25, 0xCE	; 206
    1e84:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    1e88:	e0 91 1a 31 	lds	r30, 0x311A	; 0x80311a <pxDelayedTaskList>
    1e8c:	f0 91 1b 31 	lds	r31, 0x311B	; 0x80311b <pxDelayedTaskList+0x1>
    1e90:	80 81       	ld	r24, Z
    1e92:	81 11       	cpse	r24, r1
    1e94:	b9 cf       	rjmp	.-142    	; 0x1e08 <vTaskIncrementTick+0x15c>
    1e96:	ac cf       	rjmp	.-168    	; 0x1df0 <vTaskIncrementTick+0x144>
    1e98:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <uxMissedTicks>
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	80 93 01 31 	sts	0x3101, r24	; 0x803101 <uxMissedTicks>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	08 95       	ret

00001eae <xTaskResumeAll>:
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	0f 92       	push	r0
    1ec4:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    1ec8:	81 50       	subi	r24, 0x01	; 1
    1eca:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <uxSchedulerSuspended>
    1ece:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	60 c0       	rjmp	.+192    	; 0x1f96 <xTaskResumeAll+0xe8>
    1ed6:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <uxCurrentNumberOfTasks>
    1eda:	81 11       	cpse	r24, r1
    1edc:	2c c0       	rjmp	.+88     	; 0x1f36 <xTaskResumeAll+0x88>
    1ede:	5e c0       	rjmp	.+188    	; 0x1f9c <xTaskResumeAll+0xee>
    1ee0:	d7 01       	movw	r26, r14
    1ee2:	17 96       	adiw	r26, 0x07	; 7
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	fc 91       	ld	r31, X
    1ee8:	18 97       	sbiw	r26, 0x08	; 8
    1eea:	c0 85       	ldd	r28, Z+8	; 0x08
    1eec:	d1 85       	ldd	r29, Z+9	; 0x09
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0e 96       	adiw	r24, 0x0e	; 14
    1ef2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	0e 5f       	subi	r16, 0xFE	; 254
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    1f02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f04:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    1f08:	98 17       	cp	r25, r24
    1f0a:	10 f4       	brcc	.+4      	; 0x1f10 <xTaskResumeAll+0x62>
    1f0c:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    1f10:	d8 9e       	mul	r13, r24
    1f12:	c0 01       	movw	r24, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	b8 01       	movw	r22, r16
    1f18:	8e 5c       	subi	r24, 0xCE	; 206
    1f1a:	9e 4c       	sbci	r25, 0xCE	; 206
    1f1c:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    1f20:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    1f24:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    1f28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f2c:	98 17       	cp	r25, r24
    1f2e:	70 f0       	brcs	.+28     	; 0x1f4c <xTaskResumeAll+0x9e>
    1f30:	cc 24       	eor	r12, r12
    1f32:	c3 94       	inc	r12
    1f34:	0b c0       	rjmp	.+22     	; 0x1f4c <xTaskResumeAll+0x9e>
    1f36:	c1 2c       	mov	r12, r1
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	fd e0       	ldi	r31, 0x0D	; 13
    1f3c:	ef 2e       	mov	r14, r31
    1f3e:	f1 e3       	ldi	r31, 0x31	; 49
    1f40:	ff 2e       	mov	r15, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	0f 2e       	mov	r0, r31
    1f46:	fb e0       	ldi	r31, 0x0B	; 11
    1f48:	df 2e       	mov	r13, r31
    1f4a:	f0 2d       	mov	r31, r0
    1f4c:	f7 01       	movw	r30, r14
    1f4e:	80 81       	ld	r24, Z
    1f50:	81 11       	cpse	r24, r1
    1f52:	c6 cf       	rjmp	.-116    	; 0x1ee0 <xTaskResumeAll+0x32>
    1f54:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <uxMissedTicks>
    1f58:	88 23       	and	r24, r24
    1f5a:	81 f0       	breq	.+32     	; 0x1f7c <xTaskResumeAll+0xce>
    1f5c:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <uxMissedTicks>
    1f60:	88 23       	and	r24, r24
    1f62:	99 f0       	breq	.+38     	; 0x1f8a <xTaskResumeAll+0xdc>
    1f64:	0e 94 56 0e 	call	0x1cac	; 0x1cac <vTaskIncrementTick>
    1f68:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <uxMissedTicks>
    1f6c:	81 50       	subi	r24, 0x01	; 1
    1f6e:	80 93 01 31 	sts	0x3101, r24	; 0x803101 <uxMissedTicks>
    1f72:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <uxMissedTicks>
    1f76:	81 11       	cpse	r24, r1
    1f78:	f5 cf       	rjmp	.-22     	; 0x1f64 <xTaskResumeAll+0xb6>
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <xTaskResumeAll+0xdc>
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	cf 16       	cp	r12, r31
    1f80:	21 f0       	breq	.+8      	; 0x1f8a <xTaskResumeAll+0xdc>
    1f82:	80 91 00 31 	lds	r24, 0x3100	; 0x803100 <xMissedYield>
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	41 f4       	brne	.+16     	; 0x1f9a <xTaskResumeAll+0xec>
    1f8a:	10 92 00 31 	sts	0x3100, r1	; 0x803100 <xMissedYield>
    1f8e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <xTaskResumeAll+0xee>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <xTaskResumeAll+0xee>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	08 95       	ret

00001fb2 <vTaskDelayUntil>:
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	ec 01       	movw	r28, r24
    1fc0:	6a 01       	movw	r12, r20
    1fc2:	7b 01       	movw	r14, r22
    1fc4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
    1fc8:	88 81       	ld	r24, Y
    1fca:	99 81       	ldd	r25, Y+1	; 0x01
    1fcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1fce:	bb 81       	ldd	r27, Y+3	; 0x03
    1fd0:	c8 0e       	add	r12, r24
    1fd2:	d9 1e       	adc	r13, r25
    1fd4:	ea 1e       	adc	r14, r26
    1fd6:	fb 1e       	adc	r15, r27
    1fd8:	40 91 06 31 	lds	r20, 0x3106	; 0x803106 <xTickCount>
    1fdc:	50 91 07 31 	lds	r21, 0x3107	; 0x803107 <xTickCount+0x1>
    1fe0:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount+0x2>
    1fe4:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x3>
    1fe8:	48 17       	cp	r20, r24
    1fea:	59 07       	cpc	r21, r25
    1fec:	6a 07       	cpc	r22, r26
    1fee:	7b 07       	cpc	r23, r27
    1ff0:	b8 f4       	brcc	.+46     	; 0x2020 <vTaskDelayUntil+0x6e>
    1ff2:	c8 16       	cp	r12, r24
    1ff4:	d9 06       	cpc	r13, r25
    1ff6:	ea 06       	cpc	r14, r26
    1ff8:	fb 06       	cpc	r15, r27
    1ffa:	e0 f5       	brcc	.+120    	; 0x2074 <vTaskDelayUntil+0xc2>
    1ffc:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    2000:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    2004:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    2008:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    200c:	c8 82       	st	Y, r12
    200e:	d9 82       	std	Y+1, r13	; 0x01
    2010:	ea 82       	std	Y+2, r14	; 0x02
    2012:	fb 82       	std	Y+3, r15	; 0x03
    2014:	8c 15       	cp	r24, r12
    2016:	9d 05       	cpc	r25, r13
    2018:	ae 05       	cpc	r26, r14
    201a:	bf 05       	cpc	r27, r15
    201c:	f8 f4       	brcc	.+62     	; 0x205c <vTaskDelayUntil+0xaa>
    201e:	13 c0       	rjmp	.+38     	; 0x2046 <vTaskDelayUntil+0x94>
    2020:	c8 16       	cp	r12, r24
    2022:	d9 06       	cpc	r13, r25
    2024:	ea 06       	cpc	r14, r26
    2026:	fb 06       	cpc	r15, r27
    2028:	00 f1       	brcs	.+64     	; 0x206a <vTaskDelayUntil+0xb8>
    202a:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    202e:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    2032:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    2036:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    203a:	8c 15       	cp	r24, r12
    203c:	9d 05       	cpc	r25, r13
    203e:	ae 05       	cpc	r26, r14
    2040:	bf 05       	cpc	r27, r15
    2042:	98 f0       	brcs	.+38     	; 0x206a <vTaskDelayUntil+0xb8>
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <vTaskDelayUntil+0xc2>
    2046:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    204a:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    204e:	02 96       	adiw	r24, 0x02	; 2
    2050:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    2054:	c7 01       	movw	r24, r14
    2056:	b6 01       	movw	r22, r12
    2058:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvAddCurrentTaskToDelayedList>
    205c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    2060:	81 11       	cpse	r24, r1
    2062:	0d c0       	rjmp	.+26     	; 0x207e <vTaskDelayUntil+0xcc>
    2064:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    2068:	0a c0       	rjmp	.+20     	; 0x207e <vTaskDelayUntil+0xcc>
    206a:	c8 82       	st	Y, r12
    206c:	d9 82       	std	Y+1, r13	; 0x01
    206e:	ea 82       	std	Y+2, r14	; 0x02
    2070:	fb 82       	std	Y+3, r15	; 0x03
    2072:	e9 cf       	rjmp	.-46     	; 0x2046 <vTaskDelayUntil+0x94>
    2074:	c8 82       	st	Y, r12
    2076:	d9 82       	std	Y+1, r13	; 0x01
    2078:	ea 82       	std	Y+2, r14	; 0x02
    207a:	fb 82       	std	Y+3, r15	; 0x03
    207c:	ef cf       	rjmp	.-34     	; 0x205c <vTaskDelayUntil+0xaa>
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	08 95       	ret

0000208c <vTaskDelay>:
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	6b 01       	movw	r12, r22
    2096:	7c 01       	movw	r14, r24
    2098:	67 2b       	or	r22, r23
    209a:	68 2b       	or	r22, r24
    209c:	69 2b       	or	r22, r25
    209e:	e9 f0       	breq	.+58     	; 0x20da <vTaskDelay+0x4e>
    20a0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
    20a4:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    20a8:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    20ac:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    20b0:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    20b4:	c8 0e       	add	r12, r24
    20b6:	d9 1e       	adc	r13, r25
    20b8:	ea 1e       	adc	r14, r26
    20ba:	fb 1e       	adc	r15, r27
    20bc:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    20c0:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    20c4:	02 96       	adiw	r24, 0x02	; 2
    20c6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    20ca:	c7 01       	movw	r24, r14
    20cc:	b6 01       	movw	r22, r12
    20ce:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvAddCurrentTaskToDelayedList>
    20d2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <xTaskResumeAll>
    20d6:	81 11       	cpse	r24, r1
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <vTaskDelay+0x52>
    20da:	0e 94 54 09 	call	0x12a8	; 0x12a8 <vPortYield>
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <vTaskSwitchContext>:
    20e8:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    20ec:	81 11       	cpse	r24, r1
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <vTaskSwitchContext+0x20>
    20f0:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <uxTopReadyPriority>
    20f4:	4b e0       	ldi	r20, 0x0B	; 11
    20f6:	e4 9f       	mul	r30, r20
    20f8:	f0 01       	movw	r30, r0
    20fa:	11 24       	eor	r1, r1
    20fc:	ee 5c       	subi	r30, 0xCE	; 206
    20fe:	fe 4c       	sbci	r31, 0xCE	; 206
    2100:	80 81       	ld	r24, Z
    2102:	88 23       	and	r24, r24
    2104:	29 f0       	breq	.+10     	; 0x2110 <vTaskSwitchContext+0x28>
    2106:	14 c0       	rjmp	.+40     	; 0x2130 <vTaskSwitchContext+0x48>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	80 93 00 31 	sts	0x3100, r24	; 0x803100 <xMissedYield>
    210e:	08 95       	ret
    2110:	9b e0       	ldi	r25, 0x0B	; 11
    2112:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxTopReadyPriority>
    2116:	81 50       	subi	r24, 0x01	; 1
    2118:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    211c:	e0 91 04 31 	lds	r30, 0x3104	; 0x803104 <uxTopReadyPriority>
    2120:	9e 9f       	mul	r25, r30
    2122:	f0 01       	movw	r30, r0
    2124:	11 24       	eor	r1, r1
    2126:	ee 5c       	subi	r30, 0xCE	; 206
    2128:	fe 4c       	sbci	r31, 0xCE	; 206
    212a:	80 81       	ld	r24, Z
    212c:	88 23       	and	r24, r24
    212e:	89 f3       	breq	.-30     	; 0x2112 <vTaskSwitchContext+0x2a>
    2130:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxTopReadyPriority>
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4b e0       	ldi	r20, 0x0B	; 11
    213a:	84 9f       	mul	r24, r20
    213c:	c0 01       	movw	r24, r0
    213e:	11 24       	eor	r1, r1
    2140:	dc 01       	movw	r26, r24
    2142:	ae 5c       	subi	r26, 0xCE	; 206
    2144:	be 4c       	sbci	r27, 0xCE	; 206
    2146:	11 96       	adiw	r26, 0x01	; 1
    2148:	ed 91       	ld	r30, X+
    214a:	fc 91       	ld	r31, X
    214c:	12 97       	sbiw	r26, 0x02	; 2
    214e:	04 80       	ldd	r0, Z+4	; 0x04
    2150:	f5 81       	ldd	r31, Z+5	; 0x05
    2152:	e0 2d       	mov	r30, r0
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	ed 93       	st	X+, r30
    2158:	fc 93       	st	X, r31
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	8b 5c       	subi	r24, 0xCB	; 203
    215e:	9e 4c       	sbci	r25, 0xCE	; 206
    2160:	e8 17       	cp	r30, r24
    2162:	f9 07       	cpc	r31, r25
    2164:	61 f4       	brne	.+24     	; 0x217e <vTaskSwitchContext+0x96>
    2166:	84 81       	ldd	r24, Z+4	; 0x04
    2168:	95 81       	ldd	r25, Z+5	; 0x05
    216a:	4b e0       	ldi	r20, 0x0B	; 11
    216c:	42 9f       	mul	r20, r18
    216e:	f0 01       	movw	r30, r0
    2170:	43 9f       	mul	r20, r19
    2172:	f0 0d       	add	r31, r0
    2174:	11 24       	eor	r1, r1
    2176:	ee 5c       	subi	r30, 0xCE	; 206
    2178:	fe 4c       	sbci	r31, 0xCE	; 206
    217a:	81 83       	std	Z+1, r24	; 0x01
    217c:	92 83       	std	Z+2, r25	; 0x02
    217e:	8b e0       	ldi	r24, 0x0B	; 11
    2180:	82 9f       	mul	r24, r18
    2182:	f0 01       	movw	r30, r0
    2184:	83 9f       	mul	r24, r19
    2186:	f0 0d       	add	r31, r0
    2188:	11 24       	eor	r1, r1
    218a:	ee 5c       	subi	r30, 0xCE	; 206
    218c:	fe 4c       	sbci	r31, 0xCE	; 206
    218e:	01 80       	ldd	r0, Z+1	; 0x01
    2190:	f2 81       	ldd	r31, Z+2	; 0x02
    2192:	e0 2d       	mov	r30, r0
    2194:	80 85       	ldd	r24, Z+8	; 0x08
    2196:	91 85       	ldd	r25, Z+9	; 0x09
    2198:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <pxCurrentTCB>
    219c:	90 93 5f 31 	sts	0x315F, r25	; 0x80315f <pxCurrentTCB+0x1>
    21a0:	08 95       	ret

000021a2 <vTaskPlaceOnEventList>:
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	6a 01       	movw	r12, r20
    21ac:	7b 01       	movw	r14, r22
    21ae:	60 91 5e 31 	lds	r22, 0x315E	; 0x80315e <pxCurrentTCB>
    21b2:	70 91 5f 31 	lds	r23, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    21b6:	62 5f       	subi	r22, 0xF2	; 242
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	0e 94 2f 08 	call	0x105e	; 0x105e <vListInsert>
    21be:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    21c2:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    21c6:	02 96       	adiw	r24, 0x02	; 2
    21c8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    21cc:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    21d0:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    21d4:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    21d8:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	6c 0d       	add	r22, r12
    21e2:	7d 1d       	adc	r23, r13
    21e4:	8e 1d       	adc	r24, r14
    21e6:	9f 1d       	adc	r25, r15
    21e8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prvAddCurrentTaskToDelayedList>
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	08 95       	ret

000021f6 <xTaskRemoveFromEventList>:
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	dc 01       	movw	r26, r24
    2200:	17 96       	adiw	r26, 0x07	; 7
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	18 97       	sbiw	r26, 0x08	; 8
    2208:	c0 85       	ldd	r28, Z+8	; 0x08
    220a:	d1 85       	ldd	r29, Z+9	; 0x09
    220c:	8e 01       	movw	r16, r28
    220e:	02 5f       	subi	r16, 0xF2	; 242
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	c8 01       	movw	r24, r16
    2214:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    2218:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <uxSchedulerSuspended>
    221c:	81 11       	cpse	r24, r1
    221e:	16 c0       	rjmp	.+44     	; 0x224c <xTaskRemoveFromEventList+0x56>
    2220:	0c 50       	subi	r16, 0x0C	; 12
    2222:	11 09       	sbc	r17, r1
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    222a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    222c:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    2230:	98 17       	cp	r25, r24
    2232:	10 f4       	brcc	.+4      	; 0x2238 <xTaskRemoveFromEventList+0x42>
    2234:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    2238:	bb e0       	ldi	r27, 0x0B	; 11
    223a:	8b 9f       	mul	r24, r27
    223c:	c0 01       	movw	r24, r0
    223e:	11 24       	eor	r1, r1
    2240:	b8 01       	movw	r22, r16
    2242:	8e 5c       	subi	r24, 0xCE	; 206
    2244:	9e 4c       	sbci	r25, 0xCE	; 206
    2246:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <xTaskRemoveFromEventList+0x60>
    224c:	b8 01       	movw	r22, r16
    224e:	8d e0       	ldi	r24, 0x0D	; 13
    2250:	91 e3       	ldi	r25, 0x31	; 49
    2252:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    2256:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    225a:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2262:	92 8d       	ldd	r25, Z+26	; 0x1a
    2264:	29 17       	cp	r18, r25
    2266:	08 f4       	brcc	.+2      	; 0x226a <xTaskRemoveFromEventList+0x74>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	08 95       	ret

00002274 <vTaskSetTimeOutState>:
    2274:	20 91 ff 30 	lds	r18, 0x30FF	; 0x8030ff <xNumOfOverflows>
    2278:	fc 01       	movw	r30, r24
    227a:	20 83       	st	Z, r18
    227c:	40 91 06 31 	lds	r20, 0x3106	; 0x803106 <xTickCount>
    2280:	50 91 07 31 	lds	r21, 0x3107	; 0x803107 <xTickCount+0x1>
    2284:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount+0x2>
    2288:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x3>
    228c:	41 83       	std	Z+1, r20	; 0x01
    228e:	52 83       	std	Z+2, r21	; 0x02
    2290:	63 83       	std	Z+3, r22	; 0x03
    2292:	74 83       	std	Z+4, r23	; 0x04
    2294:	08 95       	ret

00002296 <xTaskCheckForTimeOut>:
    2296:	8f 92       	push	r8
    2298:	9f 92       	push	r9
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	fc 01       	movw	r30, r24
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	0f 92       	push	r0
    22b6:	80 91 ff 30 	lds	r24, 0x30FF	; 0x8030ff <xNumOfOverflows>
    22ba:	90 81       	ld	r25, Z
    22bc:	98 17       	cp	r25, r24
    22be:	89 f0       	breq	.+34     	; 0x22e2 <xTaskCheckForTimeOut+0x4c>
    22c0:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    22c4:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    22c8:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    22cc:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    22d0:	01 81       	ldd	r16, Z+1	; 0x01
    22d2:	12 81       	ldd	r17, Z+2	; 0x02
    22d4:	23 81       	ldd	r18, Z+3	; 0x03
    22d6:	34 81       	ldd	r19, Z+4	; 0x04
    22d8:	80 17       	cp	r24, r16
    22da:	91 07       	cpc	r25, r17
    22dc:	a2 07       	cpc	r26, r18
    22de:	b3 07       	cpc	r27, r19
    22e0:	a8 f5       	brcc	.+106    	; 0x234c <xTaskCheckForTimeOut+0xb6>
    22e2:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <xTickCount>
    22e6:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <xTickCount+0x1>
    22ea:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <xTickCount+0x2>
    22ee:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <xTickCount+0x3>
    22f2:	c1 80       	ldd	r12, Z+1	; 0x01
    22f4:	d2 80       	ldd	r13, Z+2	; 0x02
    22f6:	e3 80       	ldd	r14, Z+3	; 0x03
    22f8:	f4 80       	ldd	r15, Z+4	; 0x04
    22fa:	eb 01       	movw	r28, r22
    22fc:	08 81       	ld	r16, Y
    22fe:	19 81       	ldd	r17, Y+1	; 0x01
    2300:	2a 81       	ldd	r18, Y+2	; 0x02
    2302:	3b 81       	ldd	r19, Y+3	; 0x03
    2304:	8c 19       	sub	r24, r12
    2306:	9d 09       	sbc	r25, r13
    2308:	ae 09       	sbc	r26, r14
    230a:	bf 09       	sbc	r27, r15
    230c:	80 17       	cp	r24, r16
    230e:	91 07       	cpc	r25, r17
    2310:	a2 07       	cpc	r26, r18
    2312:	b3 07       	cpc	r27, r19
    2314:	e8 f4       	brcc	.+58     	; 0x2350 <xTaskCheckForTimeOut+0xba>
    2316:	cf 01       	movw	r24, r30
    2318:	80 90 06 31 	lds	r8, 0x3106	; 0x803106 <xTickCount>
    231c:	90 90 07 31 	lds	r9, 0x3107	; 0x803107 <xTickCount+0x1>
    2320:	a0 90 08 31 	lds	r10, 0x3108	; 0x803108 <xTickCount+0x2>
    2324:	b0 90 09 31 	lds	r11, 0x3109	; 0x803109 <xTickCount+0x3>
    2328:	b5 01       	movw	r22, r10
    232a:	a4 01       	movw	r20, r8
    232c:	4c 19       	sub	r20, r12
    232e:	5d 09       	sbc	r21, r13
    2330:	6e 09       	sbc	r22, r14
    2332:	7f 09       	sbc	r23, r15
    2334:	04 1b       	sub	r16, r20
    2336:	15 0b       	sbc	r17, r21
    2338:	26 0b       	sbc	r18, r22
    233a:	37 0b       	sbc	r19, r23
    233c:	08 83       	st	Y, r16
    233e:	19 83       	std	Y+1, r17	; 0x01
    2340:	2a 83       	std	Y+2, r18	; 0x02
    2342:	3b 83       	std	Y+3, r19	; 0x03
    2344:	0e 94 3a 11 	call	0x2274	; 0x2274 <vTaskSetTimeOutState>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	03 c0       	rjmp	.+6      	; 0x2352 <xTaskCheckForTimeOut+0xbc>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <xTaskCheckForTimeOut+0xbc>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	0f 90       	pop	r0
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	af 90       	pop	r10
    236a:	9f 90       	pop	r9
    236c:	8f 90       	pop	r8
    236e:	08 95       	ret

00002370 <vTaskMissedYield>:
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 00 31 	sts	0x3100, r24	; 0x803100 <xMissedYield>
    2376:	08 95       	ret

00002378 <uxTaskGetStackHighWaterMark>:
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	21 f4       	brne	.+8      	; 0x2384 <uxTaskGetStackHighWaterMark+0xc>
    237c:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    2380:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    2384:	dc 01       	movw	r26, r24
    2386:	5b 96       	adiw	r26, 0x1b	; 27
    2388:	ed 91       	ld	r30, X+
    238a:	fc 91       	ld	r31, X
    238c:	5c 97       	sbiw	r26, 0x1c	; 28
    238e:	80 81       	ld	r24, Z
    2390:	81 31       	cpi	r24, 0x11	; 17
    2392:	41 f4       	brne	.+16     	; 0x23a4 <uxTaskGetStackHighWaterMark+0x2c>
    2394:	31 96       	adiw	r30, 0x01	; 1
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	21 91       	ld	r18, Z+
    239e:	21 31       	cpi	r18, 0x11	; 17
    23a0:	e1 f3       	breq	.-8      	; 0x239a <uxTaskGetStackHighWaterMark+0x22>
    23a2:	08 95       	ret
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	08 95       	ret

000023aa <xTaskGetCurrentTaskHandle>:
    23aa:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <pxCurrentTCB>
    23ae:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    23b2:	08 95       	ret

000023b4 <vTaskPriorityInherit>:
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	fc 01       	movw	r30, r24
    23be:	22 8d       	ldd	r18, Z+26	; 0x1a
    23c0:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    23c4:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    23c8:	5a 96       	adiw	r26, 0x1a	; 26
    23ca:	8c 91       	ld	r24, X
    23cc:	28 17       	cp	r18, r24
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <vTaskPriorityInherit+0x1e>
    23d0:	41 c0       	rjmp	.+130    	; 0x2454 <vTaskPriorityInherit+0xa0>
    23d2:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    23d6:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    23da:	5a 96       	adiw	r26, 0x1a	; 26
    23dc:	3c 91       	ld	r19, X
    23de:	84 e0       	ldi	r24, 0x04	; 4
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e0       	ldi	r26, 0x00	; 0
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	83 1b       	sub	r24, r19
    23e8:	91 09       	sbc	r25, r1
    23ea:	a1 09       	sbc	r26, r1
    23ec:	b1 09       	sbc	r27, r1
    23ee:	86 87       	std	Z+14, r24	; 0x0e
    23f0:	97 87       	std	Z+15, r25	; 0x0f
    23f2:	a0 8b       	std	Z+16, r26	; 0x10
    23f4:	b1 8b       	std	Z+17, r27	; 0x11
    23f6:	8b e0       	ldi	r24, 0x0B	; 11
    23f8:	28 9f       	mul	r18, r24
    23fa:	90 01       	movw	r18, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	2e 5c       	subi	r18, 0xCE	; 206
    2400:	3e 4c       	sbci	r19, 0xCE	; 206
    2402:	84 85       	ldd	r24, Z+12	; 0x0c
    2404:	95 85       	ldd	r25, Z+13	; 0x0d
    2406:	82 17       	cp	r24, r18
    2408:	93 07       	cpc	r25, r19
    240a:	e9 f4       	brne	.+58     	; 0x2446 <vTaskPriorityInherit+0x92>
    240c:	8f 01       	movw	r16, r30
    240e:	ef 01       	movw	r28, r30
    2410:	22 96       	adiw	r28, 0x02	; 2
    2412:	ce 01       	movw	r24, r28
    2414:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    2418:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <pxCurrentTCB>
    241c:	f0 91 5f 31 	lds	r31, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    2420:	82 8d       	ldd	r24, Z+26	; 0x1a
    2422:	f8 01       	movw	r30, r16
    2424:	82 8f       	std	Z+26, r24	; 0x1a
    2426:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    242a:	98 17       	cp	r25, r24
    242c:	10 f4       	brcc	.+4      	; 0x2432 <vTaskPriorityInherit+0x7e>
    242e:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    2432:	fb e0       	ldi	r31, 0x0B	; 11
    2434:	8f 9f       	mul	r24, r31
    2436:	c0 01       	movw	r24, r0
    2438:	11 24       	eor	r1, r1
    243a:	be 01       	movw	r22, r28
    243c:	8e 5c       	subi	r24, 0xCE	; 206
    243e:	9e 4c       	sbci	r25, 0xCE	; 206
    2440:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <vTaskPriorityInherit+0xa0>
    2446:	a0 91 5e 31 	lds	r26, 0x315E	; 0x80315e <pxCurrentTCB>
    244a:	b0 91 5f 31 	lds	r27, 0x315F	; 0x80315f <pxCurrentTCB+0x1>
    244e:	5a 96       	adiw	r26, 0x1a	; 26
    2450:	8c 91       	ld	r24, X
    2452:	82 8f       	std	Z+26, r24	; 0x1a
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <vTaskPriorityDisinherit>:
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	49 f1       	breq	.+82     	; 0x24bc <vTaskPriorityDisinherit+0x5e>
    246a:	fc 01       	movw	r30, r24
    246c:	32 8d       	ldd	r19, Z+26	; 0x1a
    246e:	27 a1       	ldd	r18, Z+39	; 0x27
    2470:	32 17       	cp	r19, r18
    2472:	21 f1       	breq	.+72     	; 0x24bc <vTaskPriorityDisinherit+0x5e>
    2474:	ec 01       	movw	r28, r24
    2476:	8c 01       	movw	r16, r24
    2478:	0e 5f       	subi	r16, 0xFE	; 254
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	c8 01       	movw	r24, r16
    247e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <vListRemove>
    2482:	8f a1       	ldd	r24, Y+39	; 0x27
    2484:	8a 8f       	std	Y+26, r24	; 0x1a
    2486:	44 e0       	ldi	r20, 0x04	; 4
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	48 1b       	sub	r20, r24
    2490:	51 09       	sbc	r21, r1
    2492:	61 09       	sbc	r22, r1
    2494:	71 09       	sbc	r23, r1
    2496:	4e 87       	std	Y+14, r20	; 0x0e
    2498:	5f 87       	std	Y+15, r21	; 0x0f
    249a:	68 8b       	std	Y+16, r22	; 0x10
    249c:	79 8b       	std	Y+17, r23	; 0x11
    249e:	90 91 04 31 	lds	r25, 0x3104	; 0x803104 <uxTopReadyPriority>
    24a2:	98 17       	cp	r25, r24
    24a4:	10 f4       	brcc	.+4      	; 0x24aa <vTaskPriorityDisinherit+0x4c>
    24a6:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxTopReadyPriority>
    24aa:	fb e0       	ldi	r31, 0x0B	; 11
    24ac:	8f 9f       	mul	r24, r31
    24ae:	c0 01       	movw	r24, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	b8 01       	movw	r22, r16
    24b4:	8e 5c       	subi	r24, 0xCE	; 206
    24b6:	9e 4c       	sbci	r25, 0xCE	; 206
    24b8:	0e 94 08 08 	call	0x1010	; 0x1010 <vListInsertEnd>
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	08 95       	ret

000024c6 <_ZN8frt_task22_call_users_run_methodEPS_>:
    24c6:	ec 01       	movw	r28, r24
    24c8:	e8 81       	ld	r30, Y
    24ca:	f9 81       	ldd	r31, Y+1	; 0x01
    24cc:	01 90       	ld	r0, Z+
    24ce:	f0 81       	ld	r31, Z
    24d0:	e0 2d       	mov	r30, r0
    24d2:	19 95       	eicall
    24d4:	1a 82       	std	Y+2, r1	; 0x02
    24d6:	1b 82       	std	Y+3, r1	; 0x03
    24d8:	6f ef       	ldi	r22, 0xFF	; 255
    24da:	7f ef       	ldi	r23, 0xFF	; 255
    24dc:	cb 01       	movw	r24, r22
    24de:	0e 94 46 10 	call	0x208c	; 0x208c <vTaskDelay>
    24e2:	fa cf       	rjmp	.-12     	; 0x24d8 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

000024e4 <_ZN8frt_task13transition_toEh>:
    24e4:	fc 01       	movw	r30, r24
    24e6:	64 87       	std	Z+12, r22	; 0x0c
    24e8:	65 87       	std	Z+13, r22	; 0x0d
    24ea:	08 95       	ret

000024ec <_ZN8frt_taskC1EPKchjP8emstream>:
    24ec:	4f 92       	push	r4
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	2a 97       	sbiw	r28, 0x0a	; 10
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	4c 01       	movw	r8, r24
    2518:	29 01       	movw	r4, r18
    251a:	38 01       	movw	r6, r16
    251c:	8e e6       	ldi	r24, 0x6E	; 110
    251e:	90 e2       	ldi	r25, 0x20	; 32
    2520:	f4 01       	movw	r30, r8
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	fb 01       	movw	r30, r22
    2528:	80 81       	ld	r24, Z
    252a:	88 23       	and	r24, r24
    252c:	69 f0       	breq	.+26     	; 0x2548 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    252e:	de 01       	movw	r26, r28
    2530:	11 96       	adiw	r26, 0x01	; 1
    2532:	31 96       	adiw	r30, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 c0       	rjmp	.+4      	; 0x253c <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    2538:	99 30       	cpi	r25, 0x09	; 9
    253a:	39 f0       	breq	.+14     	; 0x254a <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    253c:	9f 5f       	subi	r25, 0xFF	; 255
    253e:	8d 93       	st	X+, r24
    2540:	81 91       	ld	r24, Z+
    2542:	81 11       	cpse	r24, r1
    2544:	f9 cf       	rjmp	.-14     	; 0x2538 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    2546:	01 c0       	rjmp	.+2      	; 0x254a <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	e1 e0       	ldi	r30, 0x01	; 1
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	ec 0f       	add	r30, r28
    2550:	fd 1f       	adc	r31, r29
    2552:	e9 0f       	add	r30, r25
    2554:	f1 1d       	adc	r31, r1
    2556:	10 82       	st	Z, r1
    2558:	74 01       	movw	r14, r8
    255a:	f2 e0       	ldi	r31, 0x02	; 2
    255c:	ef 0e       	add	r14, r31
    255e:	f1 1c       	adc	r15, r1
    2560:	a1 2c       	mov	r10, r1
    2562:	b1 2c       	mov	r11, r1
    2564:	c1 2c       	mov	r12, r1
    2566:	d1 2c       	mov	r13, r1
    2568:	04 2f       	mov	r16, r20
    256a:	94 01       	movw	r18, r8
    256c:	a2 01       	movw	r20, r4
    256e:	be 01       	movw	r22, r28
    2570:	6f 5f       	subi	r22, 0xFF	; 255
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	86 ea       	ldi	r24, 0xA6	; 166
    2576:	92 e0       	ldi	r25, 0x02	; 2
    2578:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <xTaskGenericCreate>
    257c:	f4 01       	movw	r30, r8
    257e:	66 82       	std	Z+6, r6	; 0x06
    2580:	77 82       	std	Z+7, r7	; 0x07
    2582:	40 86       	std	Z+8, r4	; 0x08
    2584:	51 86       	std	Z+9, r5	; 0x09
    2586:	20 91 60 31 	lds	r18, 0x3160	; 0x803160 <last_created_task_pointer>
    258a:	30 91 61 31 	lds	r19, 0x3161	; 0x803161 <last_created_task_pointer+0x1>
    258e:	24 83       	std	Z+4, r18	; 0x04
    2590:	35 83       	std	Z+5, r19	; 0x05
    2592:	80 92 60 31 	sts	0x3160, r8	; 0x803160 <last_created_task_pointer>
    2596:	90 92 61 31 	sts	0x3161, r9	; 0x803161 <last_created_task_pointer+0x1>
    259a:	14 86       	std	Z+12, r1	; 0x0c
    259c:	15 86       	std	Z+13, r1	; 0x0d
    259e:	40 90 94 31 	lds	r4, 0x3194	; 0x803194 <portStackTopForTask>
    25a2:	50 90 95 31 	lds	r5, 0x3195	; 0x803195 <portStackTopForTask+0x1>
    25a6:	ff ef       	ldi	r31, 0xFF	; 255
    25a8:	4f 1a       	sub	r4, r31
    25aa:	5f 0a       	sbc	r5, r31
    25ac:	40 92 94 31 	sts	0x3194, r4	; 0x803194 <portStackTopForTask>
    25b0:	50 92 95 31 	sts	0x3195, r5	; 0x803195 <portStackTopForTask+0x1>
    25b4:	f4 01       	movw	r30, r8
    25b6:	42 86       	std	Z+10, r4	; 0x0a
    25b8:	53 86       	std	Z+11, r5	; 0x0b
    25ba:	16 86       	std	Z+14, r1	; 0x0e
    25bc:	17 86       	std	Z+15, r1	; 0x0f
    25be:	10 8a       	std	Z+16, r1	; 0x10
    25c0:	11 8a       	std	Z+17, r1	; 0x11
    25c2:	61 14       	cp	r6, r1
    25c4:	71 04       	cpc	r7, r1
    25c6:	09 f4       	brne	.+2      	; 0x25ca <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    25c8:	44 c0       	rjmp	.+136    	; 0x2652 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	79 f5       	brne	.+94     	; 0x262c <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    25ce:	6a e0       	ldi	r22, 0x0A	; 10
    25d0:	c3 01       	movw	r24, r6
    25d2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    25d6:	7c 01       	movw	r14, r24
    25d8:	69 e9       	ldi	r22, 0x99	; 153
    25da:	74 e0       	ldi	r23, 0x04	; 4
    25dc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    25e0:	be 01       	movw	r22, r28
    25e2:	6f 5f       	subi	r22, 0xFF	; 255
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	c7 01       	movw	r24, r14
    25e8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    25ec:	6a e0       	ldi	r22, 0x0A	; 10
    25ee:	c7 01       	movw	r24, r14
    25f0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    25f4:	7c 01       	movw	r14, r24
    25f6:	60 e9       	ldi	r22, 0x90	; 144
    25f8:	74 e0       	ldi	r23, 0x04	; 4
    25fa:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    25fe:	6a e0       	ldi	r22, 0x0A	; 10
    2600:	c7 01       	movw	r24, r14
    2602:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2606:	7c 01       	movw	r14, r24
    2608:	62 e8       	ldi	r22, 0x82	; 130
    260a:	74 e0       	ldi	r23, 0x04	; 4
    260c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	c7 01       	movw	r24, r14
    2614:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2618:	b2 01       	movw	r22, r4
    261a:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2624:	66 e0       	ldi	r22, 0x06	; 6
    2626:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    262c:	6a e0       	ldi	r22, 0x0A	; 10
    262e:	c3 01       	movw	r24, r6
    2630:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2634:	4c 01       	movw	r8, r24
    2636:	6d e6       	ldi	r22, 0x6D	; 109
    2638:	74 e0       	ldi	r23, 0x04	; 4
    263a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    263e:	be 01       	movw	r22, r28
    2640:	6f 5f       	subi	r22, 0xFF	; 255
    2642:	7f 4f       	sbci	r23, 0xFF	; 255
    2644:	c4 01       	movw	r24, r8
    2646:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	c4 01       	movw	r24, r8
    264e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2652:	2a 96       	adiw	r28, 0x0a	; 10
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	ff 90       	pop	r15
    2662:	ef 90       	pop	r14
    2664:	df 90       	pop	r13
    2666:	cf 90       	pop	r12
    2668:	bf 90       	pop	r11
    266a:	af 90       	pop	r10
    266c:	9f 90       	pop	r9
    266e:	8f 90       	pop	r8
    2670:	7f 90       	pop	r7
    2672:	6f 90       	pop	r6
    2674:	5f 90       	pop	r5
    2676:	4f 90       	pop	r4
    2678:	08 95       	ret

0000267a <_ZN8frt_task19print_stack_in_listEP8emstream>:
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
    268c:	7b 01       	movw	r14, r22
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <pcTaskGetTaskName>
    2696:	6c 01       	movw	r12, r24
    2698:	6a e0       	ldi	r22, 0x0A	; 10
    269a:	c7 01       	movw	r24, r14
    269c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    26a0:	8c 01       	movw	r16, r24
    26a2:	6c ea       	ldi	r22, 0xAC	; 172
    26a4:	74 e0       	ldi	r23, 0x04	; 4
    26a6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    26aa:	6a e0       	ldi	r22, 0x0A	; 10
    26ac:	c8 01       	movw	r24, r16
    26ae:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    26b2:	8c 01       	movw	r16, r24
    26b4:	65 ea       	ldi	r22, 0xA5	; 165
    26b6:	74 e0       	ldi	r23, 0x04	; 4
    26b8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    26bc:	b6 01       	movw	r22, r12
    26be:	c8 01       	movw	r24, r16
    26c0:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    26c4:	6a e0       	ldi	r22, 0x0A	; 10
    26c6:	c8 01       	movw	r24, r16
    26c8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    26cc:	8c 01       	movw	r16, r24
    26ce:	6f e9       	ldi	r22, 0x9F	; 159
    26d0:	74 e0       	ldi	r23, 0x04	; 4
    26d2:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    26d6:	66 e0       	ldi	r22, 0x06	; 6
    26d8:	c8 01       	movw	r24, r16
    26da:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    26de:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e2:	e8 85       	ldd	r30, Y+8	; 0x08
    26e4:	f9 85       	ldd	r31, Y+9	; 0x09
    26e6:	01 e1       	ldi	r16, 0x11	; 17
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	a7 01       	movw	r20, r14
    26ec:	bc 01       	movw	r22, r24
    26ee:	8e 1b       	sub	r24, r30
    26f0:	9f 0b       	sbc	r25, r31
    26f2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_Z15hex_dump_memoryPhS_P8emstreambh>
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	19 f0       	breq	.+6      	; 0x2704 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    26fe:	b7 01       	movw	r22, r14
    2700:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN8frt_task19print_stack_in_listEP8emstream>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	df 90       	pop	r13
    2712:	cf 90       	pop	r12
    2714:	08 95       	ret

00002716 <_Z17print_task_stacksP8emstream>:
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	ec 01       	movw	r28, r24
    2720:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <last_created_task_pointer>
    2724:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <last_created_task_pointer+0x1>
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	19 f0       	breq	.+6      	; 0x2732 <_Z17print_task_stacksP8emstream+0x1c>
    272c:	be 01       	movw	r22, r28
    272e:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN8frt_task19print_stack_in_listEP8emstream>
    2732:	6a e0       	ldi	r22, 0x0A	; 10
    2734:	ce 01       	movw	r24, r28
    2736:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    273a:	8c 01       	movw	r16, r24
    273c:	62 ec       	ldi	r22, 0xC2	; 194
    273e:	74 e0       	ldi	r23, 0x04	; 4
    2740:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2744:	6a e0       	ldi	r22, 0x0A	; 10
    2746:	c8 01       	movw	r24, r16
    2748:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    274c:	8c 01       	movw	r16, r24
    274e:	67 eb       	ldi	r22, 0xB7	; 183
    2750:	74 e0       	ldi	r23, 0x04	; 4
    2752:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2756:	6a e0       	ldi	r22, 0x0A	; 10
    2758:	c8 01       	movw	r24, r16
    275a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    275e:	8c 01       	movw	r16, r24
    2760:	61 eb       	ldi	r22, 0xB1	; 177
    2762:	74 e0       	ldi	r23, 0x04	; 4
    2764:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2768:	66 e0       	ldi	r22, 0x06	; 6
    276a:	c8 01       	movw	r24, r16
    276c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2770:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <portStackTopForTask>
    2774:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <portStackTopForTask+0x1>
    2778:	bc 01       	movw	r22, r24
    277a:	6f 5f       	subi	r22, 0xFF	; 255
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	01 e1       	ldi	r16, 0x11	; 17
    2780:	21 e0       	ldi	r18, 0x01	; 1
    2782:	ae 01       	movw	r20, r28
    2784:	83 56       	subi	r24, 0x63	; 99
    2786:	91 09       	sbc	r25, r1
    2788:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_Z15hex_dump_memoryPhS_P8emstreambh>
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	08 95       	ret

00002796 <_ZN8frt_task12print_statusER8emstream>:
    2796:	8f 92       	push	r8
    2798:	9f 92       	push	r9
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	ec 01       	movw	r28, r24
    27b0:	8b 01       	movw	r16, r22
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
    27b6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <pcTaskGetTaskName>
    27ba:	bc 01       	movw	r22, r24
    27bc:	c8 01       	movw	r24, r16
    27be:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    27c2:	d8 01       	movw	r26, r16
    27c4:	ed 91       	ld	r30, X+
    27c6:	fc 91       	ld	r31, X
    27c8:	02 80       	ldd	r0, Z+2	; 0x02
    27ca:	f3 81       	ldd	r31, Z+3	; 0x03
    27cc:	e0 2d       	mov	r30, r0
    27ce:	69 e0       	ldi	r22, 0x09	; 9
    27d0:	c8 01       	movw	r24, r16
    27d2:	19 95       	eicall
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <pcTaskGetTaskName>
    27dc:	fc 01       	movw	r30, r24
    27de:	01 90       	ld	r0, Z+
    27e0:	00 20       	and	r0, r0
    27e2:	e9 f7       	brne	.-6      	; 0x27de <_ZN8frt_task12print_statusER8emstream+0x48>
    27e4:	31 97       	sbiw	r30, 0x01	; 1
    27e6:	e8 1b       	sub	r30, r24
    27e8:	f9 0b       	sbc	r31, r25
    27ea:	38 97       	sbiw	r30, 0x08	; 8
    27ec:	48 f4       	brcc	.+18     	; 0x2800 <_ZN8frt_task12print_statusER8emstream+0x6a>
    27ee:	d8 01       	movw	r26, r16
    27f0:	ed 91       	ld	r30, X+
    27f2:	fc 91       	ld	r31, X
    27f4:	02 80       	ldd	r0, Z+2	; 0x02
    27f6:	f3 81       	ldd	r31, Z+3	; 0x03
    27f8:	e0 2d       	mov	r30, r0
    27fa:	69 e0       	ldi	r22, 0x09	; 9
    27fc:	c8 01       	movw	r24, r16
    27fe:	19 95       	eicall
    2800:	ce 84       	ldd	r12, Y+14	; 0x0e
    2802:	df 84       	ldd	r13, Y+15	; 0x0f
    2804:	e8 88       	ldd	r14, Y+16	; 0x10
    2806:	f9 88       	ldd	r15, Y+17	; 0x11
    2808:	a8 84       	ldd	r10, Y+8	; 0x08
    280a:	b9 84       	ldd	r11, Y+9	; 0x09
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	9b 81       	ldd	r25, Y+3	; 0x03
    2810:	0e 94 bc 11 	call	0x2378	; 0x2378 <uxTaskGetStackHighWaterMark>
    2814:	98 2e       	mov	r9, r24
    2816:	8c 84       	ldd	r8, Y+12	; 0x0c
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <uxTaskPriorityGet>
    2820:	68 2f       	mov	r22, r24
    2822:	c8 01       	movw	r24, r16
    2824:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    2828:	6a e0       	ldi	r22, 0x0A	; 10
    282a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    282e:	ec 01       	movw	r28, r24
    2830:	67 e3       	ldi	r22, 0x37	; 55
    2832:	75 e0       	ldi	r23, 0x05	; 5
    2834:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2838:	68 2d       	mov	r22, r8
    283a:	ce 01       	movw	r24, r28
    283c:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    2840:	6a e0       	ldi	r22, 0x0A	; 10
    2842:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2846:	ec 01       	movw	r28, r24
    2848:	65 e3       	ldi	r22, 0x35	; 53
    284a:	75 e0       	ldi	r23, 0x05	; 5
    284c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2850:	69 2d       	mov	r22, r9
    2852:	ce 01       	movw	r24, r28
    2854:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    2858:	6a e0       	ldi	r22, 0x0A	; 10
    285a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    285e:	ec 01       	movw	r28, r24
    2860:	63 e3       	ldi	r22, 0x33	; 51
    2862:	75 e0       	ldi	r23, 0x05	; 5
    2864:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2868:	b5 01       	movw	r22, r10
    286a:	ce 01       	movw	r24, r28
    286c:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
    2870:	6a e0       	ldi	r22, 0x0A	; 10
    2872:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2876:	ec 01       	movw	r28, r24
    2878:	61 e3       	ldi	r22, 0x31	; 49
    287a:	75 e0       	ldi	r23, 0x05	; 5
    287c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2880:	6a e0       	ldi	r22, 0x0A	; 10
    2882:	ce 01       	movw	r24, r28
    2884:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2888:	ec 01       	movw	r28, r24
    288a:	6f e2       	ldi	r22, 0x2F	; 47
    288c:	75 e0       	ldi	r23, 0x05	; 5
    288e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2892:	b7 01       	movw	r22, r14
    2894:	a6 01       	movw	r20, r12
    2896:	ce 01       	movw	r24, r28
    2898:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN8emstreamlsEm>
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	9f 90       	pop	r9
    28b2:	8f 90       	pop	r8
    28b4:	08 95       	ret

000028b6 <_ZlsR8emstreamR8frt_task>:
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	ec 01       	movw	r28, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	db 01       	movw	r26, r22
    28c0:	ed 91       	ld	r30, X+
    28c2:	fc 91       	ld	r31, X
    28c4:	02 80       	ldd	r0, Z+2	; 0x02
    28c6:	f3 81       	ldd	r31, Z+3	; 0x03
    28c8:	e0 2d       	mov	r30, r0
    28ca:	be 01       	movw	r22, r28
    28cc:	19 95       	eicall
    28ce:	ce 01       	movw	r24, r28
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	08 95       	ret

000028d6 <_ZN8frt_task20print_status_in_listEP8emstream>:
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	8b 01       	movw	r16, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	c8 01       	movw	r24, r16
    28e6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZlsR8emstreamR8frt_task>
    28ea:	66 e0       	ldi	r22, 0x06	; 6
    28ec:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	19 f0       	breq	.+6      	; 0x28fe <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
    28f8:	b8 01       	movw	r22, r16
    28fa:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN8frt_task20print_status_in_listEP8emstream>
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <_Z15print_task_listP8emstream>:
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	ec 01       	movw	r28, r24
    2912:	6a e0       	ldi	r22, 0x0A	; 10
    2914:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2918:	8c 01       	movw	r16, r24
    291a:	64 e2       	ldi	r22, 0x24	; 36
    291c:	75 e0       	ldi	r23, 0x05	; 5
    291e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2922:	6a e0       	ldi	r22, 0x0A	; 10
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    292a:	8c 01       	movw	r16, r24
    292c:	6d e1       	ldi	r22, 0x1D	; 29
    292e:	75 e0       	ldi	r23, 0x05	; 5
    2930:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	c8 01       	movw	r24, r16
    2938:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    293c:	6a e0       	ldi	r22, 0x0A	; 10
    293e:	ce 01       	movw	r24, r28
    2940:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2944:	8c 01       	movw	r16, r24
    2946:	6c e0       	ldi	r22, 0x0C	; 12
    2948:	75 e0       	ldi	r23, 0x05	; 5
    294a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    294e:	6a e0       	ldi	r22, 0x0A	; 10
    2950:	c8 01       	movw	r24, r16
    2952:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2956:	8c 01       	movw	r16, r24
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	75 e0       	ldi	r23, 0x05	; 5
    295c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2960:	6a e0       	ldi	r22, 0x0A	; 10
    2962:	c8 01       	movw	r24, r16
    2964:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2968:	8c 01       	movw	r16, r24
    296a:	6a ef       	ldi	r22, 0xFA	; 250
    296c:	74 e0       	ldi	r23, 0x04	; 4
    296e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2972:	66 e0       	ldi	r22, 0x06	; 6
    2974:	c8 01       	movw	r24, r16
    2976:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    297a:	6a e0       	ldi	r22, 0x0A	; 10
    297c:	ce 01       	movw	r24, r28
    297e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2982:	8c 01       	movw	r16, r24
    2984:	69 ee       	ldi	r22, 0xE9	; 233
    2986:	74 e0       	ldi	r23, 0x04	; 4
    2988:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    298c:	6a e0       	ldi	r22, 0x0A	; 10
    298e:	c8 01       	movw	r24, r16
    2990:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2994:	8c 01       	movw	r16, r24
    2996:	6d ed       	ldi	r22, 0xDD	; 221
    2998:	74 e0       	ldi	r23, 0x04	; 4
    299a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    299e:	6a e0       	ldi	r22, 0x0A	; 10
    29a0:	c8 01       	movw	r24, r16
    29a2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    29a6:	8c 01       	movw	r16, r24
    29a8:	67 ed       	ldi	r22, 0xD7	; 215
    29aa:	74 e0       	ldi	r23, 0x04	; 4
    29ac:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    29b0:	66 e0       	ldi	r22, 0x06	; 6
    29b2:	c8 01       	movw	r24, r16
    29b4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    29b8:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <last_created_task_pointer>
    29bc:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <last_created_task_pointer+0x1>
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	19 f0       	breq	.+6      	; 0x29ca <_Z15print_task_listP8emstream+0xc2>
    29c4:	be 01       	movw	r22, r28
    29c6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN8frt_task20print_status_in_listEP8emstream>
    29ca:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <xTaskGetIdleTaskHandle>
    29ce:	0e 94 bc 11 	call	0x2378	; 0x2378 <uxTaskGetStackHighWaterMark>
    29d2:	18 2f       	mov	r17, r24
    29d4:	6a e0       	ldi	r22, 0x0A	; 10
    29d6:	ce 01       	movw	r24, r28
    29d8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    29dc:	ec 01       	movw	r28, r24
    29de:	6c ec       	ldi	r22, 0xCC	; 204
    29e0:	74 e0       	ldi	r23, 0x04	; 4
    29e2:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    29e6:	61 2f       	mov	r22, r17
    29e8:	ce 01       	movw	r24, r28
    29ea:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    29ee:	6a e0       	ldi	r22, 0x0A	; 10
    29f0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    29f4:	ec 01       	movw	r28, r24
    29f6:	6a ec       	ldi	r22, 0xCA	; 202
    29f8:	74 e0       	ldi	r23, 0x04	; 4
    29fa:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    29fe:	64 e6       	ldi	r22, 0x64	; 100
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	ce 01       	movw	r24, r28
    2a04:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
    2a08:	6a e0       	ldi	r22, 0x0A	; 10
    2a0a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2a0e:	ec 01       	movw	r28, r24
    2a10:	67 ec       	ldi	r22, 0xC7	; 199
    2a12:	74 e0       	ldi	r23, 0x04	; 4
    2a14:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2a18:	66 e0       	ldi	r22, 0x06	; 6
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	08 95       	ret

00002a2a <_ZN14frt_text_queue7getcharEv>:
    2a2a:	0f 93       	push	r16
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	1f 92       	push	r1
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	00 e0       	ldi	r16, 0x00	; 0
    2a38:	2f ef       	ldi	r18, 0xFF	; 255
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	a9 01       	movw	r20, r18
    2a3e:	be 01       	movw	r22, r28
    2a40:	6f 5f       	subi	r22, 0xFF	; 255
    2a42:	7f 4f       	sbci	r23, 0xFF	; 255
    2a44:	fc 01       	movw	r30, r24
    2a46:	80 85       	ldd	r24, Z+8	; 0x08
    2a48:	91 85       	ldd	r25, Z+9	; 0x09
    2a4a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xQueueGenericReceive>
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	19 f4       	brne	.+6      	; 0x2a58 <_ZN14frt_text_queue7getcharEv+0x2e>
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <_ZN14frt_text_queue7getcharEv+0x32>
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
    2a5a:	9f ef       	ldi	r25, 0xFF	; 255
    2a5c:	0f 90       	pop	r0
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	0f 91       	pop	r16
    2a64:	08 95       	ret

00002a66 <_ZN14frt_text_queue14check_for_charEv>:
    2a66:	fc 01       	movw	r30, r24
    2a68:	80 85       	ldd	r24, Z+8	; 0x08
    2a6a:	91 85       	ldd	r25, Z+9	; 0x09
    2a6c:	0e 94 94 0c 	call	0x1928	; 0x1928 <uxQueueMessagesWaiting>
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	81 11       	cpse	r24, r1
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <_ZN14frt_text_queue14check_for_charEv+0x12>
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	89 2f       	mov	r24, r25
    2a7a:	08 95       	ret

00002a7c <_ZN14frt_text_queue7putcharEc>:
    2a7c:	0f 93       	push	r16
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	1f 92       	push	r1
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	69 83       	std	Y+1, r22	; 0x01
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	22 85       	ldd	r18, Z+10	; 0x0a
    2a8e:	33 85       	ldd	r19, Z+11	; 0x0b
    2a90:	44 85       	ldd	r20, Z+12	; 0x0c
    2a92:	55 85       	ldd	r21, Z+13	; 0x0d
    2a94:	00 e0       	ldi	r16, 0x00	; 0
    2a96:	be 01       	movw	r22, r28
    2a98:	6f 5f       	subi	r22, 0xFF	; 255
    2a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9c:	80 85       	ldd	r24, Z+8	; 0x08
    2a9e:	91 85       	ldd	r25, Z+9	; 0x09
    2aa0:	0e 94 35 0b 	call	0x166a	; 0x166a <xQueueGenericSend>
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	81 11       	cpse	r24, r1
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <_ZN14frt_text_queue7putcharEc+0x30>
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	89 2f       	mov	r24, r25
    2aae:	0f 90       	pop	r0
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	0f 91       	pop	r16
    2ab6:	08 95       	ret

00002ab8 <_ZN14frt_text_queueC1EjP8emstreamm>:
    2ab8:	8f 92       	push	r8
    2aba:	9f 92       	push	r9
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	ec 01       	movw	r28, r24
    2ad0:	b6 2e       	mov	r11, r22
    2ad2:	4a 01       	movw	r8, r20
    2ad4:	68 01       	movw	r12, r16
    2ad6:	79 01       	movw	r14, r18
    2ad8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN8emstreamC1Ev>
    2adc:	86 e7       	ldi	r24, 0x76	; 118
    2ade:	90 e2       	ldi	r25, 0x20	; 32
    2ae0:	88 83       	st	Y, r24
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	8e 86       	std	Y+14, r8	; 0x0e
    2ae6:	9f 86       	std	Y+15, r9	; 0x0f
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	8b 2d       	mov	r24, r11
    2aee:	0e 94 07 0b 	call	0x160e	; 0x160e <xQueueGenericCreate>
    2af2:	88 87       	std	Y+8, r24	; 0x08
    2af4:	99 87       	std	Y+9, r25	; 0x09
    2af6:	ca 86       	std	Y+10, r12	; 0x0a
    2af8:	db 86       	std	Y+11, r13	; 0x0b
    2afa:	ec 86       	std	Y+12, r14	; 0x0c
    2afc:	fd 86       	std	Y+13, r15	; 0x0d
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	9f 90       	pop	r9
    2b12:	8f 90       	pop	r8
    2b14:	08 95       	ret

00002b16 <_ZN10time_stamp12get_microsecEv>:
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	ec 01       	movw	r28, r24
    2b24:	68 81       	ld	r22, Y
    2b26:	79 81       	ldd	r23, Y+1	; 0x01
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2c:	0f 2e       	mov	r0, r31
    2b2e:	f8 ee       	ldi	r31, 0xE8	; 232
    2b30:	cf 2e       	mov	r12, r31
    2b32:	f3 e0       	ldi	r31, 0x03	; 3
    2b34:	df 2e       	mov	r13, r31
    2b36:	e1 2c       	mov	r14, r1
    2b38:	f1 2c       	mov	r15, r1
    2b3a:	f0 2d       	mov	r31, r0
    2b3c:	a7 01       	movw	r20, r14
    2b3e:	96 01       	movw	r18, r12
    2b40:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
    2b44:	9b 01       	movw	r18, r22
    2b46:	ac 01       	movw	r20, r24
    2b48:	60 e4       	ldi	r22, 0x40	; 64
    2b4a:	72 e4       	ldi	r23, 0x42	; 66
    2b4c:	8f e0       	ldi	r24, 0x0F	; 15
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 be 1c 	call	0x397c	; 0x397c <__mulsi3>
    2b54:	a7 01       	movw	r20, r14
    2b56:	96 01       	movw	r18, r12
    2b58:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
    2b5c:	69 01       	movw	r12, r18
    2b5e:	7a 01       	movw	r14, r20
    2b60:	ac 81       	ldd	r26, Y+4	; 0x04
    2b62:	bd 81       	ldd	r27, Y+5	; 0x05
    2b64:	20 e4       	ldi	r18, 0x40	; 64
    2b66:	32 e4       	ldi	r19, 0x42	; 66
    2b68:	4f e0       	ldi	r20, 0x0F	; 15
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__muluhisi3>
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	38 e4       	ldi	r19, 0x48	; 72
    2b74:	48 ee       	ldi	r20, 0xE8	; 232
    2b76:	51 e0       	ldi	r21, 0x01	; 1
    2b78:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
    2b7c:	c7 01       	movw	r24, r14
    2b7e:	b6 01       	movw	r22, r12
    2b80:	62 0f       	add	r22, r18
    2b82:	73 1f       	adc	r23, r19
    2b84:	84 1f       	adc	r24, r20
    2b86:	95 1f       	adc	r25, r21
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
    2b94:	08 95       	ret

00002b96 <_ZlsR8emstreamR10time_stamp>:
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	2f 97       	sbiw	r28, 0x0f	; 15
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	6c 01       	movw	r12, r24
    2bb2:	8b 01       	movw	r16, r22
    2bb4:	db 01       	movw	r26, r22
    2bb6:	6d 91       	ld	r22, X+
    2bb8:	7d 91       	ld	r23, X+
    2bba:	8d 91       	ld	r24, X+
    2bbc:	9c 91       	ld	r25, X
    2bbe:	28 ee       	ldi	r18, 0xE8	; 232
    2bc0:	33 e0       	ldi	r19, 0x03	; 3
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
    2bca:	ba 01       	movw	r22, r20
    2bcc:	a9 01       	movw	r20, r18
    2bce:	c6 01       	movw	r24, r12
    2bd0:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN8emstreamlsEm>
    2bd4:	d6 01       	movw	r26, r12
    2bd6:	ed 91       	ld	r30, X+
    2bd8:	fc 91       	ld	r31, X
    2bda:	02 80       	ldd	r0, Z+2	; 0x02
    2bdc:	f3 81       	ldd	r31, Z+3	; 0x03
    2bde:	e0 2d       	mov	r30, r0
    2be0:	6e e2       	ldi	r22, 0x2E	; 46
    2be2:	c6 01       	movw	r24, r12
    2be4:	19 95       	eicall
    2be6:	c8 01       	movw	r24, r16
    2be8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN10time_stamp12get_microsecEv>
    2bec:	8e 01       	movw	r16, r28
    2bee:	09 5f       	subi	r16, 0xF9	; 249
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	31 96       	adiw	r30, 0x01	; 1
    2bf6:	7f 01       	movw	r14, r30
    2bf8:	2a e0       	ldi	r18, 0x0A	; 10
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__divmodsi4>
    2c04:	e6 2f       	mov	r30, r22
    2c06:	28 87       	std	Y+8, r18	; 0x08
    2c08:	39 87       	std	Y+9, r19	; 0x09
    2c0a:	4a 87       	std	Y+10, r20	; 0x0a
    2c0c:	5b 87       	std	Y+11, r21	; 0x0b
    2c0e:	68 85       	ldd	r22, Y+8	; 0x08
    2c10:	79 85       	ldd	r23, Y+9	; 0x09
    2c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c16:	20 e3       	ldi	r18, 0x30	; 48
    2c18:	2e 0f       	add	r18, r30
    2c1a:	d8 01       	movw	r26, r16
    2c1c:	2e 93       	st	-X, r18
    2c1e:	8d 01       	movw	r16, r26
    2c20:	ae 15       	cp	r26, r14
    2c22:	bf 05       	cpc	r27, r15
    2c24:	49 f7       	brne	.-46     	; 0x2bf8 <_ZlsR8emstreamR10time_stamp+0x62>
    2c26:	1f 82       	std	Y+7, r1	; 0x07
    2c28:	be 01       	movw	r22, r28
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	c6 01       	movw	r24, r12
    2c30:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2c34:	c6 01       	movw	r24, r12
    2c36:	2f 96       	adiw	r28, 0x0f	; 15
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
    2c4c:	08 95       	ret

00002c4e <_ZN10time_stamp10set_to_nowEv>:
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	ec 01       	movw	r28, r24
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	0f 92       	push	r0
    2c5a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2c5e:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2c62:	8c 83       	std	Y+4, r24	; 0x04
    2c64:	9d 83       	std	Y+5, r25	; 0x05
    2c66:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <xTaskGetTickCount>
    2c6a:	68 83       	st	Y, r22
    2c6c:	79 83       	std	Y+1, r23	; 0x01
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
    2c70:	9b 83       	std	Y+3, r25	; 0x03
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	ce 01       	movw	r24, r28
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	08 95       	ret

00002c7e <_Z15hex_dump_memoryPhS_P8emstreambh>:
    2c7e:	5f 92       	push	r5
    2c80:	6f 92       	push	r6
    2c82:	7f 92       	push	r7
    2c84:	8f 92       	push	r8
    2c86:	9f 92       	push	r9
    2c88:	af 92       	push	r10
    2c8a:	bf 92       	push	r11
    2c8c:	cf 92       	push	r12
    2c8e:	df 92       	push	r13
    2c90:	ef 92       	push	r14
    2c92:	ff 92       	push	r15
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	5c 01       	movw	r10, r24
    2c9e:	4b 01       	movw	r8, r22
    2ca0:	7a 01       	movw	r14, r20
    2ca2:	12 2f       	mov	r17, r18
    2ca4:	70 2e       	mov	r7, r16
    2ca6:	63 e0       	ldi	r22, 0x03	; 3
    2ca8:	ca 01       	movw	r24, r20
    2caa:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2cae:	a8 14       	cp	r10, r8
    2cb0:	b9 04       	cpc	r11, r9
    2cb2:	08 f0       	brcs	.+2      	; 0x2cb6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    2cb4:	7d c0       	rjmp	.+250    	; 0x2db0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2cb6:	65 01       	movw	r12, r10
    2cb8:	84 e1       	ldi	r24, 0x14	; 20
    2cba:	c8 0e       	add	r12, r24
    2cbc:	d1 1c       	adc	r13, r1
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	6a 2c       	mov	r6, r10
    2cc2:	5b 2c       	mov	r5, r11
    2cc4:	b5 01       	movw	r22, r10
    2cc6:	c7 01       	movw	r24, r14
    2cc8:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN8emstreamlsEj>
    2ccc:	6a e0       	ldi	r22, 0x0A	; 10
    2cce:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2cd2:	69 e4       	ldi	r22, 0x49	; 73
    2cd4:	75 e0       	ldi	r23, 0x05	; 5
    2cd6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2cda:	11 23       	and	r17, r17
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    2cde:	6d c0       	rjmp	.+218    	; 0x2dba <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2ce0:	00 23       	and	r16, r16
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    2ce4:	6a c0       	rjmp	.+212    	; 0x2dba <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2ce6:	6a e0       	ldi	r22, 0x0A	; 10
    2ce8:	c7 01       	movw	r24, r14
    2cea:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2cee:	64 e4       	ldi	r22, 0x44	; 68
    2cf0:	75 e0       	ldi	r23, 0x05	; 5
    2cf2:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2cf6:	61 c0       	rjmp	.+194    	; 0x2dba <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2cf8:	11 23       	and	r17, r17
    2cfa:	71 f0       	breq	.+28     	; 0x2d18 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2cfc:	01 11       	cpse	r16, r1
    2cfe:	0c c0       	rjmp	.+24     	; 0x2d18 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2d00:	88 81       	ld	r24, Y
    2d02:	87 15       	cp	r24, r7
    2d04:	49 f0       	breq	.+18     	; 0x2d18 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2d06:	6a e0       	ldi	r22, 0x0A	; 10
    2d08:	c7 01       	movw	r24, r14
    2d0a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2d0e:	6f e3       	ldi	r22, 0x3F	; 63
    2d10:	75 e0       	ldi	r23, 0x05	; 5
    2d12:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2d16:	01 e0       	ldi	r16, 0x01	; 1
    2d18:	69 91       	ld	r22, Y+
    2d1a:	c7 01       	movw	r24, r14
    2d1c:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    2d20:	dc 01       	movw	r26, r24
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	02 80       	ldd	r0, Z+2	; 0x02
    2d28:	f3 81       	ldd	r31, Z+3	; 0x03
    2d2a:	e0 2d       	mov	r30, r0
    2d2c:	60 e2       	ldi	r22, 0x20	; 32
    2d2e:	19 95       	eicall
    2d30:	cc 16       	cp	r12, r28
    2d32:	dd 06       	cpc	r13, r29
    2d34:	09 f7       	brne	.-62     	; 0x2cf8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
    2d36:	11 23       	and	r17, r17
    2d38:	89 f0       	breq	.+34     	; 0x2d5c <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
    2d3a:	6a e0       	ldi	r22, 0x0A	; 10
    2d3c:	c7 01       	movw	r24, r14
    2d3e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2d42:	ec 01       	movw	r28, r24
    2d44:	69 e3       	ldi	r22, 0x39	; 57
    2d46:	75 e0       	ldi	r23, 0x05	; 5
    2d48:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    2d4c:	e8 81       	ld	r30, Y
    2d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2d50:	02 80       	ldd	r0, Z+2	; 0x02
    2d52:	f3 81       	ldd	r31, Z+3	; 0x03
    2d54:	e0 2d       	mov	r30, r0
    2d56:	60 e2       	ldi	r22, 0x20	; 32
    2d58:	ce 01       	movw	r24, r28
    2d5a:	19 95       	eicall
    2d5c:	c6 2d       	mov	r28, r6
    2d5e:	d5 2d       	mov	r29, r5
    2d60:	69 91       	ld	r22, Y+
    2d62:	80 ee       	ldi	r24, 0xE0	; 224
    2d64:	86 0f       	add	r24, r22
    2d66:	8f 35       	cpi	r24, 0x5F	; 95
    2d68:	48 f4       	brcc	.+18     	; 0x2d7c <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
    2d6a:	d7 01       	movw	r26, r14
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	02 80       	ldd	r0, Z+2	; 0x02
    2d72:	f3 81       	ldd	r31, Z+3	; 0x03
    2d74:	e0 2d       	mov	r30, r0
    2d76:	c7 01       	movw	r24, r14
    2d78:	19 95       	eicall
    2d7a:	09 c0       	rjmp	.+18     	; 0x2d8e <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
    2d7c:	d7 01       	movw	r26, r14
    2d7e:	ed 91       	ld	r30, X+
    2d80:	fc 91       	ld	r31, X
    2d82:	02 80       	ldd	r0, Z+2	; 0x02
    2d84:	f3 81       	ldd	r31, Z+3	; 0x03
    2d86:	e0 2d       	mov	r30, r0
    2d88:	6e e2       	ldi	r22, 0x2E	; 46
    2d8a:	c7 01       	movw	r24, r14
    2d8c:	19 95       	eicall
    2d8e:	cc 16       	cp	r12, r28
    2d90:	dd 06       	cpc	r13, r29
    2d92:	31 f7       	brne	.-52     	; 0x2d60 <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    2d94:	b4 e1       	ldi	r27, 0x14	; 20
    2d96:	ab 0e       	add	r10, r27
    2d98:	b1 1c       	adc	r11, r1
    2d9a:	66 e0       	ldi	r22, 0x06	; 6
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2da2:	84 e1       	ldi	r24, 0x14	; 20
    2da4:	c8 0e       	add	r12, r24
    2da6:	d1 1c       	adc	r13, r1
    2da8:	a8 14       	cp	r10, r8
    2daa:	b9 04       	cpc	r11, r9
    2dac:	08 f4       	brcc	.+2      	; 0x2db0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2dae:	88 cf       	rjmp	.-240    	; 0x2cc0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
    2db0:	62 e0       	ldi	r22, 0x02	; 2
    2db2:	c7 01       	movw	r24, r14
    2db4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    2db8:	03 c0       	rjmp	.+6      	; 0x2dc0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
    2dba:	c6 2d       	mov	r28, r6
    2dbc:	d5 2d       	mov	r29, r5
    2dbe:	9c cf       	rjmp	.-200    	; 0x2cf8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	bf 90       	pop	r11
    2dd2:	af 90       	pop	r10
    2dd4:	9f 90       	pop	r9
    2dd6:	8f 90       	pop	r8
    2dd8:	7f 90       	pop	r7
    2dda:	6f 90       	pop	r6
    2ddc:	5f 90       	pop	r5
    2dde:	08 95       	ret

00002de0 <_Znwj>:
    2de0:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    2de4:	08 95       	ret

00002de6 <_Znaj>:
    2de6:	0e 94 21 07 	call	0xe42	; 0xe42 <pvPortMalloc>
    2dea:	08 95       	ret

00002dec <__cxa_pure_virtual>:
    2dec:	08 95       	ret

00002dee <_ZN7base232C1EjP12USART_struct>:
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	fc 01       	movw	r30, r24
    2df4:	da 01       	movw	r26, r20
    2df6:	40 3a       	cpi	r20, 0xA0	; 160
    2df8:	68 e0       	ldi	r22, 0x08	; 8
    2dfa:	56 07       	cpc	r21, r22
    2dfc:	49 f4       	brne	.+18     	; 0x2e10 <_ZN7base232C1EjP12USART_struct+0x22>
    2dfe:	80 e4       	ldi	r24, 0x40	; 64
    2e00:	96 e0       	ldi	r25, 0x06	; 6
    2e02:	82 83       	std	Z+2, r24	; 0x02
    2e04:	93 83       	std	Z+3, r25	; 0x03
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	84 83       	std	Z+4, r24	; 0x04
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	85 83       	std	Z+5, r24	; 0x05
    2e0e:	32 c0       	rjmp	.+100    	; 0x2e74 <_ZN7base232C1EjP12USART_struct+0x86>
    2e10:	40 3b       	cpi	r20, 0xB0	; 176
    2e12:	78 e0       	ldi	r23, 0x08	; 8
    2e14:	57 07       	cpc	r21, r23
    2e16:	49 f4       	brne	.+18     	; 0x2e2a <_ZN7base232C1EjP12USART_struct+0x3c>
    2e18:	80 e4       	ldi	r24, 0x40	; 64
    2e1a:	96 e0       	ldi	r25, 0x06	; 6
    2e1c:	82 83       	std	Z+2, r24	; 0x02
    2e1e:	93 83       	std	Z+3, r25	; 0x03
    2e20:	86 e0       	ldi	r24, 0x06	; 6
    2e22:	84 83       	std	Z+4, r24	; 0x04
    2e24:	87 e0       	ldi	r24, 0x07	; 7
    2e26:	85 83       	std	Z+5, r24	; 0x05
    2e28:	25 c0       	rjmp	.+74     	; 0x2e74 <_ZN7base232C1EjP12USART_struct+0x86>
    2e2a:	40 3a       	cpi	r20, 0xA0	; 160
    2e2c:	89 e0       	ldi	r24, 0x09	; 9
    2e2e:	58 07       	cpc	r21, r24
    2e30:	49 f4       	brne	.+18     	; 0x2e44 <_ZN7base232C1EjP12USART_struct+0x56>
    2e32:	80 e6       	ldi	r24, 0x60	; 96
    2e34:	96 e0       	ldi	r25, 0x06	; 6
    2e36:	82 83       	std	Z+2, r24	; 0x02
    2e38:	93 83       	std	Z+3, r25	; 0x03
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	84 83       	std	Z+4, r24	; 0x04
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	85 83       	std	Z+5, r24	; 0x05
    2e42:	18 c0       	rjmp	.+48     	; 0x2e74 <_ZN7base232C1EjP12USART_struct+0x86>
    2e44:	40 3b       	cpi	r20, 0xB0	; 176
    2e46:	69 e0       	ldi	r22, 0x09	; 9
    2e48:	56 07       	cpc	r21, r22
    2e4a:	49 f4       	brne	.+18     	; 0x2e5e <_ZN7base232C1EjP12USART_struct+0x70>
    2e4c:	80 e6       	ldi	r24, 0x60	; 96
    2e4e:	96 e0       	ldi	r25, 0x06	; 6
    2e50:	82 83       	std	Z+2, r24	; 0x02
    2e52:	93 83       	std	Z+3, r25	; 0x03
    2e54:	86 e0       	ldi	r24, 0x06	; 6
    2e56:	84 83       	std	Z+4, r24	; 0x04
    2e58:	87 e0       	ldi	r24, 0x07	; 7
    2e5a:	85 83       	std	Z+5, r24	; 0x05
    2e5c:	0b c0       	rjmp	.+22     	; 0x2e74 <_ZN7base232C1EjP12USART_struct+0x86>
    2e5e:	40 3a       	cpi	r20, 0xA0	; 160
    2e60:	5a 40       	sbci	r21, 0x0A	; 10
    2e62:	41 f4       	brne	.+16     	; 0x2e74 <_ZN7base232C1EjP12USART_struct+0x86>
    2e64:	80 e8       	ldi	r24, 0x80	; 128
    2e66:	96 e0       	ldi	r25, 0x06	; 6
    2e68:	82 83       	std	Z+2, r24	; 0x02
    2e6a:	93 83       	std	Z+3, r25	; 0x03
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	84 83       	std	Z+4, r24	; 0x04
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	85 83       	std	Z+5, r24	; 0x05
    2e74:	a6 83       	std	Z+6, r26	; 0x06
    2e76:	b7 83       	std	Z+7, r27	; 0x07
    2e78:	cd 01       	movw	r24, r26
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	80 87       	std	Z+8, r24	; 0x08
    2e7e:	91 87       	std	Z+9, r25	; 0x09
    2e80:	03 96       	adiw	r24, 0x03	; 3
    2e82:	82 87       	std	Z+10, r24	; 0x0a
    2e84:	93 87       	std	Z+11, r25	; 0x0b
    2e86:	25 81       	ldd	r18, Z+5	; 0x05
    2e88:	c2 81       	ldd	r28, Z+2	; 0x02
    2e8a:	d3 81       	ldd	r29, Z+3	; 0x03
    2e8c:	4c 81       	ldd	r20, Y+4	; 0x04
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	bc 01       	movw	r22, r24
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <_ZN7base232C1EjP12USART_struct+0xac>
    2e96:	66 0f       	add	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	2a 95       	dec	r18
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <_ZN7base232C1EjP12USART_struct+0xa8>
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	24 2b       	or	r18, r20
    2ea2:	2c 83       	std	Y+4, r18	; 0x04
    2ea4:	25 81       	ldd	r18, Z+5	; 0x05
    2ea6:	c2 81       	ldd	r28, Z+2	; 0x02
    2ea8:	d3 81       	ldd	r29, Z+3	; 0x03
    2eaa:	48 81       	ld	r20, Y
    2eac:	bc 01       	movw	r22, r24
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <_ZN7base232C1EjP12USART_struct+0xc6>
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	2a 95       	dec	r18
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <_ZN7base232C1EjP12USART_struct+0xc2>
    2eb8:	9b 01       	movw	r18, r22
    2eba:	24 2b       	or	r18, r20
    2ebc:	28 83       	st	Y, r18
    2ebe:	34 81       	ldd	r19, Z+4	; 0x04
    2ec0:	c2 81       	ldd	r28, Z+2	; 0x02
    2ec2:	d3 81       	ldd	r29, Z+3	; 0x03
    2ec4:	28 81       	ld	r18, Y
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <_ZN7base232C1EjP12USART_struct+0xde>
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	3a 95       	dec	r19
    2ece:	e2 f7       	brpl	.-8      	; 0x2ec8 <_ZN7base232C1EjP12USART_struct+0xda>
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	82 23       	and	r24, r18
    2ed6:	88 83       	st	Y, r24
    2ed8:	80 e1       	ldi	r24, 0x10	; 16
    2eda:	13 96       	adiw	r26, 0x03	; 3
    2edc:	8c 93       	st	X, r24
    2ede:	13 97       	sbiw	r26, 0x03	; 3
    2ee0:	83 e0       	ldi	r24, 0x03	; 3
    2ee2:	15 96       	adiw	r26, 0x05	; 5
    2ee4:	8c 93       	st	X, r24
    2ee6:	15 97       	sbiw	r26, 0x05	; 5
    2ee8:	80 ef       	ldi	r24, 0xF0	; 240
    2eea:	17 96       	adiw	r26, 0x07	; 7
    2eec:	8c 93       	st	X, r24
    2eee:	17 97       	sbiw	r26, 0x07	; 7
    2ef0:	81 e2       	ldi	r24, 0x21	; 33
    2ef2:	16 96       	adiw	r26, 0x06	; 6
    2ef4:	8c 93       	st	X, r24
    2ef6:	16 97       	sbiw	r26, 0x06	; 6
    2ef8:	88 e1       	ldi	r24, 0x18	; 24
    2efa:	14 96       	adiw	r26, 0x04	; 4
    2efc:	8c 93       	st	X, r24
    2efe:	80 e8       	ldi	r24, 0x80	; 128
    2f00:	85 87       	std	Z+13, r24	; 0x0d
    2f02:	80 e4       	ldi	r24, 0x40	; 64
    2f04:	86 87       	std	Z+14, r24	; 0x0e
    2f06:	80 e2       	ldi	r24, 0x20	; 32
    2f08:	84 87       	std	Z+12, r24	; 0x0c
    2f0a:	06 80       	ldd	r0, Z+6	; 0x06
    2f0c:	f7 81       	ldd	r31, Z+7	; 0x07
    2f0e:	e0 2d       	mov	r30, r0
    2f10:	80 81       	ld	r24, Z
    2f12:	80 81       	ld	r24, Z
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	08 95       	ret

00002f1a <_ZN8emstream13ready_to_sendEv>:
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	08 95       	ret

00002f1e <_ZN8emstream7getcharEv>:
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	08 95       	ret

00002f24 <_ZN8emstream14check_for_charEv>:
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	08 95       	ret

00002f28 <_ZN8emstream12transmit_nowEv>:
    2f28:	08 95       	ret

00002f2a <_ZN8emstream12clear_screenEv>:
    2f2a:	08 95       	ret

00002f2c <_ZN8emstreamC1Ev>:
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	86 e8       	ldi	r24, 0x86	; 134
    2f30:	90 e2       	ldi	r25, 0x20	; 32
    2f32:	80 83       	st	Z, r24
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	8a e0       	ldi	r24, 0x0A	; 10
    2f38:	82 83       	std	Z+2, r24	; 0x02
    2f3a:	13 82       	std	Z+3, r1	; 0x03
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	85 83       	std	Z+5, r24	; 0x05
    2f40:	14 82       	std	Z+4, r1	; 0x04
    2f42:	16 82       	std	Z+6, r1	; 0x06
    2f44:	17 82       	std	Z+7, r1	; 0x07
    2f46:	08 95       	ret

00002f48 <_ZN8emstream4putsEPKc>:
    2f48:	0f 93       	push	r16
    2f4a:	1f 93       	push	r17
    2f4c:	cf 93       	push	r28
    2f4e:	df 93       	push	r29
    2f50:	8c 01       	movw	r16, r24
    2f52:	fb 01       	movw	r30, r22
    2f54:	dc 01       	movw	r26, r24
    2f56:	14 96       	adiw	r26, 0x04	; 4
    2f58:	8c 91       	ld	r24, X
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	04 c0       	rjmp	.+8      	; 0x2f66 <_ZN8emstream4putsEPKc+0x1e>
    2f5e:	60 81       	ld	r22, Z
    2f60:	61 11       	cpse	r22, r1
    2f62:	17 c0       	rjmp	.+46     	; 0x2f92 <_ZN8emstream4putsEPKc+0x4a>
    2f64:	23 c0       	rjmp	.+70     	; 0x2fac <_ZN8emstream4putsEPKc+0x64>
    2f66:	d8 01       	movw	r26, r16
    2f68:	14 96       	adiw	r26, 0x04	; 4
    2f6a:	1c 92       	st	X, r1
    2f6c:	eb 01       	movw	r28, r22
    2f6e:	21 96       	adiw	r28, 0x01	; 1
    2f70:	64 91       	lpm	r22, Z
    2f72:	66 23       	and	r22, r22
    2f74:	d9 f0       	breq	.+54     	; 0x2fac <_ZN8emstream4putsEPKc+0x64>
    2f76:	d8 01       	movw	r26, r16
    2f78:	ed 91       	ld	r30, X+
    2f7a:	fc 91       	ld	r31, X
    2f7c:	02 80       	ldd	r0, Z+2	; 0x02
    2f7e:	f3 81       	ldd	r31, Z+3	; 0x03
    2f80:	e0 2d       	mov	r30, r0
    2f82:	c8 01       	movw	r24, r16
    2f84:	19 95       	eicall
    2f86:	fe 01       	movw	r30, r28
    2f88:	64 91       	lpm	r22, Z
    2f8a:	21 96       	adiw	r28, 0x01	; 1
    2f8c:	61 11       	cpse	r22, r1
    2f8e:	f3 cf       	rjmp	.-26     	; 0x2f76 <_ZN8emstream4putsEPKc+0x2e>
    2f90:	0d c0       	rjmp	.+26     	; 0x2fac <_ZN8emstream4putsEPKc+0x64>
    2f92:	ef 01       	movw	r28, r30
    2f94:	21 96       	adiw	r28, 0x01	; 1
    2f96:	d8 01       	movw	r26, r16
    2f98:	ed 91       	ld	r30, X+
    2f9a:	fc 91       	ld	r31, X
    2f9c:	02 80       	ldd	r0, Z+2	; 0x02
    2f9e:	f3 81       	ldd	r31, Z+3	; 0x03
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	c8 01       	movw	r24, r16
    2fa4:	19 95       	eicall
    2fa6:	69 91       	ld	r22, Y+
    2fa8:	61 11       	cpse	r22, r1
    2faa:	f5 cf       	rjmp	.-22     	; 0x2f96 <_ZN8emstream4putsEPKc+0x4e>
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	08 95       	ret

00002fb6 <_ZN8emstreamlsE15ser_manipulator>:
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	ec 01       	movw	r28, r24
    2fbc:	86 2f       	mov	r24, r22
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	8b 30       	cpi	r24, 0x0B	; 11
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	d8 f5       	brcc	.+118    	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	88 27       	eor	r24, r24
    2fca:	e2 50       	subi	r30, 0x02	; 2
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd0:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__tablejump2__>
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	31 c0       	rjmp	.+98     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2fda:	88 e0       	ldi	r24, 0x08	; 8
    2fdc:	8a 83       	std	Y+2, r24	; 0x02
    2fde:	2e c0       	rjmp	.+92     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2fe0:	8a e0       	ldi	r24, 0x0A	; 10
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	2b c0       	rjmp	.+86     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2fe6:	80 e1       	ldi	r24, 0x10	; 16
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
    2fea:	28 c0       	rjmp	.+80     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    2ff0:	25 c0       	rjmp	.+74     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ff2:	1b 82       	std	Y+3, r1	; 0x03
    2ff4:	23 c0       	rjmp	.+70     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ff6:	e8 81       	ld	r30, Y
    2ff8:	f9 81       	ldd	r31, Y+1	; 0x01
    2ffa:	02 80       	ldd	r0, Z+2	; 0x02
    2ffc:	f3 81       	ldd	r31, Z+3	; 0x03
    2ffe:	e0 2d       	mov	r30, r0
    3000:	6d e0       	ldi	r22, 0x0D	; 13
    3002:	ce 01       	movw	r24, r28
    3004:	19 95       	eicall
    3006:	e8 81       	ld	r30, Y
    3008:	f9 81       	ldd	r31, Y+1	; 0x01
    300a:	02 80       	ldd	r0, Z+2	; 0x02
    300c:	f3 81       	ldd	r31, Z+3	; 0x03
    300e:	e0 2d       	mov	r30, r0
    3010:	6a e0       	ldi	r22, 0x0A	; 10
    3012:	ce 01       	movw	r24, r28
    3014:	19 95       	eicall
    3016:	12 c0       	rjmp	.+36     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    3018:	e8 81       	ld	r30, Y
    301a:	f9 81       	ldd	r31, Y+1	; 0x01
    301c:	02 84       	ldd	r0, Z+10	; 0x0a
    301e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3020:	e0 2d       	mov	r30, r0
    3022:	ce 01       	movw	r24, r28
    3024:	19 95       	eicall
    3026:	0a c0       	rjmp	.+20     	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    3028:	e8 81       	ld	r30, Y
    302a:	f9 81       	ldd	r31, Y+1	; 0x01
    302c:	00 84       	ldd	r0, Z+8	; 0x08
    302e:	f1 85       	ldd	r31, Z+9	; 0x09
    3030:	e0 2d       	mov	r30, r0
    3032:	ce 01       	movw	r24, r28
    3034:	19 95       	eicall
    3036:	02 c0       	rjmp	.+4      	; 0x303c <_ZN8emstreamlsE15ser_manipulator+0x86>
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	8c 83       	std	Y+4, r24	; 0x04
    303c:	ce 01       	movw	r24, r28
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <_ZN8emstreamlsEb>:
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	ec 01       	movw	r28, r24
    304a:	66 23       	and	r22, r22
    304c:	41 f0       	breq	.+16     	; 0x305e <_ZN8emstreamlsEb+0x1a>
    304e:	e8 81       	ld	r30, Y
    3050:	f9 81       	ldd	r31, Y+1	; 0x01
    3052:	02 80       	ldd	r0, Z+2	; 0x02
    3054:	f3 81       	ldd	r31, Z+3	; 0x03
    3056:	e0 2d       	mov	r30, r0
    3058:	64 e5       	ldi	r22, 0x54	; 84
    305a:	19 95       	eicall
    305c:	07 c0       	rjmp	.+14     	; 0x306c <_ZN8emstreamlsEb+0x28>
    305e:	e8 81       	ld	r30, Y
    3060:	f9 81       	ldd	r31, Y+1	; 0x01
    3062:	02 80       	ldd	r0, Z+2	; 0x02
    3064:	f3 81       	ldd	r31, Z+3	; 0x03
    3066:	e0 2d       	mov	r30, r0
    3068:	66 e4       	ldi	r22, 0x46	; 70
    306a:	19 95       	eicall
    306c:	ce 01       	movw	r24, r28
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <_ZN8emstreamlsEj>:
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	61 97       	sbiw	r28, 0x11	; 17
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	8c 01       	movw	r16, r24
    308a:	f6 2e       	mov	r15, r22
    308c:	97 2f       	mov	r25, r23
    308e:	f8 01       	movw	r30, r16
    3090:	42 81       	ldd	r20, Z+2	; 0x02
    3092:	40 31       	cpi	r20, 0x10	; 16
    3094:	21 f0       	breq	.+8      	; 0x309e <_ZN8emstreamlsEj+0x2a>
    3096:	48 30       	cpi	r20, 0x08	; 8
    3098:	11 f0       	breq	.+4      	; 0x309e <_ZN8emstreamlsEj+0x2a>
    309a:	42 30       	cpi	r20, 0x02	; 2
    309c:	41 f4       	brne	.+16     	; 0x30ae <_ZN8emstreamlsEj+0x3a>
    309e:	69 2f       	mov	r22, r25
    30a0:	c8 01       	movw	r24, r16
    30a2:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    30a6:	6f 2d       	mov	r22, r15
    30a8:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    30ac:	0d c0       	rjmp	.+26     	; 0x30c8 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	be 01       	movw	r22, r28
    30b2:	6f 5f       	subi	r22, 0xFF	; 255
    30b4:	7f 4f       	sbci	r23, 0xFF	; 255
    30b6:	8f 2d       	mov	r24, r15
    30b8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <utoa>
    30bc:	be 01       	movw	r22, r28
    30be:	6f 5f       	subi	r22, 0xFF	; 255
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	c8 01       	movw	r24, r16
    30c4:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    30c8:	c8 01       	movw	r24, r16
    30ca:	61 96       	adiw	r28, 0x11	; 17
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	08 95       	ret

000030dc <_ZN8emstreamlsEm>:
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	a1 97       	sbiw	r28, 0x21	; 33
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	8c 01       	movw	r16, r24
    30f6:	d4 2e       	mov	r13, r20
    30f8:	e5 2e       	mov	r14, r21
    30fa:	f6 2e       	mov	r15, r22
    30fc:	97 2f       	mov	r25, r23
    30fe:	f8 01       	movw	r30, r16
    3100:	22 81       	ldd	r18, Z+2	; 0x02
    3102:	20 31       	cpi	r18, 0x10	; 16
    3104:	21 f0       	breq	.+8      	; 0x310e <_ZN8emstreamlsEm+0x32>
    3106:	28 30       	cpi	r18, 0x08	; 8
    3108:	11 f0       	breq	.+4      	; 0x310e <_ZN8emstreamlsEm+0x32>
    310a:	22 30       	cpi	r18, 0x02	; 2
    310c:	71 f4       	brne	.+28     	; 0x312a <_ZN8emstreamlsEm+0x4e>
    310e:	69 2f       	mov	r22, r25
    3110:	c8 01       	movw	r24, r16
    3112:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    3116:	6f 2d       	mov	r22, r15
    3118:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    311c:	6e 2d       	mov	r22, r14
    311e:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    3122:	6d 2d       	mov	r22, r13
    3124:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN8emstreamlsEh>
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	ae 01       	movw	r20, r28
    312e:	4f 5f       	subi	r20, 0xFF	; 255
    3130:	5f 4f       	sbci	r21, 0xFF	; 255
    3132:	6d 2d       	mov	r22, r13
    3134:	7e 2d       	mov	r23, r14
    3136:	8f 2d       	mov	r24, r15
    3138:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <ultoa>
    313c:	be 01       	movw	r22, r28
    313e:	6f 5f       	subi	r22, 0xFF	; 255
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	c8 01       	movw	r24, r16
    3144:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    3148:	c8 01       	movw	r24, r16
    314a:	a1 96       	adiw	r28, 0x21	; 33
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	de bf       	out	0x3e, r29	; 62
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	ff 90       	pop	r15
    315a:	ef 90       	pop	r14
    315c:	df 90       	pop	r13
    315e:	08 95       	ret

00003160 <_ZN8emstreamlsEh>:
    3160:	cf 92       	push	r12
    3162:	df 92       	push	r13
    3164:	ef 92       	push	r14
    3166:	ff 92       	push	r15
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	29 97       	sbiw	r28, 0x09	; 9
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	8c 01       	movw	r16, r24
    317c:	e6 2e       	mov	r14, r22
    317e:	dc 01       	movw	r26, r24
    3180:	13 96       	adiw	r26, 0x03	; 3
    3182:	8c 91       	ld	r24, X
    3184:	13 97       	sbiw	r26, 0x03	; 3
    3186:	88 23       	and	r24, r24
    3188:	41 f0       	breq	.+16     	; 0x319a <_ZN8emstreamlsEh+0x3a>
    318a:	ed 91       	ld	r30, X+
    318c:	fc 91       	ld	r31, X
    318e:	02 80       	ldd	r0, Z+2	; 0x02
    3190:	f3 81       	ldd	r31, Z+3	; 0x03
    3192:	e0 2d       	mov	r30, r0
    3194:	c8 01       	movw	r24, r16
    3196:	19 95       	eicall
    3198:	56 c0       	rjmp	.+172    	; 0x3246 <_ZN8emstreamlsEh+0xe6>
    319a:	f8 01       	movw	r30, r16
    319c:	42 81       	ldd	r20, Z+2	; 0x02
    319e:	42 30       	cpi	r20, 0x02	; 2
    31a0:	19 f5       	brne	.+70     	; 0x31e8 <_ZN8emstreamlsEh+0x88>
    31a2:	68 94       	set
    31a4:	cc 24       	eor	r12, r12
    31a6:	c3 f8       	bld	r12, 3
    31a8:	d1 2c       	mov	r13, r1
    31aa:	68 94       	set
    31ac:	ff 24       	eor	r15, r15
    31ae:	f7 f8       	bld	r15, 7
    31b0:	8e 2d       	mov	r24, r14
    31b2:	8f 21       	and	r24, r15
    31b4:	51 f0       	breq	.+20     	; 0x31ca <_ZN8emstreamlsEh+0x6a>
    31b6:	d8 01       	movw	r26, r16
    31b8:	ed 91       	ld	r30, X+
    31ba:	fc 91       	ld	r31, X
    31bc:	02 80       	ldd	r0, Z+2	; 0x02
    31be:	f3 81       	ldd	r31, Z+3	; 0x03
    31c0:	e0 2d       	mov	r30, r0
    31c2:	61 e3       	ldi	r22, 0x31	; 49
    31c4:	c8 01       	movw	r24, r16
    31c6:	19 95       	eicall
    31c8:	09 c0       	rjmp	.+18     	; 0x31dc <_ZN8emstreamlsEh+0x7c>
    31ca:	d8 01       	movw	r26, r16
    31cc:	ed 91       	ld	r30, X+
    31ce:	fc 91       	ld	r31, X
    31d0:	02 80       	ldd	r0, Z+2	; 0x02
    31d2:	f3 81       	ldd	r31, Z+3	; 0x03
    31d4:	e0 2d       	mov	r30, r0
    31d6:	60 e3       	ldi	r22, 0x30	; 48
    31d8:	c8 01       	movw	r24, r16
    31da:	19 95       	eicall
    31dc:	f6 94       	lsr	r15
    31de:	b1 e0       	ldi	r27, 0x01	; 1
    31e0:	cb 1a       	sub	r12, r27
    31e2:	d1 08       	sbc	r13, r1
    31e4:	29 f7       	brne	.-54     	; 0x31b0 <_ZN8emstreamlsEh+0x50>
    31e6:	2f c0       	rjmp	.+94     	; 0x3246 <_ZN8emstreamlsEh+0xe6>
    31e8:	40 31       	cpi	r20, 0x10	; 16
    31ea:	f9 f4       	brne	.+62     	; 0x322a <_ZN8emstreamlsEh+0xca>
    31ec:	62 95       	swap	r22
    31ee:	6f 70       	andi	r22, 0x0F	; 15
    31f0:	01 90       	ld	r0, Z+
    31f2:	f0 81       	ld	r31, Z
    31f4:	e0 2d       	mov	r30, r0
    31f6:	02 80       	ldd	r0, Z+2	; 0x02
    31f8:	f3 81       	ldd	r31, Z+3	; 0x03
    31fa:	e0 2d       	mov	r30, r0
    31fc:	6a 30       	cpi	r22, 0x0A	; 10
    31fe:	10 f0       	brcs	.+4      	; 0x3204 <_ZN8emstreamlsEh+0xa4>
    3200:	69 5c       	subi	r22, 0xC9	; 201
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <_ZN8emstreamlsEh+0xa6>
    3204:	60 5d       	subi	r22, 0xD0	; 208
    3206:	c8 01       	movw	r24, r16
    3208:	19 95       	eicall
    320a:	6e 2d       	mov	r22, r14
    320c:	6f 70       	andi	r22, 0x0F	; 15
    320e:	d8 01       	movw	r26, r16
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	02 80       	ldd	r0, Z+2	; 0x02
    3216:	f3 81       	ldd	r31, Z+3	; 0x03
    3218:	e0 2d       	mov	r30, r0
    321a:	6a 30       	cpi	r22, 0x0A	; 10
    321c:	10 f0       	brcs	.+4      	; 0x3222 <_ZN8emstreamlsEh+0xc2>
    321e:	69 5c       	subi	r22, 0xC9	; 201
    3220:	01 c0       	rjmp	.+2      	; 0x3224 <_ZN8emstreamlsEh+0xc4>
    3222:	60 5d       	subi	r22, 0xD0	; 208
    3224:	c8 01       	movw	r24, r16
    3226:	19 95       	eicall
    3228:	0e c0       	rjmp	.+28     	; 0x3246 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	be 01       	movw	r22, r28
    322e:	6f 5f       	subi	r22, 0xFF	; 255
    3230:	7f 4f       	sbci	r23, 0xFF	; 255
    3232:	8e 2d       	mov	r24, r14
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <utoa>
    323a:	be 01       	movw	r22, r28
    323c:	6f 5f       	subi	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	c8 01       	movw	r24, r16
    3242:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    3246:	c8 01       	movw	r24, r16
    3248:	29 96       	adiw	r28, 0x09	; 9
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	df 90       	pop	r13
    325c:	cf 90       	pop	r12
    325e:	08 95       	ret

00003260 <_ZN5rs2327putcharEc>:
    3260:	dc 01       	movw	r26, r24
    3262:	50 96       	adiw	r26, 0x10	; 16
    3264:	ed 91       	ld	r30, X+
    3266:	fc 91       	ld	r31, X
    3268:	51 97       	sbiw	r26, 0x11	; 17
    326a:	80 81       	ld	r24, Z
    326c:	54 96       	adiw	r26, 0x14	; 20
    326e:	4c 91       	ld	r20, X
    3270:	54 97       	sbiw	r26, 0x14	; 20
    3272:	84 23       	and	r24, r20
    3274:	29 f0       	breq	.+10     	; 0x3280 <_ZN5rs2327putcharEc+0x20>
    3276:	09 c0       	rjmp	.+18     	; 0x328a <_ZN5rs2327putcharEc+0x2a>
    3278:	21 50       	subi	r18, 0x01	; 1
    327a:	31 09       	sbc	r19, r1
    327c:	19 f4       	brne	.+6      	; 0x3284 <_ZN5rs2327putcharEc+0x24>
    327e:	12 c0       	rjmp	.+36     	; 0x32a4 <_ZN5rs2327putcharEc+0x44>
    3280:	21 e2       	ldi	r18, 0x21	; 33
    3282:	3e e4       	ldi	r19, 0x4E	; 78
    3284:	90 81       	ld	r25, Z
    3286:	94 23       	and	r25, r20
    3288:	b9 f3       	breq	.-18     	; 0x3278 <_ZN5rs2327putcharEc+0x18>
    328a:	90 81       	ld	r25, Z
    328c:	56 96       	adiw	r26, 0x16	; 22
    328e:	8c 91       	ld	r24, X
    3290:	56 97       	sbiw	r26, 0x16	; 22
    3292:	89 2b       	or	r24, r25
    3294:	80 83       	st	Z, r24
    3296:	1e 96       	adiw	r26, 0x0e	; 14
    3298:	ed 91       	ld	r30, X+
    329a:	fc 91       	ld	r31, X
    329c:	1f 97       	sbiw	r26, 0x0f	; 15
    329e:	60 83       	st	Z, r22
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	08 95       	ret
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	08 95       	ret

000032a8 <_ZN5rs2327getcharEv>:
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	fc 01       	movw	r30, r24
    32ae:	c1 8d       	ldd	r28, Z+25	; 0x19
    32b0:	d2 8d       	ldd	r29, Z+26	; 0x1a
    32b2:	28 81       	ld	r18, Y
    32b4:	39 81       	ldd	r19, Y+1	; 0x01
    32b6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    32b8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    32ba:	4d 91       	ld	r20, X+
    32bc:	5c 91       	ld	r21, X
    32be:	24 17       	cp	r18, r20
    32c0:	35 07       	cpc	r19, r21
    32c2:	e9 f3       	breq	.-6      	; 0x32be <_ZN5rs2327getcharEv+0x16>
    32c4:	a7 89       	ldd	r26, Z+23	; 0x17
    32c6:	b0 8d       	ldd	r27, Z+24	; 0x18
    32c8:	0d 90       	ld	r0, X+
    32ca:	bc 91       	ld	r27, X
    32cc:	a0 2d       	mov	r26, r0
    32ce:	a2 0f       	add	r26, r18
    32d0:	b3 1f       	adc	r27, r19
    32d2:	8c 91       	ld	r24, X
    32d4:	2f 5f       	subi	r18, 0xFF	; 255
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	28 83       	st	Y, r18
    32da:	39 83       	std	Y+1, r19	; 0x01
    32dc:	24 36       	cpi	r18, 0x64	; 100
    32de:	31 05       	cpc	r19, r1
    32e0:	28 f0       	brcs	.+10     	; 0x32ec <_ZN5rs2327getcharEv+0x44>
    32e2:	01 8c       	ldd	r0, Z+25	; 0x19
    32e4:	f2 8d       	ldd	r31, Z+26	; 0x1a
    32e6:	e0 2d       	mov	r30, r0
    32e8:	10 82       	st	Z, r1
    32ea:	11 82       	std	Z+1, r1	; 0x01
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <_ZN5rs23214check_for_charEv>:
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	ec 01       	movw	r28, r24
    32fa:	a9 8d       	ldd	r26, Y+25	; 0x19
    32fc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    32fe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3300:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	4d 91       	ld	r20, X+
    3306:	5c 91       	ld	r21, X
    3308:	20 81       	ld	r18, Z
    330a:	31 81       	ldd	r19, Z+1	; 0x01
    330c:	42 17       	cp	r20, r18
    330e:	53 07       	cpc	r21, r19
    3310:	09 f4       	brne	.+2      	; 0x3314 <_ZN5rs23214check_for_charEv+0x20>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	08 95       	ret

0000331a <_ZN5rs23212clear_screenEv>:
    331a:	dc 01       	movw	r26, r24
    331c:	ed 91       	ld	r30, X+
    331e:	fc 91       	ld	r31, X
    3320:	02 80       	ldd	r0, Z+2	; 0x02
    3322:	f3 81       	ldd	r31, Z+3	; 0x03
    3324:	e0 2d       	mov	r30, r0
    3326:	6c e0       	ldi	r22, 0x0C	; 12
    3328:	19 95       	eicall
    332a:	08 95       	ret

0000332c <_ZN5rs232C1EjP12USART_struct>:
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	ec 01       	movw	r28, r24
    333a:	7b 01       	movw	r14, r22
    333c:	8a 01       	movw	r16, r20
    333e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN8emstreamC1Ev>
    3342:	a8 01       	movw	r20, r16
    3344:	b7 01       	movw	r22, r14
    3346:	ce 01       	movw	r24, r28
    3348:	08 96       	adiw	r24, 0x08	; 8
    334a:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZN7base232C1EjP12USART_struct>
    334e:	86 e9       	ldi	r24, 0x96	; 150
    3350:	90 e2       	ldi	r25, 0x20	; 32
    3352:	88 83       	st	Y, r24
    3354:	99 83       	std	Y+1, r25	; 0x01
    3356:	00 3a       	cpi	r16, 0xA0	; 160
    3358:	88 e0       	ldi	r24, 0x08	; 8
    335a:	18 07       	cpc	r17, r24
    335c:	69 f4       	brne	.+26     	; 0x3378 <_ZN5rs232C1EjP12USART_struct+0x4c>
    335e:	8e e7       	ldi	r24, 0x7E	; 126
    3360:	91 e3       	ldi	r25, 0x31	; 49
    3362:	8f 8b       	std	Y+23, r24	; 0x17
    3364:	98 8f       	std	Y+24, r25	; 0x18
    3366:	84 e7       	ldi	r24, 0x74	; 116
    3368:	91 e3       	ldi	r25, 0x31	; 49
    336a:	89 8f       	std	Y+25, r24	; 0x19
    336c:	9a 8f       	std	Y+26, r25	; 0x1a
    336e:	8a e6       	ldi	r24, 0x6A	; 106
    3370:	91 e3       	ldi	r25, 0x31	; 49
    3372:	8b 8f       	std	Y+27, r24	; 0x1b
    3374:	9c 8f       	std	Y+28, r25	; 0x1c
    3376:	42 c0       	rjmp	.+132    	; 0x33fc <_ZN5rs232C1EjP12USART_struct+0xd0>
    3378:	00 3b       	cpi	r16, 0xB0	; 176
    337a:	e8 e0       	ldi	r30, 0x08	; 8
    337c:	1e 07       	cpc	r17, r30
    337e:	69 f4       	brne	.+26     	; 0x339a <_ZN5rs232C1EjP12USART_struct+0x6e>
    3380:	8c e7       	ldi	r24, 0x7C	; 124
    3382:	91 e3       	ldi	r25, 0x31	; 49
    3384:	8f 8b       	std	Y+23, r24	; 0x17
    3386:	98 8f       	std	Y+24, r25	; 0x18
    3388:	82 e7       	ldi	r24, 0x72	; 114
    338a:	91 e3       	ldi	r25, 0x31	; 49
    338c:	89 8f       	std	Y+25, r24	; 0x19
    338e:	9a 8f       	std	Y+26, r25	; 0x1a
    3390:	88 e6       	ldi	r24, 0x68	; 104
    3392:	91 e3       	ldi	r25, 0x31	; 49
    3394:	8b 8f       	std	Y+27, r24	; 0x1b
    3396:	9c 8f       	std	Y+28, r25	; 0x1c
    3398:	31 c0       	rjmp	.+98     	; 0x33fc <_ZN5rs232C1EjP12USART_struct+0xd0>
    339a:	00 3a       	cpi	r16, 0xA0	; 160
    339c:	f9 e0       	ldi	r31, 0x09	; 9
    339e:	1f 07       	cpc	r17, r31
    33a0:	69 f4       	brne	.+26     	; 0x33bc <_ZN5rs232C1EjP12USART_struct+0x90>
    33a2:	8a e7       	ldi	r24, 0x7A	; 122
    33a4:	91 e3       	ldi	r25, 0x31	; 49
    33a6:	8f 8b       	std	Y+23, r24	; 0x17
    33a8:	98 8f       	std	Y+24, r25	; 0x18
    33aa:	80 e7       	ldi	r24, 0x70	; 112
    33ac:	91 e3       	ldi	r25, 0x31	; 49
    33ae:	89 8f       	std	Y+25, r24	; 0x19
    33b0:	9a 8f       	std	Y+26, r25	; 0x1a
    33b2:	86 e6       	ldi	r24, 0x66	; 102
    33b4:	91 e3       	ldi	r25, 0x31	; 49
    33b6:	8b 8f       	std	Y+27, r24	; 0x1b
    33b8:	9c 8f       	std	Y+28, r25	; 0x1c
    33ba:	20 c0       	rjmp	.+64     	; 0x33fc <_ZN5rs232C1EjP12USART_struct+0xd0>
    33bc:	00 3b       	cpi	r16, 0xB0	; 176
    33be:	89 e0       	ldi	r24, 0x09	; 9
    33c0:	18 07       	cpc	r17, r24
    33c2:	69 f4       	brne	.+26     	; 0x33de <_ZN5rs232C1EjP12USART_struct+0xb2>
    33c4:	88 e7       	ldi	r24, 0x78	; 120
    33c6:	91 e3       	ldi	r25, 0x31	; 49
    33c8:	8f 8b       	std	Y+23, r24	; 0x17
    33ca:	98 8f       	std	Y+24, r25	; 0x18
    33cc:	8e e6       	ldi	r24, 0x6E	; 110
    33ce:	91 e3       	ldi	r25, 0x31	; 49
    33d0:	89 8f       	std	Y+25, r24	; 0x19
    33d2:	9a 8f       	std	Y+26, r25	; 0x1a
    33d4:	84 e6       	ldi	r24, 0x64	; 100
    33d6:	91 e3       	ldi	r25, 0x31	; 49
    33d8:	8b 8f       	std	Y+27, r24	; 0x1b
    33da:	9c 8f       	std	Y+28, r25	; 0x1c
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <_ZN5rs232C1EjP12USART_struct+0xd0>
    33de:	00 3a       	cpi	r16, 0xA0	; 160
    33e0:	1a 40       	sbci	r17, 0x0A	; 10
    33e2:	61 f4       	brne	.+24     	; 0x33fc <_ZN5rs232C1EjP12USART_struct+0xd0>
    33e4:	86 e7       	ldi	r24, 0x76	; 118
    33e6:	91 e3       	ldi	r25, 0x31	; 49
    33e8:	8f 8b       	std	Y+23, r24	; 0x17
    33ea:	98 8f       	std	Y+24, r25	; 0x18
    33ec:	8c e6       	ldi	r24, 0x6C	; 108
    33ee:	91 e3       	ldi	r25, 0x31	; 49
    33f0:	89 8f       	std	Y+25, r24	; 0x19
    33f2:	9a 8f       	std	Y+26, r25	; 0x1a
    33f4:	82 e6       	ldi	r24, 0x62	; 98
    33f6:	91 e3       	ldi	r25, 0x31	; 49
    33f8:	8b 8f       	std	Y+27, r24	; 0x1b
    33fa:	9c 8f       	std	Y+28, r25	; 0x1c
    33fc:	0f 89       	ldd	r16, Y+23	; 0x17
    33fe:	18 8d       	ldd	r17, Y+24	; 0x18
    3400:	84 e6       	ldi	r24, 0x64	; 100
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_Znaj>
    3408:	f8 01       	movw	r30, r16
    340a:	80 83       	st	Z, r24
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	e9 8d       	ldd	r30, Y+25	; 0x19
    3410:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3412:	10 82       	st	Z, r1
    3414:	11 82       	std	Z+1, r1	; 0x01
    3416:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3418:	fc 8d       	ldd	r31, Y+28	; 0x1c
    341a:	10 82       	st	Z, r1
    341c:	11 82       	std	Z+1, r1	; 0x01
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	ff 90       	pop	r15
    3428:	ef 90       	pop	r14
    342a:	08 95       	ret

0000342c <__vector_25>:
    342c:	1f 92       	push	r1
    342e:	0f 92       	push	r0
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	0f 92       	push	r0
    3434:	11 24       	eor	r1, r1
    3436:	08 b6       	in	r0, 0x38	; 56
    3438:	0f 92       	push	r0
    343a:	18 be       	out	0x38, r1	; 56
    343c:	0b b6       	in	r0, 0x3b	; 59
    343e:	0f 92       	push	r0
    3440:	1b be       	out	0x3b, r1	; 59
    3442:	2f 93       	push	r18
    3444:	3f 93       	push	r19
    3446:	8f 93       	push	r24
    3448:	9f 93       	push	r25
    344a:	ef 93       	push	r30
    344c:	ff 93       	push	r31
    344e:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    3452:	e0 91 7e 31 	lds	r30, 0x317E	; 0x80317e <rcvC0_buffer>
    3456:	f0 91 7f 31 	lds	r31, 0x317F	; 0x80317f <rcvC0_buffer+0x1>
    345a:	80 91 6a 31 	lds	r24, 0x316A	; 0x80316a <rcvC0_write_index>
    345e:	90 91 6b 31 	lds	r25, 0x316B	; 0x80316b <rcvC0_write_index+0x1>
    3462:	e8 0f       	add	r30, r24
    3464:	f9 1f       	adc	r31, r25
    3466:	20 83       	st	Z, r18
    3468:	80 91 6a 31 	lds	r24, 0x316A	; 0x80316a <rcvC0_write_index>
    346c:	90 91 6b 31 	lds	r25, 0x316B	; 0x80316b <rcvC0_write_index+0x1>
    3470:	01 96       	adiw	r24, 0x01	; 1
    3472:	84 36       	cpi	r24, 0x64	; 100
    3474:	91 05       	cpc	r25, r1
    3476:	60 f4       	brcc	.+24     	; 0x3490 <__vector_25+0x64>
    3478:	80 93 6a 31 	sts	0x316A, r24	; 0x80316a <rcvC0_write_index>
    347c:	90 93 6b 31 	sts	0x316B, r25	; 0x80316b <rcvC0_write_index+0x1>
    3480:	20 91 74 31 	lds	r18, 0x3174	; 0x803174 <rcvC0_read_index>
    3484:	30 91 75 31 	lds	r19, 0x3175	; 0x803175 <rcvC0_read_index+0x1>
    3488:	82 17       	cp	r24, r18
    348a:	93 07       	cpc	r25, r19
    348c:	f1 f4       	brne	.+60     	; 0x34ca <__vector_25+0x9e>
    348e:	0c c0       	rjmp	.+24     	; 0x34a8 <__vector_25+0x7c>
    3490:	10 92 6a 31 	sts	0x316A, r1	; 0x80316a <rcvC0_write_index>
    3494:	10 92 6b 31 	sts	0x316B, r1	; 0x80316b <rcvC0_write_index+0x1>
    3498:	80 91 74 31 	lds	r24, 0x3174	; 0x803174 <rcvC0_read_index>
    349c:	90 91 75 31 	lds	r25, 0x3175	; 0x803175 <rcvC0_read_index+0x1>
    34a0:	18 16       	cp	r1, r24
    34a2:	19 06       	cpc	r1, r25
    34a4:	91 f4       	brne	.+36     	; 0x34ca <__vector_25+0x9e>
    34a6:	0e c0       	rjmp	.+28     	; 0x34c4 <__vector_25+0x98>
    34a8:	01 96       	adiw	r24, 0x01	; 1
    34aa:	84 36       	cpi	r24, 0x64	; 100
    34ac:	91 05       	cpc	r25, r1
    34ae:	28 f4       	brcc	.+10     	; 0x34ba <__vector_25+0x8e>
    34b0:	80 93 74 31 	sts	0x3174, r24	; 0x803174 <rcvC0_read_index>
    34b4:	90 93 75 31 	sts	0x3175, r25	; 0x803175 <rcvC0_read_index+0x1>
    34b8:	08 c0       	rjmp	.+16     	; 0x34ca <__vector_25+0x9e>
    34ba:	10 92 74 31 	sts	0x3174, r1	; 0x803174 <rcvC0_read_index>
    34be:	10 92 75 31 	sts	0x3175, r1	; 0x803175 <rcvC0_read_index+0x1>
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <__vector_25+0x9e>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	f3 cf       	rjmp	.-26     	; 0x34b0 <__vector_25+0x84>
    34ca:	ff 91       	pop	r31
    34cc:	ef 91       	pop	r30
    34ce:	9f 91       	pop	r25
    34d0:	8f 91       	pop	r24
    34d2:	3f 91       	pop	r19
    34d4:	2f 91       	pop	r18
    34d6:	0f 90       	pop	r0
    34d8:	0b be       	out	0x3b, r0	; 59
    34da:	0f 90       	pop	r0
    34dc:	08 be       	out	0x38, r0	; 56
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	0f 90       	pop	r0
    34e4:	1f 90       	pop	r1
    34e6:	18 95       	reti

000034e8 <__vector_28>:
    34e8:	1f 92       	push	r1
    34ea:	0f 92       	push	r0
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	0f 92       	push	r0
    34f0:	11 24       	eor	r1, r1
    34f2:	08 b6       	in	r0, 0x38	; 56
    34f4:	0f 92       	push	r0
    34f6:	18 be       	out	0x38, r1	; 56
    34f8:	0b b6       	in	r0, 0x3b	; 59
    34fa:	0f 92       	push	r0
    34fc:	1b be       	out	0x3b, r1	; 59
    34fe:	2f 93       	push	r18
    3500:	3f 93       	push	r19
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	ef 93       	push	r30
    3508:	ff 93       	push	r31
    350a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    350e:	e0 91 7c 31 	lds	r30, 0x317C	; 0x80317c <rcvC1_buffer>
    3512:	f0 91 7d 31 	lds	r31, 0x317D	; 0x80317d <rcvC1_buffer+0x1>
    3516:	80 91 68 31 	lds	r24, 0x3168	; 0x803168 <rcvC1_write_index>
    351a:	90 91 69 31 	lds	r25, 0x3169	; 0x803169 <rcvC1_write_index+0x1>
    351e:	e8 0f       	add	r30, r24
    3520:	f9 1f       	adc	r31, r25
    3522:	20 83       	st	Z, r18
    3524:	80 91 68 31 	lds	r24, 0x3168	; 0x803168 <rcvC1_write_index>
    3528:	90 91 69 31 	lds	r25, 0x3169	; 0x803169 <rcvC1_write_index+0x1>
    352c:	01 96       	adiw	r24, 0x01	; 1
    352e:	84 36       	cpi	r24, 0x64	; 100
    3530:	91 05       	cpc	r25, r1
    3532:	60 f4       	brcc	.+24     	; 0x354c <__vector_28+0x64>
    3534:	80 93 68 31 	sts	0x3168, r24	; 0x803168 <rcvC1_write_index>
    3538:	90 93 69 31 	sts	0x3169, r25	; 0x803169 <rcvC1_write_index+0x1>
    353c:	20 91 72 31 	lds	r18, 0x3172	; 0x803172 <rcvC1_read_index>
    3540:	30 91 73 31 	lds	r19, 0x3173	; 0x803173 <rcvC1_read_index+0x1>
    3544:	82 17       	cp	r24, r18
    3546:	93 07       	cpc	r25, r19
    3548:	f1 f4       	brne	.+60     	; 0x3586 <__vector_28+0x9e>
    354a:	0c c0       	rjmp	.+24     	; 0x3564 <__vector_28+0x7c>
    354c:	10 92 68 31 	sts	0x3168, r1	; 0x803168 <rcvC1_write_index>
    3550:	10 92 69 31 	sts	0x3169, r1	; 0x803169 <rcvC1_write_index+0x1>
    3554:	80 91 72 31 	lds	r24, 0x3172	; 0x803172 <rcvC1_read_index>
    3558:	90 91 73 31 	lds	r25, 0x3173	; 0x803173 <rcvC1_read_index+0x1>
    355c:	18 16       	cp	r1, r24
    355e:	19 06       	cpc	r1, r25
    3560:	91 f4       	brne	.+36     	; 0x3586 <__vector_28+0x9e>
    3562:	0e c0       	rjmp	.+28     	; 0x3580 <__vector_28+0x98>
    3564:	01 96       	adiw	r24, 0x01	; 1
    3566:	84 36       	cpi	r24, 0x64	; 100
    3568:	91 05       	cpc	r25, r1
    356a:	28 f4       	brcc	.+10     	; 0x3576 <__vector_28+0x8e>
    356c:	80 93 72 31 	sts	0x3172, r24	; 0x803172 <rcvC1_read_index>
    3570:	90 93 73 31 	sts	0x3173, r25	; 0x803173 <rcvC1_read_index+0x1>
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <__vector_28+0x9e>
    3576:	10 92 72 31 	sts	0x3172, r1	; 0x803172 <rcvC1_read_index>
    357a:	10 92 73 31 	sts	0x3173, r1	; 0x803173 <rcvC1_read_index+0x1>
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <__vector_28+0x9e>
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	f3 cf       	rjmp	.-26     	; 0x356c <__vector_28+0x84>
    3586:	ff 91       	pop	r31
    3588:	ef 91       	pop	r30
    358a:	9f 91       	pop	r25
    358c:	8f 91       	pop	r24
    358e:	3f 91       	pop	r19
    3590:	2f 91       	pop	r18
    3592:	0f 90       	pop	r0
    3594:	0b be       	out	0x3b, r0	; 59
    3596:	0f 90       	pop	r0
    3598:	08 be       	out	0x38, r0	; 56
    359a:	0f 90       	pop	r0
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	0f 90       	pop	r0
    35a0:	1f 90       	pop	r1
    35a2:	18 95       	reti

000035a4 <__vector_88>:
    35a4:	1f 92       	push	r1
    35a6:	0f 92       	push	r0
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	0f 92       	push	r0
    35ac:	11 24       	eor	r1, r1
    35ae:	08 b6       	in	r0, 0x38	; 56
    35b0:	0f 92       	push	r0
    35b2:	18 be       	out	0x38, r1	; 56
    35b4:	0b b6       	in	r0, 0x3b	; 59
    35b6:	0f 92       	push	r0
    35b8:	1b be       	out	0x3b, r1	; 59
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	8f 93       	push	r24
    35c0:	9f 93       	push	r25
    35c2:	ef 93       	push	r30
    35c4:	ff 93       	push	r31
    35c6:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    35ca:	e0 91 7a 31 	lds	r30, 0x317A	; 0x80317a <rcvD0_buffer>
    35ce:	f0 91 7b 31 	lds	r31, 0x317B	; 0x80317b <rcvD0_buffer+0x1>
    35d2:	80 91 6a 31 	lds	r24, 0x316A	; 0x80316a <rcvC0_write_index>
    35d6:	90 91 6b 31 	lds	r25, 0x316B	; 0x80316b <rcvC0_write_index+0x1>
    35da:	e8 0f       	add	r30, r24
    35dc:	f9 1f       	adc	r31, r25
    35de:	20 83       	st	Z, r18
    35e0:	80 91 66 31 	lds	r24, 0x3166	; 0x803166 <rcvD0_write_index>
    35e4:	90 91 67 31 	lds	r25, 0x3167	; 0x803167 <rcvD0_write_index+0x1>
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	84 36       	cpi	r24, 0x64	; 100
    35ec:	91 05       	cpc	r25, r1
    35ee:	60 f4       	brcc	.+24     	; 0x3608 <__vector_88+0x64>
    35f0:	80 93 66 31 	sts	0x3166, r24	; 0x803166 <rcvD0_write_index>
    35f4:	90 93 67 31 	sts	0x3167, r25	; 0x803167 <rcvD0_write_index+0x1>
    35f8:	20 91 70 31 	lds	r18, 0x3170	; 0x803170 <rcvD0_read_index>
    35fc:	30 91 71 31 	lds	r19, 0x3171	; 0x803171 <rcvD0_read_index+0x1>
    3600:	82 17       	cp	r24, r18
    3602:	93 07       	cpc	r25, r19
    3604:	f1 f4       	brne	.+60     	; 0x3642 <__vector_88+0x9e>
    3606:	0c c0       	rjmp	.+24     	; 0x3620 <__vector_88+0x7c>
    3608:	10 92 66 31 	sts	0x3166, r1	; 0x803166 <rcvD0_write_index>
    360c:	10 92 67 31 	sts	0x3167, r1	; 0x803167 <rcvD0_write_index+0x1>
    3610:	80 91 70 31 	lds	r24, 0x3170	; 0x803170 <rcvD0_read_index>
    3614:	90 91 71 31 	lds	r25, 0x3171	; 0x803171 <rcvD0_read_index+0x1>
    3618:	18 16       	cp	r1, r24
    361a:	19 06       	cpc	r1, r25
    361c:	91 f4       	brne	.+36     	; 0x3642 <__vector_88+0x9e>
    361e:	0e c0       	rjmp	.+28     	; 0x363c <__vector_88+0x98>
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	84 36       	cpi	r24, 0x64	; 100
    3624:	91 05       	cpc	r25, r1
    3626:	28 f4       	brcc	.+10     	; 0x3632 <__vector_88+0x8e>
    3628:	80 93 70 31 	sts	0x3170, r24	; 0x803170 <rcvD0_read_index>
    362c:	90 93 71 31 	sts	0x3171, r25	; 0x803171 <rcvD0_read_index+0x1>
    3630:	08 c0       	rjmp	.+16     	; 0x3642 <__vector_88+0x9e>
    3632:	10 92 70 31 	sts	0x3170, r1	; 0x803170 <rcvD0_read_index>
    3636:	10 92 71 31 	sts	0x3171, r1	; 0x803171 <rcvD0_read_index+0x1>
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <__vector_88+0x9e>
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	f3 cf       	rjmp	.-26     	; 0x3628 <__vector_88+0x84>
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	9f 91       	pop	r25
    3648:	8f 91       	pop	r24
    364a:	3f 91       	pop	r19
    364c:	2f 91       	pop	r18
    364e:	0f 90       	pop	r0
    3650:	0b be       	out	0x3b, r0	; 59
    3652:	0f 90       	pop	r0
    3654:	08 be       	out	0x38, r0	; 56
    3656:	0f 90       	pop	r0
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	0f 90       	pop	r0
    365c:	1f 90       	pop	r1
    365e:	18 95       	reti

00003660 <__vector_91>:
    3660:	1f 92       	push	r1
    3662:	0f 92       	push	r0
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	0f 92       	push	r0
    3668:	11 24       	eor	r1, r1
    366a:	08 b6       	in	r0, 0x38	; 56
    366c:	0f 92       	push	r0
    366e:	18 be       	out	0x38, r1	; 56
    3670:	0b b6       	in	r0, 0x3b	; 59
    3672:	0f 92       	push	r0
    3674:	1b be       	out	0x3b, r1	; 59
    3676:	2f 93       	push	r18
    3678:	3f 93       	push	r19
    367a:	8f 93       	push	r24
    367c:	9f 93       	push	r25
    367e:	ef 93       	push	r30
    3680:	ff 93       	push	r31
    3682:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    3686:	e0 91 78 31 	lds	r30, 0x3178	; 0x803178 <rcvD1_buffer>
    368a:	f0 91 79 31 	lds	r31, 0x3179	; 0x803179 <rcvD1_buffer+0x1>
    368e:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <rcvD1_write_index>
    3692:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <rcvD1_write_index+0x1>
    3696:	e8 0f       	add	r30, r24
    3698:	f9 1f       	adc	r31, r25
    369a:	20 83       	st	Z, r18
    369c:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <rcvD1_write_index>
    36a0:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <rcvD1_write_index+0x1>
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	84 36       	cpi	r24, 0x64	; 100
    36a8:	91 05       	cpc	r25, r1
    36aa:	60 f4       	brcc	.+24     	; 0x36c4 <__vector_91+0x64>
    36ac:	80 93 64 31 	sts	0x3164, r24	; 0x803164 <rcvD1_write_index>
    36b0:	90 93 65 31 	sts	0x3165, r25	; 0x803165 <rcvD1_write_index+0x1>
    36b4:	20 91 6e 31 	lds	r18, 0x316E	; 0x80316e <rcvD1_read_index>
    36b8:	30 91 6f 31 	lds	r19, 0x316F	; 0x80316f <rcvD1_read_index+0x1>
    36bc:	82 17       	cp	r24, r18
    36be:	93 07       	cpc	r25, r19
    36c0:	f1 f4       	brne	.+60     	; 0x36fe <__vector_91+0x9e>
    36c2:	0c c0       	rjmp	.+24     	; 0x36dc <__vector_91+0x7c>
    36c4:	10 92 64 31 	sts	0x3164, r1	; 0x803164 <rcvD1_write_index>
    36c8:	10 92 65 31 	sts	0x3165, r1	; 0x803165 <rcvD1_write_index+0x1>
    36cc:	80 91 6e 31 	lds	r24, 0x316E	; 0x80316e <rcvD1_read_index>
    36d0:	90 91 6f 31 	lds	r25, 0x316F	; 0x80316f <rcvD1_read_index+0x1>
    36d4:	18 16       	cp	r1, r24
    36d6:	19 06       	cpc	r1, r25
    36d8:	91 f4       	brne	.+36     	; 0x36fe <__vector_91+0x9e>
    36da:	0e c0       	rjmp	.+28     	; 0x36f8 <__vector_91+0x98>
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	84 36       	cpi	r24, 0x64	; 100
    36e0:	91 05       	cpc	r25, r1
    36e2:	28 f4       	brcc	.+10     	; 0x36ee <__vector_91+0x8e>
    36e4:	80 93 6e 31 	sts	0x316E, r24	; 0x80316e <rcvD1_read_index>
    36e8:	90 93 6f 31 	sts	0x316F, r25	; 0x80316f <rcvD1_read_index+0x1>
    36ec:	08 c0       	rjmp	.+16     	; 0x36fe <__vector_91+0x9e>
    36ee:	10 92 6e 31 	sts	0x316E, r1	; 0x80316e <rcvD1_read_index>
    36f2:	10 92 6f 31 	sts	0x316F, r1	; 0x80316f <rcvD1_read_index+0x1>
    36f6:	03 c0       	rjmp	.+6      	; 0x36fe <__vector_91+0x9e>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	f3 cf       	rjmp	.-26     	; 0x36e4 <__vector_91+0x84>
    36fe:	ff 91       	pop	r31
    3700:	ef 91       	pop	r30
    3702:	9f 91       	pop	r25
    3704:	8f 91       	pop	r24
    3706:	3f 91       	pop	r19
    3708:	2f 91       	pop	r18
    370a:	0f 90       	pop	r0
    370c:	0b be       	out	0x3b, r0	; 59
    370e:	0f 90       	pop	r0
    3710:	08 be       	out	0x38, r0	; 56
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	0f 90       	pop	r0
    3718:	1f 90       	pop	r1
    371a:	18 95       	reti

0000371c <__vector_58>:
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	08 b6       	in	r0, 0x38	; 56
    3728:	0f 92       	push	r0
    372a:	18 be       	out	0x38, r1	; 56
    372c:	0b b6       	in	r0, 0x3b	; 59
    372e:	0f 92       	push	r0
    3730:	1b be       	out	0x3b, r1	; 59
    3732:	2f 93       	push	r18
    3734:	3f 93       	push	r19
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	ef 93       	push	r30
    373c:	ff 93       	push	r31
    373e:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    3742:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <rcvE0_buffer>
    3746:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <rcvE0_buffer+0x1>
    374a:	80 91 62 31 	lds	r24, 0x3162	; 0x803162 <rcvE0_write_index>
    374e:	90 91 63 31 	lds	r25, 0x3163	; 0x803163 <rcvE0_write_index+0x1>
    3752:	e8 0f       	add	r30, r24
    3754:	f9 1f       	adc	r31, r25
    3756:	20 83       	st	Z, r18
    3758:	80 91 62 31 	lds	r24, 0x3162	; 0x803162 <rcvE0_write_index>
    375c:	90 91 63 31 	lds	r25, 0x3163	; 0x803163 <rcvE0_write_index+0x1>
    3760:	01 96       	adiw	r24, 0x01	; 1
    3762:	84 36       	cpi	r24, 0x64	; 100
    3764:	91 05       	cpc	r25, r1
    3766:	60 f4       	brcc	.+24     	; 0x3780 <__vector_58+0x64>
    3768:	80 93 62 31 	sts	0x3162, r24	; 0x803162 <rcvE0_write_index>
    376c:	90 93 63 31 	sts	0x3163, r25	; 0x803163 <rcvE0_write_index+0x1>
    3770:	20 91 6c 31 	lds	r18, 0x316C	; 0x80316c <rcvE0_read_index>
    3774:	30 91 6d 31 	lds	r19, 0x316D	; 0x80316d <rcvE0_read_index+0x1>
    3778:	82 17       	cp	r24, r18
    377a:	93 07       	cpc	r25, r19
    377c:	f1 f4       	brne	.+60     	; 0x37ba <__vector_58+0x9e>
    377e:	0c c0       	rjmp	.+24     	; 0x3798 <__vector_58+0x7c>
    3780:	10 92 62 31 	sts	0x3162, r1	; 0x803162 <rcvE0_write_index>
    3784:	10 92 63 31 	sts	0x3163, r1	; 0x803163 <rcvE0_write_index+0x1>
    3788:	80 91 6c 31 	lds	r24, 0x316C	; 0x80316c <rcvE0_read_index>
    378c:	90 91 6d 31 	lds	r25, 0x316D	; 0x80316d <rcvE0_read_index+0x1>
    3790:	18 16       	cp	r1, r24
    3792:	19 06       	cpc	r1, r25
    3794:	91 f4       	brne	.+36     	; 0x37ba <__vector_58+0x9e>
    3796:	0e c0       	rjmp	.+28     	; 0x37b4 <__vector_58+0x98>
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	84 36       	cpi	r24, 0x64	; 100
    379c:	91 05       	cpc	r25, r1
    379e:	28 f4       	brcc	.+10     	; 0x37aa <__vector_58+0x8e>
    37a0:	80 93 6c 31 	sts	0x316C, r24	; 0x80316c <rcvE0_read_index>
    37a4:	90 93 6d 31 	sts	0x316D, r25	; 0x80316d <rcvE0_read_index+0x1>
    37a8:	08 c0       	rjmp	.+16     	; 0x37ba <__vector_58+0x9e>
    37aa:	10 92 6c 31 	sts	0x316C, r1	; 0x80316c <rcvE0_read_index>
    37ae:	10 92 6d 31 	sts	0x316D, r1	; 0x80316d <rcvE0_read_index+0x1>
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <__vector_58+0x9e>
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	f3 cf       	rjmp	.-26     	; 0x37a0 <__vector_58+0x84>
    37ba:	ff 91       	pop	r31
    37bc:	ef 91       	pop	r30
    37be:	9f 91       	pop	r25
    37c0:	8f 91       	pop	r24
    37c2:	3f 91       	pop	r19
    37c4:	2f 91       	pop	r18
    37c6:	0f 90       	pop	r0
    37c8:	0b be       	out	0x3b, r0	; 59
    37ca:	0f 90       	pop	r0
    37cc:	08 be       	out	0x38, r0	; 56
    37ce:	0f 90       	pop	r0
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	0f 90       	pop	r0
    37d4:	1f 90       	pop	r1
    37d6:	18 95       	reti

000037d8 <_Z8CCPWritePVhh>:
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    37d8:	0f 93       	push	r16
    37da:	cf 93       	push	r28
    37dc:	df 93       	push	r29
    37de:	1f 92       	push	r1
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    37e4:	2f b7       	in	r18, 0x3f	; 63
    37e6:	29 83       	std	Y+1, r18	; 0x01
	cli();
    37e8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    37ea:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    37ec:	fc 01       	movw	r30, r24
    37ee:	08 ed       	ldi	r16, 0xD8	; 216
    37f0:	04 bf       	out	0x34, r16	; 52
    37f2:	60 83       	st	Z, r22

	SREG = saved_sreg;
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    37f8:	0f 90       	pop	r0
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	0f 91       	pop	r16
    3800:	08 95       	ret

00003802 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    3802:	ef 92       	push	r14
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	6d 97       	sbiw	r28, 0x1d	; 29
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	de bf       	out	0x3e, r29	; 62
	// Set up pins for LED output
	PORTD.DIRSET = PIN4_bm;									// set pin D4 as output LED0: turns on when power is on.
    3816:	e0 e6       	ldi	r30, 0x60	; 96
    3818:	f6 e0       	ldi	r31, 0x06	; 6
    381a:	80 e1       	ldi	r24, 0x10	; 16
    381c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = PIN4_bm;									// set pin high, LED 1
    381e:	85 83       	std	Z+5, r24	; 0x05
	//PORTD.DIRSET = PIN6_bm;
	//PORTD.OUTSET = PIN6_bm;
	
	

	cli();
    3820:	f8 94       	cli
	// Configure the system clock
	{
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    3822:	e0 e5       	ldi	r30, 0x50	; 80
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	82 60       	ori	r24, 0x02	; 2
    382a:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    382c:	81 81       	ldd	r24, Z+1	; 0x01
    382e:	81 ff       	sbrs	r24, 1
    3830:	fd cf       	rjmp	.-6      	; 0x382c <main+0x2a>


		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    3832:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    3836:	68 7f       	andi	r22, 0xF8	; 248
    3838:	61 60       	ori	r22, 0x01	; 1
    383a:	80 e4       	ldi	r24, 0x40	; 64
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));

		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    3842:	e0 e5       	ldi	r30, 0x50	; 80
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	8e 7f       	andi	r24, 0xFE	; 254
    384a:	80 83       	st	Z, r24
	}

	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on
	wdt_disable ();
    384c:	9d ef       	ldi	r25, 0xFD	; 253
    384e:	88 ed       	ldi	r24, 0xD8	; 216
    3850:	08 b6       	in	r0, 0x38	; 56
    3852:	18 be       	out	0x38, r1	; 56
    3854:	84 bf       	out	0x34, r24	; 52
    3856:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    385a:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0, &USARTC1); // Create a serial device on USART C1, baud 115200
    385c:	40 eb       	ldi	r20, 0xB0	; 176
    385e:	58 e0       	ldi	r21, 0x08	; 8
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	70 e0       	ldi	r23, 0x00	; 0
    3864:	ce 01       	movw	r24, r28
    3866:	01 96       	adiw	r24, 0x01	; 1
    3868:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    386c:	67 e0       	ldi	r22, 0x07	; 7
    386e:	ce 01       	movw	r24, r28
    3870:	01 96       	adiw	r24, 0x01	; 1
    3872:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    3876:	8c 01       	movw	r16, r24
    3878:	62 ea       	ldi	r22, 0xA2	; 162
    387a:	70 e2       	ldi	r23, 0x20	; 32
    387c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <_ZN8emstream4putsEPKc>
    3880:	66 e0       	ldi	r22, 0x06	; 6
    3882:	c8 01       	movw	r24, r16
    3884:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>
    3888:	66 e0       	ldi	r22, 0x06	; 6
    388a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN8emstreamlsE15ser_manipulator>

	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 260, &ser_dev);
    388e:	82 e1       	ldi	r24, 0x12	; 18
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    3896:	8e 01       	movw	r16, r28
    3898:	0f 5f       	subi	r16, 0xFF	; 255
    389a:	1f 4f       	sbci	r17, 0xFF	; 255
    389c:	24 e0       	ldi	r18, 0x04	; 4
    389e:	31 e0       	ldi	r19, 0x01	; 1
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	61 ec       	ldi	r22, 0xC1	; 193
    38a4:	70 e2       	ldi	r23, 0x20	; 32
    38a6:	0e 94 b1 04 	call	0x962	; 0x962 <_ZN9task_userC1EPKchjP8emstream>

	new task_limit_switch ("LeftSw", task_priority (6), 260, &ser_dev, (1<<0));
    38aa:	83 e1       	ldi	r24, 0x13	; 19
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    38b2:	ee 24       	eor	r14, r14
    38b4:	e3 94       	inc	r14
    38b6:	24 e0       	ldi	r18, 0x04	; 4
    38b8:	31 e0       	ldi	r19, 0x01	; 1
    38ba:	44 e0       	ldi	r20, 0x04	; 4
    38bc:	69 ec       	ldi	r22, 0xC9	; 201
    38be:	70 e2       	ldi	r23, 0x20	; 32
    38c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN17task_limit_switchC1EPKchjP8emstreamh>
	new task_limit_switch ("RightSw", task_priority (5), 260, &ser_dev, (1<<2));
    38c4:	83 e1       	ldi	r24, 0x13	; 19
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    38cc:	68 94       	set
    38ce:	ee 24       	eor	r14, r14
    38d0:	e2 f8       	bld	r14, 2
    38d2:	24 e0       	ldi	r18, 0x04	; 4
    38d4:	31 e0       	ldi	r19, 0x01	; 1
    38d6:	44 e0       	ldi	r20, 0x04	; 4
    38d8:	60 ed       	ldi	r22, 0xD0	; 208
    38da:	70 e2       	ldi	r23, 0x20	; 32
    38dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN17task_limit_switchC1EPKchjP8emstreamh>
	new task_pendulum_encoder ("EncPen", task_priority (4), 260, &ser_dev);
    38e0:	82 e1       	ldi	r24, 0x12	; 18
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    38e8:	24 e0       	ldi	r18, 0x04	; 4
    38ea:	31 e0       	ldi	r19, 0x01	; 1
    38ec:	44 e0       	ldi	r20, 0x04	; 4
    38ee:	68 ed       	ldi	r22, 0xD8	; 216
    38f0:	70 e2       	ldi	r23, 0x20	; 32
    38f2:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN21task_pendulum_encoderC1EPKchjP8emstream>
	new task_motor_encoder ("EncMtr", task_priority (3), 260, &ser_dev);
    38f6:	82 e1       	ldi	r24, 0x12	; 18
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    38fe:	24 e0       	ldi	r18, 0x04	; 4
    3900:	31 e0       	ldi	r19, 0x01	; 1
    3902:	43 e0       	ldi	r20, 0x03	; 3
    3904:	6f ed       	ldi	r22, 0xDF	; 223
    3906:	70 e2       	ldi	r23, 0x20	; 32
    3908:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN18task_motor_encoderC1EPKchjP8emstream>
	new task_system_controller ("SysCtrl", task_priority (2), 260, &ser_dev);
    390c:	82 e1       	ldi	r24, 0x12	; 18
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    3914:	24 e0       	ldi	r18, 0x04	; 4
    3916:	31 e0       	ldi	r19, 0x01	; 1
    3918:	42 e0       	ldi	r20, 0x02	; 2
    391a:	66 ee       	ldi	r22, 0xE6	; 230
    391c:	70 e2       	ldi	r23, 0x20	; 32
    391e:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN22task_system_controllerC1EPKchjP8emstream>
	new task_motor_command ("MtrCmd", task_priority (1), 260, &ser_dev);
    3922:	82 e1       	ldi	r24, 0x12	; 18
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_Znwj>
    392a:	24 e0       	ldi	r18, 0x04	; 4
    392c:	31 e0       	ldi	r19, 0x01	; 1
    392e:	41 e0       	ldi	r20, 0x01	; 1
    3930:	6e ee       	ldi	r22, 0xEE	; 238
    3932:	70 e2       	ldi	r23, 0x20	; 32
    3934:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN18task_motor_commandC1EPKchjP8emstream>

	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    3938:	87 e0       	ldi	r24, 0x07	; 7
    393a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    393e:	78 94       	sei

	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    3940:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskStartScheduler>

	return 0;
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	6d 96       	adiw	r28, 0x1d	; 29
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	1f 91       	pop	r17
    3954:	0f 91       	pop	r16
    3956:	ef 90       	pop	r14
    3958:	08 95       	ret

0000395a <_GLOBAL__sub_I_counter>:
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
#include "task_motor_encoder.h"				// Header for Motor Controller
#include "task_system_controller.h"			// Header for the system controller
#include "task_motor_command.h"				// Header for the motor command

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    395e:	0a e0       	ldi	r16, 0x0A	; 10
    3960:	10 e0       	ldi	r17, 0x00	; 0
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	60 e2       	ldi	r22, 0x20	; 32
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	84 e8       	ldi	r24, 0x84	; 132
    3970:	91 e3       	ldi	r25, 0x31	; 49
    3972:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN14frt_text_queueC1EjP8emstreamm>
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();

	return 0;
    3976:	1f 91       	pop	r17
    3978:	0f 91       	pop	r16
    397a:	08 95       	ret

0000397c <__mulsi3>:
    397c:	db 01       	movw	r26, r22
    397e:	8f 93       	push	r24
    3980:	9f 93       	push	r25
    3982:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__muluhisi3>
    3986:	bf 91       	pop	r27
    3988:	af 91       	pop	r26
    398a:	a2 9f       	mul	r26, r18
    398c:	80 0d       	add	r24, r0
    398e:	91 1d       	adc	r25, r1
    3990:	a3 9f       	mul	r26, r19
    3992:	90 0d       	add	r25, r0
    3994:	b2 9f       	mul	r27, r18
    3996:	90 0d       	add	r25, r0
    3998:	11 24       	eor	r1, r1
    399a:	08 95       	ret

0000399c <__udivmodsi4>:
    399c:	a1 e2       	ldi	r26, 0x21	; 33
    399e:	1a 2e       	mov	r1, r26
    39a0:	aa 1b       	sub	r26, r26
    39a2:	bb 1b       	sub	r27, r27
    39a4:	fd 01       	movw	r30, r26
    39a6:	0d c0       	rjmp	.+26     	; 0x39c2 <__udivmodsi4_ep>

000039a8 <__udivmodsi4_loop>:
    39a8:	aa 1f       	adc	r26, r26
    39aa:	bb 1f       	adc	r27, r27
    39ac:	ee 1f       	adc	r30, r30
    39ae:	ff 1f       	adc	r31, r31
    39b0:	a2 17       	cp	r26, r18
    39b2:	b3 07       	cpc	r27, r19
    39b4:	e4 07       	cpc	r30, r20
    39b6:	f5 07       	cpc	r31, r21
    39b8:	20 f0       	brcs	.+8      	; 0x39c2 <__udivmodsi4_ep>
    39ba:	a2 1b       	sub	r26, r18
    39bc:	b3 0b       	sbc	r27, r19
    39be:	e4 0b       	sbc	r30, r20
    39c0:	f5 0b       	sbc	r31, r21

000039c2 <__udivmodsi4_ep>:
    39c2:	66 1f       	adc	r22, r22
    39c4:	77 1f       	adc	r23, r23
    39c6:	88 1f       	adc	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	1a 94       	dec	r1
    39cc:	69 f7       	brne	.-38     	; 0x39a8 <__udivmodsi4_loop>
    39ce:	60 95       	com	r22
    39d0:	70 95       	com	r23
    39d2:	80 95       	com	r24
    39d4:	90 95       	com	r25
    39d6:	9b 01       	movw	r18, r22
    39d8:	ac 01       	movw	r20, r24
    39da:	bd 01       	movw	r22, r26
    39dc:	cf 01       	movw	r24, r30
    39de:	08 95       	ret

000039e0 <__divmodsi4>:
    39e0:	05 2e       	mov	r0, r21
    39e2:	97 fb       	bst	r25, 7
    39e4:	1e f4       	brtc	.+6      	; 0x39ec <__divmodsi4+0xc>
    39e6:	00 94       	com	r0
    39e8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__negsi2>
    39ec:	57 fd       	sbrc	r21, 7
    39ee:	07 d0       	rcall	.+14     	; 0x39fe <__divmodsi4_neg2>
    39f0:	0e 94 ce 1c 	call	0x399c	; 0x399c <__udivmodsi4>
    39f4:	07 fc       	sbrc	r0, 7
    39f6:	03 d0       	rcall	.+6      	; 0x39fe <__divmodsi4_neg2>
    39f8:	4e f4       	brtc	.+18     	; 0x3a0c <__divmodsi4_exit>
    39fa:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__negsi2>

000039fe <__divmodsi4_neg2>:
    39fe:	50 95       	com	r21
    3a00:	40 95       	com	r20
    3a02:	30 95       	com	r19
    3a04:	21 95       	neg	r18
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	4f 4f       	sbci	r20, 0xFF	; 255
    3a0a:	5f 4f       	sbci	r21, 0xFF	; 255

00003a0c <__divmodsi4_exit>:
    3a0c:	08 95       	ret

00003a0e <__negsi2>:
    3a0e:	90 95       	com	r25
    3a10:	80 95       	com	r24
    3a12:	70 95       	com	r23
    3a14:	61 95       	neg	r22
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	8f 4f       	sbci	r24, 0xFF	; 255
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	08 95       	ret

00003a1e <__tablejump2__>:
    3a1e:	ee 0f       	add	r30, r30
    3a20:	ff 1f       	adc	r31, r31
    3a22:	88 1f       	adc	r24, r24
    3a24:	8b bf       	out	0x3b, r24	; 59
    3a26:	07 90       	elpm	r0, Z+
    3a28:	f6 91       	elpm	r31, Z
    3a2a:	e0 2d       	mov	r30, r0
    3a2c:	1b be       	out	0x3b, r1	; 59
    3a2e:	19 94       	eijmp

00003a30 <__muluhisi3>:
    3a30:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__umulhisi3>
    3a34:	a5 9f       	mul	r26, r21
    3a36:	90 0d       	add	r25, r0
    3a38:	b4 9f       	mul	r27, r20
    3a3a:	90 0d       	add	r25, r0
    3a3c:	a4 9f       	mul	r26, r20
    3a3e:	80 0d       	add	r24, r0
    3a40:	91 1d       	adc	r25, r1
    3a42:	11 24       	eor	r1, r1
    3a44:	08 95       	ret

00003a46 <__umulhisi3>:
    3a46:	a2 9f       	mul	r26, r18
    3a48:	b0 01       	movw	r22, r0
    3a4a:	b3 9f       	mul	r27, r19
    3a4c:	c0 01       	movw	r24, r0
    3a4e:	a3 9f       	mul	r26, r19
    3a50:	70 0d       	add	r23, r0
    3a52:	81 1d       	adc	r24, r1
    3a54:	11 24       	eor	r1, r1
    3a56:	91 1d       	adc	r25, r1
    3a58:	b2 9f       	mul	r27, r18
    3a5a:	70 0d       	add	r23, r0
    3a5c:	81 1d       	adc	r24, r1
    3a5e:	11 24       	eor	r1, r1
    3a60:	91 1d       	adc	r25, r1
    3a62:	08 95       	ret

00003a64 <memcpy>:
    3a64:	fb 01       	movw	r30, r22
    3a66:	dc 01       	movw	r26, r24
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <memcpy+0xa>
    3a6a:	01 90       	ld	r0, Z+
    3a6c:	0d 92       	st	X+, r0
    3a6e:	41 50       	subi	r20, 0x01	; 1
    3a70:	50 40       	sbci	r21, 0x00	; 0
    3a72:	d8 f7       	brcc	.-10     	; 0x3a6a <memcpy+0x6>
    3a74:	08 95       	ret

00003a76 <memset>:
    3a76:	dc 01       	movw	r26, r24
    3a78:	01 c0       	rjmp	.+2      	; 0x3a7c <memset+0x6>
    3a7a:	6d 93       	st	X+, r22
    3a7c:	41 50       	subi	r20, 0x01	; 1
    3a7e:	50 40       	sbci	r21, 0x00	; 0
    3a80:	e0 f7       	brcc	.-8      	; 0x3a7a <memset+0x4>
    3a82:	08 95       	ret

00003a84 <strncpy>:
    3a84:	fb 01       	movw	r30, r22
    3a86:	dc 01       	movw	r26, r24
    3a88:	41 50       	subi	r20, 0x01	; 1
    3a8a:	50 40       	sbci	r21, 0x00	; 0
    3a8c:	48 f0       	brcs	.+18     	; 0x3aa0 <strncpy+0x1c>
    3a8e:	01 90       	ld	r0, Z+
    3a90:	0d 92       	st	X+, r0
    3a92:	00 20       	and	r0, r0
    3a94:	c9 f7       	brne	.-14     	; 0x3a88 <strncpy+0x4>
    3a96:	01 c0       	rjmp	.+2      	; 0x3a9a <strncpy+0x16>
    3a98:	1d 92       	st	X+, r1
    3a9a:	41 50       	subi	r20, 0x01	; 1
    3a9c:	50 40       	sbci	r21, 0x00	; 0
    3a9e:	e0 f7       	brcc	.-8      	; 0x3a98 <strncpy+0x14>
    3aa0:	08 95       	ret

00003aa2 <ultoa>:
    3aa2:	25 32       	cpi	r18, 0x25	; 37
    3aa4:	31 05       	cpc	r19, r1
    3aa6:	20 f4       	brcc	.+8      	; 0x3ab0 <ultoa+0xe>
    3aa8:	22 30       	cpi	r18, 0x02	; 2
    3aaa:	10 f0       	brcs	.+4      	; 0x3ab0 <ultoa+0xe>
    3aac:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__ultoa_ncheck>
    3ab0:	fa 01       	movw	r30, r20
    3ab2:	10 82       	st	Z, r1
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	08 95       	ret

00003ab8 <__ultoa_ncheck>:
    3ab8:	bb 27       	eor	r27, r27

00003aba <__ultoa_common>:
    3aba:	fa 01       	movw	r30, r20
    3abc:	a6 2f       	mov	r26, r22
    3abe:	62 17       	cp	r22, r18
    3ac0:	71 05       	cpc	r23, r1
    3ac2:	81 05       	cpc	r24, r1
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	33 0b       	sbc	r19, r19
    3ac8:	30 fb       	bst	r19, 0
    3aca:	66 f0       	brts	.+24     	; 0x3ae4 <__ultoa_common+0x2a>
    3acc:	aa 27       	eor	r26, r26
    3ace:	66 0f       	add	r22, r22
    3ad0:	77 1f       	adc	r23, r23
    3ad2:	88 1f       	adc	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	aa 1f       	adc	r26, r26
    3ad8:	a2 17       	cp	r26, r18
    3ada:	10 f0       	brcs	.+4      	; 0x3ae0 <__ultoa_common+0x26>
    3adc:	a2 1b       	sub	r26, r18
    3ade:	63 95       	inc	r22
    3ae0:	38 50       	subi	r19, 0x08	; 8
    3ae2:	a9 f7       	brne	.-22     	; 0x3ace <__ultoa_common+0x14>
    3ae4:	a0 5d       	subi	r26, 0xD0	; 208
    3ae6:	aa 33       	cpi	r26, 0x3A	; 58
    3ae8:	08 f0       	brcs	.+2      	; 0x3aec <__ultoa_common+0x32>
    3aea:	a9 5d       	subi	r26, 0xD9	; 217
    3aec:	a1 93       	st	Z+, r26
    3aee:	36 f7       	brtc	.-52     	; 0x3abc <__ultoa_common+0x2>
    3af0:	b1 11       	cpse	r27, r1
    3af2:	b1 93       	st	Z+, r27
    3af4:	10 82       	st	Z, r1
    3af6:	ca 01       	movw	r24, r20
    3af8:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <strrev>

00003afc <utoa>:
    3afc:	45 32       	cpi	r20, 0x25	; 37
    3afe:	51 05       	cpc	r21, r1
    3b00:	20 f4       	brcc	.+8      	; 0x3b0a <utoa+0xe>
    3b02:	42 30       	cpi	r20, 0x02	; 2
    3b04:	10 f0       	brcs	.+4      	; 0x3b0a <utoa+0xe>
    3b06:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__utoa_ncheck>
    3b0a:	fb 01       	movw	r30, r22
    3b0c:	10 82       	st	Z, r1
    3b0e:	cb 01       	movw	r24, r22
    3b10:	08 95       	ret

00003b12 <__utoa_ncheck>:
    3b12:	bb 27       	eor	r27, r27

00003b14 <__utoa_common>:
    3b14:	fb 01       	movw	r30, r22
    3b16:	55 27       	eor	r21, r21
    3b18:	aa 27       	eor	r26, r26
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	aa 1f       	adc	r26, r26
    3b20:	a4 17       	cp	r26, r20
    3b22:	10 f0       	brcs	.+4      	; 0x3b28 <__utoa_common+0x14>
    3b24:	a4 1b       	sub	r26, r20
    3b26:	83 95       	inc	r24
    3b28:	50 51       	subi	r21, 0x10	; 16
    3b2a:	b9 f7       	brne	.-18     	; 0x3b1a <__utoa_common+0x6>
    3b2c:	a0 5d       	subi	r26, 0xD0	; 208
    3b2e:	aa 33       	cpi	r26, 0x3A	; 58
    3b30:	08 f0       	brcs	.+2      	; 0x3b34 <__utoa_common+0x20>
    3b32:	a9 5d       	subi	r26, 0xD9	; 217
    3b34:	a1 93       	st	Z+, r26
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	79 f7       	brne	.-34     	; 0x3b18 <__utoa_common+0x4>
    3b3a:	b1 11       	cpse	r27, r1
    3b3c:	b1 93       	st	Z+, r27
    3b3e:	11 92       	st	Z+, r1
    3b40:	cb 01       	movw	r24, r22
    3b42:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <strrev>

00003b46 <strrev>:
    3b46:	dc 01       	movw	r26, r24
    3b48:	fc 01       	movw	r30, r24
    3b4a:	67 2f       	mov	r22, r23
    3b4c:	71 91       	ld	r23, Z+
    3b4e:	77 23       	and	r23, r23
    3b50:	e1 f7       	brne	.-8      	; 0x3b4a <strrev+0x4>
    3b52:	32 97       	sbiw	r30, 0x02	; 2
    3b54:	04 c0       	rjmp	.+8      	; 0x3b5e <strrev+0x18>
    3b56:	7c 91       	ld	r23, X
    3b58:	6d 93       	st	X+, r22
    3b5a:	70 83       	st	Z, r23
    3b5c:	62 91       	ld	r22, -Z
    3b5e:	ae 17       	cp	r26, r30
    3b60:	bf 07       	cpc	r27, r31
    3b62:	c8 f3       	brcs	.-14     	; 0x3b56 <strrev+0x10>
    3b64:	08 95       	ret

00003b66 <_exit>:
    3b66:	f8 94       	cli

00003b68 <__stop_program>:
    3b68:	ff cf       	rjmp	.-2      	; 0x3b68 <__stop_program>
