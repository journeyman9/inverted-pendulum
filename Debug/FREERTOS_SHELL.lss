
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  000037b6  0000384a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000109e  008020c6  008020c6  00003910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00008d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000bc29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000d7d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00010806  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00012d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 02 	jmp	0x536	; 0x536 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_25>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      70:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_28>
      74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      78:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      7c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      80:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      84:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      8c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      90:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      94:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      98:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      9c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c4:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_49>
      c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e8:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_58>
      ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     100:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     104:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     108:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     10c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     110:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     114:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     118:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     11c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     120:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     124:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     128:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     12c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     130:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     134:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     138:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     13c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     140:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     144:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     148:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     14c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     150:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     154:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     158:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     15c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     160:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_88>
     164:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     168:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     16c:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_91>
     170:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     174:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     178:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     17c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     180:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     184:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     188:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     18c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     190:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     194:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     198:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     19c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1fc:	df 0c       	add	r13, r15
     1fe:	e2 0c       	add	r14, r2
     200:	e5 0c       	add	r14, r5
     202:	e8 0c       	add	r14, r8
     204:	eb 0c       	add	r14, r11
     206:	ee 0c       	add	r14, r14
     208:	f0 0c       	add	r15, r0
     20a:	01 0d       	add	r16, r1
     20c:	09 0d       	add	r16, r9
     20e:	13 0d       	add	r17, r3
     210:	11 0d       	add	r17, r1

00000212 <__trampolines_start>:
     212:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <_ZN8emstreamlsE15ser_manipulator+0x30>
     216:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_ZN8emstream12transmit_nowEv>
     21a:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_ZN8emstream13ready_to_sendEv>
     21e:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_ZN8emstreamlsE15ser_manipulator+0x40>
     222:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <_ZN18task_motor_encoder3runEv>
     226:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN5rs2327getcharEv>
     22a:	0c 94 41 09 	jmp	0x1282	; 0x1282 <_ZN17task_limit_switch3runEv>
     22e:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_ZN8emstream7getcharEv>
     232:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_ZN14frt_text_queue7putcharEc>
     236:	0c 94 40 05 	jmp	0xa80	; 0xa80 <_ZN8frt_task12print_statusER8emstream>
     23a:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_ZN8emstreamlsE15ser_manipulator+0x2a>
     23e:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <_ZN5rs23212clear_screenEv>
     242:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <_GLOBAL__sub_I_counter>
     246:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <_ZN8emstreamlsE15ser_manipulator+0x3c>
     24a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_ZN8emstream14check_for_charEv>
     24e:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_ZN8emstreamlsE15ser_manipulator+0x24>
     252:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN21task_pendulum_encoder3runEv>
     256:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
     25a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_ZN18task_motor_command3runEv>
     25e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <_ZN8emstreamlsE15ser_manipulator+0x36>
     262:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__cxa_pure_virtual>
     266:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN8emstreamlsE15ser_manipulator+0x82>
     26a:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_ZN9task_user3runEv>
     26e:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <_ZN8emstreamlsE15ser_manipulator+0x72>
     272:	0c 94 df 0c 	jmp	0x19be	; 0x19be <_ZN8emstreamlsE15ser_manipulator+0x1e>
     276:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_ZN5rs2327putcharEc>
     27a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_ZN8emstream12clear_screenEv>
     27e:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <_ZN8emstreamlsE15ser_manipulator+0x62>
     282:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <prvIdleTask>
     286:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     28a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     28e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_call_static_run_method>
     292:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_ZN22task_system_controller3runEv>
     296:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_ZN5rs23214check_for_charEv>

0000029a <__trampolines_end>:
     29a:	09 09       	sbc	r16, r9
	...

0000029d <_ZZ15print_task_listP8emstreamE3__c_8>:
     29d:	2f 00                                               /.

0000029f <_ZZ15print_task_listP8emstreamE3__c_7>:
     29f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002aa <_ZZ15print_task_listP8emstreamE3__c_6>:
     2aa:	09 2d 2d 2d 2d 00                                   .----.

000002b0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2b0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002bc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2bc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000002cd <_ZZ15print_task_listP8emstreamE3__c_3>:
     2cd:	09 52 75 6e 73 00                                   .Runs.

000002d3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     2d3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000002df <_ZZ15print_task_listP8emstreamE3__c_1>:
     2df:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000002f0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     2f0:	09 53 74 61 63 6b 00                                .Stack.

000002f7 <_ZZ15print_task_listP8emstreamE3__c>:
     2f7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000302 <_ZZN9task_user11show_statusEvE3__c_4>:
     302:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000030d <_ZZN9task_user11show_statusEvE3__c_3>:
     30d:	2f 00                                               /.

0000030f <_ZZN9task_user11show_statusEvE3__c_2>:
     30f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000031d <_ZZN9task_user11show_statusEvE3__c_1>:
     31d:	54 69 6d 65 3a 20 00                                Time: .

00000324 <_ZZN9task_user11show_statusEvE3__c_0>:
     324:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000330 <_ZZN9task_user11show_statusEvE3__c>:
     330:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     340:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000034f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     34f:	1b 5b 32 32 6d 00                                   .[22m.

00000355 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     355:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000360 <_ZZ17print_task_stacksP8emstreamE3__c>:
     360:	1b 5b 31 6d 00                                      .[1m.

00000365 <_ZZN9task_user3runEvE3__c_3>:
     365:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     375:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000382 <_ZZN9task_user3runEvE3__c_2>:
     382:	3a 57 54 46 3f 00                                   :WTF?.

00000388 <_ZZN9task_user3runEvE3__c_1>:
     388:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     398:	65 00                                               e.

0000039a <_ZZN9task_user3runEvE3__c_0>:
     39a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003a8 <_ZZN9task_user3runEvE3__c>:
     3a8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3b8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000003c6 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3c6:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000003d5 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     3d5:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     3e5:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000003f0 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     3f0:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     400:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     40e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     41e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     42e:	6d 61 74 69 6f 6e 00                                mation.

00000435 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     435:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     445:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000456 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     456:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     466:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_4>:
     46e:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     47e:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000048a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     48a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     49a:	68 65 20 41 56 52 00                                he AVR.

000004a1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4a1:	20 68 65 6c 70 00                                    help.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4a7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4b7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004c6 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4c6:	1b 5b 33 30 6d 00                                   .[30m.

000004cc <_ZZN9task_user18print_help_messageEvE3__c>:
     4cc:	1b 5b 34 36 6d 00                                   .[46m.

000004d2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4d2:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     4e2:	61 73 6b 20 00                                      ask .

000004e7 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     4e7:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     4f5:	20 63 72 65 61 74 65 64 00                           created.

000004fe <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     4fe:	54 61 73 6b 20 00                                   Task .

00000504 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     504:	1b 5b 32 32 6d 00                                   .[22m.

0000050a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     50a:	54 61 73 6b 3a 20 00                                Task: .

00000511 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     511:	1b 5b 31 6d 00                                      .[1m.

00000516 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     516:	09 00                                               ..

00000518 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     518:	09 00                                               ..

0000051a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     51a:	2f 00                                               /.

0000051c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     51c:	09 00                                               ..

0000051e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     51e:	09 00                                               ..

00000520 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     520:	1b 5b 32 32 6d 00                                   .[22m.

00000526 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     526:	1b 5b 31 6d 00                                      .[1m.

0000052b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     52b:	1b 5b 31 6d 00                                      .[1m.

00000530 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     530:	20 20 00 00                                           ..

00000534 <__ctors_start>:
     534:	d6 0a       	sbc	r13, r22

00000536 <__ctors_end>:
     536:	11 24       	eor	r1, r1
     538:	1f be       	out	0x3f, r1	; 63
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df e3       	ldi	r29, 0x3F	; 63
     540:	de bf       	out	0x3e, r29	; 62
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0c bf       	out	0x3c, r16	; 60
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	1a be       	out	0x3a, r1	; 58
     54c:	1b be       	out	0x3b, r1	; 59

0000054e <__do_copy_data>:
     54e:	10 e2       	ldi	r17, 0x20	; 32
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	e6 eb       	ldi	r30, 0xB6	; 182
     556:	f7 e3       	ldi	r31, 0x37	; 55
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	a6 3c       	cpi	r26, 0xC6	; 198
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_clear_bss>:
     56a:	21 e3       	ldi	r18, 0x31	; 49
     56c:	a6 ec       	ldi	r26, 0xC6	; 198
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 c0       	rjmp	.+2      	; 0x574 <.do_clear_bss_start>

00000572 <.do_clear_bss_loop>:
     572:	1d 92       	st	X+, r1

00000574 <.do_clear_bss_start>:
     574:	a4 36       	cpi	r26, 0x64	; 100
     576:	b2 07       	cpc	r27, r18
     578:	e1 f7       	brne	.-8      	; 0x572 <.do_clear_bss_loop>

0000057a <__do_global_ctors>:
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	cb e9       	ldi	r28, 0x9B	; 155
     57e:	d2 e0       	ldi	r29, 0x02	; 2
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <__do_global_ctors+0x16>
     584:	21 97       	sbiw	r28, 0x01	; 1
     586:	01 09       	sbc	r16, r1
     588:	80 2f       	mov	r24, r16
     58a:	fe 01       	movw	r30, r28
     58c:	0e 94 b6 1b 	call	0x376c	; 0x376c <__tablejump2__>
     590:	ca 39       	cpi	r28, 0x9A	; 154
     592:	d1 07       	cpc	r29, r17
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 07       	cpc	r16, r24
     598:	a9 f7       	brne	.-22     	; 0x584 <__do_global_ctors+0xa>
     59a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <main>
     59e:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <_ZN8emstream12clear_screenEv>:
     5a6:	08 95       	ret

000005a8 <_ZN8emstream12transmit_nowEv>:
     5a8:	08 95       	ret

000005aa <_ZN8emstream14check_for_charEv>:
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <_ZN8emstream7getcharEv>:
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <_ZN8emstream13ready_to_sendEv>:
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret

000005b8 <__cxa_pure_virtual>:
     5b8:	08 95       	ret

000005ba <_ZN8frt_task20print_status_in_listEP8emstream>:
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	8b 01       	movw	r16, r22
     5c6:	e8 81       	ld	r30, Y
     5c8:	f9 81       	ldd	r31, Y+1	; 0x01
     5ca:	02 80       	ldd	r0, Z+2	; 0x02
     5cc:	f3 81       	ldd	r31, Z+3	; 0x03
     5ce:	e0 2d       	mov	r30, r0
     5d0:	19 95       	eicall
     5d2:	66 e0       	ldi	r22, 0x06	; 6
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     5da:	8c 81       	ldd	r24, Y+4	; 0x04
     5dc:	9d 81       	ldd	r25, Y+5	; 0x05
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     5e2:	b8 01       	movw	r22, r16
     5e4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <_ZN9task_user18print_help_messageEv>:
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	8e 81       	ldd	r24, Y+6	; 0x06
     600:	9f 81       	ldd	r25, Y+7	; 0x07
     602:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     606:	8c 01       	movw	r16, r24
     608:	6c ec       	ldi	r22, 0xCC	; 204
     60a:	74 e0       	ldi	r23, 0x04	; 4
     60c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	c8 01       	movw	r24, r16
     614:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     618:	8c 01       	movw	r16, r24
     61a:	66 ec       	ldi	r22, 0xC6	; 198
     61c:	74 e0       	ldi	r23, 0x04	; 4
     61e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     622:	67 e0       	ldi	r22, 0x07	; 7
     624:	c8 01       	movw	r24, r16
     626:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     62a:	6a e0       	ldi	r22, 0x0A	; 10
     62c:	8e 81       	ldd	r24, Y+6	; 0x06
     62e:	9f 81       	ldd	r25, Y+7	; 0x07
     630:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     634:	8c 01       	movw	r16, r24
     636:	67 ea       	ldi	r22, 0xA7	; 167
     638:	74 e0       	ldi	r23, 0x04	; 4
     63a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     63e:	6a e0       	ldi	r22, 0x0A	; 10
     640:	c8 01       	movw	r24, r16
     642:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     646:	8c 01       	movw	r16, r24
     648:	61 ea       	ldi	r22, 0xA1	; 161
     64a:	74 e0       	ldi	r23, 0x04	; 4
     64c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     650:	66 e0       	ldi	r22, 0x06	; 6
     652:	c8 01       	movw	r24, r16
     654:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     658:	6a e0       	ldi	r22, 0x0A	; 10
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	9f 81       	ldd	r25, Y+7	; 0x07
     65e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     662:	8c 01       	movw	r16, r24
     664:	6a e8       	ldi	r22, 0x8A	; 138
     666:	74 e0       	ldi	r23, 0x04	; 4
     668:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     674:	6a e0       	ldi	r22, 0x0A	; 10
     676:	8e 81       	ldd	r24, Y+6	; 0x06
     678:	9f 81       	ldd	r25, Y+7	; 0x07
     67a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     67e:	8c 01       	movw	r16, r24
     680:	6e e6       	ldi	r22, 0x6E	; 110
     682:	74 e0       	ldi	r23, 0x04	; 4
     684:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     688:	66 e0       	ldi	r22, 0x06	; 6
     68a:	c8 01       	movw	r24, r16
     68c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     690:	6a e0       	ldi	r22, 0x0A	; 10
     692:	8e 81       	ldd	r24, Y+6	; 0x06
     694:	9f 81       	ldd	r25, Y+7	; 0x07
     696:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     69a:	8c 01       	movw	r16, r24
     69c:	66 e5       	ldi	r22, 0x56	; 86
     69e:	74 e0       	ldi	r23, 0x04	; 4
     6a0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6ac:	6a e0       	ldi	r22, 0x0A	; 10
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6b6:	8c 01       	movw	r16, r24
     6b8:	65 e3       	ldi	r22, 0x35	; 53
     6ba:	74 e0       	ldi	r23, 0x04	; 4
     6bc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6c8:	6a e0       	ldi	r22, 0x0A	; 10
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	9f 81       	ldd	r25, Y+7	; 0x07
     6ce:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6d2:	8c 01       	movw	r16, r24
     6d4:	6e e0       	ldi	r22, 0x0E	; 14
     6d6:	74 e0       	ldi	r23, 0x04	; 4
     6d8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6e4:	6a e0       	ldi	r22, 0x0A	; 10
     6e6:	8e 81       	ldd	r24, Y+6	; 0x06
     6e8:	9f 81       	ldd	r25, Y+7	; 0x07
     6ea:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     6ee:	8c 01       	movw	r16, r24
     6f0:	60 ef       	ldi	r22, 0xF0	; 240
     6f2:	73 e0       	ldi	r23, 0x03	; 3
     6f4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     6f8:	66 e0       	ldi	r22, 0x06	; 6
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     700:	6a e0       	ldi	r22, 0x0A	; 10
     702:	8e 81       	ldd	r24, Y+6	; 0x06
     704:	9f 81       	ldd	r25, Y+7	; 0x07
     706:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     70a:	8c 01       	movw	r16, r24
     70c:	65 ed       	ldi	r22, 0xD5	; 213
     70e:	73 e0       	ldi	r23, 0x03	; 3
     710:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	c8 01       	movw	r24, r16
     718:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     71c:	6a e0       	ldi	r22, 0x0A	; 10
     71e:	8e 81       	ldd	r24, Y+6	; 0x06
     720:	9f 81       	ldd	r25, Y+7	; 0x07
     722:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     726:	ec 01       	movw	r28, r24
     728:	66 ec       	ldi	r22, 0xC6	; 198
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	ce 01       	movw	r24, r28
     734:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	5c 01       	movw	r10, r24
     762:	3b 01       	movw	r6, r22
     764:	4a 01       	movw	r8, r20
     766:	12 2f       	mov	r17, r18
     768:	50 2e       	mov	r5, r16
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	ca 01       	movw	r24, r20
     76e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     772:	a6 14       	cp	r10, r6
     774:	b7 04       	cpc	r11, r7
     776:	08 f0       	brcs	.+2      	; 0x77a <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     778:	7c c0       	rjmp	.+248    	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     77a:	65 01       	movw	r12, r10
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	c8 0e       	add	r12, r24
     780:	d1 1c       	adc	r13, r1
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	75 01       	movw	r14, r10
     786:	b5 01       	movw	r22, r10
     788:	c4 01       	movw	r24, r8
     78a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
     78e:	6a e0       	ldi	r22, 0x0A	; 10
     790:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     794:	60 e3       	ldi	r22, 0x30	; 48
     796:	75 e0       	ldi	r23, 0x05	; 5
     798:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     79c:	11 23       	and	r17, r17
     79e:	09 f4       	brne	.+2      	; 0x7a2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     7a0:	6d c0       	rjmp	.+218    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a2:	00 23       	and	r16, r16
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     7a6:	6a c0       	rjmp	.+212    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a8:	6a e0       	ldi	r22, 0x0A	; 10
     7aa:	c4 01       	movw	r24, r8
     7ac:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     7b0:	6b e2       	ldi	r22, 0x2B	; 43
     7b2:	75 e0       	ldi	r23, 0x05	; 5
     7b4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     7b8:	61 c0       	rjmp	.+194    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7ba:	11 23       	and	r17, r17
     7bc:	71 f0       	breq	.+28     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7be:	01 11       	cpse	r16, r1
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c2:	88 81       	ld	r24, Y
     7c4:	85 15       	cp	r24, r5
     7c6:	49 f0       	breq	.+18     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c8:	6a e0       	ldi	r22, 0x0A	; 10
     7ca:	c4 01       	movw	r24, r8
     7cc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     7d0:	66 e2       	ldi	r22, 0x26	; 38
     7d2:	75 e0       	ldi	r23, 0x05	; 5
     7d4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	69 91       	ld	r22, Y+
     7dc:	c4 01       	movw	r24, r8
     7de:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
     7e2:	dc 01       	movw	r26, r24
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	02 80       	ldd	r0, Z+2	; 0x02
     7ea:	f3 81       	ldd	r31, Z+3	; 0x03
     7ec:	e0 2d       	mov	r30, r0
     7ee:	60 e2       	ldi	r22, 0x20	; 32
     7f0:	19 95       	eicall
     7f2:	cc 16       	cp	r12, r28
     7f4:	dd 06       	cpc	r13, r29
     7f6:	09 f7       	brne	.-62     	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     7f8:	11 23       	and	r17, r17
     7fa:	89 f0       	breq	.+34     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	c4 01       	movw	r24, r8
     800:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     804:	ec 01       	movw	r28, r24
     806:	60 e2       	ldi	r22, 0x20	; 32
     808:	75 e0       	ldi	r23, 0x05	; 5
     80a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     80e:	e8 81       	ld	r30, Y
     810:	f9 81       	ldd	r31, Y+1	; 0x01
     812:	02 80       	ldd	r0, Z+2	; 0x02
     814:	f3 81       	ldd	r31, Z+3	; 0x03
     816:	e0 2d       	mov	r30, r0
     818:	60 e2       	ldi	r22, 0x20	; 32
     81a:	ce 01       	movw	r24, r28
     81c:	19 95       	eicall
     81e:	f7 01       	movw	r30, r14
     820:	61 91       	ld	r22, Z+
     822:	7f 01       	movw	r14, r30
     824:	80 ee       	ldi	r24, 0xE0	; 224
     826:	86 0f       	add	r24, r22
     828:	8f 35       	cpi	r24, 0x5F	; 95
     82a:	48 f4       	brcc	.+18     	; 0x83e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     82c:	d4 01       	movw	r26, r8
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	f3 81       	ldd	r31, Z+3	; 0x03
     836:	e0 2d       	mov	r30, r0
     838:	c4 01       	movw	r24, r8
     83a:	19 95       	eicall
     83c:	09 c0       	rjmp	.+18     	; 0x850 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     83e:	d4 01       	movw	r26, r8
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	02 80       	ldd	r0, Z+2	; 0x02
     846:	f3 81       	ldd	r31, Z+3	; 0x03
     848:	e0 2d       	mov	r30, r0
     84a:	6e e2       	ldi	r22, 0x2E	; 46
     84c:	c4 01       	movw	r24, r8
     84e:	19 95       	eicall
     850:	ce 14       	cp	r12, r14
     852:	df 04       	cpc	r13, r15
     854:	21 f7       	brne	.-56     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     856:	b4 e1       	ldi	r27, 0x14	; 20
     858:	ab 0e       	add	r10, r27
     85a:	b1 1c       	adc	r11, r1
     85c:	66 e0       	ldi	r22, 0x06	; 6
     85e:	c4 01       	movw	r24, r8
     860:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     864:	e4 e1       	ldi	r30, 0x14	; 20
     866:	ce 0e       	add	r12, r30
     868:	d1 1c       	adc	r13, r1
     86a:	a6 14       	cp	r10, r6
     86c:	b7 04       	cpc	r11, r7
     86e:	08 f4       	brcc	.+2      	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     870:	89 cf       	rjmp	.-238    	; 0x784 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	c4 01       	movw	r24, r8
     876:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     87a:	02 c0       	rjmp	.+4      	; 0x880 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     87c:	e7 01       	movw	r28, r14
     87e:	9d cf       	rjmp	.-198    	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	08 95       	ret

000008a0 <_ZN10time_stamp10set_to_nowEv>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ec 01       	movw	r28, r24
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
     8ac:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     8b0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     8b4:	8c 83       	std	Y+4, r24	; 0x04
     8b6:	9d 83       	std	Y+5, r25	; 0x05
     8b8:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
     8bc:	68 83       	st	Y, r22
     8be:	79 83       	std	Y+1, r23	; 0x01
     8c0:	8a 83       	std	Y+2, r24	; 0x02
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	ce 01       	movw	r24, r28
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <_ZlsR8emstreamR10time_stamp>:
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2f 97       	sbiw	r28, 0x0f	; 15
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	8c 01       	movw	r16, r24
     8f0:	7b 01       	movw	r14, r22
     8f2:	db 01       	movw	r26, r22
     8f4:	6d 91       	ld	r22, X+
     8f6:	7d 91       	ld	r23, X+
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f8 ee       	ldi	r31, 0xE8	; 232
     900:	8f 2e       	mov	r8, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	9f 2e       	mov	r9, r31
     906:	a1 2c       	mov	r10, r1
     908:	b1 2c       	mov	r11, r1
     90a:	f0 2d       	mov	r31, r0
     90c:	a5 01       	movw	r20, r10
     90e:	94 01       	movw	r18, r8
     910:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodsi4>
     914:	ba 01       	movw	r22, r20
     916:	a9 01       	movw	r20, r18
     918:	c8 01       	movw	r24, r16
     91a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN8emstreamlsEm>
     91e:	d8 01       	movw	r26, r16
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	02 80       	ldd	r0, Z+2	; 0x02
     926:	f3 81       	ldd	r31, Z+3	; 0x03
     928:	e0 2d       	mov	r30, r0
     92a:	6e e2       	ldi	r22, 0x2E	; 46
     92c:	c8 01       	movw	r24, r16
     92e:	19 95       	eicall
     930:	f7 01       	movw	r30, r14
     932:	60 81       	ld	r22, Z
     934:	71 81       	ldd	r23, Z+1	; 0x01
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	93 81       	ldd	r25, Z+3	; 0x03
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodsi4>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	60 e4       	ldi	r22, 0x40	; 64
     948:	72 e4       	ldi	r23, 0x42	; 66
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsi3>
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodsi4>
     95a:	49 01       	movw	r8, r18
     95c:	5a 01       	movw	r10, r20
     95e:	f7 01       	movw	r30, r14
     960:	a4 81       	ldd	r26, Z+4	; 0x04
     962:	b5 81       	ldd	r27, Z+5	; 0x05
     964:	20 e4       	ldi	r18, 0x40	; 64
     966:	32 e4       	ldi	r19, 0x42	; 66
     968:	4f e0       	ldi	r20, 0x0F	; 15
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	0e 94 bf 1b 	call	0x377e	; 0x377e <__muluhisi3>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	38 e4       	ldi	r19, 0x48	; 72
     974:	48 ee       	ldi	r20, 0xE8	; 232
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodsi4>
     97c:	c5 01       	movw	r24, r10
     97e:	b4 01       	movw	r22, r8
     980:	62 0f       	add	r22, r18
     982:	73 1f       	adc	r23, r19
     984:	84 1f       	adc	r24, r20
     986:	95 1f       	adc	r25, r21
     988:	7e 01       	movw	r14, r28
     98a:	f7 e0       	ldi	r31, 0x07	; 7
     98c:	ef 0e       	add	r14, r31
     98e:	f1 1c       	adc	r15, r1
     990:	9e 01       	movw	r18, r28
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	59 01       	movw	r10, r18
     998:	2a e0       	ldi	r18, 0x0A	; 10
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__divmodsi4>
     9a4:	e6 2f       	mov	r30, r22
     9a6:	28 87       	std	Y+8, r18	; 0x08
     9a8:	39 87       	std	Y+9, r19	; 0x09
     9aa:	4a 87       	std	Y+10, r20	; 0x0a
     9ac:	5b 87       	std	Y+11, r21	; 0x0b
     9ae:	68 85       	ldd	r22, Y+8	; 0x08
     9b0:	79 85       	ldd	r23, Y+9	; 0x09
     9b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9b6:	20 e3       	ldi	r18, 0x30	; 48
     9b8:	2e 0f       	add	r18, r30
     9ba:	d7 01       	movw	r26, r14
     9bc:	2e 93       	st	-X, r18
     9be:	7d 01       	movw	r14, r26
     9c0:	aa 15       	cp	r26, r10
     9c2:	bb 05       	cpc	r27, r11
     9c4:	49 f7       	brne	.-46     	; 0x998 <_ZlsR8emstreamR10time_stamp+0xc8>
     9c6:	1f 82       	std	Y+7, r1	; 0x07
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	c8 01       	movw	r24, r16
     9d0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     9d4:	c8 01       	movw	r24, r16
     9d6:	2f 96       	adiw	r28, 0x0f	; 15
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	08 95       	ret

000009f2 <_ZN14frt_text_queue7getcharEv>:
     9f2:	0f 93       	push	r16
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	a9 01       	movw	r20, r18
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 85       	ldd	r24, Z+8	; 0x08
     a10:	91 85       	ldd	r25, Z+9	; 0x09
     a12:	0e 94 51 14 	call	0x28a2	; 0x28a2 <xQueueGenericReceive>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	19 f4       	brne	.+6      	; 0xa20 <_ZN14frt_text_queue7getcharEv+0x2e>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <_ZN14frt_text_queue7getcharEv+0x32>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN14frt_text_queue14check_for_charEv>:
     a2e:	fc 01       	movw	r30, r24
     a30:	80 85       	ldd	r24, Z+8	; 0x08
     a32:	91 85       	ldd	r25, Z+9	; 0x09
     a34:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <uxQueueMessagesWaiting>
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	81 11       	cpse	r24, r1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <_ZN14frt_text_queue14check_for_charEv+0x12>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	89 2f       	mov	r24, r25
     a42:	08 95       	ret

00000a44 <_ZN14frt_text_queue7putcharEc>:
     a44:	0f 93       	push	r16
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	69 83       	std	Y+1, r22	; 0x01
     a52:	fc 01       	movw	r30, r24
     a54:	22 85       	ldd	r18, Z+10	; 0x0a
     a56:	33 85       	ldd	r19, Z+11	; 0x0b
     a58:	44 85       	ldd	r20, Z+12	; 0x0c
     a5a:	55 85       	ldd	r21, Z+13	; 0x0d
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	be 01       	movw	r22, r28
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	80 85       	ldd	r24, Z+8	; 0x08
     a66:	91 85       	ldd	r25, Z+9	; 0x09
     a68:	0e 94 b6 13 	call	0x276c	; 0x276c <xQueueGenericSend>
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	81 11       	cpse	r24, r1
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <_ZN14frt_text_queue7putcharEc+0x30>
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	89 2f       	mov	r24, r25
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <_ZN8frt_task12print_statusER8emstream>:
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	8b 01       	movw	r16, r22
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	9b 81       	ldd	r25, Y+3	; 0x03
     aa0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <pcTaskGetTaskName>
     aa4:	bc 01       	movw	r22, r24
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     aac:	d8 01       	movw	r26, r16
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	02 80       	ldd	r0, Z+2	; 0x02
     ab4:	f3 81       	ldd	r31, Z+3	; 0x03
     ab6:	e0 2d       	mov	r30, r0
     ab8:	69 e0       	ldi	r22, 0x09	; 9
     aba:	c8 01       	movw	r24, r16
     abc:	19 95       	eicall
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	9b 81       	ldd	r25, Y+3	; 0x03
     ac2:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <pcTaskGetTaskName>
     ac6:	fc 01       	movw	r30, r24
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <_ZN8frt_task12print_statusER8emstream+0x48>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	e8 1b       	sub	r30, r24
     ad2:	f9 0b       	sbc	r31, r25
     ad4:	38 97       	sbiw	r30, 0x08	; 8
     ad6:	48 f4       	brcc	.+18     	; 0xaea <_ZN8frt_task12print_statusER8emstream+0x6a>
     ad8:	d8 01       	movw	r26, r16
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	02 80       	ldd	r0, Z+2	; 0x02
     ae0:	f3 81       	ldd	r31, Z+3	; 0x03
     ae2:	e0 2d       	mov	r30, r0
     ae4:	69 e0       	ldi	r22, 0x09	; 9
     ae6:	c8 01       	movw	r24, r16
     ae8:	19 95       	eicall
     aea:	ce 84       	ldd	r12, Y+14	; 0x0e
     aec:	df 84       	ldd	r13, Y+15	; 0x0f
     aee:	e8 88       	ldd	r14, Y+16	; 0x10
     af0:	f9 88       	ldd	r15, Y+17	; 0x11
     af2:	a8 84       	ldd	r10, Y+8	; 0x08
     af4:	b9 84       	ldd	r11, Y+9	; 0x09
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	0e 94 3d 1a 	call	0x347a	; 0x347a <uxTaskGetStackHighWaterMark>
     afe:	98 2e       	mov	r9, r24
     b00:	8c 84       	ldd	r8, Y+12	; 0x0c
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	0e 94 75 16 	call	0x2cea	; 0x2cea <uxTaskPriorityGet>
     b0a:	68 2f       	mov	r22, r24
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
     b12:	6a e0       	ldi	r22, 0x0A	; 10
     b14:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     b18:	ec 01       	movw	r28, r24
     b1a:	6e e1       	ldi	r22, 0x1E	; 30
     b1c:	75 e0       	ldi	r23, 0x05	; 5
     b1e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     b22:	68 2d       	mov	r22, r8
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
     b2a:	6a e0       	ldi	r22, 0x0A	; 10
     b2c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     b30:	ec 01       	movw	r28, r24
     b32:	6c e1       	ldi	r22, 0x1C	; 28
     b34:	75 e0       	ldi	r23, 0x05	; 5
     b36:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     b3a:	69 2d       	mov	r22, r9
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
     b42:	6a e0       	ldi	r22, 0x0A	; 10
     b44:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     b48:	ec 01       	movw	r28, r24
     b4a:	6a e1       	ldi	r22, 0x1A	; 26
     b4c:	75 e0       	ldi	r23, 0x05	; 5
     b4e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     b52:	b5 01       	movw	r22, r10
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
     b5a:	6a e0       	ldi	r22, 0x0A	; 10
     b5c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     b60:	ec 01       	movw	r28, r24
     b62:	68 e1       	ldi	r22, 0x18	; 24
     b64:	75 e0       	ldi	r23, 0x05	; 5
     b66:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     b6a:	6a e0       	ldi	r22, 0x0A	; 10
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     b72:	ec 01       	movw	r28, r24
     b74:	66 e1       	ldi	r22, 0x16	; 22
     b76:	75 e0       	ldi	r23, 0x05	; 5
     b78:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     b7c:	b7 01       	movw	r22, r14
     b7e:	a6 01       	movw	r20, r12
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN8emstreamlsEm>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	08 95       	ret

00000ba0 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	7b 01       	movw	r14, r22
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	9b 81       	ldd	r25, Y+3	; 0x03
     bb8:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <pcTaskGetTaskName>
     bbc:	6c 01       	movw	r12, r24
     bbe:	6a e0       	ldi	r22, 0x0A	; 10
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     bc6:	8c 01       	movw	r16, r24
     bc8:	61 e1       	ldi	r22, 0x11	; 17
     bca:	75 e0       	ldi	r23, 0x05	; 5
     bcc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     bd0:	6a e0       	ldi	r22, 0x0A	; 10
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     bd8:	8c 01       	movw	r16, r24
     bda:	6a e0       	ldi	r22, 0x0A	; 10
     bdc:	75 e0       	ldi	r23, 0x05	; 5
     bde:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     be2:	b6 01       	movw	r22, r12
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     bea:	6a e0       	ldi	r22, 0x0A	; 10
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     bf2:	8c 01       	movw	r16, r24
     bf4:	64 e0       	ldi	r22, 0x04	; 4
     bf6:	75 e0       	ldi	r23, 0x05	; 5
     bf8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     bfc:	66 e0       	ldi	r22, 0x06	; 6
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     c04:	8a 85       	ldd	r24, Y+10	; 0x0a
     c06:	9b 85       	ldd	r25, Y+11	; 0x0b
     c08:	e8 85       	ldd	r30, Y+8	; 0x08
     c0a:	f9 85       	ldd	r31, Y+9	; 0x09
     c0c:	01 e1       	ldi	r16, 0x11	; 17
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	a7 01       	movw	r20, r14
     c12:	bc 01       	movw	r22, r24
     c14:	8e 1b       	sub	r24, r30
     c16:	9f 0b       	sbc	r25, r31
     c18:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	9d 81       	ldd	r25, Y+5	; 0x05
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	19 f0       	breq	.+6      	; 0xc2a <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	08 95       	ret

00000c3c <_call_static_run_method>:
     c3c:	ec 01       	movw	r28, r24
     c3e:	e8 81       	ld	r30, Y
     c40:	f9 81       	ldd	r31, Y+1	; 0x01
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	19 95       	eicall
     c4a:	1a 82       	std	Y+2, r1	; 0x02
     c4c:	1b 82       	std	Y+3, r1	; 0x03
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	7f ef       	ldi	r23, 0xFF	; 255
     c52:	cb 01       	movw	r24, r22
     c54:	0e 94 c7 18 	call	0x318e	; 0x318e <vTaskDelay>
     c58:	fa cf       	rjmp	.-12     	; 0xc4e <_call_static_run_method+0x12>

00000c5a <_ZN9task_user3runEv>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2c 97       	sbiw	r28, 0x0c	; 12
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	7c 01       	movw	r14, r24
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	1b 82       	std	Y+3, r1	; 0x03
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	1e 82       	std	Y+6, r1	; 0x06
     c76:	6a e0       	ldi	r22, 0x0A	; 10
     c78:	dc 01       	movw	r26, r24
     c7a:	16 96       	adiw	r26, 0x06	; 6
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     c86:	6c 01       	movw	r12, r24
     c88:	68 ea       	ldi	r22, 0xA8	; 168
     c8a:	73 e0       	ldi	r23, 0x03	; 3
     c8c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     c90:	66 e0       	ldi	r22, 0x06	; 6
     c92:	c6 01       	movw	r24, r12
     c94:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     c98:	11 e0       	ldi	r17, 0x01	; 1
     c9a:	81 2c       	mov	r8, r1
     c9c:	68 94       	set
     c9e:	99 24       	eor	r9, r9
     ca0:	93 f8       	bld	r9, 3
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f8 ec       	ldi	r31, 0xC8	; 200
     ca6:	af 2e       	mov	r10, r31
     ca8:	f0 e2       	ldi	r31, 0x20	; 32
     caa:	bf 2e       	mov	r11, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	f7 01       	movw	r30, r14
     cb0:	84 85       	ldd	r24, Z+12	; 0x0c
     cb2:	88 23       	and	r24, r24
     cb4:	21 f0       	breq	.+8      	; 0xcbe <_ZN9task_user3runEv+0x64>
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_ZN9task_user3runEv+0x62>
     cba:	60 c0       	rjmp	.+192    	; 0xd7c <_ZN9task_user3runEv+0x122>
     cbc:	06 c2       	rjmp	.+1036   	; 0x10ca <_ZN9task_user3runEv+0x470>
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	dc 01       	movw	r26, r24
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	04 80       	ldd	r0, Z+4	; 0x04
     cca:	f5 81       	ldd	r31, Z+5	; 0x05
     ccc:	e0 2d       	mov	r30, r0
     cce:	19 95       	eicall
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <_ZN9task_user3runEv+0x7c>
     cd4:	37 c0       	rjmp	.+110    	; 0xd44 <_ZN9task_user3runEv+0xea>
     cd6:	f7 01       	movw	r30, r14
     cd8:	86 81       	ldd	r24, Z+6	; 0x06
     cda:	97 81       	ldd	r25, Z+7	; 0x07
     cdc:	dc 01       	movw	r26, r24
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	06 80       	ldd	r0, Z+6	; 0x06
     ce4:	f7 81       	ldd	r31, Z+7	; 0x07
     ce6:	e0 2d       	mov	r30, r0
     ce8:	19 95       	eicall
     cea:	99 27       	eor	r25, r25
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	f9 f0       	breq	.+62     	; 0xd30 <_ZN9task_user3runEv+0xd6>
     cf2:	03 97       	sbiw	r24, 0x03	; 3
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <_ZN9task_user3runEv+0x9e>
     cf6:	05 c2       	rjmp	.+1034   	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     cf8:	6a e0       	ldi	r22, 0x0A	; 10
     cfa:	f7 01       	movw	r30, r14
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	97 81       	ldd	r25, Z+7	; 0x07
     d00:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     d04:	7c 01       	movw	r14, r24
     d06:	6a e9       	ldi	r22, 0x9A	; 154
     d08:	73 e0       	ldi	r23, 0x03	; 3
     d0a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     d0e:	66 e0       	ldi	r22, 0x06	; 6
     d10:	c7 01       	movw	r24, r14
     d12:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	88 ed       	ldi	r24, 0xD8	; 216
     d1a:	08 b6       	in	r0, 0x38	; 56
     d1c:	18 be       	out	0x38, r1	; 56
     d1e:	84 bf       	out	0x34, r24	; 52
     d20:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d24:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d28:	81 fd       	sbrc	r24, 1
     d2a:	fc cf       	rjmp	.-8      	; 0xd24 <_ZN9task_user3runEv+0xca>
     d2c:	08 be       	out	0x38, r0	; 56
     d2e:	ff cf       	rjmp	.-2      	; 0xd2e <_ZN9task_user3runEv+0xd4>
     d30:	c7 01       	movw	r24, r14
     d32:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
     d36:	d7 01       	movw	r26, r14
     d38:	1c 96       	adiw	r26, 0x0c	; 12
     d3a:	1c 93       	st	X, r17
     d3c:	1c 97       	sbiw	r26, 0x0c	; 12
     d3e:	1d 96       	adiw	r26, 0x0d	; 13
     d40:	1c 93       	st	X, r17
     d42:	df c1       	rjmp	.+958    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d44:	8a ec       	ldi	r24, 0xCA	; 202
     d46:	90 e2       	ldi	r25, 0x20	; 32
     d48:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_ZN9task_user3runEv+0xf8>
     d50:	d8 c1       	rjmp	.+944    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d52:	d7 01       	movw	r26, r14
     d54:	16 96       	adiw	r26, 0x06	; 6
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	17 97       	sbiw	r26, 0x07	; 7
     d5c:	01 90       	ld	r0, Z+
     d5e:	f0 81       	ld	r31, Z
     d60:	e0 2d       	mov	r30, r0
     d62:	c2 80       	ldd	r12, Z+2	; 0x02
     d64:	d3 80       	ldd	r13, Z+3	; 0x03
     d66:	8a ec       	ldi	r24, 0xCA	; 202
     d68:	90 e2       	ldi	r25, 0x20	; 32
     d6a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     d6e:	68 2f       	mov	r22, r24
     d70:	f7 01       	movw	r30, r14
     d72:	86 81       	ldd	r24, Z+6	; 0x06
     d74:	97 81       	ldd	r25, Z+7	; 0x07
     d76:	f6 01       	movw	r30, r12
     d78:	19 95       	eicall
     d7a:	c3 c1       	rjmp	.+902    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d7c:	86 81       	ldd	r24, Z+6	; 0x06
     d7e:	97 81       	ldd	r25, Z+7	; 0x07
     d80:	dc 01       	movw	r26, r24
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	04 80       	ldd	r0, Z+4	; 0x04
     d88:	f5 81       	ldd	r31, Z+5	; 0x05
     d8a:	e0 2d       	mov	r30, r0
     d8c:	19 95       	eicall
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <_ZN9task_user3runEv+0x13a>
     d92:	b7 c1       	rjmp	.+878    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d94:	f7 01       	movw	r30, r14
     d96:	86 81       	ldd	r24, Z+6	; 0x06
     d98:	97 81       	ldd	r25, Z+7	; 0x07
     d9a:	dc 01       	movw	r26, r24
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	06 80       	ldd	r0, Z+6	; 0x06
     da2:	f7 81       	ldd	r31, Z+7	; 0x07
     da4:	e0 2d       	mov	r30, r0
     da6:	19 95       	eicall
     da8:	9c 01       	movw	r18, r24
     daa:	33 27       	eor	r19, r19
     dac:	28 36       	cpi	r18, 0x68	; 104
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_ZN9task_user3runEv+0x15a>
     db2:	54 c1       	rjmp	.+680    	; 0x105c <_ZN9task_user3runEv+0x402>
     db4:	4c f4       	brge	.+18     	; 0xdc8 <_ZN9task_user3runEv+0x16e>
     db6:	2b 31       	cpi	r18, 0x1B	; 27
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <_ZN9task_user3runEv+0x164>
     dbc:	53 c1       	rjmp	.+678    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dbe:	25 36       	cpi	r18, 0x65	; 101
     dc0:	31 05       	cpc	r19, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <_ZN9task_user3runEv+0x16c>
     dc4:	4f c1       	rjmp	.+670    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dc6:	63 c1       	rjmp	.+710    	; 0x108e <_ZN9task_user3runEv+0x434>
     dc8:	23 37       	cpi	r18, 0x73	; 115
     dca:	31 05       	cpc	r19, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_ZN9task_user3runEv+0x176>
     dce:	0c c1       	rjmp	.+536    	; 0xfe8 <_ZN9task_user3runEv+0x38e>
     dd0:	26 37       	cpi	r18, 0x76	; 118
     dd2:	31 05       	cpc	r19, r1
     dd4:	91 f0       	breq	.+36     	; 0xdfa <_ZN9task_user3runEv+0x1a0>
     dd6:	2e 36       	cpi	r18, 0x6E	; 110
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <_ZN9task_user3runEv+0x184>
     ddc:	58 c1       	rjmp	.+688    	; 0x108e <_ZN9task_user3runEv+0x434>
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     de6:	bc 01       	movw	r22, r24
     de8:	f7 01       	movw	r30, r14
     dea:	86 81       	ldd	r24, Z+6	; 0x06
     dec:	97 81       	ldd	r25, Z+7	; 0x07
     dee:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     df2:	66 e0       	ldi	r22, 0x06	; 6
     df4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     df8:	84 c1       	rjmp	.+776    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     dfa:	1f 82       	std	Y+7, r1	; 0x07
     dfc:	18 86       	std	Y+8, r1	; 0x08
     dfe:	19 86       	std	Y+9, r1	; 0x09
     e00:	1a 86       	std	Y+10, r1	; 0x0a
     e02:	1b 86       	std	Y+11, r1	; 0x0b
     e04:	1c 86       	std	Y+12, r1	; 0x0c
     e06:	0e 94 6f 10 	call	0x20de	; 0x20de <xPortGetFreeHeapSize>
     e0a:	3c 01       	movw	r6, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	07 96       	adiw	r24, 0x07	; 7
     e10:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     e14:	2c 01       	movw	r4, r24
     e16:	66 e0       	ldi	r22, 0x06	; 6
     e18:	d7 01       	movw	r26, r14
     e1a:	16 96       	adiw	r26, 0x06	; 6
     e1c:	8d 91       	ld	r24, X+
     e1e:	9c 91       	ld	r25, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e26:	6a e0       	ldi	r22, 0x0A	; 10
     e28:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e2c:	6c 01       	movw	r12, r24
     e2e:	60 e3       	ldi	r22, 0x30	; 48
     e30:	73 e0       	ldi	r23, 0x03	; 3
     e32:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     e36:	6a e0       	ldi	r22, 0x0A	; 10
     e38:	c6 01       	movw	r24, r12
     e3a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e3e:	6c 01       	movw	r12, r24
     e40:	64 e2       	ldi	r22, 0x24	; 36
     e42:	73 e0       	ldi	r23, 0x03	; 3
     e44:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	c6 01       	movw	r24, r12
     e4c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e50:	6a e0       	ldi	r22, 0x0A	; 10
     e52:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e56:	6c 01       	movw	r12, r24
     e58:	6d e1       	ldi	r22, 0x1D	; 29
     e5a:	73 e0       	ldi	r23, 0x03	; 3
     e5c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     e60:	b2 01       	movw	r22, r4
     e62:	c6 01       	movw	r24, r12
     e64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     e68:	6a e0       	ldi	r22, 0x0A	; 10
     e6a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e6e:	6c 01       	movw	r12, r24
     e70:	6f e0       	ldi	r22, 0x0F	; 15
     e72:	73 e0       	ldi	r23, 0x03	; 3
     e74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     e78:	b3 01       	movw	r22, r6
     e7a:	c6 01       	movw	r24, r12
     e7c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     e86:	6c 01       	movw	r12, r24
     e88:	6d e0       	ldi	r22, 0x0D	; 13
     e8a:	73 e0       	ldi	r23, 0x03	; 3
     e8c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     e90:	4f ef       	ldi	r20, 0xFF	; 255
     e92:	5f e0       	ldi	r21, 0x0F	; 15
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	c6 01       	movw	r24, r12
     e9a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN8emstreamlsEm>
     e9e:	f4 01       	movw	r30, r8
     ea0:	60 a4       	ldd	r6, Z+40	; 0x28
     ea2:	71 a4       	ldd	r7, Z+41	; 0x29
     ea4:	6a e0       	ldi	r22, 0x0A	; 10
     ea6:	d7 01       	movw	r26, r14
     ea8:	16 96       	adiw	r26, 0x06	; 6
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	17 97       	sbiw	r26, 0x07	; 7
     eb0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     eb4:	6c 01       	movw	r12, r24
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	73 e0       	ldi	r23, 0x03	; 3
     eba:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     ebe:	b3 01       	movw	r22, r6
     ec0:	c6 01       	movw	r24, r12
     ec2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     ecc:	66 e0       	ldi	r22, 0x06	; 6
     ece:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     ed2:	f7 01       	movw	r30, r14
     ed4:	c6 80       	ldd	r12, Z+6	; 0x06
     ed6:	d7 80       	ldd	r13, Z+7	; 0x07
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	c6 01       	movw	r24, r12
     edc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     ee0:	3c 01       	movw	r6, r24
     ee2:	67 ef       	ldi	r22, 0xF7	; 247
     ee4:	72 e0       	ldi	r23, 0x02	; 2
     ee6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     eea:	6a e0       	ldi	r22, 0x0A	; 10
     eec:	c3 01       	movw	r24, r6
     eee:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     ef2:	3c 01       	movw	r6, r24
     ef4:	60 ef       	ldi	r22, 0xF0	; 240
     ef6:	72 e0       	ldi	r23, 0x02	; 2
     ef8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     efc:	66 e0       	ldi	r22, 0x06	; 6
     efe:	c3 01       	movw	r24, r6
     f00:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f04:	6a e0       	ldi	r22, 0x0A	; 10
     f06:	c6 01       	movw	r24, r12
     f08:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f0c:	3c 01       	movw	r6, r24
     f0e:	6f ed       	ldi	r22, 0xDF	; 223
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f16:	6a e0       	ldi	r22, 0x0A	; 10
     f18:	c3 01       	movw	r24, r6
     f1a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f1e:	3c 01       	movw	r6, r24
     f20:	63 ed       	ldi	r22, 0xD3	; 211
     f22:	72 e0       	ldi	r23, 0x02	; 2
     f24:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f28:	6a e0       	ldi	r22, 0x0A	; 10
     f2a:	c3 01       	movw	r24, r6
     f2c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f30:	3c 01       	movw	r6, r24
     f32:	6d ec       	ldi	r22, 0xCD	; 205
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f3a:	66 e0       	ldi	r22, 0x06	; 6
     f3c:	c3 01       	movw	r24, r6
     f3e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f42:	6a e0       	ldi	r22, 0x0A	; 10
     f44:	c6 01       	movw	r24, r12
     f46:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f4a:	3c 01       	movw	r6, r24
     f4c:	6c eb       	ldi	r22, 0xBC	; 188
     f4e:	72 e0       	ldi	r23, 0x02	; 2
     f50:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f54:	6a e0       	ldi	r22, 0x0A	; 10
     f56:	c3 01       	movw	r24, r6
     f58:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f5c:	3c 01       	movw	r6, r24
     f5e:	60 eb       	ldi	r22, 0xB0	; 176
     f60:	72 e0       	ldi	r23, 0x02	; 2
     f62:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	c3 01       	movw	r24, r6
     f6a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f6e:	3c 01       	movw	r6, r24
     f70:	6a ea       	ldi	r22, 0xAA	; 170
     f72:	72 e0       	ldi	r23, 0x02	; 2
     f74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	c3 01       	movw	r24, r6
     f7c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     f80:	d5 01       	movw	r26, r10
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	19 f0       	breq	.+6      	; 0xf90 <_ZN9task_user3runEv+0x336>
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     f90:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <xTaskGetIdleTaskHandle>
     f94:	0e 94 3d 1a 	call	0x347a	; 0x347a <uxTaskGetStackHighWaterMark>
     f98:	08 2f       	mov	r16, r24
     f9a:	6a e0       	ldi	r22, 0x0A	; 10
     f9c:	c6 01       	movw	r24, r12
     f9e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     fa2:	6c 01       	movw	r12, r24
     fa4:	6f e9       	ldi	r22, 0x9F	; 159
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     fac:	60 2f       	mov	r22, r16
     fae:	c6 01       	movw	r24, r12
     fb0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
     fb4:	6a e0       	ldi	r22, 0x0A	; 10
     fb6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     fba:	6c 01       	movw	r12, r24
     fbc:	6d e9       	ldi	r22, 0x9D	; 157
     fbe:	72 e0       	ldi	r23, 0x02	; 2
     fc0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     fc4:	64 e6       	ldi	r22, 0x64	; 100
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	c6 01       	movw	r24, r12
     fca:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     fd4:	6c 01       	movw	r12, r24
     fd6:	6a e9       	ldi	r22, 0x9A	; 154
     fd8:	72 e0       	ldi	r23, 0x02	; 2
     fda:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
     fde:	66 e0       	ldi	r22, 0x06	; 6
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
     fe6:	8d c0       	rjmp	.+282    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     fe8:	f7 01       	movw	r30, r14
     fea:	c6 80       	ldd	r12, Z+6	; 0x06
     fec:	d7 80       	ldd	r13, Z+7	; 0x07
     fee:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <last_created_task_pointer>
     ff2:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <last_created_task_pointer+0x1>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	19 f0       	breq	.+6      	; 0x1000 <_ZN9task_user3runEv+0x3a6>
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
    1000:	6a e0       	ldi	r22, 0x0A	; 10
    1002:	c6 01       	movw	r24, r12
    1004:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1008:	3c 01       	movw	r6, r24
    100a:	60 e6       	ldi	r22, 0x60	; 96
    100c:	73 e0       	ldi	r23, 0x03	; 3
    100e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1012:	6a e0       	ldi	r22, 0x0A	; 10
    1014:	c3 01       	movw	r24, r6
    1016:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    101a:	3c 01       	movw	r6, r24
    101c:	65 e5       	ldi	r22, 0x55	; 85
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1024:	6a e0       	ldi	r22, 0x0A	; 10
    1026:	c3 01       	movw	r24, r6
    1028:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    102c:	3c 01       	movw	r6, r24
    102e:	6f e4       	ldi	r22, 0x4F	; 79
    1030:	73 e0       	ldi	r23, 0x03	; 3
    1032:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1036:	66 e0       	ldi	r22, 0x06	; 6
    1038:	c3 01       	movw	r24, r6
    103a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    103e:	80 91 62 31 	lds	r24, 0x3162	; 0x803162 <portStackTopForTask>
    1042:	90 91 63 31 	lds	r25, 0x3163	; 0x803163 <portStackTopForTask+0x1>
    1046:	bc 01       	movw	r22, r24
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	01 e1       	ldi	r16, 0x11	; 17
    104e:	21 2f       	mov	r18, r17
    1050:	a6 01       	movw	r20, r12
    1052:	83 56       	subi	r24, 0x63	; 99
    1054:	91 09       	sbc	r25, r1
    1056:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
    105a:	53 c0       	rjmp	.+166    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    105c:	c7 01       	movw	r24, r14
    105e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    1064:	6a e0       	ldi	r22, 0x0A	; 10
    1066:	d7 01       	movw	r26, r14
    1068:	16 96       	adiw	r26, 0x06	; 6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	17 97       	sbiw	r26, 0x07	; 7
    1070:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1074:	6c 01       	movw	r12, r24
    1076:	68 e8       	ldi	r22, 0x88	; 136
    1078:	73 e0       	ldi	r23, 0x03	; 3
    107a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    107e:	66 e0       	ldi	r22, 0x06	; 6
    1080:	c6 01       	movw	r24, r12
    1082:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1086:	f7 01       	movw	r30, r14
    1088:	14 86       	std	Z+12, r1	; 0x0c
    108a:	15 86       	std	Z+13, r1	; 0x0d
    108c:	3a c0       	rjmp	.+116    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    108e:	f7 01       	movw	r30, r14
    1090:	a6 81       	ldd	r26, Z+6	; 0x06
    1092:	b7 81       	ldd	r27, Z+7	; 0x07
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	02 80       	ldd	r0, Z+2	; 0x02
    109c:	f3 81       	ldd	r31, Z+3	; 0x03
    109e:	e0 2d       	mov	r30, r0
    10a0:	68 2f       	mov	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	19 95       	eicall
    10a6:	6a e0       	ldi	r22, 0x0A	; 10
    10a8:	d7 01       	movw	r26, r14
    10aa:	16 96       	adiw	r26, 0x06	; 6
    10ac:	8d 91       	ld	r24, X+
    10ae:	9c 91       	ld	r25, X
    10b0:	17 97       	sbiw	r26, 0x07	; 7
    10b2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    10b6:	6c 01       	movw	r12, r24
    10b8:	62 e8       	ldi	r22, 0x82	; 130
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    10c0:	66 e0       	ldi	r22, 0x06	; 6
    10c2:	c6 01       	movw	r24, r12
    10c4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    10c8:	1c c0       	rjmp	.+56     	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    10ca:	6a e0       	ldi	r22, 0x0A	; 10
    10cc:	f7 01       	movw	r30, r14
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    10d6:	7c 01       	movw	r14, r24
    10d8:	65 e6       	ldi	r22, 0x65	; 101
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	c7 01       	movw	r24, r14
    10e4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	88 ed       	ldi	r24, 0xD8	; 216
    10ec:	08 b6       	in	r0, 0x38	; 56
    10ee:	18 be       	out	0x38, r1	; 56
    10f0:	84 bf       	out	0x34, r24	; 52
    10f2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10f6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    10fa:	81 fd       	sbrc	r24, 1
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <_ZN9task_user3runEv+0x49c>
    10fe:	08 be       	out	0x38, r0	; 56
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <_ZN9task_user3runEv+0x4a6>
    1102:	f7 01       	movw	r30, r14
    1104:	86 85       	ldd	r24, Z+14	; 0x0e
    1106:	97 85       	ldd	r25, Z+15	; 0x0f
    1108:	a0 89       	ldd	r26, Z+16	; 0x10
    110a:	b1 89       	ldd	r27, Z+17	; 0x11
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	a1 1d       	adc	r26, r1
    1110:	b1 1d       	adc	r27, r1
    1112:	86 87       	std	Z+14, r24	; 0x0e
    1114:	97 87       	std	Z+15, r25	; 0x0f
    1116:	a0 8b       	std	Z+16, r26	; 0x10
    1118:	b1 8b       	std	Z+17, r27	; 0x11
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 c7 18 	call	0x318e	; 0x318e <vTaskDelay>
    1126:	c3 cd       	rjmp	.-1146   	; 0xcae <_ZN9task_user3runEv+0x54>

00001128 <_ZN22task_system_controller3runEv>:
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <_ZN22task_system_controller3runEv+0x6>
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8c 01       	movw	r16, r24
    1136:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	f8 01       	movw	r30, r16
    1144:	86 85       	ldd	r24, Z+14	; 0x0e
    1146:	97 85       	ldd	r25, Z+15	; 0x0f
    1148:	a0 89       	ldd	r26, Z+16	; 0x10
    114a:	b1 89       	ldd	r27, Z+17	; 0x11
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	86 87       	std	Z+14, r24	; 0x0e
    1154:	97 87       	std	Z+15, r25	; 0x0f
    1156:	a0 8b       	std	Z+16, r26	; 0x10
    1158:	b1 8b       	std	Z+17, r27	; 0x11
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskDelayUntil>
    116a:	eb cf       	rjmp	.-42     	; 0x1142 <_ZN22task_system_controller3runEv+0x1a>

0000116c <_ZN21task_pendulum_encoder3runEv>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <_ZN21task_pendulum_encoder3runEv+0x6>
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8c 01       	movw	r16, r24
    117a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	7a 83       	std	Y+2, r23	; 0x02
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	e0 e8       	ldi	r30, 0x80	; 128
    1188:	f6 e0       	ldi	r31, 0x06	; 6
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	82 83       	std	Z+2, r24	; 0x02
    118e:	80 8b       	std	Z+16, r24	; 0x10
    1190:	81 8b       	std	Z+17, r24	; 0x11
    1192:	e0 e8       	ldi	r30, 0x80	; 128
    1194:	f1 e0       	ldi	r31, 0x01	; 1
    1196:	80 e7       	ldi	r24, 0x70	; 112
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	89 e0       	ldi	r24, 0x09	; 9
    119c:	82 87       	std	Z+10, r24	; 0x0a
    119e:	e0 e4       	ldi	r30, 0x40	; 64
    11a0:	f8 e0       	ldi	r31, 0x08	; 8
    11a2:	8a e6       	ldi	r24, 0x6A	; 106
    11a4:	83 83       	std	Z+3, r24	; 0x03
    11a6:	8d ec       	ldi	r24, 0xCD	; 205
    11a8:	97 e0       	ldi	r25, 0x07	; 7
    11aa:	86 a3       	std	Z+38, r24	; 0x26
    11ac:	97 a3       	std	Z+39, r25	; 0x27
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
    11b2:	68 94       	set
    11b4:	ee 24       	eor	r14, r14
    11b6:	e6 f8       	bld	r14, 6
    11b8:	ff 24       	eor	r15, r15
    11ba:	f3 f8       	bld	r15, 3
    11bc:	f7 01       	movw	r30, r14
    11be:	80 a1       	ldd	r24, Z+32	; 0x20
    11c0:	91 a1       	ldd	r25, Z+33	; 0x21
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	0f 92       	push	r0
    11c8:	80 b9       	out	0x00, r24	; 0
    11ca:	91 b9       	out	0x01, r25	; 1
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	f8 01       	movw	r30, r16
    11d2:	86 85       	ldd	r24, Z+14	; 0x0e
    11d4:	97 85       	ldd	r25, Z+15	; 0x0f
    11d6:	a0 89       	ldd	r26, Z+16	; 0x10
    11d8:	b1 89       	ldd	r27, Z+17	; 0x11
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	a1 1d       	adc	r26, r1
    11de:	b1 1d       	adc	r27, r1
    11e0:	86 87       	std	Z+14, r24	; 0x0e
    11e2:	97 87       	std	Z+15, r25	; 0x0f
    11e4:	a0 8b       	std	Z+16, r26	; 0x10
    11e6:	b1 8b       	std	Z+17, r27	; 0x11
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskDelayUntil>
    11f8:	e1 cf       	rjmp	.-62     	; 0x11bc <_ZN21task_pendulum_encoder3runEv+0x50>

000011fa <_ZN18task_motor_encoder3runEv>:
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <_ZN18task_motor_encoder3runEv+0x6>
    1200:	1f 92       	push	r1
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8c 01       	movw	r16, r24
    1208:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
    120c:	69 83       	std	Y+1, r22	; 0x01
    120e:	7a 83       	std	Y+2, r23	; 0x02
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	f8 01       	movw	r30, r16
    1216:	86 85       	ldd	r24, Z+14	; 0x0e
    1218:	97 85       	ldd	r25, Z+15	; 0x0f
    121a:	a0 89       	ldd	r26, Z+16	; 0x10
    121c:	b1 89       	ldd	r27, Z+17	; 0x11
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	a1 1d       	adc	r26, r1
    1222:	b1 1d       	adc	r27, r1
    1224:	86 87       	std	Z+14, r24	; 0x0e
    1226:	97 87       	std	Z+15, r25	; 0x0f
    1228:	a0 8b       	std	Z+16, r26	; 0x10
    122a:	b1 8b       	std	Z+17, r27	; 0x11
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskDelayUntil>
    123c:	eb cf       	rjmp	.-42     	; 0x1214 <_ZN18task_motor_encoder3runEv+0x1a>

0000123e <_ZN18task_motor_command3runEv>:
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	00 d0       	rcall	.+0      	; 0x1244 <_ZN18task_motor_command3runEv+0x6>
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8c 01       	movw	r16, r24
    124c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
    1250:	69 83       	std	Y+1, r22	; 0x01
    1252:	7a 83       	std	Y+2, r23	; 0x02
    1254:	8b 83       	std	Y+3, r24	; 0x03
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	f8 01       	movw	r30, r16
    125a:	86 85       	ldd	r24, Z+14	; 0x0e
    125c:	97 85       	ldd	r25, Z+15	; 0x0f
    125e:	a0 89       	ldd	r26, Z+16	; 0x10
    1260:	b1 89       	ldd	r27, Z+17	; 0x11
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	a1 1d       	adc	r26, r1
    1266:	b1 1d       	adc	r27, r1
    1268:	86 87       	std	Z+14, r24	; 0x0e
    126a:	97 87       	std	Z+15, r25	; 0x0f
    126c:	a0 8b       	std	Z+16, r26	; 0x10
    126e:	b1 8b       	std	Z+17, r27	; 0x11
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskDelayUntil>
    1280:	eb cf       	rjmp	.-42     	; 0x1258 <_ZN18task_motor_command3runEv+0x1a>

00001282 <_ZN17task_limit_switch3runEv>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 d0       	rcall	.+0      	; 0x1288 <_ZN17task_limit_switch3runEv+0x6>
    1288:	1f 92       	push	r1
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8c 01       	movw	r16, r24
    1290:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <xTaskGetTickCount>
    1294:	69 83       	std	Y+1, r22	; 0x01
    1296:	7a 83       	std	Y+2, r23	; 0x02
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	e0 e6       	ldi	r30, 0x60	; 96
    129e:	f6 e0       	ldi	r31, 0x06	; 6
    12a0:	90 81       	ld	r25, Z
    12a2:	d8 01       	movw	r26, r16
    12a4:	52 96       	adiw	r26, 0x12	; 18
    12a6:	8c 91       	ld	r24, X
    12a8:	52 97       	sbiw	r26, 0x12	; 18
    12aa:	89 2b       	or	r24, r25
    12ac:	80 83       	st	Z, r24
    12ae:	94 81       	ldd	r25, Z+4	; 0x04
    12b0:	52 96       	adiw	r26, 0x12	; 18
    12b2:	8c 91       	ld	r24, X
    12b4:	52 97       	sbiw	r26, 0x12	; 18
    12b6:	89 2b       	or	r24, r25
    12b8:	84 83       	std	Z+4, r24	; 0x04
    12ba:	52 96       	adiw	r26, 0x12	; 18
    12bc:	8c 91       	ld	r24, X
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	21 f4       	brne	.+8      	; 0x12ca <_ZN17task_limit_switch3runEv+0x48>
    12c2:	88 e1       	ldi	r24, 0x18	; 24
    12c4:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <_ZN17task_limit_switch3runEv+0x52>
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <_ZN17task_limit_switch3runEv+0x52>
    12ce:	88 e1       	ldi	r24, 0x18	; 24
    12d0:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    12d4:	0f 2e       	mov	r0, r31
    12d6:	f8 e6       	ldi	r31, 0x68	; 104
    12d8:	ef 2e       	mov	r14, r31
    12da:	f6 e0       	ldi	r31, 0x06	; 6
    12dc:	ff 2e       	mov	r15, r31
    12de:	f0 2d       	mov	r31, r0
    12e0:	dd 24       	eor	r13, r13
    12e2:	d3 94       	inc	r13
    12e4:	f7 01       	movw	r30, r14
    12e6:	80 81       	ld	r24, Z
    12e8:	80 fd       	sbrc	r24, 0
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <_ZN17task_limit_switch3runEv+0x78>
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	0f 92       	push	r0
    12f2:	d0 b8       	out	0x00, r13	; 0
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <_ZN17task_limit_switch3runEv+0x84>
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	0f 92       	push	r0
    1300:	10 b8       	out	0x00, r1	; 0
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	d7 01       	movw	r26, r14
    1308:	8c 91       	ld	r24, X
    130a:	82 fd       	sbrc	r24, 2
    130c:	07 c0       	rjmp	.+14     	; 0x131c <_ZN17task_limit_switch3runEv+0x9a>
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	0f 92       	push	r0
    1314:	d0 b8       	out	0x00, r13	; 0
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <_ZN17task_limit_switch3runEv+0xa6>
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	0f 92       	push	r0
    1322:	10 b8       	out	0x00, r1	; 0
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	f8 01       	movw	r30, r16
    132a:	86 85       	ldd	r24, Z+14	; 0x0e
    132c:	97 85       	ldd	r25, Z+15	; 0x0f
    132e:	a0 89       	ldd	r26, Z+16	; 0x10
    1330:	b1 89       	ldd	r27, Z+17	; 0x11
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	a1 1d       	adc	r26, r1
    1336:	b1 1d       	adc	r27, r1
    1338:	86 87       	std	Z+14, r24	; 0x0e
    133a:	97 87       	std	Z+15, r25	; 0x0f
    133c:	a0 8b       	std	Z+16, r26	; 0x10
    133e:	b1 8b       	std	Z+17, r27	; 0x11
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <vTaskDelayUntil>
    1350:	c9 cf       	rjmp	.-110    	; 0x12e4 <_ZN17task_limit_switch3runEv+0x62>

00001352 <_ZN8frt_taskC2EPKchjP8emstream>:
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	2a 97       	sbiw	r28, 0x0a	; 10
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	4c 01       	movw	r8, r24
    137e:	29 01       	movw	r4, r18
    1380:	38 01       	movw	r6, r16
    1382:	8a e0       	ldi	r24, 0x0A	; 10
    1384:	90 e2       	ldi	r25, 0x20	; 32
    1386:	f4 01       	movw	r30, r8
    1388:	80 83       	st	Z, r24
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	fb 01       	movw	r30, r22
    138e:	80 81       	ld	r24, Z
    1390:	88 23       	and	r24, r24
    1392:	69 f0       	breq	.+26     	; 0x13ae <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1394:	de 01       	movw	r26, r28
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    139e:	99 30       	cpi	r25, 0x09	; 9
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	8d 93       	st	X+, r24
    13a6:	81 91       	ld	r24, Z+
    13a8:	81 11       	cpse	r24, r1
    13aa:	f9 cf       	rjmp	.-14     	; 0x139e <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	e1 e0       	ldi	r30, 0x01	; 1
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	ec 0f       	add	r30, r28
    13b6:	fd 1f       	adc	r31, r29
    13b8:	e9 0f       	add	r30, r25
    13ba:	f1 1d       	adc	r31, r1
    13bc:	10 82       	st	Z, r1
    13be:	74 01       	movw	r14, r8
    13c0:	f2 e0       	ldi	r31, 0x02	; 2
    13c2:	ef 0e       	add	r14, r31
    13c4:	f1 1c       	adc	r15, r1
    13c6:	a1 2c       	mov	r10, r1
    13c8:	b1 2c       	mov	r11, r1
    13ca:	c1 2c       	mov	r12, r1
    13cc:	d1 2c       	mov	r13, r1
    13ce:	04 2f       	mov	r16, r20
    13d0:	94 01       	movw	r18, r8
    13d2:	a2 01       	movw	r20, r4
    13d4:	be 01       	movw	r22, r28
    13d6:	6f 5f       	subi	r22, 0xFF	; 255
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	8e e1       	ldi	r24, 0x1E	; 30
    13dc:	96 e0       	ldi	r25, 0x06	; 6
    13de:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <xTaskGenericCreate>
    13e2:	f4 01       	movw	r30, r8
    13e4:	66 82       	std	Z+6, r6	; 0x06
    13e6:	77 82       	std	Z+7, r7	; 0x07
    13e8:	40 86       	std	Z+8, r4	; 0x08
    13ea:	51 86       	std	Z+9, r5	; 0x09
    13ec:	20 91 c8 20 	lds	r18, 0x20C8	; 0x8020c8 <last_created_task_pointer>
    13f0:	30 91 c9 20 	lds	r19, 0x20C9	; 0x8020c9 <last_created_task_pointer+0x1>
    13f4:	24 83       	std	Z+4, r18	; 0x04
    13f6:	35 83       	std	Z+5, r19	; 0x05
    13f8:	80 92 c8 20 	sts	0x20C8, r8	; 0x8020c8 <last_created_task_pointer>
    13fc:	90 92 c9 20 	sts	0x20C9, r9	; 0x8020c9 <last_created_task_pointer+0x1>
    1400:	14 86       	std	Z+12, r1	; 0x0c
    1402:	15 86       	std	Z+13, r1	; 0x0d
    1404:	40 90 62 31 	lds	r4, 0x3162	; 0x803162 <portStackTopForTask>
    1408:	50 90 63 31 	lds	r5, 0x3163	; 0x803163 <portStackTopForTask+0x1>
    140c:	ff ef       	ldi	r31, 0xFF	; 255
    140e:	4f 1a       	sub	r4, r31
    1410:	5f 0a       	sbc	r5, r31
    1412:	40 92 62 31 	sts	0x3162, r4	; 0x803162 <portStackTopForTask>
    1416:	50 92 63 31 	sts	0x3163, r5	; 0x803163 <portStackTopForTask+0x1>
    141a:	f4 01       	movw	r30, r8
    141c:	42 86       	std	Z+10, r4	; 0x0a
    141e:	53 86       	std	Z+11, r5	; 0x0b
    1420:	16 86       	std	Z+14, r1	; 0x0e
    1422:	17 86       	std	Z+15, r1	; 0x0f
    1424:	10 8a       	std	Z+16, r1	; 0x10
    1426:	11 8a       	std	Z+17, r1	; 0x11
    1428:	61 14       	cp	r6, r1
    142a:	71 04       	cpc	r7, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    142e:	44 c0       	rjmp	.+136    	; 0x14b8 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	79 f5       	brne	.+94     	; 0x1492 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1434:	6a e0       	ldi	r22, 0x0A	; 10
    1436:	c3 01       	movw	r24, r6
    1438:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    143c:	7c 01       	movw	r14, r24
    143e:	6e ef       	ldi	r22, 0xFE	; 254
    1440:	74 e0       	ldi	r23, 0x04	; 4
    1442:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1446:	be 01       	movw	r22, r28
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	c7 01       	movw	r24, r14
    144e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1452:	6a e0       	ldi	r22, 0x0A	; 10
    1454:	c7 01       	movw	r24, r14
    1456:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    145a:	7c 01       	movw	r14, r24
    145c:	65 ef       	ldi	r22, 0xF5	; 245
    145e:	74 e0       	ldi	r23, 0x04	; 4
    1460:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1464:	6a e0       	ldi	r22, 0x0A	; 10
    1466:	c7 01       	movw	r24, r14
    1468:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    146c:	7c 01       	movw	r14, r24
    146e:	67 ee       	ldi	r22, 0xE7	; 231
    1470:	74 e0       	ldi	r23, 0x04	; 4
    1472:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1476:	63 e0       	ldi	r22, 0x03	; 3
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    147e:	b2 01       	movw	r22, r4
    1480:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN8emstreamlsEj>
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    148a:	66 e0       	ldi	r22, 0x06	; 6
    148c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1490:	13 c0       	rjmp	.+38     	; 0x14b8 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1492:	6a e0       	ldi	r22, 0x0A	; 10
    1494:	c3 01       	movw	r24, r6
    1496:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    149a:	4c 01       	movw	r8, r24
    149c:	62 ed       	ldi	r22, 0xD2	; 210
    149e:	74 e0       	ldi	r23, 0x04	; 4
    14a0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    14a4:	be 01       	movw	r22, r28
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	c4 01       	movw	r24, r8
    14ac:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    14b0:	66 e0       	ldi	r22, 0x06	; 6
    14b2:	c4 01       	movw	r24, r8
    14b4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    14b8:	2a 96       	adiw	r28, 0x0a	; 10
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	9f 90       	pop	r9
    14d4:	8f 90       	pop	r8
    14d6:	7f 90       	pop	r7
    14d8:	6f 90       	pop	r6
    14da:	5f 90       	pop	r5
    14dc:	4f 90       	pop	r4
    14de:	08 95       	ret

000014e0 <_ZN5rs23212clear_screenEv>:
    14e0:	dc 01       	movw	r26, r24
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	02 80       	ldd	r0, Z+2	; 0x02
    14e8:	f3 81       	ldd	r31, Z+3	; 0x03
    14ea:	e0 2d       	mov	r30, r0
    14ec:	6c e0       	ldi	r22, 0x0C	; 12
    14ee:	19 95       	eicall
    14f0:	08 95       	ret

000014f2 <_ZN5rs23214check_for_charEv>:
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
    14f8:	a9 8d       	ldd	r26, Y+25	; 0x19
    14fa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    14fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    14fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	4d 91       	ld	r20, X+
    1504:	5c 91       	ld	r21, X
    1506:	20 81       	ld	r18, Z
    1508:	31 81       	ldd	r19, Z+1	; 0x01
    150a:	42 17       	cp	r20, r18
    150c:	53 07       	cpc	r21, r19
    150e:	09 f4       	brne	.+2      	; 0x1512 <_ZN5rs23214check_for_charEv+0x20>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <_ZN5rs2327getcharEv>:
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	fc 01       	movw	r30, r24
    151e:	c1 8d       	ldd	r28, Z+25	; 0x19
    1520:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1522:	28 81       	ld	r18, Y
    1524:	39 81       	ldd	r19, Y+1	; 0x01
    1526:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1528:	b4 8d       	ldd	r27, Z+28	; 0x1c
    152a:	4d 91       	ld	r20, X+
    152c:	5c 91       	ld	r21, X
    152e:	24 17       	cp	r18, r20
    1530:	35 07       	cpc	r19, r21
    1532:	e9 f3       	breq	.-6      	; 0x152e <_ZN5rs2327getcharEv+0x16>
    1534:	a7 89       	ldd	r26, Z+23	; 0x17
    1536:	b0 8d       	ldd	r27, Z+24	; 0x18
    1538:	0d 90       	ld	r0, X+
    153a:	bc 91       	ld	r27, X
    153c:	a0 2d       	mov	r26, r0
    153e:	a2 0f       	add	r26, r18
    1540:	b3 1f       	adc	r27, r19
    1542:	8c 91       	ld	r24, X
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	28 83       	st	Y, r18
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	24 36       	cpi	r18, 0x64	; 100
    154e:	31 05       	cpc	r19, r1
    1550:	28 f0       	brcs	.+10     	; 0x155c <_ZN5rs2327getcharEv+0x44>
    1552:	01 8c       	ldd	r0, Z+25	; 0x19
    1554:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1556:	e0 2d       	mov	r30, r0
    1558:	10 82       	st	Z, r1
    155a:	11 82       	std	Z+1, r1	; 0x01
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <_ZN5rs2327putcharEc>:
    1564:	dc 01       	movw	r26, r24
    1566:	50 96       	adiw	r26, 0x10	; 16
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	51 97       	sbiw	r26, 0x11	; 17
    156e:	80 81       	ld	r24, Z
    1570:	54 96       	adiw	r26, 0x14	; 20
    1572:	4c 91       	ld	r20, X
    1574:	54 97       	sbiw	r26, 0x14	; 20
    1576:	84 23       	and	r24, r20
    1578:	29 f0       	breq	.+10     	; 0x1584 <_ZN5rs2327putcharEc+0x20>
    157a:	09 c0       	rjmp	.+18     	; 0x158e <_ZN5rs2327putcharEc+0x2a>
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	31 09       	sbc	r19, r1
    1580:	19 f4       	brne	.+6      	; 0x1588 <_ZN5rs2327putcharEc+0x24>
    1582:	12 c0       	rjmp	.+36     	; 0x15a8 <_ZN5rs2327putcharEc+0x44>
    1584:	21 e2       	ldi	r18, 0x21	; 33
    1586:	3e e4       	ldi	r19, 0x4E	; 78
    1588:	90 81       	ld	r25, Z
    158a:	94 23       	and	r25, r20
    158c:	b9 f3       	breq	.-18     	; 0x157c <_ZN5rs2327putcharEc+0x18>
    158e:	90 81       	ld	r25, Z
    1590:	56 96       	adiw	r26, 0x16	; 22
    1592:	8c 91       	ld	r24, X
    1594:	56 97       	sbiw	r26, 0x16	; 22
    1596:	89 2b       	or	r24, r25
    1598:	80 83       	st	Z, r24
    159a:	1e 96       	adiw	r26, 0x0e	; 14
    159c:	ed 91       	ld	r30, X+
    159e:	fc 91       	ld	r31, X
    15a0:	1f 97       	sbiw	r26, 0x0f	; 15
    15a2:	60 83       	st	Z, r22
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	08 95       	ret
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	08 95       	ret

000015ac <_GLOBAL__sub_I_counter>:
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ca ec       	ldi	r28, 0xCA	; 202
    15b2:	d0 e2       	ldi	r29, 0x20	; 32
    15b4:	8a e0       	ldi	r24, 0x0A	; 10
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	1b 82       	std	Y+3, r1	; 0x03
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	1c 82       	std	Y+4, r1	; 0x04
    15c0:	1e 82       	std	Y+6, r1	; 0x06
    15c2:	1f 82       	std	Y+7, r1	; 0x07
    15c4:	82 e6       	ldi	r24, 0x62	; 98
    15c6:	90 e2       	ldi	r25, 0x20	; 32
    15c8:	88 83       	st	Y, r24
    15ca:	99 83       	std	Y+1, r25	; 0x01
    15cc:	1e 86       	std	Y+14, r1	; 0x0e
    15ce:	1f 86       	std	Y+15, r1	; 0x0f
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	0e 94 88 13 	call	0x2710	; 0x2710 <xQueueGenericCreate>
    15da:	88 87       	std	Y+8, r24	; 0x08
    15dc:	99 87       	std	Y+9, r25	; 0x09
    15de:	8a e0       	ldi	r24, 0x0A	; 10
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	8a 87       	std	Y+10, r24	; 0x0a
    15e8:	9b 87       	std	Y+11, r25	; 0x0b
    15ea:	ac 87       	std	Y+12, r26	; 0x0c
    15ec:	bd 87       	std	Y+13, r27	; 0x0d
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <__vector_58>:
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	08 b6       	in	r0, 0x38	; 56
    1600:	0f 92       	push	r0
    1602:	18 be       	out	0x38, r1	; 56
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	1b be       	out	0x3b, r1	; 59
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
    1616:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    161a:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <rcvE0_buffer>
    161e:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <rcvE0_buffer+0x1>
    1622:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <rcvE0_write_index>
    1626:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <rcvE0_write_index+0x1>
    162a:	e8 0f       	add	r30, r24
    162c:	f9 1f       	adc	r31, r25
    162e:	20 83       	st	Z, r18
    1630:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <rcvE0_write_index>
    1634:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <rcvE0_write_index+0x1>
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	91 05       	cpc	r25, r1
    163e:	60 f4       	brcc	.+24     	; 0x1658 <__vector_58+0x64>
    1640:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <rcvE0_write_index>
    1644:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <rcvE0_write_index+0x1>
    1648:	20 91 dc 20 	lds	r18, 0x20DC	; 0x8020dc <rcvE0_read_index>
    164c:	30 91 dd 20 	lds	r19, 0x20DD	; 0x8020dd <rcvE0_read_index+0x1>
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
    1654:	f1 f4       	brne	.+60     	; 0x1692 <__vector_58+0x9e>
    1656:	0c c0       	rjmp	.+24     	; 0x1670 <__vector_58+0x7c>
    1658:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <rcvE0_write_index>
    165c:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <rcvE0_write_index+0x1>
    1660:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <rcvE0_read_index>
    1664:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <rcvE0_read_index+0x1>
    1668:	18 16       	cp	r1, r24
    166a:	19 06       	cpc	r1, r25
    166c:	91 f4       	brne	.+36     	; 0x1692 <__vector_58+0x9e>
    166e:	0e c0       	rjmp	.+28     	; 0x168c <__vector_58+0x98>
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	84 36       	cpi	r24, 0x64	; 100
    1674:	91 05       	cpc	r25, r1
    1676:	28 f4       	brcc	.+10     	; 0x1682 <__vector_58+0x8e>
    1678:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <rcvE0_read_index>
    167c:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <rcvE0_read_index+0x1>
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <__vector_58+0x9e>
    1682:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <rcvE0_read_index>
    1686:	10 92 dd 20 	sts	0x20DD, r1	; 0x8020dd <rcvE0_read_index+0x1>
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <__vector_58+0x9e>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	f3 cf       	rjmp	.-26     	; 0x1678 <__vector_58+0x84>
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0b be       	out	0x3b, r0	; 59
    16a2:	0f 90       	pop	r0
    16a4:	08 be       	out	0x38, r0	; 56
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_91>:
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	08 b6       	in	r0, 0x38	; 56
    16bc:	0f 92       	push	r0
    16be:	18 be       	out	0x38, r1	; 56
    16c0:	0b b6       	in	r0, 0x3b	; 59
    16c2:	0f 92       	push	r0
    16c4:	1b be       	out	0x3b, r1	; 59
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    16d6:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <rcvD1_buffer>
    16da:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <rcvD1_buffer+0x1>
    16de:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <rcvD1_write_index>
    16e2:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <rcvD1_write_index+0x1>
    16e6:	e8 0f       	add	r30, r24
    16e8:	f9 1f       	adc	r31, r25
    16ea:	20 83       	st	Z, r18
    16ec:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <rcvD1_write_index>
    16f0:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <rcvD1_write_index+0x1>
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	84 36       	cpi	r24, 0x64	; 100
    16f8:	91 05       	cpc	r25, r1
    16fa:	60 f4       	brcc	.+24     	; 0x1714 <__vector_91+0x64>
    16fc:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <rcvD1_write_index>
    1700:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <rcvD1_write_index+0x1>
    1704:	20 91 e2 20 	lds	r18, 0x20E2	; 0x8020e2 <rcvD1_read_index>
    1708:	30 91 e3 20 	lds	r19, 0x20E3	; 0x8020e3 <rcvD1_read_index+0x1>
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	f1 f4       	brne	.+60     	; 0x174e <__vector_91+0x9e>
    1712:	0c c0       	rjmp	.+24     	; 0x172c <__vector_91+0x7c>
    1714:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <rcvD1_write_index>
    1718:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <rcvD1_write_index+0x1>
    171c:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <rcvD1_read_index>
    1720:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <rcvD1_read_index+0x1>
    1724:	18 16       	cp	r1, r24
    1726:	19 06       	cpc	r1, r25
    1728:	91 f4       	brne	.+36     	; 0x174e <__vector_91+0x9e>
    172a:	0e c0       	rjmp	.+28     	; 0x1748 <__vector_91+0x98>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	84 36       	cpi	r24, 0x64	; 100
    1730:	91 05       	cpc	r25, r1
    1732:	28 f4       	brcc	.+10     	; 0x173e <__vector_91+0x8e>
    1734:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <rcvD1_read_index>
    1738:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <rcvD1_read_index+0x1>
    173c:	08 c0       	rjmp	.+16     	; 0x174e <__vector_91+0x9e>
    173e:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <rcvD1_read_index>
    1742:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <rcvD1_read_index+0x1>
    1746:	03 c0       	rjmp	.+6      	; 0x174e <__vector_91+0x9e>
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	f3 cf       	rjmp	.-26     	; 0x1734 <__vector_91+0x84>
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0b be       	out	0x3b, r0	; 59
    175e:	0f 90       	pop	r0
    1760:	08 be       	out	0x38, r0	; 56
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_88>:
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	08 b6       	in	r0, 0x38	; 56
    1778:	0f 92       	push	r0
    177a:	18 be       	out	0x38, r1	; 56
    177c:	0b b6       	in	r0, 0x3b	; 59
    177e:	0f 92       	push	r0
    1780:	1b be       	out	0x3b, r1	; 59
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1792:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <rcvD0_buffer>
    1796:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <rcvD0_buffer+0x1>
    179a:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <rcvC0_write_index>
    179e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <rcvC0_write_index+0x1>
    17a2:	e8 0f       	add	r30, r24
    17a4:	f9 1f       	adc	r31, r25
    17a6:	20 83       	st	Z, r18
    17a8:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <rcvD0_write_index>
    17ac:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <rcvD0_write_index+0x1>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	84 36       	cpi	r24, 0x64	; 100
    17b4:	91 05       	cpc	r25, r1
    17b6:	60 f4       	brcc	.+24     	; 0x17d0 <__vector_88+0x64>
    17b8:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <rcvD0_write_index>
    17bc:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <rcvD0_write_index+0x1>
    17c0:	20 91 e8 20 	lds	r18, 0x20E8	; 0x8020e8 <rcvD0_read_index>
    17c4:	30 91 e9 20 	lds	r19, 0x20E9	; 0x8020e9 <rcvD0_read_index+0x1>
    17c8:	82 17       	cp	r24, r18
    17ca:	93 07       	cpc	r25, r19
    17cc:	f1 f4       	brne	.+60     	; 0x180a <__vector_88+0x9e>
    17ce:	0c c0       	rjmp	.+24     	; 0x17e8 <__vector_88+0x7c>
    17d0:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <rcvD0_write_index>
    17d4:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <rcvD0_write_index+0x1>
    17d8:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <rcvD0_read_index>
    17dc:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <rcvD0_read_index+0x1>
    17e0:	18 16       	cp	r1, r24
    17e2:	19 06       	cpc	r1, r25
    17e4:	91 f4       	brne	.+36     	; 0x180a <__vector_88+0x9e>
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <__vector_88+0x98>
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	84 36       	cpi	r24, 0x64	; 100
    17ec:	91 05       	cpc	r25, r1
    17ee:	28 f4       	brcc	.+10     	; 0x17fa <__vector_88+0x8e>
    17f0:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <rcvD0_read_index>
    17f4:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <rcvD0_read_index+0x1>
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <__vector_88+0x9e>
    17fa:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <rcvD0_read_index>
    17fe:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <rcvD0_read_index+0x1>
    1802:	03 c0       	rjmp	.+6      	; 0x180a <__vector_88+0x9e>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	f3 cf       	rjmp	.-26     	; 0x17f0 <__vector_88+0x84>
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	3f 91       	pop	r19
    1814:	2f 91       	pop	r18
    1816:	0f 90       	pop	r0
    1818:	0b be       	out	0x3b, r0	; 59
    181a:	0f 90       	pop	r0
    181c:	08 be       	out	0x38, r0	; 56
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_28>:
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	08 b6       	in	r0, 0x38	; 56
    1834:	0f 92       	push	r0
    1836:	18 be       	out	0x38, r1	; 56
    1838:	0b b6       	in	r0, 0x3b	; 59
    183a:	0f 92       	push	r0
    183c:	1b be       	out	0x3b, r1	; 59
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	ef 93       	push	r30
    1848:	ff 93       	push	r31
    184a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    184e:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <rcvC1_buffer>
    1852:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <rcvC1_buffer+0x1>
    1856:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <rcvC1_write_index>
    185a:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <rcvC1_write_index+0x1>
    185e:	e8 0f       	add	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	20 83       	st	Z, r18
    1864:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <rcvC1_write_index>
    1868:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <rcvC1_write_index+0x1>
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	84 36       	cpi	r24, 0x64	; 100
    1870:	91 05       	cpc	r25, r1
    1872:	60 f4       	brcc	.+24     	; 0x188c <__vector_28+0x64>
    1874:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <rcvC1_write_index>
    1878:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <rcvC1_write_index+0x1>
    187c:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <rcvC1_read_index>
    1880:	30 91 ef 20 	lds	r19, 0x20EF	; 0x8020ef <rcvC1_read_index+0x1>
    1884:	82 17       	cp	r24, r18
    1886:	93 07       	cpc	r25, r19
    1888:	f1 f4       	brne	.+60     	; 0x18c6 <__vector_28+0x9e>
    188a:	0c c0       	rjmp	.+24     	; 0x18a4 <__vector_28+0x7c>
    188c:	10 92 ec 20 	sts	0x20EC, r1	; 0x8020ec <rcvC1_write_index>
    1890:	10 92 ed 20 	sts	0x20ED, r1	; 0x8020ed <rcvC1_write_index+0x1>
    1894:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <rcvC1_read_index>
    1898:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <rcvC1_read_index+0x1>
    189c:	18 16       	cp	r1, r24
    189e:	19 06       	cpc	r1, r25
    18a0:	91 f4       	brne	.+36     	; 0x18c6 <__vector_28+0x9e>
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <__vector_28+0x98>
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	84 36       	cpi	r24, 0x64	; 100
    18a8:	91 05       	cpc	r25, r1
    18aa:	28 f4       	brcc	.+10     	; 0x18b6 <__vector_28+0x8e>
    18ac:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <rcvC1_read_index>
    18b0:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <rcvC1_read_index+0x1>
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <__vector_28+0x9e>
    18b6:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <rcvC1_read_index>
    18ba:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <rcvC1_read_index+0x1>
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <__vector_28+0x9e>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	f3 cf       	rjmp	.-26     	; 0x18ac <__vector_28+0x84>
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0b be       	out	0x3b, r0	; 59
    18d6:	0f 90       	pop	r0
    18d8:	08 be       	out	0x38, r0	; 56
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__vector_25>:
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	08 b6       	in	r0, 0x38	; 56
    18f0:	0f 92       	push	r0
    18f2:	18 be       	out	0x38, r1	; 56
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	1b be       	out	0x3b, r1	; 59
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    190a:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <rcvC0_buffer>
    190e:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <rcvC0_buffer+0x1>
    1912:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <rcvC0_write_index>
    1916:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <rcvC0_write_index+0x1>
    191a:	e8 0f       	add	r30, r24
    191c:	f9 1f       	adc	r31, r25
    191e:	20 83       	st	Z, r18
    1920:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <rcvC0_write_index>
    1924:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <rcvC0_write_index+0x1>
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	84 36       	cpi	r24, 0x64	; 100
    192c:	91 05       	cpc	r25, r1
    192e:	60 f4       	brcc	.+24     	; 0x1948 <__vector_25+0x64>
    1930:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <rcvC0_write_index>
    1934:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <rcvC0_write_index+0x1>
    1938:	20 91 f4 20 	lds	r18, 0x20F4	; 0x8020f4 <rcvC0_read_index>
    193c:	30 91 f5 20 	lds	r19, 0x20F5	; 0x8020f5 <rcvC0_read_index+0x1>
    1940:	82 17       	cp	r24, r18
    1942:	93 07       	cpc	r25, r19
    1944:	f1 f4       	brne	.+60     	; 0x1982 <__vector_25+0x9e>
    1946:	0c c0       	rjmp	.+24     	; 0x1960 <__vector_25+0x7c>
    1948:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <rcvC0_write_index>
    194c:	10 92 f3 20 	sts	0x20F3, r1	; 0x8020f3 <rcvC0_write_index+0x1>
    1950:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <rcvC0_read_index>
    1954:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <rcvC0_read_index+0x1>
    1958:	18 16       	cp	r1, r24
    195a:	19 06       	cpc	r1, r25
    195c:	91 f4       	brne	.+36     	; 0x1982 <__vector_25+0x9e>
    195e:	0e c0       	rjmp	.+28     	; 0x197c <__vector_25+0x98>
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	84 36       	cpi	r24, 0x64	; 100
    1964:	91 05       	cpc	r25, r1
    1966:	28 f4       	brcc	.+10     	; 0x1972 <__vector_25+0x8e>
    1968:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <rcvC0_read_index>
    196c:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <rcvC0_read_index+0x1>
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <__vector_25+0x9e>
    1972:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <rcvC0_read_index>
    1976:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <rcvC0_read_index+0x1>
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <__vector_25+0x9e>
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	f3 cf       	rjmp	.-26     	; 0x1968 <__vector_25+0x84>
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0b be       	out	0x3b, r0	; 59
    1992:	0f 90       	pop	r0
    1994:	08 be       	out	0x38, r0	; 56
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	0f 90       	pop	r0
    199c:	1f 90       	pop	r1
    199e:	18 95       	reti

000019a0 <_ZN8emstreamlsE15ser_manipulator>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
    19a6:	86 2f       	mov	r24, r22
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	8b 30       	cpi	r24, 0x0B	; 11
    19ac:	91 05       	cpc	r25, r1
    19ae:	d8 f5       	brcc	.+118    	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19b0:	fc 01       	movw	r30, r24
    19b2:	88 27       	eor	r24, r24
    19b4:	e2 50       	subi	r30, 0x02	; 2
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__tablejump2__>
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	31 c0       	rjmp	.+98     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	2e c0       	rjmp	.+92     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19ca:	8a e0       	ldi	r24, 0x0A	; 10
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	2b c0       	rjmp	.+86     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19d0:	80 e1       	ldi	r24, 0x10	; 16
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	28 c0       	rjmp	.+80     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	8b 83       	std	Y+3, r24	; 0x03
    19da:	25 c0       	rjmp	.+74     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19dc:	1b 82       	std	Y+3, r1	; 0x03
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    19e0:	e8 81       	ld	r30, Y
    19e2:	f9 81       	ldd	r31, Y+1	; 0x01
    19e4:	02 80       	ldd	r0, Z+2	; 0x02
    19e6:	f3 81       	ldd	r31, Z+3	; 0x03
    19e8:	e0 2d       	mov	r30, r0
    19ea:	6d e0       	ldi	r22, 0x0D	; 13
    19ec:	ce 01       	movw	r24, r28
    19ee:	19 95       	eicall
    19f0:	e8 81       	ld	r30, Y
    19f2:	f9 81       	ldd	r31, Y+1	; 0x01
    19f4:	02 80       	ldd	r0, Z+2	; 0x02
    19f6:	f3 81       	ldd	r31, Z+3	; 0x03
    19f8:	e0 2d       	mov	r30, r0
    19fa:	6a e0       	ldi	r22, 0x0A	; 10
    19fc:	ce 01       	movw	r24, r28
    19fe:	19 95       	eicall
    1a00:	12 c0       	rjmp	.+36     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1a02:	e8 81       	ld	r30, Y
    1a04:	f9 81       	ldd	r31, Y+1	; 0x01
    1a06:	02 84       	ldd	r0, Z+10	; 0x0a
    1a08:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	19 95       	eicall
    1a10:	0a c0       	rjmp	.+20     	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1a12:	e8 81       	ld	r30, Y
    1a14:	f9 81       	ldd	r31, Y+1	; 0x01
    1a16:	00 84       	ldd	r0, Z+8	; 0x08
    1a18:	f1 85       	ldd	r31, Z+9	; 0x09
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	19 95       	eicall
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	8c 83       	std	Y+4, r24	; 0x04
    1a26:	ce 01       	movw	r24, r28
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <_ZN8emstream4putsEPKc>:
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	8c 01       	movw	r16, r24
    1a38:	fb 01       	movw	r30, r22
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	14 96       	adiw	r26, 0x04	; 4
    1a3e:	8c 91       	ld	r24, X
    1a40:	81 11       	cpse	r24, r1
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <_ZN8emstream4putsEPKc+0x1e>
    1a44:	60 81       	ld	r22, Z
    1a46:	61 11       	cpse	r22, r1
    1a48:	17 c0       	rjmp	.+46     	; 0x1a78 <_ZN8emstream4putsEPKc+0x4a>
    1a4a:	23 c0       	rjmp	.+70     	; 0x1a92 <_ZN8emstream4putsEPKc+0x64>
    1a4c:	d8 01       	movw	r26, r16
    1a4e:	14 96       	adiw	r26, 0x04	; 4
    1a50:	1c 92       	st	X, r1
    1a52:	eb 01       	movw	r28, r22
    1a54:	21 96       	adiw	r28, 0x01	; 1
    1a56:	64 91       	lpm	r22, Z
    1a58:	66 23       	and	r22, r22
    1a5a:	d9 f0       	breq	.+54     	; 0x1a92 <_ZN8emstream4putsEPKc+0x64>
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	ed 91       	ld	r30, X+
    1a60:	fc 91       	ld	r31, X
    1a62:	02 80       	ldd	r0, Z+2	; 0x02
    1a64:	f3 81       	ldd	r31, Z+3	; 0x03
    1a66:	e0 2d       	mov	r30, r0
    1a68:	c8 01       	movw	r24, r16
    1a6a:	19 95       	eicall
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	64 91       	lpm	r22, Z
    1a70:	21 96       	adiw	r28, 0x01	; 1
    1a72:	61 11       	cpse	r22, r1
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <_ZN8emstream4putsEPKc+0x2e>
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <_ZN8emstream4putsEPKc+0x64>
    1a78:	ef 01       	movw	r28, r30
    1a7a:	21 96       	adiw	r28, 0x01	; 1
    1a7c:	d8 01       	movw	r26, r16
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	02 80       	ldd	r0, Z+2	; 0x02
    1a84:	f3 81       	ldd	r31, Z+3	; 0x03
    1a86:	e0 2d       	mov	r30, r0
    1a88:	c8 01       	movw	r24, r16
    1a8a:	19 95       	eicall
    1a8c:	69 91       	ld	r22, Y+
    1a8e:	61 11       	cpse	r22, r1
    1a90:	f5 cf       	rjmp	.-22     	; 0x1a7c <_ZN8emstream4putsEPKc+0x4e>
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <main>:
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	6e 97       	sbiw	r28, 0x1e	; 30
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	f6 e0       	ldi	r31, 0x06	; 6
    1abc:	80 e1       	ldi	r24, 0x10	; 16
    1abe:	81 83       	std	Z+1, r24	; 0x01
    1ac0:	85 83       	std	Z+5, r24	; 0x05
    1ac2:	f8 94       	cli
    1ac4:	e0 e5       	ldi	r30, 0x50	; 80
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	80 83       	st	Z, r24
    1ace:	81 81       	ldd	r24, Z+1	; 0x01
    1ad0:	81 ff       	sbrs	r24, 1
    1ad2:	fd cf       	rjmp	.-6      	; 0x1ace <main+0x32>
    1ad4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1ad8:	9f b7       	in	r25, 0x3f	; 63
    1ada:	9e 8f       	std	Y+30, r25	; 0x1e
    1adc:	f8 94       	cli
    1ade:	1b be       	out	0x3b, r1	; 59
    1ae0:	88 7f       	andi	r24, 0xF8	; 248
    1ae2:	81 60       	ori	r24, 0x01	; 1
    1ae4:	20 e4       	ldi	r18, 0x40	; 64
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	08 ed       	ldi	r16, 0xD8	; 216
    1aec:	04 bf       	out	0x34, r16	; 52
    1aee:	80 83       	st	Z, r24
    1af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1af2:	8f bf       	out	0x3f, r24	; 63
    1af4:	e0 e5       	ldi	r30, 0x50	; 80
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8e 7f       	andi	r24, 0xFE	; 254
    1afc:	80 83       	st	Z, r24
    1afe:	9d ef       	ldi	r25, 0xFD	; 253
    1b00:	88 ed       	ldi	r24, 0xD8	; 216
    1b02:	08 b6       	in	r0, 0x38	; 56
    1b04:	18 be       	out	0x38, r1	; 56
    1b06:	84 bf       	out	0x34, r24	; 52
    1b08:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b0c:	08 be       	out	0x38, r0	; 56
    1b0e:	82 e5       	ldi	r24, 0x52	; 82
    1b10:	90 e2       	ldi	r25, 0x20	; 32
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	1c 82       	std	Y+4, r1	; 0x04
    1b1c:	43 e0       	ldi	r20, 0x03	; 3
    1b1e:	4e 83       	std	Y+6, r20	; 0x06
    1b20:	1d 82       	std	Y+5, r1	; 0x05
    1b22:	1f 82       	std	Y+7, r1	; 0x07
    1b24:	18 86       	std	Y+8, r1	; 0x08
    1b26:	a0 e4       	ldi	r26, 0x40	; 64
    1b28:	b6 e0       	ldi	r27, 0x06	; 6
    1b2a:	ab 87       	std	Y+11, r26	; 0x0b
    1b2c:	bc 87       	std	Y+12, r27	; 0x0c
    1b2e:	86 e0       	ldi	r24, 0x06	; 6
    1b30:	8d 87       	std	Y+13, r24	; 0x0d
    1b32:	0f 2e       	mov	r0, r31
    1b34:	f7 e0       	ldi	r31, 0x07	; 7
    1b36:	df 2e       	mov	r13, r31
    1b38:	f0 2d       	mov	r31, r0
    1b3a:	de 86       	std	Y+14, r13	; 0x0e
    1b3c:	e0 eb       	ldi	r30, 0xB0	; 176
    1b3e:	f8 e0       	ldi	r31, 0x08	; 8
    1b40:	ef 87       	std	Y+15, r30	; 0x0f
    1b42:	f8 8b       	std	Y+16, r31	; 0x10
    1b44:	81 eb       	ldi	r24, 0xB1	; 177
    1b46:	98 e0       	ldi	r25, 0x08	; 8
    1b48:	89 8b       	std	Y+17, r24	; 0x11
    1b4a:	9a 8b       	std	Y+18, r25	; 0x12
    1b4c:	84 eb       	ldi	r24, 0xB4	; 180
    1b4e:	98 e0       	ldi	r25, 0x08	; 8
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	5c 91       	ld	r21, X
    1b5a:	14 97       	sbiw	r26, 0x04	; 4
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	bc 01       	movw	r22, r24
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <main+0xcc>
    1b64:	66 0f       	add	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	2a 95       	dec	r18
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <main+0xc8>
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	25 2b       	or	r18, r21
    1b70:	14 96       	adiw	r26, 0x04	; 4
    1b72:	2c 93       	st	X, r18
    1b74:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b76:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b78:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b7a:	5c 91       	ld	r21, X
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <main+0xe8>
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	2a 95       	dec	r18
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <main+0xe4>
    1b88:	9b 01       	movw	r18, r22
    1b8a:	25 2b       	or	r18, r21
    1b8c:	2c 93       	st	X, r18
    1b8e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b90:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b92:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b94:	2c 91       	ld	r18, X
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <main+0x100>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	3a 95       	dec	r19
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <main+0xfc>
    1ba0:	80 95       	com	r24
    1ba2:	90 95       	com	r25
    1ba4:	82 23       	and	r24, r18
    1ba6:	8c 93       	st	X, r24
    1ba8:	80 e1       	ldi	r24, 0x10	; 16
    1baa:	83 83       	std	Z+3, r24	; 0x03
    1bac:	45 83       	std	Z+5, r20	; 0x05
    1bae:	80 ef       	ldi	r24, 0xF0	; 240
    1bb0:	87 83       	std	Z+7, r24	; 0x07
    1bb2:	81 e2       	ldi	r24, 0x21	; 33
    1bb4:	86 83       	std	Z+6, r24	; 0x06
    1bb6:	88 e1       	ldi	r24, 0x18	; 24
    1bb8:	84 83       	std	Z+4, r24	; 0x04
    1bba:	80 e8       	ldi	r24, 0x80	; 128
    1bbc:	8e 8b       	std	Y+22, r24	; 0x16
    1bbe:	80 e4       	ldi	r24, 0x40	; 64
    1bc0:	8f 8b       	std	Y+23, r24	; 0x17
    1bc2:	80 e2       	ldi	r24, 0x20	; 32
    1bc4:	8d 8b       	std	Y+21, r24	; 0x15
    1bc6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1bc8:	f8 89       	ldd	r31, Y+16	; 0x10
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 e1       	ldi	r24, 0x12	; 18
    1bd0:	90 e2       	ldi	r25, 0x20	; 32
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	80 ef       	ldi	r24, 0xF0	; 240
    1bd8:	90 e2       	ldi	r25, 0x20	; 32
    1bda:	88 8f       	std	Y+24, r24	; 0x18
    1bdc:	99 8f       	std	Y+25, r25	; 0x19
    1bde:	8e ee       	ldi	r24, 0xEE	; 238
    1be0:	90 e2       	ldi	r25, 0x20	; 32
    1be2:	8a 8f       	std	Y+26, r24	; 0x1a
    1be4:	9b 8f       	std	Y+27, r25	; 0x1b
    1be6:	8c ee       	ldi	r24, 0xEC	; 236
    1be8:	90 e2       	ldi	r25, 0x20	; 32
    1bea:	8c 8f       	std	Y+28, r24	; 0x1c
    1bec:	9d 8f       	std	Y+29, r25	; 0x1d
    1bee:	84 e6       	ldi	r24, 0x64	; 100
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1bf6:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <rcvC1_buffer>
    1bfa:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <rcvC1_buffer+0x1>
    1bfe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c00:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c02:	10 82       	st	Z, r1
    1c04:	11 82       	std	Z+1, r1	; 0x01
    1c06:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c08:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1c0a:	10 82       	st	Z, r1
    1c0c:	11 82       	std	Z+1, r1	; 0x01
    1c0e:	67 e0       	ldi	r22, 0x07	; 7
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1c18:	7c 01       	movw	r14, r24
    1c1a:	6e e6       	ldi	r22, 0x6E	; 110
    1c1c:	70 e2       	ldi	r23, 0x20	; 32
    1c1e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1c22:	66 e0       	ldi	r22, 0x06	; 6
    1c24:	c7 01       	movw	r24, r14
    1c26:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN8emstreamlsE15ser_manipulator>
    1c30:	82 e1       	ldi	r24, 0x12	; 18
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1c38:	7c 01       	movw	r14, r24
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	0f 5f       	subi	r16, 0xFF	; 255
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	24 e0       	ldi	r18, 0x04	; 4
    1c42:	31 e0       	ldi	r19, 0x01	; 1
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	6d e8       	ldi	r22, 0x8D	; 141
    1c48:	70 e2       	ldi	r23, 0x20	; 32
    1c4a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1c4e:	82 e2       	ldi	r24, 0x22	; 34
    1c50:	90 e2       	ldi	r25, 0x20	; 32
    1c52:	f7 01       	movw	r30, r14
    1c54:	80 83       	st	Z, r24
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	83 e1       	ldi	r24, 0x13	; 19
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1c60:	7c 01       	movw	r14, r24
    1c62:	24 e0       	ldi	r18, 0x04	; 4
    1c64:	31 e0       	ldi	r19, 0x01	; 1
    1c66:	44 e0       	ldi	r20, 0x04	; 4
    1c68:	65 e9       	ldi	r22, 0x95	; 149
    1c6a:	70 e2       	ldi	r23, 0x20	; 32
    1c6c:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1c70:	0f 2e       	mov	r0, r31
    1c72:	fa e2       	ldi	r31, 0x2A	; 42
    1c74:	af 2e       	mov	r10, r31
    1c76:	f0 e2       	ldi	r31, 0x20	; 32
    1c78:	bf 2e       	mov	r11, r31
    1c7a:	f0 2d       	mov	r31, r0
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	a0 82       	st	Z, r10
    1c80:	b1 82       	std	Z+1, r11	; 0x01
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	82 8b       	std	Z+18, r24	; 0x12
    1c86:	83 e1       	ldi	r24, 0x13	; 19
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1c8e:	7c 01       	movw	r14, r24
    1c90:	24 e0       	ldi	r18, 0x04	; 4
    1c92:	31 e0       	ldi	r19, 0x01	; 1
    1c94:	44 e0       	ldi	r20, 0x04	; 4
    1c96:	6c e9       	ldi	r22, 0x9C	; 156
    1c98:	70 e2       	ldi	r23, 0x20	; 32
    1c9a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	a0 82       	st	Z, r10
    1ca2:	b1 82       	std	Z+1, r11	; 0x01
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	82 8b       	std	Z+18, r24	; 0x12
    1ca8:	82 e1       	ldi	r24, 0x12	; 18
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1cb0:	7c 01       	movw	r14, r24
    1cb2:	24 e0       	ldi	r18, 0x04	; 4
    1cb4:	31 e0       	ldi	r19, 0x01	; 1
    1cb6:	44 e0       	ldi	r20, 0x04	; 4
    1cb8:	64 ea       	ldi	r22, 0xA4	; 164
    1cba:	70 e2       	ldi	r23, 0x20	; 32
    1cbc:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1cc0:	82 e3       	ldi	r24, 0x32	; 50
    1cc2:	90 e2       	ldi	r25, 0x20	; 32
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	80 83       	st	Z, r24
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	82 e1       	ldi	r24, 0x12	; 18
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1cd2:	7c 01       	movw	r14, r24
    1cd4:	24 e0       	ldi	r18, 0x04	; 4
    1cd6:	31 e0       	ldi	r19, 0x01	; 1
    1cd8:	43 e0       	ldi	r20, 0x03	; 3
    1cda:	6b ea       	ldi	r22, 0xAB	; 171
    1cdc:	70 e2       	ldi	r23, 0x20	; 32
    1cde:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1ce2:	8a e3       	ldi	r24, 0x3A	; 58
    1ce4:	90 e2       	ldi	r25, 0x20	; 32
    1ce6:	f7 01       	movw	r30, r14
    1ce8:	80 83       	st	Z, r24
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	82 e1       	ldi	r24, 0x12	; 18
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	24 e0       	ldi	r18, 0x04	; 4
    1cf8:	31 e0       	ldi	r19, 0x01	; 1
    1cfa:	42 e0       	ldi	r20, 0x02	; 2
    1cfc:	62 eb       	ldi	r22, 0xB2	; 178
    1cfe:	70 e2       	ldi	r23, 0x20	; 32
    1d00:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1d04:	82 e4       	ldi	r24, 0x42	; 66
    1d06:	90 e2       	ldi	r25, 0x20	; 32
    1d08:	f7 01       	movw	r30, r14
    1d0a:	80 83       	st	Z, r24
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	82 e1       	ldi	r24, 0x12	; 18
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    1d16:	7c 01       	movw	r14, r24
    1d18:	24 e0       	ldi	r18, 0x04	; 4
    1d1a:	31 e0       	ldi	r19, 0x01	; 1
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	6a eb       	ldi	r22, 0xBA	; 186
    1d20:	70 e2       	ldi	r23, 0x20	; 32
    1d22:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN8frt_taskC2EPKchjP8emstream>
    1d26:	8a e4       	ldi	r24, 0x4A	; 74
    1d28:	90 e2       	ldi	r25, 0x20	; 32
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d34:	78 94       	sei
    1d36:	0e 94 83 16 	call	0x2d06	; 0x2d06 <vTaskStartScheduler>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	6e 96       	adiw	r28, 0x1e	; 30
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	08 95       	ret

00001d58 <_ZN8emstreamlsEh>:
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	29 97       	sbiw	r28, 0x09	; 9
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	8c 01       	movw	r16, r24
    1d74:	e6 2e       	mov	r14, r22
    1d76:	dc 01       	movw	r26, r24
    1d78:	13 96       	adiw	r26, 0x03	; 3
    1d7a:	8c 91       	ld	r24, X
    1d7c:	13 97       	sbiw	r26, 0x03	; 3
    1d7e:	88 23       	and	r24, r24
    1d80:	41 f0       	breq	.+16     	; 0x1d92 <_ZN8emstreamlsEh+0x3a>
    1d82:	ed 91       	ld	r30, X+
    1d84:	fc 91       	ld	r31, X
    1d86:	02 80       	ldd	r0, Z+2	; 0x02
    1d88:	f3 81       	ldd	r31, Z+3	; 0x03
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	19 95       	eicall
    1d90:	56 c0       	rjmp	.+172    	; 0x1e3e <_ZN8emstreamlsEh+0xe6>
    1d92:	f8 01       	movw	r30, r16
    1d94:	42 81       	ldd	r20, Z+2	; 0x02
    1d96:	42 30       	cpi	r20, 0x02	; 2
    1d98:	19 f5       	brne	.+70     	; 0x1de0 <_ZN8emstreamlsEh+0x88>
    1d9a:	68 94       	set
    1d9c:	cc 24       	eor	r12, r12
    1d9e:	c3 f8       	bld	r12, 3
    1da0:	d1 2c       	mov	r13, r1
    1da2:	68 94       	set
    1da4:	ff 24       	eor	r15, r15
    1da6:	f7 f8       	bld	r15, 7
    1da8:	8e 2d       	mov	r24, r14
    1daa:	8f 21       	and	r24, r15
    1dac:	51 f0       	breq	.+20     	; 0x1dc2 <_ZN8emstreamlsEh+0x6a>
    1dae:	d8 01       	movw	r26, r16
    1db0:	ed 91       	ld	r30, X+
    1db2:	fc 91       	ld	r31, X
    1db4:	02 80       	ldd	r0, Z+2	; 0x02
    1db6:	f3 81       	ldd	r31, Z+3	; 0x03
    1db8:	e0 2d       	mov	r30, r0
    1dba:	61 e3       	ldi	r22, 0x31	; 49
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	19 95       	eicall
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <_ZN8emstreamlsEh+0x7c>
    1dc2:	d8 01       	movw	r26, r16
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	02 80       	ldd	r0, Z+2	; 0x02
    1dca:	f3 81       	ldd	r31, Z+3	; 0x03
    1dcc:	e0 2d       	mov	r30, r0
    1dce:	60 e3       	ldi	r22, 0x30	; 48
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	19 95       	eicall
    1dd4:	f6 94       	lsr	r15
    1dd6:	b1 e0       	ldi	r27, 0x01	; 1
    1dd8:	cb 1a       	sub	r12, r27
    1dda:	d1 08       	sbc	r13, r1
    1ddc:	29 f7       	brne	.-54     	; 0x1da8 <_ZN8emstreamlsEh+0x50>
    1dde:	2f c0       	rjmp	.+94     	; 0x1e3e <_ZN8emstreamlsEh+0xe6>
    1de0:	40 31       	cpi	r20, 0x10	; 16
    1de2:	f9 f4       	brne	.+62     	; 0x1e22 <_ZN8emstreamlsEh+0xca>
    1de4:	62 95       	swap	r22
    1de6:	6f 70       	andi	r22, 0x0F	; 15
    1de8:	01 90       	ld	r0, Z+
    1dea:	f0 81       	ld	r31, Z
    1dec:	e0 2d       	mov	r30, r0
    1dee:	02 80       	ldd	r0, Z+2	; 0x02
    1df0:	f3 81       	ldd	r31, Z+3	; 0x03
    1df2:	e0 2d       	mov	r30, r0
    1df4:	6a 30       	cpi	r22, 0x0A	; 10
    1df6:	10 f0       	brcs	.+4      	; 0x1dfc <_ZN8emstreamlsEh+0xa4>
    1df8:	69 5c       	subi	r22, 0xC9	; 201
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <_ZN8emstreamlsEh+0xa6>
    1dfc:	60 5d       	subi	r22, 0xD0	; 208
    1dfe:	c8 01       	movw	r24, r16
    1e00:	19 95       	eicall
    1e02:	6e 2d       	mov	r22, r14
    1e04:	6f 70       	andi	r22, 0x0F	; 15
    1e06:	d8 01       	movw	r26, r16
    1e08:	ed 91       	ld	r30, X+
    1e0a:	fc 91       	ld	r31, X
    1e0c:	02 80       	ldd	r0, Z+2	; 0x02
    1e0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e10:	e0 2d       	mov	r30, r0
    1e12:	6a 30       	cpi	r22, 0x0A	; 10
    1e14:	10 f0       	brcs	.+4      	; 0x1e1a <_ZN8emstreamlsEh+0xc2>
    1e16:	69 5c       	subi	r22, 0xC9	; 201
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <_ZN8emstreamlsEh+0xc4>
    1e1a:	60 5d       	subi	r22, 0xD0	; 208
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	19 95       	eicall
    1e20:	0e c0       	rjmp	.+28     	; 0x1e3e <_ZN8emstreamlsEh+0xe6>
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	be 01       	movw	r22, r28
    1e26:	6f 5f       	subi	r22, 0xFF	; 255
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	8e 2d       	mov	r24, r14
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <utoa>
    1e32:	be 01       	movw	r22, r28
    1e34:	6f 5f       	subi	r22, 0xFF	; 255
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	c8 01       	movw	r24, r16
    1e3a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1e3e:	c8 01       	movw	r24, r16
    1e40:	29 96       	adiw	r28, 0x09	; 9
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	08 95       	ret

00001e58 <_ZN8emstreamlsEm>:
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	a1 97       	sbiw	r28, 0x21	; 33
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	8c 01       	movw	r16, r24
    1e72:	d4 2e       	mov	r13, r20
    1e74:	e5 2e       	mov	r14, r21
    1e76:	f6 2e       	mov	r15, r22
    1e78:	97 2f       	mov	r25, r23
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	22 81       	ldd	r18, Z+2	; 0x02
    1e7e:	20 31       	cpi	r18, 0x10	; 16
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <_ZN8emstreamlsEm+0x32>
    1e82:	28 30       	cpi	r18, 0x08	; 8
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <_ZN8emstreamlsEm+0x32>
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	71 f4       	brne	.+28     	; 0x1ea6 <_ZN8emstreamlsEm+0x4e>
    1e8a:	69 2f       	mov	r22, r25
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1e92:	6f 2d       	mov	r22, r15
    1e94:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1e98:	6e 2d       	mov	r22, r14
    1e9a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1e9e:	6d 2d       	mov	r22, r13
    1ea0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <_ZN8emstreamlsEm+0x6c>
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	ae 01       	movw	r20, r28
    1eaa:	4f 5f       	subi	r20, 0xFF	; 255
    1eac:	5f 4f       	sbci	r21, 0xFF	; 255
    1eae:	6d 2d       	mov	r22, r13
    1eb0:	7e 2d       	mov	r23, r14
    1eb2:	8f 2d       	mov	r24, r15
    1eb4:	0e 94 44 1b 	call	0x3688	; 0x3688 <ultoa>
    1eb8:	be 01       	movw	r22, r28
    1eba:	6f 5f       	subi	r22, 0xFF	; 255
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1ec4:	c8 01       	movw	r24, r16
    1ec6:	a1 96       	adiw	r28, 0x21	; 33
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	08 95       	ret

00001edc <_ZN8emstreamlsEj>:
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	61 97       	sbiw	r28, 0x11	; 17
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	8c 01       	movw	r16, r24
    1ef2:	f6 2e       	mov	r15, r22
    1ef4:	97 2f       	mov	r25, r23
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	42 81       	ldd	r20, Z+2	; 0x02
    1efa:	40 31       	cpi	r20, 0x10	; 16
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <_ZN8emstreamlsEj+0x2a>
    1efe:	48 30       	cpi	r20, 0x08	; 8
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <_ZN8emstreamlsEj+0x2a>
    1f02:	42 30       	cpi	r20, 0x02	; 2
    1f04:	41 f4       	brne	.+16     	; 0x1f16 <_ZN8emstreamlsEj+0x3a>
    1f06:	69 2f       	mov	r22, r25
    1f08:	c8 01       	movw	r24, r16
    1f0a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1f0e:	6f 2d       	mov	r22, r15
    1f10:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8emstreamlsEh>
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <_ZN8emstreamlsEj+0x54>
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	be 01       	movw	r22, r28
    1f1a:	6f 5f       	subi	r22, 0xFF	; 255
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 2d       	mov	r24, r15
    1f20:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <utoa>
    1f24:	be 01       	movw	r22, r28
    1f26:	6f 5f       	subi	r22, 0xFF	; 255
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_ZN8emstream4putsEPKc>
    1f30:	c8 01       	movw	r24, r16
    1f32:	61 96       	adiw	r28, 0x11	; 17
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	08 95       	ret

00001f44 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1f4e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1f52:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <xHeapHasBeenInitialised.4150>
    1f56:	81 11       	cpse	r24, r1
    1f58:	1d c0       	rjmp	.+58     	; 0x1f94 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    1f5a:	ad ef       	ldi	r26, 0xFD	; 253
    1f5c:	b0 e2       	ldi	r27, 0x20	; 32
    1f5e:	e1 e0       	ldi	r30, 0x01	; 1
    1f60:	f1 e2       	ldi	r31, 0x21	; 33
    1f62:	ed 93       	st	X+, r30
    1f64:	fc 93       	st	X, r31
    1f66:	11 97       	sbiw	r26, 0x01	; 1
    1f68:	12 96       	adiw	r26, 0x02	; 2
    1f6a:	1d 92       	st	X+, r1
    1f6c:	1c 92       	st	X, r1
    1f6e:	13 97       	sbiw	r26, 0x03	; 3
    1f70:	a9 ef       	ldi	r26, 0xF9	; 249
    1f72:	b0 e2       	ldi	r27, 0x20	; 32
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f e0       	ldi	r25, 0x0F	; 15
    1f78:	12 96       	adiw	r26, 0x02	; 2
    1f7a:	8d 93       	st	X+, r24
    1f7c:	9c 93       	st	X, r25
    1f7e:	13 97       	sbiw	r26, 0x03	; 3
    1f80:	1d 92       	st	X+, r1
    1f82:	1c 92       	st	X, r1
    1f84:	11 97       	sbiw	r26, 0x01	; 1
    1f86:	82 83       	std	Z+2, r24	; 0x02
    1f88:	93 83       	std	Z+3, r25	; 0x03
    1f8a:	a0 83       	st	Z, r26
    1f8c:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 f8 20 	sts	0x20F8, r24	; 0x8020f8 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1f94:	20 97       	sbiw	r28, 0x00	; 0
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <pvPortMalloc+0x56>
    1f98:	5f c0       	rjmp	.+190    	; 0x2058 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1f9a:	9e 01       	movw	r18, r28
    1f9c:	2b 5f       	subi	r18, 0xFB	; 251
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    1fa0:	24 96       	adiw	r28, 0x04	; 4
    1fa2:	ce 3f       	cpi	r28, 0xFE	; 254
    1fa4:	df 40       	sbci	r29, 0x0F	; 15
    1fa6:	08 f0       	brcs	.+2      	; 0x1faa <pvPortMalloc+0x66>
    1fa8:	5a c0       	rjmp	.+180    	; 0x205e <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1faa:	e0 91 fd 20 	lds	r30, 0x20FD	; 0x8020fd <xStart>
    1fae:	f0 91 fe 20 	lds	r31, 0x20FE	; 0x8020fe <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1fb2:	ad ef       	ldi	r26, 0xFD	; 253
    1fb4:	b0 e2       	ldi	r27, 0x20	; 32
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <pvPortMalloc+0x78>
    1fb8:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    1fba:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	82 17       	cp	r24, r18
    1fc2:	93 07       	cpc	r25, r19
    1fc4:	20 f4       	brcc	.+8      	; 0x1fce <pvPortMalloc+0x8a>
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	a9 f7       	brne	.-22     	; 0x1fb8 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1fce:	c0 e2       	ldi	r28, 0x20	; 32
    1fd0:	e9 3f       	cpi	r30, 0xF9	; 249
    1fd2:	fc 07       	cpc	r31, r28
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <pvPortMalloc+0x94>
    1fd6:	46 c0       	rjmp	.+140    	; 0x2064 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1fd8:	cd 91       	ld	r28, X+
    1fda:	dc 91       	ld	r29, X
    1fdc:	11 97       	sbiw	r26, 0x01	; 1
    1fde:	8e 01       	movw	r16, r28
    1fe0:	0b 5f       	subi	r16, 0xFB	; 251
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	8d 93       	st	X+, r24
    1fea:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	82 1b       	sub	r24, r18
    1ff2:	93 0b       	sbc	r25, r19
    1ff4:	8b 30       	cpi	r24, 0x0B	; 11
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	10 f1       	brcs	.+68     	; 0x203e <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    1ffa:	bf 01       	movw	r22, r30
    1ffc:	62 0f       	add	r22, r18
    1ffe:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2000:	db 01       	movw	r26, r22
    2002:	12 96       	adiw	r26, 0x02	; 2
    2004:	8d 93       	st	X+, r24
    2006:	9c 93       	st	X, r25
    2008:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    200a:	22 83       	std	Z+2, r18	; 0x02
    200c:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    200e:	12 96       	adiw	r26, 0x02	; 2
    2010:	4d 91       	ld	r20, X+
    2012:	5c 91       	ld	r21, X
    2014:	13 97       	sbiw	r26, 0x03	; 3
    2016:	8d ef       	ldi	r24, 0xFD	; 253
    2018:	90 e2       	ldi	r25, 0x20	; 32
    201a:	01 c0       	rjmp	.+2      	; 0x201e <pvPortMalloc+0xda>
    201c:	cd 01       	movw	r24, r26
    201e:	ec 01       	movw	r28, r24
    2020:	a8 81       	ld	r26, Y
    2022:	b9 81       	ldd	r27, Y+1	; 0x01
    2024:	12 96       	adiw	r26, 0x02	; 2
    2026:	2d 91       	ld	r18, X+
    2028:	3c 91       	ld	r19, X
    202a:	13 97       	sbiw	r26, 0x03	; 3
    202c:	24 17       	cp	r18, r20
    202e:	35 07       	cpc	r19, r21
    2030:	a8 f3       	brcs	.-22     	; 0x201c <pvPortMalloc+0xd8>
    2032:	eb 01       	movw	r28, r22
    2034:	a8 83       	st	Y, r26
    2036:	b9 83       	std	Y+1, r27	; 0x01
    2038:	dc 01       	movw	r26, r24
    203a:	6d 93       	st	X+, r22
    203c:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    203e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2042:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2046:	22 81       	ldd	r18, Z+2	; 0x02
    2048:	33 81       	ldd	r19, Z+3	; 0x03
    204a:	82 1b       	sub	r24, r18
    204c:	93 0b       	sbc	r25, r19
    204e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2052:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <pvPortMalloc+0x124>
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	10 e0       	ldi	r17, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <pvPortMalloc+0x124>
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2068:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    206c:	c8 01       	movw	r24, r16
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	41 f1       	breq	.+80     	; 0x20d4 <vPortFree+0x5c>
    2084:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2086:	8c 01       	movw	r16, r24
    2088:	05 50       	subi	r16, 0x05	; 5
    208a:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    208c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    2090:	f8 01       	movw	r30, r16
    2092:	42 81       	ldd	r20, Z+2	; 0x02
    2094:	53 81       	ldd	r21, Z+3	; 0x03
    2096:	ad ef       	ldi	r26, 0xFD	; 253
    2098:	b0 e2       	ldi	r27, 0x20	; 32
    209a:	01 c0       	rjmp	.+2      	; 0x209e <vPortFree+0x26>
    209c:	df 01       	movw	r26, r30
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	11 97       	sbiw	r26, 0x01	; 1
    20a4:	22 81       	ldd	r18, Z+2	; 0x02
    20a6:	33 81       	ldd	r19, Z+3	; 0x03
    20a8:	24 17       	cp	r18, r20
    20aa:	35 07       	cpc	r19, r21
    20ac:	b8 f3       	brcs	.-18     	; 0x209c <vPortFree+0x24>
    20ae:	25 97       	sbiw	r28, 0x05	; 5
    20b0:	e8 83       	st	Y, r30
    20b2:	f9 83       	std	Y+1, r31	; 0x01
    20b4:	0d 93       	st	X+, r16
    20b6:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    20b8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    20bc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    20cc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    20d0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
	}
}
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    20de:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    20e2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    20e6:	08 95       	ret

000020e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    20e8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    20ea:	03 96       	adiw	r24, 0x03	; 3
    20ec:	81 83       	std	Z+1, r24	; 0x01
    20ee:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    20f0:	4f ef       	ldi	r20, 0xFF	; 255
    20f2:	5f ef       	ldi	r21, 0xFF	; 255
    20f4:	ba 01       	movw	r22, r20
    20f6:	43 83       	std	Z+3, r20	; 0x03
    20f8:	54 83       	std	Z+4, r21	; 0x04
    20fa:	65 83       	std	Z+5, r22	; 0x05
    20fc:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    20fe:	87 83       	std	Z+7, r24	; 0x07
    2100:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2102:	81 87       	std	Z+9, r24	; 0x09
    2104:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2106:	10 82       	st	Z, r1
    2108:	08 95       	ret

0000210a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    210a:	fc 01       	movw	r30, r24
    210c:	12 86       	std	Z+10, r1	; 0x0a
    210e:	13 86       	std	Z+11, r1	; 0x0b
    2110:	08 95       	ret

00002112 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	fc 01       	movw	r30, r24
    2118:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    211a:	21 81       	ldd	r18, Z+1	; 0x01
    211c:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    211e:	e9 01       	movw	r28, r18
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	14 96       	adiw	r26, 0x04	; 4
    2126:	8d 93       	st	X+, r24
    2128:	9c 93       	st	X, r25
    212a:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    212c:	81 81       	ldd	r24, Z+1	; 0x01
    212e:	92 81       	ldd	r25, Z+2	; 0x02
    2130:	16 96       	adiw	r26, 0x06	; 6
    2132:	8d 93       	st	X+, r24
    2134:	9c 93       	st	X, r25
    2136:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	ec 01       	movw	r28, r24
    213e:	6e 83       	std	Y+6, r22	; 0x06
    2140:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2142:	e9 01       	movw	r28, r18
    2144:	6c 83       	std	Y+4, r22	; 0x04
    2146:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2148:	61 83       	std	Z+1, r22	; 0x01
    214a:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    214c:	1a 96       	adiw	r26, 0x0a	; 10
    214e:	ed 93       	st	X+, r30
    2150:	fc 93       	st	X, r31
    2152:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2154:	80 81       	ld	r24, Z
    2156:	8f 5f       	subi	r24, 0xFF	; 255
    2158:	80 83       	st	Z, r24
}
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    216a:	08 81       	ld	r16, Y
    216c:	19 81       	ldd	r17, Y+1	; 0x01
    216e:	2a 81       	ldd	r18, Y+2	; 0x02
    2170:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2172:	0f 3f       	cpi	r16, 0xFF	; 255
    2174:	4f ef       	ldi	r20, 0xFF	; 255
    2176:	14 07       	cpc	r17, r20
    2178:	24 07       	cpc	r18, r20
    217a:	34 07       	cpc	r19, r20
    217c:	31 f4       	brne	.+12     	; 0x218a <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    217e:	dc 01       	movw	r26, r24
    2180:	19 96       	adiw	r26, 0x09	; 9
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	1a 97       	sbiw	r26, 0x0a	; 10
    2188:	1f c0       	rjmp	.+62     	; 0x21c8 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    218a:	fc 01       	movw	r30, r24
    218c:	33 96       	adiw	r30, 0x03	; 3
    218e:	dc 01       	movw	r26, r24
    2190:	17 96       	adiw	r26, 0x07	; 7
    2192:	4d 91       	ld	r20, X+
    2194:	5c 91       	ld	r21, X
    2196:	18 97       	sbiw	r26, 0x08	; 8
    2198:	da 01       	movw	r26, r20
    219a:	4d 91       	ld	r20, X+
    219c:	5d 91       	ld	r21, X+
    219e:	6d 91       	ld	r22, X+
    21a0:	7c 91       	ld	r23, X
    21a2:	04 17       	cp	r16, r20
    21a4:	15 07       	cpc	r17, r21
    21a6:	26 07       	cpc	r18, r22
    21a8:	37 07       	cpc	r19, r23
    21aa:	70 f0       	brcs	.+28     	; 0x21c8 <vListInsert+0x68>
    21ac:	04 80       	ldd	r0, Z+4	; 0x04
    21ae:	f5 81       	ldd	r31, Z+5	; 0x05
    21b0:	e0 2d       	mov	r30, r0
    21b2:	a4 81       	ldd	r26, Z+4	; 0x04
    21b4:	b5 81       	ldd	r27, Z+5	; 0x05
    21b6:	4d 91       	ld	r20, X+
    21b8:	5d 91       	ld	r21, X+
    21ba:	6d 91       	ld	r22, X+
    21bc:	7c 91       	ld	r23, X
    21be:	04 17       	cp	r16, r20
    21c0:	15 07       	cpc	r17, r21
    21c2:	26 07       	cpc	r18, r22
    21c4:	37 07       	cpc	r19, r23
    21c6:	90 f7       	brcc	.-28     	; 0x21ac <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    21c8:	a4 81       	ldd	r26, Z+4	; 0x04
    21ca:	b5 81       	ldd	r27, Z+5	; 0x05
    21cc:	ac 83       	std	Y+4, r26	; 0x04
    21ce:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    21d0:	16 96       	adiw	r26, 0x06	; 6
    21d2:	cd 93       	st	X+, r28
    21d4:	dc 93       	st	X, r29
    21d6:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    21d8:	ee 83       	std	Y+6, r30	; 0x06
    21da:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    21dc:	c4 83       	std	Z+4, r28	; 0x04
    21de:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    21e0:	8a 87       	std	Y+10, r24	; 0x0a
    21e2:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 81       	ld	r18, Z
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	20 83       	st	Z, r18
}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    21f6:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    21f8:	a4 81       	ldd	r26, Z+4	; 0x04
    21fa:	b5 81       	ldd	r27, Z+5	; 0x05
    21fc:	86 81       	ldd	r24, Z+6	; 0x06
    21fe:	97 81       	ldd	r25, Z+7	; 0x07
    2200:	16 96       	adiw	r26, 0x06	; 6
    2202:	8d 93       	st	X+, r24
    2204:	9c 93       	st	X, r25
    2206:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2208:	a6 81       	ldd	r26, Z+6	; 0x06
    220a:	b7 81       	ldd	r27, Z+7	; 0x07
    220c:	84 81       	ldd	r24, Z+4	; 0x04
    220e:	95 81       	ldd	r25, Z+5	; 0x05
    2210:	14 96       	adiw	r26, 0x04	; 4
    2212:	8d 93       	st	X+, r24
    2214:	9c 93       	st	X, r25
    2216:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2218:	a2 85       	ldd	r26, Z+10	; 0x0a
    221a:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    221c:	11 96       	adiw	r26, 0x01	; 1
    221e:	8d 91       	ld	r24, X+
    2220:	9c 91       	ld	r25, X
    2222:	12 97       	sbiw	r26, 0x02	; 2
    2224:	e8 17       	cp	r30, r24
    2226:	f9 07       	cpc	r31, r25
    2228:	31 f4       	brne	.+12     	; 0x2236 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    222a:	86 81       	ldd	r24, Z+6	; 0x06
    222c:	97 81       	ldd	r25, Z+7	; 0x07
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	8d 93       	st	X+, r24
    2232:	9c 93       	st	X, r25
    2234:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2236:	12 86       	std	Z+10, r1	; 0x0a
    2238:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    223a:	8c 91       	ld	r24, X
    223c:	81 50       	subi	r24, 0x01	; 1
    223e:	8c 93       	st	X, r24
    2240:	08 95       	ret

00002242 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2242:	80 93 62 31 	sts	0x3162, r24	; 0x803162 <portStackTopForTask>
    2246:	90 93 63 31 	sts	0x3163, r25	; 0x803163 <portStackTopForTask+0x1>
    224a:	31 e1       	ldi	r19, 0x11	; 17
    224c:	fc 01       	movw	r30, r24
    224e:	30 83       	st	Z, r19
    2250:	31 97       	sbiw	r30, 0x01	; 1
    2252:	22 e2       	ldi	r18, 0x22	; 34
    2254:	20 83       	st	Z, r18
    2256:	31 97       	sbiw	r30, 0x01	; 1
    2258:	a3 e3       	ldi	r26, 0x33	; 51
    225a:	a0 83       	st	Z, r26
    225c:	31 97       	sbiw	r30, 0x01	; 1
    225e:	60 83       	st	Z, r22
    2260:	31 97       	sbiw	r30, 0x01	; 1
    2262:	70 83       	st	Z, r23
    2264:	31 97       	sbiw	r30, 0x01	; 1
    2266:	10 82       	st	Z, r1
    2268:	31 97       	sbiw	r30, 0x01	; 1
    226a:	10 82       	st	Z, r1
    226c:	31 97       	sbiw	r30, 0x01	; 1
    226e:	60 e8       	ldi	r22, 0x80	; 128
    2270:	60 83       	st	Z, r22
    2272:	31 97       	sbiw	r30, 0x01	; 1
    2274:	10 82       	st	Z, r1
    2276:	31 97       	sbiw	r30, 0x01	; 1
    2278:	10 82       	st	Z, r1
    227a:	31 97       	sbiw	r30, 0x01	; 1
    227c:	10 82       	st	Z, r1
    227e:	31 97       	sbiw	r30, 0x01	; 1
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	60 83       	st	Z, r22
    2284:	31 97       	sbiw	r30, 0x01	; 1
    2286:	63 e0       	ldi	r22, 0x03	; 3
    2288:	60 83       	st	Z, r22
    228a:	31 97       	sbiw	r30, 0x01	; 1
    228c:	64 e0       	ldi	r22, 0x04	; 4
    228e:	60 83       	st	Z, r22
    2290:	31 97       	sbiw	r30, 0x01	; 1
    2292:	65 e0       	ldi	r22, 0x05	; 5
    2294:	60 83       	st	Z, r22
    2296:	31 97       	sbiw	r30, 0x01	; 1
    2298:	66 e0       	ldi	r22, 0x06	; 6
    229a:	60 83       	st	Z, r22
    229c:	31 97       	sbiw	r30, 0x01	; 1
    229e:	67 e0       	ldi	r22, 0x07	; 7
    22a0:	60 83       	st	Z, r22
    22a2:	31 97       	sbiw	r30, 0x01	; 1
    22a4:	68 e0       	ldi	r22, 0x08	; 8
    22a6:	60 83       	st	Z, r22
    22a8:	31 97       	sbiw	r30, 0x01	; 1
    22aa:	69 e0       	ldi	r22, 0x09	; 9
    22ac:	60 83       	st	Z, r22
    22ae:	31 97       	sbiw	r30, 0x01	; 1
    22b0:	60 e1       	ldi	r22, 0x10	; 16
    22b2:	60 83       	st	Z, r22
    22b4:	31 97       	sbiw	r30, 0x01	; 1
    22b6:	30 83       	st	Z, r19
    22b8:	31 97       	sbiw	r30, 0x01	; 1
    22ba:	32 e1       	ldi	r19, 0x12	; 18
    22bc:	30 83       	st	Z, r19
    22be:	31 97       	sbiw	r30, 0x01	; 1
    22c0:	33 e1       	ldi	r19, 0x13	; 19
    22c2:	30 83       	st	Z, r19
    22c4:	31 97       	sbiw	r30, 0x01	; 1
    22c6:	34 e1       	ldi	r19, 0x14	; 20
    22c8:	30 83       	st	Z, r19
    22ca:	31 97       	sbiw	r30, 0x01	; 1
    22cc:	35 e1       	ldi	r19, 0x15	; 21
    22ce:	30 83       	st	Z, r19
    22d0:	31 97       	sbiw	r30, 0x01	; 1
    22d2:	36 e1       	ldi	r19, 0x16	; 22
    22d4:	30 83       	st	Z, r19
    22d6:	31 97       	sbiw	r30, 0x01	; 1
    22d8:	37 e1       	ldi	r19, 0x17	; 23
    22da:	30 83       	st	Z, r19
    22dc:	31 97       	sbiw	r30, 0x01	; 1
    22de:	38 e1       	ldi	r19, 0x18	; 24
    22e0:	30 83       	st	Z, r19
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	39 e1       	ldi	r19, 0x19	; 25
    22e6:	30 83       	st	Z, r19
    22e8:	31 97       	sbiw	r30, 0x01	; 1
    22ea:	30 e2       	ldi	r19, 0x20	; 32
    22ec:	30 83       	st	Z, r19
    22ee:	31 97       	sbiw	r30, 0x01	; 1
    22f0:	31 e2       	ldi	r19, 0x21	; 33
    22f2:	30 83       	st	Z, r19
    22f4:	31 97       	sbiw	r30, 0x01	; 1
    22f6:	20 83       	st	Z, r18
    22f8:	31 97       	sbiw	r30, 0x01	; 1
    22fa:	23 e2       	ldi	r18, 0x23	; 35
    22fc:	20 83       	st	Z, r18
    22fe:	31 97       	sbiw	r30, 0x01	; 1
    2300:	40 83       	st	Z, r20
    2302:	31 97       	sbiw	r30, 0x01	; 1
    2304:	50 83       	st	Z, r21
    2306:	31 97       	sbiw	r30, 0x01	; 1
    2308:	26 e2       	ldi	r18, 0x26	; 38
    230a:	20 83       	st	Z, r18
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	27 e2       	ldi	r18, 0x27	; 39
    2310:	20 83       	st	Z, r18
    2312:	31 97       	sbiw	r30, 0x01	; 1
    2314:	28 e2       	ldi	r18, 0x28	; 40
    2316:	20 83       	st	Z, r18
    2318:	31 97       	sbiw	r30, 0x01	; 1
    231a:	29 e2       	ldi	r18, 0x29	; 41
    231c:	20 83       	st	Z, r18
    231e:	31 97       	sbiw	r30, 0x01	; 1
    2320:	20 e3       	ldi	r18, 0x30	; 48
    2322:	20 83       	st	Z, r18
    2324:	31 97       	sbiw	r30, 0x01	; 1
    2326:	21 e3       	ldi	r18, 0x31	; 49
    2328:	20 83       	st	Z, r18
    232a:	89 97       	sbiw	r24, 0x29	; 41
    232c:	08 95       	ret

0000232e <xPortStartScheduler>:
    232e:	8c e7       	ldi	r24, 0x7C	; 124
    2330:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2334:	8f ef       	ldi	r24, 0xFF	; 255
    2336:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2340:	91 e1       	ldi	r25, 0x11	; 17
    2342:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2346:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    234a:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    234e:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2352:	cd 91       	ld	r28, X+
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	dd 91       	ld	r29, X+
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	9f 90       	pop	r9
    2388:	8f 90       	pop	r8
    238a:	7f 90       	pop	r7
    238c:	6f 90       	pop	r6
    238e:	5f 90       	pop	r5
    2390:	4f 90       	pop	r4
    2392:	3f 90       	pop	r3
    2394:	2f 90       	pop	r2
    2396:	1f 90       	pop	r1
    2398:	0f 90       	pop	r0
    239a:	0c be       	out	0x3c, r0	; 60
    239c:	0f 90       	pop	r0
    239e:	0b be       	out	0x3b, r0	; 59
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	0f 90       	pop	r0
    23a6:	08 95       	ret
    23a8:	08 95       	ret

000023aa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    23aa:	0f 92       	push	r0
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	0f 92       	push	r0
    23b2:	0b b6       	in	r0, 0x3b	; 59
    23b4:	0f 92       	push	r0
    23b6:	0c b6       	in	r0, 0x3c	; 60
    23b8:	0f 92       	push	r0
    23ba:	1f 92       	push	r1
    23bc:	11 24       	eor	r1, r1
    23be:	2f 92       	push	r2
    23c0:	3f 92       	push	r3
    23c2:	4f 92       	push	r4
    23c4:	5f 92       	push	r5
    23c6:	6f 92       	push	r6
    23c8:	7f 92       	push	r7
    23ca:	8f 92       	push	r8
    23cc:	9f 92       	push	r9
    23ce:	af 92       	push	r10
    23d0:	bf 92       	push	r11
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	2f 93       	push	r18
    23e0:	3f 93       	push	r19
    23e2:	4f 93       	push	r20
    23e4:	5f 93       	push	r21
    23e6:	6f 93       	push	r22
    23e8:	7f 93       	push	r23
    23ea:	8f 93       	push	r24
    23ec:	9f 93       	push	r25
    23ee:	af 93       	push	r26
    23f0:	bf 93       	push	r27
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	ef 93       	push	r30
    23f8:	ff 93       	push	r31
    23fa:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    23fe:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2402:	0d b6       	in	r0, 0x3d	; 61
    2404:	0d 92       	st	X+, r0
    2406:	0e b6       	in	r0, 0x3e	; 62
    2408:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    240a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    240e:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    2412:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2416:	cd 91       	ld	r28, X+
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	dd 91       	ld	r29, X+
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	bf 91       	pop	r27
    2428:	af 91       	pop	r26
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	7f 91       	pop	r23
    2430:	6f 91       	pop	r22
    2432:	5f 91       	pop	r21
    2434:	4f 91       	pop	r20
    2436:	3f 91       	pop	r19
    2438:	2f 91       	pop	r18
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	3f 90       	pop	r3
    2458:	2f 90       	pop	r2
    245a:	1f 90       	pop	r1
    245c:	0f 90       	pop	r0
    245e:	0c be       	out	0x3c, r0	; 60
    2460:	0f 90       	pop	r0
    2462:	0b be       	out	0x3b, r0	; 59
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0

	asm volatile ( "ret" );
    246a:	08 95       	ret

0000246c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    246c:	0f 92       	push	r0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
    2474:	0b b6       	in	r0, 0x3b	; 59
    2476:	0f 92       	push	r0
    2478:	0c b6       	in	r0, 0x3c	; 60
    247a:	0f 92       	push	r0
    247c:	1f 92       	push	r1
    247e:	11 24       	eor	r1, r1
    2480:	2f 92       	push	r2
    2482:	3f 92       	push	r3
    2484:	4f 92       	push	r4
    2486:	5f 92       	push	r5
    2488:	6f 92       	push	r6
    248a:	7f 92       	push	r7
    248c:	8f 92       	push	r8
    248e:	9f 92       	push	r9
    2490:	af 92       	push	r10
    2492:	bf 92       	push	r11
    2494:	cf 92       	push	r12
    2496:	df 92       	push	r13
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	2f 93       	push	r18
    24a2:	3f 93       	push	r19
    24a4:	4f 93       	push	r20
    24a6:	5f 93       	push	r21
    24a8:	6f 93       	push	r22
    24aa:	7f 93       	push	r23
    24ac:	8f 93       	push	r24
    24ae:	9f 93       	push	r25
    24b0:	af 93       	push	r26
    24b2:	bf 93       	push	r27
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
    24bc:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    24c0:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    24c4:	0d b6       	in	r0, 0x3d	; 61
    24c6:	0d 92       	st	X+, r0
    24c8:	0e b6       	in	r0, 0x3e	; 62
    24ca:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    24cc:	0e 94 d7 16 	call	0x2dae	; 0x2dae <vTaskIncrementTick>
	vTaskSwitchContext();
    24d0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24d4:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    24d8:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    24dc:	cd 91       	ld	r28, X+
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	dd 91       	ld	r29, X+
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	ff 91       	pop	r31
    24e6:	ef 91       	pop	r30
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	bf 91       	pop	r27
    24ee:	af 91       	pop	r26
    24f0:	9f 91       	pop	r25
    24f2:	8f 91       	pop	r24
    24f4:	7f 91       	pop	r23
    24f6:	6f 91       	pop	r22
    24f8:	5f 91       	pop	r21
    24fa:	4f 91       	pop	r20
    24fc:	3f 91       	pop	r19
    24fe:	2f 91       	pop	r18
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	9f 90       	pop	r9
    2512:	8f 90       	pop	r8
    2514:	7f 90       	pop	r7
    2516:	6f 90       	pop	r6
    2518:	5f 90       	pop	r5
    251a:	4f 90       	pop	r4
    251c:	3f 90       	pop	r3
    251e:	2f 90       	pop	r2
    2520:	1f 90       	pop	r1
    2522:	0f 90       	pop	r0
    2524:	0c be       	out	0x3c, r0	; 60
    2526:	0f 90       	pop	r0
    2528:	0b be       	out	0x3b, r0	; 59
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2530:	08 95       	ret

00002532 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2532:	0e 94 36 12 	call	0x246c	; 0x246c <vPortYieldFromTick>
		asm volatile ( "reti" );
    2536:	18 95       	reti

00002538 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	ec 01       	movw	r28, r24
    253e:	88 a1       	ldd	r24, Y+32	; 0x20
    2540:	81 11       	cpse	r24, r1
    2542:	0b c0       	rjmp	.+22     	; 0x255a <prvCopyDataToQueue+0x22>
    2544:	88 81       	ld	r24, Y
    2546:	99 81       	ldd	r25, Y+1	; 0x01
    2548:	89 2b       	or	r24, r25
    254a:	e1 f5       	brne	.+120    	; 0x25c4 <prvCopyDataToQueue+0x8c>
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vTaskPriorityDisinherit>
    2554:	1a 82       	std	Y+2, r1	; 0x02
    2556:	1b 82       	std	Y+3, r1	; 0x03
    2558:	35 c0       	rjmp	.+106    	; 0x25c4 <prvCopyDataToQueue+0x8c>
    255a:	41 11       	cpse	r20, r1
    255c:	17 c0       	rjmp	.+46     	; 0x258c <prvCopyDataToQueue+0x54>
    255e:	48 2f       	mov	r20, r24
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>
    256a:	28 a1       	ldd	r18, Y+32	; 0x20
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	82 0f       	add	r24, r18
    2572:	91 1d       	adc	r25, r1
    2574:	8c 83       	std	Y+4, r24	; 0x04
    2576:	9d 83       	std	Y+5, r25	; 0x05
    2578:	2a 81       	ldd	r18, Y+2	; 0x02
    257a:	3b 81       	ldd	r19, Y+3	; 0x03
    257c:	82 17       	cp	r24, r18
    257e:	93 07       	cpc	r25, r19
    2580:	08 f1       	brcs	.+66     	; 0x25c4 <prvCopyDataToQueue+0x8c>
    2582:	88 81       	ld	r24, Y
    2584:	99 81       	ldd	r25, Y+1	; 0x01
    2586:	8c 83       	std	Y+4, r24	; 0x04
    2588:	9d 83       	std	Y+5, r25	; 0x05
    258a:	1c c0       	rjmp	.+56     	; 0x25c4 <prvCopyDataToQueue+0x8c>
    258c:	48 2f       	mov	r20, r24
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	8e 81       	ldd	r24, Y+6	; 0x06
    2592:	9f 81       	ldd	r25, Y+7	; 0x07
    2594:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>
    2598:	88 a1       	ldd	r24, Y+32	; 0x20
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	91 95       	neg	r25
    259e:	81 95       	neg	r24
    25a0:	91 09       	sbc	r25, r1
    25a2:	2e 81       	ldd	r18, Y+6	; 0x06
    25a4:	3f 81       	ldd	r19, Y+7	; 0x07
    25a6:	28 0f       	add	r18, r24
    25a8:	39 1f       	adc	r19, r25
    25aa:	2e 83       	std	Y+6, r18	; 0x06
    25ac:	3f 83       	std	Y+7, r19	; 0x07
    25ae:	48 81       	ld	r20, Y
    25b0:	59 81       	ldd	r21, Y+1	; 0x01
    25b2:	24 17       	cp	r18, r20
    25b4:	35 07       	cpc	r19, r21
    25b6:	30 f4       	brcc	.+12     	; 0x25c4 <prvCopyDataToQueue+0x8c>
    25b8:	2a 81       	ldd	r18, Y+2	; 0x02
    25ba:	3b 81       	ldd	r19, Y+3	; 0x03
    25bc:	82 0f       	add	r24, r18
    25be:	93 1f       	adc	r25, r19
    25c0:	8e 83       	std	Y+6, r24	; 0x06
    25c2:	9f 83       	std	Y+7, r25	; 0x07
    25c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	8e 8f       	std	Y+30, r24	; 0x1e
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <prvCopyDataFromQueue>:
    25d0:	fc 01       	movw	r30, r24
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	a1 f0       	breq	.+40     	; 0x2602 <prvCopyDataFromQueue+0x32>
    25da:	40 a1       	ldd	r20, Z+32	; 0x20
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	26 81       	ldd	r18, Z+6	; 0x06
    25e0:	37 81       	ldd	r19, Z+7	; 0x07
    25e2:	24 0f       	add	r18, r20
    25e4:	35 1f       	adc	r19, r21
    25e6:	26 83       	std	Z+6, r18	; 0x06
    25e8:	37 83       	std	Z+7, r19	; 0x07
    25ea:	a2 81       	ldd	r26, Z+2	; 0x02
    25ec:	b3 81       	ldd	r27, Z+3	; 0x03
    25ee:	2a 17       	cp	r18, r26
    25f0:	3b 07       	cpc	r19, r27
    25f2:	10 f0       	brcs	.+4      	; 0x25f8 <prvCopyDataFromQueue+0x28>
    25f4:	86 83       	std	Z+6, r24	; 0x06
    25f6:	97 83       	std	Z+7, r25	; 0x07
    25f8:	cb 01       	movw	r24, r22
    25fa:	66 81       	ldd	r22, Z+6	; 0x06
    25fc:	77 81       	ldd	r23, Z+7	; 0x07
    25fe:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>
    2602:	08 95       	ret

00002604 <prvUnlockQueue>:
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	ec 01       	movw	r28, r24
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	0f 92       	push	r0
    2614:	8a a1       	ldd	r24, Y+34	; 0x22
    2616:	18 16       	cp	r1, r24
    2618:	b4 f4       	brge	.+44     	; 0x2646 <prvUnlockQueue+0x42>
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	81 11       	cpse	r24, r1
    261e:	05 c0       	rjmp	.+10     	; 0x262a <prvUnlockQueue+0x26>
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <prvUnlockQueue+0x42>
    2622:	8b 89       	ldd	r24, Y+19	; 0x13
    2624:	81 11       	cpse	r24, r1
    2626:	04 c0       	rjmp	.+8      	; 0x2630 <prvUnlockQueue+0x2c>
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <prvUnlockQueue+0x42>
    262a:	8e 01       	movw	r16, r28
    262c:	0d 5e       	subi	r16, 0xED	; 237
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	c8 01       	movw	r24, r16
    2632:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <xTaskRemoveFromEventList>
    2636:	81 11       	cpse	r24, r1
    2638:	0e 94 39 1a 	call	0x3472	; 0x3472 <vTaskMissedYield>
    263c:	8a a1       	ldd	r24, Y+34	; 0x22
    263e:	81 50       	subi	r24, 0x01	; 1
    2640:	8a a3       	std	Y+34, r24	; 0x22
    2642:	18 16       	cp	r1, r24
    2644:	74 f3       	brlt	.-36     	; 0x2622 <prvUnlockQueue+0x1e>
    2646:	8f ef       	ldi	r24, 0xFF	; 255
    2648:	8a a3       	std	Y+34, r24	; 0x22
    264a:	0f 90       	pop	r0
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	0f 92       	push	r0
    2654:	89 a1       	ldd	r24, Y+33	; 0x21
    2656:	18 16       	cp	r1, r24
    2658:	b4 f4       	brge	.+44     	; 0x2686 <prvUnlockQueue+0x82>
    265a:	88 85       	ldd	r24, Y+8	; 0x08
    265c:	81 11       	cpse	r24, r1
    265e:	05 c0       	rjmp	.+10     	; 0x266a <prvUnlockQueue+0x66>
    2660:	12 c0       	rjmp	.+36     	; 0x2686 <prvUnlockQueue+0x82>
    2662:	88 85       	ldd	r24, Y+8	; 0x08
    2664:	81 11       	cpse	r24, r1
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <prvUnlockQueue+0x6c>
    2668:	0e c0       	rjmp	.+28     	; 0x2686 <prvUnlockQueue+0x82>
    266a:	8e 01       	movw	r16, r28
    266c:	08 5f       	subi	r16, 0xF8	; 248
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
    2670:	c8 01       	movw	r24, r16
    2672:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <xTaskRemoveFromEventList>
    2676:	81 11       	cpse	r24, r1
    2678:	0e 94 39 1a 	call	0x3472	; 0x3472 <vTaskMissedYield>
    267c:	89 a1       	ldd	r24, Y+33	; 0x21
    267e:	81 50       	subi	r24, 0x01	; 1
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	18 16       	cp	r1, r24
    2684:	74 f3       	brlt	.-36     	; 0x2662 <prvUnlockQueue+0x5e>
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	08 95       	ret

00002698 <xQueueGenericReset>:
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	61 30       	cpi	r22, 0x01	; 1
    26a0:	59 f0       	breq	.+22     	; 0x26b8 <xQueueGenericReset+0x20>
    26a2:	fc 01       	movw	r30, r24
    26a4:	23 89       	ldd	r18, Z+19	; 0x13
    26a6:	30 85       	ldd	r19, Z+8	; 0x08
    26a8:	31 11       	cpse	r19, r1
    26aa:	2c c0       	rjmp	.+88     	; 0x2704 <xQueueGenericReset+0x6c>
    26ac:	11 e0       	ldi	r17, 0x01	; 1
    26ae:	21 11       	cpse	r18, r1
    26b0:	10 e0       	ldi	r17, 0x00	; 0
    26b2:	21 11       	cpse	r18, r1
    26b4:	28 c0       	rjmp	.+80     	; 0x2706 <xQueueGenericReset+0x6e>
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <xQueueGenericReset+0x22>
    26b8:	11 e0       	ldi	r17, 0x01	; 1
    26ba:	ec 01       	movw	r28, r24
    26bc:	48 81       	ld	r20, Y
    26be:	59 81       	ldd	r21, Y+1	; 0x01
    26c0:	28 a1       	ldd	r18, Y+32	; 0x20
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26c6:	62 9f       	mul	r22, r18
    26c8:	c0 01       	movw	r24, r0
    26ca:	63 9f       	mul	r22, r19
    26cc:	90 0d       	add	r25, r0
    26ce:	11 24       	eor	r1, r1
    26d0:	ba 01       	movw	r22, r20
    26d2:	68 0f       	add	r22, r24
    26d4:	79 1f       	adc	r23, r25
    26d6:	6a 83       	std	Y+2, r22	; 0x02
    26d8:	7b 83       	std	Y+3, r23	; 0x03
    26da:	1e 8e       	std	Y+30, r1	; 0x1e
    26dc:	4c 83       	std	Y+4, r20	; 0x04
    26de:	5d 83       	std	Y+5, r21	; 0x05
    26e0:	82 1b       	sub	r24, r18
    26e2:	93 0b       	sbc	r25, r19
    26e4:	84 0f       	add	r24, r20
    26e6:	95 1f       	adc	r25, r21
    26e8:	8e 83       	std	Y+6, r24	; 0x06
    26ea:	9f 83       	std	Y+7, r25	; 0x07
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	89 a3       	std	Y+33, r24	; 0x21
    26f0:	8a a3       	std	Y+34, r24	; 0x22
    26f2:	ce 01       	movw	r24, r28
    26f4:	08 96       	adiw	r24, 0x08	; 8
    26f6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    26fa:	ce 01       	movw	r24, r28
    26fc:	43 96       	adiw	r24, 0x13	; 19
    26fe:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <xQueueGenericReset+0x6e>
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	81 2f       	mov	r24, r17
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	08 95       	ret

00002710 <xQueueGenericCreate>:
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	88 23       	and	r24, r24
    271a:	01 f1       	breq	.+64     	; 0x275c <xQueueGenericCreate+0x4c>
    271c:	06 2f       	mov	r16, r22
    271e:	18 2f       	mov	r17, r24
    2720:	83 e2       	ldi	r24, 0x23	; 35
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    2728:	ec 01       	movw	r28, r24
    272a:	89 2b       	or	r24, r25
    272c:	c9 f0       	breq	.+50     	; 0x2760 <xQueueGenericCreate+0x50>
    272e:	10 9f       	mul	r17, r16
    2730:	c0 01       	movw	r24, r0
    2732:	11 24       	eor	r1, r1
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    273a:	88 83       	st	Y, r24
    273c:	99 83       	std	Y+1, r25	; 0x01
    273e:	89 2b       	or	r24, r25
    2740:	39 f0       	breq	.+14     	; 0x2750 <xQueueGenericCreate+0x40>
    2742:	1f 8f       	std	Y+31, r17	; 0x1f
    2744:	08 a3       	std	Y+32, r16	; 0x20
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	ce 01       	movw	r24, r28
    274a:	0e 94 4c 13 	call	0x2698	; 0x2698 <xQueueGenericReset>
    274e:	08 c0       	rjmp	.+16     	; 0x2760 <xQueueGenericCreate+0x50>
    2750:	ce 01       	movw	r24, r28
    2752:	0e 94 3c 10 	call	0x2078	; 0x2078 <vPortFree>
    2756:	c0 e0       	ldi	r28, 0x00	; 0
    2758:	d0 e0       	ldi	r29, 0x00	; 0
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <xQueueGenericCreate+0x50>
    275c:	c0 e0       	ldi	r28, 0x00	; 0
    275e:	d0 e0       	ldi	r29, 0x00	; 0
    2760:	ce 01       	movw	r24, r28
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	08 95       	ret

0000276c <xQueueGenericSend>:
    276c:	af 92       	push	r10
    276e:	bf 92       	push	r11
    2770:	cf 92       	push	r12
    2772:	df 92       	push	r13
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	29 97       	sbiw	r28, 0x09	; 9
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	7c 01       	movw	r14, r24
    278c:	5b 01       	movw	r10, r22
    278e:	2e 83       	std	Y+6, r18	; 0x06
    2790:	3f 83       	std	Y+7, r19	; 0x07
    2792:	48 87       	std	Y+8, r20	; 0x08
    2794:	59 87       	std	Y+9, r21	; 0x09
    2796:	10 e0       	ldi	r17, 0x00	; 0
    2798:	6c 01       	movw	r12, r24
    279a:	88 e0       	ldi	r24, 0x08	; 8
    279c:	c8 0e       	add	r12, r24
    279e:	d1 1c       	adc	r13, r1
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	0f 92       	push	r0
    27a6:	f7 01       	movw	r30, r14
    27a8:	96 8d       	ldd	r25, Z+30	; 0x1e
    27aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    27ac:	98 17       	cp	r25, r24
    27ae:	a8 f4       	brcc	.+42     	; 0x27da <xQueueGenericSend+0x6e>
    27b0:	40 2f       	mov	r20, r16
    27b2:	b5 01       	movw	r22, r10
    27b4:	c7 01       	movw	r24, r14
    27b6:	0e 94 9c 12 	call	0x2538	; 0x2538 <prvCopyDataToQueue>
    27ba:	f7 01       	movw	r30, r14
    27bc:	83 89       	ldd	r24, Z+19	; 0x13
    27be:	88 23       	and	r24, r24
    27c0:	41 f0       	breq	.+16     	; 0x27d2 <xQueueGenericSend+0x66>
    27c2:	c7 01       	movw	r24, r14
    27c4:	43 96       	adiw	r24, 0x13	; 19
    27c6:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <xTaskRemoveFromEventList>
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <xQueueGenericSend+0x66>
    27ce:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	56 c0       	rjmp	.+172    	; 0x2886 <xQueueGenericSend+0x11a>
    27da:	8e 81       	ldd	r24, Y+6	; 0x06
    27dc:	9f 81       	ldd	r25, Y+7	; 0x07
    27de:	a8 85       	ldd	r26, Y+8	; 0x08
    27e0:	b9 85       	ldd	r27, Y+9	; 0x09
    27e2:	89 2b       	or	r24, r25
    27e4:	8a 2b       	or	r24, r26
    27e6:	8b 2b       	or	r24, r27
    27e8:	21 f4       	brne	.+8      	; 0x27f2 <xQueueGenericSend+0x86>
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	4a c0       	rjmp	.+148    	; 0x2886 <xQueueGenericSend+0x11a>
    27f2:	11 11       	cpse	r17, r1
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <xQueueGenericSend+0x94>
    27f6:	ce 01       	movw	r24, r28
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	0e 94 bb 19 	call	0x3376	; 0x3376 <vTaskSetTimeOutState>
    27fe:	11 e0       	ldi	r17, 0x01	; 1
    2800:	0f 90       	pop	r0
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	0f 92       	push	r0
    280e:	f7 01       	movw	r30, r14
    2810:	81 a1       	ldd	r24, Z+33	; 0x21
    2812:	8f 3f       	cpi	r24, 0xFF	; 255
    2814:	09 f4       	brne	.+2      	; 0x2818 <xQueueGenericSend+0xac>
    2816:	11 a2       	std	Z+33, r1	; 0x21
    2818:	f7 01       	movw	r30, r14
    281a:	82 a1       	ldd	r24, Z+34	; 0x22
    281c:	8f 3f       	cpi	r24, 0xFF	; 255
    281e:	09 f4       	brne	.+2      	; 0x2822 <xQueueGenericSend+0xb6>
    2820:	12 a2       	std	Z+34, r1	; 0x22
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	be 01       	movw	r22, r28
    2828:	6a 5f       	subi	r22, 0xFA	; 250
    282a:	7f 4f       	sbci	r23, 0xFF	; 255
    282c:	ce 01       	movw	r24, r28
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	0e 94 cc 19 	call	0x3398	; 0x3398 <xTaskCheckForTimeOut>
    2834:	81 11       	cpse	r24, r1
    2836:	21 c0       	rjmp	.+66     	; 0x287a <xQueueGenericSend+0x10e>
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	0f 92       	push	r0
    283e:	f7 01       	movw	r30, r14
    2840:	96 8d       	ldd	r25, Z+30	; 0x1e
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	87 8d       	ldd	r24, Z+31	; 0x1f
    2848:	98 13       	cpse	r25, r24
    284a:	11 c0       	rjmp	.+34     	; 0x286e <xQueueGenericSend+0x102>
    284c:	4e 81       	ldd	r20, Y+6	; 0x06
    284e:	5f 81       	ldd	r21, Y+7	; 0x07
    2850:	68 85       	ldd	r22, Y+8	; 0x08
    2852:	79 85       	ldd	r23, Y+9	; 0x09
    2854:	c6 01       	movw	r24, r12
    2856:	0e 94 52 19 	call	0x32a4	; 0x32a4 <vTaskPlaceOnEventList>
    285a:	c7 01       	movw	r24, r14
    285c:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    2860:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    2864:	81 11       	cpse	r24, r1
    2866:	9c cf       	rjmp	.-200    	; 0x27a0 <xQueueGenericSend+0x34>
    2868:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    286c:	99 cf       	rjmp	.-206    	; 0x27a0 <xQueueGenericSend+0x34>
    286e:	c7 01       	movw	r24, r14
    2870:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    2874:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    2878:	93 cf       	rjmp	.-218    	; 0x27a0 <xQueueGenericSend+0x34>
    287a:	c7 01       	movw	r24, r14
    287c:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    2880:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	29 96       	adiw	r28, 0x09	; 9
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	bf 90       	pop	r11
    289e:	af 90       	pop	r10
    28a0:	08 95       	ret

000028a2 <xQueueGenericReceive>:
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	29 97       	sbiw	r28, 0x09	; 9
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	7c 01       	movw	r14, r24
    28c2:	5b 01       	movw	r10, r22
    28c4:	2e 83       	std	Y+6, r18	; 0x06
    28c6:	3f 83       	std	Y+7, r19	; 0x07
    28c8:	48 87       	std	Y+8, r20	; 0x08
    28ca:	59 87       	std	Y+9, r21	; 0x09
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	6c 01       	movw	r12, r24
    28d0:	83 e1       	ldi	r24, 0x13	; 19
    28d2:	c8 0e       	add	r12, r24
    28d4:	d1 1c       	adc	r13, r1
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	0f 92       	push	r0
    28dc:	f7 01       	movw	r30, r14
    28de:	86 8d       	ldd	r24, Z+30	; 0x1e
    28e0:	88 23       	and	r24, r24
    28e2:	99 f1       	breq	.+102    	; 0x294a <xQueueGenericReceive+0xa8>
    28e4:	c6 80       	ldd	r12, Z+6	; 0x06
    28e6:	d7 80       	ldd	r13, Z+7	; 0x07
    28e8:	b5 01       	movw	r22, r10
    28ea:	c7 01       	movw	r24, r14
    28ec:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <prvCopyDataFromQueue>
    28f0:	01 11       	cpse	r16, r1
    28f2:	1a c0       	rjmp	.+52     	; 0x2928 <xQueueGenericReceive+0x86>
    28f4:	f7 01       	movw	r30, r14
    28f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    28f8:	81 50       	subi	r24, 0x01	; 1
    28fa:	86 8f       	std	Z+30, r24	; 0x1e
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	89 2b       	or	r24, r25
    2902:	29 f4       	brne	.+10     	; 0x290e <xQueueGenericReceive+0x6c>
    2904:	0e 94 56 1a 	call	0x34ac	; 0x34ac <xTaskGetCurrentTaskHandle>
    2908:	f7 01       	movw	r30, r14
    290a:	82 83       	std	Z+2, r24	; 0x02
    290c:	93 83       	std	Z+3, r25	; 0x03
    290e:	f7 01       	movw	r30, r14
    2910:	80 85       	ldd	r24, Z+8	; 0x08
    2912:	88 23       	and	r24, r24
    2914:	b1 f0       	breq	.+44     	; 0x2942 <xQueueGenericReceive+0xa0>
    2916:	c7 01       	movw	r24, r14
    2918:	08 96       	adiw	r24, 0x08	; 8
    291a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <xTaskRemoveFromEventList>
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	81 f4       	brne	.+32     	; 0x2942 <xQueueGenericReceive+0xa0>
    2922:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    2926:	0d c0       	rjmp	.+26     	; 0x2942 <xQueueGenericReceive+0xa0>
    2928:	f7 01       	movw	r30, r14
    292a:	c6 82       	std	Z+6, r12	; 0x06
    292c:	d7 82       	std	Z+7, r13	; 0x07
    292e:	83 89       	ldd	r24, Z+19	; 0x13
    2930:	88 23       	and	r24, r24
    2932:	39 f0       	breq	.+14     	; 0x2942 <xQueueGenericReceive+0xa0>
    2934:	c7 01       	movw	r24, r14
    2936:	43 96       	adiw	r24, 0x13	; 19
    2938:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <xTaskRemoveFromEventList>
    293c:	81 11       	cpse	r24, r1
    293e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    2942:	0f 90       	pop	r0
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	62 c0       	rjmp	.+196    	; 0x2a0e <xQueueGenericReceive+0x16c>
    294a:	8e 81       	ldd	r24, Y+6	; 0x06
    294c:	9f 81       	ldd	r25, Y+7	; 0x07
    294e:	a8 85       	ldd	r26, Y+8	; 0x08
    2950:	b9 85       	ldd	r27, Y+9	; 0x09
    2952:	89 2b       	or	r24, r25
    2954:	8a 2b       	or	r24, r26
    2956:	8b 2b       	or	r24, r27
    2958:	21 f4       	brne	.+8      	; 0x2962 <xQueueGenericReceive+0xc0>
    295a:	0f 90       	pop	r0
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	56 c0       	rjmp	.+172    	; 0x2a0e <xQueueGenericReceive+0x16c>
    2962:	11 11       	cpse	r17, r1
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <xQueueGenericReceive+0xce>
    2966:	ce 01       	movw	r24, r28
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	0e 94 bb 19 	call	0x3376	; 0x3376 <vTaskSetTimeOutState>
    296e:	11 e0       	ldi	r17, 0x01	; 1
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	0f 92       	push	r0
    297e:	f7 01       	movw	r30, r14
    2980:	81 a1       	ldd	r24, Z+33	; 0x21
    2982:	8f 3f       	cpi	r24, 0xFF	; 255
    2984:	09 f4       	brne	.+2      	; 0x2988 <xQueueGenericReceive+0xe6>
    2986:	11 a2       	std	Z+33, r1	; 0x21
    2988:	f7 01       	movw	r30, r14
    298a:	82 a1       	ldd	r24, Z+34	; 0x22
    298c:	8f 3f       	cpi	r24, 0xFF	; 255
    298e:	09 f4       	brne	.+2      	; 0x2992 <xQueueGenericReceive+0xf0>
    2990:	12 a2       	std	Z+34, r1	; 0x22
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	be 01       	movw	r22, r28
    2998:	6a 5f       	subi	r22, 0xFA	; 250
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	ce 01       	movw	r24, r28
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	0e 94 cc 19 	call	0x3398	; 0x3398 <xTaskCheckForTimeOut>
    29a4:	81 11       	cpse	r24, r1
    29a6:	2d c0       	rjmp	.+90     	; 0x2a02 <xQueueGenericReceive+0x160>
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	0f 92       	push	r0
    29ae:	f7 01       	movw	r30, r14
    29b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	81 11       	cpse	r24, r1
    29b8:	1e c0       	rjmp	.+60     	; 0x29f6 <xQueueGenericReceive+0x154>
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	89 2b       	or	r24, r25
    29c0:	49 f4       	brne	.+18     	; 0x29d4 <xQueueGenericReceive+0x132>
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	0f 92       	push	r0
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <vTaskPriorityInherit>
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	4e 81       	ldd	r20, Y+6	; 0x06
    29d6:	5f 81       	ldd	r21, Y+7	; 0x07
    29d8:	68 85       	ldd	r22, Y+8	; 0x08
    29da:	79 85       	ldd	r23, Y+9	; 0x09
    29dc:	c6 01       	movw	r24, r12
    29de:	0e 94 52 19 	call	0x32a4	; 0x32a4 <vTaskPlaceOnEventList>
    29e2:	c7 01       	movw	r24, r14
    29e4:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    29e8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    29ec:	81 11       	cpse	r24, r1
    29ee:	73 cf       	rjmp	.-282    	; 0x28d6 <xQueueGenericReceive+0x34>
    29f0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    29f4:	70 cf       	rjmp	.-288    	; 0x28d6 <xQueueGenericReceive+0x34>
    29f6:	c7 01       	movw	r24, r14
    29f8:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    29fc:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    2a00:	6a cf       	rjmp	.-300    	; 0x28d6 <xQueueGenericReceive+0x34>
    2a02:	c7 01       	movw	r24, r14
    2a04:	0e 94 02 13 	call	0x2604	; 0x2604 <prvUnlockQueue>
    2a08:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	29 96       	adiw	r28, 0x09	; 9
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	08 95       	ret

00002a2a <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2a30:	fc 01       	movw	r30, r24
    2a32:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2a38:	08 95       	ret

00002a3a <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2a3a:	c4 e3       	ldi	r28, 0x34	; 52
    2a3c:	d1 e3       	ldi	r29, 0x31	; 49
    2a3e:	88 81       	ld	r24, Y
    2a40:	82 30       	cpi	r24, 0x02	; 2
    2a42:	e8 f3       	brcs	.-6      	; 0x2a3e <prvIdleTask+0x4>
    2a44:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    2a48:	fa cf       	rjmp	.-12     	; 0x2a3e <prvIdleTask+0x4>

00002a4a <prvAddCurrentTaskToDelayedList>:
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	6b 01       	movw	r12, r22
    2a54:	7c 01       	movw	r14, r24
    2a56:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    2a5a:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2a5e:	62 83       	std	Z+2, r22	; 0x02
    2a60:	73 83       	std	Z+3, r23	; 0x03
    2a62:	84 83       	std	Z+4, r24	; 0x04
    2a64:	95 83       	std	Z+5, r25	; 0x05
    2a66:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    2a6a:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    2a6e:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    2a72:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    2a76:	c8 16       	cp	r12, r24
    2a78:	d9 06       	cpc	r13, r25
    2a7a:	ea 06       	cpc	r14, r26
    2a7c:	fb 06       	cpc	r15, r27
    2a7e:	68 f4       	brcc	.+26     	; 0x2a9a <prvAddCurrentTaskToDelayedList+0x50>
    2a80:	60 91 60 31 	lds	r22, 0x3160	; 0x803160 <pxCurrentTCB>
    2a84:	70 91 61 31 	lds	r23, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2a88:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <pxOverflowDelayedTaskList>
    2a8c:	90 91 1b 31 	lds	r25, 0x311B	; 0x80311b <pxOverflowDelayedTaskList+0x1>
    2a90:	6e 5f       	subi	r22, 0xFE	; 254
    2a92:	7f 4f       	sbci	r23, 0xFF	; 255
    2a94:	0e 94 b0 10 	call	0x2160	; 0x2160 <vListInsert>
    2a98:	21 c0       	rjmp	.+66     	; 0x2adc <prvAddCurrentTaskToDelayedList+0x92>
    2a9a:	60 91 60 31 	lds	r22, 0x3160	; 0x803160 <pxCurrentTCB>
    2a9e:	70 91 61 31 	lds	r23, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2aa2:	80 91 1c 31 	lds	r24, 0x311C	; 0x80311c <pxDelayedTaskList>
    2aa6:	90 91 1d 31 	lds	r25, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2aaa:	6e 5f       	subi	r22, 0xFE	; 254
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	0e 94 b0 10 	call	0x2160	; 0x2160 <vListInsert>
    2ab2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2ab6:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2aba:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2abe:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2ac2:	c8 16       	cp	r12, r24
    2ac4:	d9 06       	cpc	r13, r25
    2ac6:	ea 06       	cpc	r14, r26
    2ac8:	fb 06       	cpc	r15, r27
    2aca:	40 f4       	brcc	.+16     	; 0x2adc <prvAddCurrentTaskToDelayedList+0x92>
    2acc:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2ad0:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2ad4:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2ad8:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2adc:	ff 90       	pop	r15
    2ade:	ef 90       	pop	r14
    2ae0:	df 90       	pop	r13
    2ae2:	cf 90       	pop	r12
    2ae4:	08 95       	ret

00002ae6 <xTaskGenericCreate>:
    2ae6:	4f 92       	push	r4
    2ae8:	5f 92       	push	r5
    2aea:	6f 92       	push	r6
    2aec:	7f 92       	push	r7
    2aee:	8f 92       	push	r8
    2af0:	9f 92       	push	r9
    2af2:	af 92       	push	r10
    2af4:	bf 92       	push	r11
    2af6:	cf 92       	push	r12
    2af8:	df 92       	push	r13
    2afa:	ef 92       	push	r14
    2afc:	ff 92       	push	r15
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	5c 01       	movw	r10, r24
    2b08:	4b 01       	movw	r8, r22
    2b0a:	3a 01       	movw	r6, r20
    2b0c:	29 01       	movw	r4, r18
    2b0e:	88 e2       	ldi	r24, 0x28	; 40
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    2b16:	ec 01       	movw	r28, r24
    2b18:	89 2b       	or	r24, r25
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <xTaskGenericCreate+0x38>
    2b1c:	d4 c0       	rjmp	.+424    	; 0x2cc6 <xTaskGenericCreate+0x1e0>
    2b1e:	c1 14       	cp	r12, r1
    2b20:	d1 04       	cpc	r13, r1
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <xTaskGenericCreate+0x40>
    2b24:	cc c0       	rjmp	.+408    	; 0x2cbe <xTaskGenericCreate+0x1d8>
    2b26:	c3 01       	movw	r24, r6
    2b28:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <pvPortMalloc>
    2b2c:	8b 8f       	std	Y+27, r24	; 0x1b
    2b2e:	9c 8f       	std	Y+28, r25	; 0x1c
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	21 f4       	brne	.+8      	; 0x2b3c <xTaskGenericCreate+0x56>
    2b34:	ce 01       	movw	r24, r28
    2b36:	0e 94 3c 10 	call	0x2078	; 0x2078 <vPortFree>
    2b3a:	c5 c0       	rjmp	.+394    	; 0x2cc6 <xTaskGenericCreate+0x1e0>
    2b3c:	a3 01       	movw	r20, r6
    2b3e:	61 e1       	ldi	r22, 0x11	; 17
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	0e 94 2e 1b 	call	0x365c	; 0x365c <memset>
    2b46:	93 01       	movw	r18, r6
    2b48:	21 50       	subi	r18, 0x01	; 1
    2b4a:	31 09       	sbc	r19, r1
    2b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b50:	3c 01       	movw	r6, r24
    2b52:	62 0e       	add	r6, r18
    2b54:	73 1e       	adc	r7, r19
    2b56:	4a e0       	ldi	r20, 0x0A	; 10
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	b4 01       	movw	r22, r8
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	4d 96       	adiw	r24, 0x1d	; 29
    2b60:	0e 94 35 1b 	call	0x366a	; 0x366a <strncpy>
    2b64:	1e a2       	std	Y+38, r1	; 0x26
    2b66:	10 2f       	mov	r17, r16
    2b68:	04 30       	cpi	r16, 0x04	; 4
    2b6a:	08 f0       	brcs	.+2      	; 0x2b6e <xTaskGenericCreate+0x88>
    2b6c:	13 e0       	ldi	r17, 0x03	; 3
    2b6e:	1a 8f       	std	Y+26, r17	; 0x1a
    2b70:	1f a3       	std	Y+39, r17	; 0x27
    2b72:	6e 01       	movw	r12, r28
    2b74:	22 e0       	ldi	r18, 0x02	; 2
    2b76:	c2 0e       	add	r12, r18
    2b78:	d1 1c       	adc	r13, r1
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	0e 94 85 10 	call	0x210a	; 0x210a <vListInitialiseItem>
    2b80:	ce 01       	movw	r24, r28
    2b82:	0e 96       	adiw	r24, 0x0e	; 14
    2b84:	0e 94 85 10 	call	0x210a	; 0x210a <vListInitialiseItem>
    2b88:	ca 87       	std	Y+10, r28	; 0x0a
    2b8a:	db 87       	std	Y+11, r29	; 0x0b
    2b8c:	84 e0       	ldi	r24, 0x04	; 4
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	81 1b       	sub	r24, r17
    2b96:	91 09       	sbc	r25, r1
    2b98:	a1 09       	sbc	r26, r1
    2b9a:	b1 09       	sbc	r27, r1
    2b9c:	8e 87       	std	Y+14, r24	; 0x0e
    2b9e:	9f 87       	std	Y+15, r25	; 0x0f
    2ba0:	a8 8b       	std	Y+16, r26	; 0x10
    2ba2:	b9 8b       	std	Y+17, r27	; 0x11
    2ba4:	ce 8b       	std	Y+22, r28	; 0x16
    2ba6:	df 8b       	std	Y+23, r29	; 0x17
    2ba8:	a2 01       	movw	r20, r4
    2baa:	b5 01       	movw	r22, r10
    2bac:	c3 01       	movw	r24, r6
    2bae:	0e 94 21 11 	call	0x2242	; 0x2242 <pxPortInitialiseStack>
    2bb2:	88 83       	st	Y, r24
    2bb4:	99 83       	std	Y+1, r25	; 0x01
    2bb6:	e1 14       	cp	r14, r1
    2bb8:	f1 04       	cpc	r15, r1
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <xTaskGenericCreate+0xdc>
    2bbc:	f7 01       	movw	r30, r14
    2bbe:	c0 83       	st	Z, r28
    2bc0:	d1 83       	std	Z+1, r29	; 0x01
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	0f 92       	push	r0
    2bc8:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <uxCurrentNumberOfTasks>
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	80 93 0c 31 	sts	0x310C, r24	; 0x80310c <uxCurrentNumberOfTasks>
    2bd2:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    2bd6:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2bda:	89 2b       	or	r24, r25
    2bdc:	89 f5       	brne	.+98     	; 0x2c40 <xTaskGenericCreate+0x15a>
    2bde:	c0 93 60 31 	sts	0x3160, r28	; 0x803160 <pxCurrentTCB>
    2be2:	d0 93 61 31 	sts	0x3161, r29	; 0x803161 <pxCurrentTCB+0x1>
    2be6:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <uxCurrentNumberOfTasks>
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	c1 f5       	brne	.+112    	; 0x2c5e <xTaskGenericCreate+0x178>
    2bee:	84 e3       	ldi	r24, 0x34	; 52
    2bf0:	91 e3       	ldi	r25, 0x31	; 49
    2bf2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2bf6:	8f e3       	ldi	r24, 0x3F	; 63
    2bf8:	91 e3       	ldi	r25, 0x31	; 49
    2bfa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2bfe:	8a e4       	ldi	r24, 0x4A	; 74
    2c00:	91 e3       	ldi	r25, 0x31	; 49
    2c02:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2c06:	85 e5       	ldi	r24, 0x55	; 85
    2c08:	91 e3       	ldi	r25, 0x31	; 49
    2c0a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2c0e:	89 e2       	ldi	r24, 0x29	; 41
    2c10:	91 e3       	ldi	r25, 0x31	; 49
    2c12:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2c16:	8e e1       	ldi	r24, 0x1E	; 30
    2c18:	91 e3       	ldi	r25, 0x31	; 49
    2c1a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2c1e:	8f e0       	ldi	r24, 0x0F	; 15
    2c20:	91 e3       	ldi	r25, 0x31	; 49
    2c22:	0e 94 74 10 	call	0x20e8	; 0x20e8 <vListInitialise>
    2c26:	89 e2       	ldi	r24, 0x29	; 41
    2c28:	91 e3       	ldi	r25, 0x31	; 49
    2c2a:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <pxDelayedTaskList>
    2c2e:	90 93 1d 31 	sts	0x311D, r25	; 0x80311d <pxDelayedTaskList+0x1>
    2c32:	8e e1       	ldi	r24, 0x1E	; 30
    2c34:	91 e3       	ldi	r25, 0x31	; 49
    2c36:	80 93 1a 31 	sts	0x311A, r24	; 0x80311a <pxOverflowDelayedTaskList>
    2c3a:	90 93 1b 31 	sts	0x311B, r25	; 0x80311b <pxOverflowDelayedTaskList+0x1>
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <xTaskGenericCreate+0x178>
    2c40:	80 91 05 31 	lds	r24, 0x3105	; 0x803105 <xSchedulerRunning>
    2c44:	81 11       	cpse	r24, r1
    2c46:	0b c0       	rjmp	.+22     	; 0x2c5e <xTaskGenericCreate+0x178>
    2c48:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    2c4c:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c52:	08 17       	cp	r16, r24
    2c54:	20 f0       	brcs	.+8      	; 0x2c5e <xTaskGenericCreate+0x178>
    2c56:	c0 93 60 31 	sts	0x3160, r28	; 0x803160 <pxCurrentTCB>
    2c5a:	d0 93 61 31 	sts	0x3161, r29	; 0x803161 <pxCurrentTCB+0x1>
    2c5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c60:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <uxTopUsedPriority>
    2c64:	98 17       	cp	r25, r24
    2c66:	10 f4       	brcc	.+4      	; 0x2c6c <xTaskGenericCreate+0x186>
    2c68:	80 93 07 31 	sts	0x3107, r24	; 0x803107 <uxTopUsedPriority>
    2c6c:	90 91 00 31 	lds	r25, 0x3100	; 0x803100 <uxTaskNumber>
    2c70:	9f 5f       	subi	r25, 0xFF	; 255
    2c72:	90 93 00 31 	sts	0x3100, r25	; 0x803100 <uxTaskNumber>
    2c76:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    2c7a:	98 17       	cp	r25, r24
    2c7c:	10 f4       	brcc	.+4      	; 0x2c82 <xTaskGenericCreate+0x19c>
    2c7e:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    2c82:	fb e0       	ldi	r31, 0x0B	; 11
    2c84:	8f 9f       	mul	r24, r31
    2c86:	c0 01       	movw	r24, r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	b6 01       	movw	r22, r12
    2c8c:	8c 5c       	subi	r24, 0xCC	; 204
    2c8e:	9e 4c       	sbci	r25, 0xCE	; 206
    2c90:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	80 91 05 31 	lds	r24, 0x3105	; 0x803105 <xSchedulerRunning>
    2c9c:	88 23       	and	r24, r24
    2c9e:	59 f0       	breq	.+22     	; 0x2cb6 <xTaskGenericCreate+0x1d0>
    2ca0:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    2ca4:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2ca8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2caa:	80 17       	cp	r24, r16
    2cac:	30 f4       	brcc	.+12     	; 0x2cba <xTaskGenericCreate+0x1d4>
    2cae:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <xTaskGenericCreate+0x1e2>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	07 c0       	rjmp	.+14     	; 0x2cc8 <xTaskGenericCreate+0x1e2>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <xTaskGenericCreate+0x1e2>
    2cbe:	cb 8e       	std	Y+27, r12	; 0x1b
    2cc0:	dc 8e       	std	Y+28, r13	; 0x1c
    2cc2:	c6 01       	movw	r24, r12
    2cc4:	3b cf       	rjmp	.-394    	; 0x2b3c <xTaskGenericCreate+0x56>
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	bf 90       	pop	r11
    2cda:	af 90       	pop	r10
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	7f 90       	pop	r7
    2ce2:	6f 90       	pop	r6
    2ce4:	5f 90       	pop	r5
    2ce6:	4f 90       	pop	r4
    2ce8:	08 95       	ret

00002cea <uxTaskPriorityGet>:
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	0f 92       	push	r0
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	21 f4       	brne	.+8      	; 0x2cfc <uxTaskPriorityGet+0x12>
    2cf4:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    2cf8:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	fc 01       	movw	r30, r24
    2d02:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d04:	08 95       	ret

00002d06 <vTaskStartScheduler>:
    2d06:	af 92       	push	r10
    2d08:	bf 92       	push	r11
    2d0a:	cf 92       	push	r12
    2d0c:	df 92       	push	r13
    2d0e:	ef 92       	push	r14
    2d10:	ff 92       	push	r15
    2d12:	0f 93       	push	r16
    2d14:	a1 2c       	mov	r10, r1
    2d16:	b1 2c       	mov	r11, r1
    2d18:	c1 2c       	mov	r12, r1
    2d1a:	d1 2c       	mov	r13, r1
    2d1c:	0f 2e       	mov	r0, r31
    2d1e:	fd e0       	ldi	r31, 0x0D	; 13
    2d20:	ef 2e       	mov	r14, r31
    2d22:	f1 e3       	ldi	r31, 0x31	; 49
    2d24:	ff 2e       	mov	r15, r31
    2d26:	f0 2d       	mov	r31, r0
    2d28:	00 e0       	ldi	r16, 0x00	; 0
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	44 e6       	ldi	r20, 0x64	; 100
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	61 ec       	ldi	r22, 0xC1	; 193
    2d34:	70 e2       	ldi	r23, 0x20	; 32
    2d36:	8d e1       	ldi	r24, 0x1D	; 29
    2d38:	95 e1       	ldi	r25, 0x15	; 21
    2d3a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <xTaskGenericCreate>
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	69 f4       	brne	.+26     	; 0x2d5c <vTaskStartScheduler+0x56>
    2d42:	f8 94       	cli
    2d44:	80 93 05 31 	sts	0x3105, r24	; 0x803105 <xSchedulerRunning>
    2d48:	10 92 08 31 	sts	0x3108, r1	; 0x803108 <xTickCount>
    2d4c:	10 92 09 31 	sts	0x3109, r1	; 0x803109 <xTickCount+0x1>
    2d50:	10 92 0a 31 	sts	0x310A, r1	; 0x80310a <xTickCount+0x2>
    2d54:	10 92 0b 31 	sts	0x310B, r1	; 0x80310b <xTickCount+0x3>
    2d58:	0e 94 97 11 	call	0x232e	; 0x232e <xPortStartScheduler>
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	cf 90       	pop	r12
    2d66:	bf 90       	pop	r11
    2d68:	af 90       	pop	r10
    2d6a:	08 95       	ret

00002d6c <vTaskSuspendAll>:
    2d6c:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    2d70:	8f 5f       	subi	r24, 0xFF	; 255
    2d72:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxSchedulerSuspended>
    2d76:	08 95       	ret

00002d78 <xTaskGetTickCount>:
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	0f 92       	push	r0
    2d7e:	60 91 08 31 	lds	r22, 0x3108	; 0x803108 <xTickCount>
    2d82:	70 91 09 31 	lds	r23, 0x3109	; 0x803109 <xTickCount+0x1>
    2d86:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <xTickCount+0x2>
    2d8a:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <xTickCount+0x3>
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	08 95       	ret

00002d94 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	21 f4       	brne	.+8      	; 0x2da0 <pcTaskGetTaskName+0xc>
    2d98:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    2d9c:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    2da0:	4d 96       	adiw	r24, 0x1d	; 29
    2da2:	08 95       	ret

00002da4 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    2da4:	80 91 0d 31 	lds	r24, 0x310D	; 0x80310d <xIdleTaskHandle>
    2da8:	90 91 0e 31 	lds	r25, 0x310E	; 0x80310e <xIdleTaskHandle+0x1>
    2dac:	08 95       	ret

00002dae <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2dae:	ff 92       	push	r15
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2db8:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    2dbc:	81 11       	cpse	r24, r1
    2dbe:	ed c0       	rjmp	.+474    	; 0x2f9a <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    2dc0:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    2dc4:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    2dc8:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    2dcc:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	a1 1d       	adc	r26, r1
    2dd4:	b1 1d       	adc	r27, r1
    2dd6:	80 93 08 31 	sts	0x3108, r24	; 0x803108 <xTickCount>
    2dda:	90 93 09 31 	sts	0x3109, r25	; 0x803109 <xTickCount+0x1>
    2dde:	a0 93 0a 31 	sts	0x310A, r26	; 0x80310a <xTickCount+0x2>
    2de2:	b0 93 0b 31 	sts	0x310B, r27	; 0x80310b <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    2de6:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    2dea:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    2dee:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    2df2:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    2df6:	89 2b       	or	r24, r25
    2df8:	8a 2b       	or	r24, r26
    2dfa:	8b 2b       	or	r24, r27
    2dfc:	f1 f5       	brne	.+124    	; 0x2e7a <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2dfe:	80 91 1c 31 	lds	r24, 0x311C	; 0x80311c <pxDelayedTaskList>
    2e02:	90 91 1d 31 	lds	r25, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2e06:	20 91 1a 31 	lds	r18, 0x311A	; 0x80311a <pxOverflowDelayedTaskList>
    2e0a:	30 91 1b 31 	lds	r19, 0x311B	; 0x80311b <pxOverflowDelayedTaskList+0x1>
    2e0e:	20 93 1c 31 	sts	0x311C, r18	; 0x80311c <pxDelayedTaskList>
    2e12:	30 93 1d 31 	sts	0x311D, r19	; 0x80311d <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    2e16:	80 93 1a 31 	sts	0x311A, r24	; 0x80311a <pxOverflowDelayedTaskList>
    2e1a:	90 93 1b 31 	sts	0x311B, r25	; 0x80311b <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    2e1e:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <xNumOfOverflows>
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	80 93 01 31 	sts	0x3101, r24	; 0x803101 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2e28:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2e2c:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2e30:	80 81       	ld	r24, Z
    2e32:	81 11       	cpse	r24, r1
    2e34:	0c c0       	rjmp	.+24     	; 0x2e4e <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2e40:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e44:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e48:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2e4c:	16 c0       	rjmp	.+44     	; 0x2e7a <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2e4e:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2e52:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2e56:	07 80       	ldd	r0, Z+7	; 0x07
    2e58:	f0 85       	ldd	r31, Z+8	; 0x08
    2e5a:	e0 2d       	mov	r30, r0
    2e5c:	00 84       	ldd	r0, Z+8	; 0x08
    2e5e:	f1 85       	ldd	r31, Z+9	; 0x09
    2e60:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	a4 81       	ldd	r26, Z+4	; 0x04
    2e68:	b5 81       	ldd	r27, Z+5	; 0x05
    2e6a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2e6e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e72:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e76:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2e7a:	40 91 08 31 	lds	r20, 0x3108	; 0x803108 <xTickCount>
    2e7e:	50 91 09 31 	lds	r21, 0x3109	; 0x803109 <xTickCount+0x1>
    2e82:	60 91 0a 31 	lds	r22, 0x310A	; 0x80310a <xTickCount+0x2>
    2e86:	70 91 0b 31 	lds	r23, 0x310B	; 0x80310b <xTickCount+0x3>
    2e8a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2e8e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2e92:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2e96:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2e9a:	48 17       	cp	r20, r24
    2e9c:	59 07       	cpc	r21, r25
    2e9e:	6a 07       	cpc	r22, r26
    2ea0:	7b 07       	cpc	r23, r27
    2ea2:	08 f4       	brcc	.+2      	; 0x2ea6 <vTaskIncrementTick+0xf8>
    2ea4:	7f c0       	rjmp	.+254    	; 0x2fa4 <vTaskIncrementTick+0x1f6>
    2ea6:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2eaa:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2eae:	80 81       	ld	r24, Z
    2eb0:	88 23       	and	r24, r24
    2eb2:	f9 f0       	breq	.+62     	; 0x2ef2 <vTaskIncrementTick+0x144>
    2eb4:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2eb8:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2ebc:	07 80       	ldd	r0, Z+7	; 0x07
    2ebe:	f0 85       	ldd	r31, Z+8	; 0x08
    2ec0:	e0 2d       	mov	r30, r0
    2ec2:	c0 85       	ldd	r28, Z+8	; 0x08
    2ec4:	d1 85       	ldd	r29, Z+9	; 0x09
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	ac 81       	ldd	r26, Y+4	; 0x04
    2ecc:	bd 81       	ldd	r27, Y+5	; 0x05
    2ece:	40 91 08 31 	lds	r20, 0x3108	; 0x803108 <xTickCount>
    2ed2:	50 91 09 31 	lds	r21, 0x3109	; 0x803109 <xTickCount+0x1>
    2ed6:	60 91 0a 31 	lds	r22, 0x310A	; 0x80310a <xTickCount+0x2>
    2eda:	70 91 0b 31 	lds	r23, 0x310B	; 0x80310b <xTickCount+0x3>
    2ede:	48 17       	cp	r20, r24
    2ee0:	59 07       	cpc	r21, r25
    2ee2:	6a 07       	cpc	r22, r26
    2ee4:	7b 07       	cpc	r23, r27
    2ee6:	58 f1       	brcs	.+86     	; 0x2f3e <vTaskIncrementTick+0x190>
    2ee8:	0f 2e       	mov	r0, r31
    2eea:	fb e0       	ldi	r31, 0x0B	; 11
    2eec:	ff 2e       	mov	r15, r31
    2eee:	f0 2d       	mov	r31, r0
    2ef0:	2f c0       	rjmp	.+94     	; 0x2f50 <vTaskIncrementTick+0x1a2>
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
    2ef4:	9f ef       	ldi	r25, 0xFF	; 255
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2efc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f00:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f04:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f08:	4d c0       	rjmp	.+154    	; 0x2fa4 <vTaskIncrementTick+0x1f6>
    2f0a:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2f0e:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2f12:	07 80       	ldd	r0, Z+7	; 0x07
    2f14:	f0 85       	ldd	r31, Z+8	; 0x08
    2f16:	e0 2d       	mov	r30, r0
    2f18:	c0 85       	ldd	r28, Z+8	; 0x08
    2f1a:	d1 85       	ldd	r29, Z+9	; 0x09
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	ac 81       	ldd	r26, Y+4	; 0x04
    2f22:	bd 81       	ldd	r27, Y+5	; 0x05
    2f24:	40 91 08 31 	lds	r20, 0x3108	; 0x803108 <xTickCount>
    2f28:	50 91 09 31 	lds	r21, 0x3109	; 0x803109 <xTickCount+0x1>
    2f2c:	60 91 0a 31 	lds	r22, 0x310A	; 0x80310a <xTickCount+0x2>
    2f30:	70 91 0b 31 	lds	r23, 0x310B	; 0x80310b <xTickCount+0x3>
    2f34:	48 17       	cp	r20, r24
    2f36:	59 07       	cpc	r21, r25
    2f38:	6a 07       	cpc	r22, r26
    2f3a:	7b 07       	cpc	r23, r27
    2f3c:	48 f4       	brcc	.+18     	; 0x2f50 <vTaskIncrementTick+0x1a2>
    2f3e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2f42:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f46:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f4a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f4e:	2a c0       	rjmp	.+84     	; 0x2fa4 <vTaskIncrementTick+0x1f6>
    2f50:	8e 01       	movw	r16, r28
    2f52:	0e 5f       	subi	r16, 0xFE	; 254
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	c8 01       	movw	r24, r16
    2f58:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
    2f5c:	88 8d       	ldd	r24, Y+24	; 0x18
    2f5e:	99 8d       	ldd	r25, Y+25	; 0x19
    2f60:	89 2b       	or	r24, r25
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <vTaskIncrementTick+0x1be>
    2f64:	ce 01       	movw	r24, r28
    2f66:	0e 96       	adiw	r24, 0x0e	; 14
    2f68:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
    2f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f6e:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    2f72:	98 17       	cp	r25, r24
    2f74:	10 f4       	brcc	.+4      	; 0x2f7a <vTaskIncrementTick+0x1cc>
    2f76:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    2f7a:	f8 9e       	mul	r15, r24
    2f7c:	c0 01       	movw	r24, r0
    2f7e:	11 24       	eor	r1, r1
    2f80:	b8 01       	movw	r22, r16
    2f82:	8c 5c       	subi	r24, 0xCC	; 204
    2f84:	9e 4c       	sbci	r25, 0xCE	; 206
    2f86:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
    2f8a:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <pxDelayedTaskList>
    2f8e:	f0 91 1d 31 	lds	r31, 0x311D	; 0x80311d <pxDelayedTaskList+0x1>
    2f92:	80 81       	ld	r24, Z
    2f94:	81 11       	cpse	r24, r1
    2f96:	b9 cf       	rjmp	.-142    	; 0x2f0a <vTaskIncrementTick+0x15c>
    2f98:	ac cf       	rjmp	.-168    	; 0x2ef2 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    2f9a:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <uxMissedTicks>
    2f9e:	8f 5f       	subi	r24, 0xFF	; 255
    2fa0:	80 93 03 31 	sts	0x3103, r24	; 0x803103 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	08 95       	ret

00002fb0 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2fc6:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	80 93 04 31 	sts	0x3104, r24	; 0x803104 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2fd0:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    2fd4:	81 11       	cpse	r24, r1
    2fd6:	60 c0       	rjmp	.+192    	; 0x3098 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2fd8:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <uxCurrentNumberOfTasks>
    2fdc:	81 11       	cpse	r24, r1
    2fde:	2c c0       	rjmp	.+88     	; 0x3038 <xTaskResumeAll+0x88>
    2fe0:	5e c0       	rjmp	.+188    	; 0x309e <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2fe2:	d7 01       	movw	r26, r14
    2fe4:	17 96       	adiw	r26, 0x07	; 7
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	18 97       	sbiw	r26, 0x08	; 8
    2fec:	c0 85       	ldd	r28, Z+8	; 0x08
    2fee:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	0e 96       	adiw	r24, 0x0e	; 14
    2ff4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2ff8:	8e 01       	movw	r16, r28
    2ffa:	0e 5f       	subi	r16, 0xFE	; 254
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	c8 01       	movw	r24, r16
    3000:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3004:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3006:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    300a:	98 17       	cp	r25, r24
    300c:	10 f4       	brcc	.+4      	; 0x3012 <xTaskResumeAll+0x62>
    300e:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    3012:	d8 9e       	mul	r13, r24
    3014:	c0 01       	movw	r24, r0
    3016:	11 24       	eor	r1, r1
    3018:	b8 01       	movw	r22, r16
    301a:	8c 5c       	subi	r24, 0xCC	; 204
    301c:	9e 4c       	sbci	r25, 0xCE	; 206
    301e:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3022:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    3026:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    302a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    302c:	82 8d       	ldd	r24, Z+26	; 0x1a
    302e:	98 17       	cp	r25, r24
    3030:	70 f0       	brcs	.+28     	; 0x304e <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3032:	cc 24       	eor	r12, r12
    3034:	c3 94       	inc	r12
    3036:	0b c0       	rjmp	.+22     	; 0x304e <xTaskResumeAll+0x9e>
    3038:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    303a:	0f 2e       	mov	r0, r31
    303c:	ff e0       	ldi	r31, 0x0F	; 15
    303e:	ef 2e       	mov	r14, r31
    3040:	f1 e3       	ldi	r31, 0x31	; 49
    3042:	ff 2e       	mov	r15, r31
    3044:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3046:	0f 2e       	mov	r0, r31
    3048:	fb e0       	ldi	r31, 0x0B	; 11
    304a:	df 2e       	mov	r13, r31
    304c:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    304e:	f7 01       	movw	r30, r14
    3050:	80 81       	ld	r24, Z
    3052:	81 11       	cpse	r24, r1
    3054:	c6 cf       	rjmp	.-116    	; 0x2fe2 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3056:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <uxMissedTicks>
    305a:	88 23       	and	r24, r24
    305c:	81 f0       	breq	.+32     	; 0x307e <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    305e:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <uxMissedTicks>
    3062:	88 23       	and	r24, r24
    3064:	99 f0       	breq	.+38     	; 0x308c <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    3066:	0e 94 d7 16 	call	0x2dae	; 0x2dae <vTaskIncrementTick>
						--uxMissedTicks;
    306a:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <uxMissedTicks>
    306e:	81 50       	subi	r24, 0x01	; 1
    3070:	80 93 03 31 	sts	0x3103, r24	; 0x803103 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3074:	80 91 03 31 	lds	r24, 0x3103	; 0x803103 <uxMissedTicks>
    3078:	81 11       	cpse	r24, r1
    307a:	f5 cf       	rjmp	.-22     	; 0x3066 <xTaskResumeAll+0xb6>
    307c:	07 c0       	rjmp	.+14     	; 0x308c <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    307e:	f1 e0       	ldi	r31, 0x01	; 1
    3080:	cf 16       	cp	r12, r31
    3082:	21 f0       	breq	.+8      	; 0x308c <xTaskResumeAll+0xdc>
    3084:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <xMissedYield>
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	41 f4       	brne	.+16     	; 0x309c <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    308c:	10 92 02 31 	sts	0x3102, r1	; 0x803102 <xMissedYield>
					portYIELD_WITHIN_API();
    3090:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	03 c0       	rjmp	.+6      	; 0x309e <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	01 c0       	rjmp	.+2      	; 0x309e <xTaskResumeAll+0xee>
    309c:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	ff 90       	pop	r15
    30ac:	ef 90       	pop	r14
    30ae:	df 90       	pop	r13
    30b0:	cf 90       	pop	r12
    30b2:	08 95       	ret

000030b4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	ec 01       	movw	r28, r24
    30c2:	6a 01       	movw	r12, r20
    30c4:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    30c6:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    30ca:	88 81       	ld	r24, Y
    30cc:	99 81       	ldd	r25, Y+1	; 0x01
    30ce:	aa 81       	ldd	r26, Y+2	; 0x02
    30d0:	bb 81       	ldd	r27, Y+3	; 0x03
    30d2:	c8 0e       	add	r12, r24
    30d4:	d9 1e       	adc	r13, r25
    30d6:	ea 1e       	adc	r14, r26
    30d8:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    30da:	40 91 08 31 	lds	r20, 0x3108	; 0x803108 <xTickCount>
    30de:	50 91 09 31 	lds	r21, 0x3109	; 0x803109 <xTickCount+0x1>
    30e2:	60 91 0a 31 	lds	r22, 0x310A	; 0x80310a <xTickCount+0x2>
    30e6:	70 91 0b 31 	lds	r23, 0x310B	; 0x80310b <xTickCount+0x3>
    30ea:	48 17       	cp	r20, r24
    30ec:	59 07       	cpc	r21, r25
    30ee:	6a 07       	cpc	r22, r26
    30f0:	7b 07       	cpc	r23, r27
    30f2:	b8 f4       	brcc	.+46     	; 0x3122 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    30f4:	c8 16       	cp	r12, r24
    30f6:	d9 06       	cpc	r13, r25
    30f8:	ea 06       	cpc	r14, r26
    30fa:	fb 06       	cpc	r15, r27
    30fc:	e0 f5       	brcc	.+120    	; 0x3176 <vTaskDelayUntil+0xc2>
    30fe:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    3102:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    3106:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    310a:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    310e:	c8 82       	st	Y, r12
    3110:	d9 82       	std	Y+1, r13	; 0x01
    3112:	ea 82       	std	Y+2, r14	; 0x02
    3114:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3116:	8c 15       	cp	r24, r12
    3118:	9d 05       	cpc	r25, r13
    311a:	ae 05       	cpc	r26, r14
    311c:	bf 05       	cpc	r27, r15
    311e:	f8 f4       	brcc	.+62     	; 0x315e <vTaskDelayUntil+0xaa>
    3120:	13 c0       	rjmp	.+38     	; 0x3148 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3122:	c8 16       	cp	r12, r24
    3124:	d9 06       	cpc	r13, r25
    3126:	ea 06       	cpc	r14, r26
    3128:	fb 06       	cpc	r15, r27
    312a:	00 f1       	brcs	.+64     	; 0x316c <vTaskDelayUntil+0xb8>
    312c:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    3130:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    3134:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    3138:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    313c:	8c 15       	cp	r24, r12
    313e:	9d 05       	cpc	r25, r13
    3140:	ae 05       	cpc	r26, r14
    3142:	bf 05       	cpc	r27, r15
    3144:	98 f0       	brcs	.+38     	; 0x316c <vTaskDelayUntil+0xb8>
    3146:	17 c0       	rjmp	.+46     	; 0x3176 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3148:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    314c:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    3150:	02 96       	adiw	r24, 0x02	; 2
    3152:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3156:	c7 01       	movw	r24, r14
    3158:	b6 01       	movw	r22, r12
    315a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    315e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3162:	81 11       	cpse	r24, r1
    3164:	0d c0       	rjmp	.+26     	; 0x3180 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3166:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
		}
	}
    316a:	0a c0       	rjmp	.+20     	; 0x3180 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    316c:	c8 82       	st	Y, r12
    316e:	d9 82       	std	Y+1, r13	; 0x01
    3170:	ea 82       	std	Y+2, r14	; 0x02
    3172:	fb 82       	std	Y+3, r15	; 0x03
    3174:	e9 cf       	rjmp	.-46     	; 0x3148 <vTaskDelayUntil+0x94>
    3176:	c8 82       	st	Y, r12
    3178:	d9 82       	std	Y+1, r13	; 0x01
    317a:	ea 82       	std	Y+2, r14	; 0x02
    317c:	fb 82       	std	Y+3, r15	; 0x03
    317e:	ef cf       	rjmp	.-34     	; 0x315e <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	ff 90       	pop	r15
    3186:	ef 90       	pop	r14
    3188:	df 90       	pop	r13
    318a:	cf 90       	pop	r12
    318c:	08 95       	ret

0000318e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	6b 01       	movw	r12, r22
    3198:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    319a:	67 2b       	or	r22, r23
    319c:	68 2b       	or	r22, r24
    319e:	69 2b       	or	r22, r25
    31a0:	e9 f0       	breq	.+58     	; 0x31dc <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    31a2:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    31a6:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    31aa:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    31ae:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    31b2:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    31b6:	c8 0e       	add	r12, r24
    31b8:	d9 1e       	adc	r13, r25
    31ba:	ea 1e       	adc	r14, r26
    31bc:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31be:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    31c2:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    31c6:	02 96       	adiw	r24, 0x02	; 2
    31c8:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    31cc:	c7 01       	movw	r24, r14
    31ce:	b6 01       	movw	r22, r12
    31d0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    31d4:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    31d8:	81 11       	cpse	r24, r1
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    31dc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vPortYield>
		}
	}
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	08 95       	ret

000031ea <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    31ea:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    31ee:	81 11       	cpse	r24, r1
    31f0:	0c c0       	rjmp	.+24     	; 0x320a <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    31f2:	e0 91 06 31 	lds	r30, 0x3106	; 0x803106 <uxTopReadyPriority>
    31f6:	4b e0       	ldi	r20, 0x0B	; 11
    31f8:	e4 9f       	mul	r30, r20
    31fa:	f0 01       	movw	r30, r0
    31fc:	11 24       	eor	r1, r1
    31fe:	ec 5c       	subi	r30, 0xCC	; 204
    3200:	fe 4c       	sbci	r31, 0xCE	; 206
    3202:	80 81       	ld	r24, Z
    3204:	88 23       	and	r24, r24
    3206:	29 f0       	breq	.+10     	; 0x3212 <vTaskSwitchContext+0x28>
    3208:	14 c0       	rjmp	.+40     	; 0x3232 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <xMissedYield>
    3210:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3212:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3214:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <uxTopReadyPriority>
    3218:	81 50       	subi	r24, 0x01	; 1
    321a:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    321e:	e0 91 06 31 	lds	r30, 0x3106	; 0x803106 <uxTopReadyPriority>
    3222:	9e 9f       	mul	r25, r30
    3224:	f0 01       	movw	r30, r0
    3226:	11 24       	eor	r1, r1
    3228:	ec 5c       	subi	r30, 0xCC	; 204
    322a:	fe 4c       	sbci	r31, 0xCE	; 206
    322c:	80 81       	ld	r24, Z
    322e:	88 23       	and	r24, r24
    3230:	89 f3       	breq	.-30     	; 0x3214 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3232:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <uxTopReadyPriority>
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	4b e0       	ldi	r20, 0x0B	; 11
    323c:	84 9f       	mul	r24, r20
    323e:	c0 01       	movw	r24, r0
    3240:	11 24       	eor	r1, r1
    3242:	dc 01       	movw	r26, r24
    3244:	ac 5c       	subi	r26, 0xCC	; 204
    3246:	be 4c       	sbci	r27, 0xCE	; 206
    3248:	11 96       	adiw	r26, 0x01	; 1
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	12 97       	sbiw	r26, 0x02	; 2
    3250:	04 80       	ldd	r0, Z+4	; 0x04
    3252:	f5 81       	ldd	r31, Z+5	; 0x05
    3254:	e0 2d       	mov	r30, r0
    3256:	11 96       	adiw	r26, 0x01	; 1
    3258:	ed 93       	st	X+, r30
    325a:	fc 93       	st	X, r31
    325c:	12 97       	sbiw	r26, 0x02	; 2
    325e:	89 5c       	subi	r24, 0xC9	; 201
    3260:	9e 4c       	sbci	r25, 0xCE	; 206
    3262:	e8 17       	cp	r30, r24
    3264:	f9 07       	cpc	r31, r25
    3266:	61 f4       	brne	.+24     	; 0x3280 <vTaskSwitchContext+0x96>
    3268:	84 81       	ldd	r24, Z+4	; 0x04
    326a:	95 81       	ldd	r25, Z+5	; 0x05
    326c:	4b e0       	ldi	r20, 0x0B	; 11
    326e:	42 9f       	mul	r20, r18
    3270:	f0 01       	movw	r30, r0
    3272:	43 9f       	mul	r20, r19
    3274:	f0 0d       	add	r31, r0
    3276:	11 24       	eor	r1, r1
    3278:	ec 5c       	subi	r30, 0xCC	; 204
    327a:	fe 4c       	sbci	r31, 0xCE	; 206
    327c:	81 83       	std	Z+1, r24	; 0x01
    327e:	92 83       	std	Z+2, r25	; 0x02
    3280:	8b e0       	ldi	r24, 0x0B	; 11
    3282:	82 9f       	mul	r24, r18
    3284:	f0 01       	movw	r30, r0
    3286:	83 9f       	mul	r24, r19
    3288:	f0 0d       	add	r31, r0
    328a:	11 24       	eor	r1, r1
    328c:	ec 5c       	subi	r30, 0xCC	; 204
    328e:	fe 4c       	sbci	r31, 0xCE	; 206
    3290:	01 80       	ldd	r0, Z+1	; 0x01
    3292:	f2 81       	ldd	r31, Z+2	; 0x02
    3294:	e0 2d       	mov	r30, r0
    3296:	80 85       	ldd	r24, Z+8	; 0x08
    3298:	91 85       	ldd	r25, Z+9	; 0x09
    329a:	80 93 60 31 	sts	0x3160, r24	; 0x803160 <pxCurrentTCB>
    329e:	90 93 61 31 	sts	0x3161, r25	; 0x803161 <pxCurrentTCB+0x1>
    32a2:	08 95       	ret

000032a4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	6a 01       	movw	r12, r20
    32ae:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    32b0:	60 91 60 31 	lds	r22, 0x3160	; 0x803160 <pxCurrentTCB>
    32b4:	70 91 61 31 	lds	r23, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    32b8:	62 5f       	subi	r22, 0xF2	; 242
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	0e 94 b0 10 	call	0x2160	; 0x2160 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    32c0:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    32c4:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    32c8:	02 96       	adiw	r24, 0x02	; 2
    32ca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    32ce:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    32d2:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    32d6:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    32da:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	6c 0d       	add	r22, r12
    32e4:	7d 1d       	adc	r23, r13
    32e6:	8e 1d       	adc	r24, r14
    32e8:	9f 1d       	adc	r25, r15
    32ea:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	cf 90       	pop	r12
    32f6:	08 95       	ret

000032f8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3300:	dc 01       	movw	r26, r24
    3302:	17 96       	adiw	r26, 0x07	; 7
    3304:	ed 91       	ld	r30, X+
    3306:	fc 91       	ld	r31, X
    3308:	18 97       	sbiw	r26, 0x08	; 8
    330a:	c0 85       	ldd	r28, Z+8	; 0x08
    330c:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    330e:	8e 01       	movw	r16, r28
    3310:	02 5f       	subi	r16, 0xF2	; 242
    3312:	1f 4f       	sbci	r17, 0xFF	; 255
    3314:	c8 01       	movw	r24, r16
    3316:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    331a:	80 91 04 31 	lds	r24, 0x3104	; 0x803104 <uxSchedulerSuspended>
    331e:	81 11       	cpse	r24, r1
    3320:	16 c0       	rjmp	.+44     	; 0x334e <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3322:	0c 50       	subi	r16, 0x0C	; 12
    3324:	11 09       	sbc	r17, r1
    3326:	c8 01       	movw	r24, r16
    3328:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    332c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    332e:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    3332:	98 17       	cp	r25, r24
    3334:	10 f4       	brcc	.+4      	; 0x333a <xTaskRemoveFromEventList+0x42>
    3336:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    333a:	bb e0       	ldi	r27, 0x0B	; 11
    333c:	8b 9f       	mul	r24, r27
    333e:	c0 01       	movw	r24, r0
    3340:	11 24       	eor	r1, r1
    3342:	b8 01       	movw	r22, r16
    3344:	8c 5c       	subi	r24, 0xCC	; 204
    3346:	9e 4c       	sbci	r25, 0xCE	; 206
    3348:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    334e:	b8 01       	movw	r22, r16
    3350:	8f e0       	ldi	r24, 0x0F	; 15
    3352:	91 e3       	ldi	r25, 0x31	; 49
    3354:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3358:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    335c:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3364:	92 8d       	ldd	r25, Z+26	; 0x1a
    3366:	29 17       	cp	r18, r25
    3368:	08 f4       	brcc	.+2      	; 0x336c <xTaskRemoveFromEventList+0x74>
    336a:	80 e0       	ldi	r24, 0x00	; 0
}
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	08 95       	ret

00003376 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3376:	20 91 01 31 	lds	r18, 0x3101	; 0x803101 <xNumOfOverflows>
    337a:	fc 01       	movw	r30, r24
    337c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    337e:	40 91 08 31 	lds	r20, 0x3108	; 0x803108 <xTickCount>
    3382:	50 91 09 31 	lds	r21, 0x3109	; 0x803109 <xTickCount+0x1>
    3386:	60 91 0a 31 	lds	r22, 0x310A	; 0x80310a <xTickCount+0x2>
    338a:	70 91 0b 31 	lds	r23, 0x310B	; 0x80310b <xTickCount+0x3>
    338e:	41 83       	std	Z+1, r20	; 0x01
    3390:	52 83       	std	Z+2, r21	; 0x02
    3392:	63 83       	std	Z+3, r22	; 0x03
    3394:	74 83       	std	Z+4, r23	; 0x04
    3396:	08 95       	ret

00003398 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    33b8:	80 91 01 31 	lds	r24, 0x3101	; 0x803101 <xNumOfOverflows>
    33bc:	90 81       	ld	r25, Z
    33be:	98 17       	cp	r25, r24
    33c0:	89 f0       	breq	.+34     	; 0x33e4 <xTaskCheckForTimeOut+0x4c>
    33c2:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    33c6:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    33ca:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    33ce:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    33d2:	01 81       	ldd	r16, Z+1	; 0x01
    33d4:	12 81       	ldd	r17, Z+2	; 0x02
    33d6:	23 81       	ldd	r18, Z+3	; 0x03
    33d8:	34 81       	ldd	r19, Z+4	; 0x04
    33da:	80 17       	cp	r24, r16
    33dc:	91 07       	cpc	r25, r17
    33de:	a2 07       	cpc	r26, r18
    33e0:	b3 07       	cpc	r27, r19
    33e2:	a8 f5       	brcc	.+106    	; 0x344e <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    33e4:	80 91 08 31 	lds	r24, 0x3108	; 0x803108 <xTickCount>
    33e8:	90 91 09 31 	lds	r25, 0x3109	; 0x803109 <xTickCount+0x1>
    33ec:	a0 91 0a 31 	lds	r26, 0x310A	; 0x80310a <xTickCount+0x2>
    33f0:	b0 91 0b 31 	lds	r27, 0x310B	; 0x80310b <xTickCount+0x3>
    33f4:	c1 80       	ldd	r12, Z+1	; 0x01
    33f6:	d2 80       	ldd	r13, Z+2	; 0x02
    33f8:	e3 80       	ldd	r14, Z+3	; 0x03
    33fa:	f4 80       	ldd	r15, Z+4	; 0x04
    33fc:	eb 01       	movw	r28, r22
    33fe:	08 81       	ld	r16, Y
    3400:	19 81       	ldd	r17, Y+1	; 0x01
    3402:	2a 81       	ldd	r18, Y+2	; 0x02
    3404:	3b 81       	ldd	r19, Y+3	; 0x03
    3406:	8c 19       	sub	r24, r12
    3408:	9d 09       	sbc	r25, r13
    340a:	ae 09       	sbc	r26, r14
    340c:	bf 09       	sbc	r27, r15
    340e:	80 17       	cp	r24, r16
    3410:	91 07       	cpc	r25, r17
    3412:	a2 07       	cpc	r26, r18
    3414:	b3 07       	cpc	r27, r19
    3416:	e8 f4       	brcc	.+58     	; 0x3452 <xTaskCheckForTimeOut+0xba>
    3418:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    341a:	80 90 08 31 	lds	r8, 0x3108	; 0x803108 <xTickCount>
    341e:	90 90 09 31 	lds	r9, 0x3109	; 0x803109 <xTickCount+0x1>
    3422:	a0 90 0a 31 	lds	r10, 0x310A	; 0x80310a <xTickCount+0x2>
    3426:	b0 90 0b 31 	lds	r11, 0x310B	; 0x80310b <xTickCount+0x3>
    342a:	b5 01       	movw	r22, r10
    342c:	a4 01       	movw	r20, r8
    342e:	4c 19       	sub	r20, r12
    3430:	5d 09       	sbc	r21, r13
    3432:	6e 09       	sbc	r22, r14
    3434:	7f 09       	sbc	r23, r15
    3436:	04 1b       	sub	r16, r20
    3438:	15 0b       	sbc	r17, r21
    343a:	26 0b       	sbc	r18, r22
    343c:	37 0b       	sbc	r19, r23
    343e:	08 83       	st	Y, r16
    3440:	19 83       	std	Y+1, r17	; 0x01
    3442:	2a 83       	std	Y+2, r18	; 0x02
    3444:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3446:	0e 94 bb 19 	call	0x3376	; 0x3376 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	01 c0       	rjmp	.+2      	; 0x3454 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3452:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	ff 90       	pop	r15
    3462:	ef 90       	pop	r14
    3464:	df 90       	pop	r13
    3466:	cf 90       	pop	r12
    3468:	bf 90       	pop	r11
    346a:	af 90       	pop	r10
    346c:	9f 90       	pop	r9
    346e:	8f 90       	pop	r8
    3470:	08 95       	ret

00003472 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <xMissedYield>
    3478:	08 95       	ret

0000347a <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	21 f4       	brne	.+8      	; 0x3486 <uxTaskGetStackHighWaterMark+0xc>
    347e:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    3482:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3486:	dc 01       	movw	r26, r24
    3488:	5b 96       	adiw	r26, 0x1b	; 27
    348a:	ed 91       	ld	r30, X+
    348c:	fc 91       	ld	r31, X
    348e:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3490:	80 81       	ld	r24, Z
    3492:	81 31       	cpi	r24, 0x11	; 17
    3494:	41 f4       	brne	.+16     	; 0x34a6 <uxTaskGetStackHighWaterMark+0x2c>
    3496:	31 96       	adiw	r30, 0x01	; 1
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    349c:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    349e:	21 91       	ld	r18, Z+
    34a0:	21 31       	cpi	r18, 0x11	; 17
    34a2:	e1 f3       	breq	.-8      	; 0x349c <uxTaskGetStackHighWaterMark+0x22>
    34a4:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    34aa:	08 95       	ret

000034ac <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    34ac:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <pxCurrentTCB>
    34b0:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <pxCurrentTCB+0x1>

		return xReturn;
	}
    34b4:	08 95       	ret

000034b6 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    34c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    34c2:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    34c6:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    34ca:	5a 96       	adiw	r26, 0x1a	; 26
    34cc:	8c 91       	ld	r24, X
    34ce:	28 17       	cp	r18, r24
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <vTaskPriorityInherit+0x1e>
    34d2:	41 c0       	rjmp	.+130    	; 0x3556 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    34d4:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    34d8:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    34dc:	5a 96       	adiw	r26, 0x1a	; 26
    34de:	3c 91       	ld	r19, X
    34e0:	84 e0       	ldi	r24, 0x04	; 4
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	a0 e0       	ldi	r26, 0x00	; 0
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	83 1b       	sub	r24, r19
    34ea:	91 09       	sbc	r25, r1
    34ec:	a1 09       	sbc	r26, r1
    34ee:	b1 09       	sbc	r27, r1
    34f0:	86 87       	std	Z+14, r24	; 0x0e
    34f2:	97 87       	std	Z+15, r25	; 0x0f
    34f4:	a0 8b       	std	Z+16, r26	; 0x10
    34f6:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    34f8:	8b e0       	ldi	r24, 0x0B	; 11
    34fa:	28 9f       	mul	r18, r24
    34fc:	90 01       	movw	r18, r0
    34fe:	11 24       	eor	r1, r1
    3500:	2c 5c       	subi	r18, 0xCC	; 204
    3502:	3e 4c       	sbci	r19, 0xCE	; 206
    3504:	84 85       	ldd	r24, Z+12	; 0x0c
    3506:	95 85       	ldd	r25, Z+13	; 0x0d
    3508:	82 17       	cp	r24, r18
    350a:	93 07       	cpc	r25, r19
    350c:	e9 f4       	brne	.+58     	; 0x3548 <vTaskPriorityInherit+0x92>
    350e:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3510:	ef 01       	movw	r28, r30
    3512:	22 96       	adiw	r28, 0x02	; 2
    3514:	ce 01       	movw	r24, r28
    3516:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    351a:	e0 91 60 31 	lds	r30, 0x3160	; 0x803160 <pxCurrentTCB>
    351e:	f0 91 61 31 	lds	r31, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    3522:	82 8d       	ldd	r24, Z+26	; 0x1a
    3524:	f8 01       	movw	r30, r16
    3526:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3528:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    352c:	98 17       	cp	r25, r24
    352e:	10 f4       	brcc	.+4      	; 0x3534 <vTaskPriorityInherit+0x7e>
    3530:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    3534:	fb e0       	ldi	r31, 0x0B	; 11
    3536:	8f 9f       	mul	r24, r31
    3538:	c0 01       	movw	r24, r0
    353a:	11 24       	eor	r1, r1
    353c:	be 01       	movw	r22, r28
    353e:	8c 5c       	subi	r24, 0xCC	; 204
    3540:	9e 4c       	sbci	r25, 0xCE	; 206
    3542:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
    3546:	07 c0       	rjmp	.+14     	; 0x3556 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3548:	a0 91 60 31 	lds	r26, 0x3160	; 0x803160 <pxCurrentTCB>
    354c:	b0 91 61 31 	lds	r27, 0x3161	; 0x803161 <pxCurrentTCB+0x1>
    3550:	5a 96       	adiw	r26, 0x1a	; 26
    3552:	8c 91       	ld	r24, X
    3554:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	08 95       	ret

00003560 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	49 f1       	breq	.+82     	; 0x35be <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    356c:	fc 01       	movw	r30, r24
    356e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3570:	27 a1       	ldd	r18, Z+39	; 0x27
    3572:	32 17       	cp	r19, r18
    3574:	21 f1       	breq	.+72     	; 0x35be <vTaskPriorityDisinherit+0x5e>
    3576:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3578:	8c 01       	movw	r16, r24
    357a:	0e 5f       	subi	r16, 0xFE	; 254
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	c8 01       	movw	r24, r16
    3580:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3584:	8f a1       	ldd	r24, Y+39	; 0x27
    3586:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3588:	44 e0       	ldi	r20, 0x04	; 4
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	48 1b       	sub	r20, r24
    3592:	51 09       	sbc	r21, r1
    3594:	61 09       	sbc	r22, r1
    3596:	71 09       	sbc	r23, r1
    3598:	4e 87       	std	Y+14, r20	; 0x0e
    359a:	5f 87       	std	Y+15, r21	; 0x0f
    359c:	68 8b       	std	Y+16, r22	; 0x10
    359e:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    35a0:	90 91 06 31 	lds	r25, 0x3106	; 0x803106 <uxTopReadyPriority>
    35a4:	98 17       	cp	r25, r24
    35a6:	10 f4       	brcc	.+4      	; 0x35ac <vTaskPriorityDisinherit+0x4c>
    35a8:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <uxTopReadyPriority>
    35ac:	fb e0       	ldi	r31, 0x0B	; 11
    35ae:	8f 9f       	mul	r24, r31
    35b0:	c0 01       	movw	r24, r0
    35b2:	11 24       	eor	r1, r1
    35b4:	b8 01       	movw	r22, r16
    35b6:	8c 5c       	subi	r24, 0xCC	; 204
    35b8:	9e 4c       	sbci	r25, 0xCE	; 206
    35ba:	0e 94 89 10 	call	0x2112	; 0x2112 <vListInsertEnd>
			}
		}
	}
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	08 95       	ret

000035c8 <__divmodsi4>:
    35c8:	05 2e       	mov	r0, r21
    35ca:	97 fb       	bst	r25, 7
    35cc:	1e f4       	brtc	.+6      	; 0x35d4 <__divmodsi4+0xc>
    35ce:	00 94       	com	r0
    35d0:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__negsi2>
    35d4:	57 fd       	sbrc	r21, 7
    35d6:	07 d0       	rcall	.+14     	; 0x35e6 <__divmodsi4_neg2>
    35d8:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodsi4>
    35dc:	07 fc       	sbrc	r0, 7
    35de:	03 d0       	rcall	.+6      	; 0x35e6 <__divmodsi4_neg2>
    35e0:	4e f4       	brtc	.+18     	; 0x35f4 <__divmodsi4_exit>
    35e2:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__negsi2>

000035e6 <__divmodsi4_neg2>:
    35e6:	50 95       	com	r21
    35e8:	40 95       	com	r20
    35ea:	30 95       	com	r19
    35ec:	21 95       	neg	r18
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	4f 4f       	sbci	r20, 0xFF	; 255
    35f2:	5f 4f       	sbci	r21, 0xFF	; 255

000035f4 <__divmodsi4_exit>:
    35f4:	08 95       	ret

000035f6 <__negsi2>:
    35f6:	90 95       	com	r25
    35f8:	80 95       	com	r24
    35fa:	70 95       	com	r23
    35fc:	61 95       	neg	r22
    35fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3600:	8f 4f       	sbci	r24, 0xFF	; 255
    3602:	9f 4f       	sbci	r25, 0xFF	; 255
    3604:	08 95       	ret

00003606 <__udivmodsi4>:
    3606:	a1 e2       	ldi	r26, 0x21	; 33
    3608:	1a 2e       	mov	r1, r26
    360a:	aa 1b       	sub	r26, r26
    360c:	bb 1b       	sub	r27, r27
    360e:	fd 01       	movw	r30, r26
    3610:	0d c0       	rjmp	.+26     	; 0x362c <__udivmodsi4_ep>

00003612 <__udivmodsi4_loop>:
    3612:	aa 1f       	adc	r26, r26
    3614:	bb 1f       	adc	r27, r27
    3616:	ee 1f       	adc	r30, r30
    3618:	ff 1f       	adc	r31, r31
    361a:	a2 17       	cp	r26, r18
    361c:	b3 07       	cpc	r27, r19
    361e:	e4 07       	cpc	r30, r20
    3620:	f5 07       	cpc	r31, r21
    3622:	20 f0       	brcs	.+8      	; 0x362c <__udivmodsi4_ep>
    3624:	a2 1b       	sub	r26, r18
    3626:	b3 0b       	sbc	r27, r19
    3628:	e4 0b       	sbc	r30, r20
    362a:	f5 0b       	sbc	r31, r21

0000362c <__udivmodsi4_ep>:
    362c:	66 1f       	adc	r22, r22
    362e:	77 1f       	adc	r23, r23
    3630:	88 1f       	adc	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	1a 94       	dec	r1
    3636:	69 f7       	brne	.-38     	; 0x3612 <__udivmodsi4_loop>
    3638:	60 95       	com	r22
    363a:	70 95       	com	r23
    363c:	80 95       	com	r24
    363e:	90 95       	com	r25
    3640:	9b 01       	movw	r18, r22
    3642:	ac 01       	movw	r20, r24
    3644:	bd 01       	movw	r22, r26
    3646:	cf 01       	movw	r24, r30
    3648:	08 95       	ret

0000364a <memcpy>:
    364a:	fb 01       	movw	r30, r22
    364c:	dc 01       	movw	r26, r24
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <memcpy+0xa>
    3650:	01 90       	ld	r0, Z+
    3652:	0d 92       	st	X+, r0
    3654:	41 50       	subi	r20, 0x01	; 1
    3656:	50 40       	sbci	r21, 0x00	; 0
    3658:	d8 f7       	brcc	.-10     	; 0x3650 <memcpy+0x6>
    365a:	08 95       	ret

0000365c <memset>:
    365c:	dc 01       	movw	r26, r24
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <memset+0x6>
    3660:	6d 93       	st	X+, r22
    3662:	41 50       	subi	r20, 0x01	; 1
    3664:	50 40       	sbci	r21, 0x00	; 0
    3666:	e0 f7       	brcc	.-8      	; 0x3660 <memset+0x4>
    3668:	08 95       	ret

0000366a <strncpy>:
    366a:	fb 01       	movw	r30, r22
    366c:	dc 01       	movw	r26, r24
    366e:	41 50       	subi	r20, 0x01	; 1
    3670:	50 40       	sbci	r21, 0x00	; 0
    3672:	48 f0       	brcs	.+18     	; 0x3686 <strncpy+0x1c>
    3674:	01 90       	ld	r0, Z+
    3676:	0d 92       	st	X+, r0
    3678:	00 20       	and	r0, r0
    367a:	c9 f7       	brne	.-14     	; 0x366e <strncpy+0x4>
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <strncpy+0x16>
    367e:	1d 92       	st	X+, r1
    3680:	41 50       	subi	r20, 0x01	; 1
    3682:	50 40       	sbci	r21, 0x00	; 0
    3684:	e0 f7       	brcc	.-8      	; 0x367e <strncpy+0x14>
    3686:	08 95       	ret

00003688 <ultoa>:
    3688:	25 32       	cpi	r18, 0x25	; 37
    368a:	31 05       	cpc	r19, r1
    368c:	20 f4       	brcc	.+8      	; 0x3696 <ultoa+0xe>
    368e:	22 30       	cpi	r18, 0x02	; 2
    3690:	10 f0       	brcs	.+4      	; 0x3696 <ultoa+0xe>
    3692:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__ultoa_ncheck>
    3696:	fa 01       	movw	r30, r20
    3698:	10 82       	st	Z, r1
    369a:	ca 01       	movw	r24, r20
    369c:	08 95       	ret

0000369e <__ultoa_ncheck>:
    369e:	bb 27       	eor	r27, r27

000036a0 <__ultoa_common>:
    36a0:	fa 01       	movw	r30, r20
    36a2:	a6 2f       	mov	r26, r22
    36a4:	62 17       	cp	r22, r18
    36a6:	71 05       	cpc	r23, r1
    36a8:	81 05       	cpc	r24, r1
    36aa:	91 05       	cpc	r25, r1
    36ac:	33 0b       	sbc	r19, r19
    36ae:	30 fb       	bst	r19, 0
    36b0:	66 f0       	brts	.+24     	; 0x36ca <__ultoa_common+0x2a>
    36b2:	aa 27       	eor	r26, r26
    36b4:	66 0f       	add	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	88 1f       	adc	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	aa 1f       	adc	r26, r26
    36be:	a2 17       	cp	r26, r18
    36c0:	10 f0       	brcs	.+4      	; 0x36c6 <__ultoa_common+0x26>
    36c2:	a2 1b       	sub	r26, r18
    36c4:	63 95       	inc	r22
    36c6:	38 50       	subi	r19, 0x08	; 8
    36c8:	a9 f7       	brne	.-22     	; 0x36b4 <__ultoa_common+0x14>
    36ca:	a0 5d       	subi	r26, 0xD0	; 208
    36cc:	aa 33       	cpi	r26, 0x3A	; 58
    36ce:	08 f0       	brcs	.+2      	; 0x36d2 <__ultoa_common+0x32>
    36d0:	a9 5d       	subi	r26, 0xD9	; 217
    36d2:	a1 93       	st	Z+, r26
    36d4:	36 f7       	brtc	.-52     	; 0x36a2 <__ultoa_common+0x2>
    36d6:	b1 11       	cpse	r27, r1
    36d8:	b1 93       	st	Z+, r27
    36da:	10 82       	st	Z, r1
    36dc:	ca 01       	movw	r24, r20
    36de:	0c 94 96 1b 	jmp	0x372c	; 0x372c <strrev>

000036e2 <utoa>:
    36e2:	45 32       	cpi	r20, 0x25	; 37
    36e4:	51 05       	cpc	r21, r1
    36e6:	20 f4       	brcc	.+8      	; 0x36f0 <utoa+0xe>
    36e8:	42 30       	cpi	r20, 0x02	; 2
    36ea:	10 f0       	brcs	.+4      	; 0x36f0 <utoa+0xe>
    36ec:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__utoa_ncheck>
    36f0:	fb 01       	movw	r30, r22
    36f2:	10 82       	st	Z, r1
    36f4:	cb 01       	movw	r24, r22
    36f6:	08 95       	ret

000036f8 <__utoa_ncheck>:
    36f8:	bb 27       	eor	r27, r27

000036fa <__utoa_common>:
    36fa:	fb 01       	movw	r30, r22
    36fc:	55 27       	eor	r21, r21
    36fe:	aa 27       	eor	r26, r26
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	aa 1f       	adc	r26, r26
    3706:	a4 17       	cp	r26, r20
    3708:	10 f0       	brcs	.+4      	; 0x370e <__utoa_common+0x14>
    370a:	a4 1b       	sub	r26, r20
    370c:	83 95       	inc	r24
    370e:	50 51       	subi	r21, 0x10	; 16
    3710:	b9 f7       	brne	.-18     	; 0x3700 <__utoa_common+0x6>
    3712:	a0 5d       	subi	r26, 0xD0	; 208
    3714:	aa 33       	cpi	r26, 0x3A	; 58
    3716:	08 f0       	brcs	.+2      	; 0x371a <__utoa_common+0x20>
    3718:	a9 5d       	subi	r26, 0xD9	; 217
    371a:	a1 93       	st	Z+, r26
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	79 f7       	brne	.-34     	; 0x36fe <__utoa_common+0x4>
    3720:	b1 11       	cpse	r27, r1
    3722:	b1 93       	st	Z+, r27
    3724:	11 92       	st	Z+, r1
    3726:	cb 01       	movw	r24, r22
    3728:	0c 94 96 1b 	jmp	0x372c	; 0x372c <strrev>

0000372c <strrev>:
    372c:	dc 01       	movw	r26, r24
    372e:	fc 01       	movw	r30, r24
    3730:	67 2f       	mov	r22, r23
    3732:	71 91       	ld	r23, Z+
    3734:	77 23       	and	r23, r23
    3736:	e1 f7       	brne	.-8      	; 0x3730 <strrev+0x4>
    3738:	32 97       	sbiw	r30, 0x02	; 2
    373a:	04 c0       	rjmp	.+8      	; 0x3744 <strrev+0x18>
    373c:	7c 91       	ld	r23, X
    373e:	6d 93       	st	X+, r22
    3740:	70 83       	st	Z, r23
    3742:	62 91       	ld	r22, -Z
    3744:	ae 17       	cp	r26, r30
    3746:	bf 07       	cpc	r27, r31
    3748:	c8 f3       	brcs	.-14     	; 0x373c <strrev+0x10>
    374a:	08 95       	ret

0000374c <__mulsi3>:
    374c:	db 01       	movw	r26, r22
    374e:	8f 93       	push	r24
    3750:	9f 93       	push	r25
    3752:	0e 94 bf 1b 	call	0x377e	; 0x377e <__muluhisi3>
    3756:	bf 91       	pop	r27
    3758:	af 91       	pop	r26
    375a:	a2 9f       	mul	r26, r18
    375c:	80 0d       	add	r24, r0
    375e:	91 1d       	adc	r25, r1
    3760:	a3 9f       	mul	r26, r19
    3762:	90 0d       	add	r25, r0
    3764:	b2 9f       	mul	r27, r18
    3766:	90 0d       	add	r25, r0
    3768:	11 24       	eor	r1, r1
    376a:	08 95       	ret

0000376c <__tablejump2__>:
    376c:	ee 0f       	add	r30, r30
    376e:	ff 1f       	adc	r31, r31
    3770:	88 1f       	adc	r24, r24
    3772:	8b bf       	out	0x3b, r24	; 59
    3774:	07 90       	elpm	r0, Z+
    3776:	f6 91       	elpm	r31, Z
    3778:	e0 2d       	mov	r30, r0
    377a:	1b be       	out	0x3b, r1	; 59
    377c:	19 94       	eijmp

0000377e <__muluhisi3>:
    377e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__umulhisi3>
    3782:	a5 9f       	mul	r26, r21
    3784:	90 0d       	add	r25, r0
    3786:	b4 9f       	mul	r27, r20
    3788:	90 0d       	add	r25, r0
    378a:	a4 9f       	mul	r26, r20
    378c:	80 0d       	add	r24, r0
    378e:	91 1d       	adc	r25, r1
    3790:	11 24       	eor	r1, r1
    3792:	08 95       	ret

00003794 <__umulhisi3>:
    3794:	a2 9f       	mul	r26, r18
    3796:	b0 01       	movw	r22, r0
    3798:	b3 9f       	mul	r27, r19
    379a:	c0 01       	movw	r24, r0
    379c:	a3 9f       	mul	r26, r19
    379e:	70 0d       	add	r23, r0
    37a0:	81 1d       	adc	r24, r1
    37a2:	11 24       	eor	r1, r1
    37a4:	91 1d       	adc	r25, r1
    37a6:	b2 9f       	mul	r27, r18
    37a8:	70 0d       	add	r23, r0
    37aa:	81 1d       	adc	r24, r1
    37ac:	11 24       	eor	r1, r1
    37ae:	91 1d       	adc	r25, r1
    37b0:	08 95       	ret

000037b2 <_exit>:
    37b2:	f8 94       	cli

000037b4 <__stop_program>:
    37b4:	ff cf       	rjmp	.-2      	; 0x37b4 <__stop_program>
