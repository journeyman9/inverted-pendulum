
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000396a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  0000396a  000039fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a0  008020ee  008020ee  00003aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00008f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000be05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  000109e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00012f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 02 	jmp	0x536	; 0x536 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_25>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      70:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_28>
      74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      78:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      7c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      80:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      84:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      8c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      90:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      94:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      98:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      9c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c4:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__vector_49>
      c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e8:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_58>
      ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     100:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     104:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     108:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     10c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     110:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     114:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     118:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     11c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     120:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     124:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     128:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     12c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     130:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     134:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     138:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     13c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     140:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     144:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     148:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     14c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     150:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     154:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     158:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     15c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     160:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_88>
     164:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     168:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     16c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_91>
     170:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     174:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     178:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     17c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     180:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     184:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     188:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     18c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     190:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     194:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     198:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     19c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1fc:	5d 0d       	add	r21, r13
     1fe:	60 0d       	add	r22, r0
     200:	63 0d       	add	r22, r3
     202:	66 0d       	add	r22, r6
     204:	69 0d       	add	r22, r9
     206:	6c 0d       	add	r22, r12
     208:	6e 0d       	add	r22, r14
     20a:	7f 0d       	add	r23, r15
     20c:	87 0d       	add	r24, r7
     20e:	91 0d       	add	r25, r1
     210:	8f 0d       	add	r24, r15

00000212 <__trampolines_start>:
     212:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_ZN5rs23214check_for_charEv>
     216:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <_ZN5rs23212clear_screenEv>
     21a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <_ZN8emstreamlsE15ser_manipulator+0x36>
     21e:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_ZN8emstream12transmit_nowEv>
     222:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN5rs2327putcharEc>
     226:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_ZN8emstream13ready_to_sendEv>
     22a:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <_ZN8emstreamlsE15ser_manipulator+0x1e>
     22e:	0c 94 1d 09 	jmp	0x123a	; 0x123a <_ZN17task_limit_switch3runEv>
     232:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_ZN8emstream7getcharEv>
     236:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_ZN14frt_text_queue7putcharEc>
     23a:	0c 94 40 05 	jmp	0xa80	; 0xa80 <_ZN8frt_task12print_statusER8emstream>
     23e:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     242:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_ZN8emstream14check_for_charEv>
     246:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_ZN21task_pendulum_encoder3runEv>
     24a:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <_ZN5rs2327getcharEv>
     24e:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__cxa_pure_virtual>
     252:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_ZN8emstreamlsE15ser_manipulator+0x72>
     256:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_ZN9task_user3runEv>
     25a:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_ZN8emstreamlsE15ser_manipulator+0x62>
     25e:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <_ZN8emstreamlsE15ser_manipulator+0x30>
     262:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_ZN18task_motor_command3runEv>
     266:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     26a:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_ZN18task_motor_encoder3runEv>
     26e:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
     272:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_ZN8emstreamlsE15ser_manipulator+0x40>
     276:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_GLOBAL__sub_I_counter>
     27a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_ZN8emstream12clear_screenEv>
     27e:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <_ZN8emstreamlsE15ser_manipulator+0x24>
     282:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <prvIdleTask>
     286:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     28a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     28e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_call_static_run_method>
     292:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_ZN8emstreamlsE15ser_manipulator+0x82>
     296:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_ZN22task_system_controller3runEv>

0000029a <__trampolines_end>:
     29a:	09 09       	sbc	r16, r9
	...

0000029d <_ZZ15print_task_listP8emstreamE3__c_8>:
     29d:	2f 00                                               /.

0000029f <_ZZ15print_task_listP8emstreamE3__c_7>:
     29f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002aa <_ZZ15print_task_listP8emstreamE3__c_6>:
     2aa:	09 2d 2d 2d 2d 00                                   .----.

000002b0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2b0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002bc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2bc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000002cd <_ZZ15print_task_listP8emstreamE3__c_3>:
     2cd:	09 52 75 6e 73 00                                   .Runs.

000002d3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     2d3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000002df <_ZZ15print_task_listP8emstreamE3__c_1>:
     2df:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000002f0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     2f0:	09 53 74 61 63 6b 00                                .Stack.

000002f7 <_ZZ15print_task_listP8emstreamE3__c>:
     2f7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000302 <_ZZN9task_user11show_statusEvE3__c_4>:
     302:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000030d <_ZZN9task_user11show_statusEvE3__c_3>:
     30d:	2f 00                                               /.

0000030f <_ZZN9task_user11show_statusEvE3__c_2>:
     30f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000031d <_ZZN9task_user11show_statusEvE3__c_1>:
     31d:	54 69 6d 65 3a 20 00                                Time: .

00000324 <_ZZN9task_user11show_statusEvE3__c_0>:
     324:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000330 <_ZZN9task_user11show_statusEvE3__c>:
     330:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     340:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000034f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     34f:	1b 5b 32 32 6d 00                                   .[22m.

00000355 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     355:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000360 <_ZZ17print_task_stacksP8emstreamE3__c>:
     360:	1b 5b 31 6d 00                                      .[1m.

00000365 <_ZZN9task_user3runEvE3__c_3>:
     365:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     375:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000382 <_ZZN9task_user3runEvE3__c_2>:
     382:	3a 57 54 46 3f 00                                   :WTF?.

00000388 <_ZZN9task_user3runEvE3__c_1>:
     388:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     398:	65 00                                               e.

0000039a <_ZZN9task_user3runEvE3__c_0>:
     39a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003a8 <_ZZN9task_user3runEvE3__c>:
     3a8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3b8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000003c6 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3c6:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000003d5 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     3d5:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     3e5:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000003f0 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     3f0:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     400:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     40e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     41e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     42e:	6d 61 74 69 6f 6e 00                                mation.

00000435 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     435:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     445:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000456 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     456:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     466:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_4>:
     46e:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     47e:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000048a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     48a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     49a:	68 65 20 41 56 52 00                                he AVR.

000004a1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4a1:	20 68 65 6c 70 00                                    help.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4a7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4b7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004c6 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4c6:	1b 5b 33 30 6d 00                                   .[30m.

000004cc <_ZZN9task_user18print_help_messageEvE3__c>:
     4cc:	1b 5b 34 36 6d 00                                   .[46m.

000004d2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4d2:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     4e2:	61 73 6b 20 00                                      ask .

000004e7 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     4e7:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     4f5:	20 63 72 65 61 74 65 64 00                           created.

000004fe <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     4fe:	54 61 73 6b 20 00                                   Task .

00000504 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     504:	1b 5b 32 32 6d 00                                   .[22m.

0000050a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     50a:	54 61 73 6b 3a 20 00                                Task: .

00000511 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     511:	1b 5b 31 6d 00                                      .[1m.

00000516 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     516:	09 00                                               ..

00000518 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     518:	09 00                                               ..

0000051a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     51a:	2f 00                                               /.

0000051c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     51c:	09 00                                               ..

0000051e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     51e:	09 00                                               ..

00000520 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     520:	1b 5b 32 32 6d 00                                   .[22m.

00000526 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     526:	1b 5b 31 6d 00                                      .[1m.

0000052b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     52b:	1b 5b 31 6d 00                                      .[1m.

00000530 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     530:	20 20 00 00                                           ..

00000534 <__ctors_start>:
     534:	54 0b       	sbc	r21, r20

00000536 <__ctors_end>:
     536:	11 24       	eor	r1, r1
     538:	1f be       	out	0x3f, r1	; 63
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df e3       	ldi	r29, 0x3F	; 63
     540:	de bf       	out	0x3e, r29	; 62
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0c bf       	out	0x3c, r16	; 60
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	1a be       	out	0x3a, r1	; 58
     54c:	1b be       	out	0x3b, r1	; 59

0000054e <__do_copy_data>:
     54e:	10 e2       	ldi	r17, 0x20	; 32
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	ea e6       	ldi	r30, 0x6A	; 106
     556:	f9 e3       	ldi	r31, 0x39	; 57
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	ae 3e       	cpi	r26, 0xEE	; 238
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_clear_bss>:
     56a:	21 e3       	ldi	r18, 0x31	; 49
     56c:	ae ee       	ldi	r26, 0xEE	; 238
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 c0       	rjmp	.+2      	; 0x574 <.do_clear_bss_start>

00000572 <.do_clear_bss_loop>:
     572:	1d 92       	st	X+, r1

00000574 <.do_clear_bss_start>:
     574:	ae 38       	cpi	r26, 0x8E	; 142
     576:	b2 07       	cpc	r27, r18
     578:	e1 f7       	brne	.-8      	; 0x572 <.do_clear_bss_loop>

0000057a <__do_global_ctors>:
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	cb e9       	ldi	r28, 0x9B	; 155
     57e:	d2 e0       	ldi	r29, 0x02	; 2
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <__do_global_ctors+0x16>
     584:	21 97       	sbiw	r28, 0x01	; 1
     586:	01 09       	sbc	r16, r1
     588:	80 2f       	mov	r24, r16
     58a:	fe 01       	movw	r30, r28
     58c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__tablejump2__>
     590:	ca 39       	cpi	r28, 0x9A	; 154
     592:	d1 07       	cpc	r29, r17
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 07       	cpc	r16, r24
     598:	a9 f7       	brne	.-22     	; 0x584 <__do_global_ctors+0xa>
     59a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <main>
     59e:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <_ZN8emstream12clear_screenEv>:
     5a6:	08 95       	ret

000005a8 <_ZN8emstream12transmit_nowEv>:
     5a8:	08 95       	ret

000005aa <_ZN8emstream14check_for_charEv>:
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <_ZN8emstream7getcharEv>:
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <_ZN8emstream13ready_to_sendEv>:
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret

000005b8 <__cxa_pure_virtual>:
     5b8:	08 95       	ret

000005ba <_ZN8frt_task20print_status_in_listEP8emstream>:
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	8b 01       	movw	r16, r22
     5c6:	e8 81       	ld	r30, Y
     5c8:	f9 81       	ldd	r31, Y+1	; 0x01
     5ca:	02 80       	ldd	r0, Z+2	; 0x02
     5cc:	f3 81       	ldd	r31, Z+3	; 0x03
     5ce:	e0 2d       	mov	r30, r0
     5d0:	19 95       	eicall
     5d2:	66 e0       	ldi	r22, 0x06	; 6
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     5da:	8c 81       	ldd	r24, Y+4	; 0x04
     5dc:	9d 81       	ldd	r25, Y+5	; 0x05
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     5e2:	b8 01       	movw	r22, r16
     5e4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <_ZN9task_user18print_help_messageEv>:
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	8e 81       	ldd	r24, Y+6	; 0x06
     600:	9f 81       	ldd	r25, Y+7	; 0x07
     602:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     606:	8c 01       	movw	r16, r24
     608:	6c ec       	ldi	r22, 0xCC	; 204
     60a:	74 e0       	ldi	r23, 0x04	; 4
     60c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	c8 01       	movw	r24, r16
     614:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     618:	8c 01       	movw	r16, r24
     61a:	66 ec       	ldi	r22, 0xC6	; 198
     61c:	74 e0       	ldi	r23, 0x04	; 4
     61e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     622:	67 e0       	ldi	r22, 0x07	; 7
     624:	c8 01       	movw	r24, r16
     626:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     62a:	6a e0       	ldi	r22, 0x0A	; 10
     62c:	8e 81       	ldd	r24, Y+6	; 0x06
     62e:	9f 81       	ldd	r25, Y+7	; 0x07
     630:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     634:	8c 01       	movw	r16, r24
     636:	67 ea       	ldi	r22, 0xA7	; 167
     638:	74 e0       	ldi	r23, 0x04	; 4
     63a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     63e:	6a e0       	ldi	r22, 0x0A	; 10
     640:	c8 01       	movw	r24, r16
     642:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     646:	8c 01       	movw	r16, r24
     648:	61 ea       	ldi	r22, 0xA1	; 161
     64a:	74 e0       	ldi	r23, 0x04	; 4
     64c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     650:	66 e0       	ldi	r22, 0x06	; 6
     652:	c8 01       	movw	r24, r16
     654:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     658:	6a e0       	ldi	r22, 0x0A	; 10
     65a:	8e 81       	ldd	r24, Y+6	; 0x06
     65c:	9f 81       	ldd	r25, Y+7	; 0x07
     65e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     662:	8c 01       	movw	r16, r24
     664:	6a e8       	ldi	r22, 0x8A	; 138
     666:	74 e0       	ldi	r23, 0x04	; 4
     668:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     674:	6a e0       	ldi	r22, 0x0A	; 10
     676:	8e 81       	ldd	r24, Y+6	; 0x06
     678:	9f 81       	ldd	r25, Y+7	; 0x07
     67a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     67e:	8c 01       	movw	r16, r24
     680:	6e e6       	ldi	r22, 0x6E	; 110
     682:	74 e0       	ldi	r23, 0x04	; 4
     684:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     688:	66 e0       	ldi	r22, 0x06	; 6
     68a:	c8 01       	movw	r24, r16
     68c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     690:	6a e0       	ldi	r22, 0x0A	; 10
     692:	8e 81       	ldd	r24, Y+6	; 0x06
     694:	9f 81       	ldd	r25, Y+7	; 0x07
     696:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     69a:	8c 01       	movw	r16, r24
     69c:	66 e5       	ldi	r22, 0x56	; 86
     69e:	74 e0       	ldi	r23, 0x04	; 4
     6a0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6ac:	6a e0       	ldi	r22, 0x0A	; 10
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6b6:	8c 01       	movw	r16, r24
     6b8:	65 e3       	ldi	r22, 0x35	; 53
     6ba:	74 e0       	ldi	r23, 0x04	; 4
     6bc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6c8:	6a e0       	ldi	r22, 0x0A	; 10
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	9f 81       	ldd	r25, Y+7	; 0x07
     6ce:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6d2:	8c 01       	movw	r16, r24
     6d4:	6e e0       	ldi	r22, 0x0E	; 14
     6d6:	74 e0       	ldi	r23, 0x04	; 4
     6d8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6e4:	6a e0       	ldi	r22, 0x0A	; 10
     6e6:	8e 81       	ldd	r24, Y+6	; 0x06
     6e8:	9f 81       	ldd	r25, Y+7	; 0x07
     6ea:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     6ee:	8c 01       	movw	r16, r24
     6f0:	60 ef       	ldi	r22, 0xF0	; 240
     6f2:	73 e0       	ldi	r23, 0x03	; 3
     6f4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     6f8:	66 e0       	ldi	r22, 0x06	; 6
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     700:	6a e0       	ldi	r22, 0x0A	; 10
     702:	8e 81       	ldd	r24, Y+6	; 0x06
     704:	9f 81       	ldd	r25, Y+7	; 0x07
     706:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     70a:	8c 01       	movw	r16, r24
     70c:	65 ed       	ldi	r22, 0xD5	; 213
     70e:	73 e0       	ldi	r23, 0x03	; 3
     710:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	c8 01       	movw	r24, r16
     718:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     71c:	6a e0       	ldi	r22, 0x0A	; 10
     71e:	8e 81       	ldd	r24, Y+6	; 0x06
     720:	9f 81       	ldd	r25, Y+7	; 0x07
     722:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     726:	ec 01       	movw	r28, r24
     728:	66 ec       	ldi	r22, 0xC6	; 198
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	ce 01       	movw	r24, r28
     734:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	5c 01       	movw	r10, r24
     762:	3b 01       	movw	r6, r22
     764:	4a 01       	movw	r8, r20
     766:	12 2f       	mov	r17, r18
     768:	50 2e       	mov	r5, r16
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	ca 01       	movw	r24, r20
     76e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     772:	a6 14       	cp	r10, r6
     774:	b7 04       	cpc	r11, r7
     776:	08 f0       	brcs	.+2      	; 0x77a <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     778:	7c c0       	rjmp	.+248    	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     77a:	65 01       	movw	r12, r10
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	c8 0e       	add	r12, r24
     780:	d1 1c       	adc	r13, r1
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	75 01       	movw	r14, r10
     786:	b5 01       	movw	r22, r10
     788:	c4 01       	movw	r24, r8
     78a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
     78e:	6a e0       	ldi	r22, 0x0A	; 10
     790:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     794:	60 e3       	ldi	r22, 0x30	; 48
     796:	75 e0       	ldi	r23, 0x05	; 5
     798:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     79c:	11 23       	and	r17, r17
     79e:	09 f4       	brne	.+2      	; 0x7a2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     7a0:	6d c0       	rjmp	.+218    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a2:	00 23       	and	r16, r16
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     7a6:	6a c0       	rjmp	.+212    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7a8:	6a e0       	ldi	r22, 0x0A	; 10
     7aa:	c4 01       	movw	r24, r8
     7ac:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     7b0:	6b e2       	ldi	r22, 0x2B	; 43
     7b2:	75 e0       	ldi	r23, 0x05	; 5
     7b4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     7b8:	61 c0       	rjmp	.+194    	; 0x87c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     7ba:	11 23       	and	r17, r17
     7bc:	71 f0       	breq	.+28     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7be:	01 11       	cpse	r16, r1
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c2:	88 81       	ld	r24, Y
     7c4:	85 15       	cp	r24, r5
     7c6:	49 f0       	breq	.+18     	; 0x7da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     7c8:	6a e0       	ldi	r22, 0x0A	; 10
     7ca:	c4 01       	movw	r24, r8
     7cc:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     7d0:	66 e2       	ldi	r22, 0x26	; 38
     7d2:	75 e0       	ldi	r23, 0x05	; 5
     7d4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	69 91       	ld	r22, Y+
     7dc:	c4 01       	movw	r24, r8
     7de:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
     7e2:	dc 01       	movw	r26, r24
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	02 80       	ldd	r0, Z+2	; 0x02
     7ea:	f3 81       	ldd	r31, Z+3	; 0x03
     7ec:	e0 2d       	mov	r30, r0
     7ee:	60 e2       	ldi	r22, 0x20	; 32
     7f0:	19 95       	eicall
     7f2:	cc 16       	cp	r12, r28
     7f4:	dd 06       	cpc	r13, r29
     7f6:	09 f7       	brne	.-62     	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     7f8:	11 23       	and	r17, r17
     7fa:	89 f0       	breq	.+34     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	c4 01       	movw	r24, r8
     800:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     804:	ec 01       	movw	r28, r24
     806:	60 e2       	ldi	r22, 0x20	; 32
     808:	75 e0       	ldi	r23, 0x05	; 5
     80a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     80e:	e8 81       	ld	r30, Y
     810:	f9 81       	ldd	r31, Y+1	; 0x01
     812:	02 80       	ldd	r0, Z+2	; 0x02
     814:	f3 81       	ldd	r31, Z+3	; 0x03
     816:	e0 2d       	mov	r30, r0
     818:	60 e2       	ldi	r22, 0x20	; 32
     81a:	ce 01       	movw	r24, r28
     81c:	19 95       	eicall
     81e:	f7 01       	movw	r30, r14
     820:	61 91       	ld	r22, Z+
     822:	7f 01       	movw	r14, r30
     824:	80 ee       	ldi	r24, 0xE0	; 224
     826:	86 0f       	add	r24, r22
     828:	8f 35       	cpi	r24, 0x5F	; 95
     82a:	48 f4       	brcc	.+18     	; 0x83e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     82c:	d4 01       	movw	r26, r8
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	f3 81       	ldd	r31, Z+3	; 0x03
     836:	e0 2d       	mov	r30, r0
     838:	c4 01       	movw	r24, r8
     83a:	19 95       	eicall
     83c:	09 c0       	rjmp	.+18     	; 0x850 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     83e:	d4 01       	movw	r26, r8
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	02 80       	ldd	r0, Z+2	; 0x02
     846:	f3 81       	ldd	r31, Z+3	; 0x03
     848:	e0 2d       	mov	r30, r0
     84a:	6e e2       	ldi	r22, 0x2E	; 46
     84c:	c4 01       	movw	r24, r8
     84e:	19 95       	eicall
     850:	ce 14       	cp	r12, r14
     852:	df 04       	cpc	r13, r15
     854:	21 f7       	brne	.-56     	; 0x81e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     856:	b4 e1       	ldi	r27, 0x14	; 20
     858:	ab 0e       	add	r10, r27
     85a:	b1 1c       	adc	r11, r1
     85c:	66 e0       	ldi	r22, 0x06	; 6
     85e:	c4 01       	movw	r24, r8
     860:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     864:	e4 e1       	ldi	r30, 0x14	; 20
     866:	ce 0e       	add	r12, r30
     868:	d1 1c       	adc	r13, r1
     86a:	a6 14       	cp	r10, r6
     86c:	b7 04       	cpc	r11, r7
     86e:	08 f4       	brcc	.+2      	; 0x872 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     870:	89 cf       	rjmp	.-238    	; 0x784 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	c4 01       	movw	r24, r8
     876:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     87a:	02 c0       	rjmp	.+4      	; 0x880 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     87c:	e7 01       	movw	r28, r14
     87e:	9d cf       	rjmp	.-198    	; 0x7ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	08 95       	ret

000008a0 <_ZN10time_stamp10set_to_nowEv>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ec 01       	movw	r28, r24
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
     8ac:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     8b0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     8b4:	8c 83       	std	Y+4, r24	; 0x04
     8b6:	9d 83       	std	Y+5, r25	; 0x05
     8b8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
     8bc:	68 83       	st	Y, r22
     8be:	79 83       	std	Y+1, r23	; 0x01
     8c0:	8a 83       	std	Y+2, r24	; 0x02
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	ce 01       	movw	r24, r28
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <_ZlsR8emstreamR10time_stamp>:
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2f 97       	sbiw	r28, 0x0f	; 15
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	8c 01       	movw	r16, r24
     8f0:	7b 01       	movw	r14, r22
     8f2:	db 01       	movw	r26, r22
     8f4:	6d 91       	ld	r22, X+
     8f6:	7d 91       	ld	r23, X+
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f8 ee       	ldi	r31, 0xE8	; 232
     900:	8f 2e       	mov	r8, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	9f 2e       	mov	r9, r31
     906:	a1 2c       	mov	r10, r1
     908:	b1 2c       	mov	r11, r1
     90a:	f0 2d       	mov	r31, r0
     90c:	a5 01       	movw	r20, r10
     90e:	94 01       	movw	r18, r8
     910:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
     914:	ba 01       	movw	r22, r20
     916:	a9 01       	movw	r20, r18
     918:	c8 01       	movw	r24, r16
     91a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8emstreamlsEm>
     91e:	d8 01       	movw	r26, r16
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	02 80       	ldd	r0, Z+2	; 0x02
     926:	f3 81       	ldd	r31, Z+3	; 0x03
     928:	e0 2d       	mov	r30, r0
     92a:	6e e2       	ldi	r22, 0x2E	; 46
     92c:	c8 01       	movw	r24, r16
     92e:	19 95       	eicall
     930:	f7 01       	movw	r30, r14
     932:	60 81       	ld	r22, Z
     934:	71 81       	ldd	r23, Z+1	; 0x01
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	93 81       	ldd	r25, Z+3	; 0x03
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	60 e4       	ldi	r22, 0x40	; 64
     948:	72 e4       	ldi	r23, 0x42	; 66
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__mulsi3>
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
     95a:	49 01       	movw	r8, r18
     95c:	5a 01       	movw	r10, r20
     95e:	f7 01       	movw	r30, r14
     960:	a4 81       	ldd	r26, Z+4	; 0x04
     962:	b5 81       	ldd	r27, Z+5	; 0x05
     964:	20 e4       	ldi	r18, 0x40	; 64
     966:	32 e4       	ldi	r19, 0x42	; 66
     968:	4f e0       	ldi	r20, 0x0F	; 15
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	0e 94 85 1c 	call	0x390a	; 0x390a <__muluhisi3>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	38 e4       	ldi	r19, 0x48	; 72
     974:	48 ee       	ldi	r20, 0xE8	; 232
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
     97c:	c5 01       	movw	r24, r10
     97e:	b4 01       	movw	r22, r8
     980:	62 0f       	add	r22, r18
     982:	73 1f       	adc	r23, r19
     984:	84 1f       	adc	r24, r20
     986:	95 1f       	adc	r25, r21
     988:	7e 01       	movw	r14, r28
     98a:	f7 e0       	ldi	r31, 0x07	; 7
     98c:	ef 0e       	add	r14, r31
     98e:	f1 1c       	adc	r15, r1
     990:	9e 01       	movw	r18, r28
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	59 01       	movw	r10, r18
     998:	2a e0       	ldi	r18, 0x0A	; 10
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__divmodsi4>
     9a4:	e6 2f       	mov	r30, r22
     9a6:	28 87       	std	Y+8, r18	; 0x08
     9a8:	39 87       	std	Y+9, r19	; 0x09
     9aa:	4a 87       	std	Y+10, r20	; 0x0a
     9ac:	5b 87       	std	Y+11, r21	; 0x0b
     9ae:	68 85       	ldd	r22, Y+8	; 0x08
     9b0:	79 85       	ldd	r23, Y+9	; 0x09
     9b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     9b6:	20 e3       	ldi	r18, 0x30	; 48
     9b8:	2e 0f       	add	r18, r30
     9ba:	d7 01       	movw	r26, r14
     9bc:	2e 93       	st	-X, r18
     9be:	7d 01       	movw	r14, r26
     9c0:	aa 15       	cp	r26, r10
     9c2:	bb 05       	cpc	r27, r11
     9c4:	49 f7       	brne	.-46     	; 0x998 <_ZlsR8emstreamR10time_stamp+0xc8>
     9c6:	1f 82       	std	Y+7, r1	; 0x07
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	c8 01       	movw	r24, r16
     9d0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     9d4:	c8 01       	movw	r24, r16
     9d6:	2f 96       	adiw	r28, 0x0f	; 15
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	08 95       	ret

000009f2 <_ZN14frt_text_queue7getcharEv>:
     9f2:	0f 93       	push	r16
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	a9 01       	movw	r20, r18
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 85       	ldd	r24, Z+8	; 0x08
     a10:	91 85       	ldd	r25, Z+9	; 0x09
     a12:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <xQueueGenericReceive>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	19 f4       	brne	.+6      	; 0xa20 <_ZN14frt_text_queue7getcharEv+0x2e>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <_ZN14frt_text_queue7getcharEv+0x32>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN14frt_text_queue14check_for_charEv>:
     a2e:	fc 01       	movw	r30, r24
     a30:	80 85       	ldd	r24, Z+8	; 0x08
     a32:	91 85       	ldd	r25, Z+9	; 0x09
     a34:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <uxQueueMessagesWaiting>
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	81 11       	cpse	r24, r1
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <_ZN14frt_text_queue14check_for_charEv+0x12>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	89 2f       	mov	r24, r25
     a42:	08 95       	ret

00000a44 <_ZN14frt_text_queue7putcharEc>:
     a44:	0f 93       	push	r16
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	69 83       	std	Y+1, r22	; 0x01
     a52:	fc 01       	movw	r30, r24
     a54:	22 85       	ldd	r18, Z+10	; 0x0a
     a56:	33 85       	ldd	r19, Z+11	; 0x0b
     a58:	44 85       	ldd	r20, Z+12	; 0x0c
     a5a:	55 85       	ldd	r21, Z+13	; 0x0d
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	be 01       	movw	r22, r28
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	80 85       	ldd	r24, Z+8	; 0x08
     a66:	91 85       	ldd	r25, Z+9	; 0x09
     a68:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xQueueGenericSend>
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	81 11       	cpse	r24, r1
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <_ZN14frt_text_queue7putcharEc+0x30>
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	89 2f       	mov	r24, r25
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <_ZN8frt_task12print_statusER8emstream>:
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	8b 01       	movw	r16, r22
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	9b 81       	ldd	r25, Y+3	; 0x03
     aa0:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <pcTaskGetTaskName>
     aa4:	bc 01       	movw	r22, r24
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     aac:	d8 01       	movw	r26, r16
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	02 80       	ldd	r0, Z+2	; 0x02
     ab4:	f3 81       	ldd	r31, Z+3	; 0x03
     ab6:	e0 2d       	mov	r30, r0
     ab8:	69 e0       	ldi	r22, 0x09	; 9
     aba:	c8 01       	movw	r24, r16
     abc:	19 95       	eicall
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	9b 81       	ldd	r25, Y+3	; 0x03
     ac2:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <pcTaskGetTaskName>
     ac6:	fc 01       	movw	r30, r24
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <_ZN8frt_task12print_statusER8emstream+0x48>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	e8 1b       	sub	r30, r24
     ad2:	f9 0b       	sbc	r31, r25
     ad4:	38 97       	sbiw	r30, 0x08	; 8
     ad6:	48 f4       	brcc	.+18     	; 0xaea <_ZN8frt_task12print_statusER8emstream+0x6a>
     ad8:	d8 01       	movw	r26, r16
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	02 80       	ldd	r0, Z+2	; 0x02
     ae0:	f3 81       	ldd	r31, Z+3	; 0x03
     ae2:	e0 2d       	mov	r30, r0
     ae4:	69 e0       	ldi	r22, 0x09	; 9
     ae6:	c8 01       	movw	r24, r16
     ae8:	19 95       	eicall
     aea:	ce 84       	ldd	r12, Y+14	; 0x0e
     aec:	df 84       	ldd	r13, Y+15	; 0x0f
     aee:	e8 88       	ldd	r14, Y+16	; 0x10
     af0:	f9 88       	ldd	r15, Y+17	; 0x11
     af2:	a8 84       	ldd	r10, Y+8	; 0x08
     af4:	b9 84       	ldd	r11, Y+9	; 0x09
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <uxTaskGetStackHighWaterMark>
     afe:	98 2e       	mov	r9, r24
     b00:	8c 84       	ldd	r8, Y+12	; 0x0c
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <uxTaskPriorityGet>
     b0a:	68 2f       	mov	r22, r24
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
     b12:	6a e0       	ldi	r22, 0x0A	; 10
     b14:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     b18:	ec 01       	movw	r28, r24
     b1a:	6e e1       	ldi	r22, 0x1E	; 30
     b1c:	75 e0       	ldi	r23, 0x05	; 5
     b1e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     b22:	68 2d       	mov	r22, r8
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
     b2a:	6a e0       	ldi	r22, 0x0A	; 10
     b2c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     b30:	ec 01       	movw	r28, r24
     b32:	6c e1       	ldi	r22, 0x1C	; 28
     b34:	75 e0       	ldi	r23, 0x05	; 5
     b36:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     b3a:	69 2d       	mov	r22, r9
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
     b42:	6a e0       	ldi	r22, 0x0A	; 10
     b44:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     b48:	ec 01       	movw	r28, r24
     b4a:	6a e1       	ldi	r22, 0x1A	; 26
     b4c:	75 e0       	ldi	r23, 0x05	; 5
     b4e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     b52:	b5 01       	movw	r22, r10
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
     b5a:	6a e0       	ldi	r22, 0x0A	; 10
     b5c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     b60:	ec 01       	movw	r28, r24
     b62:	68 e1       	ldi	r22, 0x18	; 24
     b64:	75 e0       	ldi	r23, 0x05	; 5
     b66:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     b6a:	6a e0       	ldi	r22, 0x0A	; 10
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     b72:	ec 01       	movw	r28, r24
     b74:	66 e1       	ldi	r22, 0x16	; 22
     b76:	75 e0       	ldi	r23, 0x05	; 5
     b78:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     b7c:	b7 01       	movw	r22, r14
     b7e:	a6 01       	movw	r20, r12
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8emstreamlsEm>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	08 95       	ret

00000ba0 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	7b 01       	movw	r14, r22
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	9b 81       	ldd	r25, Y+3	; 0x03
     bb8:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <pcTaskGetTaskName>
     bbc:	6c 01       	movw	r12, r24
     bbe:	6a e0       	ldi	r22, 0x0A	; 10
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     bc6:	8c 01       	movw	r16, r24
     bc8:	61 e1       	ldi	r22, 0x11	; 17
     bca:	75 e0       	ldi	r23, 0x05	; 5
     bcc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     bd0:	6a e0       	ldi	r22, 0x0A	; 10
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     bd8:	8c 01       	movw	r16, r24
     bda:	6a e0       	ldi	r22, 0x0A	; 10
     bdc:	75 e0       	ldi	r23, 0x05	; 5
     bde:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     be2:	b6 01       	movw	r22, r12
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     bea:	6a e0       	ldi	r22, 0x0A	; 10
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     bf2:	8c 01       	movw	r16, r24
     bf4:	64 e0       	ldi	r22, 0x04	; 4
     bf6:	75 e0       	ldi	r23, 0x05	; 5
     bf8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     bfc:	66 e0       	ldi	r22, 0x06	; 6
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     c04:	8a 85       	ldd	r24, Y+10	; 0x0a
     c06:	9b 85       	ldd	r25, Y+11	; 0x0b
     c08:	e8 85       	ldd	r30, Y+8	; 0x08
     c0a:	f9 85       	ldd	r31, Y+9	; 0x09
     c0c:	01 e1       	ldi	r16, 0x11	; 17
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	a7 01       	movw	r20, r14
     c12:	bc 01       	movw	r22, r24
     c14:	8e 1b       	sub	r24, r30
     c16:	9f 0b       	sbc	r25, r31
     c18:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	9d 81       	ldd	r25, Y+5	; 0x05
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	19 f0       	breq	.+6      	; 0xc2a <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	08 95       	ret

00000c3c <_call_static_run_method>:
     c3c:	ec 01       	movw	r28, r24
     c3e:	e8 81       	ld	r30, Y
     c40:	f9 81       	ldd	r31, Y+1	; 0x01
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	19 95       	eicall
     c4a:	1a 82       	std	Y+2, r1	; 0x02
     c4c:	1b 82       	std	Y+3, r1	; 0x03
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	7f ef       	ldi	r23, 0xFF	; 255
     c52:	cb 01       	movw	r24, r22
     c54:	0e 94 6e 19 	call	0x32dc	; 0x32dc <vTaskDelay>
     c58:	fa cf       	rjmp	.-12     	; 0xc4e <_call_static_run_method+0x12>

00000c5a <_ZN9task_user3runEv>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2c 97       	sbiw	r28, 0x0c	; 12
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	7c 01       	movw	r14, r24
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	1b 82       	std	Y+3, r1	; 0x03
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	1e 82       	std	Y+6, r1	; 0x06
     c76:	6a e0       	ldi	r22, 0x0A	; 10
     c78:	dc 01       	movw	r26, r24
     c7a:	16 96       	adiw	r26, 0x06	; 6
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     c86:	6c 01       	movw	r12, r24
     c88:	68 ea       	ldi	r22, 0xA8	; 168
     c8a:	73 e0       	ldi	r23, 0x03	; 3
     c8c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     c90:	66 e0       	ldi	r22, 0x06	; 6
     c92:	c6 01       	movw	r24, r12
     c94:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     c98:	11 e0       	ldi	r17, 0x01	; 1
     c9a:	81 2c       	mov	r8, r1
     c9c:	68 94       	set
     c9e:	99 24       	eor	r9, r9
     ca0:	93 f8       	bld	r9, 3
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f2 ef       	ldi	r31, 0xF2	; 242
     ca6:	af 2e       	mov	r10, r31
     ca8:	f0 e2       	ldi	r31, 0x20	; 32
     caa:	bf 2e       	mov	r11, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	f7 01       	movw	r30, r14
     cb0:	84 85       	ldd	r24, Z+12	; 0x0c
     cb2:	88 23       	and	r24, r24
     cb4:	21 f0       	breq	.+8      	; 0xcbe <_ZN9task_user3runEv+0x64>
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_ZN9task_user3runEv+0x62>
     cba:	60 c0       	rjmp	.+192    	; 0xd7c <_ZN9task_user3runEv+0x122>
     cbc:	06 c2       	rjmp	.+1036   	; 0x10ca <_ZN9task_user3runEv+0x470>
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	dc 01       	movw	r26, r24
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	04 80       	ldd	r0, Z+4	; 0x04
     cca:	f5 81       	ldd	r31, Z+5	; 0x05
     ccc:	e0 2d       	mov	r30, r0
     cce:	19 95       	eicall
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <_ZN9task_user3runEv+0x7c>
     cd4:	37 c0       	rjmp	.+110    	; 0xd44 <_ZN9task_user3runEv+0xea>
     cd6:	f7 01       	movw	r30, r14
     cd8:	86 81       	ldd	r24, Z+6	; 0x06
     cda:	97 81       	ldd	r25, Z+7	; 0x07
     cdc:	dc 01       	movw	r26, r24
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	06 80       	ldd	r0, Z+6	; 0x06
     ce4:	f7 81       	ldd	r31, Z+7	; 0x07
     ce6:	e0 2d       	mov	r30, r0
     ce8:	19 95       	eicall
     cea:	99 27       	eor	r25, r25
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	f9 f0       	breq	.+62     	; 0xd30 <_ZN9task_user3runEv+0xd6>
     cf2:	03 97       	sbiw	r24, 0x03	; 3
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <_ZN9task_user3runEv+0x9e>
     cf6:	05 c2       	rjmp	.+1034   	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     cf8:	6a e0       	ldi	r22, 0x0A	; 10
     cfa:	f7 01       	movw	r30, r14
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	97 81       	ldd	r25, Z+7	; 0x07
     d00:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     d04:	7c 01       	movw	r14, r24
     d06:	6a e9       	ldi	r22, 0x9A	; 154
     d08:	73 e0       	ldi	r23, 0x03	; 3
     d0a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     d0e:	66 e0       	ldi	r22, 0x06	; 6
     d10:	c7 01       	movw	r24, r14
     d12:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	88 ed       	ldi	r24, 0xD8	; 216
     d1a:	08 b6       	in	r0, 0x38	; 56
     d1c:	18 be       	out	0x38, r1	; 56
     d1e:	84 bf       	out	0x34, r24	; 52
     d20:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d24:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d28:	81 fd       	sbrc	r24, 1
     d2a:	fc cf       	rjmp	.-8      	; 0xd24 <_ZN9task_user3runEv+0xca>
     d2c:	08 be       	out	0x38, r0	; 56
     d2e:	ff cf       	rjmp	.-2      	; 0xd2e <_ZN9task_user3runEv+0xd4>
     d30:	c7 01       	movw	r24, r14
     d32:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
     d36:	d7 01       	movw	r26, r14
     d38:	1c 96       	adiw	r26, 0x0c	; 12
     d3a:	1c 93       	st	X, r17
     d3c:	1c 97       	sbiw	r26, 0x0c	; 12
     d3e:	1d 96       	adiw	r26, 0x0d	; 13
     d40:	1c 93       	st	X, r17
     d42:	df c1       	rjmp	.+958    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	90 e2       	ldi	r25, 0x20	; 32
     d48:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN14frt_text_queue14check_for_charEv>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_ZN9task_user3runEv+0xf8>
     d50:	d8 c1       	rjmp	.+944    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d52:	d7 01       	movw	r26, r14
     d54:	16 96       	adiw	r26, 0x06	; 6
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	17 97       	sbiw	r26, 0x07	; 7
     d5c:	01 90       	ld	r0, Z+
     d5e:	f0 81       	ld	r31, Z
     d60:	e0 2d       	mov	r30, r0
     d62:	c2 80       	ldd	r12, Z+2	; 0x02
     d64:	d3 80       	ldd	r13, Z+3	; 0x03
     d66:	84 ef       	ldi	r24, 0xF4	; 244
     d68:	90 e2       	ldi	r25, 0x20	; 32
     d6a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN14frt_text_queue7getcharEv>
     d6e:	68 2f       	mov	r22, r24
     d70:	f7 01       	movw	r30, r14
     d72:	86 81       	ldd	r24, Z+6	; 0x06
     d74:	97 81       	ldd	r25, Z+7	; 0x07
     d76:	f6 01       	movw	r30, r12
     d78:	19 95       	eicall
     d7a:	c3 c1       	rjmp	.+902    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d7c:	86 81       	ldd	r24, Z+6	; 0x06
     d7e:	97 81       	ldd	r25, Z+7	; 0x07
     d80:	dc 01       	movw	r26, r24
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	04 80       	ldd	r0, Z+4	; 0x04
     d88:	f5 81       	ldd	r31, Z+5	; 0x05
     d8a:	e0 2d       	mov	r30, r0
     d8c:	19 95       	eicall
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <_ZN9task_user3runEv+0x13a>
     d92:	b7 c1       	rjmp	.+878    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     d94:	f7 01       	movw	r30, r14
     d96:	86 81       	ldd	r24, Z+6	; 0x06
     d98:	97 81       	ldd	r25, Z+7	; 0x07
     d9a:	dc 01       	movw	r26, r24
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	06 80       	ldd	r0, Z+6	; 0x06
     da2:	f7 81       	ldd	r31, Z+7	; 0x07
     da4:	e0 2d       	mov	r30, r0
     da6:	19 95       	eicall
     da8:	9c 01       	movw	r18, r24
     daa:	33 27       	eor	r19, r19
     dac:	28 36       	cpi	r18, 0x68	; 104
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_ZN9task_user3runEv+0x15a>
     db2:	54 c1       	rjmp	.+680    	; 0x105c <_ZN9task_user3runEv+0x402>
     db4:	4c f4       	brge	.+18     	; 0xdc8 <_ZN9task_user3runEv+0x16e>
     db6:	2b 31       	cpi	r18, 0x1B	; 27
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <_ZN9task_user3runEv+0x164>
     dbc:	53 c1       	rjmp	.+678    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dbe:	25 36       	cpi	r18, 0x65	; 101
     dc0:	31 05       	cpc	r19, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <_ZN9task_user3runEv+0x16c>
     dc4:	4f c1       	rjmp	.+670    	; 0x1064 <_ZN9task_user3runEv+0x40a>
     dc6:	63 c1       	rjmp	.+710    	; 0x108e <_ZN9task_user3runEv+0x434>
     dc8:	23 37       	cpi	r18, 0x73	; 115
     dca:	31 05       	cpc	r19, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_ZN9task_user3runEv+0x176>
     dce:	0c c1       	rjmp	.+536    	; 0xfe8 <_ZN9task_user3runEv+0x38e>
     dd0:	26 37       	cpi	r18, 0x76	; 118
     dd2:	31 05       	cpc	r19, r1
     dd4:	91 f0       	breq	.+36     	; 0xdfa <_ZN9task_user3runEv+0x1a0>
     dd6:	2e 36       	cpi	r18, 0x6E	; 110
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <_ZN9task_user3runEv+0x184>
     ddc:	58 c1       	rjmp	.+688    	; 0x108e <_ZN9task_user3runEv+0x434>
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     de6:	bc 01       	movw	r22, r24
     de8:	f7 01       	movw	r30, r14
     dea:	86 81       	ldd	r24, Z+6	; 0x06
     dec:	97 81       	ldd	r25, Z+7	; 0x07
     dee:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     df2:	66 e0       	ldi	r22, 0x06	; 6
     df4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     df8:	84 c1       	rjmp	.+776    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     dfa:	1f 82       	std	Y+7, r1	; 0x07
     dfc:	18 86       	std	Y+8, r1	; 0x08
     dfe:	19 86       	std	Y+9, r1	; 0x09
     e00:	1a 86       	std	Y+10, r1	; 0x0a
     e02:	1b 86       	std	Y+11, r1	; 0x0b
     e04:	1c 86       	std	Y+12, r1	; 0x0c
     e06:	0e 94 16 11 	call	0x222c	; 0x222c <xPortGetFreeHeapSize>
     e0a:	3c 01       	movw	r6, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	07 96       	adiw	r24, 0x07	; 7
     e10:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN10time_stamp10set_to_nowEv>
     e14:	2c 01       	movw	r4, r24
     e16:	66 e0       	ldi	r22, 0x06	; 6
     e18:	d7 01       	movw	r26, r14
     e1a:	16 96       	adiw	r26, 0x06	; 6
     e1c:	8d 91       	ld	r24, X+
     e1e:	9c 91       	ld	r25, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e26:	6a e0       	ldi	r22, 0x0A	; 10
     e28:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e2c:	6c 01       	movw	r12, r24
     e2e:	60 e3       	ldi	r22, 0x30	; 48
     e30:	73 e0       	ldi	r23, 0x03	; 3
     e32:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     e36:	6a e0       	ldi	r22, 0x0A	; 10
     e38:	c6 01       	movw	r24, r12
     e3a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e3e:	6c 01       	movw	r12, r24
     e40:	64 e2       	ldi	r22, 0x24	; 36
     e42:	73 e0       	ldi	r23, 0x03	; 3
     e44:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	c6 01       	movw	r24, r12
     e4c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e50:	6a e0       	ldi	r22, 0x0A	; 10
     e52:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e56:	6c 01       	movw	r12, r24
     e58:	6d e1       	ldi	r22, 0x1D	; 29
     e5a:	73 e0       	ldi	r23, 0x03	; 3
     e5c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     e60:	b2 01       	movw	r22, r4
     e62:	c6 01       	movw	r24, r12
     e64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZlsR8emstreamR10time_stamp>
     e68:	6a e0       	ldi	r22, 0x0A	; 10
     e6a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e6e:	6c 01       	movw	r12, r24
     e70:	6f e0       	ldi	r22, 0x0F	; 15
     e72:	73 e0       	ldi	r23, 0x03	; 3
     e74:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     e78:	b3 01       	movw	r22, r6
     e7a:	c6 01       	movw	r24, r12
     e7c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     e86:	6c 01       	movw	r12, r24
     e88:	6d e0       	ldi	r22, 0x0D	; 13
     e8a:	73 e0       	ldi	r23, 0x03	; 3
     e8c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     e90:	4f ef       	ldi	r20, 0xFF	; 255
     e92:	5f e0       	ldi	r21, 0x0F	; 15
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	c6 01       	movw	r24, r12
     e9a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8emstreamlsEm>
     e9e:	f4 01       	movw	r30, r8
     ea0:	60 a4       	ldd	r6, Z+40	; 0x28
     ea2:	71 a4       	ldd	r7, Z+41	; 0x29
     ea4:	6a e0       	ldi	r22, 0x0A	; 10
     ea6:	d7 01       	movw	r26, r14
     ea8:	16 96       	adiw	r26, 0x06	; 6
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	17 97       	sbiw	r26, 0x07	; 7
     eb0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     eb4:	6c 01       	movw	r12, r24
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	73 e0       	ldi	r23, 0x03	; 3
     eba:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     ebe:	b3 01       	movw	r22, r6
     ec0:	c6 01       	movw	r24, r12
     ec2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     ecc:	66 e0       	ldi	r22, 0x06	; 6
     ece:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     ed2:	f7 01       	movw	r30, r14
     ed4:	c6 80       	ldd	r12, Z+6	; 0x06
     ed6:	d7 80       	ldd	r13, Z+7	; 0x07
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	c6 01       	movw	r24, r12
     edc:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     ee0:	3c 01       	movw	r6, r24
     ee2:	67 ef       	ldi	r22, 0xF7	; 247
     ee4:	72 e0       	ldi	r23, 0x02	; 2
     ee6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     eea:	6a e0       	ldi	r22, 0x0A	; 10
     eec:	c3 01       	movw	r24, r6
     eee:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     ef2:	3c 01       	movw	r6, r24
     ef4:	60 ef       	ldi	r22, 0xF0	; 240
     ef6:	72 e0       	ldi	r23, 0x02	; 2
     ef8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     efc:	66 e0       	ldi	r22, 0x06	; 6
     efe:	c3 01       	movw	r24, r6
     f00:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f04:	6a e0       	ldi	r22, 0x0A	; 10
     f06:	c6 01       	movw	r24, r12
     f08:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f0c:	3c 01       	movw	r6, r24
     f0e:	6f ed       	ldi	r22, 0xDF	; 223
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f16:	6a e0       	ldi	r22, 0x0A	; 10
     f18:	c3 01       	movw	r24, r6
     f1a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f1e:	3c 01       	movw	r6, r24
     f20:	63 ed       	ldi	r22, 0xD3	; 211
     f22:	72 e0       	ldi	r23, 0x02	; 2
     f24:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f28:	6a e0       	ldi	r22, 0x0A	; 10
     f2a:	c3 01       	movw	r24, r6
     f2c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f30:	3c 01       	movw	r6, r24
     f32:	6d ec       	ldi	r22, 0xCD	; 205
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f3a:	66 e0       	ldi	r22, 0x06	; 6
     f3c:	c3 01       	movw	r24, r6
     f3e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f42:	6a e0       	ldi	r22, 0x0A	; 10
     f44:	c6 01       	movw	r24, r12
     f46:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f4a:	3c 01       	movw	r6, r24
     f4c:	6c eb       	ldi	r22, 0xBC	; 188
     f4e:	72 e0       	ldi	r23, 0x02	; 2
     f50:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f54:	6a e0       	ldi	r22, 0x0A	; 10
     f56:	c3 01       	movw	r24, r6
     f58:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f5c:	3c 01       	movw	r6, r24
     f5e:	60 eb       	ldi	r22, 0xB0	; 176
     f60:	72 e0       	ldi	r23, 0x02	; 2
     f62:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	c3 01       	movw	r24, r6
     f6a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f6e:	3c 01       	movw	r6, r24
     f70:	6a ea       	ldi	r22, 0xAA	; 170
     f72:	72 e0       	ldi	r23, 0x02	; 2
     f74:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	c3 01       	movw	r24, r6
     f7c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     f80:	d5 01       	movw	r26, r10
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	19 f0       	breq	.+6      	; 0xf90 <_ZN9task_user3runEv+0x336>
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN8frt_task20print_status_in_listEP8emstream>
     f90:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <xTaskGetIdleTaskHandle>
     f94:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <uxTaskGetStackHighWaterMark>
     f98:	08 2f       	mov	r16, r24
     f9a:	6a e0       	ldi	r22, 0x0A	; 10
     f9c:	c6 01       	movw	r24, r12
     f9e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     fa2:	6c 01       	movw	r12, r24
     fa4:	6f e9       	ldi	r22, 0x9F	; 159
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     fac:	60 2f       	mov	r22, r16
     fae:	c6 01       	movw	r24, r12
     fb0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
     fb4:	6a e0       	ldi	r22, 0x0A	; 10
     fb6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     fba:	6c 01       	movw	r12, r24
     fbc:	6d e9       	ldi	r22, 0x9D	; 157
     fbe:	72 e0       	ldi	r23, 0x02	; 2
     fc0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     fc4:	64 e6       	ldi	r22, 0x64	; 100
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	c6 01       	movw	r24, r12
     fca:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     fd4:	6c 01       	movw	r12, r24
     fd6:	6a e9       	ldi	r22, 0x9A	; 154
     fd8:	72 e0       	ldi	r23, 0x02	; 2
     fda:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
     fde:	66 e0       	ldi	r22, 0x06	; 6
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
     fe6:	8d c0       	rjmp	.+282    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
     fe8:	f7 01       	movw	r30, r14
     fea:	c6 80       	ldd	r12, Z+6	; 0x06
     fec:	d7 80       	ldd	r13, Z+7	; 0x07
     fee:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <last_created_task_pointer>
     ff2:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <last_created_task_pointer+0x1>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	19 f0       	breq	.+6      	; 0x1000 <_ZN9task_user3runEv+0x3a6>
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN8frt_task19print_stack_in_listEP8emstream>
    1000:	6a e0       	ldi	r22, 0x0A	; 10
    1002:	c6 01       	movw	r24, r12
    1004:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1008:	3c 01       	movw	r6, r24
    100a:	60 e6       	ldi	r22, 0x60	; 96
    100c:	73 e0       	ldi	r23, 0x03	; 3
    100e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1012:	6a e0       	ldi	r22, 0x0A	; 10
    1014:	c3 01       	movw	r24, r6
    1016:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    101a:	3c 01       	movw	r6, r24
    101c:	65 e5       	ldi	r22, 0x55	; 85
    101e:	73 e0       	ldi	r23, 0x03	; 3
    1020:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1024:	6a e0       	ldi	r22, 0x0A	; 10
    1026:	c3 01       	movw	r24, r6
    1028:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    102c:	3c 01       	movw	r6, r24
    102e:	6f e4       	ldi	r22, 0x4F	; 79
    1030:	73 e0       	ldi	r23, 0x03	; 3
    1032:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1036:	66 e0       	ldi	r22, 0x06	; 6
    1038:	c3 01       	movw	r24, r6
    103a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    103e:	80 91 8c 31 	lds	r24, 0x318C	; 0x80318c <portStackTopForTask>
    1042:	90 91 8d 31 	lds	r25, 0x318D	; 0x80318d <portStackTopForTask+0x1>
    1046:	bc 01       	movw	r22, r24
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	01 e1       	ldi	r16, 0x11	; 17
    104e:	21 2f       	mov	r18, r17
    1050:	a6 01       	movw	r20, r12
    1052:	83 56       	subi	r24, 0x63	; 99
    1054:	91 09       	sbc	r25, r1
    1056:	0e 94 a1 03 	call	0x742	; 0x742 <_Z15hex_dump_memoryPhS_P8emstreambh>
    105a:	53 c0       	rjmp	.+166    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    105c:	c7 01       	movw	r24, r14
    105e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9task_user18print_help_messageEv>
    1062:	4f c0       	rjmp	.+158    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    1064:	6a e0       	ldi	r22, 0x0A	; 10
    1066:	d7 01       	movw	r26, r14
    1068:	16 96       	adiw	r26, 0x06	; 6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	17 97       	sbiw	r26, 0x07	; 7
    1070:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1074:	6c 01       	movw	r12, r24
    1076:	68 e8       	ldi	r22, 0x88	; 136
    1078:	73 e0       	ldi	r23, 0x03	; 3
    107a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    107e:	66 e0       	ldi	r22, 0x06	; 6
    1080:	c6 01       	movw	r24, r12
    1082:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1086:	f7 01       	movw	r30, r14
    1088:	14 86       	std	Z+12, r1	; 0x0c
    108a:	15 86       	std	Z+13, r1	; 0x0d
    108c:	3a c0       	rjmp	.+116    	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    108e:	f7 01       	movw	r30, r14
    1090:	a6 81       	ldd	r26, Z+6	; 0x06
    1092:	b7 81       	ldd	r27, Z+7	; 0x07
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	02 80       	ldd	r0, Z+2	; 0x02
    109c:	f3 81       	ldd	r31, Z+3	; 0x03
    109e:	e0 2d       	mov	r30, r0
    10a0:	68 2f       	mov	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	19 95       	eicall
    10a6:	6a e0       	ldi	r22, 0x0A	; 10
    10a8:	d7 01       	movw	r26, r14
    10aa:	16 96       	adiw	r26, 0x06	; 6
    10ac:	8d 91       	ld	r24, X+
    10ae:	9c 91       	ld	r25, X
    10b0:	17 97       	sbiw	r26, 0x07	; 7
    10b2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    10b6:	6c 01       	movw	r12, r24
    10b8:	62 e8       	ldi	r22, 0x82	; 130
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    10c0:	66 e0       	ldi	r22, 0x06	; 6
    10c2:	c6 01       	movw	r24, r12
    10c4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    10c8:	1c c0       	rjmp	.+56     	; 0x1102 <_ZN9task_user3runEv+0x4a8>
    10ca:	6a e0       	ldi	r22, 0x0A	; 10
    10cc:	f7 01       	movw	r30, r14
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    10d6:	7c 01       	movw	r14, r24
    10d8:	65 e6       	ldi	r22, 0x65	; 101
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	c7 01       	movw	r24, r14
    10e4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	88 ed       	ldi	r24, 0xD8	; 216
    10ec:	08 b6       	in	r0, 0x38	; 56
    10ee:	18 be       	out	0x38, r1	; 56
    10f0:	84 bf       	out	0x34, r24	; 52
    10f2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10f6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    10fa:	81 fd       	sbrc	r24, 1
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <_ZN9task_user3runEv+0x49c>
    10fe:	08 be       	out	0x38, r0	; 56
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <_ZN9task_user3runEv+0x4a6>
    1102:	f7 01       	movw	r30, r14
    1104:	86 85       	ldd	r24, Z+14	; 0x0e
    1106:	97 85       	ldd	r25, Z+15	; 0x0f
    1108:	a0 89       	ldd	r26, Z+16	; 0x10
    110a:	b1 89       	ldd	r27, Z+17	; 0x11
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	a1 1d       	adc	r26, r1
    1110:	b1 1d       	adc	r27, r1
    1112:	86 87       	std	Z+14, r24	; 0x0e
    1114:	97 87       	std	Z+15, r25	; 0x0f
    1116:	a0 8b       	std	Z+16, r26	; 0x10
    1118:	b1 8b       	std	Z+17, r27	; 0x11
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 6e 19 	call	0x32dc	; 0x32dc <vTaskDelay>
    1126:	c3 cd       	rjmp	.-1146   	; 0xcae <_ZN9task_user3runEv+0x54>

00001128 <_ZN22task_system_controller3runEv>:
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <_ZN22task_system_controller3runEv+0x6>
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8c 01       	movw	r16, r24
    1136:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	f8 01       	movw	r30, r16
    1144:	86 85       	ldd	r24, Z+14	; 0x0e
    1146:	97 85       	ldd	r25, Z+15	; 0x0f
    1148:	a0 89       	ldd	r26, Z+16	; 0x10
    114a:	b1 89       	ldd	r27, Z+17	; 0x11
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	86 87       	std	Z+14, r24	; 0x0e
    1154:	97 87       	std	Z+15, r25	; 0x0f
    1156:	a0 8b       	std	Z+16, r26	; 0x10
    1158:	b1 8b       	std	Z+17, r27	; 0x11
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 01 19 	call	0x3202	; 0x3202 <vTaskDelayUntil>
    116a:	eb cf       	rjmp	.-42     	; 0x1142 <_ZN22task_system_controller3runEv+0x1a>

0000116c <_ZN21task_pendulum_encoder3runEv>:
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <_ZN21task_pendulum_encoder3runEv+0x6>
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8c 01       	movw	r16, r24
    117a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	7a 83       	std	Y+2, r23	; 0x02
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	e0 e8       	ldi	r30, 0x80	; 128
    1188:	f6 e0       	ldi	r31, 0x06	; 6
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	82 83       	std	Z+2, r24	; 0x02
    118e:	80 8b       	std	Z+16, r24	; 0x10
    1190:	81 8b       	std	Z+17, r24	; 0x11
    1192:	e0 e8       	ldi	r30, 0x80	; 128
    1194:	f1 e0       	ldi	r31, 0x01	; 1
    1196:	80 e7       	ldi	r24, 0x70	; 112
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	89 e0       	ldi	r24, 0x09	; 9
    119c:	82 87       	std	Z+10, r24	; 0x0a
    119e:	e0 e4       	ldi	r30, 0x40	; 64
    11a0:	f8 e0       	ldi	r31, 0x08	; 8
    11a2:	8a e6       	ldi	r24, 0x6A	; 106
    11a4:	83 83       	std	Z+3, r24	; 0x03
    11a6:	8d ec       	ldi	r24, 0xCD	; 205
    11a8:	97 e0       	ldi	r25, 0x07	; 7
    11aa:	86 a3       	std	Z+38, r24	; 0x26
    11ac:	97 a3       	std	Z+39, r25	; 0x27
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
    11b2:	68 94       	set
    11b4:	ee 24       	eor	r14, r14
    11b6:	e6 f8       	bld	r14, 6
    11b8:	ff 24       	eor	r15, r15
    11ba:	f3 f8       	bld	r15, 3
    11bc:	f7 01       	movw	r30, r14
    11be:	80 a1       	ldd	r24, Z+32	; 0x20
    11c0:	91 a1       	ldd	r25, Z+33	; 0x21
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	0f 92       	push	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	f8 01       	movw	r30, r16
    11ce:	86 85       	ldd	r24, Z+14	; 0x0e
    11d0:	97 85       	ldd	r25, Z+15	; 0x0f
    11d2:	a0 89       	ldd	r26, Z+16	; 0x10
    11d4:	b1 89       	ldd	r27, Z+17	; 0x11
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
    11dc:	86 87       	std	Z+14, r24	; 0x0e
    11de:	97 87       	std	Z+15, r25	; 0x0f
    11e0:	a0 8b       	std	Z+16, r26	; 0x10
    11e2:	b1 8b       	std	Z+17, r27	; 0x11
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	0e 94 01 19 	call	0x3202	; 0x3202 <vTaskDelayUntil>
    11f4:	e3 cf       	rjmp	.-58     	; 0x11bc <_ZN21task_pendulum_encoder3runEv+0x50>

000011f6 <_ZN18task_motor_command3runEv>:
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <_ZN18task_motor_command3runEv+0x6>
    11fc:	1f 92       	push	r1
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	8c 01       	movw	r16, r24
    1204:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
    1208:	69 83       	std	Y+1, r22	; 0x01
    120a:	7a 83       	std	Y+2, r23	; 0x02
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	f8 01       	movw	r30, r16
    1212:	86 85       	ldd	r24, Z+14	; 0x0e
    1214:	97 85       	ldd	r25, Z+15	; 0x0f
    1216:	a0 89       	ldd	r26, Z+16	; 0x10
    1218:	b1 89       	ldd	r27, Z+17	; 0x11
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	a1 1d       	adc	r26, r1
    121e:	b1 1d       	adc	r27, r1
    1220:	86 87       	std	Z+14, r24	; 0x0e
    1222:	97 87       	std	Z+15, r25	; 0x0f
    1224:	a0 8b       	std	Z+16, r26	; 0x10
    1226:	b1 8b       	std	Z+17, r27	; 0x11
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	0e 94 01 19 	call	0x3202	; 0x3202 <vTaskDelayUntil>
    1238:	eb cf       	rjmp	.-42     	; 0x1210 <_ZN18task_motor_command3runEv+0x1a>

0000123a <_ZN17task_limit_switch3runEv>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <_ZN17task_limit_switch3runEv+0x6>
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	8c 01       	movw	r16, r24
    1248:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
    124c:	69 83       	std	Y+1, r22	; 0x01
    124e:	7a 83       	std	Y+2, r23	; 0x02
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	e0 e6       	ldi	r30, 0x60	; 96
    1256:	f6 e0       	ldi	r31, 0x06	; 6
    1258:	90 81       	ld	r25, Z
    125a:	d8 01       	movw	r26, r16
    125c:	52 96       	adiw	r26, 0x12	; 18
    125e:	8c 91       	ld	r24, X
    1260:	52 97       	sbiw	r26, 0x12	; 18
    1262:	89 2b       	or	r24, r25
    1264:	80 83       	st	Z, r24
    1266:	94 81       	ldd	r25, Z+4	; 0x04
    1268:	52 96       	adiw	r26, 0x12	; 18
    126a:	8c 91       	ld	r24, X
    126c:	52 97       	sbiw	r26, 0x12	; 18
    126e:	89 2b       	or	r24, r25
    1270:	84 83       	std	Z+4, r24	; 0x04
    1272:	52 96       	adiw	r26, 0x12	; 18
    1274:	8c 91       	ld	r24, X
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	21 f4       	brne	.+8      	; 0x1282 <_ZN17task_limit_switch3runEv+0x48>
    127a:	88 e1       	ldi	r24, 0x18	; 24
    127c:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    1280:	05 c0       	rjmp	.+10     	; 0x128c <_ZN17task_limit_switch3runEv+0x52>
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	19 f4       	brne	.+6      	; 0x128c <_ZN17task_limit_switch3runEv+0x52>
    1286:	88 e1       	ldi	r24, 0x18	; 24
    1288:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    128c:	0f 2e       	mov	r0, r31
    128e:	f8 e6       	ldi	r31, 0x68	; 104
    1290:	ef 2e       	mov	r14, r31
    1292:	f6 e0       	ldi	r31, 0x06	; 6
    1294:	ff 2e       	mov	r15, r31
    1296:	f0 2d       	mov	r31, r0
    1298:	f7 01       	movw	r30, r14
    129a:	80 81       	ld	r24, Z
    129c:	80 fd       	sbrc	r24, 0
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <_ZN17task_limit_switch3runEv+0x72>
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	0f 92       	push	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <_ZN17task_limit_switch3runEv+0x7c>
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	0f 92       	push	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	d7 01       	movw	r26, r14
    12b8:	8c 91       	ld	r24, X
    12ba:	82 fd       	sbrc	r24, 2
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <_ZN17task_limit_switch3runEv+0x90>
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	0f 92       	push	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <_ZN17task_limit_switch3runEv+0x9a>
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	0f 92       	push	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	f8 01       	movw	r30, r16
    12d6:	86 85       	ldd	r24, Z+14	; 0x0e
    12d8:	97 85       	ldd	r25, Z+15	; 0x0f
    12da:	a0 89       	ldd	r26, Z+16	; 0x10
    12dc:	b1 89       	ldd	r27, Z+17	; 0x11
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	a1 1d       	adc	r26, r1
    12e2:	b1 1d       	adc	r27, r1
    12e4:	86 87       	std	Z+14, r24	; 0x0e
    12e6:	97 87       	std	Z+15, r25	; 0x0f
    12e8:	a0 8b       	std	Z+16, r26	; 0x10
    12ea:	b1 8b       	std	Z+17, r27	; 0x11
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 01 19 	call	0x3202	; 0x3202 <vTaskDelayUntil>
    12fc:	cd cf       	rjmp	.-102    	; 0x1298 <_ZN17task_limit_switch3runEv+0x5e>

000012fe <_ZN18task_motor_encoder3runEv>:
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <_ZN18task_motor_encoder3runEv+0x6>
    1304:	1f 92       	push	r1
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	8c 01       	movw	r16, r24
    130c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <xTaskGetTickCount>
    1310:	69 83       	std	Y+1, r22	; 0x01
    1312:	7a 83       	std	Y+2, r23	; 0x02
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	e0 e8       	ldi	r30, 0x80	; 128
    131a:	f6 e0       	ldi	r31, 0x06	; 6
    131c:	8c e0       	ldi	r24, 0x0C	; 12
    131e:	82 83       	std	Z+2, r24	; 0x02
    1320:	82 89       	ldd	r24, Z+18	; 0x12
    1322:	83 60       	ori	r24, 0x03	; 3
    1324:	82 8b       	std	Z+18, r24	; 0x12
    1326:	83 89       	ldd	r24, Z+19	; 0x13
    1328:	83 60       	ori	r24, 0x03	; 3
    132a:	83 8b       	std	Z+19, r24	; 0x13
    132c:	e0 e8       	ldi	r30, 0x80	; 128
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	82 e7       	ldi	r24, 0x72	; 114
    1332:	80 83       	st	Z, r24
    1334:	89 e0       	ldi	r24, 0x09	; 9
    1336:	80 87       	std	Z+8, r24	; 0x08
    1338:	e0 e0       	ldi	r30, 0x00	; 0
    133a:	f9 e0       	ldi	r31, 0x09	; 9
    133c:	88 e6       	ldi	r24, 0x68	; 104
    133e:	83 83       	std	Z+3, r24	; 0x03
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	86 a3       	std	Z+38, r24	; 0x26
    1346:	97 a3       	std	Z+39, r25	; 0x27
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 83       	st	Z, r24
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	0f 92       	push	r0
    1352:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <linear_offset>
    1356:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <linear_offset+0x1>
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 2e       	mov	r0, r31
    1360:	c1 2c       	mov	r12, r1
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	df 2e       	mov	r13, r31
    1366:	f0 2d       	mov	r31, r0
    1368:	0f 2e       	mov	r0, r31
    136a:	f4 e6       	ldi	r31, 0x64	; 100
    136c:	4f 2e       	mov	r4, r31
    136e:	51 2c       	mov	r5, r1
    1370:	61 2c       	mov	r6, r1
    1372:	71 2c       	mov	r7, r1
    1374:	f0 2d       	mov	r31, r0
    1376:	0f 2e       	mov	r0, r31
    1378:	f4 e6       	ldi	r31, 0x64	; 100
    137a:	2f 2e       	mov	r2, r31
    137c:	31 2c       	mov	r3, r1
    137e:	f0 2d       	mov	r31, r0
    1380:	f6 01       	movw	r30, r12
    1382:	e0 a0       	ldd	r14, Z+32	; 0x20
    1384:	f1 a0       	ldd	r15, Z+33	; 0x21
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	0f 92       	push	r0
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	0f 92       	push	r0
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	0f 92       	push	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	f8 01       	movw	r30, r16
    13a6:	66 85       	ldd	r22, Z+14	; 0x0e
    13a8:	77 85       	ldd	r23, Z+15	; 0x0f
    13aa:	80 89       	ldd	r24, Z+16	; 0x10
    13ac:	91 89       	ldd	r25, Z+17	; 0x11
    13ae:	a3 01       	movw	r20, r6
    13b0:	92 01       	movw	r18, r4
    13b2:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
    13b6:	67 2b       	or	r22, r23
    13b8:	68 2b       	or	r22, r24
    13ba:	69 2b       	or	r22, r25
    13bc:	99 f5       	brne	.+102    	; 0x1424 <_ZN18task_motor_encoder3runEv+0x126>
    13be:	80 90 f0 20 	lds	r8, 0x20F0	; 0x8020f0 <linear_offset>
    13c2:	90 90 f1 20 	lds	r9, 0x20F1	; 0x8020f1 <linear_offset+0x1>
    13c6:	f8 01       	movw	r30, r16
    13c8:	a6 80       	ldd	r10, Z+6	; 0x06
    13ca:	b7 80       	ldd	r11, Z+7	; 0x07
    13cc:	6e e6       	ldi	r22, 0x6E	; 110
    13ce:	70 e2       	ldi	r23, 0x20	; 32
    13d0:	c5 01       	movw	r24, r10
    13d2:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    13d6:	b7 01       	movw	r22, r14
    13d8:	c5 01       	movw	r24, r10
    13da:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN8emstreamlsEi>
    13de:	66 e0       	ldi	r22, 0x06	; 6
    13e0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    13e4:	f8 01       	movw	r30, r16
    13e6:	a6 80       	ldd	r10, Z+6	; 0x06
    13e8:	b7 80       	ldd	r11, Z+7	; 0x07
    13ea:	6f e7       	ldi	r22, 0x7F	; 127
    13ec:	70 e2       	ldi	r23, 0x20	; 32
    13ee:	c5 01       	movw	r24, r10
    13f0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    13f4:	c7 01       	movw	r24, r14
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	8e 0d       	add	r24, r14
    13fc:	9f 1d       	adc	r25, r15
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	b1 01       	movw	r22, r2
    1404:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__divmodhi4>
    1408:	68 19       	sub	r22, r8
    140a:	79 09       	sbc	r23, r9
    140c:	c5 01       	movw	r24, r10
    140e:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN8emstreamlsEi>
    1412:	7c 01       	movw	r14, r24
    1414:	60 e9       	ldi	r22, 0x90	; 144
    1416:	70 e2       	ldi	r23, 0x20	; 32
    1418:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    141c:	66 e0       	ldi	r22, 0x06	; 6
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1424:	f8 01       	movw	r30, r16
    1426:	86 85       	ldd	r24, Z+14	; 0x0e
    1428:	97 85       	ldd	r25, Z+15	; 0x0f
    142a:	a0 89       	ldd	r26, Z+16	; 0x10
    142c:	b1 89       	ldd	r27, Z+17	; 0x11
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	a1 1d       	adc	r26, r1
    1432:	b1 1d       	adc	r27, r1
    1434:	86 87       	std	Z+14, r24	; 0x0e
    1436:	97 87       	std	Z+15, r25	; 0x0f
    1438:	a0 8b       	std	Z+16, r26	; 0x10
    143a:	b1 8b       	std	Z+17, r27	; 0x11
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	0e 94 01 19 	call	0x3202	; 0x3202 <vTaskDelayUntil>
    144c:	99 cf       	rjmp	.-206    	; 0x1380 <_ZN18task_motor_encoder3runEv+0x82>

0000144e <_ZN8frt_taskC2EPKchjP8emstream>:
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	6f 92       	push	r6
    1454:	7f 92       	push	r7
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	2a 97       	sbiw	r28, 0x0a	; 10
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	4c 01       	movw	r8, r24
    147a:	29 01       	movw	r4, r18
    147c:	38 01       	movw	r6, r16
    147e:	8a e0       	ldi	r24, 0x0A	; 10
    1480:	90 e2       	ldi	r25, 0x20	; 32
    1482:	f4 01       	movw	r30, r8
    1484:	80 83       	st	Z, r24
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	fb 01       	movw	r30, r22
    148a:	80 81       	ld	r24, Z
    148c:	88 23       	and	r24, r24
    148e:	69 f0       	breq	.+26     	; 0x14aa <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1490:	de 01       	movw	r26, r28
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	31 96       	adiw	r30, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    149a:	99 30       	cpi	r25, 0x09	; 9
    149c:	39 f0       	breq	.+14     	; 0x14ac <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    149e:	9f 5f       	subi	r25, 0xFF	; 255
    14a0:	8d 93       	st	X+, r24
    14a2:	81 91       	ld	r24, Z+
    14a4:	81 11       	cpse	r24, r1
    14a6:	f9 cf       	rjmp	.-14     	; 0x149a <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	e1 e0       	ldi	r30, 0x01	; 1
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ec 0f       	add	r30, r28
    14b2:	fd 1f       	adc	r31, r29
    14b4:	e9 0f       	add	r30, r25
    14b6:	f1 1d       	adc	r31, r1
    14b8:	10 82       	st	Z, r1
    14ba:	74 01       	movw	r14, r8
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	ef 0e       	add	r14, r31
    14c0:	f1 1c       	adc	r15, r1
    14c2:	a1 2c       	mov	r10, r1
    14c4:	b1 2c       	mov	r11, r1
    14c6:	c1 2c       	mov	r12, r1
    14c8:	d1 2c       	mov	r13, r1
    14ca:	04 2f       	mov	r16, r20
    14cc:	94 01       	movw	r18, r8
    14ce:	a2 01       	movw	r20, r4
    14d0:	be 01       	movw	r22, r28
    14d2:	6f 5f       	subi	r22, 0xFF	; 255
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	8e e1       	ldi	r24, 0x1E	; 30
    14d8:	96 e0       	ldi	r25, 0x06	; 6
    14da:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <xTaskGenericCreate>
    14de:	f4 01       	movw	r30, r8
    14e0:	66 82       	std	Z+6, r6	; 0x06
    14e2:	77 82       	std	Z+7, r7	; 0x07
    14e4:	40 86       	std	Z+8, r4	; 0x08
    14e6:	51 86       	std	Z+9, r5	; 0x09
    14e8:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <last_created_task_pointer>
    14ec:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <last_created_task_pointer+0x1>
    14f0:	24 83       	std	Z+4, r18	; 0x04
    14f2:	35 83       	std	Z+5, r19	; 0x05
    14f4:	80 92 f2 20 	sts	0x20F2, r8	; 0x8020f2 <last_created_task_pointer>
    14f8:	90 92 f3 20 	sts	0x20F3, r9	; 0x8020f3 <last_created_task_pointer+0x1>
    14fc:	14 86       	std	Z+12, r1	; 0x0c
    14fe:	15 86       	std	Z+13, r1	; 0x0d
    1500:	40 90 8c 31 	lds	r4, 0x318C	; 0x80318c <portStackTopForTask>
    1504:	50 90 8d 31 	lds	r5, 0x318D	; 0x80318d <portStackTopForTask+0x1>
    1508:	ff ef       	ldi	r31, 0xFF	; 255
    150a:	4f 1a       	sub	r4, r31
    150c:	5f 0a       	sbc	r5, r31
    150e:	40 92 8c 31 	sts	0x318C, r4	; 0x80318c <portStackTopForTask>
    1512:	50 92 8d 31 	sts	0x318D, r5	; 0x80318d <portStackTopForTask+0x1>
    1516:	f4 01       	movw	r30, r8
    1518:	42 86       	std	Z+10, r4	; 0x0a
    151a:	53 86       	std	Z+11, r5	; 0x0b
    151c:	16 86       	std	Z+14, r1	; 0x0e
    151e:	17 86       	std	Z+15, r1	; 0x0f
    1520:	10 8a       	std	Z+16, r1	; 0x10
    1522:	11 8a       	std	Z+17, r1	; 0x11
    1524:	61 14       	cp	r6, r1
    1526:	71 04       	cpc	r7, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    152a:	44 c0       	rjmp	.+136    	; 0x15b4 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	79 f5       	brne	.+94     	; 0x158e <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1530:	6a e0       	ldi	r22, 0x0A	; 10
    1532:	c3 01       	movw	r24, r6
    1534:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1538:	7c 01       	movw	r14, r24
    153a:	6e ef       	ldi	r22, 0xFE	; 254
    153c:	74 e0       	ldi	r23, 0x04	; 4
    153e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1542:	be 01       	movw	r22, r28
    1544:	6f 5f       	subi	r22, 0xFF	; 255
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	c7 01       	movw	r24, r14
    154a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    154e:	6a e0       	ldi	r22, 0x0A	; 10
    1550:	c7 01       	movw	r24, r14
    1552:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1556:	7c 01       	movw	r14, r24
    1558:	65 ef       	ldi	r22, 0xF5	; 245
    155a:	74 e0       	ldi	r23, 0x04	; 4
    155c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1560:	6a e0       	ldi	r22, 0x0A	; 10
    1562:	c7 01       	movw	r24, r14
    1564:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1568:	7c 01       	movw	r14, r24
    156a:	67 ee       	ldi	r22, 0xE7	; 231
    156c:	74 e0       	ldi	r23, 0x04	; 4
    156e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1572:	63 e0       	ldi	r22, 0x03	; 3
    1574:	c7 01       	movw	r24, r14
    1576:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    157a:	b2 01       	movw	r22, r4
    157c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1586:	66 e0       	ldi	r22, 0x06	; 6
    1588:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    158e:	6a e0       	ldi	r22, 0x0A	; 10
    1590:	c3 01       	movw	r24, r6
    1592:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1596:	4c 01       	movw	r8, r24
    1598:	62 ed       	ldi	r22, 0xD2	; 210
    159a:	74 e0       	ldi	r23, 0x04	; 4
    159c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    15a0:	be 01       	movw	r22, r28
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	c4 01       	movw	r24, r8
    15a8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    15ac:	66 e0       	ldi	r22, 0x06	; 6
    15ae:	c4 01       	movw	r24, r8
    15b0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    15b4:	2a 96       	adiw	r28, 0x0a	; 10
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	9f 90       	pop	r9
    15d0:	8f 90       	pop	r8
    15d2:	7f 90       	pop	r7
    15d4:	6f 90       	pop	r6
    15d6:	5f 90       	pop	r5
    15d8:	4f 90       	pop	r4
    15da:	08 95       	ret

000015dc <_ZN5rs23212clear_screenEv>:
    15dc:	dc 01       	movw	r26, r24
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	02 80       	ldd	r0, Z+2	; 0x02
    15e4:	f3 81       	ldd	r31, Z+3	; 0x03
    15e6:	e0 2d       	mov	r30, r0
    15e8:	6c e0       	ldi	r22, 0x0C	; 12
    15ea:	19 95       	eicall
    15ec:	08 95       	ret

000015ee <_ZN5rs23214check_for_charEv>:
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    15f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    15f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    15fa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	4d 91       	ld	r20, X+
    1600:	5c 91       	ld	r21, X
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	42 17       	cp	r20, r18
    1608:	53 07       	cpc	r21, r19
    160a:	09 f4       	brne	.+2      	; 0x160e <_ZN5rs23214check_for_charEv+0x20>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN5rs2327getcharEv>:
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	fc 01       	movw	r30, r24
    161a:	c1 8d       	ldd	r28, Z+25	; 0x19
    161c:	d2 8d       	ldd	r29, Z+26	; 0x1a
    161e:	28 81       	ld	r18, Y
    1620:	39 81       	ldd	r19, Y+1	; 0x01
    1622:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1624:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1626:	4d 91       	ld	r20, X+
    1628:	5c 91       	ld	r21, X
    162a:	24 17       	cp	r18, r20
    162c:	35 07       	cpc	r19, r21
    162e:	e9 f3       	breq	.-6      	; 0x162a <_ZN5rs2327getcharEv+0x16>
    1630:	a7 89       	ldd	r26, Z+23	; 0x17
    1632:	b0 8d       	ldd	r27, Z+24	; 0x18
    1634:	0d 90       	ld	r0, X+
    1636:	bc 91       	ld	r27, X
    1638:	a0 2d       	mov	r26, r0
    163a:	a2 0f       	add	r26, r18
    163c:	b3 1f       	adc	r27, r19
    163e:	8c 91       	ld	r24, X
    1640:	2f 5f       	subi	r18, 0xFF	; 255
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	28 83       	st	Y, r18
    1646:	39 83       	std	Y+1, r19	; 0x01
    1648:	24 36       	cpi	r18, 0x64	; 100
    164a:	31 05       	cpc	r19, r1
    164c:	28 f0       	brcs	.+10     	; 0x1658 <_ZN5rs2327getcharEv+0x44>
    164e:	01 8c       	ldd	r0, Z+25	; 0x19
    1650:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1652:	e0 2d       	mov	r30, r0
    1654:	10 82       	st	Z, r1
    1656:	11 82       	std	Z+1, r1	; 0x01
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <_ZN5rs2327putcharEc>:
    1660:	dc 01       	movw	r26, r24
    1662:	50 96       	adiw	r26, 0x10	; 16
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	51 97       	sbiw	r26, 0x11	; 17
    166a:	80 81       	ld	r24, Z
    166c:	54 96       	adiw	r26, 0x14	; 20
    166e:	4c 91       	ld	r20, X
    1670:	54 97       	sbiw	r26, 0x14	; 20
    1672:	84 23       	and	r24, r20
    1674:	29 f0       	breq	.+10     	; 0x1680 <_ZN5rs2327putcharEc+0x20>
    1676:	09 c0       	rjmp	.+18     	; 0x168a <_ZN5rs2327putcharEc+0x2a>
    1678:	21 50       	subi	r18, 0x01	; 1
    167a:	31 09       	sbc	r19, r1
    167c:	19 f4       	brne	.+6      	; 0x1684 <_ZN5rs2327putcharEc+0x24>
    167e:	12 c0       	rjmp	.+36     	; 0x16a4 <_ZN5rs2327putcharEc+0x44>
    1680:	21 e2       	ldi	r18, 0x21	; 33
    1682:	3e e4       	ldi	r19, 0x4E	; 78
    1684:	90 81       	ld	r25, Z
    1686:	94 23       	and	r25, r20
    1688:	b9 f3       	breq	.-18     	; 0x1678 <_ZN5rs2327putcharEc+0x18>
    168a:	90 81       	ld	r25, Z
    168c:	56 96       	adiw	r26, 0x16	; 22
    168e:	8c 91       	ld	r24, X
    1690:	56 97       	sbiw	r26, 0x16	; 22
    1692:	89 2b       	or	r24, r25
    1694:	80 83       	st	Z, r24
    1696:	1e 96       	adiw	r26, 0x0e	; 14
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	1f 97       	sbiw	r26, 0x0f	; 15
    169e:	60 83       	st	Z, r22
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	08 95       	ret
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <_GLOBAL__sub_I_counter>:
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	c4 ef       	ldi	r28, 0xF4	; 244
    16ae:	d0 e2       	ldi	r29, 0x20	; 32
    16b0:	8a e0       	ldi	r24, 0x0A	; 10
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	1b 82       	std	Y+3, r1	; 0x03
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	1c 82       	std	Y+4, r1	; 0x04
    16bc:	1e 82       	std	Y+6, r1	; 0x06
    16be:	1f 82       	std	Y+7, r1	; 0x07
    16c0:	82 e6       	ldi	r24, 0x62	; 98
    16c2:	90 e2       	ldi	r25, 0x20	; 32
    16c4:	88 83       	st	Y, r24
    16c6:	99 83       	std	Y+1, r25	; 0x01
    16c8:	1e 86       	std	Y+14, r1	; 0x0e
    16ca:	1f 86       	std	Y+15, r1	; 0x0f
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	80 e2       	ldi	r24, 0x20	; 32
    16d2:	0e 94 2f 14 	call	0x285e	; 0x285e <xQueueGenericCreate>
    16d6:	88 87       	std	Y+8, r24	; 0x08
    16d8:	99 87       	std	Y+9, r25	; 0x09
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	8a 87       	std	Y+10, r24	; 0x0a
    16e4:	9b 87       	std	Y+11, r25	; 0x0b
    16e6:	ac 87       	std	Y+12, r26	; 0x0c
    16e8:	bd 87       	std	Y+13, r27	; 0x0d
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <__vector_58>:
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	08 b6       	in	r0, 0x38	; 56
    16fc:	0f 92       	push	r0
    16fe:	18 be       	out	0x38, r1	; 56
    1700:	0b b6       	in	r0, 0x3b	; 59
    1702:	0f 92       	push	r0
    1704:	1b be       	out	0x3b, r1	; 59
    1706:	2f 93       	push	r18
    1708:	3f 93       	push	r19
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1716:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <rcvE0_buffer>
    171a:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <rcvE0_buffer+0x1>
    171e:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <rcvE0_write_index>
    1722:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <rcvE0_write_index+0x1>
    1726:	e8 0f       	add	r30, r24
    1728:	f9 1f       	adc	r31, r25
    172a:	20 83       	st	Z, r18
    172c:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <rcvE0_write_index>
    1730:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <rcvE0_write_index+0x1>
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	84 36       	cpi	r24, 0x64	; 100
    1738:	91 05       	cpc	r25, r1
    173a:	60 f4       	brcc	.+24     	; 0x1754 <__vector_58+0x64>
    173c:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <rcvE0_write_index>
    1740:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <rcvE0_write_index+0x1>
    1744:	20 91 06 21 	lds	r18, 0x2106	; 0x802106 <rcvE0_read_index>
    1748:	30 91 07 21 	lds	r19, 0x2107	; 0x802107 <rcvE0_read_index+0x1>
    174c:	82 17       	cp	r24, r18
    174e:	93 07       	cpc	r25, r19
    1750:	f1 f4       	brne	.+60     	; 0x178e <__vector_58+0x9e>
    1752:	0c c0       	rjmp	.+24     	; 0x176c <__vector_58+0x7c>
    1754:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <rcvE0_write_index>
    1758:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <rcvE0_write_index+0x1>
    175c:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <rcvE0_read_index>
    1760:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <rcvE0_read_index+0x1>
    1764:	18 16       	cp	r1, r24
    1766:	19 06       	cpc	r1, r25
    1768:	91 f4       	brne	.+36     	; 0x178e <__vector_58+0x9e>
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <__vector_58+0x98>
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	84 36       	cpi	r24, 0x64	; 100
    1770:	91 05       	cpc	r25, r1
    1772:	28 f4       	brcc	.+10     	; 0x177e <__vector_58+0x8e>
    1774:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <rcvE0_read_index>
    1778:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <rcvE0_read_index+0x1>
    177c:	08 c0       	rjmp	.+16     	; 0x178e <__vector_58+0x9e>
    177e:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <rcvE0_read_index>
    1782:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <rcvE0_read_index+0x1>
    1786:	03 c0       	rjmp	.+6      	; 0x178e <__vector_58+0x9e>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	f3 cf       	rjmp	.-26     	; 0x1774 <__vector_58+0x84>
    178e:	ff 91       	pop	r31
    1790:	ef 91       	pop	r30
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0b be       	out	0x3b, r0	; 59
    179e:	0f 90       	pop	r0
    17a0:	08 be       	out	0x38, r0	; 56
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_91>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	08 b6       	in	r0, 0x38	; 56
    17b8:	0f 92       	push	r0
    17ba:	18 be       	out	0x38, r1	; 56
    17bc:	0b b6       	in	r0, 0x3b	; 59
    17be:	0f 92       	push	r0
    17c0:	1b be       	out	0x3b, r1	; 59
    17c2:	2f 93       	push	r18
    17c4:	3f 93       	push	r19
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    17d2:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <rcvD1_buffer>
    17d6:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <rcvD1_buffer+0x1>
    17da:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvD1_write_index>
    17de:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvD1_write_index+0x1>
    17e2:	e8 0f       	add	r30, r24
    17e4:	f9 1f       	adc	r31, r25
    17e6:	20 83       	st	Z, r18
    17e8:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvD1_write_index>
    17ec:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvD1_write_index+0x1>
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	84 36       	cpi	r24, 0x64	; 100
    17f4:	91 05       	cpc	r25, r1
    17f6:	60 f4       	brcc	.+24     	; 0x1810 <__vector_91+0x64>
    17f8:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvD1_write_index>
    17fc:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvD1_write_index+0x1>
    1800:	20 91 0c 21 	lds	r18, 0x210C	; 0x80210c <rcvD1_read_index>
    1804:	30 91 0d 21 	lds	r19, 0x210D	; 0x80210d <rcvD1_read_index+0x1>
    1808:	82 17       	cp	r24, r18
    180a:	93 07       	cpc	r25, r19
    180c:	f1 f4       	brne	.+60     	; 0x184a <__vector_91+0x9e>
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <__vector_91+0x7c>
    1810:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvD1_write_index>
    1814:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvD1_write_index+0x1>
    1818:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <rcvD1_read_index>
    181c:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <rcvD1_read_index+0x1>
    1820:	18 16       	cp	r1, r24
    1822:	19 06       	cpc	r1, r25
    1824:	91 f4       	brne	.+36     	; 0x184a <__vector_91+0x9e>
    1826:	0e c0       	rjmp	.+28     	; 0x1844 <__vector_91+0x98>
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	84 36       	cpi	r24, 0x64	; 100
    182c:	91 05       	cpc	r25, r1
    182e:	28 f4       	brcc	.+10     	; 0x183a <__vector_91+0x8e>
    1830:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <rcvD1_read_index>
    1834:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <rcvD1_read_index+0x1>
    1838:	08 c0       	rjmp	.+16     	; 0x184a <__vector_91+0x9e>
    183a:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <rcvD1_read_index>
    183e:	10 92 0d 21 	sts	0x210D, r1	; 0x80210d <rcvD1_read_index+0x1>
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__vector_91+0x9e>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	f3 cf       	rjmp	.-26     	; 0x1830 <__vector_91+0x84>
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0b be       	out	0x3b, r0	; 59
    185a:	0f 90       	pop	r0
    185c:	08 be       	out	0x38, r0	; 56
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_88>:
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	08 b6       	in	r0, 0x38	; 56
    1874:	0f 92       	push	r0
    1876:	18 be       	out	0x38, r1	; 56
    1878:	0b b6       	in	r0, 0x3b	; 59
    187a:	0f 92       	push	r0
    187c:	1b be       	out	0x3b, r1	; 59
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    188e:	e0 91 14 21 	lds	r30, 0x2114	; 0x802114 <rcvD0_buffer>
    1892:	f0 91 15 21 	lds	r31, 0x2115	; 0x802115 <rcvD0_buffer+0x1>
    1896:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC0_write_index>
    189a:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC0_write_index+0x1>
    189e:	e8 0f       	add	r30, r24
    18a0:	f9 1f       	adc	r31, r25
    18a2:	20 83       	st	Z, r18
    18a4:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD0_write_index>
    18a8:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD0_write_index+0x1>
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	84 36       	cpi	r24, 0x64	; 100
    18b0:	91 05       	cpc	r25, r1
    18b2:	60 f4       	brcc	.+24     	; 0x18cc <__vector_88+0x64>
    18b4:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvD0_write_index>
    18b8:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvD0_write_index+0x1>
    18bc:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <rcvD0_read_index>
    18c0:	30 91 13 21 	lds	r19, 0x2113	; 0x802113 <rcvD0_read_index+0x1>
    18c4:	82 17       	cp	r24, r18
    18c6:	93 07       	cpc	r25, r19
    18c8:	f1 f4       	brne	.+60     	; 0x1906 <__vector_88+0x9e>
    18ca:	0c c0       	rjmp	.+24     	; 0x18e4 <__vector_88+0x7c>
    18cc:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvD0_write_index>
    18d0:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvD0_write_index+0x1>
    18d4:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <rcvD0_read_index>
    18d8:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <rcvD0_read_index+0x1>
    18dc:	18 16       	cp	r1, r24
    18de:	19 06       	cpc	r1, r25
    18e0:	91 f4       	brne	.+36     	; 0x1906 <__vector_88+0x9e>
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <__vector_88+0x98>
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	84 36       	cpi	r24, 0x64	; 100
    18e8:	91 05       	cpc	r25, r1
    18ea:	28 f4       	brcc	.+10     	; 0x18f6 <__vector_88+0x8e>
    18ec:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <rcvD0_read_index>
    18f0:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <rcvD0_read_index+0x1>
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <__vector_88+0x9e>
    18f6:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <rcvD0_read_index>
    18fa:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <rcvD0_read_index+0x1>
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <__vector_88+0x9e>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	f3 cf       	rjmp	.-26     	; 0x18ec <__vector_88+0x84>
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0b be       	out	0x3b, r0	; 59
    1916:	0f 90       	pop	r0
    1918:	08 be       	out	0x38, r0	; 56
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_28>:
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	08 b6       	in	r0, 0x38	; 56
    1930:	0f 92       	push	r0
    1932:	18 be       	out	0x38, r1	; 56
    1934:	0b b6       	in	r0, 0x3b	; 59
    1936:	0f 92       	push	r0
    1938:	1b be       	out	0x3b, r1	; 59
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    194a:	e0 91 1a 21 	lds	r30, 0x211A	; 0x80211a <rcvC1_buffer>
    194e:	f0 91 1b 21 	lds	r31, 0x211B	; 0x80211b <rcvC1_buffer+0x1>
    1952:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvC1_write_index>
    1956:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvC1_write_index+0x1>
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	20 83       	st	Z, r18
    1960:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvC1_write_index>
    1964:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvC1_write_index+0x1>
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	84 36       	cpi	r24, 0x64	; 100
    196c:	91 05       	cpc	r25, r1
    196e:	60 f4       	brcc	.+24     	; 0x1988 <__vector_28+0x64>
    1970:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvC1_write_index>
    1974:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvC1_write_index+0x1>
    1978:	20 91 18 21 	lds	r18, 0x2118	; 0x802118 <rcvC1_read_index>
    197c:	30 91 19 21 	lds	r19, 0x2119	; 0x802119 <rcvC1_read_index+0x1>
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	f1 f4       	brne	.+60     	; 0x19c2 <__vector_28+0x9e>
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <__vector_28+0x7c>
    1988:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvC1_write_index>
    198c:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvC1_write_index+0x1>
    1990:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <rcvC1_read_index>
    1994:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <rcvC1_read_index+0x1>
    1998:	18 16       	cp	r1, r24
    199a:	19 06       	cpc	r1, r25
    199c:	91 f4       	brne	.+36     	; 0x19c2 <__vector_28+0x9e>
    199e:	0e c0       	rjmp	.+28     	; 0x19bc <__vector_28+0x98>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	84 36       	cpi	r24, 0x64	; 100
    19a4:	91 05       	cpc	r25, r1
    19a6:	28 f4       	brcc	.+10     	; 0x19b2 <__vector_28+0x8e>
    19a8:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <rcvC1_read_index>
    19ac:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <rcvC1_read_index+0x1>
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <__vector_28+0x9e>
    19b2:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <rcvC1_read_index>
    19b6:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <rcvC1_read_index+0x1>
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <__vector_28+0x9e>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	f3 cf       	rjmp	.-26     	; 0x19a8 <__vector_28+0x84>
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0b be       	out	0x3b, r0	; 59
    19d2:	0f 90       	pop	r0
    19d4:	08 be       	out	0x38, r0	; 56
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <__vector_25>:
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	08 b6       	in	r0, 0x38	; 56
    19ec:	0f 92       	push	r0
    19ee:	18 be       	out	0x38, r1	; 56
    19f0:	0b b6       	in	r0, 0x3b	; 59
    19f2:	0f 92       	push	r0
    19f4:	1b be       	out	0x3b, r1	; 59
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
    1a02:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1a06:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <rcvC0_buffer>
    1a0a:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <rcvC0_buffer+0x1>
    1a0e:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC0_write_index>
    1a12:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC0_write_index+0x1>
    1a16:	e8 0f       	add	r30, r24
    1a18:	f9 1f       	adc	r31, r25
    1a1a:	20 83       	st	Z, r18
    1a1c:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC0_write_index>
    1a20:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC0_write_index+0x1>
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	84 36       	cpi	r24, 0x64	; 100
    1a28:	91 05       	cpc	r25, r1
    1a2a:	60 f4       	brcc	.+24     	; 0x1a44 <__vector_25+0x64>
    1a2c:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC0_write_index>
    1a30:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC0_write_index+0x1>
    1a34:	20 91 1e 21 	lds	r18, 0x211E	; 0x80211e <rcvC0_read_index>
    1a38:	30 91 1f 21 	lds	r19, 0x211F	; 0x80211f <rcvC0_read_index+0x1>
    1a3c:	82 17       	cp	r24, r18
    1a3e:	93 07       	cpc	r25, r19
    1a40:	f1 f4       	brne	.+60     	; 0x1a7e <__vector_25+0x9e>
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <__vector_25+0x7c>
    1a44:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvC0_write_index>
    1a48:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvC0_write_index+0x1>
    1a4c:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <rcvC0_read_index>
    1a50:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <rcvC0_read_index+0x1>
    1a54:	18 16       	cp	r1, r24
    1a56:	19 06       	cpc	r1, r25
    1a58:	91 f4       	brne	.+36     	; 0x1a7e <__vector_25+0x9e>
    1a5a:	0e c0       	rjmp	.+28     	; 0x1a78 <__vector_25+0x98>
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	84 36       	cpi	r24, 0x64	; 100
    1a60:	91 05       	cpc	r25, r1
    1a62:	28 f4       	brcc	.+10     	; 0x1a6e <__vector_25+0x8e>
    1a64:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <rcvC0_read_index>
    1a68:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <rcvC0_read_index+0x1>
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <__vector_25+0x9e>
    1a6e:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <rcvC0_read_index>
    1a72:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <rcvC0_read_index+0x1>
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <__vector_25+0x9e>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	f3 cf       	rjmp	.-26     	; 0x1a64 <__vector_25+0x84>
    1a7e:	ff 91       	pop	r31
    1a80:	ef 91       	pop	r30
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0b be       	out	0x3b, r0	; 59
    1a8e:	0f 90       	pop	r0
    1a90:	08 be       	out	0x38, r0	; 56
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <_ZN8emstreamlsE15ser_manipulator>:
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	ec 01       	movw	r28, r24
    1aa2:	86 2f       	mov	r24, r22
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	8b 30       	cpi	r24, 0x0B	; 11
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	d8 f5       	brcc	.+118    	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1aac:	fc 01       	movw	r30, r24
    1aae:	88 27       	eor	r24, r24
    1ab0:	e2 50       	subi	r30, 0x02	; 2
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab6:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__tablejump2__>
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	8a 83       	std	Y+2, r24	; 0x02
    1abe:	31 c0       	rjmp	.+98     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
    1ac4:	2e c0       	rjmp	.+92     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ac6:	8a e0       	ldi	r24, 0x0A	; 10
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	2b c0       	rjmp	.+86     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1acc:	80 e1       	ldi	r24, 0x10	; 16
    1ace:	8a 83       	std	Y+2, r24	; 0x02
    1ad0:	28 c0       	rjmp	.+80     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	25 c0       	rjmp	.+74     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1ad8:	1b 82       	std	Y+3, r1	; 0x03
    1ada:	23 c0       	rjmp	.+70     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1adc:	e8 81       	ld	r30, Y
    1ade:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae0:	02 80       	ldd	r0, Z+2	; 0x02
    1ae2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	6d e0       	ldi	r22, 0x0D	; 13
    1ae8:	ce 01       	movw	r24, r28
    1aea:	19 95       	eicall
    1aec:	e8 81       	ld	r30, Y
    1aee:	f9 81       	ldd	r31, Y+1	; 0x01
    1af0:	02 80       	ldd	r0, Z+2	; 0x02
    1af2:	f3 81       	ldd	r31, Z+3	; 0x03
    1af4:	e0 2d       	mov	r30, r0
    1af6:	6a e0       	ldi	r22, 0x0A	; 10
    1af8:	ce 01       	movw	r24, r28
    1afa:	19 95       	eicall
    1afc:	12 c0       	rjmp	.+36     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1afe:	e8 81       	ld	r30, Y
    1b00:	f9 81       	ldd	r31, Y+1	; 0x01
    1b02:	02 84       	ldd	r0, Z+10	; 0x0a
    1b04:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b06:	e0 2d       	mov	r30, r0
    1b08:	ce 01       	movw	r24, r28
    1b0a:	19 95       	eicall
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b0e:	e8 81       	ld	r30, Y
    1b10:	f9 81       	ldd	r31, Y+1	; 0x01
    1b12:	00 84       	ldd	r0, Z+8	; 0x08
    1b14:	f1 85       	ldd	r31, Z+9	; 0x09
    1b16:	e0 2d       	mov	r30, r0
    1b18:	ce 01       	movw	r24, r28
    1b1a:	19 95       	eicall
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <_ZN8emstreamlsE15ser_manipulator+0x86>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	8c 83       	std	Y+4, r24	; 0x04
    1b22:	ce 01       	movw	r24, r28
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <_ZN8emstream4putsEPKc>:
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	8c 01       	movw	r16, r24
    1b34:	fb 01       	movw	r30, r22
    1b36:	dc 01       	movw	r26, r24
    1b38:	14 96       	adiw	r26, 0x04	; 4
    1b3a:	8c 91       	ld	r24, X
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <_ZN8emstream4putsEPKc+0x1e>
    1b40:	60 81       	ld	r22, Z
    1b42:	61 11       	cpse	r22, r1
    1b44:	17 c0       	rjmp	.+46     	; 0x1b74 <_ZN8emstream4putsEPKc+0x4a>
    1b46:	23 c0       	rjmp	.+70     	; 0x1b8e <_ZN8emstream4putsEPKc+0x64>
    1b48:	d8 01       	movw	r26, r16
    1b4a:	14 96       	adiw	r26, 0x04	; 4
    1b4c:	1c 92       	st	X, r1
    1b4e:	eb 01       	movw	r28, r22
    1b50:	21 96       	adiw	r28, 0x01	; 1
    1b52:	64 91       	lpm	r22, Z
    1b54:	66 23       	and	r22, r22
    1b56:	d9 f0       	breq	.+54     	; 0x1b8e <_ZN8emstream4putsEPKc+0x64>
    1b58:	d8 01       	movw	r26, r16
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	02 80       	ldd	r0, Z+2	; 0x02
    1b60:	f3 81       	ldd	r31, Z+3	; 0x03
    1b62:	e0 2d       	mov	r30, r0
    1b64:	c8 01       	movw	r24, r16
    1b66:	19 95       	eicall
    1b68:	fe 01       	movw	r30, r28
    1b6a:	64 91       	lpm	r22, Z
    1b6c:	21 96       	adiw	r28, 0x01	; 1
    1b6e:	61 11       	cpse	r22, r1
    1b70:	f3 cf       	rjmp	.-26     	; 0x1b58 <_ZN8emstream4putsEPKc+0x2e>
    1b72:	0d c0       	rjmp	.+26     	; 0x1b8e <_ZN8emstream4putsEPKc+0x64>
    1b74:	ef 01       	movw	r28, r30
    1b76:	21 96       	adiw	r28, 0x01	; 1
    1b78:	d8 01       	movw	r26, r16
    1b7a:	ed 91       	ld	r30, X+
    1b7c:	fc 91       	ld	r31, X
    1b7e:	02 80       	ldd	r0, Z+2	; 0x02
    1b80:	f3 81       	ldd	r31, Z+3	; 0x03
    1b82:	e0 2d       	mov	r30, r0
    1b84:	c8 01       	movw	r24, r16
    1b86:	19 95       	eicall
    1b88:	69 91       	ld	r22, Y+
    1b8a:	61 11       	cpse	r22, r1
    1b8c:	f5 cf       	rjmp	.-22     	; 0x1b78 <_ZN8emstream4putsEPKc+0x4e>
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	08 95       	ret

00001b98 <main>:
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	6e 97       	sbiw	r28, 0x1e	; 30
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	e0 e6       	ldi	r30, 0x60	; 96
    1bb6:	f6 e0       	ldi	r31, 0x06	; 6
    1bb8:	80 e1       	ldi	r24, 0x10	; 16
    1bba:	81 83       	std	Z+1, r24	; 0x01
    1bbc:	85 83       	std	Z+5, r24	; 0x05
    1bbe:	f8 94       	cli
    1bc0:	e0 e5       	ldi	r30, 0x50	; 80
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	82 60       	ori	r24, 0x02	; 2
    1bc8:	80 83       	st	Z, r24
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	81 ff       	sbrs	r24, 1
    1bce:	fd cf       	rjmp	.-6      	; 0x1bca <main+0x32>
    1bd0:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1bd4:	9f b7       	in	r25, 0x3f	; 63
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	f8 94       	cli
    1bda:	1b be       	out	0x3b, r1	; 59
    1bdc:	88 7f       	andi	r24, 0xF8	; 248
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	20 e4       	ldi	r18, 0x40	; 64
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	f9 01       	movw	r30, r18
    1be6:	08 ed       	ldi	r16, 0xD8	; 216
    1be8:	04 bf       	out	0x34, r16	; 52
    1bea:	80 83       	st	Z, r24
    1bec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bee:	8f bf       	out	0x3f, r24	; 63
    1bf0:	e0 e5       	ldi	r30, 0x50	; 80
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8e 7f       	andi	r24, 0xFE	; 254
    1bf8:	80 83       	st	Z, r24
    1bfa:	9d ef       	ldi	r25, 0xFD	; 253
    1bfc:	88 ed       	ldi	r24, 0xD8	; 216
    1bfe:	08 b6       	in	r0, 0x38	; 56
    1c00:	18 be       	out	0x38, r1	; 56
    1c02:	84 bf       	out	0x34, r24	; 52
    1c04:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c08:	08 be       	out	0x38, r0	; 56
    1c0a:	82 e5       	ldi	r24, 0x52	; 82
    1c0c:	90 e2       	ldi	r25, 0x20	; 32
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	8a e0       	ldi	r24, 0x0A	; 10
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	1c 82       	std	Y+4, r1	; 0x04
    1c18:	43 e0       	ldi	r20, 0x03	; 3
    1c1a:	4e 83       	std	Y+6, r20	; 0x06
    1c1c:	1d 82       	std	Y+5, r1	; 0x05
    1c1e:	1f 82       	std	Y+7, r1	; 0x07
    1c20:	18 86       	std	Y+8, r1	; 0x08
    1c22:	a0 e4       	ldi	r26, 0x40	; 64
    1c24:	b6 e0       	ldi	r27, 0x06	; 6
    1c26:	ab 87       	std	Y+11, r26	; 0x0b
    1c28:	bc 87       	std	Y+12, r27	; 0x0c
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	8d 87       	std	Y+13, r24	; 0x0d
    1c2e:	0f 2e       	mov	r0, r31
    1c30:	f7 e0       	ldi	r31, 0x07	; 7
    1c32:	df 2e       	mov	r13, r31
    1c34:	f0 2d       	mov	r31, r0
    1c36:	de 86       	std	Y+14, r13	; 0x0e
    1c38:	e0 eb       	ldi	r30, 0xB0	; 176
    1c3a:	f8 e0       	ldi	r31, 0x08	; 8
    1c3c:	ef 87       	std	Y+15, r30	; 0x0f
    1c3e:	f8 8b       	std	Y+16, r31	; 0x10
    1c40:	81 eb       	ldi	r24, 0xB1	; 177
    1c42:	98 e0       	ldi	r25, 0x08	; 8
    1c44:	89 8b       	std	Y+17, r24	; 0x11
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	84 eb       	ldi	r24, 0xB4	; 180
    1c4a:	98 e0       	ldi	r25, 0x08	; 8
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	9c 8b       	std	Y+20, r25	; 0x14
    1c50:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c52:	14 96       	adiw	r26, 0x04	; 4
    1c54:	5c 91       	ld	r21, X
    1c56:	14 97       	sbiw	r26, 0x04	; 4
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <main+0xcc>
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	2a 95       	dec	r18
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <main+0xc8>
    1c68:	9b 01       	movw	r18, r22
    1c6a:	25 2b       	or	r18, r21
    1c6c:	14 96       	adiw	r26, 0x04	; 4
    1c6e:	2c 93       	st	X, r18
    1c70:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c76:	5c 91       	ld	r21, X
    1c78:	bc 01       	movw	r22, r24
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <main+0xe8>
    1c7c:	66 0f       	add	r22, r22
    1c7e:	77 1f       	adc	r23, r23
    1c80:	2a 95       	dec	r18
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <main+0xe4>
    1c84:	9b 01       	movw	r18, r22
    1c86:	25 2b       	or	r18, r21
    1c88:	2c 93       	st	X, r18
    1c8a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c8c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c8e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c90:	2c 91       	ld	r18, X
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <main+0x100>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	3a 95       	dec	r19
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <main+0xfc>
    1c9c:	80 95       	com	r24
    1c9e:	90 95       	com	r25
    1ca0:	82 23       	and	r24, r18
    1ca2:	8c 93       	st	X, r24
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	83 83       	std	Z+3, r24	; 0x03
    1ca8:	45 83       	std	Z+5, r20	; 0x05
    1caa:	80 ef       	ldi	r24, 0xF0	; 240
    1cac:	87 83       	std	Z+7, r24	; 0x07
    1cae:	81 e2       	ldi	r24, 0x21	; 33
    1cb0:	86 83       	std	Z+6, r24	; 0x06
    1cb2:	88 e1       	ldi	r24, 0x18	; 24
    1cb4:	84 83       	std	Z+4, r24	; 0x04
    1cb6:	80 e8       	ldi	r24, 0x80	; 128
    1cb8:	8e 8b       	std	Y+22, r24	; 0x16
    1cba:	80 e4       	ldi	r24, 0x40	; 64
    1cbc:	8f 8b       	std	Y+23, r24	; 0x17
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	8d 8b       	std	Y+21, r24	; 0x15
    1cc2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cc4:	f8 89       	ldd	r31, Y+16	; 0x10
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 81       	ld	r24, Z
    1cca:	82 e1       	ldi	r24, 0x12	; 18
    1ccc:	90 e2       	ldi	r25, 0x20	; 32
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	8a e1       	ldi	r24, 0x1A	; 26
    1cd4:	91 e2       	ldi	r25, 0x21	; 33
    1cd6:	88 8f       	std	Y+24, r24	; 0x18
    1cd8:	99 8f       	std	Y+25, r25	; 0x19
    1cda:	88 e1       	ldi	r24, 0x18	; 24
    1cdc:	91 e2       	ldi	r25, 0x21	; 33
    1cde:	8a 8f       	std	Y+26, r24	; 0x1a
    1ce0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ce2:	86 e1       	ldi	r24, 0x16	; 22
    1ce4:	91 e2       	ldi	r25, 0x21	; 33
    1ce6:	8c 8f       	std	Y+28, r24	; 0x1c
    1ce8:	9d 8f       	std	Y+29, r25	; 0x1d
    1cea:	84 e6       	ldi	r24, 0x64	; 100
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1cf2:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvC1_buffer>
    1cf6:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvC1_buffer+0x1>
    1cfa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cfc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1cfe:	10 82       	st	Z, r1
    1d00:	11 82       	std	Z+1, r1	; 0x01
    1d02:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d04:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d06:	10 82       	st	Z, r1
    1d08:	11 82       	std	Z+1, r1	; 0x01
    1d0a:	67 e0       	ldi	r22, 0x07	; 7
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1d14:	7c 01       	movw	r14, r24
    1d16:	66 e9       	ldi	r22, 0x96	; 150
    1d18:	70 e2       	ldi	r23, 0x20	; 32
    1d1a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1d1e:	66 e0       	ldi	r22, 0x06	; 6
    1d20:	c7 01       	movw	r24, r14
    1d22:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1d26:	66 e0       	ldi	r22, 0x06	; 6
    1d28:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8emstreamlsE15ser_manipulator>
    1d2c:	82 e1       	ldi	r24, 0x12	; 18
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1d34:	7c 01       	movw	r14, r24
    1d36:	8e 01       	movw	r16, r28
    1d38:	0f 5f       	subi	r16, 0xFF	; 255
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	24 e0       	ldi	r18, 0x04	; 4
    1d3e:	31 e0       	ldi	r19, 0x01	; 1
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	65 eb       	ldi	r22, 0xB5	; 181
    1d44:	70 e2       	ldi	r23, 0x20	; 32
    1d46:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1d4a:	82 e2       	ldi	r24, 0x22	; 34
    1d4c:	90 e2       	ldi	r25, 0x20	; 32
    1d4e:	f7 01       	movw	r30, r14
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	83 e1       	ldi	r24, 0x13	; 19
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1d5c:	7c 01       	movw	r14, r24
    1d5e:	24 e0       	ldi	r18, 0x04	; 4
    1d60:	31 e0       	ldi	r19, 0x01	; 1
    1d62:	44 e0       	ldi	r20, 0x04	; 4
    1d64:	6d eb       	ldi	r22, 0xBD	; 189
    1d66:	70 e2       	ldi	r23, 0x20	; 32
    1d68:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1d6c:	0f 2e       	mov	r0, r31
    1d6e:	fa e2       	ldi	r31, 0x2A	; 42
    1d70:	af 2e       	mov	r10, r31
    1d72:	f0 e2       	ldi	r31, 0x20	; 32
    1d74:	bf 2e       	mov	r11, r31
    1d76:	f0 2d       	mov	r31, r0
    1d78:	f7 01       	movw	r30, r14
    1d7a:	a0 82       	st	Z, r10
    1d7c:	b1 82       	std	Z+1, r11	; 0x01
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	82 8b       	std	Z+18, r24	; 0x12
    1d82:	83 e1       	ldi	r24, 0x13	; 19
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1d8a:	7c 01       	movw	r14, r24
    1d8c:	24 e0       	ldi	r18, 0x04	; 4
    1d8e:	31 e0       	ldi	r19, 0x01	; 1
    1d90:	44 e0       	ldi	r20, 0x04	; 4
    1d92:	64 ec       	ldi	r22, 0xC4	; 196
    1d94:	70 e2       	ldi	r23, 0x20	; 32
    1d96:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	a0 82       	st	Z, r10
    1d9e:	b1 82       	std	Z+1, r11	; 0x01
    1da0:	84 e0       	ldi	r24, 0x04	; 4
    1da2:	82 8b       	std	Z+18, r24	; 0x12
    1da4:	82 e1       	ldi	r24, 0x12	; 18
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1dac:	7c 01       	movw	r14, r24
    1dae:	24 e0       	ldi	r18, 0x04	; 4
    1db0:	31 e0       	ldi	r19, 0x01	; 1
    1db2:	44 e0       	ldi	r20, 0x04	; 4
    1db4:	6c ec       	ldi	r22, 0xCC	; 204
    1db6:	70 e2       	ldi	r23, 0x20	; 32
    1db8:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1dbc:	82 e3       	ldi	r24, 0x32	; 50
    1dbe:	90 e2       	ldi	r25, 0x20	; 32
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	80 83       	st	Z, r24
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	82 e1       	ldi	r24, 0x12	; 18
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1dce:	7c 01       	movw	r14, r24
    1dd0:	24 e0       	ldi	r18, 0x04	; 4
    1dd2:	31 e0       	ldi	r19, 0x01	; 1
    1dd4:	43 e0       	ldi	r20, 0x03	; 3
    1dd6:	63 ed       	ldi	r22, 0xD3	; 211
    1dd8:	70 e2       	ldi	r23, 0x20	; 32
    1dda:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1dde:	8a e3       	ldi	r24, 0x3A	; 58
    1de0:	90 e2       	ldi	r25, 0x20	; 32
    1de2:	f7 01       	movw	r30, r14
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	82 e1       	ldi	r24, 0x12	; 18
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1df0:	7c 01       	movw	r14, r24
    1df2:	24 e0       	ldi	r18, 0x04	; 4
    1df4:	31 e0       	ldi	r19, 0x01	; 1
    1df6:	42 e0       	ldi	r20, 0x02	; 2
    1df8:	6a ed       	ldi	r22, 0xDA	; 218
    1dfa:	70 e2       	ldi	r23, 0x20	; 32
    1dfc:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1e00:	82 e4       	ldi	r24, 0x42	; 66
    1e02:	90 e2       	ldi	r25, 0x20	; 32
    1e04:	f7 01       	movw	r30, r14
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	82 e1       	ldi	r24, 0x12	; 18
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    1e12:	7c 01       	movw	r14, r24
    1e14:	24 e0       	ldi	r18, 0x04	; 4
    1e16:	31 e0       	ldi	r19, 0x01	; 1
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	62 ee       	ldi	r22, 0xE2	; 226
    1e1c:	70 e2       	ldi	r23, 0x20	; 32
    1e1e:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN8frt_taskC2EPKchjP8emstream>
    1e22:	8a e4       	ldi	r24, 0x4A	; 74
    1e24:	90 e2       	ldi	r25, 0x20	; 32
    1e26:	f7 01       	movw	r30, r14
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e30:	78 94       	sei
    1e32:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <vTaskStartScheduler>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	6e 96       	adiw	r28, 0x1e	; 30
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	08 95       	ret

00001e54 <_ZN8emstreamlsEh>:
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	29 97       	sbiw	r28, 0x09	; 9
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	8c 01       	movw	r16, r24
    1e70:	e6 2e       	mov	r14, r22
    1e72:	dc 01       	movw	r26, r24
    1e74:	13 96       	adiw	r26, 0x03	; 3
    1e76:	8c 91       	ld	r24, X
    1e78:	13 97       	sbiw	r26, 0x03	; 3
    1e7a:	88 23       	and	r24, r24
    1e7c:	41 f0       	breq	.+16     	; 0x1e8e <_ZN8emstreamlsEh+0x3a>
    1e7e:	ed 91       	ld	r30, X+
    1e80:	fc 91       	ld	r31, X
    1e82:	02 80       	ldd	r0, Z+2	; 0x02
    1e84:	f3 81       	ldd	r31, Z+3	; 0x03
    1e86:	e0 2d       	mov	r30, r0
    1e88:	c8 01       	movw	r24, r16
    1e8a:	19 95       	eicall
    1e8c:	56 c0       	rjmp	.+172    	; 0x1f3a <_ZN8emstreamlsEh+0xe6>
    1e8e:	f8 01       	movw	r30, r16
    1e90:	42 81       	ldd	r20, Z+2	; 0x02
    1e92:	42 30       	cpi	r20, 0x02	; 2
    1e94:	19 f5       	brne	.+70     	; 0x1edc <_ZN8emstreamlsEh+0x88>
    1e96:	68 94       	set
    1e98:	cc 24       	eor	r12, r12
    1e9a:	c3 f8       	bld	r12, 3
    1e9c:	d1 2c       	mov	r13, r1
    1e9e:	68 94       	set
    1ea0:	ff 24       	eor	r15, r15
    1ea2:	f7 f8       	bld	r15, 7
    1ea4:	8e 2d       	mov	r24, r14
    1ea6:	8f 21       	and	r24, r15
    1ea8:	51 f0       	breq	.+20     	; 0x1ebe <_ZN8emstreamlsEh+0x6a>
    1eaa:	d8 01       	movw	r26, r16
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	02 80       	ldd	r0, Z+2	; 0x02
    1eb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	61 e3       	ldi	r22, 0x31	; 49
    1eb8:	c8 01       	movw	r24, r16
    1eba:	19 95       	eicall
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <_ZN8emstreamlsEh+0x7c>
    1ebe:	d8 01       	movw	r26, r16
    1ec0:	ed 91       	ld	r30, X+
    1ec2:	fc 91       	ld	r31, X
    1ec4:	02 80       	ldd	r0, Z+2	; 0x02
    1ec6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	60 e3       	ldi	r22, 0x30	; 48
    1ecc:	c8 01       	movw	r24, r16
    1ece:	19 95       	eicall
    1ed0:	f6 94       	lsr	r15
    1ed2:	b1 e0       	ldi	r27, 0x01	; 1
    1ed4:	cb 1a       	sub	r12, r27
    1ed6:	d1 08       	sbc	r13, r1
    1ed8:	29 f7       	brne	.-54     	; 0x1ea4 <_ZN8emstreamlsEh+0x50>
    1eda:	2f c0       	rjmp	.+94     	; 0x1f3a <_ZN8emstreamlsEh+0xe6>
    1edc:	40 31       	cpi	r20, 0x10	; 16
    1ede:	f9 f4       	brne	.+62     	; 0x1f1e <_ZN8emstreamlsEh+0xca>
    1ee0:	62 95       	swap	r22
    1ee2:	6f 70       	andi	r22, 0x0F	; 15
    1ee4:	01 90       	ld	r0, Z+
    1ee6:	f0 81       	ld	r31, Z
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	02 80       	ldd	r0, Z+2	; 0x02
    1eec:	f3 81       	ldd	r31, Z+3	; 0x03
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	6a 30       	cpi	r22, 0x0A	; 10
    1ef2:	10 f0       	brcs	.+4      	; 0x1ef8 <_ZN8emstreamlsEh+0xa4>
    1ef4:	69 5c       	subi	r22, 0xC9	; 201
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <_ZN8emstreamlsEh+0xa6>
    1ef8:	60 5d       	subi	r22, 0xD0	; 208
    1efa:	c8 01       	movw	r24, r16
    1efc:	19 95       	eicall
    1efe:	6e 2d       	mov	r22, r14
    1f00:	6f 70       	andi	r22, 0x0F	; 15
    1f02:	d8 01       	movw	r26, r16
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	02 80       	ldd	r0, Z+2	; 0x02
    1f0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f0c:	e0 2d       	mov	r30, r0
    1f0e:	6a 30       	cpi	r22, 0x0A	; 10
    1f10:	10 f0       	brcs	.+4      	; 0x1f16 <_ZN8emstreamlsEh+0xc2>
    1f12:	69 5c       	subi	r22, 0xC9	; 201
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <_ZN8emstreamlsEh+0xc4>
    1f16:	60 5d       	subi	r22, 0xD0	; 208
    1f18:	c8 01       	movw	r24, r16
    1f1a:	19 95       	eicall
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <_ZN8emstreamlsEh+0xe6>
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	be 01       	movw	r22, r28
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8e 2d       	mov	r24, r14
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 23 1c 	call	0x3846	; 0x3846 <utoa>
    1f2e:	be 01       	movw	r22, r28
    1f30:	6f 5f       	subi	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	c8 01       	movw	r24, r16
    1f36:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	29 96       	adiw	r28, 0x09	; 9
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	08 95       	ret

00001f54 <_ZN8emstreamlsEm>:
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	a1 97       	sbiw	r28, 0x21	; 33
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	d4 2e       	mov	r13, r20
    1f70:	e5 2e       	mov	r14, r21
    1f72:	f6 2e       	mov	r15, r22
    1f74:	97 2f       	mov	r25, r23
    1f76:	f8 01       	movw	r30, r16
    1f78:	22 81       	ldd	r18, Z+2	; 0x02
    1f7a:	20 31       	cpi	r18, 0x10	; 16
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <_ZN8emstreamlsEm+0x32>
    1f7e:	28 30       	cpi	r18, 0x08	; 8
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <_ZN8emstreamlsEm+0x32>
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	71 f4       	brne	.+28     	; 0x1fa2 <_ZN8emstreamlsEm+0x4e>
    1f86:	69 2f       	mov	r22, r25
    1f88:	c8 01       	movw	r24, r16
    1f8a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    1f8e:	6f 2d       	mov	r22, r15
    1f90:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    1f94:	6e 2d       	mov	r22, r14
    1f96:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    1f9a:	6d 2d       	mov	r22, r13
    1f9c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <_ZN8emstreamlsEm+0x6c>
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	ae 01       	movw	r20, r28
    1fa6:	4f 5f       	subi	r20, 0xFF	; 255
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	6d 2d       	mov	r22, r13
    1fac:	7e 2d       	mov	r23, r14
    1fae:	8f 2d       	mov	r24, r15
    1fb0:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <ultoa>
    1fb4:	be 01       	movw	r22, r28
    1fb6:	6f 5f       	subi	r22, 0xFF	; 255
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	c8 01       	movw	r24, r16
    1fbc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	a1 96       	adiw	r28, 0x21	; 33
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	08 95       	ret

00001fd8 <_ZN8emstreamlsEj>:
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	61 97       	sbiw	r28, 0x11	; 17
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	8c 01       	movw	r16, r24
    1fee:	f6 2e       	mov	r15, r22
    1ff0:	97 2f       	mov	r25, r23
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	42 81       	ldd	r20, Z+2	; 0x02
    1ff6:	40 31       	cpi	r20, 0x10	; 16
    1ff8:	21 f0       	breq	.+8      	; 0x2002 <_ZN8emstreamlsEj+0x2a>
    1ffa:	48 30       	cpi	r20, 0x08	; 8
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <_ZN8emstreamlsEj+0x2a>
    1ffe:	42 30       	cpi	r20, 0x02	; 2
    2000:	41 f4       	brne	.+16     	; 0x2012 <_ZN8emstreamlsEj+0x3a>
    2002:	69 2f       	mov	r22, r25
    2004:	c8 01       	movw	r24, r16
    2006:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    200a:	6f 2d       	mov	r22, r15
    200c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <_ZN8emstreamlsEh>
    2010:	0d c0       	rjmp	.+26     	; 0x202c <_ZN8emstreamlsEj+0x54>
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	be 01       	movw	r22, r28
    2016:	6f 5f       	subi	r22, 0xFF	; 255
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 2d       	mov	r24, r15
    201c:	0e 94 23 1c 	call	0x3846	; 0x3846 <utoa>
    2020:	be 01       	movw	r22, r28
    2022:	6f 5f       	subi	r22, 0xFF	; 255
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	c8 01       	movw	r24, r16
    2028:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    202c:	c8 01       	movw	r24, r16
    202e:	61 96       	adiw	r28, 0x11	; 17
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	08 95       	ret

00002040 <_ZN8emstreamlsEi>:
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	61 97       	sbiw	r28, 0x11	; 17
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	8c 01       	movw	r16, r24
    2054:	9b 01       	movw	r18, r22
    2056:	fc 01       	movw	r30, r24
    2058:	92 81       	ldd	r25, Z+2	; 0x02
    205a:	9a 30       	cpi	r25, 0x0A	; 10
    205c:	21 f0       	breq	.+8      	; 0x2066 <_ZN8emstreamlsEi+0x26>
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN8emstreamlsEj>
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <_ZN8emstreamlsEi+0x40>
    2066:	4a e0       	ldi	r20, 0x0A	; 10
    2068:	be 01       	movw	r22, r28
    206a:	6f 5f       	subi	r22, 0xFF	; 255
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	c9 01       	movw	r24, r18
    2070:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__itoa_ncheck>
    2074:	be 01       	movw	r22, r28
    2076:	6f 5f       	subi	r22, 0xFF	; 255
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	c8 01       	movw	r24, r16
    207c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN8emstream4putsEPKc>
    2080:	c8 01       	movw	r24, r16
    2082:	61 96       	adiw	r28, 0x11	; 17
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    209c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    20a0:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <xHeapHasBeenInitialised.4150>
    20a4:	81 11       	cpse	r24, r1
    20a6:	1d c0       	rjmp	.+58     	; 0x20e2 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    20a8:	a7 e2       	ldi	r26, 0x27	; 39
    20aa:	b1 e2       	ldi	r27, 0x21	; 33
    20ac:	eb e2       	ldi	r30, 0x2B	; 43
    20ae:	f1 e2       	ldi	r31, 0x21	; 33
    20b0:	ed 93       	st	X+, r30
    20b2:	fc 93       	st	X, r31
    20b4:	11 97       	sbiw	r26, 0x01	; 1
    20b6:	12 96       	adiw	r26, 0x02	; 2
    20b8:	1d 92       	st	X+, r1
    20ba:	1c 92       	st	X, r1
    20bc:	13 97       	sbiw	r26, 0x03	; 3
    20be:	a3 e2       	ldi	r26, 0x23	; 35
    20c0:	b1 e2       	ldi	r27, 0x21	; 33
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f e0       	ldi	r25, 0x0F	; 15
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	8d 93       	st	X+, r24
    20ca:	9c 93       	st	X, r25
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	1d 92       	st	X+, r1
    20d0:	1c 92       	st	X, r1
    20d2:	11 97       	sbiw	r26, 0x01	; 1
    20d4:	82 83       	std	Z+2, r24	; 0x02
    20d6:	93 83       	std	Z+3, r25	; 0x03
    20d8:	a0 83       	st	Z, r26
    20da:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    20e2:	20 97       	sbiw	r28, 0x00	; 0
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <pvPortMalloc+0x56>
    20e6:	5f c0       	rjmp	.+190    	; 0x21a6 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    20e8:	9e 01       	movw	r18, r28
    20ea:	2b 5f       	subi	r18, 0xFB	; 251
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    20ee:	24 96       	adiw	r28, 0x04	; 4
    20f0:	ce 3f       	cpi	r28, 0xFE	; 254
    20f2:	df 40       	sbci	r29, 0x0F	; 15
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <pvPortMalloc+0x66>
    20f6:	5a c0       	rjmp	.+180    	; 0x21ac <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    20f8:	e0 91 27 21 	lds	r30, 0x2127	; 0x802127 <xStart>
    20fc:	f0 91 28 21 	lds	r31, 0x2128	; 0x802128 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2100:	a7 e2       	ldi	r26, 0x27	; 39
    2102:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2104:	02 c0       	rjmp	.+4      	; 0x210a <pvPortMalloc+0x78>
    2106:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    2108:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	82 17       	cp	r24, r18
    2110:	93 07       	cpc	r25, r19
    2112:	20 f4       	brcc	.+8      	; 0x211c <pvPortMalloc+0x8a>
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	a9 f7       	brne	.-22     	; 0x2106 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    211c:	c1 e2       	ldi	r28, 0x21	; 33
    211e:	e3 32       	cpi	r30, 0x23	; 35
    2120:	fc 07       	cpc	r31, r28
    2122:	09 f4       	brne	.+2      	; 0x2126 <pvPortMalloc+0x94>
    2124:	46 c0       	rjmp	.+140    	; 0x21b2 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2126:	cd 91       	ld	r28, X+
    2128:	dc 91       	ld	r29, X
    212a:	11 97       	sbiw	r26, 0x01	; 1
    212c:	8e 01       	movw	r16, r28
    212e:	0b 5f       	subi	r16, 0xFB	; 251
    2130:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	8d 93       	st	X+, r24
    2138:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	82 1b       	sub	r24, r18
    2140:	93 0b       	sbc	r25, r19
    2142:	8b 30       	cpi	r24, 0x0B	; 11
    2144:	91 05       	cpc	r25, r1
    2146:	10 f1       	brcs	.+68     	; 0x218c <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2148:	bf 01       	movw	r22, r30
    214a:	62 0f       	add	r22, r18
    214c:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    214e:	db 01       	movw	r26, r22
    2150:	12 96       	adiw	r26, 0x02	; 2
    2152:	8d 93       	st	X+, r24
    2154:	9c 93       	st	X, r25
    2156:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2158:	22 83       	std	Z+2, r18	; 0x02
    215a:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    215c:	12 96       	adiw	r26, 0x02	; 2
    215e:	4d 91       	ld	r20, X+
    2160:	5c 91       	ld	r21, X
    2162:	13 97       	sbiw	r26, 0x03	; 3
    2164:	87 e2       	ldi	r24, 0x27	; 39
    2166:	91 e2       	ldi	r25, 0x21	; 33
    2168:	01 c0       	rjmp	.+2      	; 0x216c <pvPortMalloc+0xda>
    216a:	cd 01       	movw	r24, r26
    216c:	ec 01       	movw	r28, r24
    216e:	a8 81       	ld	r26, Y
    2170:	b9 81       	ldd	r27, Y+1	; 0x01
    2172:	12 96       	adiw	r26, 0x02	; 2
    2174:	2d 91       	ld	r18, X+
    2176:	3c 91       	ld	r19, X
    2178:	13 97       	sbiw	r26, 0x03	; 3
    217a:	24 17       	cp	r18, r20
    217c:	35 07       	cpc	r19, r21
    217e:	a8 f3       	brcs	.-22     	; 0x216a <pvPortMalloc+0xd8>
    2180:	eb 01       	movw	r28, r22
    2182:	a8 83       	st	Y, r26
    2184:	b9 83       	std	Y+1, r27	; 0x01
    2186:	dc 01       	movw	r26, r24
    2188:	6d 93       	st	X+, r22
    218a:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    218c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2190:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2194:	22 81       	ldd	r18, Z+2	; 0x02
    2196:	33 81       	ldd	r19, Z+3	; 0x03
    2198:	82 1b       	sub	r24, r18
    219a:	93 0b       	sbc	r25, r19
    219c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    21a0:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    21a6:	00 e0       	ldi	r16, 0x00	; 0
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <pvPortMalloc+0x124>
    21ac:	00 e0       	ldi	r16, 0x00	; 0
    21ae:	10 e0       	ldi	r17, 0x00	; 0
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <pvPortMalloc+0x124>
    21b2:	00 e0       	ldi	r16, 0x00	; 0
    21b4:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    21b6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    21ba:	c8 01       	movw	r24, r16
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	08 95       	ret

000021c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	41 f1       	breq	.+80     	; 0x2222 <vPortFree+0x5c>
    21d2:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    21d4:	8c 01       	movw	r16, r24
    21d6:	05 50       	subi	r16, 0x05	; 5
    21d8:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    21da:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    21de:	f8 01       	movw	r30, r16
    21e0:	42 81       	ldd	r20, Z+2	; 0x02
    21e2:	53 81       	ldd	r21, Z+3	; 0x03
    21e4:	a7 e2       	ldi	r26, 0x27	; 39
    21e6:	b1 e2       	ldi	r27, 0x21	; 33
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <vPortFree+0x26>
    21ea:	df 01       	movw	r26, r30
    21ec:	ed 91       	ld	r30, X+
    21ee:	fc 91       	ld	r31, X
    21f0:	11 97       	sbiw	r26, 0x01	; 1
    21f2:	22 81       	ldd	r18, Z+2	; 0x02
    21f4:	33 81       	ldd	r19, Z+3	; 0x03
    21f6:	24 17       	cp	r18, r20
    21f8:	35 07       	cpc	r19, r21
    21fa:	b8 f3       	brcs	.-18     	; 0x21ea <vPortFree+0x24>
    21fc:	25 97       	sbiw	r28, 0x05	; 5
    21fe:	e8 83       	st	Y, r30
    2200:	f9 83       	std	Y+1, r31	; 0x01
    2202:	0d 93       	st	X+, r16
    2204:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2206:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    220a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	9b 81       	ldd	r25, Y+3	; 0x03
    2212:	82 0f       	add	r24, r18
    2214:	93 1f       	adc	r25, r19
    2216:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    221a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    221e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
	}
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    222c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2230:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2234:	08 95       	ret

00002236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2236:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2238:	03 96       	adiw	r24, 0x03	; 3
    223a:	81 83       	std	Z+1, r24	; 0x01
    223c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    223e:	4f ef       	ldi	r20, 0xFF	; 255
    2240:	5f ef       	ldi	r21, 0xFF	; 255
    2242:	ba 01       	movw	r22, r20
    2244:	43 83       	std	Z+3, r20	; 0x03
    2246:	54 83       	std	Z+4, r21	; 0x04
    2248:	65 83       	std	Z+5, r22	; 0x05
    224a:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    224c:	87 83       	std	Z+7, r24	; 0x07
    224e:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2250:	81 87       	std	Z+9, r24	; 0x09
    2252:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2254:	10 82       	st	Z, r1
    2256:	08 95       	ret

00002258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2258:	fc 01       	movw	r30, r24
    225a:	12 86       	std	Z+10, r1	; 0x0a
    225c:	13 86       	std	Z+11, r1	; 0x0b
    225e:	08 95       	ret

00002260 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	fc 01       	movw	r30, r24
    2266:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2268:	21 81       	ldd	r18, Z+1	; 0x01
    226a:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    226c:	e9 01       	movw	r28, r18
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	14 96       	adiw	r26, 0x04	; 4
    2274:	8d 93       	st	X+, r24
    2276:	9c 93       	st	X, r25
    2278:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    227a:	81 81       	ldd	r24, Z+1	; 0x01
    227c:	92 81       	ldd	r25, Z+2	; 0x02
    227e:	16 96       	adiw	r26, 0x06	; 6
    2280:	8d 93       	st	X+, r24
    2282:	9c 93       	st	X, r25
    2284:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	ec 01       	movw	r28, r24
    228c:	6e 83       	std	Y+6, r22	; 0x06
    228e:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2290:	e9 01       	movw	r28, r18
    2292:	6c 83       	std	Y+4, r22	; 0x04
    2294:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2296:	61 83       	std	Z+1, r22	; 0x01
    2298:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    229a:	1a 96       	adiw	r26, 0x0a	; 10
    229c:	ed 93       	st	X+, r30
    229e:	fc 93       	st	X, r31
    22a0:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 83       	st	Z, r24
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    22b8:	08 81       	ld	r16, Y
    22ba:	19 81       	ldd	r17, Y+1	; 0x01
    22bc:	2a 81       	ldd	r18, Y+2	; 0x02
    22be:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    22c0:	0f 3f       	cpi	r16, 0xFF	; 255
    22c2:	4f ef       	ldi	r20, 0xFF	; 255
    22c4:	14 07       	cpc	r17, r20
    22c6:	24 07       	cpc	r18, r20
    22c8:	34 07       	cpc	r19, r20
    22ca:	31 f4       	brne	.+12     	; 0x22d8 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    22cc:	dc 01       	movw	r26, r24
    22ce:	19 96       	adiw	r26, 0x09	; 9
    22d0:	ed 91       	ld	r30, X+
    22d2:	fc 91       	ld	r31, X
    22d4:	1a 97       	sbiw	r26, 0x0a	; 10
    22d6:	1f c0       	rjmp	.+62     	; 0x2316 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    22d8:	fc 01       	movw	r30, r24
    22da:	33 96       	adiw	r30, 0x03	; 3
    22dc:	dc 01       	movw	r26, r24
    22de:	17 96       	adiw	r26, 0x07	; 7
    22e0:	4d 91       	ld	r20, X+
    22e2:	5c 91       	ld	r21, X
    22e4:	18 97       	sbiw	r26, 0x08	; 8
    22e6:	da 01       	movw	r26, r20
    22e8:	4d 91       	ld	r20, X+
    22ea:	5d 91       	ld	r21, X+
    22ec:	6d 91       	ld	r22, X+
    22ee:	7c 91       	ld	r23, X
    22f0:	04 17       	cp	r16, r20
    22f2:	15 07       	cpc	r17, r21
    22f4:	26 07       	cpc	r18, r22
    22f6:	37 07       	cpc	r19, r23
    22f8:	70 f0       	brcs	.+28     	; 0x2316 <vListInsert+0x68>
    22fa:	04 80       	ldd	r0, Z+4	; 0x04
    22fc:	f5 81       	ldd	r31, Z+5	; 0x05
    22fe:	e0 2d       	mov	r30, r0
    2300:	a4 81       	ldd	r26, Z+4	; 0x04
    2302:	b5 81       	ldd	r27, Z+5	; 0x05
    2304:	4d 91       	ld	r20, X+
    2306:	5d 91       	ld	r21, X+
    2308:	6d 91       	ld	r22, X+
    230a:	7c 91       	ld	r23, X
    230c:	04 17       	cp	r16, r20
    230e:	15 07       	cpc	r17, r21
    2310:	26 07       	cpc	r18, r22
    2312:	37 07       	cpc	r19, r23
    2314:	90 f7       	brcc	.-28     	; 0x22fa <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2316:	a4 81       	ldd	r26, Z+4	; 0x04
    2318:	b5 81       	ldd	r27, Z+5	; 0x05
    231a:	ac 83       	std	Y+4, r26	; 0x04
    231c:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    231e:	16 96       	adiw	r26, 0x06	; 6
    2320:	cd 93       	st	X+, r28
    2322:	dc 93       	st	X, r29
    2324:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2326:	ee 83       	std	Y+6, r30	; 0x06
    2328:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    232a:	c4 83       	std	Z+4, r28	; 0x04
    232c:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    232e:	8a 87       	std	Y+10, r24	; 0x0a
    2330:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2332:	fc 01       	movw	r30, r24
    2334:	20 81       	ld	r18, Z
    2336:	2f 5f       	subi	r18, 0xFF	; 255
    2338:	20 83       	st	Z, r18
}
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	08 95       	ret

00002344 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2344:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2346:	a4 81       	ldd	r26, Z+4	; 0x04
    2348:	b5 81       	ldd	r27, Z+5	; 0x05
    234a:	86 81       	ldd	r24, Z+6	; 0x06
    234c:	97 81       	ldd	r25, Z+7	; 0x07
    234e:	16 96       	adiw	r26, 0x06	; 6
    2350:	8d 93       	st	X+, r24
    2352:	9c 93       	st	X, r25
    2354:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2356:	a6 81       	ldd	r26, Z+6	; 0x06
    2358:	b7 81       	ldd	r27, Z+7	; 0x07
    235a:	84 81       	ldd	r24, Z+4	; 0x04
    235c:	95 81       	ldd	r25, Z+5	; 0x05
    235e:	14 96       	adiw	r26, 0x04	; 4
    2360:	8d 93       	st	X+, r24
    2362:	9c 93       	st	X, r25
    2364:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2366:	a2 85       	ldd	r26, Z+10	; 0x0a
    2368:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    236a:	11 96       	adiw	r26, 0x01	; 1
    236c:	8d 91       	ld	r24, X+
    236e:	9c 91       	ld	r25, X
    2370:	12 97       	sbiw	r26, 0x02	; 2
    2372:	e8 17       	cp	r30, r24
    2374:	f9 07       	cpc	r31, r25
    2376:	31 f4       	brne	.+12     	; 0x2384 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2378:	86 81       	ldd	r24, Z+6	; 0x06
    237a:	97 81       	ldd	r25, Z+7	; 0x07
    237c:	11 96       	adiw	r26, 0x01	; 1
    237e:	8d 93       	st	X+, r24
    2380:	9c 93       	st	X, r25
    2382:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2384:	12 86       	std	Z+10, r1	; 0x0a
    2386:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2388:	8c 91       	ld	r24, X
    238a:	81 50       	subi	r24, 0x01	; 1
    238c:	8c 93       	st	X, r24
    238e:	08 95       	ret

00002390 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2390:	80 93 8c 31 	sts	0x318C, r24	; 0x80318c <portStackTopForTask>
    2394:	90 93 8d 31 	sts	0x318D, r25	; 0x80318d <portStackTopForTask+0x1>
    2398:	31 e1       	ldi	r19, 0x11	; 17
    239a:	fc 01       	movw	r30, r24
    239c:	30 83       	st	Z, r19
    239e:	31 97       	sbiw	r30, 0x01	; 1
    23a0:	22 e2       	ldi	r18, 0x22	; 34
    23a2:	20 83       	st	Z, r18
    23a4:	31 97       	sbiw	r30, 0x01	; 1
    23a6:	a3 e3       	ldi	r26, 0x33	; 51
    23a8:	a0 83       	st	Z, r26
    23aa:	31 97       	sbiw	r30, 0x01	; 1
    23ac:	60 83       	st	Z, r22
    23ae:	31 97       	sbiw	r30, 0x01	; 1
    23b0:	70 83       	st	Z, r23
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	10 82       	st	Z, r1
    23b6:	31 97       	sbiw	r30, 0x01	; 1
    23b8:	10 82       	st	Z, r1
    23ba:	31 97       	sbiw	r30, 0x01	; 1
    23bc:	60 e8       	ldi	r22, 0x80	; 128
    23be:	60 83       	st	Z, r22
    23c0:	31 97       	sbiw	r30, 0x01	; 1
    23c2:	10 82       	st	Z, r1
    23c4:	31 97       	sbiw	r30, 0x01	; 1
    23c6:	10 82       	st	Z, r1
    23c8:	31 97       	sbiw	r30, 0x01	; 1
    23ca:	10 82       	st	Z, r1
    23cc:	31 97       	sbiw	r30, 0x01	; 1
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	60 83       	st	Z, r22
    23d2:	31 97       	sbiw	r30, 0x01	; 1
    23d4:	63 e0       	ldi	r22, 0x03	; 3
    23d6:	60 83       	st	Z, r22
    23d8:	31 97       	sbiw	r30, 0x01	; 1
    23da:	64 e0       	ldi	r22, 0x04	; 4
    23dc:	60 83       	st	Z, r22
    23de:	31 97       	sbiw	r30, 0x01	; 1
    23e0:	65 e0       	ldi	r22, 0x05	; 5
    23e2:	60 83       	st	Z, r22
    23e4:	31 97       	sbiw	r30, 0x01	; 1
    23e6:	66 e0       	ldi	r22, 0x06	; 6
    23e8:	60 83       	st	Z, r22
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	67 e0       	ldi	r22, 0x07	; 7
    23ee:	60 83       	st	Z, r22
    23f0:	31 97       	sbiw	r30, 0x01	; 1
    23f2:	68 e0       	ldi	r22, 0x08	; 8
    23f4:	60 83       	st	Z, r22
    23f6:	31 97       	sbiw	r30, 0x01	; 1
    23f8:	69 e0       	ldi	r22, 0x09	; 9
    23fa:	60 83       	st	Z, r22
    23fc:	31 97       	sbiw	r30, 0x01	; 1
    23fe:	60 e1       	ldi	r22, 0x10	; 16
    2400:	60 83       	st	Z, r22
    2402:	31 97       	sbiw	r30, 0x01	; 1
    2404:	30 83       	st	Z, r19
    2406:	31 97       	sbiw	r30, 0x01	; 1
    2408:	32 e1       	ldi	r19, 0x12	; 18
    240a:	30 83       	st	Z, r19
    240c:	31 97       	sbiw	r30, 0x01	; 1
    240e:	33 e1       	ldi	r19, 0x13	; 19
    2410:	30 83       	st	Z, r19
    2412:	31 97       	sbiw	r30, 0x01	; 1
    2414:	34 e1       	ldi	r19, 0x14	; 20
    2416:	30 83       	st	Z, r19
    2418:	31 97       	sbiw	r30, 0x01	; 1
    241a:	35 e1       	ldi	r19, 0x15	; 21
    241c:	30 83       	st	Z, r19
    241e:	31 97       	sbiw	r30, 0x01	; 1
    2420:	36 e1       	ldi	r19, 0x16	; 22
    2422:	30 83       	st	Z, r19
    2424:	31 97       	sbiw	r30, 0x01	; 1
    2426:	37 e1       	ldi	r19, 0x17	; 23
    2428:	30 83       	st	Z, r19
    242a:	31 97       	sbiw	r30, 0x01	; 1
    242c:	38 e1       	ldi	r19, 0x18	; 24
    242e:	30 83       	st	Z, r19
    2430:	31 97       	sbiw	r30, 0x01	; 1
    2432:	39 e1       	ldi	r19, 0x19	; 25
    2434:	30 83       	st	Z, r19
    2436:	31 97       	sbiw	r30, 0x01	; 1
    2438:	30 e2       	ldi	r19, 0x20	; 32
    243a:	30 83       	st	Z, r19
    243c:	31 97       	sbiw	r30, 0x01	; 1
    243e:	31 e2       	ldi	r19, 0x21	; 33
    2440:	30 83       	st	Z, r19
    2442:	31 97       	sbiw	r30, 0x01	; 1
    2444:	20 83       	st	Z, r18
    2446:	31 97       	sbiw	r30, 0x01	; 1
    2448:	23 e2       	ldi	r18, 0x23	; 35
    244a:	20 83       	st	Z, r18
    244c:	31 97       	sbiw	r30, 0x01	; 1
    244e:	40 83       	st	Z, r20
    2450:	31 97       	sbiw	r30, 0x01	; 1
    2452:	50 83       	st	Z, r21
    2454:	31 97       	sbiw	r30, 0x01	; 1
    2456:	26 e2       	ldi	r18, 0x26	; 38
    2458:	20 83       	st	Z, r18
    245a:	31 97       	sbiw	r30, 0x01	; 1
    245c:	27 e2       	ldi	r18, 0x27	; 39
    245e:	20 83       	st	Z, r18
    2460:	31 97       	sbiw	r30, 0x01	; 1
    2462:	28 e2       	ldi	r18, 0x28	; 40
    2464:	20 83       	st	Z, r18
    2466:	31 97       	sbiw	r30, 0x01	; 1
    2468:	29 e2       	ldi	r18, 0x29	; 41
    246a:	20 83       	st	Z, r18
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	20 e3       	ldi	r18, 0x30	; 48
    2470:	20 83       	st	Z, r18
    2472:	31 97       	sbiw	r30, 0x01	; 1
    2474:	21 e3       	ldi	r18, 0x31	; 49
    2476:	20 83       	st	Z, r18
    2478:	89 97       	sbiw	r24, 0x29	; 41
    247a:	08 95       	ret

0000247c <xPortStartScheduler>:
    247c:	8c e7       	ldi	r24, 0x7C	; 124
    247e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2482:	8f ef       	ldi	r24, 0xFF	; 255
    2484:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    248e:	91 e1       	ldi	r25, 0x11	; 17
    2490:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2494:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2498:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    249c:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    24a0:	cd 91       	ld	r28, X+
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	dd 91       	ld	r29, X+
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	ff 91       	pop	r31
    24aa:	ef 91       	pop	r30
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	bf 90       	pop	r11
    24d2:	af 90       	pop	r10
    24d4:	9f 90       	pop	r9
    24d6:	8f 90       	pop	r8
    24d8:	7f 90       	pop	r7
    24da:	6f 90       	pop	r6
    24dc:	5f 90       	pop	r5
    24de:	4f 90       	pop	r4
    24e0:	3f 90       	pop	r3
    24e2:	2f 90       	pop	r2
    24e4:	1f 90       	pop	r1
    24e6:	0f 90       	pop	r0
    24e8:	0c be       	out	0x3c, r0	; 60
    24ea:	0f 90       	pop	r0
    24ec:	0b be       	out	0x3b, r0	; 59
    24ee:	0f 90       	pop	r0
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	0f 90       	pop	r0
    24f4:	08 95       	ret
    24f6:	08 95       	ret

000024f8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	0f 92       	push	r0
    2500:	0b b6       	in	r0, 0x3b	; 59
    2502:	0f 92       	push	r0
    2504:	0c b6       	in	r0, 0x3c	; 60
    2506:	0f 92       	push	r0
    2508:	1f 92       	push	r1
    250a:	11 24       	eor	r1, r1
    250c:	2f 92       	push	r2
    250e:	3f 92       	push	r3
    2510:	4f 92       	push	r4
    2512:	5f 92       	push	r5
    2514:	6f 92       	push	r6
    2516:	7f 92       	push	r7
    2518:	8f 92       	push	r8
    251a:	9f 92       	push	r9
    251c:	af 92       	push	r10
    251e:	bf 92       	push	r11
    2520:	cf 92       	push	r12
    2522:	df 92       	push	r13
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	2f 93       	push	r18
    252e:	3f 93       	push	r19
    2530:	4f 93       	push	r20
    2532:	5f 93       	push	r21
    2534:	6f 93       	push	r22
    2536:	7f 93       	push	r23
    2538:	8f 93       	push	r24
    253a:	9f 93       	push	r25
    253c:	af 93       	push	r26
    253e:	bf 93       	push	r27
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	ef 93       	push	r30
    2546:	ff 93       	push	r31
    2548:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    254c:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2550:	0d b6       	in	r0, 0x3d	; 61
    2552:	0d 92       	st	X+, r0
    2554:	0e b6       	in	r0, 0x3e	; 62
    2556:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2558:	0e 94 9c 19 	call	0x3338	; 0x3338 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    255c:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    2560:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2564:	cd 91       	ld	r28, X+
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	dd 91       	ld	r29, X+
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	bf 91       	pop	r27
    2576:	af 91       	pop	r26
    2578:	9f 91       	pop	r25
    257a:	8f 91       	pop	r24
    257c:	7f 91       	pop	r23
    257e:	6f 91       	pop	r22
    2580:	5f 91       	pop	r21
    2582:	4f 91       	pop	r20
    2584:	3f 91       	pop	r19
    2586:	2f 91       	pop	r18
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	df 90       	pop	r13
    2592:	cf 90       	pop	r12
    2594:	bf 90       	pop	r11
    2596:	af 90       	pop	r10
    2598:	9f 90       	pop	r9
    259a:	8f 90       	pop	r8
    259c:	7f 90       	pop	r7
    259e:	6f 90       	pop	r6
    25a0:	5f 90       	pop	r5
    25a2:	4f 90       	pop	r4
    25a4:	3f 90       	pop	r3
    25a6:	2f 90       	pop	r2
    25a8:	1f 90       	pop	r1
    25aa:	0f 90       	pop	r0
    25ac:	0c be       	out	0x3c, r0	; 60
    25ae:	0f 90       	pop	r0
    25b0:	0b be       	out	0x3b, r0	; 59
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    25b8:	08 95       	ret

000025ba <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    25ba:	0f 92       	push	r0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	0f 92       	push	r0
    25c2:	0b b6       	in	r0, 0x3b	; 59
    25c4:	0f 92       	push	r0
    25c6:	0c b6       	in	r0, 0x3c	; 60
    25c8:	0f 92       	push	r0
    25ca:	1f 92       	push	r1
    25cc:	11 24       	eor	r1, r1
    25ce:	2f 92       	push	r2
    25d0:	3f 92       	push	r3
    25d2:	4f 92       	push	r4
    25d4:	5f 92       	push	r5
    25d6:	6f 92       	push	r6
    25d8:	7f 92       	push	r7
    25da:	8f 92       	push	r8
    25dc:	9f 92       	push	r9
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	2f 93       	push	r18
    25f0:	3f 93       	push	r19
    25f2:	4f 93       	push	r20
    25f4:	5f 93       	push	r21
    25f6:	6f 93       	push	r22
    25f8:	7f 93       	push	r23
    25fa:	8f 93       	push	r24
    25fc:	9f 93       	push	r25
    25fe:	af 93       	push	r26
    2600:	bf 93       	push	r27
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ef 93       	push	r30
    2608:	ff 93       	push	r31
    260a:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    260e:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2612:	0d b6       	in	r0, 0x3d	; 61
    2614:	0d 92       	st	X+, r0
    2616:	0e b6       	in	r0, 0x3e	; 62
    2618:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    261a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <vTaskIncrementTick>
	vTaskSwitchContext();
    261e:	0e 94 9c 19 	call	0x3338	; 0x3338 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2622:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    2626:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    262a:	cd 91       	ld	r28, X+
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	dd 91       	ld	r29, X+
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	ff 91       	pop	r31
    2634:	ef 91       	pop	r30
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	bf 90       	pop	r11
    265c:	af 90       	pop	r10
    265e:	9f 90       	pop	r9
    2660:	8f 90       	pop	r8
    2662:	7f 90       	pop	r7
    2664:	6f 90       	pop	r6
    2666:	5f 90       	pop	r5
    2668:	4f 90       	pop	r4
    266a:	3f 90       	pop	r3
    266c:	2f 90       	pop	r2
    266e:	1f 90       	pop	r1
    2670:	0f 90       	pop	r0
    2672:	0c be       	out	0x3c, r0	; 60
    2674:	0f 90       	pop	r0
    2676:	0b be       	out	0x3b, r0	; 59
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    267e:	08 95       	ret

00002680 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2680:	0e 94 dd 12 	call	0x25ba	; 0x25ba <vPortYieldFromTick>
		asm volatile ( "reti" );
    2684:	18 95       	reti

00002686 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
    268c:	88 a1       	ldd	r24, Y+32	; 0x20
    268e:	81 11       	cpse	r24, r1
    2690:	0b c0       	rjmp	.+22     	; 0x26a8 <prvCopyDataToQueue+0x22>
    2692:	88 81       	ld	r24, Y
    2694:	99 81       	ldd	r25, Y+1	; 0x01
    2696:	89 2b       	or	r24, r25
    2698:	e1 f5       	brne	.+120    	; 0x2712 <prvCopyDataToQueue+0x8c>
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <vTaskPriorityDisinherit>
    26a2:	1a 82       	std	Y+2, r1	; 0x02
    26a4:	1b 82       	std	Y+3, r1	; 0x03
    26a6:	35 c0       	rjmp	.+106    	; 0x2712 <prvCopyDataToQueue+0x8c>
    26a8:	41 11       	cpse	r20, r1
    26aa:	17 c0       	rjmp	.+46     	; 0x26da <prvCopyDataToQueue+0x54>
    26ac:	48 2f       	mov	r20, r24
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	9d 81       	ldd	r25, Y+5	; 0x05
    26b4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <memcpy>
    26b8:	28 a1       	ldd	r18, Y+32	; 0x20
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	9d 81       	ldd	r25, Y+5	; 0x05
    26be:	82 0f       	add	r24, r18
    26c0:	91 1d       	adc	r25, r1
    26c2:	8c 83       	std	Y+4, r24	; 0x04
    26c4:	9d 83       	std	Y+5, r25	; 0x05
    26c6:	2a 81       	ldd	r18, Y+2	; 0x02
    26c8:	3b 81       	ldd	r19, Y+3	; 0x03
    26ca:	82 17       	cp	r24, r18
    26cc:	93 07       	cpc	r25, r19
    26ce:	08 f1       	brcs	.+66     	; 0x2712 <prvCopyDataToQueue+0x8c>
    26d0:	88 81       	ld	r24, Y
    26d2:	99 81       	ldd	r25, Y+1	; 0x01
    26d4:	8c 83       	std	Y+4, r24	; 0x04
    26d6:	9d 83       	std	Y+5, r25	; 0x05
    26d8:	1c c0       	rjmp	.+56     	; 0x2712 <prvCopyDataToQueue+0x8c>
    26da:	48 2f       	mov	r20, r24
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <memcpy>
    26e6:	88 a1       	ldd	r24, Y+32	; 0x20
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	91 95       	neg	r25
    26ec:	81 95       	neg	r24
    26ee:	91 09       	sbc	r25, r1
    26f0:	2e 81       	ldd	r18, Y+6	; 0x06
    26f2:	3f 81       	ldd	r19, Y+7	; 0x07
    26f4:	28 0f       	add	r18, r24
    26f6:	39 1f       	adc	r19, r25
    26f8:	2e 83       	std	Y+6, r18	; 0x06
    26fa:	3f 83       	std	Y+7, r19	; 0x07
    26fc:	48 81       	ld	r20, Y
    26fe:	59 81       	ldd	r21, Y+1	; 0x01
    2700:	24 17       	cp	r18, r20
    2702:	35 07       	cpc	r19, r21
    2704:	30 f4       	brcc	.+12     	; 0x2712 <prvCopyDataToQueue+0x8c>
    2706:	2a 81       	ldd	r18, Y+2	; 0x02
    2708:	3b 81       	ldd	r19, Y+3	; 0x03
    270a:	82 0f       	add	r24, r18
    270c:	93 1f       	adc	r25, r19
    270e:	8e 83       	std	Y+6, r24	; 0x06
    2710:	9f 83       	std	Y+7, r25	; 0x07
    2712:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	8e 8f       	std	Y+30, r24	; 0x1e
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	08 95       	ret

0000271e <prvCopyDataFromQueue>:
    271e:	fc 01       	movw	r30, r24
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 f0       	breq	.+40     	; 0x2750 <prvCopyDataFromQueue+0x32>
    2728:	40 a1       	ldd	r20, Z+32	; 0x20
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	26 81       	ldd	r18, Z+6	; 0x06
    272e:	37 81       	ldd	r19, Z+7	; 0x07
    2730:	24 0f       	add	r18, r20
    2732:	35 1f       	adc	r19, r21
    2734:	26 83       	std	Z+6, r18	; 0x06
    2736:	37 83       	std	Z+7, r19	; 0x07
    2738:	a2 81       	ldd	r26, Z+2	; 0x02
    273a:	b3 81       	ldd	r27, Z+3	; 0x03
    273c:	2a 17       	cp	r18, r26
    273e:	3b 07       	cpc	r19, r27
    2740:	10 f0       	brcs	.+4      	; 0x2746 <prvCopyDataFromQueue+0x28>
    2742:	86 83       	std	Z+6, r24	; 0x06
    2744:	97 83       	std	Z+7, r25	; 0x07
    2746:	cb 01       	movw	r24, r22
    2748:	66 81       	ldd	r22, Z+6	; 0x06
    274a:	77 81       	ldd	r23, Z+7	; 0x07
    274c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <memcpy>
    2750:	08 95       	ret

00002752 <prvUnlockQueue>:
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	ec 01       	movw	r28, r24
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	0f 92       	push	r0
    2762:	8a a1       	ldd	r24, Y+34	; 0x22
    2764:	18 16       	cp	r1, r24
    2766:	b4 f4       	brge	.+44     	; 0x2794 <prvUnlockQueue+0x42>
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	81 11       	cpse	r24, r1
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <prvUnlockQueue+0x26>
    276e:	12 c0       	rjmp	.+36     	; 0x2794 <prvUnlockQueue+0x42>
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	81 11       	cpse	r24, r1
    2774:	04 c0       	rjmp	.+8      	; 0x277e <prvUnlockQueue+0x2c>
    2776:	0e c0       	rjmp	.+28     	; 0x2794 <prvUnlockQueue+0x42>
    2778:	8e 01       	movw	r16, r28
    277a:	0d 5e       	subi	r16, 0xED	; 237
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	c8 01       	movw	r24, r16
    2780:	0e 94 23 1a 	call	0x3446	; 0x3446 <xTaskRemoveFromEventList>
    2784:	81 11       	cpse	r24, r1
    2786:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <vTaskMissedYield>
    278a:	8a a1       	ldd	r24, Y+34	; 0x22
    278c:	81 50       	subi	r24, 0x01	; 1
    278e:	8a a3       	std	Y+34, r24	; 0x22
    2790:	18 16       	cp	r1, r24
    2792:	74 f3       	brlt	.-36     	; 0x2770 <prvUnlockQueue+0x1e>
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	8a a3       	std	Y+34, r24	; 0x22
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	0f 92       	push	r0
    27a2:	89 a1       	ldd	r24, Y+33	; 0x21
    27a4:	18 16       	cp	r1, r24
    27a6:	b4 f4       	brge	.+44     	; 0x27d4 <prvUnlockQueue+0x82>
    27a8:	88 85       	ldd	r24, Y+8	; 0x08
    27aa:	81 11       	cpse	r24, r1
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <prvUnlockQueue+0x66>
    27ae:	12 c0       	rjmp	.+36     	; 0x27d4 <prvUnlockQueue+0x82>
    27b0:	88 85       	ldd	r24, Y+8	; 0x08
    27b2:	81 11       	cpse	r24, r1
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <prvUnlockQueue+0x6c>
    27b6:	0e c0       	rjmp	.+28     	; 0x27d4 <prvUnlockQueue+0x82>
    27b8:	8e 01       	movw	r16, r28
    27ba:	08 5f       	subi	r16, 0xF8	; 248
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	c8 01       	movw	r24, r16
    27c0:	0e 94 23 1a 	call	0x3446	; 0x3446 <xTaskRemoveFromEventList>
    27c4:	81 11       	cpse	r24, r1
    27c6:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <vTaskMissedYield>
    27ca:	89 a1       	ldd	r24, Y+33	; 0x21
    27cc:	81 50       	subi	r24, 0x01	; 1
    27ce:	89 a3       	std	Y+33, r24	; 0x21
    27d0:	18 16       	cp	r1, r24
    27d2:	74 f3       	brlt	.-36     	; 0x27b0 <prvUnlockQueue+0x5e>
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	89 a3       	std	Y+33, r24	; 0x21
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	08 95       	ret

000027e6 <xQueueGenericReset>:
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	61 30       	cpi	r22, 0x01	; 1
    27ee:	59 f0       	breq	.+22     	; 0x2806 <xQueueGenericReset+0x20>
    27f0:	fc 01       	movw	r30, r24
    27f2:	23 89       	ldd	r18, Z+19	; 0x13
    27f4:	30 85       	ldd	r19, Z+8	; 0x08
    27f6:	31 11       	cpse	r19, r1
    27f8:	2c c0       	rjmp	.+88     	; 0x2852 <xQueueGenericReset+0x6c>
    27fa:	11 e0       	ldi	r17, 0x01	; 1
    27fc:	21 11       	cpse	r18, r1
    27fe:	10 e0       	ldi	r17, 0x00	; 0
    2800:	21 11       	cpse	r18, r1
    2802:	28 c0       	rjmp	.+80     	; 0x2854 <xQueueGenericReset+0x6e>
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <xQueueGenericReset+0x22>
    2806:	11 e0       	ldi	r17, 0x01	; 1
    2808:	ec 01       	movw	r28, r24
    280a:	48 81       	ld	r20, Y
    280c:	59 81       	ldd	r21, Y+1	; 0x01
    280e:	28 a1       	ldd	r18, Y+32	; 0x20
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2814:	62 9f       	mul	r22, r18
    2816:	c0 01       	movw	r24, r0
    2818:	63 9f       	mul	r22, r19
    281a:	90 0d       	add	r25, r0
    281c:	11 24       	eor	r1, r1
    281e:	ba 01       	movw	r22, r20
    2820:	68 0f       	add	r22, r24
    2822:	79 1f       	adc	r23, r25
    2824:	6a 83       	std	Y+2, r22	; 0x02
    2826:	7b 83       	std	Y+3, r23	; 0x03
    2828:	1e 8e       	std	Y+30, r1	; 0x1e
    282a:	4c 83       	std	Y+4, r20	; 0x04
    282c:	5d 83       	std	Y+5, r21	; 0x05
    282e:	82 1b       	sub	r24, r18
    2830:	93 0b       	sbc	r25, r19
    2832:	84 0f       	add	r24, r20
    2834:	95 1f       	adc	r25, r21
    2836:	8e 83       	std	Y+6, r24	; 0x06
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	89 a3       	std	Y+33, r24	; 0x21
    283e:	8a a3       	std	Y+34, r24	; 0x22
    2840:	ce 01       	movw	r24, r28
    2842:	08 96       	adiw	r24, 0x08	; 8
    2844:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2848:	ce 01       	movw	r24, r28
    284a:	43 96       	adiw	r24, 0x13	; 19
    284c:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <xQueueGenericReset+0x6e>
    2852:	10 e0       	ldi	r17, 0x00	; 0
    2854:	81 2f       	mov	r24, r17
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	08 95       	ret

0000285e <xQueueGenericCreate>:
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	88 23       	and	r24, r24
    2868:	01 f1       	breq	.+64     	; 0x28aa <xQueueGenericCreate+0x4c>
    286a:	06 2f       	mov	r16, r22
    286c:	18 2f       	mov	r17, r24
    286e:	83 e2       	ldi	r24, 0x23	; 35
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    2876:	ec 01       	movw	r28, r24
    2878:	89 2b       	or	r24, r25
    287a:	c9 f0       	breq	.+50     	; 0x28ae <xQueueGenericCreate+0x50>
    287c:	10 9f       	mul	r17, r16
    287e:	c0 01       	movw	r24, r0
    2880:	11 24       	eor	r1, r1
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    2888:	88 83       	st	Y, r24
    288a:	99 83       	std	Y+1, r25	; 0x01
    288c:	89 2b       	or	r24, r25
    288e:	39 f0       	breq	.+14     	; 0x289e <xQueueGenericCreate+0x40>
    2890:	1f 8f       	std	Y+31, r17	; 0x1f
    2892:	08 a3       	std	Y+32, r16	; 0x20
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	ce 01       	movw	r24, r28
    2898:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <xQueueGenericReset>
    289c:	08 c0       	rjmp	.+16     	; 0x28ae <xQueueGenericCreate+0x50>
    289e:	ce 01       	movw	r24, r28
    28a0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <vPortFree>
    28a4:	c0 e0       	ldi	r28, 0x00	; 0
    28a6:	d0 e0       	ldi	r29, 0x00	; 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <xQueueGenericCreate+0x50>
    28aa:	c0 e0       	ldi	r28, 0x00	; 0
    28ac:	d0 e0       	ldi	r29, 0x00	; 0
    28ae:	ce 01       	movw	r24, r28
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <xQueueGenericSend>:
    28ba:	af 92       	push	r10
    28bc:	bf 92       	push	r11
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	29 97       	sbiw	r28, 0x09	; 9
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	7c 01       	movw	r14, r24
    28da:	5b 01       	movw	r10, r22
    28dc:	2e 83       	std	Y+6, r18	; 0x06
    28de:	3f 83       	std	Y+7, r19	; 0x07
    28e0:	48 87       	std	Y+8, r20	; 0x08
    28e2:	59 87       	std	Y+9, r21	; 0x09
    28e4:	10 e0       	ldi	r17, 0x00	; 0
    28e6:	6c 01       	movw	r12, r24
    28e8:	88 e0       	ldi	r24, 0x08	; 8
    28ea:	c8 0e       	add	r12, r24
    28ec:	d1 1c       	adc	r13, r1
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	0f 92       	push	r0
    28f4:	f7 01       	movw	r30, r14
    28f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    28f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    28fa:	98 17       	cp	r25, r24
    28fc:	a8 f4       	brcc	.+42     	; 0x2928 <xQueueGenericSend+0x6e>
    28fe:	40 2f       	mov	r20, r16
    2900:	b5 01       	movw	r22, r10
    2902:	c7 01       	movw	r24, r14
    2904:	0e 94 43 13 	call	0x2686	; 0x2686 <prvCopyDataToQueue>
    2908:	f7 01       	movw	r30, r14
    290a:	83 89       	ldd	r24, Z+19	; 0x13
    290c:	88 23       	and	r24, r24
    290e:	41 f0       	breq	.+16     	; 0x2920 <xQueueGenericSend+0x66>
    2910:	c7 01       	movw	r24, r14
    2912:	43 96       	adiw	r24, 0x13	; 19
    2914:	0e 94 23 1a 	call	0x3446	; 0x3446 <xTaskRemoveFromEventList>
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	11 f4       	brne	.+4      	; 0x2920 <xQueueGenericSend+0x66>
    291c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2920:	0f 90       	pop	r0
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	56 c0       	rjmp	.+172    	; 0x29d4 <xQueueGenericSend+0x11a>
    2928:	8e 81       	ldd	r24, Y+6	; 0x06
    292a:	9f 81       	ldd	r25, Y+7	; 0x07
    292c:	a8 85       	ldd	r26, Y+8	; 0x08
    292e:	b9 85       	ldd	r27, Y+9	; 0x09
    2930:	89 2b       	or	r24, r25
    2932:	8a 2b       	or	r24, r26
    2934:	8b 2b       	or	r24, r27
    2936:	21 f4       	brne	.+8      	; 0x2940 <xQueueGenericSend+0x86>
    2938:	0f 90       	pop	r0
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	4a c0       	rjmp	.+148    	; 0x29d4 <xQueueGenericSend+0x11a>
    2940:	11 11       	cpse	r17, r1
    2942:	05 c0       	rjmp	.+10     	; 0x294e <xQueueGenericSend+0x94>
    2944:	ce 01       	movw	r24, r28
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <vTaskSetTimeOutState>
    294c:	11 e0       	ldi	r17, 0x01	; 1
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	0f 92       	push	r0
    295c:	f7 01       	movw	r30, r14
    295e:	81 a1       	ldd	r24, Z+33	; 0x21
    2960:	8f 3f       	cpi	r24, 0xFF	; 255
    2962:	09 f4       	brne	.+2      	; 0x2966 <xQueueGenericSend+0xac>
    2964:	11 a2       	std	Z+33, r1	; 0x21
    2966:	f7 01       	movw	r30, r14
    2968:	82 a1       	ldd	r24, Z+34	; 0x22
    296a:	8f 3f       	cpi	r24, 0xFF	; 255
    296c:	09 f4       	brne	.+2      	; 0x2970 <xQueueGenericSend+0xb6>
    296e:	12 a2       	std	Z+34, r1	; 0x22
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	be 01       	movw	r22, r28
    2976:	6a 5f       	subi	r22, 0xFA	; 250
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	ce 01       	movw	r24, r28
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <xTaskCheckForTimeOut>
    2982:	81 11       	cpse	r24, r1
    2984:	21 c0       	rjmp	.+66     	; 0x29c8 <xQueueGenericSend+0x10e>
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	0f 92       	push	r0
    298c:	f7 01       	movw	r30, r14
    298e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	87 8d       	ldd	r24, Z+31	; 0x1f
    2996:	98 13       	cpse	r25, r24
    2998:	11 c0       	rjmp	.+34     	; 0x29bc <xQueueGenericSend+0x102>
    299a:	4e 81       	ldd	r20, Y+6	; 0x06
    299c:	5f 81       	ldd	r21, Y+7	; 0x07
    299e:	68 85       	ldd	r22, Y+8	; 0x08
    29a0:	79 85       	ldd	r23, Y+9	; 0x09
    29a2:	c6 01       	movw	r24, r12
    29a4:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <vTaskPlaceOnEventList>
    29a8:	c7 01       	movw	r24, r14
    29aa:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    29ae:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    29b2:	81 11       	cpse	r24, r1
    29b4:	9c cf       	rjmp	.-200    	; 0x28ee <xQueueGenericSend+0x34>
    29b6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    29ba:	99 cf       	rjmp	.-206    	; 0x28ee <xQueueGenericSend+0x34>
    29bc:	c7 01       	movw	r24, r14
    29be:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    29c2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    29c6:	93 cf       	rjmp	.-218    	; 0x28ee <xQueueGenericSend+0x34>
    29c8:	c7 01       	movw	r24, r14
    29ca:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    29ce:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	29 96       	adiw	r28, 0x09	; 9
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	08 95       	ret

000029f0 <xQueueGenericReceive>:
    29f0:	af 92       	push	r10
    29f2:	bf 92       	push	r11
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	29 97       	sbiw	r28, 0x09	; 9
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	7c 01       	movw	r14, r24
    2a10:	5b 01       	movw	r10, r22
    2a12:	2e 83       	std	Y+6, r18	; 0x06
    2a14:	3f 83       	std	Y+7, r19	; 0x07
    2a16:	48 87       	std	Y+8, r20	; 0x08
    2a18:	59 87       	std	Y+9, r21	; 0x09
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
    2a1c:	6c 01       	movw	r12, r24
    2a1e:	83 e1       	ldi	r24, 0x13	; 19
    2a20:	c8 0e       	add	r12, r24
    2a22:	d1 1c       	adc	r13, r1
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	0f 92       	push	r0
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a2e:	88 23       	and	r24, r24
    2a30:	99 f1       	breq	.+102    	; 0x2a98 <xQueueGenericReceive+0xa8>
    2a32:	c6 80       	ldd	r12, Z+6	; 0x06
    2a34:	d7 80       	ldd	r13, Z+7	; 0x07
    2a36:	b5 01       	movw	r22, r10
    2a38:	c7 01       	movw	r24, r14
    2a3a:	0e 94 8f 13 	call	0x271e	; 0x271e <prvCopyDataFromQueue>
    2a3e:	01 11       	cpse	r16, r1
    2a40:	1a c0       	rjmp	.+52     	; 0x2a76 <xQueueGenericReceive+0x86>
    2a42:	f7 01       	movw	r30, r14
    2a44:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	86 8f       	std	Z+30, r24	; 0x1e
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	89 2b       	or	r24, r25
    2a50:	29 f4       	brne	.+10     	; 0x2a5c <xQueueGenericReceive+0x6c>
    2a52:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <xTaskGetCurrentTaskHandle>
    2a56:	f7 01       	movw	r30, r14
    2a58:	82 83       	std	Z+2, r24	; 0x02
    2a5a:	93 83       	std	Z+3, r25	; 0x03
    2a5c:	f7 01       	movw	r30, r14
    2a5e:	80 85       	ldd	r24, Z+8	; 0x08
    2a60:	88 23       	and	r24, r24
    2a62:	b1 f0       	breq	.+44     	; 0x2a90 <xQueueGenericReceive+0xa0>
    2a64:	c7 01       	movw	r24, r14
    2a66:	08 96       	adiw	r24, 0x08	; 8
    2a68:	0e 94 23 1a 	call	0x3446	; 0x3446 <xTaskRemoveFromEventList>
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	81 f4       	brne	.+32     	; 0x2a90 <xQueueGenericReceive+0xa0>
    2a70:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2a74:	0d c0       	rjmp	.+26     	; 0x2a90 <xQueueGenericReceive+0xa0>
    2a76:	f7 01       	movw	r30, r14
    2a78:	c6 82       	std	Z+6, r12	; 0x06
    2a7a:	d7 82       	std	Z+7, r13	; 0x07
    2a7c:	83 89       	ldd	r24, Z+19	; 0x13
    2a7e:	88 23       	and	r24, r24
    2a80:	39 f0       	breq	.+14     	; 0x2a90 <xQueueGenericReceive+0xa0>
    2a82:	c7 01       	movw	r24, r14
    2a84:	43 96       	adiw	r24, 0x13	; 19
    2a86:	0e 94 23 1a 	call	0x3446	; 0x3446 <xTaskRemoveFromEventList>
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	62 c0       	rjmp	.+196    	; 0x2b5c <xQueueGenericReceive+0x16c>
    2a98:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9c:	a8 85       	ldd	r26, Y+8	; 0x08
    2a9e:	b9 85       	ldd	r27, Y+9	; 0x09
    2aa0:	89 2b       	or	r24, r25
    2aa2:	8a 2b       	or	r24, r26
    2aa4:	8b 2b       	or	r24, r27
    2aa6:	21 f4       	brne	.+8      	; 0x2ab0 <xQueueGenericReceive+0xc0>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	56 c0       	rjmp	.+172    	; 0x2b5c <xQueueGenericReceive+0x16c>
    2ab0:	11 11       	cpse	r17, r1
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <xQueueGenericReceive+0xce>
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <vTaskSetTimeOutState>
    2abc:	11 e0       	ldi	r17, 0x01	; 1
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	0f 92       	push	r0
    2acc:	f7 01       	movw	r30, r14
    2ace:	81 a1       	ldd	r24, Z+33	; 0x21
    2ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <xQueueGenericReceive+0xe6>
    2ad4:	11 a2       	std	Z+33, r1	; 0x21
    2ad6:	f7 01       	movw	r30, r14
    2ad8:	82 a1       	ldd	r24, Z+34	; 0x22
    2ada:	8f 3f       	cpi	r24, 0xFF	; 255
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <xQueueGenericReceive+0xf0>
    2ade:	12 a2       	std	Z+34, r1	; 0x22
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	be 01       	movw	r22, r28
    2ae6:	6a 5f       	subi	r22, 0xFA	; 250
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	ce 01       	movw	r24, r28
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <xTaskCheckForTimeOut>
    2af2:	81 11       	cpse	r24, r1
    2af4:	2d c0       	rjmp	.+90     	; 0x2b50 <xQueueGenericReceive+0x160>
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	0f 92       	push	r0
    2afc:	f7 01       	movw	r30, r14
    2afe:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b00:	0f 90       	pop	r0
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	81 11       	cpse	r24, r1
    2b06:	1e c0       	rjmp	.+60     	; 0x2b44 <xQueueGenericReceive+0x154>
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	89 2b       	or	r24, r25
    2b0e:	49 f4       	brne	.+18     	; 0x2b22 <xQueueGenericReceive+0x132>
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	0f 92       	push	r0
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	0e 94 02 1b 	call	0x3604	; 0x3604 <vTaskPriorityInherit>
    2b1e:	0f 90       	pop	r0
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	4e 81       	ldd	r20, Y+6	; 0x06
    2b24:	5f 81       	ldd	r21, Y+7	; 0x07
    2b26:	68 85       	ldd	r22, Y+8	; 0x08
    2b28:	79 85       	ldd	r23, Y+9	; 0x09
    2b2a:	c6 01       	movw	r24, r12
    2b2c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <vTaskPlaceOnEventList>
    2b30:	c7 01       	movw	r24, r14
    2b32:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    2b36:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	73 cf       	rjmp	.-282    	; 0x2a24 <xQueueGenericReceive+0x34>
    2b3e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2b42:	70 cf       	rjmp	.-288    	; 0x2a24 <xQueueGenericReceive+0x34>
    2b44:	c7 01       	movw	r24, r14
    2b46:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    2b4a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    2b4e:	6a cf       	rjmp	.-300    	; 0x2a24 <xQueueGenericReceive+0x34>
    2b50:	c7 01       	movw	r24, r14
    2b52:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvUnlockQueue>
    2b56:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	29 96       	adiw	r28, 0x09	; 9
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	ff 90       	pop	r15
    2b6c:	ef 90       	pop	r14
    2b6e:	df 90       	pop	r13
    2b70:	cf 90       	pop	r12
    2b72:	bf 90       	pop	r11
    2b74:	af 90       	pop	r10
    2b76:	08 95       	ret

00002b78 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2b7e:	fc 01       	movw	r30, r24
    2b80:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2b86:	08 95       	ret

00002b88 <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2b88:	ce e5       	ldi	r28, 0x5E	; 94
    2b8a:	d1 e3       	ldi	r29, 0x31	; 49
    2b8c:	88 81       	ld	r24, Y
    2b8e:	82 30       	cpi	r24, 0x02	; 2
    2b90:	e8 f3       	brcs	.-6      	; 0x2b8c <prvIdleTask+0x4>
    2b92:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2b96:	fa cf       	rjmp	.-12     	; 0x2b8c <prvIdleTask+0x4>

00002b98 <prvAddCurrentTaskToDelayedList>:
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	6b 01       	movw	r12, r22
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    2ba8:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2bac:	62 83       	std	Z+2, r22	; 0x02
    2bae:	73 83       	std	Z+3, r23	; 0x03
    2bb0:	84 83       	std	Z+4, r24	; 0x04
    2bb2:	95 83       	std	Z+5, r25	; 0x05
    2bb4:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    2bb8:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    2bbc:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    2bc0:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    2bc4:	c8 16       	cp	r12, r24
    2bc6:	d9 06       	cpc	r13, r25
    2bc8:	ea 06       	cpc	r14, r26
    2bca:	fb 06       	cpc	r15, r27
    2bcc:	68 f4       	brcc	.+26     	; 0x2be8 <prvAddCurrentTaskToDelayedList+0x50>
    2bce:	60 91 8a 31 	lds	r22, 0x318A	; 0x80318a <pxCurrentTCB>
    2bd2:	70 91 8b 31 	lds	r23, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2bd6:	80 91 44 31 	lds	r24, 0x3144	; 0x803144 <pxOverflowDelayedTaskList>
    2bda:	90 91 45 31 	lds	r25, 0x3145	; 0x803145 <pxOverflowDelayedTaskList+0x1>
    2bde:	6e 5f       	subi	r22, 0xFE	; 254
    2be0:	7f 4f       	sbci	r23, 0xFF	; 255
    2be2:	0e 94 57 11 	call	0x22ae	; 0x22ae <vListInsert>
    2be6:	21 c0       	rjmp	.+66     	; 0x2c2a <prvAddCurrentTaskToDelayedList+0x92>
    2be8:	60 91 8a 31 	lds	r22, 0x318A	; 0x80318a <pxCurrentTCB>
    2bec:	70 91 8b 31 	lds	r23, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2bf0:	80 91 46 31 	lds	r24, 0x3146	; 0x803146 <pxDelayedTaskList>
    2bf4:	90 91 47 31 	lds	r25, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    2bf8:	6e 5f       	subi	r22, 0xFE	; 254
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	0e 94 57 11 	call	0x22ae	; 0x22ae <vListInsert>
    2c00:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2c04:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2c08:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2c0c:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2c10:	c8 16       	cp	r12, r24
    2c12:	d9 06       	cpc	r13, r25
    2c14:	ea 06       	cpc	r14, r26
    2c16:	fb 06       	cpc	r15, r27
    2c18:	40 f4       	brcc	.+16     	; 0x2c2a <prvAddCurrentTaskToDelayedList+0x92>
    2c1a:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2c1e:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2c22:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2c26:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	08 95       	ret

00002c34 <xTaskGenericCreate>:
    2c34:	4f 92       	push	r4
    2c36:	5f 92       	push	r5
    2c38:	6f 92       	push	r6
    2c3a:	7f 92       	push	r7
    2c3c:	8f 92       	push	r8
    2c3e:	9f 92       	push	r9
    2c40:	af 92       	push	r10
    2c42:	bf 92       	push	r11
    2c44:	cf 92       	push	r12
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	5c 01       	movw	r10, r24
    2c56:	4b 01       	movw	r8, r22
    2c58:	3a 01       	movw	r6, r20
    2c5a:	29 01       	movw	r4, r18
    2c5c:	88 e2       	ldi	r24, 0x28	; 40
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    2c64:	ec 01       	movw	r28, r24
    2c66:	89 2b       	or	r24, r25
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <xTaskGenericCreate+0x38>
    2c6a:	d4 c0       	rjmp	.+424    	; 0x2e14 <xTaskGenericCreate+0x1e0>
    2c6c:	c1 14       	cp	r12, r1
    2c6e:	d1 04       	cpc	r13, r1
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <xTaskGenericCreate+0x40>
    2c72:	cc c0       	rjmp	.+408    	; 0x2e0c <xTaskGenericCreate+0x1d8>
    2c74:	c3 01       	movw	r24, r6
    2c76:	0e 94 49 10 	call	0x2092	; 0x2092 <pvPortMalloc>
    2c7a:	8b 8f       	std	Y+27, r24	; 0x1b
    2c7c:	9c 8f       	std	Y+28, r25	; 0x1c
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	21 f4       	brne	.+8      	; 0x2c8a <xTaskGenericCreate+0x56>
    2c82:	ce 01       	movw	r24, r28
    2c84:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <vPortFree>
    2c88:	c5 c0       	rjmp	.+394    	; 0x2e14 <xTaskGenericCreate+0x1e0>
    2c8a:	a3 01       	movw	r20, r6
    2c8c:	61 e1       	ldi	r22, 0x11	; 17
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <memset>
    2c94:	93 01       	movw	r18, r6
    2c96:	21 50       	subi	r18, 0x01	; 1
    2c98:	31 09       	sbc	r19, r1
    2c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9e:	3c 01       	movw	r6, r24
    2ca0:	62 0e       	add	r6, r18
    2ca2:	73 1e       	adc	r7, r19
    2ca4:	4a e0       	ldi	r20, 0x0A	; 10
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	b4 01       	movw	r22, r8
    2caa:	ce 01       	movw	r24, r28
    2cac:	4d 96       	adiw	r24, 0x1d	; 29
    2cae:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <strncpy>
    2cb2:	1e a2       	std	Y+38, r1	; 0x26
    2cb4:	10 2f       	mov	r17, r16
    2cb6:	04 30       	cpi	r16, 0x04	; 4
    2cb8:	08 f0       	brcs	.+2      	; 0x2cbc <xTaskGenericCreate+0x88>
    2cba:	13 e0       	ldi	r17, 0x03	; 3
    2cbc:	1a 8f       	std	Y+26, r17	; 0x1a
    2cbe:	1f a3       	std	Y+39, r17	; 0x27
    2cc0:	6e 01       	movw	r12, r28
    2cc2:	22 e0       	ldi	r18, 0x02	; 2
    2cc4:	c2 0e       	add	r12, r18
    2cc6:	d1 1c       	adc	r13, r1
    2cc8:	c6 01       	movw	r24, r12
    2cca:	0e 94 2c 11 	call	0x2258	; 0x2258 <vListInitialiseItem>
    2cce:	ce 01       	movw	r24, r28
    2cd0:	0e 96       	adiw	r24, 0x0e	; 14
    2cd2:	0e 94 2c 11 	call	0x2258	; 0x2258 <vListInitialiseItem>
    2cd6:	ca 87       	std	Y+10, r28	; 0x0a
    2cd8:	db 87       	std	Y+11, r29	; 0x0b
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	81 1b       	sub	r24, r17
    2ce4:	91 09       	sbc	r25, r1
    2ce6:	a1 09       	sbc	r26, r1
    2ce8:	b1 09       	sbc	r27, r1
    2cea:	8e 87       	std	Y+14, r24	; 0x0e
    2cec:	9f 87       	std	Y+15, r25	; 0x0f
    2cee:	a8 8b       	std	Y+16, r26	; 0x10
    2cf0:	b9 8b       	std	Y+17, r27	; 0x11
    2cf2:	ce 8b       	std	Y+22, r28	; 0x16
    2cf4:	df 8b       	std	Y+23, r29	; 0x17
    2cf6:	a2 01       	movw	r20, r4
    2cf8:	b5 01       	movw	r22, r10
    2cfa:	c3 01       	movw	r24, r6
    2cfc:	0e 94 c8 11 	call	0x2390	; 0x2390 <pxPortInitialiseStack>
    2d00:	88 83       	st	Y, r24
    2d02:	99 83       	std	Y+1, r25	; 0x01
    2d04:	e1 14       	cp	r14, r1
    2d06:	f1 04       	cpc	r15, r1
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <xTaskGenericCreate+0xdc>
    2d0a:	f7 01       	movw	r30, r14
    2d0c:	c0 83       	st	Z, r28
    2d0e:	d1 83       	std	Z+1, r29	; 0x01
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	0f 92       	push	r0
    2d16:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <uxCurrentNumberOfTasks>
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <uxCurrentNumberOfTasks>
    2d20:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    2d24:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2d28:	89 2b       	or	r24, r25
    2d2a:	89 f5       	brne	.+98     	; 0x2d8e <xTaskGenericCreate+0x15a>
    2d2c:	c0 93 8a 31 	sts	0x318A, r28	; 0x80318a <pxCurrentTCB>
    2d30:	d0 93 8b 31 	sts	0x318B, r29	; 0x80318b <pxCurrentTCB+0x1>
    2d34:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <uxCurrentNumberOfTasks>
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	c1 f5       	brne	.+112    	; 0x2dac <xTaskGenericCreate+0x178>
    2d3c:	8e e5       	ldi	r24, 0x5E	; 94
    2d3e:	91 e3       	ldi	r25, 0x31	; 49
    2d40:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d44:	89 e6       	ldi	r24, 0x69	; 105
    2d46:	91 e3       	ldi	r25, 0x31	; 49
    2d48:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d4c:	84 e7       	ldi	r24, 0x74	; 116
    2d4e:	91 e3       	ldi	r25, 0x31	; 49
    2d50:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d54:	8f e7       	ldi	r24, 0x7F	; 127
    2d56:	91 e3       	ldi	r25, 0x31	; 49
    2d58:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d5c:	83 e5       	ldi	r24, 0x53	; 83
    2d5e:	91 e3       	ldi	r25, 0x31	; 49
    2d60:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d64:	88 e4       	ldi	r24, 0x48	; 72
    2d66:	91 e3       	ldi	r25, 0x31	; 49
    2d68:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d6c:	89 e3       	ldi	r24, 0x39	; 57
    2d6e:	91 e3       	ldi	r25, 0x31	; 49
    2d70:	0e 94 1b 11 	call	0x2236	; 0x2236 <vListInitialise>
    2d74:	83 e5       	ldi	r24, 0x53	; 83
    2d76:	91 e3       	ldi	r25, 0x31	; 49
    2d78:	80 93 46 31 	sts	0x3146, r24	; 0x803146 <pxDelayedTaskList>
    2d7c:	90 93 47 31 	sts	0x3147, r25	; 0x803147 <pxDelayedTaskList+0x1>
    2d80:	88 e4       	ldi	r24, 0x48	; 72
    2d82:	91 e3       	ldi	r25, 0x31	; 49
    2d84:	80 93 44 31 	sts	0x3144, r24	; 0x803144 <pxOverflowDelayedTaskList>
    2d88:	90 93 45 31 	sts	0x3145, r25	; 0x803145 <pxOverflowDelayedTaskList+0x1>
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <xTaskGenericCreate+0x178>
    2d8e:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xSchedulerRunning>
    2d92:	81 11       	cpse	r24, r1
    2d94:	0b c0       	rjmp	.+22     	; 0x2dac <xTaskGenericCreate+0x178>
    2d96:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    2d9a:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2d9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da0:	08 17       	cp	r16, r24
    2da2:	20 f0       	brcs	.+8      	; 0x2dac <xTaskGenericCreate+0x178>
    2da4:	c0 93 8a 31 	sts	0x318A, r28	; 0x80318a <pxCurrentTCB>
    2da8:	d0 93 8b 31 	sts	0x318B, r29	; 0x80318b <pxCurrentTCB+0x1>
    2dac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dae:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <uxTopUsedPriority>
    2db2:	98 17       	cp	r25, r24
    2db4:	10 f4       	brcc	.+4      	; 0x2dba <xTaskGenericCreate+0x186>
    2db6:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxTopUsedPriority>
    2dba:	90 91 2a 31 	lds	r25, 0x312A	; 0x80312a <uxTaskNumber>
    2dbe:	9f 5f       	subi	r25, 0xFF	; 255
    2dc0:	90 93 2a 31 	sts	0x312A, r25	; 0x80312a <uxTaskNumber>
    2dc4:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    2dc8:	98 17       	cp	r25, r24
    2dca:	10 f4       	brcc	.+4      	; 0x2dd0 <xTaskGenericCreate+0x19c>
    2dcc:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    2dd0:	fb e0       	ldi	r31, 0x0B	; 11
    2dd2:	8f 9f       	mul	r24, r31
    2dd4:	c0 01       	movw	r24, r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	b6 01       	movw	r22, r12
    2dda:	82 5a       	subi	r24, 0xA2	; 162
    2ddc:	9e 4c       	sbci	r25, 0xCE	; 206
    2dde:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
    2de2:	0f 90       	pop	r0
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xSchedulerRunning>
    2dea:	88 23       	and	r24, r24
    2dec:	59 f0       	breq	.+22     	; 0x2e04 <xTaskGenericCreate+0x1d0>
    2dee:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    2df2:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2df6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2df8:	80 17       	cp	r24, r16
    2dfa:	30 f4       	brcc	.+12     	; 0x2e08 <xTaskGenericCreate+0x1d4>
    2dfc:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	09 c0       	rjmp	.+18     	; 0x2e16 <xTaskGenericCreate+0x1e2>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	07 c0       	rjmp	.+14     	; 0x2e16 <xTaskGenericCreate+0x1e2>
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	05 c0       	rjmp	.+10     	; 0x2e16 <xTaskGenericCreate+0x1e2>
    2e0c:	cb 8e       	std	Y+27, r12	; 0x1b
    2e0e:	dc 8e       	std	Y+28, r13	; 0x1c
    2e10:	c6 01       	movw	r24, r12
    2e12:	3b cf       	rjmp	.-394    	; 0x2c8a <xTaskGenericCreate+0x56>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	1f 91       	pop	r17
    2e1c:	0f 91       	pop	r16
    2e1e:	ff 90       	pop	r15
    2e20:	ef 90       	pop	r14
    2e22:	df 90       	pop	r13
    2e24:	cf 90       	pop	r12
    2e26:	bf 90       	pop	r11
    2e28:	af 90       	pop	r10
    2e2a:	9f 90       	pop	r9
    2e2c:	8f 90       	pop	r8
    2e2e:	7f 90       	pop	r7
    2e30:	6f 90       	pop	r6
    2e32:	5f 90       	pop	r5
    2e34:	4f 90       	pop	r4
    2e36:	08 95       	ret

00002e38 <uxTaskPriorityGet>:
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	0f 92       	push	r0
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	21 f4       	brne	.+8      	; 0x2e4a <uxTaskPriorityGet+0x12>
    2e42:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    2e46:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	fc 01       	movw	r30, r24
    2e50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e52:	08 95       	ret

00002e54 <vTaskStartScheduler>:
    2e54:	af 92       	push	r10
    2e56:	bf 92       	push	r11
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	a1 2c       	mov	r10, r1
    2e64:	b1 2c       	mov	r11, r1
    2e66:	c1 2c       	mov	r12, r1
    2e68:	d1 2c       	mov	r13, r1
    2e6a:	0f 2e       	mov	r0, r31
    2e6c:	f7 e3       	ldi	r31, 0x37	; 55
    2e6e:	ef 2e       	mov	r14, r31
    2e70:	f1 e3       	ldi	r31, 0x31	; 49
    2e72:	ff 2e       	mov	r15, r31
    2e74:	f0 2d       	mov	r31, r0
    2e76:	00 e0       	ldi	r16, 0x00	; 0
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	44 e6       	ldi	r20, 0x64	; 100
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	69 ee       	ldi	r22, 0xE9	; 233
    2e82:	70 e2       	ldi	r23, 0x20	; 32
    2e84:	84 ec       	ldi	r24, 0xC4	; 196
    2e86:	95 e1       	ldi	r25, 0x15	; 21
    2e88:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <xTaskGenericCreate>
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	69 f4       	brne	.+26     	; 0x2eaa <vTaskStartScheduler+0x56>
    2e90:	f8 94       	cli
    2e92:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <xSchedulerRunning>
    2e96:	10 92 32 31 	sts	0x3132, r1	; 0x803132 <xTickCount>
    2e9a:	10 92 33 31 	sts	0x3133, r1	; 0x803133 <xTickCount+0x1>
    2e9e:	10 92 34 31 	sts	0x3134, r1	; 0x803134 <xTickCount+0x2>
    2ea2:	10 92 35 31 	sts	0x3135, r1	; 0x803135 <xTickCount+0x3>
    2ea6:	0e 94 3e 12 	call	0x247c	; 0x247c <xPortStartScheduler>
    2eaa:	0f 91       	pop	r16
    2eac:	ff 90       	pop	r15
    2eae:	ef 90       	pop	r14
    2eb0:	df 90       	pop	r13
    2eb2:	cf 90       	pop	r12
    2eb4:	bf 90       	pop	r11
    2eb6:	af 90       	pop	r10
    2eb8:	08 95       	ret

00002eba <vTaskSuspendAll>:
    2eba:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxSchedulerSuspended>
    2ec4:	08 95       	ret

00002ec6 <xTaskGetTickCount>:
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	0f 92       	push	r0
    2ecc:	60 91 32 31 	lds	r22, 0x3132	; 0x803132 <xTickCount>
    2ed0:	70 91 33 31 	lds	r23, 0x3133	; 0x803133 <xTickCount+0x1>
    2ed4:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <xTickCount+0x2>
    2ed8:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <xTickCount+0x3>
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	08 95       	ret

00002ee2 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	21 f4       	brne	.+8      	; 0x2eee <pcTaskGetTaskName+0xc>
    2ee6:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    2eea:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    2eee:	4d 96       	adiw	r24, 0x1d	; 29
    2ef0:	08 95       	ret

00002ef2 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    2ef2:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <xIdleTaskHandle>
    2ef6:	90 91 38 31 	lds	r25, 0x3138	; 0x803138 <xIdleTaskHandle+0x1>
    2efa:	08 95       	ret

00002efc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2f06:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    2f0a:	81 11       	cpse	r24, r1
    2f0c:	ed c0       	rjmp	.+474    	; 0x30e8 <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    2f0e:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    2f12:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    2f16:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    2f1a:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	a1 1d       	adc	r26, r1
    2f22:	b1 1d       	adc	r27, r1
    2f24:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <xTickCount>
    2f28:	90 93 33 31 	sts	0x3133, r25	; 0x803133 <xTickCount+0x1>
    2f2c:	a0 93 34 31 	sts	0x3134, r26	; 0x803134 <xTickCount+0x2>
    2f30:	b0 93 35 31 	sts	0x3135, r27	; 0x803135 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    2f34:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    2f38:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    2f3c:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    2f40:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    2f44:	89 2b       	or	r24, r25
    2f46:	8a 2b       	or	r24, r26
    2f48:	8b 2b       	or	r24, r27
    2f4a:	f1 f5       	brne	.+124    	; 0x2fc8 <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2f4c:	80 91 46 31 	lds	r24, 0x3146	; 0x803146 <pxDelayedTaskList>
    2f50:	90 91 47 31 	lds	r25, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2f54:	20 91 44 31 	lds	r18, 0x3144	; 0x803144 <pxOverflowDelayedTaskList>
    2f58:	30 91 45 31 	lds	r19, 0x3145	; 0x803145 <pxOverflowDelayedTaskList+0x1>
    2f5c:	20 93 46 31 	sts	0x3146, r18	; 0x803146 <pxDelayedTaskList>
    2f60:	30 93 47 31 	sts	0x3147, r19	; 0x803147 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    2f64:	80 93 44 31 	sts	0x3144, r24	; 0x803144 <pxOverflowDelayedTaskList>
    2f68:	90 93 45 31 	sts	0x3145, r25	; 0x803145 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    2f6c:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <xNumOfOverflows>
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	80 93 2b 31 	sts	0x312B, r24	; 0x80312b <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f76:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    2f7a:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    2f7e:	80 81       	ld	r24, Z
    2f80:	81 11       	cpse	r24, r1
    2f82:	0c c0       	rjmp	.+24     	; 0x2f9c <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	dc 01       	movw	r26, r24
    2f8a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2f8e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f92:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f96:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f9a:	16 c0       	rjmp	.+44     	; 0x2fc8 <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f9c:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    2fa0:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    2fa4:	07 80       	ldd	r0, Z+7	; 0x07
    2fa6:	f0 85       	ldd	r31, Z+8	; 0x08
    2fa8:	e0 2d       	mov	r30, r0
    2faa:	00 84       	ldd	r0, Z+8	; 0x08
    2fac:	f1 85       	ldd	r31, Z+9	; 0x09
    2fae:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	a4 81       	ldd	r26, Z+4	; 0x04
    2fb6:	b5 81       	ldd	r27, Z+5	; 0x05
    2fb8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    2fbc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    2fc0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    2fc4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2fc8:	40 91 32 31 	lds	r20, 0x3132	; 0x803132 <xTickCount>
    2fcc:	50 91 33 31 	lds	r21, 0x3133	; 0x803133 <xTickCount+0x1>
    2fd0:	60 91 34 31 	lds	r22, 0x3134	; 0x803134 <xTickCount+0x2>
    2fd4:	70 91 35 31 	lds	r23, 0x3135	; 0x803135 <xTickCount+0x3>
    2fd8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2fdc:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2fe0:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2fe4:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2fe8:	48 17       	cp	r20, r24
    2fea:	59 07       	cpc	r21, r25
    2fec:	6a 07       	cpc	r22, r26
    2fee:	7b 07       	cpc	r23, r27
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <vTaskIncrementTick+0xf8>
    2ff2:	7f c0       	rjmp	.+254    	; 0x30f2 <vTaskIncrementTick+0x1f6>
    2ff4:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    2ff8:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	f9 f0       	breq	.+62     	; 0x3040 <vTaskIncrementTick+0x144>
    3002:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    3006:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    300a:	07 80       	ldd	r0, Z+7	; 0x07
    300c:	f0 85       	ldd	r31, Z+8	; 0x08
    300e:	e0 2d       	mov	r30, r0
    3010:	c0 85       	ldd	r28, Z+8	; 0x08
    3012:	d1 85       	ldd	r29, Z+9	; 0x09
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	9b 81       	ldd	r25, Y+3	; 0x03
    3018:	ac 81       	ldd	r26, Y+4	; 0x04
    301a:	bd 81       	ldd	r27, Y+5	; 0x05
    301c:	40 91 32 31 	lds	r20, 0x3132	; 0x803132 <xTickCount>
    3020:	50 91 33 31 	lds	r21, 0x3133	; 0x803133 <xTickCount+0x1>
    3024:	60 91 34 31 	lds	r22, 0x3134	; 0x803134 <xTickCount+0x2>
    3028:	70 91 35 31 	lds	r23, 0x3135	; 0x803135 <xTickCount+0x3>
    302c:	48 17       	cp	r20, r24
    302e:	59 07       	cpc	r21, r25
    3030:	6a 07       	cpc	r22, r26
    3032:	7b 07       	cpc	r23, r27
    3034:	58 f1       	brcs	.+86     	; 0x308c <vTaskIncrementTick+0x190>
    3036:	0f 2e       	mov	r0, r31
    3038:	fb e0       	ldi	r31, 0x0B	; 11
    303a:	ff 2e       	mov	r15, r31
    303c:	f0 2d       	mov	r31, r0
    303e:	2f c0       	rjmp	.+94     	; 0x309e <vTaskIncrementTick+0x1a2>
    3040:	8f ef       	ldi	r24, 0xFF	; 255
    3042:	9f ef       	ldi	r25, 0xFF	; 255
    3044:	dc 01       	movw	r26, r24
    3046:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    304a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    304e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3052:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3056:	4d c0       	rjmp	.+154    	; 0x30f2 <vTaskIncrementTick+0x1f6>
    3058:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    305c:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    3060:	07 80       	ldd	r0, Z+7	; 0x07
    3062:	f0 85       	ldd	r31, Z+8	; 0x08
    3064:	e0 2d       	mov	r30, r0
    3066:	c0 85       	ldd	r28, Z+8	; 0x08
    3068:	d1 85       	ldd	r29, Z+9	; 0x09
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	9b 81       	ldd	r25, Y+3	; 0x03
    306e:	ac 81       	ldd	r26, Y+4	; 0x04
    3070:	bd 81       	ldd	r27, Y+5	; 0x05
    3072:	40 91 32 31 	lds	r20, 0x3132	; 0x803132 <xTickCount>
    3076:	50 91 33 31 	lds	r21, 0x3133	; 0x803133 <xTickCount+0x1>
    307a:	60 91 34 31 	lds	r22, 0x3134	; 0x803134 <xTickCount+0x2>
    307e:	70 91 35 31 	lds	r23, 0x3135	; 0x803135 <xTickCount+0x3>
    3082:	48 17       	cp	r20, r24
    3084:	59 07       	cpc	r21, r25
    3086:	6a 07       	cpc	r22, r26
    3088:	7b 07       	cpc	r23, r27
    308a:	48 f4       	brcc	.+18     	; 0x309e <vTaskIncrementTick+0x1a2>
    308c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3090:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3094:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3098:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    309c:	2a c0       	rjmp	.+84     	; 0x30f2 <vTaskIncrementTick+0x1f6>
    309e:	8e 01       	movw	r16, r28
    30a0:	0e 5f       	subi	r16, 0xFE	; 254
    30a2:	1f 4f       	sbci	r17, 0xFF	; 255
    30a4:	c8 01       	movw	r24, r16
    30a6:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
    30aa:	88 8d       	ldd	r24, Y+24	; 0x18
    30ac:	99 8d       	ldd	r25, Y+25	; 0x19
    30ae:	89 2b       	or	r24, r25
    30b0:	21 f0       	breq	.+8      	; 0x30ba <vTaskIncrementTick+0x1be>
    30b2:	ce 01       	movw	r24, r28
    30b4:	0e 96       	adiw	r24, 0x0e	; 14
    30b6:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
    30ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30bc:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    30c0:	98 17       	cp	r25, r24
    30c2:	10 f4       	brcc	.+4      	; 0x30c8 <vTaskIncrementTick+0x1cc>
    30c4:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    30c8:	f8 9e       	mul	r15, r24
    30ca:	c0 01       	movw	r24, r0
    30cc:	11 24       	eor	r1, r1
    30ce:	b8 01       	movw	r22, r16
    30d0:	82 5a       	subi	r24, 0xA2	; 162
    30d2:	9e 4c       	sbci	r25, 0xCE	; 206
    30d4:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
    30d8:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <pxDelayedTaskList>
    30dc:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <pxDelayedTaskList+0x1>
    30e0:	80 81       	ld	r24, Z
    30e2:	81 11       	cpse	r24, r1
    30e4:	b9 cf       	rjmp	.-142    	; 0x3058 <vTaskIncrementTick+0x15c>
    30e6:	ac cf       	rjmp	.-168    	; 0x3040 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    30e8:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <uxMissedTicks>
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	80 93 2d 31 	sts	0x312D, r24	; 0x80312d <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	08 95       	ret

000030fe <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    30fe:	cf 92       	push	r12
    3100:	df 92       	push	r13
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3114:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    3118:	81 50       	subi	r24, 0x01	; 1
    311a:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    311e:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    3122:	81 11       	cpse	r24, r1
    3124:	60 c0       	rjmp	.+192    	; 0x31e6 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3126:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <uxCurrentNumberOfTasks>
    312a:	81 11       	cpse	r24, r1
    312c:	2c c0       	rjmp	.+88     	; 0x3186 <xTaskResumeAll+0x88>
    312e:	5e c0       	rjmp	.+188    	; 0x31ec <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3130:	d7 01       	movw	r26, r14
    3132:	17 96       	adiw	r26, 0x07	; 7
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	18 97       	sbiw	r26, 0x08	; 8
    313a:	c0 85       	ldd	r28, Z+8	; 0x08
    313c:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    313e:	ce 01       	movw	r24, r28
    3140:	0e 96       	adiw	r24, 0x0e	; 14
    3142:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3146:	8e 01       	movw	r16, r28
    3148:	0e 5f       	subi	r16, 0xFE	; 254
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	c8 01       	movw	r24, r16
    314e:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3152:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3154:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    3158:	98 17       	cp	r25, r24
    315a:	10 f4       	brcc	.+4      	; 0x3160 <xTaskResumeAll+0x62>
    315c:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    3160:	d8 9e       	mul	r13, r24
    3162:	c0 01       	movw	r24, r0
    3164:	11 24       	eor	r1, r1
    3166:	b8 01       	movw	r22, r16
    3168:	82 5a       	subi	r24, 0xA2	; 162
    316a:	9e 4c       	sbci	r25, 0xCE	; 206
    316c:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3170:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    3174:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3178:	9a 8d       	ldd	r25, Y+26	; 0x1a
    317a:	82 8d       	ldd	r24, Z+26	; 0x1a
    317c:	98 17       	cp	r25, r24
    317e:	70 f0       	brcs	.+28     	; 0x319c <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3180:	cc 24       	eor	r12, r12
    3182:	c3 94       	inc	r12
    3184:	0b c0       	rjmp	.+22     	; 0x319c <xTaskResumeAll+0x9e>
    3186:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3188:	0f 2e       	mov	r0, r31
    318a:	f9 e3       	ldi	r31, 0x39	; 57
    318c:	ef 2e       	mov	r14, r31
    318e:	f1 e3       	ldi	r31, 0x31	; 49
    3190:	ff 2e       	mov	r15, r31
    3192:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3194:	0f 2e       	mov	r0, r31
    3196:	fb e0       	ldi	r31, 0x0B	; 11
    3198:	df 2e       	mov	r13, r31
    319a:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    319c:	f7 01       	movw	r30, r14
    319e:	80 81       	ld	r24, Z
    31a0:	81 11       	cpse	r24, r1
    31a2:	c6 cf       	rjmp	.-116    	; 0x3130 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31a4:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <uxMissedTicks>
    31a8:	88 23       	and	r24, r24
    31aa:	81 f0       	breq	.+32     	; 0x31cc <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31ac:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <uxMissedTicks>
    31b0:	88 23       	and	r24, r24
    31b2:	99 f0       	breq	.+38     	; 0x31da <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    31b4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <vTaskIncrementTick>
						--uxMissedTicks;
    31b8:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <uxMissedTicks>
    31bc:	81 50       	subi	r24, 0x01	; 1
    31be:	80 93 2d 31 	sts	0x312D, r24	; 0x80312d <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    31c2:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <uxMissedTicks>
    31c6:	81 11       	cpse	r24, r1
    31c8:	f5 cf       	rjmp	.-22     	; 0x31b4 <xTaskResumeAll+0xb6>
    31ca:	07 c0       	rjmp	.+14     	; 0x31da <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    31cc:	f1 e0       	ldi	r31, 0x01	; 1
    31ce:	cf 16       	cp	r12, r31
    31d0:	21 f0       	breq	.+8      	; 0x31da <xTaskResumeAll+0xdc>
    31d2:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <xMissedYield>
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	41 f4       	brne	.+16     	; 0x31ea <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    31da:	10 92 2c 31 	sts	0x312C, r1	; 0x80312c <xMissedYield>
					portYIELD_WITHIN_API();
    31de:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	03 c0       	rjmp	.+6      	; 0x31ec <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <xTaskResumeAll+0xee>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    31ec:	0f 90       	pop	r0
    31ee:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	df 90       	pop	r13
    31fe:	cf 90       	pop	r12
    3200:	08 95       	ret

00003202 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	ec 01       	movw	r28, r24
    3210:	6a 01       	movw	r12, r20
    3212:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3214:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3218:	88 81       	ld	r24, Y
    321a:	99 81       	ldd	r25, Y+1	; 0x01
    321c:	aa 81       	ldd	r26, Y+2	; 0x02
    321e:	bb 81       	ldd	r27, Y+3	; 0x03
    3220:	c8 0e       	add	r12, r24
    3222:	d9 1e       	adc	r13, r25
    3224:	ea 1e       	adc	r14, r26
    3226:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    3228:	40 91 32 31 	lds	r20, 0x3132	; 0x803132 <xTickCount>
    322c:	50 91 33 31 	lds	r21, 0x3133	; 0x803133 <xTickCount+0x1>
    3230:	60 91 34 31 	lds	r22, 0x3134	; 0x803134 <xTickCount+0x2>
    3234:	70 91 35 31 	lds	r23, 0x3135	; 0x803135 <xTickCount+0x3>
    3238:	48 17       	cp	r20, r24
    323a:	59 07       	cpc	r21, r25
    323c:	6a 07       	cpc	r22, r26
    323e:	7b 07       	cpc	r23, r27
    3240:	b8 f4       	brcc	.+46     	; 0x3270 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3242:	c8 16       	cp	r12, r24
    3244:	d9 06       	cpc	r13, r25
    3246:	ea 06       	cpc	r14, r26
    3248:	fb 06       	cpc	r15, r27
    324a:	e0 f5       	brcc	.+120    	; 0x32c4 <vTaskDelayUntil+0xc2>
    324c:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    3250:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    3254:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    3258:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    325c:	c8 82       	st	Y, r12
    325e:	d9 82       	std	Y+1, r13	; 0x01
    3260:	ea 82       	std	Y+2, r14	; 0x02
    3262:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3264:	8c 15       	cp	r24, r12
    3266:	9d 05       	cpc	r25, r13
    3268:	ae 05       	cpc	r26, r14
    326a:	bf 05       	cpc	r27, r15
    326c:	f8 f4       	brcc	.+62     	; 0x32ac <vTaskDelayUntil+0xaa>
    326e:	13 c0       	rjmp	.+38     	; 0x3296 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3270:	c8 16       	cp	r12, r24
    3272:	d9 06       	cpc	r13, r25
    3274:	ea 06       	cpc	r14, r26
    3276:	fb 06       	cpc	r15, r27
    3278:	00 f1       	brcs	.+64     	; 0x32ba <vTaskDelayUntil+0xb8>
    327a:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    327e:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    3282:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    3286:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    328a:	8c 15       	cp	r24, r12
    328c:	9d 05       	cpc	r25, r13
    328e:	ae 05       	cpc	r26, r14
    3290:	bf 05       	cpc	r27, r15
    3292:	98 f0       	brcs	.+38     	; 0x32ba <vTaskDelayUntil+0xb8>
    3294:	17 c0       	rjmp	.+46     	; 0x32c4 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3296:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    329a:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    329e:	02 96       	adiw	r24, 0x02	; 2
    32a0:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    32a4:	c7 01       	movw	r24, r14
    32a6:	b6 01       	movw	r22, r12
    32a8:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    32ac:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    32b0:	81 11       	cpse	r24, r1
    32b2:	0d c0       	rjmp	.+26     	; 0x32ce <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    32b4:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
		}
	}
    32b8:	0a c0       	rjmp	.+20     	; 0x32ce <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    32ba:	c8 82       	st	Y, r12
    32bc:	d9 82       	std	Y+1, r13	; 0x01
    32be:	ea 82       	std	Y+2, r14	; 0x02
    32c0:	fb 82       	std	Y+3, r15	; 0x03
    32c2:	e9 cf       	rjmp	.-46     	; 0x3296 <vTaskDelayUntil+0x94>
    32c4:	c8 82       	st	Y, r12
    32c6:	d9 82       	std	Y+1, r13	; 0x01
    32c8:	ea 82       	std	Y+2, r14	; 0x02
    32ca:	fb 82       	std	Y+3, r15	; 0x03
    32cc:	ef cf       	rjmp	.-34     	; 0x32ac <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	ff 90       	pop	r15
    32d4:	ef 90       	pop	r14
    32d6:	df 90       	pop	r13
    32d8:	cf 90       	pop	r12
    32da:	08 95       	ret

000032dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    32dc:	cf 92       	push	r12
    32de:	df 92       	push	r13
    32e0:	ef 92       	push	r14
    32e2:	ff 92       	push	r15
    32e4:	6b 01       	movw	r12, r22
    32e6:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    32e8:	67 2b       	or	r22, r23
    32ea:	68 2b       	or	r22, r24
    32ec:	69 2b       	or	r22, r25
    32ee:	e9 f0       	breq	.+58     	; 0x332a <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    32f0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    32f4:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    32f8:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    32fc:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    3300:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    3304:	c8 0e       	add	r12, r24
    3306:	d9 1e       	adc	r13, r25
    3308:	ea 1e       	adc	r14, r26
    330a:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    330c:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    3310:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3314:	02 96       	adiw	r24, 0x02	; 2
    3316:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    331a:	c7 01       	movw	r24, r14
    331c:	b6 01       	movw	r22, r12
    331e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3322:	0e 94 7f 18 	call	0x30fe	; 0x30fe <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3326:	81 11       	cpse	r24, r1
    3328:	02 c0       	rjmp	.+4      	; 0x332e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    332a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vPortYield>
		}
	}
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	08 95       	ret

00003338 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3338:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    333c:	81 11       	cpse	r24, r1
    333e:	0c c0       	rjmp	.+24     	; 0x3358 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3340:	e0 91 30 31 	lds	r30, 0x3130	; 0x803130 <uxTopReadyPriority>
    3344:	4b e0       	ldi	r20, 0x0B	; 11
    3346:	e4 9f       	mul	r30, r20
    3348:	f0 01       	movw	r30, r0
    334a:	11 24       	eor	r1, r1
    334c:	e2 5a       	subi	r30, 0xA2	; 162
    334e:	fe 4c       	sbci	r31, 0xCE	; 206
    3350:	80 81       	ld	r24, Z
    3352:	88 23       	and	r24, r24
    3354:	29 f0       	breq	.+10     	; 0x3360 <vTaskSwitchContext+0x28>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <xMissedYield>
    335e:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3360:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3362:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <uxTopReadyPriority>
    3366:	81 50       	subi	r24, 0x01	; 1
    3368:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    336c:	e0 91 30 31 	lds	r30, 0x3130	; 0x803130 <uxTopReadyPriority>
    3370:	9e 9f       	mul	r25, r30
    3372:	f0 01       	movw	r30, r0
    3374:	11 24       	eor	r1, r1
    3376:	e2 5a       	subi	r30, 0xA2	; 162
    3378:	fe 4c       	sbci	r31, 0xCE	; 206
    337a:	80 81       	ld	r24, Z
    337c:	88 23       	and	r24, r24
    337e:	89 f3       	breq	.-30     	; 0x3362 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3380:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <uxTopReadyPriority>
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4b e0       	ldi	r20, 0x0B	; 11
    338a:	84 9f       	mul	r24, r20
    338c:	c0 01       	movw	r24, r0
    338e:	11 24       	eor	r1, r1
    3390:	dc 01       	movw	r26, r24
    3392:	a2 5a       	subi	r26, 0xA2	; 162
    3394:	be 4c       	sbci	r27, 0xCE	; 206
    3396:	11 96       	adiw	r26, 0x01	; 1
    3398:	ed 91       	ld	r30, X+
    339a:	fc 91       	ld	r31, X
    339c:	12 97       	sbiw	r26, 0x02	; 2
    339e:	04 80       	ldd	r0, Z+4	; 0x04
    33a0:	f5 81       	ldd	r31, Z+5	; 0x05
    33a2:	e0 2d       	mov	r30, r0
    33a4:	11 96       	adiw	r26, 0x01	; 1
    33a6:	ed 93       	st	X+, r30
    33a8:	fc 93       	st	X, r31
    33aa:	12 97       	sbiw	r26, 0x02	; 2
    33ac:	8f 59       	subi	r24, 0x9F	; 159
    33ae:	9e 4c       	sbci	r25, 0xCE	; 206
    33b0:	e8 17       	cp	r30, r24
    33b2:	f9 07       	cpc	r31, r25
    33b4:	61 f4       	brne	.+24     	; 0x33ce <vTaskSwitchContext+0x96>
    33b6:	84 81       	ldd	r24, Z+4	; 0x04
    33b8:	95 81       	ldd	r25, Z+5	; 0x05
    33ba:	4b e0       	ldi	r20, 0x0B	; 11
    33bc:	42 9f       	mul	r20, r18
    33be:	f0 01       	movw	r30, r0
    33c0:	43 9f       	mul	r20, r19
    33c2:	f0 0d       	add	r31, r0
    33c4:	11 24       	eor	r1, r1
    33c6:	e2 5a       	subi	r30, 0xA2	; 162
    33c8:	fe 4c       	sbci	r31, 0xCE	; 206
    33ca:	81 83       	std	Z+1, r24	; 0x01
    33cc:	92 83       	std	Z+2, r25	; 0x02
    33ce:	8b e0       	ldi	r24, 0x0B	; 11
    33d0:	82 9f       	mul	r24, r18
    33d2:	f0 01       	movw	r30, r0
    33d4:	83 9f       	mul	r24, r19
    33d6:	f0 0d       	add	r31, r0
    33d8:	11 24       	eor	r1, r1
    33da:	e2 5a       	subi	r30, 0xA2	; 162
    33dc:	fe 4c       	sbci	r31, 0xCE	; 206
    33de:	01 80       	ldd	r0, Z+1	; 0x01
    33e0:	f2 81       	ldd	r31, Z+2	; 0x02
    33e2:	e0 2d       	mov	r30, r0
    33e4:	80 85       	ldd	r24, Z+8	; 0x08
    33e6:	91 85       	ldd	r25, Z+9	; 0x09
    33e8:	80 93 8a 31 	sts	0x318A, r24	; 0x80318a <pxCurrentTCB>
    33ec:	90 93 8b 31 	sts	0x318B, r25	; 0x80318b <pxCurrentTCB+0x1>
    33f0:	08 95       	ret

000033f2 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    33f2:	cf 92       	push	r12
    33f4:	df 92       	push	r13
    33f6:	ef 92       	push	r14
    33f8:	ff 92       	push	r15
    33fa:	6a 01       	movw	r12, r20
    33fc:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    33fe:	60 91 8a 31 	lds	r22, 0x318A	; 0x80318a <pxCurrentTCB>
    3402:	70 91 8b 31 	lds	r23, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3406:	62 5f       	subi	r22, 0xF2	; 242
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	0e 94 57 11 	call	0x22ae	; 0x22ae <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    340e:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    3412:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3416:	02 96       	adiw	r24, 0x02	; 2
    3418:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    341c:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    3420:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    3424:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    3428:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	6c 0d       	add	r22, r12
    3432:	7d 1d       	adc	r23, r13
    3434:	8e 1d       	adc	r24, r14
    3436:	9f 1d       	adc	r25, r15
    3438:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	08 95       	ret

00003446 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    344e:	dc 01       	movw	r26, r24
    3450:	17 96       	adiw	r26, 0x07	; 7
    3452:	ed 91       	ld	r30, X+
    3454:	fc 91       	ld	r31, X
    3456:	18 97       	sbiw	r26, 0x08	; 8
    3458:	c0 85       	ldd	r28, Z+8	; 0x08
    345a:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    345c:	8e 01       	movw	r16, r28
    345e:	02 5f       	subi	r16, 0xF2	; 242
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	c8 01       	movw	r24, r16
    3464:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3468:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <uxSchedulerSuspended>
    346c:	81 11       	cpse	r24, r1
    346e:	16 c0       	rjmp	.+44     	; 0x349c <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3470:	0c 50       	subi	r16, 0x0C	; 12
    3472:	11 09       	sbc	r17, r1
    3474:	c8 01       	movw	r24, r16
    3476:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    347a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    347c:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    3480:	98 17       	cp	r25, r24
    3482:	10 f4       	brcc	.+4      	; 0x3488 <xTaskRemoveFromEventList+0x42>
    3484:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    3488:	bb e0       	ldi	r27, 0x0B	; 11
    348a:	8b 9f       	mul	r24, r27
    348c:	c0 01       	movw	r24, r0
    348e:	11 24       	eor	r1, r1
    3490:	b8 01       	movw	r22, r16
    3492:	82 5a       	subi	r24, 0xA2	; 162
    3494:	9e 4c       	sbci	r25, 0xCE	; 206
    3496:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    349c:	b8 01       	movw	r22, r16
    349e:	89 e3       	ldi	r24, 0x39	; 57
    34a0:	91 e3       	ldi	r25, 0x31	; 49
    34a2:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    34a6:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    34aa:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    34b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    34b4:	29 17       	cp	r18, r25
    34b6:	08 f4       	brcc	.+2      	; 0x34ba <xTaskRemoveFromEventList+0x74>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
}
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	08 95       	ret

000034c4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    34c4:	20 91 2b 31 	lds	r18, 0x312B	; 0x80312b <xNumOfOverflows>
    34c8:	fc 01       	movw	r30, r24
    34ca:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    34cc:	40 91 32 31 	lds	r20, 0x3132	; 0x803132 <xTickCount>
    34d0:	50 91 33 31 	lds	r21, 0x3133	; 0x803133 <xTickCount+0x1>
    34d4:	60 91 34 31 	lds	r22, 0x3134	; 0x803134 <xTickCount+0x2>
    34d8:	70 91 35 31 	lds	r23, 0x3135	; 0x803135 <xTickCount+0x3>
    34dc:	41 83       	std	Z+1, r20	; 0x01
    34de:	52 83       	std	Z+2, r21	; 0x02
    34e0:	63 83       	std	Z+3, r22	; 0x03
    34e2:	74 83       	std	Z+4, r23	; 0x04
    34e4:	08 95       	ret

000034e6 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    34e6:	8f 92       	push	r8
    34e8:	9f 92       	push	r9
    34ea:	af 92       	push	r10
    34ec:	bf 92       	push	r11
    34ee:	cf 92       	push	r12
    34f0:	df 92       	push	r13
    34f2:	ef 92       	push	r14
    34f4:	ff 92       	push	r15
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3506:	80 91 2b 31 	lds	r24, 0x312B	; 0x80312b <xNumOfOverflows>
    350a:	90 81       	ld	r25, Z
    350c:	98 17       	cp	r25, r24
    350e:	89 f0       	breq	.+34     	; 0x3532 <xTaskCheckForTimeOut+0x4c>
    3510:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    3514:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    3518:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    351c:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    3520:	01 81       	ldd	r16, Z+1	; 0x01
    3522:	12 81       	ldd	r17, Z+2	; 0x02
    3524:	23 81       	ldd	r18, Z+3	; 0x03
    3526:	34 81       	ldd	r19, Z+4	; 0x04
    3528:	80 17       	cp	r24, r16
    352a:	91 07       	cpc	r25, r17
    352c:	a2 07       	cpc	r26, r18
    352e:	b3 07       	cpc	r27, r19
    3530:	a8 f5       	brcc	.+106    	; 0x359c <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3532:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <xTickCount>
    3536:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <xTickCount+0x1>
    353a:	a0 91 34 31 	lds	r26, 0x3134	; 0x803134 <xTickCount+0x2>
    353e:	b0 91 35 31 	lds	r27, 0x3135	; 0x803135 <xTickCount+0x3>
    3542:	c1 80       	ldd	r12, Z+1	; 0x01
    3544:	d2 80       	ldd	r13, Z+2	; 0x02
    3546:	e3 80       	ldd	r14, Z+3	; 0x03
    3548:	f4 80       	ldd	r15, Z+4	; 0x04
    354a:	eb 01       	movw	r28, r22
    354c:	08 81       	ld	r16, Y
    354e:	19 81       	ldd	r17, Y+1	; 0x01
    3550:	2a 81       	ldd	r18, Y+2	; 0x02
    3552:	3b 81       	ldd	r19, Y+3	; 0x03
    3554:	8c 19       	sub	r24, r12
    3556:	9d 09       	sbc	r25, r13
    3558:	ae 09       	sbc	r26, r14
    355a:	bf 09       	sbc	r27, r15
    355c:	80 17       	cp	r24, r16
    355e:	91 07       	cpc	r25, r17
    3560:	a2 07       	cpc	r26, r18
    3562:	b3 07       	cpc	r27, r19
    3564:	e8 f4       	brcc	.+58     	; 0x35a0 <xTaskCheckForTimeOut+0xba>
    3566:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3568:	80 90 32 31 	lds	r8, 0x3132	; 0x803132 <xTickCount>
    356c:	90 90 33 31 	lds	r9, 0x3133	; 0x803133 <xTickCount+0x1>
    3570:	a0 90 34 31 	lds	r10, 0x3134	; 0x803134 <xTickCount+0x2>
    3574:	b0 90 35 31 	lds	r11, 0x3135	; 0x803135 <xTickCount+0x3>
    3578:	b5 01       	movw	r22, r10
    357a:	a4 01       	movw	r20, r8
    357c:	4c 19       	sub	r20, r12
    357e:	5d 09       	sbc	r21, r13
    3580:	6e 09       	sbc	r22, r14
    3582:	7f 09       	sbc	r23, r15
    3584:	04 1b       	sub	r16, r20
    3586:	15 0b       	sbc	r17, r21
    3588:	26 0b       	sbc	r18, r22
    358a:	37 0b       	sbc	r19, r23
    358c:	08 83       	st	Y, r16
    358e:	19 83       	std	Y+1, r17	; 0x01
    3590:	2a 83       	std	Y+2, r18	; 0x02
    3592:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3594:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    35a2:	0f 90       	pop	r0
    35a4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	bf 90       	pop	r11
    35b8:	af 90       	pop	r10
    35ba:	9f 90       	pop	r9
    35bc:	8f 90       	pop	r8
    35be:	08 95       	ret

000035c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <xMissedYield>
    35c6:	08 95       	ret

000035c8 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	21 f4       	brne	.+8      	; 0x35d4 <uxTaskGetStackHighWaterMark+0xc>
    35cc:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    35d0:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    35d4:	dc 01       	movw	r26, r24
    35d6:	5b 96       	adiw	r26, 0x1b	; 27
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    35de:	80 81       	ld	r24, Z
    35e0:	81 31       	cpi	r24, 0x11	; 17
    35e2:	41 f4       	brne	.+16     	; 0x35f4 <uxTaskGetStackHighWaterMark+0x2c>
    35e4:	31 96       	adiw	r30, 0x01	; 1
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    35ea:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    35ec:	21 91       	ld	r18, Z+
    35ee:	21 31       	cpi	r18, 0x11	; 17
    35f0:	e1 f3       	breq	.-8      	; 0x35ea <uxTaskGetStackHighWaterMark+0x22>
    35f2:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    35f8:	08 95       	ret

000035fa <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    35fa:	80 91 8a 31 	lds	r24, 0x318A	; 0x80318a <pxCurrentTCB>
    35fe:	90 91 8b 31 	lds	r25, 0x318B	; 0x80318b <pxCurrentTCB+0x1>

		return xReturn;
	}
    3602:	08 95       	ret

00003604 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    360e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3610:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    3614:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3618:	5a 96       	adiw	r26, 0x1a	; 26
    361a:	8c 91       	ld	r24, X
    361c:	28 17       	cp	r18, r24
    361e:	08 f0       	brcs	.+2      	; 0x3622 <vTaskPriorityInherit+0x1e>
    3620:	41 c0       	rjmp	.+130    	; 0x36a4 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3622:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    3626:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    362a:	5a 96       	adiw	r26, 0x1a	; 26
    362c:	3c 91       	ld	r19, X
    362e:	84 e0       	ldi	r24, 0x04	; 4
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	a0 e0       	ldi	r26, 0x00	; 0
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	83 1b       	sub	r24, r19
    3638:	91 09       	sbc	r25, r1
    363a:	a1 09       	sbc	r26, r1
    363c:	b1 09       	sbc	r27, r1
    363e:	86 87       	std	Z+14, r24	; 0x0e
    3640:	97 87       	std	Z+15, r25	; 0x0f
    3642:	a0 8b       	std	Z+16, r26	; 0x10
    3644:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3646:	8b e0       	ldi	r24, 0x0B	; 11
    3648:	28 9f       	mul	r18, r24
    364a:	90 01       	movw	r18, r0
    364c:	11 24       	eor	r1, r1
    364e:	22 5a       	subi	r18, 0xA2	; 162
    3650:	3e 4c       	sbci	r19, 0xCE	; 206
    3652:	84 85       	ldd	r24, Z+12	; 0x0c
    3654:	95 85       	ldd	r25, Z+13	; 0x0d
    3656:	82 17       	cp	r24, r18
    3658:	93 07       	cpc	r25, r19
    365a:	e9 f4       	brne	.+58     	; 0x3696 <vTaskPriorityInherit+0x92>
    365c:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    365e:	ef 01       	movw	r28, r30
    3660:	22 96       	adiw	r28, 0x02	; 2
    3662:	ce 01       	movw	r24, r28
    3664:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3668:	e0 91 8a 31 	lds	r30, 0x318A	; 0x80318a <pxCurrentTCB>
    366c:	f0 91 8b 31 	lds	r31, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    3670:	82 8d       	ldd	r24, Z+26	; 0x1a
    3672:	f8 01       	movw	r30, r16
    3674:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3676:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    367a:	98 17       	cp	r25, r24
    367c:	10 f4       	brcc	.+4      	; 0x3682 <vTaskPriorityInherit+0x7e>
    367e:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    3682:	fb e0       	ldi	r31, 0x0B	; 11
    3684:	8f 9f       	mul	r24, r31
    3686:	c0 01       	movw	r24, r0
    3688:	11 24       	eor	r1, r1
    368a:	be 01       	movw	r22, r28
    368c:	82 5a       	subi	r24, 0xA2	; 162
    368e:	9e 4c       	sbci	r25, 0xCE	; 206
    3690:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
    3694:	07 c0       	rjmp	.+14     	; 0x36a4 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3696:	a0 91 8a 31 	lds	r26, 0x318A	; 0x80318a <pxCurrentTCB>
    369a:	b0 91 8b 31 	lds	r27, 0x318B	; 0x80318b <pxCurrentTCB+0x1>
    369e:	5a 96       	adiw	r26, 0x1a	; 26
    36a0:	8c 91       	ld	r24, X
    36a2:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	08 95       	ret

000036ae <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	49 f1       	breq	.+82     	; 0x370c <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    36ba:	fc 01       	movw	r30, r24
    36bc:	32 8d       	ldd	r19, Z+26	; 0x1a
    36be:	27 a1       	ldd	r18, Z+39	; 0x27
    36c0:	32 17       	cp	r19, r18
    36c2:	21 f1       	breq	.+72     	; 0x370c <vTaskPriorityDisinherit+0x5e>
    36c4:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    36c6:	8c 01       	movw	r16, r24
    36c8:	0e 5f       	subi	r16, 0xFE	; 254
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
    36cc:	c8 01       	movw	r24, r16
    36ce:	0e 94 a2 11 	call	0x2344	; 0x2344 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    36d2:	8f a1       	ldd	r24, Y+39	; 0x27
    36d4:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    36d6:	44 e0       	ldi	r20, 0x04	; 4
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	48 1b       	sub	r20, r24
    36e0:	51 09       	sbc	r21, r1
    36e2:	61 09       	sbc	r22, r1
    36e4:	71 09       	sbc	r23, r1
    36e6:	4e 87       	std	Y+14, r20	; 0x0e
    36e8:	5f 87       	std	Y+15, r21	; 0x0f
    36ea:	68 8b       	std	Y+16, r22	; 0x10
    36ec:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    36ee:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <uxTopReadyPriority>
    36f2:	98 17       	cp	r25, r24
    36f4:	10 f4       	brcc	.+4      	; 0x36fa <vTaskPriorityDisinherit+0x4c>
    36f6:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <uxTopReadyPriority>
    36fa:	fb e0       	ldi	r31, 0x0B	; 11
    36fc:	8f 9f       	mul	r24, r31
    36fe:	c0 01       	movw	r24, r0
    3700:	11 24       	eor	r1, r1
    3702:	b8 01       	movw	r22, r16
    3704:	82 5a       	subi	r24, 0xA2	; 162
    3706:	9e 4c       	sbci	r25, 0xCE	; 206
    3708:	0e 94 30 11 	call	0x2260	; 0x2260 <vListInsertEnd>
			}
		}
	}
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	08 95       	ret

00003716 <__divmodsi4>:
    3716:	05 2e       	mov	r0, r21
    3718:	97 fb       	bst	r25, 7
    371a:	1e f4       	brtc	.+6      	; 0x3722 <__divmodsi4+0xc>
    371c:	00 94       	com	r0
    371e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__negsi2>
    3722:	57 fd       	sbrc	r21, 7
    3724:	07 d0       	rcall	.+14     	; 0x3734 <__divmodsi4_neg2>
    3726:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
    372a:	07 fc       	sbrc	r0, 7
    372c:	03 d0       	rcall	.+6      	; 0x3734 <__divmodsi4_neg2>
    372e:	4e f4       	brtc	.+18     	; 0x3742 <__divmodsi4_exit>
    3730:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__negsi2>

00003734 <__divmodsi4_neg2>:
    3734:	50 95       	com	r21
    3736:	40 95       	com	r20
    3738:	30 95       	com	r19
    373a:	21 95       	neg	r18
    373c:	3f 4f       	sbci	r19, 0xFF	; 255
    373e:	4f 4f       	sbci	r20, 0xFF	; 255
    3740:	5f 4f       	sbci	r21, 0xFF	; 255

00003742 <__divmodsi4_exit>:
    3742:	08 95       	ret

00003744 <__negsi2>:
    3744:	90 95       	com	r25
    3746:	80 95       	com	r24
    3748:	70 95       	com	r23
    374a:	61 95       	neg	r22
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	8f 4f       	sbci	r24, 0xFF	; 255
    3750:	9f 4f       	sbci	r25, 0xFF	; 255
    3752:	08 95       	ret

00003754 <__udivmodsi4>:
    3754:	a1 e2       	ldi	r26, 0x21	; 33
    3756:	1a 2e       	mov	r1, r26
    3758:	aa 1b       	sub	r26, r26
    375a:	bb 1b       	sub	r27, r27
    375c:	fd 01       	movw	r30, r26
    375e:	0d c0       	rjmp	.+26     	; 0x377a <__udivmodsi4_ep>

00003760 <__udivmodsi4_loop>:
    3760:	aa 1f       	adc	r26, r26
    3762:	bb 1f       	adc	r27, r27
    3764:	ee 1f       	adc	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	a2 17       	cp	r26, r18
    376a:	b3 07       	cpc	r27, r19
    376c:	e4 07       	cpc	r30, r20
    376e:	f5 07       	cpc	r31, r21
    3770:	20 f0       	brcs	.+8      	; 0x377a <__udivmodsi4_ep>
    3772:	a2 1b       	sub	r26, r18
    3774:	b3 0b       	sbc	r27, r19
    3776:	e4 0b       	sbc	r30, r20
    3778:	f5 0b       	sbc	r31, r21

0000377a <__udivmodsi4_ep>:
    377a:	66 1f       	adc	r22, r22
    377c:	77 1f       	adc	r23, r23
    377e:	88 1f       	adc	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	1a 94       	dec	r1
    3784:	69 f7       	brne	.-38     	; 0x3760 <__udivmodsi4_loop>
    3786:	60 95       	com	r22
    3788:	70 95       	com	r23
    378a:	80 95       	com	r24
    378c:	90 95       	com	r25
    378e:	9b 01       	movw	r18, r22
    3790:	ac 01       	movw	r20, r24
    3792:	bd 01       	movw	r22, r26
    3794:	cf 01       	movw	r24, r30
    3796:	08 95       	ret

00003798 <memcpy>:
    3798:	fb 01       	movw	r30, r22
    379a:	dc 01       	movw	r26, r24
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <memcpy+0xa>
    379e:	01 90       	ld	r0, Z+
    37a0:	0d 92       	st	X+, r0
    37a2:	41 50       	subi	r20, 0x01	; 1
    37a4:	50 40       	sbci	r21, 0x00	; 0
    37a6:	d8 f7       	brcc	.-10     	; 0x379e <memcpy+0x6>
    37a8:	08 95       	ret

000037aa <memset>:
    37aa:	dc 01       	movw	r26, r24
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <memset+0x6>
    37ae:	6d 93       	st	X+, r22
    37b0:	41 50       	subi	r20, 0x01	; 1
    37b2:	50 40       	sbci	r21, 0x00	; 0
    37b4:	e0 f7       	brcc	.-8      	; 0x37ae <memset+0x4>
    37b6:	08 95       	ret

000037b8 <strncpy>:
    37b8:	fb 01       	movw	r30, r22
    37ba:	dc 01       	movw	r26, r24
    37bc:	41 50       	subi	r20, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	48 f0       	brcs	.+18     	; 0x37d4 <strncpy+0x1c>
    37c2:	01 90       	ld	r0, Z+
    37c4:	0d 92       	st	X+, r0
    37c6:	00 20       	and	r0, r0
    37c8:	c9 f7       	brne	.-14     	; 0x37bc <strncpy+0x4>
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <strncpy+0x16>
    37cc:	1d 92       	st	X+, r1
    37ce:	41 50       	subi	r20, 0x01	; 1
    37d0:	50 40       	sbci	r21, 0x00	; 0
    37d2:	e0 f7       	brcc	.-8      	; 0x37cc <strncpy+0x14>
    37d4:	08 95       	ret

000037d6 <__itoa_ncheck>:
    37d6:	bb 27       	eor	r27, r27
    37d8:	4a 30       	cpi	r20, 0x0A	; 10
    37da:	31 f4       	brne	.+12     	; 0x37e8 <__itoa_ncheck+0x12>
    37dc:	99 23       	and	r25, r25
    37de:	22 f4       	brpl	.+8      	; 0x37e8 <__itoa_ncheck+0x12>
    37e0:	bd e2       	ldi	r27, 0x2D	; 45
    37e2:	90 95       	com	r25
    37e4:	81 95       	neg	r24
    37e6:	9f 4f       	sbci	r25, 0xFF	; 255
    37e8:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__utoa_common>

000037ec <ultoa>:
    37ec:	25 32       	cpi	r18, 0x25	; 37
    37ee:	31 05       	cpc	r19, r1
    37f0:	20 f4       	brcc	.+8      	; 0x37fa <ultoa+0xe>
    37f2:	22 30       	cpi	r18, 0x02	; 2
    37f4:	10 f0       	brcs	.+4      	; 0x37fa <ultoa+0xe>
    37f6:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__ultoa_ncheck>
    37fa:	fa 01       	movw	r30, r20
    37fc:	10 82       	st	Z, r1
    37fe:	ca 01       	movw	r24, r20
    3800:	08 95       	ret

00003802 <__ultoa_ncheck>:
    3802:	bb 27       	eor	r27, r27

00003804 <__ultoa_common>:
    3804:	fa 01       	movw	r30, r20
    3806:	a6 2f       	mov	r26, r22
    3808:	62 17       	cp	r22, r18
    380a:	71 05       	cpc	r23, r1
    380c:	81 05       	cpc	r24, r1
    380e:	91 05       	cpc	r25, r1
    3810:	33 0b       	sbc	r19, r19
    3812:	30 fb       	bst	r19, 0
    3814:	66 f0       	brts	.+24     	; 0x382e <__ultoa_common+0x2a>
    3816:	aa 27       	eor	r26, r26
    3818:	66 0f       	add	r22, r22
    381a:	77 1f       	adc	r23, r23
    381c:	88 1f       	adc	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	aa 1f       	adc	r26, r26
    3822:	a2 17       	cp	r26, r18
    3824:	10 f0       	brcs	.+4      	; 0x382a <__ultoa_common+0x26>
    3826:	a2 1b       	sub	r26, r18
    3828:	63 95       	inc	r22
    382a:	38 50       	subi	r19, 0x08	; 8
    382c:	a9 f7       	brne	.-22     	; 0x3818 <__ultoa_common+0x14>
    382e:	a0 5d       	subi	r26, 0xD0	; 208
    3830:	aa 33       	cpi	r26, 0x3A	; 58
    3832:	08 f0       	brcs	.+2      	; 0x3836 <__ultoa_common+0x32>
    3834:	a9 5d       	subi	r26, 0xD9	; 217
    3836:	a1 93       	st	Z+, r26
    3838:	36 f7       	brtc	.-52     	; 0x3806 <__ultoa_common+0x2>
    383a:	b1 11       	cpse	r27, r1
    383c:	b1 93       	st	Z+, r27
    383e:	10 82       	st	Z, r1
    3840:	ca 01       	movw	r24, r20
    3842:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <strrev>

00003846 <utoa>:
    3846:	45 32       	cpi	r20, 0x25	; 37
    3848:	51 05       	cpc	r21, r1
    384a:	20 f4       	brcc	.+8      	; 0x3854 <utoa+0xe>
    384c:	42 30       	cpi	r20, 0x02	; 2
    384e:	10 f0       	brcs	.+4      	; 0x3854 <utoa+0xe>
    3850:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__utoa_ncheck>
    3854:	fb 01       	movw	r30, r22
    3856:	10 82       	st	Z, r1
    3858:	cb 01       	movw	r24, r22
    385a:	08 95       	ret

0000385c <__utoa_ncheck>:
    385c:	bb 27       	eor	r27, r27

0000385e <__utoa_common>:
    385e:	fb 01       	movw	r30, r22
    3860:	55 27       	eor	r21, r21
    3862:	aa 27       	eor	r26, r26
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	aa 1f       	adc	r26, r26
    386a:	a4 17       	cp	r26, r20
    386c:	10 f0       	brcs	.+4      	; 0x3872 <__utoa_common+0x14>
    386e:	a4 1b       	sub	r26, r20
    3870:	83 95       	inc	r24
    3872:	50 51       	subi	r21, 0x10	; 16
    3874:	b9 f7       	brne	.-18     	; 0x3864 <__utoa_common+0x6>
    3876:	a0 5d       	subi	r26, 0xD0	; 208
    3878:	aa 33       	cpi	r26, 0x3A	; 58
    387a:	08 f0       	brcs	.+2      	; 0x387e <__utoa_common+0x20>
    387c:	a9 5d       	subi	r26, 0xD9	; 217
    387e:	a1 93       	st	Z+, r26
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	79 f7       	brne	.-34     	; 0x3862 <__utoa_common+0x4>
    3884:	b1 11       	cpse	r27, r1
    3886:	b1 93       	st	Z+, r27
    3888:	11 92       	st	Z+, r1
    388a:	cb 01       	movw	r24, r22
    388c:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <strrev>

00003890 <strrev>:
    3890:	dc 01       	movw	r26, r24
    3892:	fc 01       	movw	r30, r24
    3894:	67 2f       	mov	r22, r23
    3896:	71 91       	ld	r23, Z+
    3898:	77 23       	and	r23, r23
    389a:	e1 f7       	brne	.-8      	; 0x3894 <strrev+0x4>
    389c:	32 97       	sbiw	r30, 0x02	; 2
    389e:	04 c0       	rjmp	.+8      	; 0x38a8 <strrev+0x18>
    38a0:	7c 91       	ld	r23, X
    38a2:	6d 93       	st	X+, r22
    38a4:	70 83       	st	Z, r23
    38a6:	62 91       	ld	r22, -Z
    38a8:	ae 17       	cp	r26, r30
    38aa:	bf 07       	cpc	r27, r31
    38ac:	c8 f3       	brcs	.-14     	; 0x38a0 <strrev+0x10>
    38ae:	08 95       	ret

000038b0 <__mulsi3>:
    38b0:	db 01       	movw	r26, r22
    38b2:	8f 93       	push	r24
    38b4:	9f 93       	push	r25
    38b6:	0e 94 85 1c 	call	0x390a	; 0x390a <__muluhisi3>
    38ba:	bf 91       	pop	r27
    38bc:	af 91       	pop	r26
    38be:	a2 9f       	mul	r26, r18
    38c0:	80 0d       	add	r24, r0
    38c2:	91 1d       	adc	r25, r1
    38c4:	a3 9f       	mul	r26, r19
    38c6:	90 0d       	add	r25, r0
    38c8:	b2 9f       	mul	r27, r18
    38ca:	90 0d       	add	r25, r0
    38cc:	11 24       	eor	r1, r1
    38ce:	08 95       	ret

000038d0 <__divmodhi4>:
    38d0:	97 fb       	bst	r25, 7
    38d2:	07 2e       	mov	r0, r23
    38d4:	16 f4       	brtc	.+4      	; 0x38da <__divmodhi4+0xa>
    38d6:	00 94       	com	r0
    38d8:	07 d0       	rcall	.+14     	; 0x38e8 <__divmodhi4_neg1>
    38da:	77 fd       	sbrc	r23, 7
    38dc:	09 d0       	rcall	.+18     	; 0x38f0 <__divmodhi4_neg2>
    38de:	0e 94 90 1c 	call	0x3920	; 0x3920 <__udivmodhi4>
    38e2:	07 fc       	sbrc	r0, 7
    38e4:	05 d0       	rcall	.+10     	; 0x38f0 <__divmodhi4_neg2>
    38e6:	3e f4       	brtc	.+14     	; 0x38f6 <__divmodhi4_exit>

000038e8 <__divmodhi4_neg1>:
    38e8:	90 95       	com	r25
    38ea:	81 95       	neg	r24
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	08 95       	ret

000038f0 <__divmodhi4_neg2>:
    38f0:	70 95       	com	r23
    38f2:	61 95       	neg	r22
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255

000038f6 <__divmodhi4_exit>:
    38f6:	08 95       	ret

000038f8 <__tablejump2__>:
    38f8:	ee 0f       	add	r30, r30
    38fa:	ff 1f       	adc	r31, r31
    38fc:	88 1f       	adc	r24, r24
    38fe:	8b bf       	out	0x3b, r24	; 59
    3900:	07 90       	elpm	r0, Z+
    3902:	f6 91       	elpm	r31, Z
    3904:	e0 2d       	mov	r30, r0
    3906:	1b be       	out	0x3b, r1	; 59
    3908:	19 94       	eijmp

0000390a <__muluhisi3>:
    390a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__umulhisi3>
    390e:	a5 9f       	mul	r26, r21
    3910:	90 0d       	add	r25, r0
    3912:	b4 9f       	mul	r27, r20
    3914:	90 0d       	add	r25, r0
    3916:	a4 9f       	mul	r26, r20
    3918:	80 0d       	add	r24, r0
    391a:	91 1d       	adc	r25, r1
    391c:	11 24       	eor	r1, r1
    391e:	08 95       	ret

00003920 <__udivmodhi4>:
    3920:	aa 1b       	sub	r26, r26
    3922:	bb 1b       	sub	r27, r27
    3924:	51 e1       	ldi	r21, 0x11	; 17
    3926:	07 c0       	rjmp	.+14     	; 0x3936 <__udivmodhi4_ep>

00003928 <__udivmodhi4_loop>:
    3928:	aa 1f       	adc	r26, r26
    392a:	bb 1f       	adc	r27, r27
    392c:	a6 17       	cp	r26, r22
    392e:	b7 07       	cpc	r27, r23
    3930:	10 f0       	brcs	.+4      	; 0x3936 <__udivmodhi4_ep>
    3932:	a6 1b       	sub	r26, r22
    3934:	b7 0b       	sbc	r27, r23

00003936 <__udivmodhi4_ep>:
    3936:	88 1f       	adc	r24, r24
    3938:	99 1f       	adc	r25, r25
    393a:	5a 95       	dec	r21
    393c:	a9 f7       	brne	.-22     	; 0x3928 <__udivmodhi4_loop>
    393e:	80 95       	com	r24
    3940:	90 95       	com	r25
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	08 95       	ret

00003948 <__umulhisi3>:
    3948:	a2 9f       	mul	r26, r18
    394a:	b0 01       	movw	r22, r0
    394c:	b3 9f       	mul	r27, r19
    394e:	c0 01       	movw	r24, r0
    3950:	a3 9f       	mul	r26, r19
    3952:	70 0d       	add	r23, r0
    3954:	81 1d       	adc	r24, r1
    3956:	11 24       	eor	r1, r1
    3958:	91 1d       	adc	r25, r1
    395a:	b2 9f       	mul	r27, r18
    395c:	70 0d       	add	r23, r0
    395e:	81 1d       	adc	r24, r1
    3960:	11 24       	eor	r1, r1
    3962:	91 1d       	adc	r25, r1
    3964:	08 95       	ret

00003966 <_exit>:
    3966:	f8 94       	cli

00003968 <__stop_program>:
    3968:	ff cf       	rjmp	.-2      	; 0x3968 <__stop_program>
