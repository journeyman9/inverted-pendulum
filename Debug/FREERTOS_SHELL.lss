
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00802000  00003c5e  00003cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a2  0080211a  0080211a  00003e0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  000040c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  0000923b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000c125  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00010d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0001324a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 02 	jmp	0x576	; 0x576 <__ctors_end>
       4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
       8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
       c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      10:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      14:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      18:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      1c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      20:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      28:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      2c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      30:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      34:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      38:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      3c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      40:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      44:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      48:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      4c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      50:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      54:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      58:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      5c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      60:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      64:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_25>
      68:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      6c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      70:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_28>
      74:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      78:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      7c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      80:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      84:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      88:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      8c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      90:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      94:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      98:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      9c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      a0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      a4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      a8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      ac:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      b0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      b4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      b8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      bc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      c0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      c4:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__vector_49>
      c8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      cc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      d0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      d4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      d8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      dc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      e0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      e4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      e8:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_58>
      ec:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      f0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      f4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      f8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
      fc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     100:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     104:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     108:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     10c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     110:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     114:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     118:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     11c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     120:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     124:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     128:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     12c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     130:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     134:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     138:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     13c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     140:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     144:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     148:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     14c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     150:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     154:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     158:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     15c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     160:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_88>
     164:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     168:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     16c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__vector_91>
     170:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     174:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     178:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     17c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     180:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     184:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     188:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     18c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     190:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     194:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     198:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     19c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1a0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1a4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1a8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1ac:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1b0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1b4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1b8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1bc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1c0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1c4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1c8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1cc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1d0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1d4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1d8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1dc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1e0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1e4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1e8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1ec:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1f0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1f4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1f8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
     1fc:	1a 04       	cpc	r1, r10
     1fe:	1d 04       	cpc	r1, r13
     200:	20 04       	cpc	r2, r0
     202:	23 04       	cpc	r2, r3
     204:	26 04       	cpc	r2, r6
     206:	29 04       	cpc	r2, r9
     208:	2b 04       	cpc	r2, r11
     20a:	3c 04       	cpc	r3, r12
     20c:	44 04       	cpc	r4, r4
     20e:	4e 04       	cpc	r4, r14
     210:	4c 04       	cpc	r4, r12

00000212 <__trampolines_start>:
     212:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <_ZN5rs2327putcharEc>
     216:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     21a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN9frt_queueIbE7butt_inERKb>
     21e:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     222:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_call_static_run_method>
     226:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <_ZN9frt_queueIbE12num_items_inEv>
     22a:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <_ZN9task_user3runEv>
     22e:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_ZN5rs23214check_for_charEv>
     232:	0c 94 23 04 	jmp	0x846	; 0x846 <_ZN8emstreamlsE15ser_manipulator+0x30>
     236:	0c 94 26 0c 	jmp	0x184c	; 0x184c <_ZN5rs23212clear_screenEv>
     23a:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <_ZN9frt_queueIbE3getEv>
     23e:	0c 94 12 03 	jmp	0x624	; 0x624 <_ZN8emstream13ready_to_sendEv>
     242:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN18task_motor_command3runEv>
     246:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <_ZN9frt_queueIbE16ISR_num_items_inEv>
     24a:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <_ZN5rs2327getcharEv>
     24e:	0c 94 4c 04 	jmp	0x898	; 0x898 <_ZN8emstreamlsE15ser_manipulator+0x82>
     252:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN14frt_text_queue14check_for_charEv>
     256:	0c 94 0c 03 	jmp	0x618	; 0x618 <_ZN8emstream12transmit_nowEv>
     25a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <_ZN9frt_queueIbE7ISR_getEPb>
     25e:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <_ZN9frt_queueIbE7ISR_putERKb>
     262:	0c 94 14 03 	jmp	0x628	; 0x628 <__cxa_pure_virtual>
     266:	0c 94 26 04 	jmp	0x84c	; 0x84c <_ZN8emstreamlsE15ser_manipulator+0x36>
     26a:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_GLOBAL__sub_I_counter>
     26e:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <_ZN9frt_queueIbE11ISR_butt_inERKb>
     272:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_ZN14frt_text_queue7putcharEc>
     276:	0c 94 af 0c 	jmp	0x195e	; 0x195e <_ZN9frt_queueIbE9not_emptyEv>
     27a:	0c 94 3c 04 	jmp	0x878	; 0x878 <_ZN8emstreamlsE15ser_manipulator+0x62>
     27e:	0c 94 83 03 	jmp	0x706	; 0x706 <_ZN22task_system_controller3runEv>
     282:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <_ZN9frt_queueIbE8is_emptyEv>
     286:	0c 94 44 04 	jmp	0x888	; 0x888 <_ZN8emstreamlsE15ser_manipulator+0x72>
     28a:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_ZN8emstream14check_for_charEv>
     28e:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <_ZN9frt_queueIbE3getEPb>
     292:	0c 94 0b 03 	jmp	0x616	; 0x616 <_ZN8emstream12clear_screenEv>
     296:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     29a:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <_ZN9frt_queueIbE10get_a_copyERb>
     29e:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_ZN9frt_queueIbE7ISR_getEv>
     2a2:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     2a6:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <_ZN9frt_queueIbE12ISR_is_emptyEv>
     2aa:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN8frt_task12print_statusER8emstream>
     2ae:	0c 94 2b 04 	jmp	0x856	; 0x856 <_ZN8emstreamlsE15ser_manipulator+0x40>
     2b2:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <_ZN9frt_queueIbE3putERKb>
     2b6:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_ZN8emstreamlsE15ser_manipulator+0x24>
     2ba:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_ZN18task_motor_encoder3runEv>
     2be:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_ZN8emstream7getcharEv>
     2c2:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN21task_pendulum_encoder3runEv>
     2c6:	0c 94 2d 03 	jmp	0x65a	; 0x65a <_ZN14frt_text_queue7getcharEv>
     2ca:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <prvIdleTask>
     2ce:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_ZN17task_limit_switch3runEv>
     2d2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <_ZN9frt_queueIbE13ISR_not_emptyEv>
     2d6:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_ZN9frt_queueIbE10get_a_copyEv>

000002da <__trampolines_end>:
     2da:	09 09       	sbc	r16, r9
	...

000002dd <_ZZ15print_task_listP8emstreamE3__c_8>:
     2dd:	2f 00                                               /.

000002df <_ZZ15print_task_listP8emstreamE3__c_7>:
     2df:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002ea <_ZZ15print_task_listP8emstreamE3__c_6>:
     2ea:	09 2d 2d 2d 2d 00                                   .----.

000002f0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2f0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002fc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2fc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

0000030d <_ZZ15print_task_listP8emstreamE3__c_3>:
     30d:	09 52 75 6e 73 00                                   .Runs.

00000313 <_ZZ15print_task_listP8emstreamE3__c_2>:
     313:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

0000031f <_ZZ15print_task_listP8emstreamE3__c_1>:
     31f:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000330 <_ZZ15print_task_listP8emstreamE3__c_0>:
     330:	09 53 74 61 63 6b 00                                .Stack.

00000337 <_ZZ15print_task_listP8emstreamE3__c>:
     337:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000342 <_ZZN9task_user11show_statusEvE3__c_4>:
     342:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000034d <_ZZN9task_user11show_statusEvE3__c_3>:
     34d:	2f 00                                               /.

0000034f <_ZZN9task_user11show_statusEvE3__c_2>:
     34f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000035d <_ZZN9task_user11show_statusEvE3__c_1>:
     35d:	54 69 6d 65 3a 20 00                                Time: .

00000364 <_ZZN9task_user11show_statusEvE3__c_0>:
     364:	46 65 62 20 32 33 20 32 30 32 35 00                 Feb 23 2025.

00000370 <_ZZN9task_user11show_statusEvE3__c>:
     370:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     380:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000038f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     38f:	1b 5b 32 32 6d 00                                   .[22m.

00000395 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     395:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000003a0 <_ZZ17print_task_stacksP8emstreamE3__c>:
     3a0:	1b 5b 31 6d 00                                      .[1m.

000003a5 <_ZZN9task_user3runEvE3__c_3>:
     3a5:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     3b5:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

000003c2 <_ZZN9task_user3runEvE3__c_2>:
     3c2:	3a 57 54 46 3f 00                                   :WTF?.

000003c8 <_ZZN9task_user3runEvE3__c_1>:
     3c8:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     3d8:	65 00                                               e.

000003da <_ZZN9task_user3runEvE3__c_0>:
     3da:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003e8 <_ZZN9task_user3runEvE3__c>:
     3e8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3f8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

00000406 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     406:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000415 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     415:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     425:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000430 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     430:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     440:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000044e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     44e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     45e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     46e:	6d 61 74 69 6f 6e 00                                mation.

00000475 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     475:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     485:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000496 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     496:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     4a6:	65 20 6f 6e 6c 79 3a 00                             e only:.

000004ae <_ZZN9task_user18print_help_messageEvE3__c_4>:
     4ae:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     4be:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000004ca <_ZZN9task_user18print_help_messageEvE3__c_3>:
     4ca:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     4da:	68 65 20 41 56 52 00                                he AVR.

000004e1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4e1:	20 68 65 6c 70 00                                    help.

000004e7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4e7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4f7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000506 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     506:	1b 5b 33 30 6d 00                                   .[30m.

0000050c <_ZZN9task_user18print_help_messageEvE3__c>:
     50c:	1b 5b 34 36 6d 00                                   .[46m.

00000512 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     512:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     522:	61 73 6b 20 00                                      ask .

00000527 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     527:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000535 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     535:	20 63 72 65 61 74 65 64 00                           created.

0000053e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     53e:	54 61 73 6b 20 00                                   Task .

00000544 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     544:	1b 5b 32 32 6d 00                                   .[22m.

0000054a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     54a:	54 61 73 6b 3a 20 00                                Task: .

00000551 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     551:	1b 5b 31 6d 00                                      .[1m.

00000556 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     556:	09 00                                               ..

00000558 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     558:	09 00                                               ..

0000055a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     55a:	2f 00                                               /.

0000055c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     55c:	09 00                                               ..

0000055e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     55e:	09 00                                               ..

00000560 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     560:	1b 5b 32 32 6d 00                                   .[22m.

00000566 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     566:	1b 5b 31 6d 00                                      .[1m.

0000056b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     56b:	1b 5b 31 6d 00                                      .[1m.

00000570 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     570:	20 20 00 00                                           ..

00000574 <__ctors_start>:
     574:	88 0d       	add	r24, r8

00000576 <__ctors_end>:
     576:	11 24       	eor	r1, r1
     578:	1f be       	out	0x3f, r1	; 63
     57a:	cf ef       	ldi	r28, 0xFF	; 255
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df e3       	ldi	r29, 0x3F	; 63
     580:	de bf       	out	0x3e, r29	; 62
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	0c bf       	out	0x3c, r16	; 60
     586:	18 be       	out	0x38, r1	; 56
     588:	19 be       	out	0x39, r1	; 57
     58a:	1a be       	out	0x3a, r1	; 58
     58c:	1b be       	out	0x3b, r1	; 59

0000058e <__do_copy_data>:
     58e:	11 e2       	ldi	r17, 0x21	; 33
     590:	a0 e0       	ldi	r26, 0x00	; 0
     592:	b0 e2       	ldi	r27, 0x20	; 32
     594:	ee e5       	ldi	r30, 0x5E	; 94
     596:	fc e3       	ldi	r31, 0x3C	; 60
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	0b bf       	out	0x3b, r16	; 59
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__do_copy_data+0x14>
     59e:	07 90       	elpm	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	aa 31       	cpi	r26, 0x1A	; 26
     5a4:	b1 07       	cpc	r27, r17
     5a6:	d9 f7       	brne	.-10     	; 0x59e <__do_copy_data+0x10>
     5a8:	1b be       	out	0x3b, r1	; 59

000005aa <__do_clear_bss>:
     5aa:	21 e3       	ldi	r18, 0x31	; 49
     5ac:	aa e1       	ldi	r26, 0x1A	; 26
     5ae:	b1 e2       	ldi	r27, 0x21	; 33
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	ac 3b       	cpi	r26, 0xBC	; 188
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>

000005ba <__do_global_ctors>:
     5ba:	12 e0       	ldi	r17, 0x02	; 2
     5bc:	cb eb       	ldi	r28, 0xBB	; 187
     5be:	d2 e0       	ldi	r29, 0x02	; 2
     5c0:	00 e0       	ldi	r16, 0x00	; 0
     5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <__do_global_ctors+0x16>
     5c4:	21 97       	sbiw	r28, 0x01	; 1
     5c6:	01 09       	sbc	r16, r1
     5c8:	80 2f       	mov	r24, r16
     5ca:	fe 01       	movw	r30, r28
     5cc:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__tablejump2__>
     5d0:	ca 3b       	cpi	r28, 0xBA	; 186
     5d2:	d1 07       	cpc	r29, r17
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	08 07       	cpc	r16, r24
     5d8:	a9 f7       	brne	.-22     	; 0x5c4 <__do_global_ctors+0xa>
     5da:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <main>
     5de:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <_exit>

000005e2 <__bad_interrupt>:
     5e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005e6 <_ZN8emstreamlsEb>:
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
     5ec:	66 23       	and	r22, r22
     5ee:	41 f0       	breq	.+16     	; 0x600 <_ZN8emstreamlsEb+0x1a>
     5f0:	e8 81       	ld	r30, Y
     5f2:	f9 81       	ldd	r31, Y+1	; 0x01
     5f4:	02 80       	ldd	r0, Z+2	; 0x02
     5f6:	f3 81       	ldd	r31, Z+3	; 0x03
     5f8:	e0 2d       	mov	r30, r0
     5fa:	64 e5       	ldi	r22, 0x54	; 84
     5fc:	19 95       	eicall
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <_ZN8emstreamlsEb+0x28>
     600:	e8 81       	ld	r30, Y
     602:	f9 81       	ldd	r31, Y+1	; 0x01
     604:	02 80       	ldd	r0, Z+2	; 0x02
     606:	f3 81       	ldd	r31, Z+3	; 0x03
     608:	e0 2d       	mov	r30, r0
     60a:	66 e4       	ldi	r22, 0x46	; 70
     60c:	19 95       	eicall
     60e:	ce 01       	movw	r24, r28
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <_ZN8emstream12clear_screenEv>:
     616:	08 95       	ret

00000618 <_ZN8emstream12transmit_nowEv>:
     618:	08 95       	ret

0000061a <_ZN8emstream14check_for_charEv>:
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	08 95       	ret

0000061e <_ZN8emstream7getcharEv>:
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	08 95       	ret

00000624 <_ZN8emstream13ready_to_sendEv>:
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret

00000628 <__cxa_pure_virtual>:
     628:	08 95       	ret

0000062a <_ZN10time_stamp10set_to_nowEv>:
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	0f 92       	push	r0
     636:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     63a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     63e:	8c 83       	std	Y+4, r24	; 0x04
     640:	9d 83       	std	Y+5, r25	; 0x05
     642:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
     646:	68 83       	st	Y, r22
     648:	79 83       	std	Y+1, r23	; 0x01
     64a:	8a 83       	std	Y+2, r24	; 0x02
     64c:	9b 83       	std	Y+3, r25	; 0x03
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	ce 01       	movw	r24, r28
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <_ZN14frt_text_queue7getcharEv>:
     65a:	0f 93       	push	r16
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	1f 92       	push	r1
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	00 e0       	ldi	r16, 0x00	; 0
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	a9 01       	movw	r20, r18
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	fc 01       	movw	r30, r24
     676:	80 85       	ldd	r24, Z+8	; 0x08
     678:	91 85       	ldd	r25, Z+9	; 0x09
     67a:	0e 94 75 16 	call	0x2cea	; 0x2cea <xQueueGenericReceive>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	19 f4       	brne	.+6      	; 0x688 <_ZN14frt_text_queue7getcharEv+0x2e>
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN14frt_text_queue7getcharEv+0x32>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <_ZN14frt_text_queue14check_for_charEv>:
     696:	fc 01       	movw	r30, r24
     698:	80 85       	ldd	r24, Z+8	; 0x08
     69a:	91 85       	ldd	r25, Z+9	; 0x09
     69c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxQueueMessagesWaiting>
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	81 11       	cpse	r24, r1
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <_ZN14frt_text_queue14check_for_charEv+0x12>
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	89 2f       	mov	r24, r25
     6aa:	08 95       	ret

000006ac <_ZN14frt_text_queue7putcharEc>:
     6ac:	0f 93       	push	r16
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	1f 92       	push	r1
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	69 83       	std	Y+1, r22	; 0x01
     6ba:	fc 01       	movw	r30, r24
     6bc:	22 85       	ldd	r18, Z+10	; 0x0a
     6be:	33 85       	ldd	r19, Z+11	; 0x0b
     6c0:	44 85       	ldd	r20, Z+12	; 0x0c
     6c2:	55 85       	ldd	r21, Z+13	; 0x0d
     6c4:	00 e0       	ldi	r16, 0x00	; 0
     6c6:	be 01       	movw	r22, r28
     6c8:	6f 5f       	subi	r22, 0xFF	; 255
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	80 85       	ldd	r24, Z+8	; 0x08
     6ce:	91 85       	ldd	r25, Z+9	; 0x09
     6d0:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <xQueueGenericSend>
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	81 11       	cpse	r24, r1
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <_ZN14frt_text_queue7putcharEc+0x30>
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	89 2f       	mov	r24, r25
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	0f 91       	pop	r16
     6e6:	08 95       	ret

000006e8 <_call_static_run_method>:
     6e8:	ec 01       	movw	r28, r24
     6ea:	e8 81       	ld	r30, Y
     6ec:	f9 81       	ldd	r31, Y+1	; 0x01
     6ee:	01 90       	ld	r0, Z+
     6f0:	f0 81       	ld	r31, Z
     6f2:	e0 2d       	mov	r30, r0
     6f4:	19 95       	eicall
     6f6:	1a 82       	std	Y+2, r1	; 0x02
     6f8:	1b 82       	std	Y+3, r1	; 0x03
     6fa:	6f ef       	ldi	r22, 0xFF	; 255
     6fc:	7f ef       	ldi	r23, 0xFF	; 255
     6fe:	cb 01       	movw	r24, r22
     700:	0e 94 1b 1b 	call	0x3636	; 0x3636 <vTaskDelay>
     704:	fa cf       	rjmp	.-12     	; 0x6fa <_call_static_run_method+0x12>

00000706 <_ZN22task_system_controller3runEv>:
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <_ZN22task_system_controller3runEv+0x6>
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	8c 01       	movw	r16, r24
     714:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
     718:	69 83       	std	Y+1, r22	; 0x01
     71a:	7a 83       	std	Y+2, r23	; 0x02
     71c:	8b 83       	std	Y+3, r24	; 0x03
     71e:	9c 83       	std	Y+4, r25	; 0x04
     720:	f8 01       	movw	r30, r16
     722:	86 85       	ldd	r24, Z+14	; 0x0e
     724:	97 85       	ldd	r25, Z+15	; 0x0f
     726:	a0 89       	ldd	r26, Z+16	; 0x10
     728:	b1 89       	ldd	r27, Z+17	; 0x11
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	a1 1d       	adc	r26, r1
     72e:	b1 1d       	adc	r27, r1
     730:	86 87       	std	Z+14, r24	; 0x0e
     732:	97 87       	std	Z+15, r25	; 0x0f
     734:	a0 8b       	std	Z+16, r26	; 0x10
     736:	b1 8b       	std	Z+17, r27	; 0x11
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	0e 94 ae 1a 	call	0x355c	; 0x355c <vTaskDelayUntil>
     748:	eb cf       	rjmp	.-42     	; 0x720 <_ZN22task_system_controller3runEv+0x1a>

0000074a <_ZN21task_pendulum_encoder3runEv>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	00 d0       	rcall	.+0      	; 0x750 <_ZN21task_pendulum_encoder3runEv+0x6>
     750:	1f 92       	push	r1
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	8c 01       	movw	r16, r24
     758:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
     75c:	69 83       	std	Y+1, r22	; 0x01
     75e:	7a 83       	std	Y+2, r23	; 0x02
     760:	8b 83       	std	Y+3, r24	; 0x03
     762:	9c 83       	std	Y+4, r25	; 0x04
     764:	f8 01       	movw	r30, r16
     766:	86 85       	ldd	r24, Z+14	; 0x0e
     768:	97 85       	ldd	r25, Z+15	; 0x0f
     76a:	a0 89       	ldd	r26, Z+16	; 0x10
     76c:	b1 89       	ldd	r27, Z+17	; 0x11
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	a1 1d       	adc	r26, r1
     772:	b1 1d       	adc	r27, r1
     774:	86 87       	std	Z+14, r24	; 0x0e
     776:	97 87       	std	Z+15, r25	; 0x0f
     778:	a0 8b       	std	Z+16, r26	; 0x10
     77a:	b1 8b       	std	Z+17, r27	; 0x11
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	0e 94 ae 1a 	call	0x355c	; 0x355c <vTaskDelayUntil>
     78c:	eb cf       	rjmp	.-42     	; 0x764 <_ZN21task_pendulum_encoder3runEv+0x1a>

0000078e <_ZN18task_motor_encoder3runEv>:
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <_ZN18task_motor_encoder3runEv+0x6>
     794:	1f 92       	push	r1
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	8c 01       	movw	r16, r24
     79c:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
     7a0:	69 83       	std	Y+1, r22	; 0x01
     7a2:	7a 83       	std	Y+2, r23	; 0x02
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	9c 83       	std	Y+4, r25	; 0x04
     7a8:	f8 01       	movw	r30, r16
     7aa:	86 85       	ldd	r24, Z+14	; 0x0e
     7ac:	97 85       	ldd	r25, Z+15	; 0x0f
     7ae:	a0 89       	ldd	r26, Z+16	; 0x10
     7b0:	b1 89       	ldd	r27, Z+17	; 0x11
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	a1 1d       	adc	r26, r1
     7b6:	b1 1d       	adc	r27, r1
     7b8:	86 87       	std	Z+14, r24	; 0x0e
     7ba:	97 87       	std	Z+15, r25	; 0x0f
     7bc:	a0 8b       	std	Z+16, r26	; 0x10
     7be:	b1 8b       	std	Z+17, r27	; 0x11
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	0e 94 ae 1a 	call	0x355c	; 0x355c <vTaskDelayUntil>
     7d0:	eb cf       	rjmp	.-42     	; 0x7a8 <_ZN18task_motor_encoder3runEv+0x1a>

000007d2 <_ZN18task_motor_command3runEv>:
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <_ZN18task_motor_command3runEv+0x6>
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	8c 01       	movw	r16, r24
     7e0:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
     7e4:	69 83       	std	Y+1, r22	; 0x01
     7e6:	7a 83       	std	Y+2, r23	; 0x02
     7e8:	8b 83       	std	Y+3, r24	; 0x03
     7ea:	9c 83       	std	Y+4, r25	; 0x04
     7ec:	f8 01       	movw	r30, r16
     7ee:	86 85       	ldd	r24, Z+14	; 0x0e
     7f0:	97 85       	ldd	r25, Z+15	; 0x0f
     7f2:	a0 89       	ldd	r26, Z+16	; 0x10
     7f4:	b1 89       	ldd	r27, Z+17	; 0x11
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	a1 1d       	adc	r26, r1
     7fa:	b1 1d       	adc	r27, r1
     7fc:	86 87       	std	Z+14, r24	; 0x0e
     7fe:	97 87       	std	Z+15, r25	; 0x0f
     800:	a0 8b       	std	Z+16, r26	; 0x10
     802:	b1 8b       	std	Z+17, r27	; 0x11
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 ae 1a 	call	0x355c	; 0x355c <vTaskDelayUntil>
     814:	eb cf       	rjmp	.-42     	; 0x7ec <_ZN18task_motor_command3runEv+0x1a>

00000816 <_ZN8emstreamlsE15ser_manipulator>:
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	86 2f       	mov	r24, r22
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	8b 30       	cpi	r24, 0x0B	; 11
     822:	91 05       	cpc	r25, r1
     824:	d8 f5       	brcc	.+118    	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     826:	fc 01       	movw	r30, r24
     828:	88 27       	eor	r24, r24
     82a:	e2 50       	subi	r30, 0x02	; 2
     82c:	ff 4f       	sbci	r31, 0xFF	; 255
     82e:	8f 4f       	sbci	r24, 0xFF	; 255
     830:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__tablejump2__>
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	8a 83       	std	Y+2, r24	; 0x02
     838:	31 c0       	rjmp	.+98     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     83a:	88 e0       	ldi	r24, 0x08	; 8
     83c:	8a 83       	std	Y+2, r24	; 0x02
     83e:	2e c0       	rjmp	.+92     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	2b c0       	rjmp	.+86     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     846:	80 e1       	ldi	r24, 0x10	; 16
     848:	8a 83       	std	Y+2, r24	; 0x02
     84a:	28 c0       	rjmp	.+80     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	25 c0       	rjmp	.+74     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     852:	1b 82       	std	Y+3, r1	; 0x03
     854:	23 c0       	rjmp	.+70     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     856:	e8 81       	ld	r30, Y
     858:	f9 81       	ldd	r31, Y+1	; 0x01
     85a:	02 80       	ldd	r0, Z+2	; 0x02
     85c:	f3 81       	ldd	r31, Z+3	; 0x03
     85e:	e0 2d       	mov	r30, r0
     860:	6d e0       	ldi	r22, 0x0D	; 13
     862:	ce 01       	movw	r24, r28
     864:	19 95       	eicall
     866:	e8 81       	ld	r30, Y
     868:	f9 81       	ldd	r31, Y+1	; 0x01
     86a:	02 80       	ldd	r0, Z+2	; 0x02
     86c:	f3 81       	ldd	r31, Z+3	; 0x03
     86e:	e0 2d       	mov	r30, r0
     870:	6a e0       	ldi	r22, 0x0A	; 10
     872:	ce 01       	movw	r24, r28
     874:	19 95       	eicall
     876:	12 c0       	rjmp	.+36     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     878:	e8 81       	ld	r30, Y
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	02 84       	ldd	r0, Z+10	; 0x0a
     87e:	f3 85       	ldd	r31, Z+11	; 0x0b
     880:	e0 2d       	mov	r30, r0
     882:	ce 01       	movw	r24, r28
     884:	19 95       	eicall
     886:	0a c0       	rjmp	.+20     	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     888:	e8 81       	ld	r30, Y
     88a:	f9 81       	ldd	r31, Y+1	; 0x01
     88c:	00 84       	ldd	r0, Z+8	; 0x08
     88e:	f1 85       	ldd	r31, Z+9	; 0x09
     890:	e0 2d       	mov	r30, r0
     892:	ce 01       	movw	r24, r28
     894:	19 95       	eicall
     896:	02 c0       	rjmp	.+4      	; 0x89c <_ZN8emstreamlsE15ser_manipulator+0x86>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	8c 83       	std	Y+4, r24	; 0x04
     89c:	ce 01       	movw	r24, r28
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN8frt_task20print_status_in_listEP8emstream>:
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	8b 01       	movw	r16, r22
     8b0:	e8 81       	ld	r30, Y
     8b2:	f9 81       	ldd	r31, Y+1	; 0x01
     8b4:	02 80       	ldd	r0, Z+2	; 0x02
     8b6:	f3 81       	ldd	r31, Z+3	; 0x03
     8b8:	e0 2d       	mov	r30, r0
     8ba:	19 95       	eicall
     8bc:	66 e0       	ldi	r22, 0x06	; 6
     8be:	c8 01       	movw	r24, r16
     8c0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     8c4:	8c 81       	ldd	r24, Y+4	; 0x04
     8c6:	9d 81       	ldd	r25, Y+5	; 0x05
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     8cc:	b8 01       	movw	r22, r16
     8ce:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8frt_task20print_status_in_listEP8emstream>
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <_ZN8emstream4putsEPKc>:
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	8c 01       	movw	r16, r24
     8e6:	fb 01       	movw	r30, r22
     8e8:	dc 01       	movw	r26, r24
     8ea:	14 96       	adiw	r26, 0x04	; 4
     8ec:	8c 91       	ld	r24, X
     8ee:	81 11       	cpse	r24, r1
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <_ZN8emstream4putsEPKc+0x1e>
     8f2:	60 81       	ld	r22, Z
     8f4:	61 11       	cpse	r22, r1
     8f6:	17 c0       	rjmp	.+46     	; 0x926 <_ZN8emstream4putsEPKc+0x4a>
     8f8:	23 c0       	rjmp	.+70     	; 0x940 <_ZN8emstream4putsEPKc+0x64>
     8fa:	d8 01       	movw	r26, r16
     8fc:	14 96       	adiw	r26, 0x04	; 4
     8fe:	1c 92       	st	X, r1
     900:	eb 01       	movw	r28, r22
     902:	21 96       	adiw	r28, 0x01	; 1
     904:	64 91       	lpm	r22, Z
     906:	66 23       	and	r22, r22
     908:	d9 f0       	breq	.+54     	; 0x940 <_ZN8emstream4putsEPKc+0x64>
     90a:	d8 01       	movw	r26, r16
     90c:	ed 91       	ld	r30, X+
     90e:	fc 91       	ld	r31, X
     910:	02 80       	ldd	r0, Z+2	; 0x02
     912:	f3 81       	ldd	r31, Z+3	; 0x03
     914:	e0 2d       	mov	r30, r0
     916:	c8 01       	movw	r24, r16
     918:	19 95       	eicall
     91a:	fe 01       	movw	r30, r28
     91c:	64 91       	lpm	r22, Z
     91e:	21 96       	adiw	r28, 0x01	; 1
     920:	61 11       	cpse	r22, r1
     922:	f3 cf       	rjmp	.-26     	; 0x90a <_ZN8emstream4putsEPKc+0x2e>
     924:	0d c0       	rjmp	.+26     	; 0x940 <_ZN8emstream4putsEPKc+0x64>
     926:	ef 01       	movw	r28, r30
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	d8 01       	movw	r26, r16
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	02 80       	ldd	r0, Z+2	; 0x02
     932:	f3 81       	ldd	r31, Z+3	; 0x03
     934:	e0 2d       	mov	r30, r0
     936:	c8 01       	movw	r24, r16
     938:	19 95       	eicall
     93a:	69 91       	ld	r22, Y+
     93c:	61 11       	cpse	r22, r1
     93e:	f5 cf       	rjmp	.-22     	; 0x92a <_ZN8emstream4putsEPKc+0x4e>
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <_ZN8emstreamlsEm>:
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	a1 97       	sbiw	r28, 0x21	; 33
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	de bf       	out	0x3e, r29	; 62
     962:	8c 01       	movw	r16, r24
     964:	d4 2e       	mov	r13, r20
     966:	e5 2e       	mov	r14, r21
     968:	f6 2e       	mov	r15, r22
     96a:	97 2f       	mov	r25, r23
     96c:	f8 01       	movw	r30, r16
     96e:	22 81       	ldd	r18, Z+2	; 0x02
     970:	20 31       	cpi	r18, 0x10	; 16
     972:	21 f0       	breq	.+8      	; 0x97c <_ZN8emstreamlsEm+0x32>
     974:	28 30       	cpi	r18, 0x08	; 8
     976:	11 f0       	breq	.+4      	; 0x97c <_ZN8emstreamlsEm+0x32>
     978:	22 30       	cpi	r18, 0x02	; 2
     97a:	71 f4       	brne	.+28     	; 0x998 <_ZN8emstreamlsEm+0x4e>
     97c:	69 2f       	mov	r22, r25
     97e:	c8 01       	movw	r24, r16
     980:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     984:	6f 2d       	mov	r22, r15
     986:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     98a:	6e 2d       	mov	r22, r14
     98c:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     990:	6d 2d       	mov	r22, r13
     992:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <_ZN8emstreamlsEm+0x6c>
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	ae 01       	movw	r20, r28
     99c:	4f 5f       	subi	r20, 0xFF	; 255
     99e:	5f 4f       	sbci	r21, 0xFF	; 255
     9a0:	6d 2d       	mov	r22, r13
     9a2:	7e 2d       	mov	r23, r14
     9a4:	8f 2d       	mov	r24, r15
     9a6:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <ultoa>
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     9b6:	c8 01       	movw	r24, r16
     9b8:	a1 96       	adiw	r28, 0x21	; 33
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	08 95       	ret

000009ce <_ZN8emstreamlsEj>:
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	61 97       	sbiw	r28, 0x11	; 17
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	8c 01       	movw	r16, r24
     9e4:	f6 2e       	mov	r15, r22
     9e6:	97 2f       	mov	r25, r23
     9e8:	f8 01       	movw	r30, r16
     9ea:	42 81       	ldd	r20, Z+2	; 0x02
     9ec:	40 31       	cpi	r20, 0x10	; 16
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <_ZN8emstreamlsEj+0x2a>
     9f0:	48 30       	cpi	r20, 0x08	; 8
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <_ZN8emstreamlsEj+0x2a>
     9f4:	42 30       	cpi	r20, 0x02	; 2
     9f6:	41 f4       	brne	.+16     	; 0xa08 <_ZN8emstreamlsEj+0x3a>
     9f8:	69 2f       	mov	r22, r25
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     a00:	6f 2d       	mov	r22, r15
     a02:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <_ZN8emstreamlsEj+0x54>
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	be 01       	movw	r22, r28
     a0c:	6f 5f       	subi	r22, 0xFF	; 255
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	8f 2d       	mov	r24, r15
     a12:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <utoa>
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	c8 01       	movw	r24, r16
     a1e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     a22:	c8 01       	movw	r24, r16
     a24:	61 96       	adiw	r28, 0x11	; 17
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	08 95       	ret

00000a36 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     a36:	5f 92       	push	r5
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	5c 01       	movw	r10, r24
     a56:	3b 01       	movw	r6, r22
     a58:	4a 01       	movw	r8, r20
     a5a:	12 2f       	mov	r17, r18
     a5c:	50 2e       	mov	r5, r16
     a5e:	63 e0       	ldi	r22, 0x03	; 3
     a60:	ca 01       	movw	r24, r20
     a62:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     a66:	a6 14       	cp	r10, r6
     a68:	b7 04       	cpc	r11, r7
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     a6c:	7c c0       	rjmp	.+248    	; 0xb66 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     a6e:	65 01       	movw	r12, r10
     a70:	84 e1       	ldi	r24, 0x14	; 20
     a72:	c8 0e       	add	r12, r24
     a74:	d1 1c       	adc	r13, r1
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	75 01       	movw	r14, r10
     a7a:	b5 01       	movw	r22, r10
     a7c:	c4 01       	movw	r24, r8
     a7e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
     a82:	6a e0       	ldi	r22, 0x0A	; 10
     a84:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     a88:	60 e7       	ldi	r22, 0x70	; 112
     a8a:	75 e0       	ldi	r23, 0x05	; 5
     a8c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     a90:	11 23       	and	r17, r17
     a92:	09 f4       	brne	.+2      	; 0xa96 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     a94:	6d c0       	rjmp	.+218    	; 0xb70 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     a96:	00 23       	and	r16, r16
     a98:	09 f4       	brne	.+2      	; 0xa9c <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     a9a:	6a c0       	rjmp	.+212    	; 0xb70 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     a9c:	6a e0       	ldi	r22, 0x0A	; 10
     a9e:	c4 01       	movw	r24, r8
     aa0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     aa4:	6b e6       	ldi	r22, 0x6B	; 107
     aa6:	75 e0       	ldi	r23, 0x05	; 5
     aa8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     aac:	61 c0       	rjmp	.+194    	; 0xb70 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     aae:	11 23       	and	r17, r17
     ab0:	71 f0       	breq	.+28     	; 0xace <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     ab2:	01 11       	cpse	r16, r1
     ab4:	0c c0       	rjmp	.+24     	; 0xace <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     ab6:	88 81       	ld	r24, Y
     ab8:	85 15       	cp	r24, r5
     aba:	49 f0       	breq	.+18     	; 0xace <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	c4 01       	movw	r24, r8
     ac0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     ac4:	66 e6       	ldi	r22, 0x66	; 102
     ac6:	75 e0       	ldi	r23, 0x05	; 5
     ac8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     acc:	01 e0       	ldi	r16, 0x01	; 1
     ace:	69 91       	ld	r22, Y+
     ad0:	c4 01       	movw	r24, r8
     ad2:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     ad6:	dc 01       	movw	r26, r24
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	02 80       	ldd	r0, Z+2	; 0x02
     ade:	f3 81       	ldd	r31, Z+3	; 0x03
     ae0:	e0 2d       	mov	r30, r0
     ae2:	60 e2       	ldi	r22, 0x20	; 32
     ae4:	19 95       	eicall
     ae6:	cc 16       	cp	r12, r28
     ae8:	dd 06       	cpc	r13, r29
     aea:	09 f7       	brne	.-62     	; 0xaae <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     aec:	11 23       	and	r17, r17
     aee:	89 f0       	breq	.+34     	; 0xb12 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     af0:	6a e0       	ldi	r22, 0x0A	; 10
     af2:	c4 01       	movw	r24, r8
     af4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     af8:	ec 01       	movw	r28, r24
     afa:	60 e6       	ldi	r22, 0x60	; 96
     afc:	75 e0       	ldi	r23, 0x05	; 5
     afe:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     b02:	e8 81       	ld	r30, Y
     b04:	f9 81       	ldd	r31, Y+1	; 0x01
     b06:	02 80       	ldd	r0, Z+2	; 0x02
     b08:	f3 81       	ldd	r31, Z+3	; 0x03
     b0a:	e0 2d       	mov	r30, r0
     b0c:	60 e2       	ldi	r22, 0x20	; 32
     b0e:	ce 01       	movw	r24, r28
     b10:	19 95       	eicall
     b12:	f7 01       	movw	r30, r14
     b14:	61 91       	ld	r22, Z+
     b16:	7f 01       	movw	r14, r30
     b18:	80 ee       	ldi	r24, 0xE0	; 224
     b1a:	86 0f       	add	r24, r22
     b1c:	8f 35       	cpi	r24, 0x5F	; 95
     b1e:	48 f4       	brcc	.+18     	; 0xb32 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     b20:	d4 01       	movw	r26, r8
     b22:	ed 91       	ld	r30, X+
     b24:	fc 91       	ld	r31, X
     b26:	02 80       	ldd	r0, Z+2	; 0x02
     b28:	f3 81       	ldd	r31, Z+3	; 0x03
     b2a:	e0 2d       	mov	r30, r0
     b2c:	c4 01       	movw	r24, r8
     b2e:	19 95       	eicall
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     b32:	d4 01       	movw	r26, r8
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	02 80       	ldd	r0, Z+2	; 0x02
     b3a:	f3 81       	ldd	r31, Z+3	; 0x03
     b3c:	e0 2d       	mov	r30, r0
     b3e:	6e e2       	ldi	r22, 0x2E	; 46
     b40:	c4 01       	movw	r24, r8
     b42:	19 95       	eicall
     b44:	ce 14       	cp	r12, r14
     b46:	df 04       	cpc	r13, r15
     b48:	21 f7       	brne	.-56     	; 0xb12 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     b4a:	b4 e1       	ldi	r27, 0x14	; 20
     b4c:	ab 0e       	add	r10, r27
     b4e:	b1 1c       	adc	r11, r1
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	c4 01       	movw	r24, r8
     b54:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     b58:	e4 e1       	ldi	r30, 0x14	; 20
     b5a:	ce 0e       	add	r12, r30
     b5c:	d1 1c       	adc	r13, r1
     b5e:	a6 14       	cp	r10, r6
     b60:	b7 04       	cpc	r11, r7
     b62:	08 f4       	brcc	.+2      	; 0xb66 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     b64:	89 cf       	rjmp	.-238    	; 0xa78 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	c4 01       	movw	r24, r8
     b6a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     b70:	e7 01       	movw	r28, r14
     b72:	9d cf       	rjmp	.-198    	; 0xaae <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	7f 90       	pop	r7
     b8e:	6f 90       	pop	r6
     b90:	5f 90       	pop	r5
     b92:	08 95       	ret

00000b94 <_ZlsR8emstreamR10time_stamp>:
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	2f 97       	sbiw	r28, 0x0f	; 15
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	8c 01       	movw	r16, r24
     bb4:	7b 01       	movw	r14, r22
     bb6:	db 01       	movw	r26, r22
     bb8:	6d 91       	ld	r22, X+
     bba:	7d 91       	ld	r23, X+
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	0f 2e       	mov	r0, r31
     bc2:	f8 ee       	ldi	r31, 0xE8	; 232
     bc4:	8f 2e       	mov	r8, r31
     bc6:	f3 e0       	ldi	r31, 0x03	; 3
     bc8:	9f 2e       	mov	r9, r31
     bca:	a1 2c       	mov	r10, r1
     bcc:	b1 2c       	mov	r11, r1
     bce:	f0 2d       	mov	r31, r0
     bd0:	a5 01       	movw	r20, r10
     bd2:	94 01       	movw	r18, r8
     bd4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
     bd8:	ba 01       	movw	r22, r20
     bda:	a9 01       	movw	r20, r18
     bdc:	c8 01       	movw	r24, r16
     bde:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN8emstreamlsEm>
     be2:	d8 01       	movw	r26, r16
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	02 80       	ldd	r0, Z+2	; 0x02
     bea:	f3 81       	ldd	r31, Z+3	; 0x03
     bec:	e0 2d       	mov	r30, r0
     bee:	6e e2       	ldi	r22, 0x2E	; 46
     bf0:	c8 01       	movw	r24, r16
     bf2:	19 95       	eicall
     bf4:	f7 01       	movw	r30, r14
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	a5 01       	movw	r20, r10
     c00:	94 01       	movw	r18, r8
     c02:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	60 e4       	ldi	r22, 0x40	; 64
     c0c:	72 e4       	ldi	r23, 0x42	; 66
     c0e:	8f e0       	ldi	r24, 0x0F	; 15
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__mulsi3>
     c16:	a5 01       	movw	r20, r10
     c18:	94 01       	movw	r18, r8
     c1a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
     c1e:	49 01       	movw	r8, r18
     c20:	5a 01       	movw	r10, r20
     c22:	f7 01       	movw	r30, r14
     c24:	a4 81       	ldd	r26, Z+4	; 0x04
     c26:	b5 81       	ldd	r27, Z+5	; 0x05
     c28:	20 e4       	ldi	r18, 0x40	; 64
     c2a:	32 e4       	ldi	r19, 0x42	; 66
     c2c:	4f e0       	ldi	r20, 0x0F	; 15
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__muluhisi3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	38 e4       	ldi	r19, 0x48	; 72
     c38:	48 ee       	ldi	r20, 0xE8	; 232
     c3a:	51 e0       	ldi	r21, 0x01	; 1
     c3c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	62 0f       	add	r22, r18
     c46:	73 1f       	adc	r23, r19
     c48:	84 1f       	adc	r24, r20
     c4a:	95 1f       	adc	r25, r21
     c4c:	7e 01       	movw	r14, r28
     c4e:	f7 e0       	ldi	r31, 0x07	; 7
     c50:	ef 0e       	add	r14, r31
     c52:	f1 1c       	adc	r15, r1
     c54:	9e 01       	movw	r18, r28
     c56:	2f 5f       	subi	r18, 0xFF	; 255
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	59 01       	movw	r10, r18
     c5c:	2a e0       	ldi	r18, 0x0A	; 10
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__divmodsi4>
     c68:	e6 2f       	mov	r30, r22
     c6a:	28 87       	std	Y+8, r18	; 0x08
     c6c:	39 87       	std	Y+9, r19	; 0x09
     c6e:	4a 87       	std	Y+10, r20	; 0x0a
     c70:	5b 87       	std	Y+11, r21	; 0x0b
     c72:	68 85       	ldd	r22, Y+8	; 0x08
     c74:	79 85       	ldd	r23, Y+9	; 0x09
     c76:	8a 85       	ldd	r24, Y+10	; 0x0a
     c78:	9b 85       	ldd	r25, Y+11	; 0x0b
     c7a:	20 e3       	ldi	r18, 0x30	; 48
     c7c:	2e 0f       	add	r18, r30
     c7e:	d7 01       	movw	r26, r14
     c80:	2e 93       	st	-X, r18
     c82:	7d 01       	movw	r14, r26
     c84:	aa 15       	cp	r26, r10
     c86:	bb 05       	cpc	r27, r11
     c88:	49 f7       	brne	.-46     	; 0xc5c <_ZlsR8emstreamR10time_stamp+0xc8>
     c8a:	1f 82       	std	Y+7, r1	; 0x07
     c8c:	be 01       	movw	r22, r28
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     c98:	c8 01       	movw	r24, r16
     c9a:	2f 96       	adiw	r28, 0x0f	; 15
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	08 95       	ret

00000cb6 <_ZN8frt_task12print_statusER8emstream>:
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	8b 01       	movw	r16, r22
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	0e 94 1e 19 	call	0x323c	; 0x323c <pcTaskGetTaskName>
     cda:	bc 01       	movw	r22, r24
     cdc:	c8 01       	movw	r24, r16
     cde:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     ce2:	d8 01       	movw	r26, r16
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	02 80       	ldd	r0, Z+2	; 0x02
     cea:	f3 81       	ldd	r31, Z+3	; 0x03
     cec:	e0 2d       	mov	r30, r0
     cee:	69 e0       	ldi	r22, 0x09	; 9
     cf0:	c8 01       	movw	r24, r16
     cf2:	19 95       	eicall
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	0e 94 1e 19 	call	0x323c	; 0x323c <pcTaskGetTaskName>
     cfc:	fc 01       	movw	r30, r24
     cfe:	01 90       	ld	r0, Z+
     d00:	00 20       	and	r0, r0
     d02:	e9 f7       	brne	.-6      	; 0xcfe <_ZN8frt_task12print_statusER8emstream+0x48>
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	e8 1b       	sub	r30, r24
     d08:	f9 0b       	sbc	r31, r25
     d0a:	38 97       	sbiw	r30, 0x08	; 8
     d0c:	48 f4       	brcc	.+18     	; 0xd20 <_ZN8frt_task12print_statusER8emstream+0x6a>
     d0e:	d8 01       	movw	r26, r16
     d10:	ed 91       	ld	r30, X+
     d12:	fc 91       	ld	r31, X
     d14:	02 80       	ldd	r0, Z+2	; 0x02
     d16:	f3 81       	ldd	r31, Z+3	; 0x03
     d18:	e0 2d       	mov	r30, r0
     d1a:	69 e0       	ldi	r22, 0x09	; 9
     d1c:	c8 01       	movw	r24, r16
     d1e:	19 95       	eicall
     d20:	ce 84       	ldd	r12, Y+14	; 0x0e
     d22:	df 84       	ldd	r13, Y+15	; 0x0f
     d24:	e8 88       	ldd	r14, Y+16	; 0x10
     d26:	f9 88       	ldd	r15, Y+17	; 0x11
     d28:	a8 84       	ldd	r10, Y+8	; 0x08
     d2a:	b9 84       	ldd	r11, Y+9	; 0x09
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	0e 94 91 1c 	call	0x3922	; 0x3922 <uxTaskGetStackHighWaterMark>
     d34:	98 2e       	mov	r9, r24
     d36:	8c 84       	ldd	r8, Y+12	; 0x0c
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	0e 94 c9 18 	call	0x3192	; 0x3192 <uxTaskPriorityGet>
     d40:	68 2f       	mov	r22, r24
     d42:	c8 01       	movw	r24, r16
     d44:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     d48:	6a e0       	ldi	r22, 0x0A	; 10
     d4a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     d4e:	ec 01       	movw	r28, r24
     d50:	6e e5       	ldi	r22, 0x5E	; 94
     d52:	75 e0       	ldi	r23, 0x05	; 5
     d54:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     d58:	68 2d       	mov	r22, r8
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     d60:	6a e0       	ldi	r22, 0x0A	; 10
     d62:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     d66:	ec 01       	movw	r28, r24
     d68:	6c e5       	ldi	r22, 0x5C	; 92
     d6a:	75 e0       	ldi	r23, 0x05	; 5
     d6c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     d70:	69 2d       	mov	r22, r9
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
     d78:	6a e0       	ldi	r22, 0x0A	; 10
     d7a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     d7e:	ec 01       	movw	r28, r24
     d80:	6a e5       	ldi	r22, 0x5A	; 90
     d82:	75 e0       	ldi	r23, 0x05	; 5
     d84:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     d88:	b5 01       	movw	r22, r10
     d8a:	ce 01       	movw	r24, r28
     d8c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
     d90:	6a e0       	ldi	r22, 0x0A	; 10
     d92:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     d96:	ec 01       	movw	r28, r24
     d98:	68 e5       	ldi	r22, 0x58	; 88
     d9a:	75 e0       	ldi	r23, 0x05	; 5
     d9c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     da0:	6a e0       	ldi	r22, 0x0A	; 10
     da2:	ce 01       	movw	r24, r28
     da4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     da8:	ec 01       	movw	r28, r24
     daa:	66 e5       	ldi	r22, 0x56	; 86
     dac:	75 e0       	ldi	r23, 0x05	; 5
     dae:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     db2:	b7 01       	movw	r22, r14
     db4:	a6 01       	movw	r20, r12
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN8emstreamlsEm>
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	08 95       	ret

00000dd6 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
     de8:	7b 01       	movw	r14, r22
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	0e 94 1e 19 	call	0x323c	; 0x323c <pcTaskGetTaskName>
     df2:	6c 01       	movw	r12, r24
     df4:	6a e0       	ldi	r22, 0x0A	; 10
     df6:	c7 01       	movw	r24, r14
     df8:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     dfc:	8c 01       	movw	r16, r24
     dfe:	61 e5       	ldi	r22, 0x51	; 81
     e00:	75 e0       	ldi	r23, 0x05	; 5
     e02:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     e06:	6a e0       	ldi	r22, 0x0A	; 10
     e08:	c8 01       	movw	r24, r16
     e0a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     e0e:	8c 01       	movw	r16, r24
     e10:	6a e4       	ldi	r22, 0x4A	; 74
     e12:	75 e0       	ldi	r23, 0x05	; 5
     e14:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     e18:	b6 01       	movw	r22, r12
     e1a:	c8 01       	movw	r24, r16
     e1c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     e20:	6a e0       	ldi	r22, 0x0A	; 10
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     e28:	8c 01       	movw	r16, r24
     e2a:	64 e4       	ldi	r22, 0x44	; 68
     e2c:	75 e0       	ldi	r23, 0x05	; 5
     e2e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     e32:	66 e0       	ldi	r22, 0x06	; 6
     e34:	c8 01       	movw	r24, r16
     e36:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3e:	e8 85       	ldd	r30, Y+8	; 0x08
     e40:	f9 85       	ldd	r31, Y+9	; 0x09
     e42:	01 e1       	ldi	r16, 0x11	; 17
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	a7 01       	movw	r20, r14
     e48:	bc 01       	movw	r22, r24
     e4a:	8e 1b       	sub	r24, r30
     e4c:	9f 0b       	sbc	r25, r31
     e4e:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z15hex_dump_memoryPhS_P8emstreambh>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	19 f0       	breq	.+6      	; 0xe60 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     e5a:	b7 01       	movw	r22, r14
     e5c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN8frt_task19print_stack_in_listEP8emstream>
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	08 95       	ret

00000e72 <_ZN9task_user18print_help_messageEv>:
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     e86:	8c 01       	movw	r16, r24
     e88:	6c e0       	ldi	r22, 0x0C	; 12
     e8a:	75 e0       	ldi	r23, 0x05	; 5
     e8c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     e90:	6a e0       	ldi	r22, 0x0A	; 10
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     e98:	8c 01       	movw	r16, r24
     e9a:	66 e0       	ldi	r22, 0x06	; 6
     e9c:	75 e0       	ldi	r23, 0x05	; 5
     e9e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     ea2:	67 e0       	ldi	r22, 0x07	; 7
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     eaa:	6a e0       	ldi	r22, 0x0A	; 10
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     eb4:	8c 01       	movw	r16, r24
     eb6:	67 ee       	ldi	r22, 0xE7	; 231
     eb8:	74 e0       	ldi	r23, 0x04	; 4
     eba:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     ebe:	6a e0       	ldi	r22, 0x0A	; 10
     ec0:	c8 01       	movw	r24, r16
     ec2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     ec6:	8c 01       	movw	r16, r24
     ec8:	61 ee       	ldi	r22, 0xE1	; 225
     eca:	74 e0       	ldi	r23, 0x04	; 4
     ecc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     ed0:	66 e0       	ldi	r22, 0x06	; 6
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     ee2:	8c 01       	movw	r16, r24
     ee4:	6a ec       	ldi	r22, 0xCA	; 202
     ee6:	74 e0       	ldi	r23, 0x04	; 4
     ee8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	c8 01       	movw	r24, r16
     ef0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     ef4:	6a e0       	ldi	r22, 0x0A	; 10
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     efe:	8c 01       	movw	r16, r24
     f00:	6e ea       	ldi	r22, 0xAE	; 174
     f02:	74 e0       	ldi	r23, 0x04	; 4
     f04:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f08:	66 e0       	ldi	r22, 0x06	; 6
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f10:	6a e0       	ldi	r22, 0x0A	; 10
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f1a:	8c 01       	movw	r16, r24
     f1c:	66 e9       	ldi	r22, 0x96	; 150
     f1e:	74 e0       	ldi	r23, 0x04	; 4
     f20:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f24:	66 e0       	ldi	r22, 0x06	; 6
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f2c:	6a e0       	ldi	r22, 0x0A	; 10
     f2e:	8e 81       	ldd	r24, Y+6	; 0x06
     f30:	9f 81       	ldd	r25, Y+7	; 0x07
     f32:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f36:	8c 01       	movw	r16, r24
     f38:	65 e7       	ldi	r22, 0x75	; 117
     f3a:	74 e0       	ldi	r23, 0x04	; 4
     f3c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f40:	66 e0       	ldi	r22, 0x06	; 6
     f42:	c8 01       	movw	r24, r16
     f44:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f48:	6a e0       	ldi	r22, 0x0A	; 10
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f52:	8c 01       	movw	r16, r24
     f54:	6e e4       	ldi	r22, 0x4E	; 78
     f56:	74 e0       	ldi	r23, 0x04	; 4
     f58:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f5c:	66 e0       	ldi	r22, 0x06	; 6
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f64:	6a e0       	ldi	r22, 0x0A	; 10
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	9f 81       	ldd	r25, Y+7	; 0x07
     f6a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f6e:	8c 01       	movw	r16, r24
     f70:	60 e3       	ldi	r22, 0x30	; 48
     f72:	74 e0       	ldi	r23, 0x04	; 4
     f74:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f80:	6a e0       	ldi	r22, 0x0A	; 10
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f8a:	8c 01       	movw	r16, r24
     f8c:	65 e1       	ldi	r22, 0x15	; 21
     f8e:	74 e0       	ldi	r23, 0x04	; 4
     f90:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     f94:	66 e0       	ldi	r22, 0x06	; 6
     f96:	c8 01       	movw	r24, r16
     f98:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     f9c:	6a e0       	ldi	r22, 0x0A	; 10
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     fa6:	ec 01       	movw	r28, r24
     fa8:	66 e0       	ldi	r22, 0x06	; 6
     faa:	74 e0       	ldi	r23, 0x04	; 4
     fac:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     fb0:	66 e0       	ldi	r22, 0x06	; 6
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <_ZN9task_user3runEv>:
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	2c 97       	sbiw	r28, 0x0c	; 12
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	7c 01       	movw	r14, r24
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	1b 82       	std	Y+3, r1	; 0x03
     fd8:	1c 82       	std	Y+4, r1	; 0x04
     fda:	1d 82       	std	Y+5, r1	; 0x05
     fdc:	1e 82       	std	Y+6, r1	; 0x06
     fde:	6a e0       	ldi	r22, 0x0A	; 10
     fe0:	dc 01       	movw	r26, r24
     fe2:	16 96       	adiw	r26, 0x06	; 6
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	17 97       	sbiw	r26, 0x07	; 7
     fea:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
     fee:	6c 01       	movw	r12, r24
     ff0:	68 ee       	ldi	r22, 0xE8	; 232
     ff2:	73 e0       	ldi	r23, 0x03	; 3
     ff4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
     ff8:	66 e0       	ldi	r22, 0x06	; 6
     ffa:	c6 01       	movw	r24, r12
     ffc:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1000:	11 e0       	ldi	r17, 0x01	; 1
    1002:	81 2c       	mov	r8, r1
    1004:	68 94       	set
    1006:	99 24       	eor	r9, r9
    1008:	93 f8       	bld	r9, 3
    100a:	0f 2e       	mov	r0, r31
    100c:	fc e1       	ldi	r31, 0x1C	; 28
    100e:	af 2e       	mov	r10, r31
    1010:	f1 e2       	ldi	r31, 0x21	; 33
    1012:	bf 2e       	mov	r11, r31
    1014:	f0 2d       	mov	r31, r0
    1016:	f7 01       	movw	r30, r14
    1018:	84 85       	ldd	r24, Z+12	; 0x0c
    101a:	88 23       	and	r24, r24
    101c:	21 f0       	breq	.+8      	; 0x1026 <_ZN9task_user3runEv+0x64>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f4       	brne	.+2      	; 0x1024 <_ZN9task_user3runEv+0x62>
    1022:	60 c0       	rjmp	.+192    	; 0x10e4 <_ZN9task_user3runEv+0x122>
    1024:	06 c2       	rjmp	.+1036   	; 0x1432 <_ZN9task_user3runEv+0x470>
    1026:	86 81       	ldd	r24, Z+6	; 0x06
    1028:	97 81       	ldd	r25, Z+7	; 0x07
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	04 80       	ldd	r0, Z+4	; 0x04
    1032:	f5 81       	ldd	r31, Z+5	; 0x05
    1034:	e0 2d       	mov	r30, r0
    1036:	19 95       	eicall
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <_ZN9task_user3runEv+0x7c>
    103c:	37 c0       	rjmp	.+110    	; 0x10ac <_ZN9task_user3runEv+0xea>
    103e:	f7 01       	movw	r30, r14
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	97 81       	ldd	r25, Z+7	; 0x07
    1044:	dc 01       	movw	r26, r24
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	06 80       	ldd	r0, Z+6	; 0x06
    104c:	f7 81       	ldd	r31, Z+7	; 0x07
    104e:	e0 2d       	mov	r30, r0
    1050:	19 95       	eicall
    1052:	99 27       	eor	r25, r25
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	f9 f0       	breq	.+62     	; 0x1098 <_ZN9task_user3runEv+0xd6>
    105a:	03 97       	sbiw	r24, 0x03	; 3
    105c:	09 f0       	breq	.+2      	; 0x1060 <_ZN9task_user3runEv+0x9e>
    105e:	05 c2       	rjmp	.+1034   	; 0x146a <_ZN9task_user3runEv+0x4a8>
    1060:	6a e0       	ldi	r22, 0x0A	; 10
    1062:	f7 01       	movw	r30, r14
    1064:	86 81       	ldd	r24, Z+6	; 0x06
    1066:	97 81       	ldd	r25, Z+7	; 0x07
    1068:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    106c:	7c 01       	movw	r14, r24
    106e:	6a ed       	ldi	r22, 0xDA	; 218
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1076:	66 e0       	ldi	r22, 0x06	; 6
    1078:	c7 01       	movw	r24, r14
    107a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	88 ed       	ldi	r24, 0xD8	; 216
    1082:	08 b6       	in	r0, 0x38	; 56
    1084:	18 be       	out	0x38, r1	; 56
    1086:	84 bf       	out	0x34, r24	; 52
    1088:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    108c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1090:	81 fd       	sbrc	r24, 1
    1092:	fc cf       	rjmp	.-8      	; 0x108c <_ZN9task_user3runEv+0xca>
    1094:	08 be       	out	0x38, r0	; 56
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <_ZN9task_user3runEv+0xd4>
    1098:	c7 01       	movw	r24, r14
    109a:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9task_user18print_help_messageEv>
    109e:	d7 01       	movw	r26, r14
    10a0:	1c 96       	adiw	r26, 0x0c	; 12
    10a2:	1c 93       	st	X, r17
    10a4:	1c 97       	sbiw	r26, 0x0c	; 12
    10a6:	1d 96       	adiw	r26, 0x0d	; 13
    10a8:	1c 93       	st	X, r17
    10aa:	df c1       	rjmp	.+958    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    10ac:	82 e2       	ldi	r24, 0x22	; 34
    10ae:	91 e2       	ldi	r25, 0x21	; 33
    10b0:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN14frt_text_queue14check_for_charEv>
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <_ZN9task_user3runEv+0xf8>
    10b8:	d8 c1       	rjmp	.+944    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    10ba:	d7 01       	movw	r26, r14
    10bc:	16 96       	adiw	r26, 0x06	; 6
    10be:	ed 91       	ld	r30, X+
    10c0:	fc 91       	ld	r31, X
    10c2:	17 97       	sbiw	r26, 0x07	; 7
    10c4:	01 90       	ld	r0, Z+
    10c6:	f0 81       	ld	r31, Z
    10c8:	e0 2d       	mov	r30, r0
    10ca:	c2 80       	ldd	r12, Z+2	; 0x02
    10cc:	d3 80       	ldd	r13, Z+3	; 0x03
    10ce:	82 e2       	ldi	r24, 0x22	; 34
    10d0:	91 e2       	ldi	r25, 0x21	; 33
    10d2:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN14frt_text_queue7getcharEv>
    10d6:	68 2f       	mov	r22, r24
    10d8:	f7 01       	movw	r30, r14
    10da:	86 81       	ldd	r24, Z+6	; 0x06
    10dc:	97 81       	ldd	r25, Z+7	; 0x07
    10de:	f6 01       	movw	r30, r12
    10e0:	19 95       	eicall
    10e2:	c3 c1       	rjmp	.+902    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    10e4:	86 81       	ldd	r24, Z+6	; 0x06
    10e6:	97 81       	ldd	r25, Z+7	; 0x07
    10e8:	dc 01       	movw	r26, r24
    10ea:	ed 91       	ld	r30, X+
    10ec:	fc 91       	ld	r31, X
    10ee:	04 80       	ldd	r0, Z+4	; 0x04
    10f0:	f5 81       	ldd	r31, Z+5	; 0x05
    10f2:	e0 2d       	mov	r30, r0
    10f4:	19 95       	eicall
    10f6:	88 23       	and	r24, r24
    10f8:	09 f4       	brne	.+2      	; 0x10fc <_ZN9task_user3runEv+0x13a>
    10fa:	b7 c1       	rjmp	.+878    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    10fc:	f7 01       	movw	r30, r14
    10fe:	86 81       	ldd	r24, Z+6	; 0x06
    1100:	97 81       	ldd	r25, Z+7	; 0x07
    1102:	dc 01       	movw	r26, r24
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	06 80       	ldd	r0, Z+6	; 0x06
    110a:	f7 81       	ldd	r31, Z+7	; 0x07
    110c:	e0 2d       	mov	r30, r0
    110e:	19 95       	eicall
    1110:	9c 01       	movw	r18, r24
    1112:	33 27       	eor	r19, r19
    1114:	28 36       	cpi	r18, 0x68	; 104
    1116:	31 05       	cpc	r19, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <_ZN9task_user3runEv+0x15a>
    111a:	54 c1       	rjmp	.+680    	; 0x13c4 <_ZN9task_user3runEv+0x402>
    111c:	4c f4       	brge	.+18     	; 0x1130 <_ZN9task_user3runEv+0x16e>
    111e:	2b 31       	cpi	r18, 0x1B	; 27
    1120:	31 05       	cpc	r19, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <_ZN9task_user3runEv+0x164>
    1124:	53 c1       	rjmp	.+678    	; 0x13cc <_ZN9task_user3runEv+0x40a>
    1126:	25 36       	cpi	r18, 0x65	; 101
    1128:	31 05       	cpc	r19, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <_ZN9task_user3runEv+0x16c>
    112c:	4f c1       	rjmp	.+670    	; 0x13cc <_ZN9task_user3runEv+0x40a>
    112e:	63 c1       	rjmp	.+710    	; 0x13f6 <_ZN9task_user3runEv+0x434>
    1130:	23 37       	cpi	r18, 0x73	; 115
    1132:	31 05       	cpc	r19, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <_ZN9task_user3runEv+0x176>
    1136:	0c c1       	rjmp	.+536    	; 0x1350 <_ZN9task_user3runEv+0x38e>
    1138:	26 37       	cpi	r18, 0x76	; 118
    113a:	31 05       	cpc	r19, r1
    113c:	91 f0       	breq	.+36     	; 0x1162 <_ZN9task_user3runEv+0x1a0>
    113e:	2e 36       	cpi	r18, 0x6E	; 110
    1140:	31 05       	cpc	r19, r1
    1142:	09 f0       	breq	.+2      	; 0x1146 <_ZN9task_user3runEv+0x184>
    1144:	58 c1       	rjmp	.+688    	; 0x13f6 <_ZN9task_user3runEv+0x434>
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN10time_stamp10set_to_nowEv>
    114e:	bc 01       	movw	r22, r24
    1150:	f7 01       	movw	r30, r14
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	97 81       	ldd	r25, Z+7	; 0x07
    1156:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZlsR8emstreamR10time_stamp>
    115a:	66 e0       	ldi	r22, 0x06	; 6
    115c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1160:	84 c1       	rjmp	.+776    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    1162:	1f 82       	std	Y+7, r1	; 0x07
    1164:	18 86       	std	Y+8, r1	; 0x08
    1166:	19 86       	std	Y+9, r1	; 0x09
    1168:	1a 86       	std	Y+10, r1	; 0x0a
    116a:	1b 86       	std	Y+11, r1	; 0x0b
    116c:	1c 86       	std	Y+12, r1	; 0x0c
    116e:	0e 94 67 12 	call	0x24ce	; 0x24ce <xPortGetFreeHeapSize>
    1172:	3c 01       	movw	r6, r24
    1174:	ce 01       	movw	r24, r28
    1176:	07 96       	adiw	r24, 0x07	; 7
    1178:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN10time_stamp10set_to_nowEv>
    117c:	2c 01       	movw	r4, r24
    117e:	66 e0       	ldi	r22, 0x06	; 6
    1180:	d7 01       	movw	r26, r14
    1182:	16 96       	adiw	r26, 0x06	; 6
    1184:	8d 91       	ld	r24, X+
    1186:	9c 91       	ld	r25, X
    1188:	17 97       	sbiw	r26, 0x07	; 7
    118a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    118e:	6a e0       	ldi	r22, 0x0A	; 10
    1190:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1194:	6c 01       	movw	r12, r24
    1196:	60 e7       	ldi	r22, 0x70	; 112
    1198:	73 e0       	ldi	r23, 0x03	; 3
    119a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    119e:	6a e0       	ldi	r22, 0x0A	; 10
    11a0:	c6 01       	movw	r24, r12
    11a2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    11a6:	6c 01       	movw	r12, r24
    11a8:	64 e6       	ldi	r22, 0x64	; 100
    11aa:	73 e0       	ldi	r23, 0x03	; 3
    11ac:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    11b0:	66 e0       	ldi	r22, 0x06	; 6
    11b2:	c6 01       	movw	r24, r12
    11b4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    11b8:	6a e0       	ldi	r22, 0x0A	; 10
    11ba:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    11be:	6c 01       	movw	r12, r24
    11c0:	6d e5       	ldi	r22, 0x5D	; 93
    11c2:	73 e0       	ldi	r23, 0x03	; 3
    11c4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    11c8:	b2 01       	movw	r22, r4
    11ca:	c6 01       	movw	r24, r12
    11cc:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZlsR8emstreamR10time_stamp>
    11d0:	6a e0       	ldi	r22, 0x0A	; 10
    11d2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    11d6:	6c 01       	movw	r12, r24
    11d8:	6f e4       	ldi	r22, 0x4F	; 79
    11da:	73 e0       	ldi	r23, 0x03	; 3
    11dc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    11e0:	b3 01       	movw	r22, r6
    11e2:	c6 01       	movw	r24, r12
    11e4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
    11e8:	6a e0       	ldi	r22, 0x0A	; 10
    11ea:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    11ee:	6c 01       	movw	r12, r24
    11f0:	6d e4       	ldi	r22, 0x4D	; 77
    11f2:	73 e0       	ldi	r23, 0x03	; 3
    11f4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    11f8:	4f ef       	ldi	r20, 0xFF	; 255
    11fa:	5f e0       	ldi	r21, 0x0F	; 15
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	c6 01       	movw	r24, r12
    1202:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN8emstreamlsEm>
    1206:	f4 01       	movw	r30, r8
    1208:	60 a4       	ldd	r6, Z+40	; 0x28
    120a:	71 a4       	ldd	r7, Z+41	; 0x29
    120c:	6a e0       	ldi	r22, 0x0A	; 10
    120e:	d7 01       	movw	r26, r14
    1210:	16 96       	adiw	r26, 0x06	; 6
    1212:	8d 91       	ld	r24, X+
    1214:	9c 91       	ld	r25, X
    1216:	17 97       	sbiw	r26, 0x07	; 7
    1218:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    121c:	6c 01       	movw	r12, r24
    121e:	62 e4       	ldi	r22, 0x42	; 66
    1220:	73 e0       	ldi	r23, 0x03	; 3
    1222:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1226:	b3 01       	movw	r22, r6
    1228:	c6 01       	movw	r24, r12
    122a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
    122e:	66 e0       	ldi	r22, 0x06	; 6
    1230:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1234:	66 e0       	ldi	r22, 0x06	; 6
    1236:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    123a:	f7 01       	movw	r30, r14
    123c:	c6 80       	ldd	r12, Z+6	; 0x06
    123e:	d7 80       	ldd	r13, Z+7	; 0x07
    1240:	6a e0       	ldi	r22, 0x0A	; 10
    1242:	c6 01       	movw	r24, r12
    1244:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1248:	3c 01       	movw	r6, r24
    124a:	67 e3       	ldi	r22, 0x37	; 55
    124c:	73 e0       	ldi	r23, 0x03	; 3
    124e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1252:	6a e0       	ldi	r22, 0x0A	; 10
    1254:	c3 01       	movw	r24, r6
    1256:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    125a:	3c 01       	movw	r6, r24
    125c:	60 e3       	ldi	r22, 0x30	; 48
    125e:	73 e0       	ldi	r23, 0x03	; 3
    1260:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1264:	66 e0       	ldi	r22, 0x06	; 6
    1266:	c3 01       	movw	r24, r6
    1268:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    126c:	6a e0       	ldi	r22, 0x0A	; 10
    126e:	c6 01       	movw	r24, r12
    1270:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1274:	3c 01       	movw	r6, r24
    1276:	6f e1       	ldi	r22, 0x1F	; 31
    1278:	73 e0       	ldi	r23, 0x03	; 3
    127a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    127e:	6a e0       	ldi	r22, 0x0A	; 10
    1280:	c3 01       	movw	r24, r6
    1282:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1286:	3c 01       	movw	r6, r24
    1288:	63 e1       	ldi	r22, 0x13	; 19
    128a:	73 e0       	ldi	r23, 0x03	; 3
    128c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1290:	6a e0       	ldi	r22, 0x0A	; 10
    1292:	c3 01       	movw	r24, r6
    1294:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1298:	3c 01       	movw	r6, r24
    129a:	6d e0       	ldi	r22, 0x0D	; 13
    129c:	73 e0       	ldi	r23, 0x03	; 3
    129e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    12a2:	66 e0       	ldi	r22, 0x06	; 6
    12a4:	c3 01       	movw	r24, r6
    12a6:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    12aa:	6a e0       	ldi	r22, 0x0A	; 10
    12ac:	c6 01       	movw	r24, r12
    12ae:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    12b2:	3c 01       	movw	r6, r24
    12b4:	6c ef       	ldi	r22, 0xFC	; 252
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    12bc:	6a e0       	ldi	r22, 0x0A	; 10
    12be:	c3 01       	movw	r24, r6
    12c0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    12c4:	3c 01       	movw	r6, r24
    12c6:	60 ef       	ldi	r22, 0xF0	; 240
    12c8:	72 e0       	ldi	r23, 0x02	; 2
    12ca:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    12ce:	6a e0       	ldi	r22, 0x0A	; 10
    12d0:	c3 01       	movw	r24, r6
    12d2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    12d6:	3c 01       	movw	r6, r24
    12d8:	6a ee       	ldi	r22, 0xEA	; 234
    12da:	72 e0       	ldi	r23, 0x02	; 2
    12dc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    12e0:	66 e0       	ldi	r22, 0x06	; 6
    12e2:	c3 01       	movw	r24, r6
    12e4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    12e8:	d5 01       	movw	r26, r10
    12ea:	8d 91       	ld	r24, X+
    12ec:	9c 91       	ld	r25, X
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <_ZN9task_user3runEv+0x336>
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8frt_task20print_status_in_listEP8emstream>
    12f8:	0e 94 26 19 	call	0x324c	; 0x324c <xTaskGetIdleTaskHandle>
    12fc:	0e 94 91 1c 	call	0x3922	; 0x3922 <uxTaskGetStackHighWaterMark>
    1300:	08 2f       	mov	r16, r24
    1302:	6a e0       	ldi	r22, 0x0A	; 10
    1304:	c6 01       	movw	r24, r12
    1306:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    130a:	6c 01       	movw	r12, r24
    130c:	6f ed       	ldi	r22, 0xDF	; 223
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1314:	60 2f       	mov	r22, r16
    1316:	c6 01       	movw	r24, r12
    1318:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN8emstreamlsEh>
    131c:	6a e0       	ldi	r22, 0x0A	; 10
    131e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1322:	6c 01       	movw	r12, r24
    1324:	6d ed       	ldi	r22, 0xDD	; 221
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    132c:	64 e6       	ldi	r22, 0x64	; 100
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	c6 01       	movw	r24, r12
    1332:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
    1336:	6a e0       	ldi	r22, 0x0A	; 10
    1338:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    133c:	6c 01       	movw	r12, r24
    133e:	6a ed       	ldi	r22, 0xDA	; 218
    1340:	72 e0       	ldi	r23, 0x02	; 2
    1342:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1346:	66 e0       	ldi	r22, 0x06	; 6
    1348:	c6 01       	movw	r24, r12
    134a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    134e:	8d c0       	rjmp	.+282    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    1350:	f7 01       	movw	r30, r14
    1352:	c6 80       	ldd	r12, Z+6	; 0x06
    1354:	d7 80       	ldd	r13, Z+7	; 0x07
    1356:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <last_created_task_pointer>
    135a:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <last_created_task_pointer+0x1>
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	19 f0       	breq	.+6      	; 0x1368 <_ZN9task_user3runEv+0x3a6>
    1362:	b6 01       	movw	r22, r12
    1364:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN8frt_task19print_stack_in_listEP8emstream>
    1368:	6a e0       	ldi	r22, 0x0A	; 10
    136a:	c6 01       	movw	r24, r12
    136c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1370:	3c 01       	movw	r6, r24
    1372:	60 ea       	ldi	r22, 0xA0	; 160
    1374:	73 e0       	ldi	r23, 0x03	; 3
    1376:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    137a:	6a e0       	ldi	r22, 0x0A	; 10
    137c:	c3 01       	movw	r24, r6
    137e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1382:	3c 01       	movw	r6, r24
    1384:	65 e9       	ldi	r22, 0x95	; 149
    1386:	73 e0       	ldi	r23, 0x03	; 3
    1388:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    138c:	6a e0       	ldi	r22, 0x0A	; 10
    138e:	c3 01       	movw	r24, r6
    1390:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1394:	3c 01       	movw	r6, r24
    1396:	6f e8       	ldi	r22, 0x8F	; 143
    1398:	73 e0       	ldi	r23, 0x03	; 3
    139a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    139e:	66 e0       	ldi	r22, 0x06	; 6
    13a0:	c3 01       	movw	r24, r6
    13a2:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    13a6:	80 91 ba 31 	lds	r24, 0x31BA	; 0x8031ba <portStackTopForTask>
    13aa:	90 91 bb 31 	lds	r25, 0x31BB	; 0x8031bb <portStackTopForTask+0x1>
    13ae:	bc 01       	movw	r22, r24
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	01 e1       	ldi	r16, 0x11	; 17
    13b6:	21 2f       	mov	r18, r17
    13b8:	a6 01       	movw	r20, r12
    13ba:	83 56       	subi	r24, 0x63	; 99
    13bc:	91 09       	sbc	r25, r1
    13be:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z15hex_dump_memoryPhS_P8emstreambh>
    13c2:	53 c0       	rjmp	.+166    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    13c4:	c7 01       	movw	r24, r14
    13c6:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9task_user18print_help_messageEv>
    13ca:	4f c0       	rjmp	.+158    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    13cc:	6a e0       	ldi	r22, 0x0A	; 10
    13ce:	d7 01       	movw	r26, r14
    13d0:	16 96       	adiw	r26, 0x06	; 6
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	17 97       	sbiw	r26, 0x07	; 7
    13d8:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    13dc:	6c 01       	movw	r12, r24
    13de:	68 ec       	ldi	r22, 0xC8	; 200
    13e0:	73 e0       	ldi	r23, 0x03	; 3
    13e2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    13e6:	66 e0       	ldi	r22, 0x06	; 6
    13e8:	c6 01       	movw	r24, r12
    13ea:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    13ee:	f7 01       	movw	r30, r14
    13f0:	14 86       	std	Z+12, r1	; 0x0c
    13f2:	15 86       	std	Z+13, r1	; 0x0d
    13f4:	3a c0       	rjmp	.+116    	; 0x146a <_ZN9task_user3runEv+0x4a8>
    13f6:	f7 01       	movw	r30, r14
    13f8:	a6 81       	ldd	r26, Z+6	; 0x06
    13fa:	b7 81       	ldd	r27, Z+7	; 0x07
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	02 80       	ldd	r0, Z+2	; 0x02
    1404:	f3 81       	ldd	r31, Z+3	; 0x03
    1406:	e0 2d       	mov	r30, r0
    1408:	68 2f       	mov	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	19 95       	eicall
    140e:	6a e0       	ldi	r22, 0x0A	; 10
    1410:	d7 01       	movw	r26, r14
    1412:	16 96       	adiw	r26, 0x06	; 6
    1414:	8d 91       	ld	r24, X+
    1416:	9c 91       	ld	r25, X
    1418:	17 97       	sbiw	r26, 0x07	; 7
    141a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    141e:	6c 01       	movw	r12, r24
    1420:	62 ec       	ldi	r22, 0xC2	; 194
    1422:	73 e0       	ldi	r23, 0x03	; 3
    1424:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1428:	66 e0       	ldi	r22, 0x06	; 6
    142a:	c6 01       	movw	r24, r12
    142c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1430:	1c c0       	rjmp	.+56     	; 0x146a <_ZN9task_user3runEv+0x4a8>
    1432:	6a e0       	ldi	r22, 0x0A	; 10
    1434:	f7 01       	movw	r30, r14
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    143e:	7c 01       	movw	r14, r24
    1440:	65 ea       	ldi	r22, 0xA5	; 165
    1442:	73 e0       	ldi	r23, 0x03	; 3
    1444:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1448:	66 e0       	ldi	r22, 0x06	; 6
    144a:	c7 01       	movw	r24, r14
    144c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1450:	93 e0       	ldi	r25, 0x03	; 3
    1452:	88 ed       	ldi	r24, 0xD8	; 216
    1454:	08 b6       	in	r0, 0x38	; 56
    1456:	18 be       	out	0x38, r1	; 56
    1458:	84 bf       	out	0x34, r24	; 52
    145a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    145e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1462:	81 fd       	sbrc	r24, 1
    1464:	fc cf       	rjmp	.-8      	; 0x145e <_ZN9task_user3runEv+0x49c>
    1466:	08 be       	out	0x38, r0	; 56
    1468:	ff cf       	rjmp	.-2      	; 0x1468 <_ZN9task_user3runEv+0x4a6>
    146a:	f7 01       	movw	r30, r14
    146c:	86 85       	ldd	r24, Z+14	; 0x0e
    146e:	97 85       	ldd	r25, Z+15	; 0x0f
    1470:	a0 89       	ldd	r26, Z+16	; 0x10
    1472:	b1 89       	ldd	r27, Z+17	; 0x11
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	a1 1d       	adc	r26, r1
    1478:	b1 1d       	adc	r27, r1
    147a:	86 87       	std	Z+14, r24	; 0x0e
    147c:	97 87       	std	Z+15, r25	; 0x0f
    147e:	a0 8b       	std	Z+16, r26	; 0x10
    1480:	b1 8b       	std	Z+17, r27	; 0x11
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <vTaskDelay>
    148e:	c3 cd       	rjmp	.-1146   	; 0x1016 <_ZN9task_user3runEv+0x54>

00001490 <_ZN17task_limit_switch3runEv>:
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	00 d0       	rcall	.+0      	; 0x1496 <_ZN17task_limit_switch3runEv+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <_ZN17task_limit_switch3runEv+0x8>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	8c 01       	movw	r16, r24
    149e:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskGetTickCount>
    14a2:	69 83       	std	Y+1, r22	; 0x01
    14a4:	7a 83       	std	Y+2, r23	; 0x02
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	e0 e6       	ldi	r30, 0x60	; 96
    14ac:	f6 e0       	ldi	r31, 0x06	; 6
    14ae:	90 81       	ld	r25, Z
    14b0:	d8 01       	movw	r26, r16
    14b2:	52 96       	adiw	r26, 0x12	; 18
    14b4:	8c 91       	ld	r24, X
    14b6:	52 97       	sbiw	r26, 0x12	; 18
    14b8:	89 2b       	or	r24, r25
    14ba:	80 83       	st	Z, r24
    14bc:	94 81       	ldd	r25, Z+4	; 0x04
    14be:	52 96       	adiw	r26, 0x12	; 18
    14c0:	8c 91       	ld	r24, X
    14c2:	52 97       	sbiw	r26, 0x12	; 18
    14c4:	89 2b       	or	r24, r25
    14c6:	84 83       	std	Z+4, r24	; 0x04
    14c8:	52 96       	adiw	r26, 0x12	; 18
    14ca:	8c 91       	ld	r24, X
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <_ZN17task_limit_switch3runEv+0x48>
    14d0:	88 e1       	ldi	r24, 0x18	; 24
    14d2:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <_ZN17task_limit_switch3runEv+0x52>
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	19 f4       	brne	.+6      	; 0x14e2 <_ZN17task_limit_switch3runEv+0x52>
    14dc:	88 e1       	ldi	r24, 0x18	; 24
    14de:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    14e2:	1d 82       	std	Y+5, r1	; 0x05
    14e4:	1e 82       	std	Y+6, r1	; 0x06
    14e6:	0f 2e       	mov	r0, r31
    14e8:	f8 e6       	ldi	r31, 0x68	; 104
    14ea:	ef 2e       	mov	r14, r31
    14ec:	f6 e0       	ldi	r31, 0x06	; 6
    14ee:	ff 2e       	mov	r15, r31
    14f0:	f0 2d       	mov	r31, r0
    14f2:	0f 2e       	mov	r0, r31
    14f4:	f0 e2       	ldi	r31, 0x20	; 32
    14f6:	af 2e       	mov	r10, r31
    14f8:	f1 e2       	ldi	r31, 0x21	; 33
    14fa:	bf 2e       	mov	r11, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	77 24       	eor	r7, r7
    1500:	73 94       	inc	r7
    1502:	0f 2e       	mov	r0, r31
    1504:	fe e1       	ldi	r31, 0x1E	; 30
    1506:	cf 2e       	mov	r12, r31
    1508:	f1 e2       	ldi	r31, 0x21	; 33
    150a:	df 2e       	mov	r13, r31
    150c:	f0 2d       	mov	r31, r0
    150e:	f7 01       	movw	r30, r14
    1510:	80 81       	ld	r24, Z
    1512:	80 fd       	sbrc	r24, 0
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <_ZN17task_limit_switch3runEv+0xa4>
    1516:	7e 82       	std	Y+6, r7	; 0x06
    1518:	d5 01       	movw	r26, r10
    151a:	8d 91       	ld	r24, X+
    151c:	9c 91       	ld	r25, X
    151e:	dc 01       	movw	r26, r24
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	01 90       	ld	r0, Z+
    1526:	f0 81       	ld	r31, Z
    1528:	e0 2d       	mov	r30, r0
    152a:	be 01       	movw	r22, r28
    152c:	6a 5f       	subi	r22, 0xFA	; 250
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	19 95       	eicall
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <_ZN17task_limit_switch3runEv+0xc0>
    1534:	1e 82       	std	Y+6, r1	; 0x06
    1536:	f5 01       	movw	r30, r10
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	dc 01       	movw	r26, r24
    153e:	ed 91       	ld	r30, X+
    1540:	fc 91       	ld	r31, X
    1542:	01 90       	ld	r0, Z+
    1544:	f0 81       	ld	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	be 01       	movw	r22, r28
    154a:	6a 5f       	subi	r22, 0xFA	; 250
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	19 95       	eicall
    1550:	f7 01       	movw	r30, r14
    1552:	80 81       	ld	r24, Z
    1554:	82 fd       	sbrc	r24, 2
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <_ZN17task_limit_switch3runEv+0xe6>
    1558:	7d 82       	std	Y+5, r7	; 0x05
    155a:	d6 01       	movw	r26, r12
    155c:	8d 91       	ld	r24, X+
    155e:	9c 91       	ld	r25, X
    1560:	dc 01       	movw	r26, r24
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	01 90       	ld	r0, Z+
    1568:	f0 81       	ld	r31, Z
    156a:	e0 2d       	mov	r30, r0
    156c:	be 01       	movw	r22, r28
    156e:	6b 5f       	subi	r22, 0xFB	; 251
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	19 95       	eicall
    1574:	0e c0       	rjmp	.+28     	; 0x1592 <_ZN17task_limit_switch3runEv+0x102>
    1576:	1d 82       	std	Y+5, r1	; 0x05
    1578:	f6 01       	movw	r30, r12
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	dc 01       	movw	r26, r24
    1580:	ed 91       	ld	r30, X+
    1582:	fc 91       	ld	r31, X
    1584:	01 90       	ld	r0, Z+
    1586:	f0 81       	ld	r31, Z
    1588:	e0 2d       	mov	r30, r0
    158a:	be 01       	movw	r22, r28
    158c:	6b 5f       	subi	r22, 0xFB	; 251
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	19 95       	eicall
    1592:	f8 01       	movw	r30, r16
    1594:	66 85       	ldd	r22, Z+14	; 0x0e
    1596:	77 85       	ldd	r23, Z+15	; 0x0f
    1598:	80 89       	ldd	r24, Z+16	; 0x10
    159a:	91 89       	ldd	r25, Z+17	; 0x11
    159c:	24 e6       	ldi	r18, 0x64	; 100
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
    15a8:	67 2b       	or	r22, r23
    15aa:	68 2b       	or	r22, r24
    15ac:	69 2b       	or	r22, r25
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <_ZN17task_limit_switch3runEv+0x122>
    15b0:	6d c0       	rjmp	.+218    	; 0x168c <_ZN17task_limit_switch3runEv+0x1fc>
    15b2:	d5 01       	movw	r26, r10
    15b4:	8d 91       	ld	r24, X+
    15b6:	9c 91       	ld	r25, X
    15b8:	dc 01       	movw	r26, r24
    15ba:	ed 91       	ld	r30, X+
    15bc:	fc 91       	ld	r31, X
    15be:	00 84       	ldd	r0, Z+8	; 0x08
    15c0:	f1 85       	ldd	r31, Z+9	; 0x09
    15c2:	e0 2d       	mov	r30, r0
    15c4:	19 95       	eicall
    15c6:	68 2e       	mov	r6, r24
    15c8:	f8 01       	movw	r30, r16
    15ca:	86 80       	ldd	r8, Z+6	; 0x06
    15cc:	97 80       	ldd	r9, Z+7	; 0x07
    15ce:	62 e9       	ldi	r22, 0x92	; 146
    15d0:	70 e2       	ldi	r23, 0x20	; 32
    15d2:	c4 01       	movw	r24, r8
    15d4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    15d8:	66 2d       	mov	r22, r6
    15da:	c4 01       	movw	r24, r8
    15dc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    15e0:	67 e9       	ldi	r22, 0x97	; 151
    15e2:	70 e2       	ldi	r23, 0x20	; 32
    15e4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    15e8:	d6 01       	movw	r26, r12
    15ea:	8d 91       	ld	r24, X+
    15ec:	9c 91       	ld	r25, X
    15ee:	dc 01       	movw	r26, r24
    15f0:	ed 91       	ld	r30, X+
    15f2:	fc 91       	ld	r31, X
    15f4:	00 84       	ldd	r0, Z+8	; 0x08
    15f6:	f1 85       	ldd	r31, Z+9	; 0x09
    15f8:	e0 2d       	mov	r30, r0
    15fa:	19 95       	eicall
    15fc:	68 2e       	mov	r6, r24
    15fe:	f8 01       	movw	r30, r16
    1600:	86 80       	ldd	r8, Z+6	; 0x06
    1602:	97 80       	ldd	r9, Z+7	; 0x07
    1604:	69 e9       	ldi	r22, 0x99	; 153
    1606:	70 e2       	ldi	r23, 0x20	; 32
    1608:	c4 01       	movw	r24, r8
    160a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    160e:	66 2d       	mov	r22, r6
    1610:	c4 01       	movw	r24, r8
    1612:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    161c:	6e 80       	ldd	r6, Y+6	; 0x06
    161e:	d8 01       	movw	r26, r16
    1620:	16 96       	adiw	r26, 0x06	; 6
    1622:	8d 90       	ld	r8, X+
    1624:	9c 90       	ld	r9, X
    1626:	17 97       	sbiw	r26, 0x07	; 7
    1628:	6f e9       	ldi	r22, 0x9F	; 159
    162a:	70 e2       	ldi	r23, 0x20	; 32
    162c:	c4 01       	movw	r24, r8
    162e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1632:	66 2d       	mov	r22, r6
    1634:	c4 01       	movw	r24, r8
    1636:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    163a:	66 e0       	ldi	r22, 0x06	; 6
    163c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1640:	6d 80       	ldd	r6, Y+5	; 0x05
    1642:	5e 80       	ldd	r5, Y+6	; 0x06
    1644:	f8 01       	movw	r30, r16
    1646:	86 80       	ldd	r8, Z+6	; 0x06
    1648:	97 80       	ldd	r9, Z+7	; 0x07
    164a:	6b ea       	ldi	r22, 0xAB	; 171
    164c:	70 e2       	ldi	r23, 0x20	; 32
    164e:	c4 01       	movw	r24, r8
    1650:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1654:	65 2d       	mov	r22, r5
    1656:	c4 01       	movw	r24, r8
    1658:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    165c:	66 2d       	mov	r22, r6
    165e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    1662:	66 e0       	ldi	r22, 0x06	; 6
    1664:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1668:	6d 80       	ldd	r6, Y+5	; 0x05
    166a:	d8 01       	movw	r26, r16
    166c:	16 96       	adiw	r26, 0x06	; 6
    166e:	8d 90       	ld	r8, X+
    1670:	9c 90       	ld	r9, X
    1672:	17 97       	sbiw	r26, 0x07	; 7
    1674:	64 eb       	ldi	r22, 0xB4	; 180
    1676:	70 e2       	ldi	r23, 0x20	; 32
    1678:	c4 01       	movw	r24, r8
    167a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    167e:	66 2d       	mov	r22, r6
    1680:	c4 01       	movw	r24, r8
    1682:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8emstreamlsEb>
    1686:	66 e0       	ldi	r22, 0x06	; 6
    1688:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    168c:	f8 01       	movw	r30, r16
    168e:	86 85       	ldd	r24, Z+14	; 0x0e
    1690:	97 85       	ldd	r25, Z+15	; 0x0f
    1692:	a0 89       	ldd	r26, Z+16	; 0x10
    1694:	b1 89       	ldd	r27, Z+17	; 0x11
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	a1 1d       	adc	r26, r1
    169a:	b1 1d       	adc	r27, r1
    169c:	86 87       	std	Z+14, r24	; 0x0e
    169e:	97 87       	std	Z+15, r25	; 0x0f
    16a0:	a0 8b       	std	Z+16, r26	; 0x10
    16a2:	b1 8b       	std	Z+17, r27	; 0x11
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	ce 01       	movw	r24, r28
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	0e 94 ae 1a 	call	0x355c	; 0x355c <vTaskDelayUntil>
    16b4:	2c cf       	rjmp	.-424    	; 0x150e <_ZN17task_limit_switch3runEv+0x7e>

000016b6 <_ZN8frt_taskC2EPKchjP8emstream>:
    16b6:	4f 92       	push	r4
    16b8:	5f 92       	push	r5
    16ba:	6f 92       	push	r6
    16bc:	7f 92       	push	r7
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	2a 97       	sbiw	r28, 0x0a	; 10
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	4c 01       	movw	r8, r24
    16e2:	29 01       	movw	r4, r18
    16e4:	38 01       	movw	r6, r16
    16e6:	8a e0       	ldi	r24, 0x0A	; 10
    16e8:	90 e2       	ldi	r25, 0x20	; 32
    16ea:	f4 01       	movw	r30, r8
    16ec:	80 83       	st	Z, r24
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	fb 01       	movw	r30, r22
    16f2:	80 81       	ld	r24, Z
    16f4:	88 23       	and	r24, r24
    16f6:	69 f0       	breq	.+26     	; 0x1712 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    16f8:	de 01       	movw	r26, r28
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	31 96       	adiw	r30, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1702:	99 30       	cpi	r25, 0x09	; 9
    1704:	39 f0       	breq	.+14     	; 0x1714 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1706:	9f 5f       	subi	r25, 0xFF	; 255
    1708:	8d 93       	st	X+, r24
    170a:	81 91       	ld	r24, Z+
    170c:	81 11       	cpse	r24, r1
    170e:	f9 cf       	rjmp	.-14     	; 0x1702 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	e1 e0       	ldi	r30, 0x01	; 1
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	ec 0f       	add	r30, r28
    171a:	fd 1f       	adc	r31, r29
    171c:	e9 0f       	add	r30, r25
    171e:	f1 1d       	adc	r31, r1
    1720:	10 82       	st	Z, r1
    1722:	74 01       	movw	r14, r8
    1724:	f2 e0       	ldi	r31, 0x02	; 2
    1726:	ef 0e       	add	r14, r31
    1728:	f1 1c       	adc	r15, r1
    172a:	a1 2c       	mov	r10, r1
    172c:	b1 2c       	mov	r11, r1
    172e:	c1 2c       	mov	r12, r1
    1730:	d1 2c       	mov	r13, r1
    1732:	04 2f       	mov	r16, r20
    1734:	94 01       	movw	r18, r8
    1736:	a2 01       	movw	r20, r4
    1738:	be 01       	movw	r22, r28
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	84 e7       	ldi	r24, 0x74	; 116
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <xTaskGenericCreate>
    1746:	f4 01       	movw	r30, r8
    1748:	66 82       	std	Z+6, r6	; 0x06
    174a:	77 82       	std	Z+7, r7	; 0x07
    174c:	40 86       	std	Z+8, r4	; 0x08
    174e:	51 86       	std	Z+9, r5	; 0x09
    1750:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <last_created_task_pointer>
    1754:	30 91 1d 21 	lds	r19, 0x211D	; 0x80211d <last_created_task_pointer+0x1>
    1758:	24 83       	std	Z+4, r18	; 0x04
    175a:	35 83       	std	Z+5, r19	; 0x05
    175c:	80 92 1c 21 	sts	0x211C, r8	; 0x80211c <last_created_task_pointer>
    1760:	90 92 1d 21 	sts	0x211D, r9	; 0x80211d <last_created_task_pointer+0x1>
    1764:	14 86       	std	Z+12, r1	; 0x0c
    1766:	15 86       	std	Z+13, r1	; 0x0d
    1768:	40 90 ba 31 	lds	r4, 0x31BA	; 0x8031ba <portStackTopForTask>
    176c:	50 90 bb 31 	lds	r5, 0x31BB	; 0x8031bb <portStackTopForTask+0x1>
    1770:	ff ef       	ldi	r31, 0xFF	; 255
    1772:	4f 1a       	sub	r4, r31
    1774:	5f 0a       	sbc	r5, r31
    1776:	40 92 ba 31 	sts	0x31BA, r4	; 0x8031ba <portStackTopForTask>
    177a:	50 92 bb 31 	sts	0x31BB, r5	; 0x8031bb <portStackTopForTask+0x1>
    177e:	f4 01       	movw	r30, r8
    1780:	42 86       	std	Z+10, r4	; 0x0a
    1782:	53 86       	std	Z+11, r5	; 0x0b
    1784:	16 86       	std	Z+14, r1	; 0x0e
    1786:	17 86       	std	Z+15, r1	; 0x0f
    1788:	10 8a       	std	Z+16, r1	; 0x10
    178a:	11 8a       	std	Z+17, r1	; 0x11
    178c:	61 14       	cp	r6, r1
    178e:	71 04       	cpc	r7, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1792:	44 c0       	rjmp	.+136    	; 0x181c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	79 f5       	brne	.+94     	; 0x17f6 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1798:	6a e0       	ldi	r22, 0x0A	; 10
    179a:	c3 01       	movw	r24, r6
    179c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17a0:	7c 01       	movw	r14, r24
    17a2:	6e e3       	ldi	r22, 0x3E	; 62
    17a4:	75 e0       	ldi	r23, 0x05	; 5
    17a6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    17aa:	be 01       	movw	r22, r28
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	c7 01       	movw	r24, r14
    17b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    17b6:	6a e0       	ldi	r22, 0x0A	; 10
    17b8:	c7 01       	movw	r24, r14
    17ba:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17be:	7c 01       	movw	r14, r24
    17c0:	65 e3       	ldi	r22, 0x35	; 53
    17c2:	75 e0       	ldi	r23, 0x05	; 5
    17c4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    17c8:	6a e0       	ldi	r22, 0x0A	; 10
    17ca:	c7 01       	movw	r24, r14
    17cc:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17d0:	7c 01       	movw	r14, r24
    17d2:	67 e2       	ldi	r22, 0x27	; 39
    17d4:	75 e0       	ldi	r23, 0x05	; 5
    17d6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    17da:	63 e0       	ldi	r22, 0x03	; 3
    17dc:	c7 01       	movw	r24, r14
    17de:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17e2:	b2 01       	movw	r22, r4
    17e4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN8emstreamlsEj>
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17ee:	66 e0       	ldi	r22, 0x06	; 6
    17f0:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    17f6:	6a e0       	ldi	r22, 0x0A	; 10
    17f8:	c3 01       	movw	r24, r6
    17fa:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    17fe:	4c 01       	movw	r8, r24
    1800:	62 e1       	ldi	r22, 0x12	; 18
    1802:	75 e0       	ldi	r23, 0x05	; 5
    1804:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1808:	be 01       	movw	r22, r28
    180a:	6f 5f       	subi	r22, 0xFF	; 255
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	c4 01       	movw	r24, r8
    1810:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1814:	66 e0       	ldi	r22, 0x06	; 6
    1816:	c4 01       	movw	r24, r8
    1818:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    181c:	2a 96       	adiw	r28, 0x0a	; 10
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	08 95       	ret

00001844 <_ZN14frt_base_queueIbE11ISR_butt_inERKb>:
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret

00001848 <_ZN14frt_base_queueIbE7butt_inERKb>:
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	08 95       	ret

0000184c <_ZN5rs23212clear_screenEv>:
    184c:	dc 01       	movw	r26, r24
    184e:	ed 91       	ld	r30, X+
    1850:	fc 91       	ld	r31, X
    1852:	02 80       	ldd	r0, Z+2	; 0x02
    1854:	f3 81       	ldd	r31, Z+3	; 0x03
    1856:	e0 2d       	mov	r30, r0
    1858:	6c e0       	ldi	r22, 0x0C	; 12
    185a:	19 95       	eicall
    185c:	08 95       	ret

0000185e <_ZN5rs23214check_for_charEv>:
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	a9 8d       	ldd	r26, Y+25	; 0x19
    1866:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1868:	eb 8d       	ldd	r30, Y+27	; 0x1b
    186a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	4d 91       	ld	r20, X+
    1870:	5c 91       	ld	r21, X
    1872:	20 81       	ld	r18, Z
    1874:	31 81       	ldd	r19, Z+1	; 0x01
    1876:	42 17       	cp	r20, r18
    1878:	53 07       	cpc	r21, r19
    187a:	09 f4       	brne	.+2      	; 0x187e <_ZN5rs23214check_for_charEv+0x20>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <_ZN5rs2327getcharEv>:
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	fc 01       	movw	r30, r24
    188a:	c1 8d       	ldd	r28, Z+25	; 0x19
    188c:	d2 8d       	ldd	r29, Z+26	; 0x1a
    188e:	28 81       	ld	r18, Y
    1890:	39 81       	ldd	r19, Y+1	; 0x01
    1892:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1894:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1896:	4d 91       	ld	r20, X+
    1898:	5c 91       	ld	r21, X
    189a:	24 17       	cp	r18, r20
    189c:	35 07       	cpc	r19, r21
    189e:	e9 f3       	breq	.-6      	; 0x189a <_ZN5rs2327getcharEv+0x16>
    18a0:	a7 89       	ldd	r26, Z+23	; 0x17
    18a2:	b0 8d       	ldd	r27, Z+24	; 0x18
    18a4:	0d 90       	ld	r0, X+
    18a6:	bc 91       	ld	r27, X
    18a8:	a0 2d       	mov	r26, r0
    18aa:	a2 0f       	add	r26, r18
    18ac:	b3 1f       	adc	r27, r19
    18ae:	8c 91       	ld	r24, X
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	28 83       	st	Y, r18
    18b6:	39 83       	std	Y+1, r19	; 0x01
    18b8:	24 36       	cpi	r18, 0x64	; 100
    18ba:	31 05       	cpc	r19, r1
    18bc:	28 f0       	brcs	.+10     	; 0x18c8 <_ZN5rs2327getcharEv+0x44>
    18be:	01 8c       	ldd	r0, Z+25	; 0x19
    18c0:	f2 8d       	ldd	r31, Z+26	; 0x1a
    18c2:	e0 2d       	mov	r30, r0
    18c4:	10 82       	st	Z, r1
    18c6:	11 82       	std	Z+1, r1	; 0x01
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <_ZN5rs2327putcharEc>:
    18d0:	dc 01       	movw	r26, r24
    18d2:	50 96       	adiw	r26, 0x10	; 16
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	51 97       	sbiw	r26, 0x11	; 17
    18da:	80 81       	ld	r24, Z
    18dc:	54 96       	adiw	r26, 0x14	; 20
    18de:	4c 91       	ld	r20, X
    18e0:	54 97       	sbiw	r26, 0x14	; 20
    18e2:	84 23       	and	r24, r20
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <_ZN5rs2327putcharEc+0x20>
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <_ZN5rs2327putcharEc+0x2a>
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	31 09       	sbc	r19, r1
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <_ZN5rs2327putcharEc+0x24>
    18ee:	12 c0       	rjmp	.+36     	; 0x1914 <_ZN5rs2327putcharEc+0x44>
    18f0:	21 e2       	ldi	r18, 0x21	; 33
    18f2:	3e e4       	ldi	r19, 0x4E	; 78
    18f4:	90 81       	ld	r25, Z
    18f6:	94 23       	and	r25, r20
    18f8:	b9 f3       	breq	.-18     	; 0x18e8 <_ZN5rs2327putcharEc+0x18>
    18fa:	90 81       	ld	r25, Z
    18fc:	56 96       	adiw	r26, 0x16	; 22
    18fe:	8c 91       	ld	r24, X
    1900:	56 97       	sbiw	r26, 0x16	; 22
    1902:	89 2b       	or	r24, r25
    1904:	80 83       	st	Z, r24
    1906:	1e 96       	adiw	r26, 0x0e	; 14
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	1f 97       	sbiw	r26, 0x0f	; 15
    190e:	60 83       	st	Z, r22
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	08 95       	ret
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	08 95       	ret

00001918 <_ZN9frt_queueIbE16ISR_num_items_inEv>:
    1918:	fc 01       	movw	r30, r24
    191a:	84 81       	ldd	r24, Z+4	; 0x04
    191c:	95 81       	ldd	r25, Z+5	; 0x05
    191e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <uxQueueMessagesWaitingFromISR>
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	08 95       	ret

00001926 <_ZN9frt_queueIbE13ISR_not_emptyEv>:
    1926:	fc 01       	movw	r30, r24
    1928:	84 81       	ldd	r24, Z+4	; 0x04
    192a:	95 81       	ldd	r25, Z+5	; 0x05
    192c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <uxQueueMessagesWaitingFromISR>
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	81 11       	cpse	r24, r1
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <_ZN9frt_queueIbE13ISR_not_emptyEv+0x12>
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	89 2f       	mov	r24, r25
    193a:	08 95       	ret

0000193c <_ZN9frt_queueIbE12ISR_is_emptyEv>:
    193c:	fc 01       	movw	r30, r24
    193e:	84 81       	ldd	r24, Z+4	; 0x04
    1940:	95 81       	ldd	r25, Z+5	; 0x05
    1942:	0e 94 6e 17 	call	0x2edc	; 0x2edc <uxQueueMessagesWaitingFromISR>
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	81 11       	cpse	r24, r1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	89 2f       	mov	r24, r25
    194e:	08 95       	ret

00001950 <_ZN9frt_queueIbE12num_items_inEv>:
    1950:	fc 01       	movw	r30, r24
    1952:	84 81       	ldd	r24, Z+4	; 0x04
    1954:	95 81       	ldd	r25, Z+5	; 0x05
    1956:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxQueueMessagesWaiting>
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	08 95       	ret

0000195e <_ZN9frt_queueIbE9not_emptyEv>:
    195e:	fc 01       	movw	r30, r24
    1960:	84 81       	ldd	r24, Z+4	; 0x04
    1962:	95 81       	ldd	r25, Z+5	; 0x05
    1964:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxQueueMessagesWaiting>
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	81 11       	cpse	r24, r1
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <_ZN9frt_queueIbE9not_emptyEv+0x12>
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	89 2f       	mov	r24, r25
    1972:	08 95       	ret

00001974 <_ZN9frt_queueIbE8is_emptyEv>:
    1974:	fc 01       	movw	r30, r24
    1976:	84 81       	ldd	r24, Z+4	; 0x04
    1978:	95 81       	ldd	r25, Z+5	; 0x05
    197a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <uxQueueMessagesWaiting>
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	81 11       	cpse	r24, r1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	89 2f       	mov	r24, r25
    1986:	08 95       	ret

00001988 <_ZN9frt_queueIbE10get_a_copyERb>:
    1988:	0f 93       	push	r16
    198a:	01 e0       	ldi	r16, 0x01	; 1
    198c:	2f ef       	ldi	r18, 0xFF	; 255
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	a9 01       	movw	r20, r18
    1992:	fc 01       	movw	r30, r24
    1994:	84 81       	ldd	r24, Z+4	; 0x04
    1996:	95 81       	ldd	r25, Z+5	; 0x05
    1998:	0e 94 75 16 	call	0x2cea	; 0x2cea <xQueueGenericReceive>
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <_ZN9frt_queueIbE10get_a_copyEv>:
    19a0:	0f 93       	push	r16
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	1f 92       	push	r1
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	01 e0       	ldi	r16, 0x01	; 1
    19ae:	2f ef       	ldi	r18, 0xFF	; 255
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	a9 01       	movw	r20, r18
    19b4:	be 01       	movw	r22, r28
    19b6:	6f 5f       	subi	r22, 0xFF	; 255
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	fc 01       	movw	r30, r24
    19bc:	84 81       	ldd	r24, Z+4	; 0x04
    19be:	95 81       	ldd	r25, Z+5	; 0x05
    19c0:	0e 94 75 16 	call	0x2cea	; 0x2cea <xQueueGenericReceive>
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <_ZN9frt_queueIbE3getEPb>:
    19d0:	0f 93       	push	r16
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	2f ef       	ldi	r18, 0xFF	; 255
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	a9 01       	movw	r20, r18
    19da:	fc 01       	movw	r30, r24
    19dc:	84 81       	ldd	r24, Z+4	; 0x04
    19de:	95 81       	ldd	r25, Z+5	; 0x05
    19e0:	0e 94 75 16 	call	0x2cea	; 0x2cea <xQueueGenericReceive>
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <_ZN9frt_queueIbE3getEv>:
    19e8:	0f 93       	push	r16
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	1f 92       	push	r1
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	00 e0       	ldi	r16, 0x00	; 0
    19f6:	2f ef       	ldi	r18, 0xFF	; 255
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	a9 01       	movw	r20, r18
    19fc:	be 01       	movw	r22, r28
    19fe:	6f 5f       	subi	r22, 0xFF	; 255
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	fc 01       	movw	r30, r24
    1a04:	84 81       	ldd	r24, Z+4	; 0x04
    1a06:	95 81       	ldd	r25, Z+5	; 0x05
    1a08:	0e 94 75 16 	call	0x2cea	; 0x2cea <xQueueGenericReceive>
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	0f 90       	pop	r0
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <_ZN9frt_queueIbE7ISR_getEPb>:
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	1f 92       	push	r1
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	ae 01       	movw	r20, r28
    1a24:	4f 5f       	subi	r20, 0xFF	; 255
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	fc 01       	movw	r30, r24
    1a2a:	84 81       	ldd	r24, Z+4	; 0x04
    1a2c:	95 81       	ldd	r25, Z+5	; 0x05
    1a2e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <xQueueReceiveFromISR>
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <_ZN9frt_queueIbE7ISR_getEv>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	1f 92       	push	r1
    1a40:	1f 92       	push	r1
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	ae 01       	movw	r20, r28
    1a48:	4e 5f       	subi	r20, 0xFE	; 254
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	be 01       	movw	r22, r28
    1a4e:	6f 5f       	subi	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	fc 01       	movw	r30, r24
    1a54:	84 81       	ldd	r24, Z+4	; 0x04
    1a56:	95 81       	ldd	r25, Z+5	; 0x05
    1a58:	0e 94 39 17 	call	0x2e72	; 0x2e72 <xQueueReceiveFromISR>
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <_ZN9frt_queueIbE11ISR_butt_inERKb>:
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	1f 92       	push	r1
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	19 82       	std	Y+1, r1	; 0x01
    1a74:	21 e0       	ldi	r18, 0x01	; 1
    1a76:	ae 01       	movw	r20, r28
    1a78:	4f 5f       	subi	r20, 0xFF	; 255
    1a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	84 81       	ldd	r24, Z+4	; 0x04
    1a80:	95 81       	ldd	r25, Z+5	; 0x05
    1a82:	0e 94 49 16 	call	0x2c92	; 0x2c92 <xQueueGenericSendFromISR>
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	81 11       	cpse	r24, r1
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <_ZN9frt_queueIbE11ISR_butt_inERKb+0x26>
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	89 2f       	mov	r24, r25
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <_ZN9frt_queueIbE7ISR_putERKb>:
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	1f 92       	push	r1
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	ae 01       	movw	r20, r28
    1aa8:	4f 5f       	subi	r20, 0xFF	; 255
    1aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1aac:	fc 01       	movw	r30, r24
    1aae:	84 81       	ldd	r24, Z+4	; 0x04
    1ab0:	95 81       	ldd	r25, Z+5	; 0x05
    1ab2:	0e 94 49 16 	call	0x2c92	; 0x2c92 <xQueueGenericSendFromISR>
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	81 11       	cpse	r24, r1
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <_ZN9frt_queueIbE7ISR_putERKb+0x26>
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	89 2f       	mov	r24, r25
    1ac0:	0f 90       	pop	r0
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <_ZN9frt_queueIbE7butt_inERKb>:
    1ac8:	0f 93       	push	r16
    1aca:	fc 01       	movw	r30, r24
    1acc:	26 81       	ldd	r18, Z+6	; 0x06
    1ace:	37 81       	ldd	r19, Z+7	; 0x07
    1ad0:	40 85       	ldd	r20, Z+8	; 0x08
    1ad2:	51 85       	ldd	r21, Z+9	; 0x09
    1ad4:	01 e0       	ldi	r16, 0x01	; 1
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <xQueueGenericSend>
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <_ZN9frt_queueIbE7butt_inERKb+0x1e>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	89 2f       	mov	r24, r25
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <_ZN9frt_queueIbE3putERKb>:
    1aec:	0f 93       	push	r16
    1aee:	fc 01       	movw	r30, r24
    1af0:	26 81       	ldd	r18, Z+6	; 0x06
    1af2:	37 81       	ldd	r19, Z+7	; 0x07
    1af4:	40 85       	ldd	r20, Z+8	; 0x08
    1af6:	51 85       	ldd	r21, Z+9	; 0x09
    1af8:	00 e0       	ldi	r16, 0x00	; 0
    1afa:	84 81       	ldd	r24, Z+4	; 0x04
    1afc:	95 81       	ldd	r25, Z+5	; 0x05
    1afe:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <xQueueGenericSend>
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	81 11       	cpse	r24, r1
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <_ZN9frt_queueIbE3putERKb+0x1e>
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	89 2f       	mov	r24, r25
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <_GLOBAL__sub_I_counter>:
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	c2 e2       	ldi	r28, 0x22	; 34
    1b16:	d1 e2       	ldi	r29, 0x21	; 33
    1b18:	8a e0       	ldi	r24, 0x0A	; 10
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	1b 82       	std	Y+3, r1	; 0x03
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	1c 82       	std	Y+4, r1	; 0x04
    1b24:	1e 82       	std	Y+6, r1	; 0x06
    1b26:	1f 82       	std	Y+7, r1	; 0x07
    1b28:	86 e8       	ldi	r24, 0x86	; 134
    1b2a:	90 e2       	ldi	r25, 0x20	; 32
    1b2c:	88 83       	st	Y, r24
    1b2e:	99 83       	std	Y+1, r25	; 0x01
    1b30:	1e 86       	std	Y+14, r1	; 0x0e
    1b32:	1f 86       	std	Y+15, r1	; 0x0f
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	80 e2       	ldi	r24, 0x20	; 32
    1b3a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <xQueueGenericCreate>
    1b3e:	88 87       	std	Y+8, r24	; 0x08
    1b40:	99 87       	std	Y+9, r25	; 0x09
    1b42:	8a e0       	ldi	r24, 0x0A	; 10
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	8a 87       	std	Y+10, r24	; 0x0a
    1b4c:	9b 87       	std	Y+11, r25	; 0x0b
    1b4e:	ac 87       	std	Y+12, r26	; 0x0c
    1b50:	bd 87       	std	Y+13, r27	; 0x0d
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <main>:
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	6e 97       	sbiw	r28, 0x1e	; 30
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	e0 e6       	ldi	r30, 0x60	; 96
    1b76:	f6 e0       	ldi	r31, 0x06	; 6
    1b78:	80 e1       	ldi	r24, 0x10	; 16
    1b7a:	81 83       	std	Z+1, r24	; 0x01
    1b7c:	85 83       	std	Z+5, r24	; 0x05
    1b7e:	f8 94       	cli
    1b80:	e0 e5       	ldi	r30, 0x50	; 80
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	80 83       	st	Z, r24
    1b8a:	81 81       	ldd	r24, Z+1	; 0x01
    1b8c:	81 ff       	sbrs	r24, 1
    1b8e:	fd cf       	rjmp	.-6      	; 0x1b8a <main+0x32>
    1b90:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1b94:	9f b7       	in	r25, 0x3f	; 63
    1b96:	9e 8f       	std	Y+30, r25	; 0x1e
    1b98:	f8 94       	cli
    1b9a:	1b be       	out	0x3b, r1	; 59
    1b9c:	88 7f       	andi	r24, 0xF8	; 248
    1b9e:	81 60       	ori	r24, 0x01	; 1
    1ba0:	20 e4       	ldi	r18, 0x40	; 64
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	08 ed       	ldi	r16, 0xD8	; 216
    1ba8:	04 bf       	out	0x34, r16	; 52
    1baa:	80 83       	st	Z, r24
    1bac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bae:	8f bf       	out	0x3f, r24	; 63
    1bb0:	e0 e5       	ldi	r30, 0x50	; 80
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8e 7f       	andi	r24, 0xFE	; 254
    1bb8:	80 83       	st	Z, r24
    1bba:	9d ef       	ldi	r25, 0xFD	; 253
    1bbc:	88 ed       	ldi	r24, 0xD8	; 216
    1bbe:	08 b6       	in	r0, 0x38	; 56
    1bc0:	18 be       	out	0x38, r1	; 56
    1bc2:	84 bf       	out	0x34, r24	; 52
    1bc4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bc8:	08 be       	out	0x38, r0	; 56
    1bca:	8a e0       	ldi	r24, 0x0A	; 10
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1bd2:	8c 01       	movw	r16, r24
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	12 82       	std	Z+2, r1	; 0x02
    1bd8:	13 82       	std	Z+3, r1	; 0x03
    1bda:	0f 2e       	mov	r0, r31
    1bdc:	f2 e1       	ldi	r31, 0x12	; 18
    1bde:	ef 2e       	mov	r14, r31
    1be0:	f0 e2       	ldi	r31, 0x20	; 32
    1be2:	ff 2e       	mov	r15, r31
    1be4:	f0 2d       	mov	r31, r0
    1be6:	e0 82       	st	Z, r14
    1be8:	f1 82       	std	Z+1, r15	; 0x01
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	89 e1       	ldi	r24, 0x19	; 25
    1bf0:	0e 94 80 15 	call	0x2b00	; 0x2b00 <xQueueGenericCreate>
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	84 83       	std	Z+4, r24	; 0x04
    1bf8:	95 83       	std	Z+5, r25	; 0x05
    1bfa:	16 82       	std	Z+6, r1	; 0x06
    1bfc:	17 82       	std	Z+7, r1	; 0x07
    1bfe:	10 86       	std	Z+8, r1	; 0x08
    1c00:	11 86       	std	Z+9, r1	; 0x09
    1c02:	00 93 20 21 	sts	0x2120, r16	; 0x802120 <leftLimitSwitch>
    1c06:	10 93 21 21 	sts	0x2121, r17	; 0x802121 <leftLimitSwitch+0x1>
    1c0a:	8a e0       	ldi	r24, 0x0A	; 10
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1c12:	8c 01       	movw	r16, r24
    1c14:	fc 01       	movw	r30, r24
    1c16:	12 82       	std	Z+2, r1	; 0x02
    1c18:	13 82       	std	Z+3, r1	; 0x03
    1c1a:	e0 82       	st	Z, r14
    1c1c:	f1 82       	std	Z+1, r15	; 0x01
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	89 e1       	ldi	r24, 0x19	; 25
    1c24:	0e 94 80 15 	call	0x2b00	; 0x2b00 <xQueueGenericCreate>
    1c28:	f8 01       	movw	r30, r16
    1c2a:	84 83       	std	Z+4, r24	; 0x04
    1c2c:	95 83       	std	Z+5, r25	; 0x05
    1c2e:	16 82       	std	Z+6, r1	; 0x06
    1c30:	17 82       	std	Z+7, r1	; 0x07
    1c32:	10 86       	std	Z+8, r1	; 0x08
    1c34:	11 86       	std	Z+9, r1	; 0x09
    1c36:	00 93 1e 21 	sts	0x211E, r16	; 0x80211e <rightLimitSwitch>
    1c3a:	10 93 1f 21 	sts	0x211F, r17	; 0x80211f <rightLimitSwitch+0x1>
    1c3e:	86 e7       	ldi	r24, 0x76	; 118
    1c40:	90 e2       	ldi	r25, 0x20	; 32
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	8a e0       	ldi	r24, 0x0A	; 10
    1c48:	8b 83       	std	Y+3, r24	; 0x03
    1c4a:	1c 82       	std	Y+4, r1	; 0x04
    1c4c:	43 e0       	ldi	r20, 0x03	; 3
    1c4e:	4e 83       	std	Y+6, r20	; 0x06
    1c50:	1d 82       	std	Y+5, r1	; 0x05
    1c52:	1f 82       	std	Y+7, r1	; 0x07
    1c54:	18 86       	std	Y+8, r1	; 0x08
    1c56:	a0 e4       	ldi	r26, 0x40	; 64
    1c58:	b6 e0       	ldi	r27, 0x06	; 6
    1c5a:	ab 87       	std	Y+11, r26	; 0x0b
    1c5c:	bc 87       	std	Y+12, r27	; 0x0c
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	8d 87       	std	Y+13, r24	; 0x0d
    1c62:	0f 2e       	mov	r0, r31
    1c64:	f7 e0       	ldi	r31, 0x07	; 7
    1c66:	df 2e       	mov	r13, r31
    1c68:	f0 2d       	mov	r31, r0
    1c6a:	de 86       	std	Y+14, r13	; 0x0e
    1c6c:	e0 eb       	ldi	r30, 0xB0	; 176
    1c6e:	f8 e0       	ldi	r31, 0x08	; 8
    1c70:	ef 87       	std	Y+15, r30	; 0x0f
    1c72:	f8 8b       	std	Y+16, r31	; 0x10
    1c74:	81 eb       	ldi	r24, 0xB1	; 177
    1c76:	98 e0       	ldi	r25, 0x08	; 8
    1c78:	89 8b       	std	Y+17, r24	; 0x11
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	84 eb       	ldi	r24, 0xB4	; 180
    1c7e:	98 e0       	ldi	r25, 0x08	; 8
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
    1c82:	9c 8b       	std	Y+20, r25	; 0x14
    1c84:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c86:	14 96       	adiw	r26, 0x04	; 4
    1c88:	5c 91       	ld	r21, X
    1c8a:	14 97       	sbiw	r26, 0x04	; 4
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	bc 01       	movw	r22, r24
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <main+0x140>
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	2a 95       	dec	r18
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <main+0x13c>
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	25 2b       	or	r18, r21
    1ca0:	14 96       	adiw	r26, 0x04	; 4
    1ca2:	2c 93       	st	X, r18
    1ca4:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ca6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ca8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1caa:	5c 91       	ld	r21, X
    1cac:	bc 01       	movw	r22, r24
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <main+0x15c>
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	2a 95       	dec	r18
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <main+0x158>
    1cb8:	9b 01       	movw	r18, r22
    1cba:	25 2b       	or	r18, r21
    1cbc:	2c 93       	st	X, r18
    1cbe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cc0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1cc2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cc4:	2c 91       	ld	r18, X
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <main+0x174>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	3a 95       	dec	r19
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <main+0x170>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	82 23       	and	r24, r18
    1cd6:	8c 93       	st	X, r24
    1cd8:	80 e1       	ldi	r24, 0x10	; 16
    1cda:	83 83       	std	Z+3, r24	; 0x03
    1cdc:	45 83       	std	Z+5, r20	; 0x05
    1cde:	80 ef       	ldi	r24, 0xF0	; 240
    1ce0:	87 83       	std	Z+7, r24	; 0x07
    1ce2:	81 e2       	ldi	r24, 0x21	; 33
    1ce4:	86 83       	std	Z+6, r24	; 0x06
    1ce6:	88 e1       	ldi	r24, 0x18	; 24
    1ce8:	84 83       	std	Z+4, r24	; 0x04
    1cea:	80 e8       	ldi	r24, 0x80	; 128
    1cec:	8e 8b       	std	Y+22, r24	; 0x16
    1cee:	80 e4       	ldi	r24, 0x40	; 64
    1cf0:	8f 8b       	std	Y+23, r24	; 0x17
    1cf2:	80 e2       	ldi	r24, 0x20	; 32
    1cf4:	8d 8b       	std	Y+21, r24	; 0x15
    1cf6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cf8:	f8 89       	ldd	r31, Y+16	; 0x10
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 81       	ld	r24, Z
    1cfe:	86 e3       	ldi	r24, 0x36	; 54
    1d00:	90 e2       	ldi	r25, 0x20	; 32
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	88 e4       	ldi	r24, 0x48	; 72
    1d08:	91 e2       	ldi	r25, 0x21	; 33
    1d0a:	88 8f       	std	Y+24, r24	; 0x18
    1d0c:	99 8f       	std	Y+25, r25	; 0x19
    1d0e:	86 e4       	ldi	r24, 0x46	; 70
    1d10:	91 e2       	ldi	r25, 0x21	; 33
    1d12:	8a 8f       	std	Y+26, r24	; 0x1a
    1d14:	9b 8f       	std	Y+27, r25	; 0x1b
    1d16:	84 e4       	ldi	r24, 0x44	; 68
    1d18:	91 e2       	ldi	r25, 0x21	; 33
    1d1a:	8c 8f       	std	Y+28, r24	; 0x1c
    1d1c:	9d 8f       	std	Y+29, r25	; 0x1d
    1d1e:	84 e6       	ldi	r24, 0x64	; 100
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1d26:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <rcvC1_buffer>
    1d2a:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <rcvC1_buffer+0x1>
    1d2e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d30:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1d32:	10 82       	st	Z, r1
    1d34:	11 82       	std	Z+1, r1	; 0x01
    1d36:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d38:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d3a:	10 82       	st	Z, r1
    1d3c:	11 82       	std	Z+1, r1	; 0x01
    1d3e:	67 e0       	ldi	r22, 0x07	; 7
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1d48:	8c 01       	movw	r16, r24
    1d4a:	61 ec       	ldi	r22, 0xC1	; 193
    1d4c:	70 e2       	ldi	r23, 0x20	; 32
    1d4e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    1d52:	66 e0       	ldi	r22, 0x06	; 6
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1d5a:	66 e0       	ldi	r22, 0x06	; 6
    1d5c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN8emstreamlsE15ser_manipulator>
    1d60:	82 e1       	ldi	r24, 0x12	; 18
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1d68:	7c 01       	movw	r14, r24
    1d6a:	8e 01       	movw	r16, r28
    1d6c:	0f 5f       	subi	r16, 0xFF	; 255
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	24 e0       	ldi	r18, 0x04	; 4
    1d72:	31 e0       	ldi	r19, 0x01	; 1
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	60 ee       	ldi	r22, 0xE0	; 224
    1d78:	70 e2       	ldi	r23, 0x20	; 32
    1d7a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1d7e:	86 e4       	ldi	r24, 0x46	; 70
    1d80:	90 e2       	ldi	r25, 0x20	; 32
    1d82:	f7 01       	movw	r30, r14
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	83 e1       	ldi	r24, 0x13	; 19
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1d90:	7c 01       	movw	r14, r24
    1d92:	24 e0       	ldi	r18, 0x04	; 4
    1d94:	31 e0       	ldi	r19, 0x01	; 1
    1d96:	44 e0       	ldi	r20, 0x04	; 4
    1d98:	68 ee       	ldi	r22, 0xE8	; 232
    1d9a:	70 e2       	ldi	r23, 0x20	; 32
    1d9c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1da0:	0f 2e       	mov	r0, r31
    1da2:	fe e4       	ldi	r31, 0x4E	; 78
    1da4:	af 2e       	mov	r10, r31
    1da6:	f0 e2       	ldi	r31, 0x20	; 32
    1da8:	bf 2e       	mov	r11, r31
    1daa:	f0 2d       	mov	r31, r0
    1dac:	f7 01       	movw	r30, r14
    1dae:	a0 82       	st	Z, r10
    1db0:	b1 82       	std	Z+1, r11	; 0x01
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	82 8b       	std	Z+18, r24	; 0x12
    1db6:	83 e1       	ldi	r24, 0x13	; 19
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	24 e0       	ldi	r18, 0x04	; 4
    1dc2:	31 e0       	ldi	r19, 0x01	; 1
    1dc4:	44 e0       	ldi	r20, 0x04	; 4
    1dc6:	6f ee       	ldi	r22, 0xEF	; 239
    1dc8:	70 e2       	ldi	r23, 0x20	; 32
    1dca:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1dce:	f7 01       	movw	r30, r14
    1dd0:	a0 82       	st	Z, r10
    1dd2:	b1 82       	std	Z+1, r11	; 0x01
    1dd4:	84 e0       	ldi	r24, 0x04	; 4
    1dd6:	82 8b       	std	Z+18, r24	; 0x12
    1dd8:	82 e1       	ldi	r24, 0x12	; 18
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1de0:	7c 01       	movw	r14, r24
    1de2:	24 e0       	ldi	r18, 0x04	; 4
    1de4:	31 e0       	ldi	r19, 0x01	; 1
    1de6:	44 e0       	ldi	r20, 0x04	; 4
    1de8:	67 ef       	ldi	r22, 0xF7	; 247
    1dea:	70 e2       	ldi	r23, 0x20	; 32
    1dec:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1df0:	86 e5       	ldi	r24, 0x56	; 86
    1df2:	90 e2       	ldi	r25, 0x20	; 32
    1df4:	f7 01       	movw	r30, r14
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	82 e1       	ldi	r24, 0x12	; 18
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1e02:	7c 01       	movw	r14, r24
    1e04:	24 e0       	ldi	r18, 0x04	; 4
    1e06:	31 e0       	ldi	r19, 0x01	; 1
    1e08:	43 e0       	ldi	r20, 0x03	; 3
    1e0a:	6e ef       	ldi	r22, 0xFE	; 254
    1e0c:	70 e2       	ldi	r23, 0x20	; 32
    1e0e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1e12:	8e e5       	ldi	r24, 0x5E	; 94
    1e14:	90 e2       	ldi	r25, 0x20	; 32
    1e16:	f7 01       	movw	r30, r14
    1e18:	80 83       	st	Z, r24
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	82 e1       	ldi	r24, 0x12	; 18
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1e24:	7c 01       	movw	r14, r24
    1e26:	24 e0       	ldi	r18, 0x04	; 4
    1e28:	31 e0       	ldi	r19, 0x01	; 1
    1e2a:	42 e0       	ldi	r20, 0x02	; 2
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	71 e2       	ldi	r23, 0x21	; 33
    1e30:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1e34:	86 e6       	ldi	r24, 0x66	; 102
    1e36:	90 e2       	ldi	r25, 0x20	; 32
    1e38:	f7 01       	movw	r30, r14
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	82 e1       	ldi	r24, 0x12	; 18
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    1e46:	7c 01       	movw	r14, r24
    1e48:	24 e0       	ldi	r18, 0x04	; 4
    1e4a:	31 e0       	ldi	r19, 0x01	; 1
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	6d e0       	ldi	r22, 0x0D	; 13
    1e50:	71 e2       	ldi	r23, 0x21	; 33
    1e52:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8frt_taskC2EPKchjP8emstream>
    1e56:	8e e6       	ldi	r24, 0x6E	; 110
    1e58:	90 e2       	ldi	r25, 0x20	; 32
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e64:	78 94       	sei
    1e66:	0e 94 d7 18 	call	0x31ae	; 0x31ae <vTaskStartScheduler>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	6e 96       	adiw	r28, 0x1e	; 30
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	08 95       	ret

00001e88 <__vector_58>:
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	08 b6       	in	r0, 0x38	; 56
    1e94:	0f 92       	push	r0
    1e96:	18 be       	out	0x38, r1	; 56
    1e98:	0b b6       	in	r0, 0x3b	; 59
    1e9a:	0f 92       	push	r0
    1e9c:	1b be       	out	0x3b, r1	; 59
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	ef 93       	push	r30
    1ea8:	ff 93       	push	r31
    1eaa:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1eae:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <rcvE0_buffer>
    1eb2:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <rcvE0_buffer+0x1>
    1eb6:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <rcvE0_write_index>
    1eba:	90 91 33 21 	lds	r25, 0x2133	; 0x802133 <rcvE0_write_index+0x1>
    1ebe:	e8 0f       	add	r30, r24
    1ec0:	f9 1f       	adc	r31, r25
    1ec2:	20 83       	st	Z, r18
    1ec4:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <rcvE0_write_index>
    1ec8:	90 91 33 21 	lds	r25, 0x2133	; 0x802133 <rcvE0_write_index+0x1>
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	84 36       	cpi	r24, 0x64	; 100
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	60 f4       	brcc	.+24     	; 0x1eec <__vector_58+0x64>
    1ed4:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <rcvE0_write_index>
    1ed8:	90 93 33 21 	sts	0x2133, r25	; 0x802133 <rcvE0_write_index+0x1>
    1edc:	20 91 34 21 	lds	r18, 0x2134	; 0x802134 <rcvE0_read_index>
    1ee0:	30 91 35 21 	lds	r19, 0x2135	; 0x802135 <rcvE0_read_index+0x1>
    1ee4:	82 17       	cp	r24, r18
    1ee6:	93 07       	cpc	r25, r19
    1ee8:	f1 f4       	brne	.+60     	; 0x1f26 <__vector_58+0x9e>
    1eea:	0c c0       	rjmp	.+24     	; 0x1f04 <__vector_58+0x7c>
    1eec:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <rcvE0_write_index>
    1ef0:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <rcvE0_write_index+0x1>
    1ef4:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <rcvE0_read_index>
    1ef8:	90 91 35 21 	lds	r25, 0x2135	; 0x802135 <rcvE0_read_index+0x1>
    1efc:	18 16       	cp	r1, r24
    1efe:	19 06       	cpc	r1, r25
    1f00:	91 f4       	brne	.+36     	; 0x1f26 <__vector_58+0x9e>
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <__vector_58+0x98>
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	84 36       	cpi	r24, 0x64	; 100
    1f08:	91 05       	cpc	r25, r1
    1f0a:	28 f4       	brcc	.+10     	; 0x1f16 <__vector_58+0x8e>
    1f0c:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <rcvE0_read_index>
    1f10:	90 93 35 21 	sts	0x2135, r25	; 0x802135 <rcvE0_read_index+0x1>
    1f14:	08 c0       	rjmp	.+16     	; 0x1f26 <__vector_58+0x9e>
    1f16:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <rcvE0_read_index>
    1f1a:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <rcvE0_read_index+0x1>
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <__vector_58+0x9e>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	f3 cf       	rjmp	.-26     	; 0x1f0c <__vector_58+0x84>
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0b be       	out	0x3b, r0	; 59
    1f36:	0f 90       	pop	r0
    1f38:	08 be       	out	0x38, r0	; 56
    1f3a:	0f 90       	pop	r0
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	0f 90       	pop	r0
    1f40:	1f 90       	pop	r1
    1f42:	18 95       	reti

00001f44 <__vector_91>:
    1f44:	1f 92       	push	r1
    1f46:	0f 92       	push	r0
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	0f 92       	push	r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	08 b6       	in	r0, 0x38	; 56
    1f50:	0f 92       	push	r0
    1f52:	18 be       	out	0x38, r1	; 56
    1f54:	0b b6       	in	r0, 0x3b	; 59
    1f56:	0f 92       	push	r0
    1f58:	1b be       	out	0x3b, r1	; 59
    1f5a:	2f 93       	push	r18
    1f5c:	3f 93       	push	r19
    1f5e:	8f 93       	push	r24
    1f60:	9f 93       	push	r25
    1f62:	ef 93       	push	r30
    1f64:	ff 93       	push	r31
    1f66:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    1f6a:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <rcvD1_buffer>
    1f6e:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <rcvD1_buffer+0x1>
    1f72:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <rcvD1_write_index>
    1f76:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <rcvD1_write_index+0x1>
    1f7a:	e8 0f       	add	r30, r24
    1f7c:	f9 1f       	adc	r31, r25
    1f7e:	20 83       	st	Z, r18
    1f80:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <rcvD1_write_index>
    1f84:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <rcvD1_write_index+0x1>
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	84 36       	cpi	r24, 0x64	; 100
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	60 f4       	brcc	.+24     	; 0x1fa8 <__vector_91+0x64>
    1f90:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <rcvD1_write_index>
    1f94:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <rcvD1_write_index+0x1>
    1f98:	20 91 3a 21 	lds	r18, 0x213A	; 0x80213a <rcvD1_read_index>
    1f9c:	30 91 3b 21 	lds	r19, 0x213B	; 0x80213b <rcvD1_read_index+0x1>
    1fa0:	82 17       	cp	r24, r18
    1fa2:	93 07       	cpc	r25, r19
    1fa4:	f1 f4       	brne	.+60     	; 0x1fe2 <__vector_91+0x9e>
    1fa6:	0c c0       	rjmp	.+24     	; 0x1fc0 <__vector_91+0x7c>
    1fa8:	10 92 38 21 	sts	0x2138, r1	; 0x802138 <rcvD1_write_index>
    1fac:	10 92 39 21 	sts	0x2139, r1	; 0x802139 <rcvD1_write_index+0x1>
    1fb0:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <rcvD1_read_index>
    1fb4:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <rcvD1_read_index+0x1>
    1fb8:	18 16       	cp	r1, r24
    1fba:	19 06       	cpc	r1, r25
    1fbc:	91 f4       	brne	.+36     	; 0x1fe2 <__vector_91+0x9e>
    1fbe:	0e c0       	rjmp	.+28     	; 0x1fdc <__vector_91+0x98>
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	84 36       	cpi	r24, 0x64	; 100
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	28 f4       	brcc	.+10     	; 0x1fd2 <__vector_91+0x8e>
    1fc8:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <rcvD1_read_index>
    1fcc:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <rcvD1_read_index+0x1>
    1fd0:	08 c0       	rjmp	.+16     	; 0x1fe2 <__vector_91+0x9e>
    1fd2:	10 92 3a 21 	sts	0x213A, r1	; 0x80213a <rcvD1_read_index>
    1fd6:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <rcvD1_read_index+0x1>
    1fda:	03 c0       	rjmp	.+6      	; 0x1fe2 <__vector_91+0x9e>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	f3 cf       	rjmp	.-26     	; 0x1fc8 <__vector_91+0x84>
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	0f 90       	pop	r0
    1ff0:	0b be       	out	0x3b, r0	; 59
    1ff2:	0f 90       	pop	r0
    1ff4:	08 be       	out	0x38, r0	; 56
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_88>:
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	08 b6       	in	r0, 0x38	; 56
    200c:	0f 92       	push	r0
    200e:	18 be       	out	0x38, r1	; 56
    2010:	0b b6       	in	r0, 0x3b	; 59
    2012:	0f 92       	push	r0
    2014:	1b be       	out	0x3b, r1	; 59
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	8f 93       	push	r24
    201c:	9f 93       	push	r25
    201e:	ef 93       	push	r30
    2020:	ff 93       	push	r31
    2022:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    2026:	e0 91 42 21 	lds	r30, 0x2142	; 0x802142 <rcvD0_buffer>
    202a:	f0 91 43 21 	lds	r31, 0x2143	; 0x802143 <rcvD0_buffer+0x1>
    202e:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <rcvC0_write_index>
    2032:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <rcvC0_write_index+0x1>
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25
    203a:	20 83       	st	Z, r18
    203c:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <rcvD0_write_index>
    2040:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <rcvD0_write_index+0x1>
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	84 36       	cpi	r24, 0x64	; 100
    2048:	91 05       	cpc	r25, r1
    204a:	60 f4       	brcc	.+24     	; 0x2064 <__vector_88+0x64>
    204c:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <rcvD0_write_index>
    2050:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <rcvD0_write_index+0x1>
    2054:	20 91 40 21 	lds	r18, 0x2140	; 0x802140 <rcvD0_read_index>
    2058:	30 91 41 21 	lds	r19, 0x2141	; 0x802141 <rcvD0_read_index+0x1>
    205c:	82 17       	cp	r24, r18
    205e:	93 07       	cpc	r25, r19
    2060:	f1 f4       	brne	.+60     	; 0x209e <__vector_88+0x9e>
    2062:	0c c0       	rjmp	.+24     	; 0x207c <__vector_88+0x7c>
    2064:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <rcvD0_write_index>
    2068:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <rcvD0_write_index+0x1>
    206c:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <rcvD0_read_index>
    2070:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <rcvD0_read_index+0x1>
    2074:	18 16       	cp	r1, r24
    2076:	19 06       	cpc	r1, r25
    2078:	91 f4       	brne	.+36     	; 0x209e <__vector_88+0x9e>
    207a:	0e c0       	rjmp	.+28     	; 0x2098 <__vector_88+0x98>
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	84 36       	cpi	r24, 0x64	; 100
    2080:	91 05       	cpc	r25, r1
    2082:	28 f4       	brcc	.+10     	; 0x208e <__vector_88+0x8e>
    2084:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <rcvD0_read_index>
    2088:	90 93 41 21 	sts	0x2141, r25	; 0x802141 <rcvD0_read_index+0x1>
    208c:	08 c0       	rjmp	.+16     	; 0x209e <__vector_88+0x9e>
    208e:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <rcvD0_read_index>
    2092:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <rcvD0_read_index+0x1>
    2096:	03 c0       	rjmp	.+6      	; 0x209e <__vector_88+0x9e>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	f3 cf       	rjmp	.-26     	; 0x2084 <__vector_88+0x84>
    209e:	ff 91       	pop	r31
    20a0:	ef 91       	pop	r30
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	0f 90       	pop	r0
    20ac:	0b be       	out	0x3b, r0	; 59
    20ae:	0f 90       	pop	r0
    20b0:	08 be       	out	0x38, r0	; 56
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_28>:
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	08 b6       	in	r0, 0x38	; 56
    20c8:	0f 92       	push	r0
    20ca:	18 be       	out	0x38, r1	; 56
    20cc:	0b b6       	in	r0, 0x3b	; 59
    20ce:	0f 92       	push	r0
    20d0:	1b be       	out	0x3b, r1	; 59
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
    20de:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    20e2:	e0 91 48 21 	lds	r30, 0x2148	; 0x802148 <rcvC1_buffer>
    20e6:	f0 91 49 21 	lds	r31, 0x2149	; 0x802149 <rcvC1_buffer+0x1>
    20ea:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <rcvC1_write_index>
    20ee:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <rcvC1_write_index+0x1>
    20f2:	e8 0f       	add	r30, r24
    20f4:	f9 1f       	adc	r31, r25
    20f6:	20 83       	st	Z, r18
    20f8:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <rcvC1_write_index>
    20fc:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <rcvC1_write_index+0x1>
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	84 36       	cpi	r24, 0x64	; 100
    2104:	91 05       	cpc	r25, r1
    2106:	60 f4       	brcc	.+24     	; 0x2120 <__vector_28+0x64>
    2108:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <rcvC1_write_index>
    210c:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <rcvC1_write_index+0x1>
    2110:	20 91 46 21 	lds	r18, 0x2146	; 0x802146 <rcvC1_read_index>
    2114:	30 91 47 21 	lds	r19, 0x2147	; 0x802147 <rcvC1_read_index+0x1>
    2118:	82 17       	cp	r24, r18
    211a:	93 07       	cpc	r25, r19
    211c:	f1 f4       	brne	.+60     	; 0x215a <__vector_28+0x9e>
    211e:	0c c0       	rjmp	.+24     	; 0x2138 <__vector_28+0x7c>
    2120:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <rcvC1_write_index>
    2124:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <rcvC1_write_index+0x1>
    2128:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <rcvC1_read_index>
    212c:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <rcvC1_read_index+0x1>
    2130:	18 16       	cp	r1, r24
    2132:	19 06       	cpc	r1, r25
    2134:	91 f4       	brne	.+36     	; 0x215a <__vector_28+0x9e>
    2136:	0e c0       	rjmp	.+28     	; 0x2154 <__vector_28+0x98>
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	84 36       	cpi	r24, 0x64	; 100
    213c:	91 05       	cpc	r25, r1
    213e:	28 f4       	brcc	.+10     	; 0x214a <__vector_28+0x8e>
    2140:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <rcvC1_read_index>
    2144:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <rcvC1_read_index+0x1>
    2148:	08 c0       	rjmp	.+16     	; 0x215a <__vector_28+0x9e>
    214a:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <rcvC1_read_index>
    214e:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <rcvC1_read_index+0x1>
    2152:	03 c0       	rjmp	.+6      	; 0x215a <__vector_28+0x9e>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	f3 cf       	rjmp	.-26     	; 0x2140 <__vector_28+0x84>
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0b be       	out	0x3b, r0	; 59
    216a:	0f 90       	pop	r0
    216c:	08 be       	out	0x38, r0	; 56
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_25>:
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	08 b6       	in	r0, 0x38	; 56
    2184:	0f 92       	push	r0
    2186:	18 be       	out	0x38, r1	; 56
    2188:	0b b6       	in	r0, 0x3b	; 59
    218a:	0f 92       	push	r0
    218c:	1b be       	out	0x3b, r1	; 59
    218e:	2f 93       	push	r18
    2190:	3f 93       	push	r19
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
    219a:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    219e:	e0 91 4e 21 	lds	r30, 0x214E	; 0x80214e <rcvC0_buffer>
    21a2:	f0 91 4f 21 	lds	r31, 0x214F	; 0x80214f <rcvC0_buffer+0x1>
    21a6:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <rcvC0_write_index>
    21aa:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <rcvC0_write_index+0x1>
    21ae:	e8 0f       	add	r30, r24
    21b0:	f9 1f       	adc	r31, r25
    21b2:	20 83       	st	Z, r18
    21b4:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <rcvC0_write_index>
    21b8:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <rcvC0_write_index+0x1>
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	84 36       	cpi	r24, 0x64	; 100
    21c0:	91 05       	cpc	r25, r1
    21c2:	60 f4       	brcc	.+24     	; 0x21dc <__vector_25+0x64>
    21c4:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <rcvC0_write_index>
    21c8:	90 93 4b 21 	sts	0x214B, r25	; 0x80214b <rcvC0_write_index+0x1>
    21cc:	20 91 4c 21 	lds	r18, 0x214C	; 0x80214c <rcvC0_read_index>
    21d0:	30 91 4d 21 	lds	r19, 0x214D	; 0x80214d <rcvC0_read_index+0x1>
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	f1 f4       	brne	.+60     	; 0x2216 <__vector_25+0x9e>
    21da:	0c c0       	rjmp	.+24     	; 0x21f4 <__vector_25+0x7c>
    21dc:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <rcvC0_write_index>
    21e0:	10 92 4b 21 	sts	0x214B, r1	; 0x80214b <rcvC0_write_index+0x1>
    21e4:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <rcvC0_read_index>
    21e8:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <rcvC0_read_index+0x1>
    21ec:	18 16       	cp	r1, r24
    21ee:	19 06       	cpc	r1, r25
    21f0:	91 f4       	brne	.+36     	; 0x2216 <__vector_25+0x9e>
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <__vector_25+0x98>
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	84 36       	cpi	r24, 0x64	; 100
    21f8:	91 05       	cpc	r25, r1
    21fa:	28 f4       	brcc	.+10     	; 0x2206 <__vector_25+0x8e>
    21fc:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <rcvC0_read_index>
    2200:	90 93 4d 21 	sts	0x214D, r25	; 0x80214d <rcvC0_read_index+0x1>
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <__vector_25+0x9e>
    2206:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <rcvC0_read_index>
    220a:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <rcvC0_read_index+0x1>
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <__vector_25+0x9e>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	f3 cf       	rjmp	.-26     	; 0x21fc <__vector_25+0x84>
    2216:	ff 91       	pop	r31
    2218:	ef 91       	pop	r30
    221a:	9f 91       	pop	r25
    221c:	8f 91       	pop	r24
    221e:	3f 91       	pop	r19
    2220:	2f 91       	pop	r18
    2222:	0f 90       	pop	r0
    2224:	0b be       	out	0x3b, r0	; 59
    2226:	0f 90       	pop	r0
    2228:	08 be       	out	0x38, r0	; 56
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	0f 90       	pop	r0
    2230:	1f 90       	pop	r1
    2232:	18 95       	reti

00002234 <_ZN8emstreamlsEh>:
    2234:	cf 92       	push	r12
    2236:	df 92       	push	r13
    2238:	ef 92       	push	r14
    223a:	ff 92       	push	r15
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	29 97       	sbiw	r28, 0x09	; 9
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	8c 01       	movw	r16, r24
    2250:	e6 2e       	mov	r14, r22
    2252:	dc 01       	movw	r26, r24
    2254:	13 96       	adiw	r26, 0x03	; 3
    2256:	8c 91       	ld	r24, X
    2258:	13 97       	sbiw	r26, 0x03	; 3
    225a:	88 23       	and	r24, r24
    225c:	41 f0       	breq	.+16     	; 0x226e <_ZN8emstreamlsEh+0x3a>
    225e:	ed 91       	ld	r30, X+
    2260:	fc 91       	ld	r31, X
    2262:	02 80       	ldd	r0, Z+2	; 0x02
    2264:	f3 81       	ldd	r31, Z+3	; 0x03
    2266:	e0 2d       	mov	r30, r0
    2268:	c8 01       	movw	r24, r16
    226a:	19 95       	eicall
    226c:	56 c0       	rjmp	.+172    	; 0x231a <_ZN8emstreamlsEh+0xe6>
    226e:	f8 01       	movw	r30, r16
    2270:	42 81       	ldd	r20, Z+2	; 0x02
    2272:	42 30       	cpi	r20, 0x02	; 2
    2274:	19 f5       	brne	.+70     	; 0x22bc <_ZN8emstreamlsEh+0x88>
    2276:	68 94       	set
    2278:	cc 24       	eor	r12, r12
    227a:	c3 f8       	bld	r12, 3
    227c:	d1 2c       	mov	r13, r1
    227e:	68 94       	set
    2280:	ff 24       	eor	r15, r15
    2282:	f7 f8       	bld	r15, 7
    2284:	8e 2d       	mov	r24, r14
    2286:	8f 21       	and	r24, r15
    2288:	51 f0       	breq	.+20     	; 0x229e <_ZN8emstreamlsEh+0x6a>
    228a:	d8 01       	movw	r26, r16
    228c:	ed 91       	ld	r30, X+
    228e:	fc 91       	ld	r31, X
    2290:	02 80       	ldd	r0, Z+2	; 0x02
    2292:	f3 81       	ldd	r31, Z+3	; 0x03
    2294:	e0 2d       	mov	r30, r0
    2296:	61 e3       	ldi	r22, 0x31	; 49
    2298:	c8 01       	movw	r24, r16
    229a:	19 95       	eicall
    229c:	09 c0       	rjmp	.+18     	; 0x22b0 <_ZN8emstreamlsEh+0x7c>
    229e:	d8 01       	movw	r26, r16
    22a0:	ed 91       	ld	r30, X+
    22a2:	fc 91       	ld	r31, X
    22a4:	02 80       	ldd	r0, Z+2	; 0x02
    22a6:	f3 81       	ldd	r31, Z+3	; 0x03
    22a8:	e0 2d       	mov	r30, r0
    22aa:	60 e3       	ldi	r22, 0x30	; 48
    22ac:	c8 01       	movw	r24, r16
    22ae:	19 95       	eicall
    22b0:	f6 94       	lsr	r15
    22b2:	b1 e0       	ldi	r27, 0x01	; 1
    22b4:	cb 1a       	sub	r12, r27
    22b6:	d1 08       	sbc	r13, r1
    22b8:	29 f7       	brne	.-54     	; 0x2284 <_ZN8emstreamlsEh+0x50>
    22ba:	2f c0       	rjmp	.+94     	; 0x231a <_ZN8emstreamlsEh+0xe6>
    22bc:	40 31       	cpi	r20, 0x10	; 16
    22be:	f9 f4       	brne	.+62     	; 0x22fe <_ZN8emstreamlsEh+0xca>
    22c0:	62 95       	swap	r22
    22c2:	6f 70       	andi	r22, 0x0F	; 15
    22c4:	01 90       	ld	r0, Z+
    22c6:	f0 81       	ld	r31, Z
    22c8:	e0 2d       	mov	r30, r0
    22ca:	02 80       	ldd	r0, Z+2	; 0x02
    22cc:	f3 81       	ldd	r31, Z+3	; 0x03
    22ce:	e0 2d       	mov	r30, r0
    22d0:	6a 30       	cpi	r22, 0x0A	; 10
    22d2:	10 f0       	brcs	.+4      	; 0x22d8 <_ZN8emstreamlsEh+0xa4>
    22d4:	69 5c       	subi	r22, 0xC9	; 201
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <_ZN8emstreamlsEh+0xa6>
    22d8:	60 5d       	subi	r22, 0xD0	; 208
    22da:	c8 01       	movw	r24, r16
    22dc:	19 95       	eicall
    22de:	6e 2d       	mov	r22, r14
    22e0:	6f 70       	andi	r22, 0x0F	; 15
    22e2:	d8 01       	movw	r26, r16
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	02 80       	ldd	r0, Z+2	; 0x02
    22ea:	f3 81       	ldd	r31, Z+3	; 0x03
    22ec:	e0 2d       	mov	r30, r0
    22ee:	6a 30       	cpi	r22, 0x0A	; 10
    22f0:	10 f0       	brcs	.+4      	; 0x22f6 <_ZN8emstreamlsEh+0xc2>
    22f2:	69 5c       	subi	r22, 0xC9	; 201
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <_ZN8emstreamlsEh+0xc4>
    22f6:	60 5d       	subi	r22, 0xD0	; 208
    22f8:	c8 01       	movw	r24, r16
    22fa:	19 95       	eicall
    22fc:	0e c0       	rjmp	.+28     	; 0x231a <_ZN8emstreamlsEh+0xe6>
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	be 01       	movw	r22, r28
    2302:	6f 5f       	subi	r22, 0xFF	; 255
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	8e 2d       	mov	r24, r14
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <utoa>
    230e:	be 01       	movw	r22, r28
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	c8 01       	movw	r24, r16
    2316:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN8emstream4putsEPKc>
    231a:	c8 01       	movw	r24, r16
    231c:	29 96       	adiw	r28, 0x09	; 9
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

00002334 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    233e:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    2342:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <xHeapHasBeenInitialised.4150>
    2346:	81 11       	cpse	r24, r1
    2348:	1d c0       	rjmp	.+58     	; 0x2384 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    234a:	a5 e5       	ldi	r26, 0x55	; 85
    234c:	b1 e2       	ldi	r27, 0x21	; 33
    234e:	e9 e5       	ldi	r30, 0x59	; 89
    2350:	f1 e2       	ldi	r31, 0x21	; 33
    2352:	ed 93       	st	X+, r30
    2354:	fc 93       	st	X, r31
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	12 96       	adiw	r26, 0x02	; 2
    235a:	1d 92       	st	X+, r1
    235c:	1c 92       	st	X, r1
    235e:	13 97       	sbiw	r26, 0x03	; 3
    2360:	a1 e5       	ldi	r26, 0x51	; 81
    2362:	b1 e2       	ldi	r27, 0x21	; 33
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	9f e0       	ldi	r25, 0x0F	; 15
    2368:	12 96       	adiw	r26, 0x02	; 2
    236a:	8d 93       	st	X+, r24
    236c:	9c 93       	st	X, r25
    236e:	13 97       	sbiw	r26, 0x03	; 3
    2370:	1d 92       	st	X+, r1
    2372:	1c 92       	st	X, r1
    2374:	11 97       	sbiw	r26, 0x01	; 1
    2376:	82 83       	std	Z+2, r24	; 0x02
    2378:	93 83       	std	Z+3, r25	; 0x03
    237a:	a0 83       	st	Z, r26
    237c:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    2384:	20 97       	sbiw	r28, 0x00	; 0
    2386:	09 f4       	brne	.+2      	; 0x238a <pvPortMalloc+0x56>
    2388:	5f c0       	rjmp	.+190    	; 0x2448 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    238a:	9e 01       	movw	r18, r28
    238c:	2b 5f       	subi	r18, 0xFB	; 251
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    2390:	24 96       	adiw	r28, 0x04	; 4
    2392:	ce 3f       	cpi	r28, 0xFE	; 254
    2394:	df 40       	sbci	r29, 0x0F	; 15
    2396:	08 f0       	brcs	.+2      	; 0x239a <pvPortMalloc+0x66>
    2398:	5a c0       	rjmp	.+180    	; 0x244e <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    239a:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <xStart>
    239e:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    23a2:	a5 e5       	ldi	r26, 0x55	; 85
    23a4:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <pvPortMalloc+0x78>
    23a8:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    23aa:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	82 17       	cp	r24, r18
    23b2:	93 07       	cpc	r25, r19
    23b4:	20 f4       	brcc	.+8      	; 0x23be <pvPortMalloc+0x8a>
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	a9 f7       	brne	.-22     	; 0x23a8 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    23be:	c1 e2       	ldi	r28, 0x21	; 33
    23c0:	e1 35       	cpi	r30, 0x51	; 81
    23c2:	fc 07       	cpc	r31, r28
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <pvPortMalloc+0x94>
    23c6:	46 c0       	rjmp	.+140    	; 0x2454 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    23c8:	cd 91       	ld	r28, X+
    23ca:	dc 91       	ld	r29, X
    23cc:	11 97       	sbiw	r26, 0x01	; 1
    23ce:	8e 01       	movw	r16, r28
    23d0:	0b 5f       	subi	r16, 0xFB	; 251
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	8d 93       	st	X+, r24
    23da:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	82 1b       	sub	r24, r18
    23e2:	93 0b       	sbc	r25, r19
    23e4:	8b 30       	cpi	r24, 0x0B	; 11
    23e6:	91 05       	cpc	r25, r1
    23e8:	10 f1       	brcs	.+68     	; 0x242e <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    23ea:	bf 01       	movw	r22, r30
    23ec:	62 0f       	add	r22, r18
    23ee:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    23f0:	db 01       	movw	r26, r22
    23f2:	12 96       	adiw	r26, 0x02	; 2
    23f4:	8d 93       	st	X+, r24
    23f6:	9c 93       	st	X, r25
    23f8:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    23fa:	22 83       	std	Z+2, r18	; 0x02
    23fc:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    23fe:	12 96       	adiw	r26, 0x02	; 2
    2400:	4d 91       	ld	r20, X+
    2402:	5c 91       	ld	r21, X
    2404:	13 97       	sbiw	r26, 0x03	; 3
    2406:	85 e5       	ldi	r24, 0x55	; 85
    2408:	91 e2       	ldi	r25, 0x21	; 33
    240a:	01 c0       	rjmp	.+2      	; 0x240e <pvPortMalloc+0xda>
    240c:	cd 01       	movw	r24, r26
    240e:	ec 01       	movw	r28, r24
    2410:	a8 81       	ld	r26, Y
    2412:	b9 81       	ldd	r27, Y+1	; 0x01
    2414:	12 96       	adiw	r26, 0x02	; 2
    2416:	2d 91       	ld	r18, X+
    2418:	3c 91       	ld	r19, X
    241a:	13 97       	sbiw	r26, 0x03	; 3
    241c:	24 17       	cp	r18, r20
    241e:	35 07       	cpc	r19, r21
    2420:	a8 f3       	brcs	.-22     	; 0x240c <pvPortMalloc+0xd8>
    2422:	eb 01       	movw	r28, r22
    2424:	a8 83       	st	Y, r26
    2426:	b9 83       	std	Y+1, r27	; 0x01
    2428:	dc 01       	movw	r26, r24
    242a:	6d 93       	st	X+, r22
    242c:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    242e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2432:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2436:	22 81       	ldd	r18, Z+2	; 0x02
    2438:	33 81       	ldd	r19, Z+3	; 0x03
    243a:	82 1b       	sub	r24, r18
    243c:	93 0b       	sbc	r25, r19
    243e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2442:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2446:	08 c0       	rjmp	.+16     	; 0x2458 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2448:	00 e0       	ldi	r16, 0x00	; 0
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <pvPortMalloc+0x124>
    244e:	00 e0       	ldi	r16, 0x00	; 0
    2450:	10 e0       	ldi	r17, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <pvPortMalloc+0x124>
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2458:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    245c:	c8 01       	movw	r24, r16
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	41 f1       	breq	.+80     	; 0x24c4 <vPortFree+0x5c>
    2474:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2476:	8c 01       	movw	r16, r24
    2478:	05 50       	subi	r16, 0x05	; 5
    247a:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    247c:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    2480:	f8 01       	movw	r30, r16
    2482:	42 81       	ldd	r20, Z+2	; 0x02
    2484:	53 81       	ldd	r21, Z+3	; 0x03
    2486:	a5 e5       	ldi	r26, 0x55	; 85
    2488:	b1 e2       	ldi	r27, 0x21	; 33
    248a:	01 c0       	rjmp	.+2      	; 0x248e <vPortFree+0x26>
    248c:	df 01       	movw	r26, r30
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	22 81       	ldd	r18, Z+2	; 0x02
    2496:	33 81       	ldd	r19, Z+3	; 0x03
    2498:	24 17       	cp	r18, r20
    249a:	35 07       	cpc	r19, r21
    249c:	b8 f3       	brcs	.-18     	; 0x248c <vPortFree+0x24>
    249e:	25 97       	sbiw	r28, 0x05	; 5
    24a0:	e8 83       	st	Y, r30
    24a2:	f9 83       	std	Y+1, r31	; 0x01
    24a4:	0d 93       	st	X+, r16
    24a6:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    24a8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    24ac:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	9b 81       	ldd	r25, Y+3	; 0x03
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    24bc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    24c0:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
	}
}
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret

000024ce <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    24ce:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    24d2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    24d6:	08 95       	ret

000024d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    24d8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    24da:	03 96       	adiw	r24, 0x03	; 3
    24dc:	81 83       	std	Z+1, r24	; 0x01
    24de:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    24e0:	4f ef       	ldi	r20, 0xFF	; 255
    24e2:	5f ef       	ldi	r21, 0xFF	; 255
    24e4:	ba 01       	movw	r22, r20
    24e6:	43 83       	std	Z+3, r20	; 0x03
    24e8:	54 83       	std	Z+4, r21	; 0x04
    24ea:	65 83       	std	Z+5, r22	; 0x05
    24ec:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    24ee:	87 83       	std	Z+7, r24	; 0x07
    24f0:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    24f2:	81 87       	std	Z+9, r24	; 0x09
    24f4:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    24f6:	10 82       	st	Z, r1
    24f8:	08 95       	ret

000024fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    24fa:	fc 01       	movw	r30, r24
    24fc:	12 86       	std	Z+10, r1	; 0x0a
    24fe:	13 86       	std	Z+11, r1	; 0x0b
    2500:	08 95       	ret

00002502 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	fc 01       	movw	r30, r24
    2508:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    250a:	21 81       	ldd	r18, Z+1	; 0x01
    250c:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    250e:	e9 01       	movw	r28, r18
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	14 96       	adiw	r26, 0x04	; 4
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    251c:	81 81       	ldd	r24, Z+1	; 0x01
    251e:	92 81       	ldd	r25, Z+2	; 0x02
    2520:	16 96       	adiw	r26, 0x06	; 6
    2522:	8d 93       	st	X+, r24
    2524:	9c 93       	st	X, r25
    2526:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	9d 81       	ldd	r25, Y+5	; 0x05
    252c:	ec 01       	movw	r28, r24
    252e:	6e 83       	std	Y+6, r22	; 0x06
    2530:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2532:	e9 01       	movw	r28, r18
    2534:	6c 83       	std	Y+4, r22	; 0x04
    2536:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2538:	61 83       	std	Z+1, r22	; 0x01
    253a:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    253c:	1a 96       	adiw	r26, 0x0a	; 10
    253e:	ed 93       	st	X+, r30
    2540:	fc 93       	st	X, r31
    2542:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2544:	80 81       	ld	r24, Z
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	80 83       	st	Z, r24
}
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	08 95       	ret

00002550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    255a:	08 81       	ld	r16, Y
    255c:	19 81       	ldd	r17, Y+1	; 0x01
    255e:	2a 81       	ldd	r18, Y+2	; 0x02
    2560:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2562:	0f 3f       	cpi	r16, 0xFF	; 255
    2564:	4f ef       	ldi	r20, 0xFF	; 255
    2566:	14 07       	cpc	r17, r20
    2568:	24 07       	cpc	r18, r20
    256a:	34 07       	cpc	r19, r20
    256c:	31 f4       	brne	.+12     	; 0x257a <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    256e:	dc 01       	movw	r26, r24
    2570:	19 96       	adiw	r26, 0x09	; 9
    2572:	ed 91       	ld	r30, X+
    2574:	fc 91       	ld	r31, X
    2576:	1a 97       	sbiw	r26, 0x0a	; 10
    2578:	1f c0       	rjmp	.+62     	; 0x25b8 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    257a:	fc 01       	movw	r30, r24
    257c:	33 96       	adiw	r30, 0x03	; 3
    257e:	dc 01       	movw	r26, r24
    2580:	17 96       	adiw	r26, 0x07	; 7
    2582:	4d 91       	ld	r20, X+
    2584:	5c 91       	ld	r21, X
    2586:	18 97       	sbiw	r26, 0x08	; 8
    2588:	da 01       	movw	r26, r20
    258a:	4d 91       	ld	r20, X+
    258c:	5d 91       	ld	r21, X+
    258e:	6d 91       	ld	r22, X+
    2590:	7c 91       	ld	r23, X
    2592:	04 17       	cp	r16, r20
    2594:	15 07       	cpc	r17, r21
    2596:	26 07       	cpc	r18, r22
    2598:	37 07       	cpc	r19, r23
    259a:	70 f0       	brcs	.+28     	; 0x25b8 <vListInsert+0x68>
    259c:	04 80       	ldd	r0, Z+4	; 0x04
    259e:	f5 81       	ldd	r31, Z+5	; 0x05
    25a0:	e0 2d       	mov	r30, r0
    25a2:	a4 81       	ldd	r26, Z+4	; 0x04
    25a4:	b5 81       	ldd	r27, Z+5	; 0x05
    25a6:	4d 91       	ld	r20, X+
    25a8:	5d 91       	ld	r21, X+
    25aa:	6d 91       	ld	r22, X+
    25ac:	7c 91       	ld	r23, X
    25ae:	04 17       	cp	r16, r20
    25b0:	15 07       	cpc	r17, r21
    25b2:	26 07       	cpc	r18, r22
    25b4:	37 07       	cpc	r19, r23
    25b6:	90 f7       	brcc	.-28     	; 0x259c <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    25b8:	a4 81       	ldd	r26, Z+4	; 0x04
    25ba:	b5 81       	ldd	r27, Z+5	; 0x05
    25bc:	ac 83       	std	Y+4, r26	; 0x04
    25be:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    25c0:	16 96       	adiw	r26, 0x06	; 6
    25c2:	cd 93       	st	X+, r28
    25c4:	dc 93       	st	X, r29
    25c6:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    25c8:	ee 83       	std	Y+6, r30	; 0x06
    25ca:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    25cc:	c4 83       	std	Z+4, r28	; 0x04
    25ce:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    25d0:	8a 87       	std	Y+10, r24	; 0x0a
    25d2:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    25d4:	fc 01       	movw	r30, r24
    25d6:	20 81       	ld	r18, Z
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	20 83       	st	Z, r18
}
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    25e6:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    25e8:	a4 81       	ldd	r26, Z+4	; 0x04
    25ea:	b5 81       	ldd	r27, Z+5	; 0x05
    25ec:	86 81       	ldd	r24, Z+6	; 0x06
    25ee:	97 81       	ldd	r25, Z+7	; 0x07
    25f0:	16 96       	adiw	r26, 0x06	; 6
    25f2:	8d 93       	st	X+, r24
    25f4:	9c 93       	st	X, r25
    25f6:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    25f8:	a6 81       	ldd	r26, Z+6	; 0x06
    25fa:	b7 81       	ldd	r27, Z+7	; 0x07
    25fc:	84 81       	ldd	r24, Z+4	; 0x04
    25fe:	95 81       	ldd	r25, Z+5	; 0x05
    2600:	14 96       	adiw	r26, 0x04	; 4
    2602:	8d 93       	st	X+, r24
    2604:	9c 93       	st	X, r25
    2606:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2608:	a2 85       	ldd	r26, Z+10	; 0x0a
    260a:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	8d 91       	ld	r24, X+
    2610:	9c 91       	ld	r25, X
    2612:	12 97       	sbiw	r26, 0x02	; 2
    2614:	e8 17       	cp	r30, r24
    2616:	f9 07       	cpc	r31, r25
    2618:	31 f4       	brne	.+12     	; 0x2626 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    261a:	86 81       	ldd	r24, Z+6	; 0x06
    261c:	97 81       	ldd	r25, Z+7	; 0x07
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	8d 93       	st	X+, r24
    2622:	9c 93       	st	X, r25
    2624:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2626:	12 86       	std	Z+10, r1	; 0x0a
    2628:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    262a:	8c 91       	ld	r24, X
    262c:	81 50       	subi	r24, 0x01	; 1
    262e:	8c 93       	st	X, r24
    2630:	08 95       	ret

00002632 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2632:	80 93 ba 31 	sts	0x31BA, r24	; 0x8031ba <portStackTopForTask>
    2636:	90 93 bb 31 	sts	0x31BB, r25	; 0x8031bb <portStackTopForTask+0x1>
    263a:	31 e1       	ldi	r19, 0x11	; 17
    263c:	fc 01       	movw	r30, r24
    263e:	30 83       	st	Z, r19
    2640:	31 97       	sbiw	r30, 0x01	; 1
    2642:	22 e2       	ldi	r18, 0x22	; 34
    2644:	20 83       	st	Z, r18
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	a3 e3       	ldi	r26, 0x33	; 51
    264a:	a0 83       	st	Z, r26
    264c:	31 97       	sbiw	r30, 0x01	; 1
    264e:	60 83       	st	Z, r22
    2650:	31 97       	sbiw	r30, 0x01	; 1
    2652:	70 83       	st	Z, r23
    2654:	31 97       	sbiw	r30, 0x01	; 1
    2656:	10 82       	st	Z, r1
    2658:	31 97       	sbiw	r30, 0x01	; 1
    265a:	10 82       	st	Z, r1
    265c:	31 97       	sbiw	r30, 0x01	; 1
    265e:	60 e8       	ldi	r22, 0x80	; 128
    2660:	60 83       	st	Z, r22
    2662:	31 97       	sbiw	r30, 0x01	; 1
    2664:	10 82       	st	Z, r1
    2666:	31 97       	sbiw	r30, 0x01	; 1
    2668:	10 82       	st	Z, r1
    266a:	31 97       	sbiw	r30, 0x01	; 1
    266c:	10 82       	st	Z, r1
    266e:	31 97       	sbiw	r30, 0x01	; 1
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	60 83       	st	Z, r22
    2674:	31 97       	sbiw	r30, 0x01	; 1
    2676:	63 e0       	ldi	r22, 0x03	; 3
    2678:	60 83       	st	Z, r22
    267a:	31 97       	sbiw	r30, 0x01	; 1
    267c:	64 e0       	ldi	r22, 0x04	; 4
    267e:	60 83       	st	Z, r22
    2680:	31 97       	sbiw	r30, 0x01	; 1
    2682:	65 e0       	ldi	r22, 0x05	; 5
    2684:	60 83       	st	Z, r22
    2686:	31 97       	sbiw	r30, 0x01	; 1
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	60 83       	st	Z, r22
    268c:	31 97       	sbiw	r30, 0x01	; 1
    268e:	67 e0       	ldi	r22, 0x07	; 7
    2690:	60 83       	st	Z, r22
    2692:	31 97       	sbiw	r30, 0x01	; 1
    2694:	68 e0       	ldi	r22, 0x08	; 8
    2696:	60 83       	st	Z, r22
    2698:	31 97       	sbiw	r30, 0x01	; 1
    269a:	69 e0       	ldi	r22, 0x09	; 9
    269c:	60 83       	st	Z, r22
    269e:	31 97       	sbiw	r30, 0x01	; 1
    26a0:	60 e1       	ldi	r22, 0x10	; 16
    26a2:	60 83       	st	Z, r22
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	30 83       	st	Z, r19
    26a8:	31 97       	sbiw	r30, 0x01	; 1
    26aa:	32 e1       	ldi	r19, 0x12	; 18
    26ac:	30 83       	st	Z, r19
    26ae:	31 97       	sbiw	r30, 0x01	; 1
    26b0:	33 e1       	ldi	r19, 0x13	; 19
    26b2:	30 83       	st	Z, r19
    26b4:	31 97       	sbiw	r30, 0x01	; 1
    26b6:	34 e1       	ldi	r19, 0x14	; 20
    26b8:	30 83       	st	Z, r19
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	35 e1       	ldi	r19, 0x15	; 21
    26be:	30 83       	st	Z, r19
    26c0:	31 97       	sbiw	r30, 0x01	; 1
    26c2:	36 e1       	ldi	r19, 0x16	; 22
    26c4:	30 83       	st	Z, r19
    26c6:	31 97       	sbiw	r30, 0x01	; 1
    26c8:	37 e1       	ldi	r19, 0x17	; 23
    26ca:	30 83       	st	Z, r19
    26cc:	31 97       	sbiw	r30, 0x01	; 1
    26ce:	38 e1       	ldi	r19, 0x18	; 24
    26d0:	30 83       	st	Z, r19
    26d2:	31 97       	sbiw	r30, 0x01	; 1
    26d4:	39 e1       	ldi	r19, 0x19	; 25
    26d6:	30 83       	st	Z, r19
    26d8:	31 97       	sbiw	r30, 0x01	; 1
    26da:	30 e2       	ldi	r19, 0x20	; 32
    26dc:	30 83       	st	Z, r19
    26de:	31 97       	sbiw	r30, 0x01	; 1
    26e0:	31 e2       	ldi	r19, 0x21	; 33
    26e2:	30 83       	st	Z, r19
    26e4:	31 97       	sbiw	r30, 0x01	; 1
    26e6:	20 83       	st	Z, r18
    26e8:	31 97       	sbiw	r30, 0x01	; 1
    26ea:	23 e2       	ldi	r18, 0x23	; 35
    26ec:	20 83       	st	Z, r18
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	40 83       	st	Z, r20
    26f2:	31 97       	sbiw	r30, 0x01	; 1
    26f4:	50 83       	st	Z, r21
    26f6:	31 97       	sbiw	r30, 0x01	; 1
    26f8:	26 e2       	ldi	r18, 0x26	; 38
    26fa:	20 83       	st	Z, r18
    26fc:	31 97       	sbiw	r30, 0x01	; 1
    26fe:	27 e2       	ldi	r18, 0x27	; 39
    2700:	20 83       	st	Z, r18
    2702:	31 97       	sbiw	r30, 0x01	; 1
    2704:	28 e2       	ldi	r18, 0x28	; 40
    2706:	20 83       	st	Z, r18
    2708:	31 97       	sbiw	r30, 0x01	; 1
    270a:	29 e2       	ldi	r18, 0x29	; 41
    270c:	20 83       	st	Z, r18
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	20 e3       	ldi	r18, 0x30	; 48
    2712:	20 83       	st	Z, r18
    2714:	31 97       	sbiw	r30, 0x01	; 1
    2716:	21 e3       	ldi	r18, 0x31	; 49
    2718:	20 83       	st	Z, r18
    271a:	89 97       	sbiw	r24, 0x29	; 41
    271c:	08 95       	ret

0000271e <xPortStartScheduler>:
    271e:	8c e7       	ldi	r24, 0x7C	; 124
    2720:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2730:	91 e1       	ldi	r25, 0x11	; 17
    2732:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2736:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    273a:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    273e:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    2742:	cd 91       	ld	r28, X+
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	dd 91       	ld	r29, X+
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	ff 91       	pop	r31
    274c:	ef 91       	pop	r30
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	7f 91       	pop	r23
    275c:	6f 91       	pop	r22
    275e:	5f 91       	pop	r21
    2760:	4f 91       	pop	r20
    2762:	3f 91       	pop	r19
    2764:	2f 91       	pop	r18
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	bf 90       	pop	r11
    2774:	af 90       	pop	r10
    2776:	9f 90       	pop	r9
    2778:	8f 90       	pop	r8
    277a:	7f 90       	pop	r7
    277c:	6f 90       	pop	r6
    277e:	5f 90       	pop	r5
    2780:	4f 90       	pop	r4
    2782:	3f 90       	pop	r3
    2784:	2f 90       	pop	r2
    2786:	1f 90       	pop	r1
    2788:	0f 90       	pop	r0
    278a:	0c be       	out	0x3c, r0	; 60
    278c:	0f 90       	pop	r0
    278e:	0b be       	out	0x3b, r0	; 59
    2790:	0f 90       	pop	r0
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	0f 90       	pop	r0
    2796:	08 95       	ret
    2798:	08 95       	ret

0000279a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    279a:	0f 92       	push	r0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	0f 92       	push	r0
    27a2:	0b b6       	in	r0, 0x3b	; 59
    27a4:	0f 92       	push	r0
    27a6:	0c b6       	in	r0, 0x3c	; 60
    27a8:	0f 92       	push	r0
    27aa:	1f 92       	push	r1
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	2f 93       	push	r18
    27d0:	3f 93       	push	r19
    27d2:	4f 93       	push	r20
    27d4:	5f 93       	push	r21
    27d6:	6f 93       	push	r22
    27d8:	7f 93       	push	r23
    27da:	8f 93       	push	r24
    27dc:	9f 93       	push	r25
    27de:	af 93       	push	r26
    27e0:	bf 93       	push	r27
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
    27ea:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    27ee:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    27f2:	0d b6       	in	r0, 0x3d	; 61
    27f4:	0d 92       	st	X+, r0
    27f6:	0e b6       	in	r0, 0x3e	; 62
    27f8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    27fa:	0e 94 49 1b 	call	0x3692	; 0x3692 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    27fe:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    2802:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    2806:	cd 91       	ld	r28, X+
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	dd 91       	ld	r29, X+
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	ff 91       	pop	r31
    2810:	ef 91       	pop	r30
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	bf 91       	pop	r27
    2818:	af 91       	pop	r26
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	7f 91       	pop	r23
    2820:	6f 91       	pop	r22
    2822:	5f 91       	pop	r21
    2824:	4f 91       	pop	r20
    2826:	3f 91       	pop	r19
    2828:	2f 91       	pop	r18
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	df 90       	pop	r13
    2834:	cf 90       	pop	r12
    2836:	bf 90       	pop	r11
    2838:	af 90       	pop	r10
    283a:	9f 90       	pop	r9
    283c:	8f 90       	pop	r8
    283e:	7f 90       	pop	r7
    2840:	6f 90       	pop	r6
    2842:	5f 90       	pop	r5
    2844:	4f 90       	pop	r4
    2846:	3f 90       	pop	r3
    2848:	2f 90       	pop	r2
    284a:	1f 90       	pop	r1
    284c:	0f 90       	pop	r0
    284e:	0c be       	out	0x3c, r0	; 60
    2850:	0f 90       	pop	r0
    2852:	0b be       	out	0x3b, r0	; 59
    2854:	0f 90       	pop	r0
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	0f 90       	pop	r0

	asm volatile ( "ret" );
    285a:	08 95       	ret

0000285c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	0f 92       	push	r0
    2864:	0b b6       	in	r0, 0x3b	; 59
    2866:	0f 92       	push	r0
    2868:	0c b6       	in	r0, 0x3c	; 60
    286a:	0f 92       	push	r0
    286c:	1f 92       	push	r1
    286e:	11 24       	eor	r1, r1
    2870:	2f 92       	push	r2
    2872:	3f 92       	push	r3
    2874:	4f 92       	push	r4
    2876:	5f 92       	push	r5
    2878:	6f 92       	push	r6
    287a:	7f 92       	push	r7
    287c:	8f 92       	push	r8
    287e:	9f 92       	push	r9
    2880:	af 92       	push	r10
    2882:	bf 92       	push	r11
    2884:	cf 92       	push	r12
    2886:	df 92       	push	r13
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	ef 93       	push	r30
    28aa:	ff 93       	push	r31
    28ac:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    28b0:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    28b4:	0d b6       	in	r0, 0x3d	; 61
    28b6:	0d 92       	st	X+, r0
    28b8:	0e b6       	in	r0, 0x3e	; 62
    28ba:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    28bc:	0e 94 2b 19 	call	0x3256	; 0x3256 <vTaskIncrementTick>
	vTaskSwitchContext();
    28c0:	0e 94 49 1b 	call	0x3692	; 0x3692 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    28c4:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    28c8:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    28cc:	cd 91       	ld	r28, X+
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	dd 91       	ld	r29, X+
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	ff 91       	pop	r31
    28d6:	ef 91       	pop	r30
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	bf 91       	pop	r27
    28de:	af 91       	pop	r26
    28e0:	9f 91       	pop	r25
    28e2:	8f 91       	pop	r24
    28e4:	7f 91       	pop	r23
    28e6:	6f 91       	pop	r22
    28e8:	5f 91       	pop	r21
    28ea:	4f 91       	pop	r20
    28ec:	3f 91       	pop	r19
    28ee:	2f 91       	pop	r18
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	bf 90       	pop	r11
    28fe:	af 90       	pop	r10
    2900:	9f 90       	pop	r9
    2902:	8f 90       	pop	r8
    2904:	7f 90       	pop	r7
    2906:	6f 90       	pop	r6
    2908:	5f 90       	pop	r5
    290a:	4f 90       	pop	r4
    290c:	3f 90       	pop	r3
    290e:	2f 90       	pop	r2
    2910:	1f 90       	pop	r1
    2912:	0f 90       	pop	r0
    2914:	0c be       	out	0x3c, r0	; 60
    2916:	0f 90       	pop	r0
    2918:	0b be       	out	0x3b, r0	; 59
    291a:	0f 90       	pop	r0
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2920:	08 95       	ret

00002922 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2922:	0e 94 2e 14 	call	0x285c	; 0x285c <vPortYieldFromTick>
		asm volatile ( "reti" );
    2926:	18 95       	reti

00002928 <prvCopyDataToQueue>:
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	ec 01       	movw	r28, r24
    292e:	88 a1       	ldd	r24, Y+32	; 0x20
    2930:	81 11       	cpse	r24, r1
    2932:	0b c0       	rjmp	.+22     	; 0x294a <prvCopyDataToQueue+0x22>
    2934:	88 81       	ld	r24, Y
    2936:	99 81       	ldd	r25, Y+1	; 0x01
    2938:	89 2b       	or	r24, r25
    293a:	e1 f5       	brne	.+120    	; 0x29b4 <prvCopyDataToQueue+0x8c>
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <vTaskPriorityDisinherit>
    2944:	1a 82       	std	Y+2, r1	; 0x02
    2946:	1b 82       	std	Y+3, r1	; 0x03
    2948:	35 c0       	rjmp	.+106    	; 0x29b4 <prvCopyDataToQueue+0x8c>
    294a:	41 11       	cpse	r20, r1
    294c:	17 c0       	rjmp	.+46     	; 0x297c <prvCopyDataToQueue+0x54>
    294e:	48 2f       	mov	r20, r24
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <memcpy>
    295a:	28 a1       	ldd	r18, Y+32	; 0x20
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	9d 81       	ldd	r25, Y+5	; 0x05
    2960:	82 0f       	add	r24, r18
    2962:	91 1d       	adc	r25, r1
    2964:	8c 83       	std	Y+4, r24	; 0x04
    2966:	9d 83       	std	Y+5, r25	; 0x05
    2968:	2a 81       	ldd	r18, Y+2	; 0x02
    296a:	3b 81       	ldd	r19, Y+3	; 0x03
    296c:	82 17       	cp	r24, r18
    296e:	93 07       	cpc	r25, r19
    2970:	08 f1       	brcs	.+66     	; 0x29b4 <prvCopyDataToQueue+0x8c>
    2972:	88 81       	ld	r24, Y
    2974:	99 81       	ldd	r25, Y+1	; 0x01
    2976:	8c 83       	std	Y+4, r24	; 0x04
    2978:	9d 83       	std	Y+5, r25	; 0x05
    297a:	1c c0       	rjmp	.+56     	; 0x29b4 <prvCopyDataToQueue+0x8c>
    297c:	48 2f       	mov	r20, r24
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <memcpy>
    2988:	88 a1       	ldd	r24, Y+32	; 0x20
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	91 95       	neg	r25
    298e:	81 95       	neg	r24
    2990:	91 09       	sbc	r25, r1
    2992:	2e 81       	ldd	r18, Y+6	; 0x06
    2994:	3f 81       	ldd	r19, Y+7	; 0x07
    2996:	28 0f       	add	r18, r24
    2998:	39 1f       	adc	r19, r25
    299a:	2e 83       	std	Y+6, r18	; 0x06
    299c:	3f 83       	std	Y+7, r19	; 0x07
    299e:	48 81       	ld	r20, Y
    29a0:	59 81       	ldd	r21, Y+1	; 0x01
    29a2:	24 17       	cp	r18, r20
    29a4:	35 07       	cpc	r19, r21
    29a6:	30 f4       	brcc	.+12     	; 0x29b4 <prvCopyDataToQueue+0x8c>
    29a8:	2a 81       	ldd	r18, Y+2	; 0x02
    29aa:	3b 81       	ldd	r19, Y+3	; 0x03
    29ac:	82 0f       	add	r24, r18
    29ae:	93 1f       	adc	r25, r19
    29b0:	8e 83       	std	Y+6, r24	; 0x06
    29b2:	9f 83       	std	Y+7, r25	; 0x07
    29b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	8e 8f       	std	Y+30, r24	; 0x1e
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <prvCopyDataFromQueue>:
    29c0:	fc 01       	movw	r30, r24
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	a1 f0       	breq	.+40     	; 0x29f2 <prvCopyDataFromQueue+0x32>
    29ca:	40 a1       	ldd	r20, Z+32	; 0x20
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	26 81       	ldd	r18, Z+6	; 0x06
    29d0:	37 81       	ldd	r19, Z+7	; 0x07
    29d2:	24 0f       	add	r18, r20
    29d4:	35 1f       	adc	r19, r21
    29d6:	26 83       	std	Z+6, r18	; 0x06
    29d8:	37 83       	std	Z+7, r19	; 0x07
    29da:	a2 81       	ldd	r26, Z+2	; 0x02
    29dc:	b3 81       	ldd	r27, Z+3	; 0x03
    29de:	2a 17       	cp	r18, r26
    29e0:	3b 07       	cpc	r19, r27
    29e2:	10 f0       	brcs	.+4      	; 0x29e8 <prvCopyDataFromQueue+0x28>
    29e4:	86 83       	std	Z+6, r24	; 0x06
    29e6:	97 83       	std	Z+7, r25	; 0x07
    29e8:	cb 01       	movw	r24, r22
    29ea:	66 81       	ldd	r22, Z+6	; 0x06
    29ec:	77 81       	ldd	r23, Z+7	; 0x07
    29ee:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <memcpy>
    29f2:	08 95       	ret

000029f4 <prvUnlockQueue>:
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	ec 01       	movw	r28, r24
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	0f 92       	push	r0
    2a04:	8a a1       	ldd	r24, Y+34	; 0x22
    2a06:	18 16       	cp	r1, r24
    2a08:	b4 f4       	brge	.+44     	; 0x2a36 <prvUnlockQueue+0x42>
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	81 11       	cpse	r24, r1
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <prvUnlockQueue+0x26>
    2a10:	12 c0       	rjmp	.+36     	; 0x2a36 <prvUnlockQueue+0x42>
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	81 11       	cpse	r24, r1
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <prvUnlockQueue+0x2c>
    2a18:	0e c0       	rjmp	.+28     	; 0x2a36 <prvUnlockQueue+0x42>
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	0d 5e       	subi	r16, 0xED	; 237
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	c8 01       	movw	r24, r16
    2a22:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2a26:	81 11       	cpse	r24, r1
    2a28:	0e 94 8d 1c 	call	0x391a	; 0x391a <vTaskMissedYield>
    2a2c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a2e:	81 50       	subi	r24, 0x01	; 1
    2a30:	8a a3       	std	Y+34, r24	; 0x22
    2a32:	18 16       	cp	r1, r24
    2a34:	74 f3       	brlt	.-36     	; 0x2a12 <prvUnlockQueue+0x1e>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	8a a3       	std	Y+34, r24	; 0x22
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	0f 92       	push	r0
    2a44:	89 a1       	ldd	r24, Y+33	; 0x21
    2a46:	18 16       	cp	r1, r24
    2a48:	b4 f4       	brge	.+44     	; 0x2a76 <prvUnlockQueue+0x82>
    2a4a:	88 85       	ldd	r24, Y+8	; 0x08
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <prvUnlockQueue+0x66>
    2a50:	12 c0       	rjmp	.+36     	; 0x2a76 <prvUnlockQueue+0x82>
    2a52:	88 85       	ldd	r24, Y+8	; 0x08
    2a54:	81 11       	cpse	r24, r1
    2a56:	04 c0       	rjmp	.+8      	; 0x2a60 <prvUnlockQueue+0x6c>
    2a58:	0e c0       	rjmp	.+28     	; 0x2a76 <prvUnlockQueue+0x82>
    2a5a:	8e 01       	movw	r16, r28
    2a5c:	08 5f       	subi	r16, 0xF8	; 248
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	c8 01       	movw	r24, r16
    2a62:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2a66:	81 11       	cpse	r24, r1
    2a68:	0e 94 8d 1c 	call	0x391a	; 0x391a <vTaskMissedYield>
    2a6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6e:	81 50       	subi	r24, 0x01	; 1
    2a70:	89 a3       	std	Y+33, r24	; 0x21
    2a72:	18 16       	cp	r1, r24
    2a74:	74 f3       	brlt	.-36     	; 0x2a52 <prvUnlockQueue+0x5e>
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	89 a3       	std	Y+33, r24	; 0x21
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	08 95       	ret

00002a88 <xQueueGenericReset>:
    2a88:	1f 93       	push	r17
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	61 30       	cpi	r22, 0x01	; 1
    2a90:	59 f0       	breq	.+22     	; 0x2aa8 <xQueueGenericReset+0x20>
    2a92:	fc 01       	movw	r30, r24
    2a94:	23 89       	ldd	r18, Z+19	; 0x13
    2a96:	30 85       	ldd	r19, Z+8	; 0x08
    2a98:	31 11       	cpse	r19, r1
    2a9a:	2c c0       	rjmp	.+88     	; 0x2af4 <xQueueGenericReset+0x6c>
    2a9c:	11 e0       	ldi	r17, 0x01	; 1
    2a9e:	21 11       	cpse	r18, r1
    2aa0:	10 e0       	ldi	r17, 0x00	; 0
    2aa2:	21 11       	cpse	r18, r1
    2aa4:	28 c0       	rjmp	.+80     	; 0x2af6 <xQueueGenericReset+0x6e>
    2aa6:	01 c0       	rjmp	.+2      	; 0x2aaa <xQueueGenericReset+0x22>
    2aa8:	11 e0       	ldi	r17, 0x01	; 1
    2aaa:	ec 01       	movw	r28, r24
    2aac:	48 81       	ld	r20, Y
    2aae:	59 81       	ldd	r21, Y+1	; 0x01
    2ab0:	28 a1       	ldd	r18, Y+32	; 0x20
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ab6:	62 9f       	mul	r22, r18
    2ab8:	c0 01       	movw	r24, r0
    2aba:	63 9f       	mul	r22, r19
    2abc:	90 0d       	add	r25, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	ba 01       	movw	r22, r20
    2ac2:	68 0f       	add	r22, r24
    2ac4:	79 1f       	adc	r23, r25
    2ac6:	6a 83       	std	Y+2, r22	; 0x02
    2ac8:	7b 83       	std	Y+3, r23	; 0x03
    2aca:	1e 8e       	std	Y+30, r1	; 0x1e
    2acc:	4c 83       	std	Y+4, r20	; 0x04
    2ace:	5d 83       	std	Y+5, r21	; 0x05
    2ad0:	82 1b       	sub	r24, r18
    2ad2:	93 0b       	sbc	r25, r19
    2ad4:	84 0f       	add	r24, r20
    2ad6:	95 1f       	adc	r25, r21
    2ad8:	8e 83       	std	Y+6, r24	; 0x06
    2ada:	9f 83       	std	Y+7, r25	; 0x07
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	89 a3       	std	Y+33, r24	; 0x21
    2ae0:	8a a3       	std	Y+34, r24	; 0x22
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	08 96       	adiw	r24, 0x08	; 8
    2ae6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    2aea:	ce 01       	movw	r24, r28
    2aec:	43 96       	adiw	r24, 0x13	; 19
    2aee:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <xQueueGenericReset+0x6e>
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	81 2f       	mov	r24, r17
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	08 95       	ret

00002b00 <xQueueGenericCreate>:
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	88 23       	and	r24, r24
    2b0a:	01 f1       	breq	.+64     	; 0x2b4c <xQueueGenericCreate+0x4c>
    2b0c:	06 2f       	mov	r16, r22
    2b0e:	18 2f       	mov	r17, r24
    2b10:	83 e2       	ldi	r24, 0x23	; 35
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    2b18:	ec 01       	movw	r28, r24
    2b1a:	89 2b       	or	r24, r25
    2b1c:	c9 f0       	breq	.+50     	; 0x2b50 <xQueueGenericCreate+0x50>
    2b1e:	10 9f       	mul	r17, r16
    2b20:	c0 01       	movw	r24, r0
    2b22:	11 24       	eor	r1, r1
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    2b2a:	88 83       	st	Y, r24
    2b2c:	99 83       	std	Y+1, r25	; 0x01
    2b2e:	89 2b       	or	r24, r25
    2b30:	39 f0       	breq	.+14     	; 0x2b40 <xQueueGenericCreate+0x40>
    2b32:	1f 8f       	std	Y+31, r17	; 0x1f
    2b34:	08 a3       	std	Y+32, r16	; 0x20
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	ce 01       	movw	r24, r28
    2b3a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <xQueueGenericReset>
    2b3e:	08 c0       	rjmp	.+16     	; 0x2b50 <xQueueGenericCreate+0x50>
    2b40:	ce 01       	movw	r24, r28
    2b42:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortFree>
    2b46:	c0 e0       	ldi	r28, 0x00	; 0
    2b48:	d0 e0       	ldi	r29, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <xQueueGenericCreate+0x50>
    2b4c:	c0 e0       	ldi	r28, 0x00	; 0
    2b4e:	d0 e0       	ldi	r29, 0x00	; 0
    2b50:	ce 01       	movw	r24, r28
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	08 95       	ret

00002b5c <xQueueGenericSend>:
    2b5c:	af 92       	push	r10
    2b5e:	bf 92       	push	r11
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	29 97       	sbiw	r28, 0x09	; 9
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	7c 01       	movw	r14, r24
    2b7c:	5b 01       	movw	r10, r22
    2b7e:	2e 83       	std	Y+6, r18	; 0x06
    2b80:	3f 83       	std	Y+7, r19	; 0x07
    2b82:	48 87       	std	Y+8, r20	; 0x08
    2b84:	59 87       	std	Y+9, r21	; 0x09
    2b86:	10 e0       	ldi	r17, 0x00	; 0
    2b88:	6c 01       	movw	r12, r24
    2b8a:	88 e0       	ldi	r24, 0x08	; 8
    2b8c:	c8 0e       	add	r12, r24
    2b8e:	d1 1c       	adc	r13, r1
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	0f 92       	push	r0
    2b96:	f7 01       	movw	r30, r14
    2b98:	96 8d       	ldd	r25, Z+30	; 0x1e
    2b9a:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b9c:	98 17       	cp	r25, r24
    2b9e:	a8 f4       	brcc	.+42     	; 0x2bca <xQueueGenericSend+0x6e>
    2ba0:	40 2f       	mov	r20, r16
    2ba2:	b5 01       	movw	r22, r10
    2ba4:	c7 01       	movw	r24, r14
    2ba6:	0e 94 94 14 	call	0x2928	; 0x2928 <prvCopyDataToQueue>
    2baa:	f7 01       	movw	r30, r14
    2bac:	83 89       	ldd	r24, Z+19	; 0x13
    2bae:	88 23       	and	r24, r24
    2bb0:	41 f0       	breq	.+16     	; 0x2bc2 <xQueueGenericSend+0x66>
    2bb2:	c7 01       	movw	r24, r14
    2bb4:	43 96       	adiw	r24, 0x13	; 19
    2bb6:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	11 f4       	brne	.+4      	; 0x2bc2 <xQueueGenericSend+0x66>
    2bbe:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	56 c0       	rjmp	.+172    	; 0x2c76 <xQueueGenericSend+0x11a>
    2bca:	8e 81       	ldd	r24, Y+6	; 0x06
    2bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bce:	a8 85       	ldd	r26, Y+8	; 0x08
    2bd0:	b9 85       	ldd	r27, Y+9	; 0x09
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8a 2b       	or	r24, r26
    2bd6:	8b 2b       	or	r24, r27
    2bd8:	21 f4       	brne	.+8      	; 0x2be2 <xQueueGenericSend+0x86>
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	4a c0       	rjmp	.+148    	; 0x2c76 <xQueueGenericSend+0x11a>
    2be2:	11 11       	cpse	r17, r1
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <xQueueGenericSend+0x94>
    2be6:	ce 01       	movw	r24, r28
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	0e 94 0f 1c 	call	0x381e	; 0x381e <vTaskSetTimeOutState>
    2bee:	11 e0       	ldi	r17, 0x01	; 1
    2bf0:	0f 90       	pop	r0
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	0f 92       	push	r0
    2bfe:	f7 01       	movw	r30, r14
    2c00:	81 a1       	ldd	r24, Z+33	; 0x21
    2c02:	8f 3f       	cpi	r24, 0xFF	; 255
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <xQueueGenericSend+0xac>
    2c06:	11 a2       	std	Z+33, r1	; 0x21
    2c08:	f7 01       	movw	r30, r14
    2c0a:	82 a1       	ldd	r24, Z+34	; 0x22
    2c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <xQueueGenericSend+0xb6>
    2c10:	12 a2       	std	Z+34, r1	; 0x22
    2c12:	0f 90       	pop	r0
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	be 01       	movw	r22, r28
    2c18:	6a 5f       	subi	r22, 0xFA	; 250
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	0e 94 20 1c 	call	0x3840	; 0x3840 <xTaskCheckForTimeOut>
    2c24:	81 11       	cpse	r24, r1
    2c26:	21 c0       	rjmp	.+66     	; 0x2c6a <xQueueGenericSend+0x10e>
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	0f 92       	push	r0
    2c2e:	f7 01       	movw	r30, r14
    2c30:	96 8d       	ldd	r25, Z+30	; 0x1e
    2c32:	0f 90       	pop	r0
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	87 8d       	ldd	r24, Z+31	; 0x1f
    2c38:	98 13       	cpse	r25, r24
    2c3a:	11 c0       	rjmp	.+34     	; 0x2c5e <xQueueGenericSend+0x102>
    2c3c:	4e 81       	ldd	r20, Y+6	; 0x06
    2c3e:	5f 81       	ldd	r21, Y+7	; 0x07
    2c40:	68 85       	ldd	r22, Y+8	; 0x08
    2c42:	79 85       	ldd	r23, Y+9	; 0x09
    2c44:	c6 01       	movw	r24, r12
    2c46:	0e 94 a6 1b 	call	0x374c	; 0x374c <vTaskPlaceOnEventList>
    2c4a:	c7 01       	movw	r24, r14
    2c4c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
    2c50:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
    2c54:	81 11       	cpse	r24, r1
    2c56:	9c cf       	rjmp	.-200    	; 0x2b90 <xQueueGenericSend+0x34>
    2c58:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    2c5c:	99 cf       	rjmp	.-206    	; 0x2b90 <xQueueGenericSend+0x34>
    2c5e:	c7 01       	movw	r24, r14
    2c60:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
    2c64:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
    2c68:	93 cf       	rjmp	.-218    	; 0x2b90 <xQueueGenericSend+0x34>
    2c6a:	c7 01       	movw	r24, r14
    2c6c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
    2c70:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	29 96       	adiw	r28, 0x09	; 9
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	cf 90       	pop	r12
    2c8c:	bf 90       	pop	r11
    2c8e:	af 90       	pop	r10
    2c90:	08 95       	ret

00002c92 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	56 8d       	ldd	r21, Z+30	; 0x1e
    2ca0:	37 8d       	ldd	r19, Z+31	; 0x1f
    2ca2:	53 17       	cp	r21, r19
    2ca4:	c0 f4       	brcc	.+48     	; 0x2cd6 <xQueueGenericSendFromISR+0x44>
    2ca6:	42 2f       	mov	r20, r18
    2ca8:	ec 01       	movw	r28, r24
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2caa:	0e 94 94 14 	call	0x2928	; 0x2928 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2cae:	8a a1       	ldd	r24, Y+34	; 0x22
    2cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb2:	69 f4       	brne	.+26     	; 0x2cce <xQueueGenericSendFromISR+0x3c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb6:	88 23       	and	r24, r24
    2cb8:	81 f0       	breq	.+32     	; 0x2cda <xQueueGenericSendFromISR+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2cba:	ce 01       	movw	r24, r28
    2cbc:	43 96       	adiw	r24, 0x13	; 19
    2cbe:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2cc2:	88 23       	and	r24, r24
    2cc4:	61 f0       	breq	.+24     	; 0x2cde <xQueueGenericSendFromISR+0x4c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	09 c0       	rjmp	.+18     	; 0x2ce0 <xQueueGenericSendFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	8a a3       	std	Y+34, r24	; 0x22
			}

			xReturn = pdPASS;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	05 c0       	rjmp	.+10     	; 0x2ce0 <xQueueGenericSendFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <xQueueGenericSendFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <xQueueGenericSendFromISR+0x4e>
    2cde:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	08 95       	ret

00002cea <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2cea:	af 92       	push	r10
    2cec:	bf 92       	push	r11
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	29 97       	sbiw	r28, 0x09	; 9
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	7c 01       	movw	r14, r24
    2d0a:	5b 01       	movw	r10, r22
    2d0c:	2e 83       	std	Y+6, r18	; 0x06
    2d0e:	3f 83       	std	Y+7, r19	; 0x07
    2d10:	48 87       	std	Y+8, r20	; 0x08
    2d12:	59 87       	std	Y+9, r21	; 0x09
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2d14:	10 e0       	ldi	r17, 0x00	; 0
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2d16:	6c 01       	movw	r12, r24
    2d18:	83 e1       	ldi	r24, 0x13	; 19
    2d1a:	c8 0e       	add	r12, r24
    2d1c:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2d24:	f7 01       	movw	r30, r14
    2d26:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d28:	88 23       	and	r24, r24
    2d2a:	99 f1       	breq	.+102    	; 0x2d92 <xQueueGenericReceive+0xa8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2d2c:	c6 80       	ldd	r12, Z+6	; 0x06
    2d2e:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2d30:	b5 01       	movw	r22, r10
    2d32:	c7 01       	movw	r24, r14
    2d34:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2d38:	01 11       	cpse	r16, r1
    2d3a:	1a c0       	rjmp	.+52     	; 0x2d70 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d40:	81 50       	subi	r24, 0x01	; 1
    2d42:	86 8f       	std	Z+30, r24	; 0x1e

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	89 2b       	or	r24, r25
    2d4a:	29 f4       	brne	.+10     	; 0x2d56 <xQueueGenericReceive+0x6c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2d4c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskGetCurrentTaskHandle>
    2d50:	f7 01       	movw	r30, r14
    2d52:	82 83       	std	Z+2, r24	; 0x02
    2d54:	93 83       	std	Z+3, r25	; 0x03
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2d56:	f7 01       	movw	r30, r14
    2d58:	80 85       	ldd	r24, Z+8	; 0x08
    2d5a:	88 23       	and	r24, r24
    2d5c:	b1 f0       	breq	.+44     	; 0x2d8a <xQueueGenericReceive+0xa0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2d5e:	c7 01       	movw	r24, r14
    2d60:	08 96       	adiw	r24, 0x08	; 8
    2d62:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	81 f4       	brne	.+32     	; 0x2d8a <xQueueGenericReceive+0xa0>
						{
							portYIELD_WITHIN_API();
    2d6a:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    2d6e:	0d c0       	rjmp	.+26     	; 0x2d8a <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2d70:	f7 01       	movw	r30, r14
    2d72:	c6 82       	std	Z+6, r12	; 0x06
    2d74:	d7 82       	std	Z+7, r13	; 0x07

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2d76:	83 89       	ldd	r24, Z+19	; 0x13
    2d78:	88 23       	and	r24, r24
    2d7a:	39 f0       	breq	.+14     	; 0x2d8a <xQueueGenericReceive+0xa0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2d7c:	c7 01       	movw	r24, r14
    2d7e:	43 96       	adiw	r24, 0x13	; 19
    2d80:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2d84:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2d86:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2d8a:	0f 90       	pop	r0
    2d8c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	62 c0       	rjmp	.+196    	; 0x2e56 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	a8 85       	ldd	r26, Y+8	; 0x08
    2d98:	b9 85       	ldd	r27, Y+9	; 0x09
    2d9a:	89 2b       	or	r24, r25
    2d9c:	8a 2b       	or	r24, r26
    2d9e:	8b 2b       	or	r24, r27
    2da0:	21 f4       	brne	.+8      	; 0x2daa <xQueueGenericReceive+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2da2:	0f 90       	pop	r0
    2da4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	56 c0       	rjmp	.+172    	; 0x2e56 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    2daa:	11 11       	cpse	r17, r1
    2dac:	05 c0       	rjmp	.+10     	; 0x2db8 <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2dae:	ce 01       	movw	r24, r28
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	0e 94 0f 1c 	call	0x381e	; 0x381e <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2db6:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
		}
		taskEXIT_CRITICAL();
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2dbc:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	0f 92       	push	r0
    2dc6:	f7 01       	movw	r30, r14
    2dc8:	81 a1       	ldd	r24, Z+33	; 0x21
    2dca:	8f 3f       	cpi	r24, 0xFF	; 255
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <xQueueGenericReceive+0xe6>
    2dce:	11 a2       	std	Z+33, r1	; 0x21
    2dd0:	f7 01       	movw	r30, r14
    2dd2:	82 a1       	ldd	r24, Z+34	; 0x22
    2dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <xQueueGenericReceive+0xf0>
    2dd8:	12 a2       	std	Z+34, r1	; 0x22
    2dda:	0f 90       	pop	r0
    2ddc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dde:	be 01       	movw	r22, r28
    2de0:	6a 5f       	subi	r22, 0xFA	; 250
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	ce 01       	movw	r24, r28
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	0e 94 20 1c 	call	0x3840	; 0x3840 <xTaskCheckForTimeOut>
    2dec:	81 11       	cpse	r24, r1
    2dee:	2d c0       	rjmp	.+90     	; 0x2e4a <xQueueGenericReceive+0x160>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2df6:	f7 01       	movw	r30, r14
    2df8:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2dfa:	0f 90       	pop	r0
    2dfc:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2dfe:	81 11       	cpse	r24, r1
    2e00:	1e c0       	rjmp	.+60     	; 0x2e3e <xQueueGenericReceive+0x154>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	89 2b       	or	r24, r25
    2e08:	49 f4       	brne	.+18     	; 0x2e1c <xQueueGenericReceive+0x132>
					{
						portENTER_CRITICAL();
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 af 1c 	call	0x395e	; 0x395e <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2e18:	0f 90       	pop	r0
    2e1a:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2e1c:	4e 81       	ldd	r20, Y+6	; 0x06
    2e1e:	5f 81       	ldd	r21, Y+7	; 0x07
    2e20:	68 85       	ldd	r22, Y+8	; 0x08
    2e22:	79 85       	ldd	r23, Y+9	; 0x09
    2e24:	c6 01       	movw	r24, r12
    2e26:	0e 94 a6 1b 	call	0x374c	; 0x374c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2e2a:	c7 01       	movw	r24, r14
    2e2c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2e30:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
    2e34:	81 11       	cpse	r24, r1
    2e36:	73 cf       	rjmp	.-282    	; 0x2d1e <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
    2e38:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    2e3c:	70 cf       	rjmp	.-288    	; 0x2d1e <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e3e:	c7 01       	movw	r24, r14
    2e40:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e44:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
    2e48:	6a cf       	rjmp	.-300    	; 0x2d1e <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2e4a:	c7 01       	movw	r24, r14
    2e4c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e50:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2e54:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    2e56:	29 96       	adiw	r28, 0x09	; 9
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	af 90       	pop	r10
    2e70:	08 95       	ret

00002e72 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	26 8d       	ldd	r18, Z+30	; 0x1e
    2e7e:	22 23       	and	r18, r18
    2e80:	d9 f0       	breq	.+54     	; 0x2eb8 <xQueueReceiveFromISR+0x46>
    2e82:	8a 01       	movw	r16, r20
    2e84:	ec 01       	movw	r28, r24
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e86:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2e8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e8c:	81 50       	subi	r24, 0x01	; 1
    2e8e:	8e 8f       	std	Y+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2e90:	89 a1       	ldd	r24, Y+33	; 0x21
    2e92:	8f 3f       	cpi	r24, 0xFF	; 255
    2e94:	69 f4       	brne	.+26     	; 0x2eb0 <xQueueReceiveFromISR+0x3e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e96:	88 85       	ldd	r24, Y+8	; 0x08
    2e98:	88 23       	and	r24, r24
    2e9a:	81 f0       	breq	.+32     	; 0x2ebc <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	08 96       	adiw	r24, 0x08	; 8
    2ea0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <xTaskRemoveFromEventList>
    2ea4:	88 23       	and	r24, r24
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <xQueueReceiveFromISR+0x4e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	f8 01       	movw	r30, r16
    2eac:	80 83       	st	Z, r24
    2eae:	09 c0       	rjmp	.+18     	; 0x2ec2 <xQueueReceiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 a3       	std	Y+33, r24	; 0x21
			}

			xReturn = pdPASS;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <xQueueReceiveFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <xQueueReceiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <xQueueReceiveFromISR+0x50>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2eda:	08 95       	ret

00002edc <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    2edc:	fc 01       	movw	r30, r24
    2ede:	86 8d       	ldd	r24, Z+30	; 0x1e

	return uxReturn;
}
    2ee0:	08 95       	ret

00002ee2 <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2ee2:	cc e8       	ldi	r28, 0x8C	; 140
    2ee4:	d1 e3       	ldi	r29, 0x31	; 49
    2ee6:	88 81       	ld	r24, Y
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	e8 f3       	brcs	.-6      	; 0x2ee6 <prvIdleTask+0x4>
    2eec:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    2ef0:	fa cf       	rjmp	.-12     	; 0x2ee6 <prvIdleTask+0x4>

00002ef2 <prvAddCurrentTaskToDelayedList>:
    2ef2:	cf 92       	push	r12
    2ef4:	df 92       	push	r13
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	6b 01       	movw	r12, r22
    2efc:	7c 01       	movw	r14, r24
    2efe:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    2f02:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    2f06:	62 83       	std	Z+2, r22	; 0x02
    2f08:	73 83       	std	Z+3, r23	; 0x03
    2f0a:	84 83       	std	Z+4, r24	; 0x04
    2f0c:	95 83       	std	Z+5, r25	; 0x05
    2f0e:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    2f12:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    2f16:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    2f1a:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    2f1e:	c8 16       	cp	r12, r24
    2f20:	d9 06       	cpc	r13, r25
    2f22:	ea 06       	cpc	r14, r26
    2f24:	fb 06       	cpc	r15, r27
    2f26:	68 f4       	brcc	.+26     	; 0x2f42 <prvAddCurrentTaskToDelayedList+0x50>
    2f28:	60 91 b8 31 	lds	r22, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    2f2c:	70 91 b9 31 	lds	r23, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    2f30:	80 91 72 31 	lds	r24, 0x3172	; 0x803172 <pxOverflowDelayedTaskList>
    2f34:	90 91 73 31 	lds	r25, 0x3173	; 0x803173 <pxOverflowDelayedTaskList+0x1>
    2f38:	6e 5f       	subi	r22, 0xFE	; 254
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	0e 94 a8 12 	call	0x2550	; 0x2550 <vListInsert>
    2f40:	21 c0       	rjmp	.+66     	; 0x2f84 <prvAddCurrentTaskToDelayedList+0x92>
    2f42:	60 91 b8 31 	lds	r22, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    2f46:	70 91 b9 31 	lds	r23, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    2f4a:	80 91 74 31 	lds	r24, 0x3174	; 0x803174 <pxDelayedTaskList>
    2f4e:	90 91 75 31 	lds	r25, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    2f52:	6e 5f       	subi	r22, 0xFE	; 254
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	0e 94 a8 12 	call	0x2550	; 0x2550 <vListInsert>
    2f5a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2f5e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f62:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f66:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f6a:	c8 16       	cp	r12, r24
    2f6c:	d9 06       	cpc	r13, r25
    2f6e:	ea 06       	cpc	r14, r26
    2f70:	fb 06       	cpc	r15, r27
    2f72:	40 f4       	brcc	.+16     	; 0x2f84 <prvAddCurrentTaskToDelayedList+0x92>
    2f74:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2f78:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2f7c:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2f80:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	08 95       	ret

00002f8e <xTaskGenericCreate>:
    2f8e:	4f 92       	push	r4
    2f90:	5f 92       	push	r5
    2f92:	6f 92       	push	r6
    2f94:	7f 92       	push	r7
    2f96:	8f 92       	push	r8
    2f98:	9f 92       	push	r9
    2f9a:	af 92       	push	r10
    2f9c:	bf 92       	push	r11
    2f9e:	cf 92       	push	r12
    2fa0:	df 92       	push	r13
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	5c 01       	movw	r10, r24
    2fb0:	4b 01       	movw	r8, r22
    2fb2:	3a 01       	movw	r6, r20
    2fb4:	29 01       	movw	r4, r18
    2fb6:	88 e2       	ldi	r24, 0x28	; 40
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    2fbe:	ec 01       	movw	r28, r24
    2fc0:	89 2b       	or	r24, r25
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <xTaskGenericCreate+0x38>
    2fc4:	d4 c0       	rjmp	.+424    	; 0x316e <xTaskGenericCreate+0x1e0>
    2fc6:	c1 14       	cp	r12, r1
    2fc8:	d1 04       	cpc	r13, r1
    2fca:	09 f0       	breq	.+2      	; 0x2fce <xTaskGenericCreate+0x40>
    2fcc:	cc c0       	rjmp	.+408    	; 0x3166 <xTaskGenericCreate+0x1d8>
    2fce:	c3 01       	movw	r24, r6
    2fd0:	0e 94 9a 11 	call	0x2334	; 0x2334 <pvPortMalloc>
    2fd4:	8b 8f       	std	Y+27, r24	; 0x1b
    2fd6:	9c 8f       	std	Y+28, r25	; 0x1c
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	21 f4       	brne	.+8      	; 0x2fe4 <xTaskGenericCreate+0x56>
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortFree>
    2fe2:	c5 c0       	rjmp	.+394    	; 0x316e <xTaskGenericCreate+0x1e0>
    2fe4:	a3 01       	movw	r20, r6
    2fe6:	61 e1       	ldi	r22, 0x11	; 17
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <memset>
    2fee:	93 01       	movw	r18, r6
    2ff0:	21 50       	subi	r18, 0x01	; 1
    2ff2:	31 09       	sbc	r19, r1
    2ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff8:	3c 01       	movw	r6, r24
    2ffa:	62 0e       	add	r6, r18
    2ffc:	73 1e       	adc	r7, r19
    2ffe:	4a e0       	ldi	r20, 0x0A	; 10
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	b4 01       	movw	r22, r8
    3004:	ce 01       	movw	r24, r28
    3006:	4d 96       	adiw	r24, 0x1d	; 29
    3008:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <strncpy>
    300c:	1e a2       	std	Y+38, r1	; 0x26
    300e:	10 2f       	mov	r17, r16
    3010:	04 30       	cpi	r16, 0x04	; 4
    3012:	08 f0       	brcs	.+2      	; 0x3016 <xTaskGenericCreate+0x88>
    3014:	13 e0       	ldi	r17, 0x03	; 3
    3016:	1a 8f       	std	Y+26, r17	; 0x1a
    3018:	1f a3       	std	Y+39, r17	; 0x27
    301a:	6e 01       	movw	r12, r28
    301c:	22 e0       	ldi	r18, 0x02	; 2
    301e:	c2 0e       	add	r12, r18
    3020:	d1 1c       	adc	r13, r1
    3022:	c6 01       	movw	r24, r12
    3024:	0e 94 7d 12 	call	0x24fa	; 0x24fa <vListInitialiseItem>
    3028:	ce 01       	movw	r24, r28
    302a:	0e 96       	adiw	r24, 0x0e	; 14
    302c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <vListInitialiseItem>
    3030:	ca 87       	std	Y+10, r28	; 0x0a
    3032:	db 87       	std	Y+11, r29	; 0x0b
    3034:	84 e0       	ldi	r24, 0x04	; 4
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e0       	ldi	r26, 0x00	; 0
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	81 1b       	sub	r24, r17
    303e:	91 09       	sbc	r25, r1
    3040:	a1 09       	sbc	r26, r1
    3042:	b1 09       	sbc	r27, r1
    3044:	8e 87       	std	Y+14, r24	; 0x0e
    3046:	9f 87       	std	Y+15, r25	; 0x0f
    3048:	a8 8b       	std	Y+16, r26	; 0x10
    304a:	b9 8b       	std	Y+17, r27	; 0x11
    304c:	ce 8b       	std	Y+22, r28	; 0x16
    304e:	df 8b       	std	Y+23, r29	; 0x17
    3050:	a2 01       	movw	r20, r4
    3052:	b5 01       	movw	r22, r10
    3054:	c3 01       	movw	r24, r6
    3056:	0e 94 19 13 	call	0x2632	; 0x2632 <pxPortInitialiseStack>
    305a:	88 83       	st	Y, r24
    305c:	99 83       	std	Y+1, r25	; 0x01
    305e:	e1 14       	cp	r14, r1
    3060:	f1 04       	cpc	r15, r1
    3062:	19 f0       	breq	.+6      	; 0x306a <xTaskGenericCreate+0xdc>
    3064:	f7 01       	movw	r30, r14
    3066:	c0 83       	st	Z, r28
    3068:	d1 83       	std	Z+1, r29	; 0x01
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	0f 92       	push	r0
    3070:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <uxCurrentNumberOfTasks>
    3074:	8f 5f       	subi	r24, 0xFF	; 255
    3076:	80 93 64 31 	sts	0x3164, r24	; 0x803164 <uxCurrentNumberOfTasks>
    307a:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    307e:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3082:	89 2b       	or	r24, r25
    3084:	89 f5       	brne	.+98     	; 0x30e8 <xTaskGenericCreate+0x15a>
    3086:	c0 93 b8 31 	sts	0x31B8, r28	; 0x8031b8 <pxCurrentTCB>
    308a:	d0 93 b9 31 	sts	0x31B9, r29	; 0x8031b9 <pxCurrentTCB+0x1>
    308e:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <uxCurrentNumberOfTasks>
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	c1 f5       	brne	.+112    	; 0x3106 <xTaskGenericCreate+0x178>
    3096:	8c e8       	ldi	r24, 0x8C	; 140
    3098:	91 e3       	ldi	r25, 0x31	; 49
    309a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    309e:	87 e9       	ldi	r24, 0x97	; 151
    30a0:	91 e3       	ldi	r25, 0x31	; 49
    30a2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30a6:	82 ea       	ldi	r24, 0xA2	; 162
    30a8:	91 e3       	ldi	r25, 0x31	; 49
    30aa:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30ae:	8d ea       	ldi	r24, 0xAD	; 173
    30b0:	91 e3       	ldi	r25, 0x31	; 49
    30b2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30b6:	81 e8       	ldi	r24, 0x81	; 129
    30b8:	91 e3       	ldi	r25, 0x31	; 49
    30ba:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30be:	86 e7       	ldi	r24, 0x76	; 118
    30c0:	91 e3       	ldi	r25, 0x31	; 49
    30c2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30c6:	87 e6       	ldi	r24, 0x67	; 103
    30c8:	91 e3       	ldi	r25, 0x31	; 49
    30ca:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <vListInitialise>
    30ce:	81 e8       	ldi	r24, 0x81	; 129
    30d0:	91 e3       	ldi	r25, 0x31	; 49
    30d2:	80 93 74 31 	sts	0x3174, r24	; 0x803174 <pxDelayedTaskList>
    30d6:	90 93 75 31 	sts	0x3175, r25	; 0x803175 <pxDelayedTaskList+0x1>
    30da:	86 e7       	ldi	r24, 0x76	; 118
    30dc:	91 e3       	ldi	r25, 0x31	; 49
    30de:	80 93 72 31 	sts	0x3172, r24	; 0x803172 <pxOverflowDelayedTaskList>
    30e2:	90 93 73 31 	sts	0x3173, r25	; 0x803173 <pxOverflowDelayedTaskList+0x1>
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <xTaskGenericCreate+0x178>
    30e8:	80 91 5d 31 	lds	r24, 0x315D	; 0x80315d <xSchedulerRunning>
    30ec:	81 11       	cpse	r24, r1
    30ee:	0b c0       	rjmp	.+22     	; 0x3106 <xTaskGenericCreate+0x178>
    30f0:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    30f4:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    30f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fa:	08 17       	cp	r16, r24
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <xTaskGenericCreate+0x178>
    30fe:	c0 93 b8 31 	sts	0x31B8, r28	; 0x8031b8 <pxCurrentTCB>
    3102:	d0 93 b9 31 	sts	0x31B9, r29	; 0x8031b9 <pxCurrentTCB+0x1>
    3106:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3108:	90 91 5f 31 	lds	r25, 0x315F	; 0x80315f <uxTopUsedPriority>
    310c:	98 17       	cp	r25, r24
    310e:	10 f4       	brcc	.+4      	; 0x3114 <xTaskGenericCreate+0x186>
    3110:	80 93 5f 31 	sts	0x315F, r24	; 0x80315f <uxTopUsedPriority>
    3114:	90 91 58 31 	lds	r25, 0x3158	; 0x803158 <uxTaskNumber>
    3118:	9f 5f       	subi	r25, 0xFF	; 255
    311a:	90 93 58 31 	sts	0x3158, r25	; 0x803158 <uxTaskNumber>
    311e:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    3122:	98 17       	cp	r25, r24
    3124:	10 f4       	brcc	.+4      	; 0x312a <xTaskGenericCreate+0x19c>
    3126:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    312a:	fb e0       	ldi	r31, 0x0B	; 11
    312c:	8f 9f       	mul	r24, r31
    312e:	c0 01       	movw	r24, r0
    3130:	11 24       	eor	r1, r1
    3132:	b6 01       	movw	r22, r12
    3134:	84 57       	subi	r24, 0x74	; 116
    3136:	9e 4c       	sbci	r25, 0xCE	; 206
    3138:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	80 91 5d 31 	lds	r24, 0x315D	; 0x80315d <xSchedulerRunning>
    3144:	88 23       	and	r24, r24
    3146:	59 f0       	breq	.+22     	; 0x315e <xTaskGenericCreate+0x1d0>
    3148:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    314c:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3150:	82 8d       	ldd	r24, Z+26	; 0x1a
    3152:	80 17       	cp	r24, r16
    3154:	30 f4       	brcc	.+12     	; 0x3162 <xTaskGenericCreate+0x1d4>
    3156:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	09 c0       	rjmp	.+18     	; 0x3170 <xTaskGenericCreate+0x1e2>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	07 c0       	rjmp	.+14     	; 0x3170 <xTaskGenericCreate+0x1e2>
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	05 c0       	rjmp	.+10     	; 0x3170 <xTaskGenericCreate+0x1e2>
    3166:	cb 8e       	std	Y+27, r12	; 0x1b
    3168:	dc 8e       	std	Y+28, r13	; 0x1c
    316a:	c6 01       	movw	r24, r12
    316c:	3b cf       	rjmp	.-394    	; 0x2fe4 <xTaskGenericCreate+0x56>
    316e:	8f ef       	ldi	r24, 0xFF	; 255
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	ff 90       	pop	r15
    317a:	ef 90       	pop	r14
    317c:	df 90       	pop	r13
    317e:	cf 90       	pop	r12
    3180:	bf 90       	pop	r11
    3182:	af 90       	pop	r10
    3184:	9f 90       	pop	r9
    3186:	8f 90       	pop	r8
    3188:	7f 90       	pop	r7
    318a:	6f 90       	pop	r6
    318c:	5f 90       	pop	r5
    318e:	4f 90       	pop	r4
    3190:	08 95       	ret

00003192 <uxTaskPriorityGet>:
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	0f 92       	push	r0
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	21 f4       	brne	.+8      	; 0x31a4 <uxTaskPriorityGet+0x12>
    319c:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    31a0:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    31a4:	0f 90       	pop	r0
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	fc 01       	movw	r30, r24
    31aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    31ac:	08 95       	ret

000031ae <vTaskStartScheduler>:
    31ae:	af 92       	push	r10
    31b0:	bf 92       	push	r11
    31b2:	cf 92       	push	r12
    31b4:	df 92       	push	r13
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	a1 2c       	mov	r10, r1
    31be:	b1 2c       	mov	r11, r1
    31c0:	c1 2c       	mov	r12, r1
    31c2:	d1 2c       	mov	r13, r1
    31c4:	0f 2e       	mov	r0, r31
    31c6:	f5 e6       	ldi	r31, 0x65	; 101
    31c8:	ef 2e       	mov	r14, r31
    31ca:	f1 e3       	ldi	r31, 0x31	; 49
    31cc:	ff 2e       	mov	r15, r31
    31ce:	f0 2d       	mov	r31, r0
    31d0:	00 e0       	ldi	r16, 0x00	; 0
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	44 e6       	ldi	r20, 0x64	; 100
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	64 e1       	ldi	r22, 0x14	; 20
    31dc:	71 e2       	ldi	r23, 0x21	; 33
    31de:	81 e7       	ldi	r24, 0x71	; 113
    31e0:	97 e1       	ldi	r25, 0x17	; 23
    31e2:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <xTaskGenericCreate>
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	69 f4       	brne	.+26     	; 0x3204 <vTaskStartScheduler+0x56>
    31ea:	f8 94       	cli
    31ec:	80 93 5d 31 	sts	0x315D, r24	; 0x80315d <xSchedulerRunning>
    31f0:	10 92 60 31 	sts	0x3160, r1	; 0x803160 <xTickCount>
    31f4:	10 92 61 31 	sts	0x3161, r1	; 0x803161 <xTickCount+0x1>
    31f8:	10 92 62 31 	sts	0x3162, r1	; 0x803162 <xTickCount+0x2>
    31fc:	10 92 63 31 	sts	0x3163, r1	; 0x803163 <xTickCount+0x3>
    3200:	0e 94 8f 13 	call	0x271e	; 0x271e <xPortStartScheduler>
    3204:	0f 91       	pop	r16
    3206:	ff 90       	pop	r15
    3208:	ef 90       	pop	r14
    320a:	df 90       	pop	r13
    320c:	cf 90       	pop	r12
    320e:	bf 90       	pop	r11
    3210:	af 90       	pop	r10
    3212:	08 95       	ret

00003214 <vTaskSuspendAll>:
    3214:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	80 93 5c 31 	sts	0x315C, r24	; 0x80315c <uxSchedulerSuspended>
    321e:	08 95       	ret

00003220 <xTaskGetTickCount>:
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	0f 92       	push	r0
    3226:	60 91 60 31 	lds	r22, 0x3160	; 0x803160 <xTickCount>
    322a:	70 91 61 31 	lds	r23, 0x3161	; 0x803161 <xTickCount+0x1>
    322e:	80 91 62 31 	lds	r24, 0x3162	; 0x803162 <xTickCount+0x2>
    3232:	90 91 63 31 	lds	r25, 0x3163	; 0x803163 <xTickCount+0x3>
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	08 95       	ret

0000323c <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	21 f4       	brne	.+8      	; 0x3248 <pcTaskGetTaskName+0xc>
    3240:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    3244:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    3248:	4d 96       	adiw	r24, 0x1d	; 29
    324a:	08 95       	ret

0000324c <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    324c:	80 91 65 31 	lds	r24, 0x3165	; 0x803165 <xIdleTaskHandle>
    3250:	90 91 66 31 	lds	r25, 0x3166	; 0x803166 <xIdleTaskHandle+0x1>
    3254:	08 95       	ret

00003256 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3260:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    3264:	81 11       	cpse	r24, r1
    3266:	ed c0       	rjmp	.+474    	; 0x3442 <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    3268:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    326c:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    3270:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    3274:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	a1 1d       	adc	r26, r1
    327c:	b1 1d       	adc	r27, r1
    327e:	80 93 60 31 	sts	0x3160, r24	; 0x803160 <xTickCount>
    3282:	90 93 61 31 	sts	0x3161, r25	; 0x803161 <xTickCount+0x1>
    3286:	a0 93 62 31 	sts	0x3162, r26	; 0x803162 <xTickCount+0x2>
    328a:	b0 93 63 31 	sts	0x3163, r27	; 0x803163 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    328e:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    3292:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    3296:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    329a:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    329e:	89 2b       	or	r24, r25
    32a0:	8a 2b       	or	r24, r26
    32a2:	8b 2b       	or	r24, r27
    32a4:	f1 f5       	brne	.+124    	; 0x3322 <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    32a6:	80 91 74 31 	lds	r24, 0x3174	; 0x803174 <pxDelayedTaskList>
    32aa:	90 91 75 31 	lds	r25, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    32ae:	20 91 72 31 	lds	r18, 0x3172	; 0x803172 <pxOverflowDelayedTaskList>
    32b2:	30 91 73 31 	lds	r19, 0x3173	; 0x803173 <pxOverflowDelayedTaskList+0x1>
    32b6:	20 93 74 31 	sts	0x3174, r18	; 0x803174 <pxDelayedTaskList>
    32ba:	30 93 75 31 	sts	0x3175, r19	; 0x803175 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    32be:	80 93 72 31 	sts	0x3172, r24	; 0x803172 <pxOverflowDelayedTaskList>
    32c2:	90 93 73 31 	sts	0x3173, r25	; 0x803173 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    32c6:	80 91 59 31 	lds	r24, 0x3159	; 0x803159 <xNumOfOverflows>
    32ca:	8f 5f       	subi	r24, 0xFF	; 255
    32cc:	80 93 59 31 	sts	0x3159, r24	; 0x803159 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    32d0:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    32d4:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    32d8:	80 81       	ld	r24, Z
    32da:	81 11       	cpse	r24, r1
    32dc:	0c c0       	rjmp	.+24     	; 0x32f6 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    32de:	8f ef       	ldi	r24, 0xFF	; 255
    32e0:	9f ef       	ldi	r25, 0xFF	; 255
    32e2:	dc 01       	movw	r26, r24
    32e4:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    32e8:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    32ec:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    32f0:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    32f4:	16 c0       	rjmp	.+44     	; 0x3322 <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    32f6:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    32fa:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    32fe:	07 80       	ldd	r0, Z+7	; 0x07
    3300:	f0 85       	ldd	r31, Z+8	; 0x08
    3302:	e0 2d       	mov	r30, r0
    3304:	00 84       	ldd	r0, Z+8	; 0x08
    3306:	f1 85       	ldd	r31, Z+9	; 0x09
    3308:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    330a:	82 81       	ldd	r24, Z+2	; 0x02
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	a4 81       	ldd	r26, Z+4	; 0x04
    3310:	b5 81       	ldd	r27, Z+5	; 0x05
    3312:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3316:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    331a:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    331e:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3322:	40 91 60 31 	lds	r20, 0x3160	; 0x803160 <xTickCount>
    3326:	50 91 61 31 	lds	r21, 0x3161	; 0x803161 <xTickCount+0x1>
    332a:	60 91 62 31 	lds	r22, 0x3162	; 0x803162 <xTickCount+0x2>
    332e:	70 91 63 31 	lds	r23, 0x3163	; 0x803163 <xTickCount+0x3>
    3332:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3336:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    333a:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    333e:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3342:	48 17       	cp	r20, r24
    3344:	59 07       	cpc	r21, r25
    3346:	6a 07       	cpc	r22, r26
    3348:	7b 07       	cpc	r23, r27
    334a:	08 f4       	brcc	.+2      	; 0x334e <vTaskIncrementTick+0xf8>
    334c:	7f c0       	rjmp	.+254    	; 0x344c <vTaskIncrementTick+0x1f6>
    334e:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    3352:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    3356:	80 81       	ld	r24, Z
    3358:	88 23       	and	r24, r24
    335a:	f9 f0       	breq	.+62     	; 0x339a <vTaskIncrementTick+0x144>
    335c:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    3360:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    3364:	07 80       	ldd	r0, Z+7	; 0x07
    3366:	f0 85       	ldd	r31, Z+8	; 0x08
    3368:	e0 2d       	mov	r30, r0
    336a:	c0 85       	ldd	r28, Z+8	; 0x08
    336c:	d1 85       	ldd	r29, Z+9	; 0x09
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	9b 81       	ldd	r25, Y+3	; 0x03
    3372:	ac 81       	ldd	r26, Y+4	; 0x04
    3374:	bd 81       	ldd	r27, Y+5	; 0x05
    3376:	40 91 60 31 	lds	r20, 0x3160	; 0x803160 <xTickCount>
    337a:	50 91 61 31 	lds	r21, 0x3161	; 0x803161 <xTickCount+0x1>
    337e:	60 91 62 31 	lds	r22, 0x3162	; 0x803162 <xTickCount+0x2>
    3382:	70 91 63 31 	lds	r23, 0x3163	; 0x803163 <xTickCount+0x3>
    3386:	48 17       	cp	r20, r24
    3388:	59 07       	cpc	r21, r25
    338a:	6a 07       	cpc	r22, r26
    338c:	7b 07       	cpc	r23, r27
    338e:	58 f1       	brcs	.+86     	; 0x33e6 <vTaskIncrementTick+0x190>
    3390:	0f 2e       	mov	r0, r31
    3392:	fb e0       	ldi	r31, 0x0B	; 11
    3394:	ff 2e       	mov	r15, r31
    3396:	f0 2d       	mov	r31, r0
    3398:	2f c0       	rjmp	.+94     	; 0x33f8 <vTaskIncrementTick+0x1a2>
    339a:	8f ef       	ldi	r24, 0xFF	; 255
    339c:	9f ef       	ldi	r25, 0xFF	; 255
    339e:	dc 01       	movw	r26, r24
    33a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    33a4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    33a8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    33ac:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    33b0:	4d c0       	rjmp	.+154    	; 0x344c <vTaskIncrementTick+0x1f6>
    33b2:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    33b6:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    33ba:	07 80       	ldd	r0, Z+7	; 0x07
    33bc:	f0 85       	ldd	r31, Z+8	; 0x08
    33be:	e0 2d       	mov	r30, r0
    33c0:	c0 85       	ldd	r28, Z+8	; 0x08
    33c2:	d1 85       	ldd	r29, Z+9	; 0x09
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	9b 81       	ldd	r25, Y+3	; 0x03
    33c8:	ac 81       	ldd	r26, Y+4	; 0x04
    33ca:	bd 81       	ldd	r27, Y+5	; 0x05
    33cc:	40 91 60 31 	lds	r20, 0x3160	; 0x803160 <xTickCount>
    33d0:	50 91 61 31 	lds	r21, 0x3161	; 0x803161 <xTickCount+0x1>
    33d4:	60 91 62 31 	lds	r22, 0x3162	; 0x803162 <xTickCount+0x2>
    33d8:	70 91 63 31 	lds	r23, 0x3163	; 0x803163 <xTickCount+0x3>
    33dc:	48 17       	cp	r20, r24
    33de:	59 07       	cpc	r21, r25
    33e0:	6a 07       	cpc	r22, r26
    33e2:	7b 07       	cpc	r23, r27
    33e4:	48 f4       	brcc	.+18     	; 0x33f8 <vTaskIncrementTick+0x1a2>
    33e6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    33ea:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    33ee:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    33f2:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    33f6:	2a c0       	rjmp	.+84     	; 0x344c <vTaskIncrementTick+0x1f6>
    33f8:	8e 01       	movw	r16, r28
    33fa:	0e 5f       	subi	r16, 0xFE	; 254
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	c8 01       	movw	r24, r16
    3400:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
    3404:	88 8d       	ldd	r24, Y+24	; 0x18
    3406:	99 8d       	ldd	r25, Y+25	; 0x19
    3408:	89 2b       	or	r24, r25
    340a:	21 f0       	breq	.+8      	; 0x3414 <vTaskIncrementTick+0x1be>
    340c:	ce 01       	movw	r24, r28
    340e:	0e 96       	adiw	r24, 0x0e	; 14
    3410:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
    3414:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3416:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    341a:	98 17       	cp	r25, r24
    341c:	10 f4       	brcc	.+4      	; 0x3422 <vTaskIncrementTick+0x1cc>
    341e:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    3422:	f8 9e       	mul	r15, r24
    3424:	c0 01       	movw	r24, r0
    3426:	11 24       	eor	r1, r1
    3428:	b8 01       	movw	r22, r16
    342a:	84 57       	subi	r24, 0x74	; 116
    342c:	9e 4c       	sbci	r25, 0xCE	; 206
    342e:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
    3432:	e0 91 74 31 	lds	r30, 0x3174	; 0x803174 <pxDelayedTaskList>
    3436:	f0 91 75 31 	lds	r31, 0x3175	; 0x803175 <pxDelayedTaskList+0x1>
    343a:	80 81       	ld	r24, Z
    343c:	81 11       	cpse	r24, r1
    343e:	b9 cf       	rjmp	.-142    	; 0x33b2 <vTaskIncrementTick+0x15c>
    3440:	ac cf       	rjmp	.-168    	; 0x339a <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    3442:	80 91 5b 31 	lds	r24, 0x315B	; 0x80315b <uxMissedTicks>
    3446:	8f 5f       	subi	r24, 0xFF	; 255
    3448:	80 93 5b 31 	sts	0x315B, r24	; 0x80315b <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	ff 90       	pop	r15
    3456:	08 95       	ret

00003458 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3458:	cf 92       	push	r12
    345a:	df 92       	push	r13
    345c:	ef 92       	push	r14
    345e:	ff 92       	push	r15
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    346e:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    3472:	81 50       	subi	r24, 0x01	; 1
    3474:	80 93 5c 31 	sts	0x315C, r24	; 0x80315c <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3478:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    347c:	81 11       	cpse	r24, r1
    347e:	60 c0       	rjmp	.+192    	; 0x3540 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3480:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <uxCurrentNumberOfTasks>
    3484:	81 11       	cpse	r24, r1
    3486:	2c c0       	rjmp	.+88     	; 0x34e0 <xTaskResumeAll+0x88>
    3488:	5e c0       	rjmp	.+188    	; 0x3546 <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    348a:	d7 01       	movw	r26, r14
    348c:	17 96       	adiw	r26, 0x07	; 7
    348e:	ed 91       	ld	r30, X+
    3490:	fc 91       	ld	r31, X
    3492:	18 97       	sbiw	r26, 0x08	; 8
    3494:	c0 85       	ldd	r28, Z+8	; 0x08
    3496:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    3498:	ce 01       	movw	r24, r28
    349a:	0e 96       	adiw	r24, 0x0e	; 14
    349c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    34a0:	8e 01       	movw	r16, r28
    34a2:	0e 5f       	subi	r16, 0xFE	; 254
    34a4:	1f 4f       	sbci	r17, 0xFF	; 255
    34a6:	c8 01       	movw	r24, r16
    34a8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    34ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34ae:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    34b2:	98 17       	cp	r25, r24
    34b4:	10 f4       	brcc	.+4      	; 0x34ba <xTaskResumeAll+0x62>
    34b6:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    34ba:	d8 9e       	mul	r13, r24
    34bc:	c0 01       	movw	r24, r0
    34be:	11 24       	eor	r1, r1
    34c0:	b8 01       	movw	r22, r16
    34c2:	84 57       	subi	r24, 0x74	; 116
    34c4:	9e 4c       	sbci	r25, 0xCE	; 206
    34c6:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    34ca:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    34ce:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    34d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34d6:	98 17       	cp	r25, r24
    34d8:	70 f0       	brcs	.+28     	; 0x34f6 <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    34da:	cc 24       	eor	r12, r12
    34dc:	c3 94       	inc	r12
    34de:	0b c0       	rjmp	.+22     	; 0x34f6 <xTaskResumeAll+0x9e>
    34e0:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    34e2:	0f 2e       	mov	r0, r31
    34e4:	f7 e6       	ldi	r31, 0x67	; 103
    34e6:	ef 2e       	mov	r14, r31
    34e8:	f1 e3       	ldi	r31, 0x31	; 49
    34ea:	ff 2e       	mov	r15, r31
    34ec:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    34ee:	0f 2e       	mov	r0, r31
    34f0:	fb e0       	ldi	r31, 0x0B	; 11
    34f2:	df 2e       	mov	r13, r31
    34f4:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    34f6:	f7 01       	movw	r30, r14
    34f8:	80 81       	ld	r24, Z
    34fa:	81 11       	cpse	r24, r1
    34fc:	c6 cf       	rjmp	.-116    	; 0x348a <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    34fe:	80 91 5b 31 	lds	r24, 0x315B	; 0x80315b <uxMissedTicks>
    3502:	88 23       	and	r24, r24
    3504:	81 f0       	breq	.+32     	; 0x3526 <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3506:	80 91 5b 31 	lds	r24, 0x315B	; 0x80315b <uxMissedTicks>
    350a:	88 23       	and	r24, r24
    350c:	99 f0       	breq	.+38     	; 0x3534 <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    350e:	0e 94 2b 19 	call	0x3256	; 0x3256 <vTaskIncrementTick>
						--uxMissedTicks;
    3512:	80 91 5b 31 	lds	r24, 0x315B	; 0x80315b <uxMissedTicks>
    3516:	81 50       	subi	r24, 0x01	; 1
    3518:	80 93 5b 31 	sts	0x315B, r24	; 0x80315b <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    351c:	80 91 5b 31 	lds	r24, 0x315B	; 0x80315b <uxMissedTicks>
    3520:	81 11       	cpse	r24, r1
    3522:	f5 cf       	rjmp	.-22     	; 0x350e <xTaskResumeAll+0xb6>
    3524:	07 c0       	rjmp	.+14     	; 0x3534 <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3526:	f1 e0       	ldi	r31, 0x01	; 1
    3528:	cf 16       	cp	r12, r31
    352a:	21 f0       	breq	.+8      	; 0x3534 <xTaskResumeAll+0xdc>
    352c:	80 91 5a 31 	lds	r24, 0x315A	; 0x80315a <xMissedYield>
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	41 f4       	brne	.+16     	; 0x3544 <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    3534:	10 92 5a 31 	sts	0x315A, r1	; 0x80315a <xMissedYield>
					portYIELD_WITHIN_API();
    3538:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <xTaskResumeAll+0xee>
    3544:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3546:	0f 90       	pop	r0
    3548:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	08 95       	ret

0000355c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	ec 01       	movw	r28, r24
    356a:	6a 01       	movw	r12, r20
    356c:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    356e:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3572:	88 81       	ld	r24, Y
    3574:	99 81       	ldd	r25, Y+1	; 0x01
    3576:	aa 81       	ldd	r26, Y+2	; 0x02
    3578:	bb 81       	ldd	r27, Y+3	; 0x03
    357a:	c8 0e       	add	r12, r24
    357c:	d9 1e       	adc	r13, r25
    357e:	ea 1e       	adc	r14, r26
    3580:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    3582:	40 91 60 31 	lds	r20, 0x3160	; 0x803160 <xTickCount>
    3586:	50 91 61 31 	lds	r21, 0x3161	; 0x803161 <xTickCount+0x1>
    358a:	60 91 62 31 	lds	r22, 0x3162	; 0x803162 <xTickCount+0x2>
    358e:	70 91 63 31 	lds	r23, 0x3163	; 0x803163 <xTickCount+0x3>
    3592:	48 17       	cp	r20, r24
    3594:	59 07       	cpc	r21, r25
    3596:	6a 07       	cpc	r22, r26
    3598:	7b 07       	cpc	r23, r27
    359a:	b8 f4       	brcc	.+46     	; 0x35ca <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    359c:	c8 16       	cp	r12, r24
    359e:	d9 06       	cpc	r13, r25
    35a0:	ea 06       	cpc	r14, r26
    35a2:	fb 06       	cpc	r15, r27
    35a4:	e0 f5       	brcc	.+120    	; 0x361e <vTaskDelayUntil+0xc2>
    35a6:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    35aa:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    35ae:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    35b2:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    35b6:	c8 82       	st	Y, r12
    35b8:	d9 82       	std	Y+1, r13	; 0x01
    35ba:	ea 82       	std	Y+2, r14	; 0x02
    35bc:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    35be:	8c 15       	cp	r24, r12
    35c0:	9d 05       	cpc	r25, r13
    35c2:	ae 05       	cpc	r26, r14
    35c4:	bf 05       	cpc	r27, r15
    35c6:	f8 f4       	brcc	.+62     	; 0x3606 <vTaskDelayUntil+0xaa>
    35c8:	13 c0       	rjmp	.+38     	; 0x35f0 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    35ca:	c8 16       	cp	r12, r24
    35cc:	d9 06       	cpc	r13, r25
    35ce:	ea 06       	cpc	r14, r26
    35d0:	fb 06       	cpc	r15, r27
    35d2:	00 f1       	brcs	.+64     	; 0x3614 <vTaskDelayUntil+0xb8>
    35d4:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    35d8:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    35dc:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    35e0:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    35e4:	8c 15       	cp	r24, r12
    35e6:	9d 05       	cpc	r25, r13
    35e8:	ae 05       	cpc	r26, r14
    35ea:	bf 05       	cpc	r27, r15
    35ec:	98 f0       	brcs	.+38     	; 0x3614 <vTaskDelayUntil+0xb8>
    35ee:	17 c0       	rjmp	.+46     	; 0x361e <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35f0:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    35f4:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    35f8:	02 96       	adiw	r24, 0x02	; 2
    35fa:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    35fe:	c7 01       	movw	r24, r14
    3600:	b6 01       	movw	r22, r12
    3602:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3606:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    360a:	81 11       	cpse	r24, r1
    360c:	0d c0       	rjmp	.+26     	; 0x3628 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    360e:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
		}
	}
    3612:	0a c0       	rjmp	.+20     	; 0x3628 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3614:	c8 82       	st	Y, r12
    3616:	d9 82       	std	Y+1, r13	; 0x01
    3618:	ea 82       	std	Y+2, r14	; 0x02
    361a:	fb 82       	std	Y+3, r15	; 0x03
    361c:	e9 cf       	rjmp	.-46     	; 0x35f0 <vTaskDelayUntil+0x94>
    361e:	c8 82       	st	Y, r12
    3620:	d9 82       	std	Y+1, r13	; 0x01
    3622:	ea 82       	std	Y+2, r14	; 0x02
    3624:	fb 82       	std	Y+3, r15	; 0x03
    3626:	ef cf       	rjmp	.-34     	; 0x3606 <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	08 95       	ret

00003636 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	6b 01       	movw	r12, r22
    3640:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3642:	67 2b       	or	r22, r23
    3644:	68 2b       	or	r22, r24
    3646:	69 2b       	or	r22, r25
    3648:	e9 f0       	breq	.+58     	; 0x3684 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    364a:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    364e:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    3652:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    3656:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    365a:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    365e:	c8 0e       	add	r12, r24
    3660:	d9 1e       	adc	r13, r25
    3662:	ea 1e       	adc	r14, r26
    3664:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3666:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    366a:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    366e:	02 96       	adiw	r24, 0x02	; 2
    3670:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3674:	c7 01       	movw	r24, r14
    3676:	b6 01       	movw	r22, r12
    3678:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    367c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3680:	81 11       	cpse	r24, r1
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3684:	0e 94 cd 13 	call	0x279a	; 0x279a <vPortYield>
		}
	}
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	df 90       	pop	r13
    368e:	cf 90       	pop	r12
    3690:	08 95       	ret

00003692 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3692:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    3696:	81 11       	cpse	r24, r1
    3698:	0c c0       	rjmp	.+24     	; 0x36b2 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    369a:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <uxTopReadyPriority>
    369e:	4b e0       	ldi	r20, 0x0B	; 11
    36a0:	e4 9f       	mul	r30, r20
    36a2:	f0 01       	movw	r30, r0
    36a4:	11 24       	eor	r1, r1
    36a6:	e4 57       	subi	r30, 0x74	; 116
    36a8:	fe 4c       	sbci	r31, 0xCE	; 206
    36aa:	80 81       	ld	r24, Z
    36ac:	88 23       	and	r24, r24
    36ae:	29 f0       	breq	.+10     	; 0x36ba <vTaskSwitchContext+0x28>
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	80 93 5a 31 	sts	0x315A, r24	; 0x80315a <xMissedYield>
    36b8:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    36ba:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    36bc:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <uxTopReadyPriority>
    36c0:	81 50       	subi	r24, 0x01	; 1
    36c2:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    36c6:	e0 91 5e 31 	lds	r30, 0x315E	; 0x80315e <uxTopReadyPriority>
    36ca:	9e 9f       	mul	r25, r30
    36cc:	f0 01       	movw	r30, r0
    36ce:	11 24       	eor	r1, r1
    36d0:	e4 57       	subi	r30, 0x74	; 116
    36d2:	fe 4c       	sbci	r31, 0xCE	; 206
    36d4:	80 81       	ld	r24, Z
    36d6:	88 23       	and	r24, r24
    36d8:	89 f3       	breq	.-30     	; 0x36bc <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    36da:	80 91 5e 31 	lds	r24, 0x315E	; 0x80315e <uxTopReadyPriority>
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4b e0       	ldi	r20, 0x0B	; 11
    36e4:	84 9f       	mul	r24, r20
    36e6:	c0 01       	movw	r24, r0
    36e8:	11 24       	eor	r1, r1
    36ea:	dc 01       	movw	r26, r24
    36ec:	a4 57       	subi	r26, 0x74	; 116
    36ee:	be 4c       	sbci	r27, 0xCE	; 206
    36f0:	11 96       	adiw	r26, 0x01	; 1
    36f2:	ed 91       	ld	r30, X+
    36f4:	fc 91       	ld	r31, X
    36f6:	12 97       	sbiw	r26, 0x02	; 2
    36f8:	04 80       	ldd	r0, Z+4	; 0x04
    36fa:	f5 81       	ldd	r31, Z+5	; 0x05
    36fc:	e0 2d       	mov	r30, r0
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	ed 93       	st	X+, r30
    3702:	fc 93       	st	X, r31
    3704:	12 97       	sbiw	r26, 0x02	; 2
    3706:	81 57       	subi	r24, 0x71	; 113
    3708:	9e 4c       	sbci	r25, 0xCE	; 206
    370a:	e8 17       	cp	r30, r24
    370c:	f9 07       	cpc	r31, r25
    370e:	61 f4       	brne	.+24     	; 0x3728 <vTaskSwitchContext+0x96>
    3710:	84 81       	ldd	r24, Z+4	; 0x04
    3712:	95 81       	ldd	r25, Z+5	; 0x05
    3714:	4b e0       	ldi	r20, 0x0B	; 11
    3716:	42 9f       	mul	r20, r18
    3718:	f0 01       	movw	r30, r0
    371a:	43 9f       	mul	r20, r19
    371c:	f0 0d       	add	r31, r0
    371e:	11 24       	eor	r1, r1
    3720:	e4 57       	subi	r30, 0x74	; 116
    3722:	fe 4c       	sbci	r31, 0xCE	; 206
    3724:	81 83       	std	Z+1, r24	; 0x01
    3726:	92 83       	std	Z+2, r25	; 0x02
    3728:	8b e0       	ldi	r24, 0x0B	; 11
    372a:	82 9f       	mul	r24, r18
    372c:	f0 01       	movw	r30, r0
    372e:	83 9f       	mul	r24, r19
    3730:	f0 0d       	add	r31, r0
    3732:	11 24       	eor	r1, r1
    3734:	e4 57       	subi	r30, 0x74	; 116
    3736:	fe 4c       	sbci	r31, 0xCE	; 206
    3738:	01 80       	ldd	r0, Z+1	; 0x01
    373a:	f2 81       	ldd	r31, Z+2	; 0x02
    373c:	e0 2d       	mov	r30, r0
    373e:	80 85       	ldd	r24, Z+8	; 0x08
    3740:	91 85       	ldd	r25, Z+9	; 0x09
    3742:	80 93 b8 31 	sts	0x31B8, r24	; 0x8031b8 <pxCurrentTCB>
    3746:	90 93 b9 31 	sts	0x31B9, r25	; 0x8031b9 <pxCurrentTCB+0x1>
    374a:	08 95       	ret

0000374c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    374c:	cf 92       	push	r12
    374e:	df 92       	push	r13
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	6a 01       	movw	r12, r20
    3756:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3758:	60 91 b8 31 	lds	r22, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    375c:	70 91 b9 31 	lds	r23, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3760:	62 5f       	subi	r22, 0xF2	; 242
    3762:	7f 4f       	sbci	r23, 0xFF	; 255
    3764:	0e 94 a8 12 	call	0x2550	; 0x2550 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3768:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    376c:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3770:	02 96       	adiw	r24, 0x02	; 2
    3772:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3776:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    377a:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    377e:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    3782:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	6c 0d       	add	r22, r12
    378c:	7d 1d       	adc	r23, r13
    378e:	8e 1d       	adc	r24, r14
    3790:	9f 1d       	adc	r25, r15
    3792:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	08 95       	ret

000037a0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    37a8:	dc 01       	movw	r26, r24
    37aa:	17 96       	adiw	r26, 0x07	; 7
    37ac:	ed 91       	ld	r30, X+
    37ae:	fc 91       	ld	r31, X
    37b0:	18 97       	sbiw	r26, 0x08	; 8
    37b2:	c0 85       	ldd	r28, Z+8	; 0x08
    37b4:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    37b6:	8e 01       	movw	r16, r28
    37b8:	02 5f       	subi	r16, 0xF2	; 242
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	c8 01       	movw	r24, r16
    37be:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    37c2:	80 91 5c 31 	lds	r24, 0x315C	; 0x80315c <uxSchedulerSuspended>
    37c6:	81 11       	cpse	r24, r1
    37c8:	16 c0       	rjmp	.+44     	; 0x37f6 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    37ca:	0c 50       	subi	r16, 0x0C	; 12
    37cc:	11 09       	sbc	r17, r1
    37ce:	c8 01       	movw	r24, r16
    37d0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    37d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37d6:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    37da:	98 17       	cp	r25, r24
    37dc:	10 f4       	brcc	.+4      	; 0x37e2 <xTaskRemoveFromEventList+0x42>
    37de:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    37e2:	bb e0       	ldi	r27, 0x0B	; 11
    37e4:	8b 9f       	mul	r24, r27
    37e6:	c0 01       	movw	r24, r0
    37e8:	11 24       	eor	r1, r1
    37ea:	b8 01       	movw	r22, r16
    37ec:	84 57       	subi	r24, 0x74	; 116
    37ee:	9e 4c       	sbci	r25, 0xCE	; 206
    37f0:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
    37f4:	05 c0       	rjmp	.+10     	; 0x3800 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    37f6:	b8 01       	movw	r22, r16
    37f8:	87 e6       	ldi	r24, 0x67	; 103
    37fa:	91 e3       	ldi	r25, 0x31	; 49
    37fc:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3800:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    3804:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    380c:	92 8d       	ldd	r25, Z+26	; 0x1a
    380e:	29 17       	cp	r18, r25
    3810:	08 f4       	brcc	.+2      	; 0x3814 <xTaskRemoveFromEventList+0x74>
    3812:	80 e0       	ldi	r24, 0x00	; 0
}
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	08 95       	ret

0000381e <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    381e:	20 91 59 31 	lds	r18, 0x3159	; 0x803159 <xNumOfOverflows>
    3822:	fc 01       	movw	r30, r24
    3824:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3826:	40 91 60 31 	lds	r20, 0x3160	; 0x803160 <xTickCount>
    382a:	50 91 61 31 	lds	r21, 0x3161	; 0x803161 <xTickCount+0x1>
    382e:	60 91 62 31 	lds	r22, 0x3162	; 0x803162 <xTickCount+0x2>
    3832:	70 91 63 31 	lds	r23, 0x3163	; 0x803163 <xTickCount+0x3>
    3836:	41 83       	std	Z+1, r20	; 0x01
    3838:	52 83       	std	Z+2, r21	; 0x02
    383a:	63 83       	std	Z+3, r22	; 0x03
    383c:	74 83       	std	Z+4, r23	; 0x04
    383e:	08 95       	ret

00003840 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3840:	8f 92       	push	r8
    3842:	9f 92       	push	r9
    3844:	af 92       	push	r10
    3846:	bf 92       	push	r11
    3848:	cf 92       	push	r12
    384a:	df 92       	push	r13
    384c:	ef 92       	push	r14
    384e:	ff 92       	push	r15
    3850:	0f 93       	push	r16
    3852:	1f 93       	push	r17
    3854:	cf 93       	push	r28
    3856:	df 93       	push	r29
    3858:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3860:	80 91 59 31 	lds	r24, 0x3159	; 0x803159 <xNumOfOverflows>
    3864:	90 81       	ld	r25, Z
    3866:	98 17       	cp	r25, r24
    3868:	89 f0       	breq	.+34     	; 0x388c <xTaskCheckForTimeOut+0x4c>
    386a:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    386e:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    3872:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    3876:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    387a:	01 81       	ldd	r16, Z+1	; 0x01
    387c:	12 81       	ldd	r17, Z+2	; 0x02
    387e:	23 81       	ldd	r18, Z+3	; 0x03
    3880:	34 81       	ldd	r19, Z+4	; 0x04
    3882:	80 17       	cp	r24, r16
    3884:	91 07       	cpc	r25, r17
    3886:	a2 07       	cpc	r26, r18
    3888:	b3 07       	cpc	r27, r19
    388a:	a8 f5       	brcc	.+106    	; 0x38f6 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    388c:	80 91 60 31 	lds	r24, 0x3160	; 0x803160 <xTickCount>
    3890:	90 91 61 31 	lds	r25, 0x3161	; 0x803161 <xTickCount+0x1>
    3894:	a0 91 62 31 	lds	r26, 0x3162	; 0x803162 <xTickCount+0x2>
    3898:	b0 91 63 31 	lds	r27, 0x3163	; 0x803163 <xTickCount+0x3>
    389c:	c1 80       	ldd	r12, Z+1	; 0x01
    389e:	d2 80       	ldd	r13, Z+2	; 0x02
    38a0:	e3 80       	ldd	r14, Z+3	; 0x03
    38a2:	f4 80       	ldd	r15, Z+4	; 0x04
    38a4:	eb 01       	movw	r28, r22
    38a6:	08 81       	ld	r16, Y
    38a8:	19 81       	ldd	r17, Y+1	; 0x01
    38aa:	2a 81       	ldd	r18, Y+2	; 0x02
    38ac:	3b 81       	ldd	r19, Y+3	; 0x03
    38ae:	8c 19       	sub	r24, r12
    38b0:	9d 09       	sbc	r25, r13
    38b2:	ae 09       	sbc	r26, r14
    38b4:	bf 09       	sbc	r27, r15
    38b6:	80 17       	cp	r24, r16
    38b8:	91 07       	cpc	r25, r17
    38ba:	a2 07       	cpc	r26, r18
    38bc:	b3 07       	cpc	r27, r19
    38be:	e8 f4       	brcc	.+58     	; 0x38fa <xTaskCheckForTimeOut+0xba>
    38c0:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    38c2:	80 90 60 31 	lds	r8, 0x3160	; 0x803160 <xTickCount>
    38c6:	90 90 61 31 	lds	r9, 0x3161	; 0x803161 <xTickCount+0x1>
    38ca:	a0 90 62 31 	lds	r10, 0x3162	; 0x803162 <xTickCount+0x2>
    38ce:	b0 90 63 31 	lds	r11, 0x3163	; 0x803163 <xTickCount+0x3>
    38d2:	b5 01       	movw	r22, r10
    38d4:	a4 01       	movw	r20, r8
    38d6:	4c 19       	sub	r20, r12
    38d8:	5d 09       	sbc	r21, r13
    38da:	6e 09       	sbc	r22, r14
    38dc:	7f 09       	sbc	r23, r15
    38de:	04 1b       	sub	r16, r20
    38e0:	15 0b       	sbc	r17, r21
    38e2:	26 0b       	sbc	r18, r22
    38e4:	37 0b       	sbc	r19, r23
    38e6:	08 83       	st	Y, r16
    38e8:	19 83       	std	Y+1, r17	; 0x01
    38ea:	2a 83       	std	Y+2, r18	; 0x02
    38ec:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    38ee:	0e 94 0f 1c 	call	0x381e	; 0x381e <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	03 c0       	rjmp	.+6      	; 0x38fc <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    38fc:	0f 90       	pop	r0
    38fe:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	bf 90       	pop	r11
    3912:	af 90       	pop	r10
    3914:	9f 90       	pop	r9
    3916:	8f 90       	pop	r8
    3918:	08 95       	ret

0000391a <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	80 93 5a 31 	sts	0x315A, r24	; 0x80315a <xMissedYield>
    3920:	08 95       	ret

00003922 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	21 f4       	brne	.+8      	; 0x392e <uxTaskGetStackHighWaterMark+0xc>
    3926:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    392a:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    392e:	dc 01       	movw	r26, r24
    3930:	5b 96       	adiw	r26, 0x1b	; 27
    3932:	ed 91       	ld	r30, X+
    3934:	fc 91       	ld	r31, X
    3936:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3938:	80 81       	ld	r24, Z
    393a:	81 31       	cpi	r24, 0x11	; 17
    393c:	41 f4       	brne	.+16     	; 0x394e <uxTaskGetStackHighWaterMark+0x2c>
    393e:	31 96       	adiw	r30, 0x01	; 1
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3944:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3946:	21 91       	ld	r18, Z+
    3948:	21 31       	cpi	r18, 0x11	; 17
    394a:	e1 f3       	breq	.-8      	; 0x3944 <uxTaskGetStackHighWaterMark+0x22>
    394c:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3952:	08 95       	ret

00003954 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3954:	80 91 b8 31 	lds	r24, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    3958:	90 91 b9 31 	lds	r25, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>

		return xReturn;
	}
    395c:	08 95       	ret

0000395e <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    395e:	0f 93       	push	r16
    3960:	1f 93       	push	r17
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3968:	22 8d       	ldd	r18, Z+26	; 0x1a
    396a:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    396e:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3972:	5a 96       	adiw	r26, 0x1a	; 26
    3974:	8c 91       	ld	r24, X
    3976:	28 17       	cp	r18, r24
    3978:	08 f0       	brcs	.+2      	; 0x397c <vTaskPriorityInherit+0x1e>
    397a:	41 c0       	rjmp	.+130    	; 0x39fe <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    397c:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    3980:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    3984:	5a 96       	adiw	r26, 0x1a	; 26
    3986:	3c 91       	ld	r19, X
    3988:	84 e0       	ldi	r24, 0x04	; 4
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a0 e0       	ldi	r26, 0x00	; 0
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	83 1b       	sub	r24, r19
    3992:	91 09       	sbc	r25, r1
    3994:	a1 09       	sbc	r26, r1
    3996:	b1 09       	sbc	r27, r1
    3998:	86 87       	std	Z+14, r24	; 0x0e
    399a:	97 87       	std	Z+15, r25	; 0x0f
    399c:	a0 8b       	std	Z+16, r26	; 0x10
    399e:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    39a0:	8b e0       	ldi	r24, 0x0B	; 11
    39a2:	28 9f       	mul	r18, r24
    39a4:	90 01       	movw	r18, r0
    39a6:	11 24       	eor	r1, r1
    39a8:	24 57       	subi	r18, 0x74	; 116
    39aa:	3e 4c       	sbci	r19, 0xCE	; 206
    39ac:	84 85       	ldd	r24, Z+12	; 0x0c
    39ae:	95 85       	ldd	r25, Z+13	; 0x0d
    39b0:	82 17       	cp	r24, r18
    39b2:	93 07       	cpc	r25, r19
    39b4:	e9 f4       	brne	.+58     	; 0x39f0 <vTaskPriorityInherit+0x92>
    39b6:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    39b8:	ef 01       	movw	r28, r30
    39ba:	22 96       	adiw	r28, 0x02	; 2
    39bc:	ce 01       	movw	r24, r28
    39be:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    39c2:	e0 91 b8 31 	lds	r30, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    39c6:	f0 91 b9 31 	lds	r31, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    39ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    39cc:	f8 01       	movw	r30, r16
    39ce:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    39d0:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    39d4:	98 17       	cp	r25, r24
    39d6:	10 f4       	brcc	.+4      	; 0x39dc <vTaskPriorityInherit+0x7e>
    39d8:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    39dc:	fb e0       	ldi	r31, 0x0B	; 11
    39de:	8f 9f       	mul	r24, r31
    39e0:	c0 01       	movw	r24, r0
    39e2:	11 24       	eor	r1, r1
    39e4:	be 01       	movw	r22, r28
    39e6:	84 57       	subi	r24, 0x74	; 116
    39e8:	9e 4c       	sbci	r25, 0xCE	; 206
    39ea:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
    39ee:	07 c0       	rjmp	.+14     	; 0x39fe <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    39f0:	a0 91 b8 31 	lds	r26, 0x31B8	; 0x8031b8 <pxCurrentTCB>
    39f4:	b0 91 b9 31 	lds	r27, 0x31B9	; 0x8031b9 <pxCurrentTCB+0x1>
    39f8:	5a 96       	adiw	r26, 0x1a	; 26
    39fa:	8c 91       	ld	r24, X
    39fc:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	08 95       	ret

00003a08 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	49 f1       	breq	.+82     	; 0x3a66 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3a14:	fc 01       	movw	r30, r24
    3a16:	32 8d       	ldd	r19, Z+26	; 0x1a
    3a18:	27 a1       	ldd	r18, Z+39	; 0x27
    3a1a:	32 17       	cp	r19, r18
    3a1c:	21 f1       	breq	.+72     	; 0x3a66 <vTaskPriorityDisinherit+0x5e>
    3a1e:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3a20:	8c 01       	movw	r16, r24
    3a22:	0e 5f       	subi	r16, 0xFE	; 254
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	c8 01       	movw	r24, r16
    3a28:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3a2c:	8f a1       	ldd	r24, Y+39	; 0x27
    3a2e:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3a30:	44 e0       	ldi	r20, 0x04	; 4
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	48 1b       	sub	r20, r24
    3a3a:	51 09       	sbc	r21, r1
    3a3c:	61 09       	sbc	r22, r1
    3a3e:	71 09       	sbc	r23, r1
    3a40:	4e 87       	std	Y+14, r20	; 0x0e
    3a42:	5f 87       	std	Y+15, r21	; 0x0f
    3a44:	68 8b       	std	Y+16, r22	; 0x10
    3a46:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3a48:	90 91 5e 31 	lds	r25, 0x315E	; 0x80315e <uxTopReadyPriority>
    3a4c:	98 17       	cp	r25, r24
    3a4e:	10 f4       	brcc	.+4      	; 0x3a54 <vTaskPriorityDisinherit+0x4c>
    3a50:	80 93 5e 31 	sts	0x315E, r24	; 0x80315e <uxTopReadyPriority>
    3a54:	fb e0       	ldi	r31, 0x0B	; 11
    3a56:	8f 9f       	mul	r24, r31
    3a58:	c0 01       	movw	r24, r0
    3a5a:	11 24       	eor	r1, r1
    3a5c:	b8 01       	movw	r22, r16
    3a5e:	84 57       	subi	r24, 0x74	; 116
    3a60:	9e 4c       	sbci	r25, 0xCE	; 206
    3a62:	0e 94 81 12 	call	0x2502	; 0x2502 <vListInsertEnd>
			}
		}
	}
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	08 95       	ret

00003a70 <__divmodsi4>:
    3a70:	05 2e       	mov	r0, r21
    3a72:	97 fb       	bst	r25, 7
    3a74:	1e f4       	brtc	.+6      	; 0x3a7c <__divmodsi4+0xc>
    3a76:	00 94       	com	r0
    3a78:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__negsi2>
    3a7c:	57 fd       	sbrc	r21, 7
    3a7e:	07 d0       	rcall	.+14     	; 0x3a8e <__divmodsi4_neg2>
    3a80:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodsi4>
    3a84:	07 fc       	sbrc	r0, 7
    3a86:	03 d0       	rcall	.+6      	; 0x3a8e <__divmodsi4_neg2>
    3a88:	4e f4       	brtc	.+18     	; 0x3a9c <__divmodsi4_exit>
    3a8a:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <__negsi2>

00003a8e <__divmodsi4_neg2>:
    3a8e:	50 95       	com	r21
    3a90:	40 95       	com	r20
    3a92:	30 95       	com	r19
    3a94:	21 95       	neg	r18
    3a96:	3f 4f       	sbci	r19, 0xFF	; 255
    3a98:	4f 4f       	sbci	r20, 0xFF	; 255
    3a9a:	5f 4f       	sbci	r21, 0xFF	; 255

00003a9c <__divmodsi4_exit>:
    3a9c:	08 95       	ret

00003a9e <__negsi2>:
    3a9e:	90 95       	com	r25
    3aa0:	80 95       	com	r24
    3aa2:	70 95       	com	r23
    3aa4:	61 95       	neg	r22
    3aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3aac:	08 95       	ret

00003aae <__udivmodsi4>:
    3aae:	a1 e2       	ldi	r26, 0x21	; 33
    3ab0:	1a 2e       	mov	r1, r26
    3ab2:	aa 1b       	sub	r26, r26
    3ab4:	bb 1b       	sub	r27, r27
    3ab6:	fd 01       	movw	r30, r26
    3ab8:	0d c0       	rjmp	.+26     	; 0x3ad4 <__udivmodsi4_ep>

00003aba <__udivmodsi4_loop>:
    3aba:	aa 1f       	adc	r26, r26
    3abc:	bb 1f       	adc	r27, r27
    3abe:	ee 1f       	adc	r30, r30
    3ac0:	ff 1f       	adc	r31, r31
    3ac2:	a2 17       	cp	r26, r18
    3ac4:	b3 07       	cpc	r27, r19
    3ac6:	e4 07       	cpc	r30, r20
    3ac8:	f5 07       	cpc	r31, r21
    3aca:	20 f0       	brcs	.+8      	; 0x3ad4 <__udivmodsi4_ep>
    3acc:	a2 1b       	sub	r26, r18
    3ace:	b3 0b       	sbc	r27, r19
    3ad0:	e4 0b       	sbc	r30, r20
    3ad2:	f5 0b       	sbc	r31, r21

00003ad4 <__udivmodsi4_ep>:
    3ad4:	66 1f       	adc	r22, r22
    3ad6:	77 1f       	adc	r23, r23
    3ad8:	88 1f       	adc	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	1a 94       	dec	r1
    3ade:	69 f7       	brne	.-38     	; 0x3aba <__udivmodsi4_loop>
    3ae0:	60 95       	com	r22
    3ae2:	70 95       	com	r23
    3ae4:	80 95       	com	r24
    3ae6:	90 95       	com	r25
    3ae8:	9b 01       	movw	r18, r22
    3aea:	ac 01       	movw	r20, r24
    3aec:	bd 01       	movw	r22, r26
    3aee:	cf 01       	movw	r24, r30
    3af0:	08 95       	ret

00003af2 <memcpy>:
    3af2:	fb 01       	movw	r30, r22
    3af4:	dc 01       	movw	r26, r24
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <memcpy+0xa>
    3af8:	01 90       	ld	r0, Z+
    3afa:	0d 92       	st	X+, r0
    3afc:	41 50       	subi	r20, 0x01	; 1
    3afe:	50 40       	sbci	r21, 0x00	; 0
    3b00:	d8 f7       	brcc	.-10     	; 0x3af8 <memcpy+0x6>
    3b02:	08 95       	ret

00003b04 <memset>:
    3b04:	dc 01       	movw	r26, r24
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <memset+0x6>
    3b08:	6d 93       	st	X+, r22
    3b0a:	41 50       	subi	r20, 0x01	; 1
    3b0c:	50 40       	sbci	r21, 0x00	; 0
    3b0e:	e0 f7       	brcc	.-8      	; 0x3b08 <memset+0x4>
    3b10:	08 95       	ret

00003b12 <strncpy>:
    3b12:	fb 01       	movw	r30, r22
    3b14:	dc 01       	movw	r26, r24
    3b16:	41 50       	subi	r20, 0x01	; 1
    3b18:	50 40       	sbci	r21, 0x00	; 0
    3b1a:	48 f0       	brcs	.+18     	; 0x3b2e <strncpy+0x1c>
    3b1c:	01 90       	ld	r0, Z+
    3b1e:	0d 92       	st	X+, r0
    3b20:	00 20       	and	r0, r0
    3b22:	c9 f7       	brne	.-14     	; 0x3b16 <strncpy+0x4>
    3b24:	01 c0       	rjmp	.+2      	; 0x3b28 <strncpy+0x16>
    3b26:	1d 92       	st	X+, r1
    3b28:	41 50       	subi	r20, 0x01	; 1
    3b2a:	50 40       	sbci	r21, 0x00	; 0
    3b2c:	e0 f7       	brcc	.-8      	; 0x3b26 <strncpy+0x14>
    3b2e:	08 95       	ret

00003b30 <ultoa>:
    3b30:	25 32       	cpi	r18, 0x25	; 37
    3b32:	31 05       	cpc	r19, r1
    3b34:	20 f4       	brcc	.+8      	; 0x3b3e <ultoa+0xe>
    3b36:	22 30       	cpi	r18, 0x02	; 2
    3b38:	10 f0       	brcs	.+4      	; 0x3b3e <ultoa+0xe>
    3b3a:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__ultoa_ncheck>
    3b3e:	fa 01       	movw	r30, r20
    3b40:	10 82       	st	Z, r1
    3b42:	ca 01       	movw	r24, r20
    3b44:	08 95       	ret

00003b46 <__ultoa_ncheck>:
    3b46:	bb 27       	eor	r27, r27

00003b48 <__ultoa_common>:
    3b48:	fa 01       	movw	r30, r20
    3b4a:	a6 2f       	mov	r26, r22
    3b4c:	62 17       	cp	r22, r18
    3b4e:	71 05       	cpc	r23, r1
    3b50:	81 05       	cpc	r24, r1
    3b52:	91 05       	cpc	r25, r1
    3b54:	33 0b       	sbc	r19, r19
    3b56:	30 fb       	bst	r19, 0
    3b58:	66 f0       	brts	.+24     	; 0x3b72 <__ultoa_common+0x2a>
    3b5a:	aa 27       	eor	r26, r26
    3b5c:	66 0f       	add	r22, r22
    3b5e:	77 1f       	adc	r23, r23
    3b60:	88 1f       	adc	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	aa 1f       	adc	r26, r26
    3b66:	a2 17       	cp	r26, r18
    3b68:	10 f0       	brcs	.+4      	; 0x3b6e <__ultoa_common+0x26>
    3b6a:	a2 1b       	sub	r26, r18
    3b6c:	63 95       	inc	r22
    3b6e:	38 50       	subi	r19, 0x08	; 8
    3b70:	a9 f7       	brne	.-22     	; 0x3b5c <__ultoa_common+0x14>
    3b72:	a0 5d       	subi	r26, 0xD0	; 208
    3b74:	aa 33       	cpi	r26, 0x3A	; 58
    3b76:	08 f0       	brcs	.+2      	; 0x3b7a <__ultoa_common+0x32>
    3b78:	a9 5d       	subi	r26, 0xD9	; 217
    3b7a:	a1 93       	st	Z+, r26
    3b7c:	36 f7       	brtc	.-52     	; 0x3b4a <__ultoa_common+0x2>
    3b7e:	b1 11       	cpse	r27, r1
    3b80:	b1 93       	st	Z+, r27
    3b82:	10 82       	st	Z, r1
    3b84:	ca 01       	movw	r24, r20
    3b86:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <strrev>

00003b8a <utoa>:
    3b8a:	45 32       	cpi	r20, 0x25	; 37
    3b8c:	51 05       	cpc	r21, r1
    3b8e:	20 f4       	brcc	.+8      	; 0x3b98 <utoa+0xe>
    3b90:	42 30       	cpi	r20, 0x02	; 2
    3b92:	10 f0       	brcs	.+4      	; 0x3b98 <utoa+0xe>
    3b94:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__utoa_ncheck>
    3b98:	fb 01       	movw	r30, r22
    3b9a:	10 82       	st	Z, r1
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	08 95       	ret

00003ba0 <__utoa_ncheck>:
    3ba0:	bb 27       	eor	r27, r27

00003ba2 <__utoa_common>:
    3ba2:	fb 01       	movw	r30, r22
    3ba4:	55 27       	eor	r21, r21
    3ba6:	aa 27       	eor	r26, r26
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	aa 1f       	adc	r26, r26
    3bae:	a4 17       	cp	r26, r20
    3bb0:	10 f0       	brcs	.+4      	; 0x3bb6 <__utoa_common+0x14>
    3bb2:	a4 1b       	sub	r26, r20
    3bb4:	83 95       	inc	r24
    3bb6:	50 51       	subi	r21, 0x10	; 16
    3bb8:	b9 f7       	brne	.-18     	; 0x3ba8 <__utoa_common+0x6>
    3bba:	a0 5d       	subi	r26, 0xD0	; 208
    3bbc:	aa 33       	cpi	r26, 0x3A	; 58
    3bbe:	08 f0       	brcs	.+2      	; 0x3bc2 <__utoa_common+0x20>
    3bc0:	a9 5d       	subi	r26, 0xD9	; 217
    3bc2:	a1 93       	st	Z+, r26
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	79 f7       	brne	.-34     	; 0x3ba6 <__utoa_common+0x4>
    3bc8:	b1 11       	cpse	r27, r1
    3bca:	b1 93       	st	Z+, r27
    3bcc:	11 92       	st	Z+, r1
    3bce:	cb 01       	movw	r24, r22
    3bd0:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <strrev>

00003bd4 <strrev>:
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	67 2f       	mov	r22, r23
    3bda:	71 91       	ld	r23, Z+
    3bdc:	77 23       	and	r23, r23
    3bde:	e1 f7       	brne	.-8      	; 0x3bd8 <strrev+0x4>
    3be0:	32 97       	sbiw	r30, 0x02	; 2
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <strrev+0x18>
    3be4:	7c 91       	ld	r23, X
    3be6:	6d 93       	st	X+, r22
    3be8:	70 83       	st	Z, r23
    3bea:	62 91       	ld	r22, -Z
    3bec:	ae 17       	cp	r26, r30
    3bee:	bf 07       	cpc	r27, r31
    3bf0:	c8 f3       	brcs	.-14     	; 0x3be4 <strrev+0x10>
    3bf2:	08 95       	ret

00003bf4 <__mulsi3>:
    3bf4:	db 01       	movw	r26, r22
    3bf6:	8f 93       	push	r24
    3bf8:	9f 93       	push	r25
    3bfa:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__muluhisi3>
    3bfe:	bf 91       	pop	r27
    3c00:	af 91       	pop	r26
    3c02:	a2 9f       	mul	r26, r18
    3c04:	80 0d       	add	r24, r0
    3c06:	91 1d       	adc	r25, r1
    3c08:	a3 9f       	mul	r26, r19
    3c0a:	90 0d       	add	r25, r0
    3c0c:	b2 9f       	mul	r27, r18
    3c0e:	90 0d       	add	r25, r0
    3c10:	11 24       	eor	r1, r1
    3c12:	08 95       	ret

00003c14 <__tablejump2__>:
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	88 1f       	adc	r24, r24
    3c1a:	8b bf       	out	0x3b, r24	; 59
    3c1c:	07 90       	elpm	r0, Z+
    3c1e:	f6 91       	elpm	r31, Z
    3c20:	e0 2d       	mov	r30, r0
    3c22:	1b be       	out	0x3b, r1	; 59
    3c24:	19 94       	eijmp

00003c26 <__muluhisi3>:
    3c26:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__umulhisi3>
    3c2a:	a5 9f       	mul	r26, r21
    3c2c:	90 0d       	add	r25, r0
    3c2e:	b4 9f       	mul	r27, r20
    3c30:	90 0d       	add	r25, r0
    3c32:	a4 9f       	mul	r26, r20
    3c34:	80 0d       	add	r24, r0
    3c36:	91 1d       	adc	r25, r1
    3c38:	11 24       	eor	r1, r1
    3c3a:	08 95       	ret

00003c3c <__umulhisi3>:
    3c3c:	a2 9f       	mul	r26, r18
    3c3e:	b0 01       	movw	r22, r0
    3c40:	b3 9f       	mul	r27, r19
    3c42:	c0 01       	movw	r24, r0
    3c44:	a3 9f       	mul	r26, r19
    3c46:	70 0d       	add	r23, r0
    3c48:	81 1d       	adc	r24, r1
    3c4a:	11 24       	eor	r1, r1
    3c4c:	91 1d       	adc	r25, r1
    3c4e:	b2 9f       	mul	r27, r18
    3c50:	70 0d       	add	r23, r0
    3c52:	81 1d       	adc	r24, r1
    3c54:	11 24       	eor	r1, r1
    3c56:	91 1d       	adc	r25, r1
    3c58:	08 95       	ret

00003c5a <_exit>:
    3c5a:	f8 94       	cli

00003c5c <__stop_program>:
    3c5c:	ff cf       	rjmp	.-2      	; 0x3c5c <__stop_program>
