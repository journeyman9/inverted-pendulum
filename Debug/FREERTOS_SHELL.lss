
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000401a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  0000401a  000040ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010b4  008020de  008020de  0000418c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  000095bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000e054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00011082  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000135ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      64:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_25>
      68:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      6c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      70:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_28>
      74:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      78:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      7c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      80:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      84:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      88:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      8c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      90:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      94:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      98:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      9c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c4:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_49>
      c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e8:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_58>
      ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     100:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     104:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     108:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     10c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     110:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     114:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     118:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     11c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     120:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     124:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     128:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     12c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     130:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     134:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     138:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     13c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     140:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     144:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     148:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     14c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     150:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     154:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     158:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     15c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     160:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_88>
     164:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     168:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     16c:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__vector_91>
     170:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     174:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     178:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     17c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     180:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     184:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     188:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     18c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     190:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     194:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     198:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     19c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1fc:	e0 05       	cpc	r30, r0
     1fe:	e3 05       	cpc	r30, r3
     200:	e6 05       	cpc	r30, r6
     202:	e9 05       	cpc	r30, r9
     204:	ec 05       	cpc	r30, r12
     206:	ef 05       	cpc	r30, r15
     208:	f1 05       	cpc	r31, r1
     20a:	02 06       	cpc	r0, r18
     20c:	0a 06       	cpc	r0, r26
     20e:	14 06       	cpc	r1, r20
     210:	12 06       	cpc	r1, r18
     212:	d7 0b       	sbc	r29, r23
     214:	58 0c       	add	r5, r8
     216:	58 0c       	add	r5, r8
     218:	58 0c       	add	r5, r8
     21a:	58 0c       	add	r5, r8
     21c:	58 0c       	add	r5, r8
     21e:	58 0c       	add	r5, r8
     220:	58 0c       	add	r5, r8
     222:	58 0c       	add	r5, r8
     224:	58 0c       	add	r5, r8
     226:	58 0c       	add	r5, r8
     228:	58 0c       	add	r5, r8
     22a:	58 0c       	add	r5, r8
     22c:	58 0c       	add	r5, r8
     22e:	58 0c       	add	r5, r8
     230:	58 0c       	add	r5, r8
     232:	58 0c       	add	r5, r8
     234:	58 0c       	add	r5, r8
     236:	58 0c       	add	r5, r8
     238:	58 0c       	add	r5, r8
     23a:	58 0c       	add	r5, r8
     23c:	58 0c       	add	r5, r8
     23e:	58 0c       	add	r5, r8
     240:	58 0c       	add	r5, r8
     242:	58 0c       	add	r5, r8
     244:	58 0c       	add	r5, r8
     246:	58 0c       	add	r5, r8
     248:	58 0c       	add	r5, r8
     24a:	58 0c       	add	r5, r8
     24c:	58 0c       	add	r5, r8
     24e:	58 0c       	add	r5, r8
     250:	58 0c       	add	r5, r8
     252:	58 0c       	add	r5, r8
     254:	58 0c       	add	r5, r8
     256:	58 0c       	add	r5, r8
     258:	58 0c       	add	r5, r8
     25a:	58 0c       	add	r5, r8
     25c:	58 0c       	add	r5, r8
     25e:	58 0c       	add	r5, r8
     260:	58 0c       	add	r5, r8
     262:	58 0c       	add	r5, r8
     264:	58 0c       	add	r5, r8
     266:	58 0c       	add	r5, r8
     268:	58 0c       	add	r5, r8
     26a:	58 0c       	add	r5, r8
     26c:	58 0c       	add	r5, r8
     26e:	58 0c       	add	r5, r8
     270:	58 0c       	add	r5, r8
     272:	58 0c       	add	r5, r8
     274:	58 0c       	add	r5, r8
     276:	58 0c       	add	r5, r8
     278:	58 0c       	add	r5, r8
     27a:	58 0c       	add	r5, r8
     27c:	58 0c       	add	r5, r8
     27e:	58 0c       	add	r5, r8
     280:	58 0c       	add	r5, r8
     282:	58 0c       	add	r5, r8
     284:	58 0c       	add	r5, r8
     286:	58 0c       	add	r5, r8
     288:	58 0c       	add	r5, r8
     28a:	58 0c       	add	r5, r8
     28c:	58 0c       	add	r5, r8
     28e:	58 0c       	add	r5, r8
     290:	58 0c       	add	r5, r8
     292:	58 0c       	add	r5, r8
     294:	58 0c       	add	r5, r8
     296:	58 0c       	add	r5, r8
     298:	58 0c       	add	r5, r8
     29a:	58 0c       	add	r5, r8
     29c:	58 0c       	add	r5, r8
     29e:	58 0c       	add	r5, r8
     2a0:	ec 0b       	sbc	r30, r28
     2a2:	58 0c       	add	r5, r8
     2a4:	22 0c       	add	r2, r2
     2a6:	d7 0b       	sbc	r29, r23
     2a8:	58 0c       	add	r5, r8
     2aa:	08 0c       	add	r0, r8
     2ac:	d3 0b       	sbc	r29, r19
     2ae:	58 0c       	add	r5, r8
     2b0:	58 0c       	add	r5, r8
     2b2:	58 0c       	add	r5, r8
     2b4:	58 0c       	add	r5, r8
     2b6:	58 0c       	add	r5, r8
     2b8:	94 0a       	sbc	r9, r20
     2ba:	58 0c       	add	r5, r8
     2bc:	58 0c       	add	r5, r8
     2be:	58 0c       	add	r5, r8
     2c0:	3e 0c       	add	r3, r14
     2c2:	99 0b       	sbc	r25, r25
     2c4:	58 0c       	add	r5, r8
     2c6:	58 0c       	add	r5, r8
     2c8:	a2 0a       	sbc	r10, r18

000002ca <__trampolines_start>:
     2ca:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_ZN8emstreamlsE15ser_manipulator+0x82>
     2ce:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_ZN8emstreamlsE15ser_manipulator+0x3c>
     2d2:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_ZN5rs2327putcharEc>
     2d6:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_ZN8emstreamlsE15ser_manipulator+0x36>
     2da:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <_ZN5rs23212clear_screenEv>
     2de:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_ZN8emstreamlsE15ser_manipulator+0x2a>
     2e2:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN8emstream12transmit_nowEv>
     2e6:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
     2ea:	0c 94 16 04 	jmp	0x82c	; 0x82c <_ZN21task_pendulum_encoder3runEv>
     2ee:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN8emstream13ready_to_sendEv>
     2f2:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_ZN18task_motor_encoder3runEv>
     2f6:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_ZN17task_limit_switch3runEv>
     2fa:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN8emstream7getcharEv>
     2fe:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_ZN9task_user3runEv+0x186>
     302:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <_ZN5rs23214check_for_charEv>
     306:	0c 94 07 04 	jmp	0x80e	; 0x80e <_call_static_run_method>
     30a:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <_ZN9task_user3runEv+0x486>
     30e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN8emstream14check_for_charEv>
     312:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN14frt_text_queue7putcharEc>
     316:	0c 94 df 09 	jmp	0x13be	; 0x13be <_ZN9task_user3runEv>
     31a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     31e:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <_ZN5rs2327getcharEv>
     322:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <_ZN9task_user3runEv+0x41a>
     326:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__cxa_pure_virtual>
     32a:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_ZN8emstreamlsE15ser_manipulator+0x40>
     32e:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
     332:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     336:	0c 94 21 08 	jmp	0x1042	; 0x1042 <_ZN8frt_task12print_statusER8emstream>
     33a:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <_ZN9task_user3runEv+0x452>
     33e:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <_ZN22task_system_controller3runEv>
     342:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <_ZN9task_user3runEv+0x16a>
     346:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <_ZN9task_user3runEv+0x3f0>
     34a:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN18task_motor_command3runEv>
     34e:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <_ZN9task_user3runEv+0x4be>
     352:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <_ZN9task_user3runEv+0x374>
     356:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_ZN8emstreamlsE15ser_manipulator+0x62>
     35a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_ZN8emstreamlsE15ser_manipulator+0x24>
     35e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_ZN8emstreamlsE15ser_manipulator+0x72>
     362:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_ZN8emstreamlsE15ser_manipulator+0x30>
     366:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <_ZN9task_user3runEv+0x4f2>
     36a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN8emstream12clear_screenEv>
     36e:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <_GLOBAL__sub_I_counter>
     372:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_ZN9task_user3runEv+0x3e8>
     376:	0c 94 4f 19 	jmp	0x329e	; 0x329e <prvIdleTask>

0000037a <__trampolines_end>:
     37a:	09 09       	sbc	r16, r9
	...

0000037d <_ZZ15print_task_listP8emstreamE3__c_8>:
     37d:	2f 00                                               /.

0000037f <_ZZ15print_task_listP8emstreamE3__c_7>:
     37f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000038a <_ZZ15print_task_listP8emstreamE3__c_6>:
     38a:	09 2d 2d 2d 2d 00                                   .----.

00000390 <_ZZ15print_task_listP8emstreamE3__c_5>:
     390:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000039c <_ZZ15print_task_listP8emstreamE3__c_4>:
     39c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000003ad <_ZZ15print_task_listP8emstreamE3__c_3>:
     3ad:	09 52 75 6e 73 00                                   .Runs.

000003b3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     3b3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000003bf <_ZZ15print_task_listP8emstreamE3__c_1>:
     3bf:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000003d0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     3d0:	09 53 74 61 63 6b 00                                .Stack.

000003d7 <_ZZ15print_task_listP8emstreamE3__c>:
     3d7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000003e2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3e2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003ed <_ZZN9task_user11show_statusEvE3__c_3>:
     3ed:	2f 00                                               /.

000003ef <_ZZN9task_user11show_statusEvE3__c_2>:
     3ef:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003fd <_ZZN9task_user11show_statusEvE3__c_1>:
     3fd:	54 69 6d 65 3a 20 00                                Time: .

00000404 <_ZZN9task_user11show_statusEvE3__c_0>:
     404:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000410 <_ZZN9task_user11show_statusEvE3__c>:
     410:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     420:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000042f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     42f:	1b 5b 32 32 6d 00                                   .[22m.

00000435 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     435:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000440 <_ZZ17print_task_stacksP8emstreamE3__c>:
     440:	1b 5b 31 6d 00                                      .[1m.

00000445 <_ZZN9task_user3runEvE3__c_7>:
     445:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     455:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000462 <_ZZN9task_user3runEvE3__c_6>:
     462:	3a 57 54 46 3f 00                                   :WTF?.

00000468 <_ZZN9task_user3runEvE3__c_5>:
     468:	52 65 73 65 74 2c 20 74 72 79 20 48 6f 6d 69 6e     Reset, try Homin
     478:	67 20 61 67 61 69 6e 20 62 79 20 70 72 65 73 73     g again by press
     488:	69 6e 67 20 27 62 27 00                             ing 'b'.

00000490 <_ZZN9task_user3runEvE3__c_4>:
     490:	45 4d 45 52 47 45 4e 43 59 20 53 54 4f 50 00        EMERGENCY STOP.

0000049f <_ZZN9task_user3runEvE3__c_3>:
     49f:	43 6f 6d 6d 65 6e 63 65 20 42 61 6c 61 6e 63 65     Commence Balance
	...

000004b0 <_ZZN9task_user3runEvE3__c_2>:
     4b0:	42 65 67 69 6e 20 48 6f 6d 69 6e 67 00              Begin Homing.

000004bd <_ZZN9task_user3runEvE3__c_1>:
     4bd:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4cd:	65 00                                               e.

000004cf <_ZZN9task_user3runEvE3__c_0>:
     4cf:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004dd <_ZZN9task_user3runEvE3__c>:
     4dd:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ed:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004fb <_ZZN9task_user18print_help_messageEvE3__c_14>:
     4fb:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_13>:
     50a:	20 20 20 20 72 3a 20 20 20 52 65 73 65 74 20 74         r:   Reset t
     51a:	6f 20 49 64 6c 65 00                                o Idle.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_12>:
     521:	20 20 20 20 64 3a 20 20 20 45 6d 65 72 67 65 6e         d:   Emergen
     531:	63 79 20 53 74 6f 70 00                             cy Stop.

00000539 <_ZZN9task_user18print_help_messageEvE3__c_11>:
     539:	20 20 20 20 67 3a 20 20 20 53 74 61 72 74 20 42         g:   Start B
     549:	61 6c 61 6e 63 65 21 00                             alance!.

00000551 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     551:	20 20 20 20 62 3a 20 20 20 42 65 67 69 6e 20 43         b:   Begin C
     561:	61 6c 69 62 72 61 74 69 6f 6e 00                    alibration.

0000056c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     56c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     57c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000587 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     587:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     597:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005a5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5a5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5b5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5c5:	6d 61 74 69 6f 6e 00                                mation.

000005cc <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5cc:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5dc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000005ed <_ZZN9task_user18print_help_messageEvE3__c_5>:
     5ed:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     5fd:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000605 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     605:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     615:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000621 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     621:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     631:	68 65 20 41 56 52 00                                he AVR.

00000638 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     638:	20 68 65 6c 70 00                                    help.

0000063e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     63e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     64e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000065d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     65d:	1b 5b 33 30 6d 00                                   .[30m.

00000663 <_ZZN9task_user18print_help_messageEvE3__c>:
     663:	1b 5b 34 36 6d 00                                   .[46m.

00000669 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     669:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     679:	61 73 6b 20 00                                      ask .

0000067e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     67e:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

0000068c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     68c:	20 63 72 65 61 74 65 64 00                           created.

00000695 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     695:	54 61 73 6b 20 00                                   Task .

0000069b <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     69b:	1b 5b 32 32 6d 00                                   .[22m.

000006a1 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     6a1:	54 61 73 6b 3a 20 00                                Task: .

000006a8 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     6a8:	1b 5b 31 6d 00                                      .[1m.

000006ad <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     6ad:	09 00                                               ..

000006af <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     6af:	09 00                                               ..

000006b1 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     6b1:	2f 00                                               /.

000006b3 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     6b3:	09 00                                               ..

000006b5 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     6b5:	09 00                                               ..

000006b7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     6b7:	1b 5b 32 32 6d 00                                   .[22m.

000006bd <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     6bd:	1b 5b 31 6d 00                                      .[1m.

000006c2 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     6c2:	1b 5b 31 6d 00                                      .[1m.

000006c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     6c7:	20 20 00                                              .

000006ca <__ctors_start>:
     6ca:	9a 0f       	add	r25, r26

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf ef       	ldi	r28, 0xFF	; 255
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df e3       	ldi	r29, 0x3F	; 63
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	0c bf       	out	0x3c, r16	; 60
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	19 be       	out	0x39, r1	; 57
     6e0:	1a be       	out	0x3a, r1	; 58
     6e2:	1b be       	out	0x3b, r1	; 59

000006e4 <__do_copy_data>:
     6e4:	10 e2       	ldi	r17, 0x20	; 32
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e2       	ldi	r27, 0x20	; 32
     6ea:	ea e1       	ldi	r30, 0x1A	; 26
     6ec:	f0 e4       	ldi	r31, 0x40	; 64
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	ae 3d       	cpi	r26, 0xDE	; 222
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>
     6fe:	1b be       	out	0x3b, r1	; 59

00000700 <__do_clear_bss>:
     700:	21 e3       	ldi	r18, 0x31	; 49
     702:	ae ed       	ldi	r26, 0xDE	; 222
     704:	b0 e2       	ldi	r27, 0x20	; 32
     706:	01 c0       	rjmp	.+2      	; 0x70a <.do_clear_bss_start>

00000708 <.do_clear_bss_loop>:
     708:	1d 92       	st	X+, r1

0000070a <.do_clear_bss_start>:
     70a:	a2 39       	cpi	r26, 0x92	; 146
     70c:	b2 07       	cpc	r27, r18
     70e:	e1 f7       	brne	.-8      	; 0x708 <.do_clear_bss_loop>

00000710 <__do_global_ctors>:
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c6 e6       	ldi	r28, 0x66	; 102
     714:	d3 e0       	ldi	r29, 0x03	; 3
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	06 c0       	rjmp	.+12     	; 0x726 <__do_global_ctors+0x16>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	01 09       	sbc	r16, r1
     71e:	80 2f       	mov	r24, r16
     720:	fe 01       	movw	r30, r28
     722:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__tablejump2__>
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	d1 07       	cpc	r29, r17
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 07       	cpc	r16, r24
     72e:	a9 f7       	brne	.-22     	; 0x71a <__do_global_ctors+0xa>
     730:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <main>
     734:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN8emstream12clear_screenEv>:
     73c:	08 95       	ret

0000073e <_ZN8emstream12transmit_nowEv>:
     73e:	08 95       	ret

00000740 <_ZN8emstream14check_for_charEv>:
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret

00000744 <_ZN8emstream7getcharEv>:
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <_ZN8emstream13ready_to_sendEv>:
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <__cxa_pure_virtual>:
     74e:	08 95       	ret

00000750 <_ZN10time_stamp10set_to_nowEv>:
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	0f 92       	push	r0
     75c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     760:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     764:	8c 83       	std	Y+4, r24	; 0x04
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
     76c:	68 83       	st	Y, r22
     76e:	79 83       	std	Y+1, r23	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	ce 01       	movw	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZN14frt_text_queue7getcharEv>:
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	3f ef       	ldi	r19, 0xFF	; 255
     792:	a9 01       	movw	r20, r18
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	80 85       	ldd	r24, Z+8	; 0x08
     79e:	91 85       	ldd	r25, Z+9	; 0x09
     7a0:	0e 94 83 18 	call	0x3106	; 0x3106 <xQueueGenericReceive>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	19 f4       	brne	.+6      	; 0x7ae <_ZN14frt_text_queue7getcharEv+0x2e>
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <_ZN14frt_text_queue7getcharEv+0x32>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <_ZN14frt_text_queue14check_for_charEv>:
     7bc:	fc 01       	movw	r30, r24
     7be:	80 85       	ldd	r24, Z+8	; 0x08
     7c0:	91 85       	ldd	r25, Z+9	; 0x09
     7c2:	0e 94 47 19 	call	0x328e	; 0x328e <uxQueueMessagesWaiting>
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_ZN14frt_text_queue14check_for_charEv+0x12>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	89 2f       	mov	r24, r25
     7d0:	08 95       	ret

000007d2 <_ZN14frt_text_queue7putcharEc>:
     7d2:	0f 93       	push	r16
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	69 83       	std	Y+1, r22	; 0x01
     7e0:	fc 01       	movw	r30, r24
     7e2:	22 85       	ldd	r18, Z+10	; 0x0a
     7e4:	33 85       	ldd	r19, Z+11	; 0x0b
     7e6:	44 85       	ldd	r20, Z+12	; 0x0c
     7e8:	55 85       	ldd	r21, Z+13	; 0x0d
     7ea:	00 e0       	ldi	r16, 0x00	; 0
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 85       	ldd	r24, Z+8	; 0x08
     7f4:	91 85       	ldd	r25, Z+9	; 0x09
     7f6:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <xQueueGenericSend>
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	81 11       	cpse	r24, r1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <_ZN14frt_text_queue7putcharEc+0x30>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	89 2f       	mov	r24, r25
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <_call_static_run_method>:
     80e:	ec 01       	movw	r28, r24
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	19 95       	eicall
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	1b 82       	std	Y+3, r1	; 0x03
     820:	6f ef       	ldi	r22, 0xFF	; 255
     822:	7f ef       	ldi	r23, 0xFF	; 255
     824:	cb 01       	movw	r24, r22
     826:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <vTaskDelay>
     82a:	fa cf       	rjmp	.-12     	; 0x820 <_call_static_run_method+0x12>

0000082c <_ZN21task_pendulum_encoder3runEv>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <_ZN21task_pendulum_encoder3runEv+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8c 01       	movw	r16, r24
     83a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	7a 83       	std	Y+2, r23	; 0x02
     842:	8b 83       	std	Y+3, r24	; 0x03
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	e0 e8       	ldi	r30, 0x80	; 128
     848:	f6 e0       	ldi	r31, 0x06	; 6
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	82 83       	std	Z+2, r24	; 0x02
     84e:	80 8b       	std	Z+16, r24	; 0x10
     850:	81 8b       	std	Z+17, r24	; 0x11
     852:	e0 e8       	ldi	r30, 0x80	; 128
     854:	f1 e0       	ldi	r31, 0x01	; 1
     856:	80 e7       	ldi	r24, 0x70	; 112
     858:	82 83       	std	Z+2, r24	; 0x02
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	82 87       	std	Z+10, r24	; 0x0a
     85e:	e0 e4       	ldi	r30, 0x40	; 64
     860:	f8 e0       	ldi	r31, 0x08	; 8
     862:	8a e6       	ldi	r24, 0x6A	; 106
     864:	83 83       	std	Z+3, r24	; 0x03
     866:	8d ec       	ldi	r24, 0xCD	; 205
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	86 a3       	std	Z+38, r24	; 0x26
     86c:	97 a3       	std	Z+39, r25	; 0x27
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	68 94       	set
     874:	ee 24       	eor	r14, r14
     876:	e6 f8       	bld	r14, 6
     878:	ff 24       	eor	r15, r15
     87a:	f3 f8       	bld	r15, 3
     87c:	f7 01       	movw	r30, r14
     87e:	80 a1       	ldd	r24, Z+32	; 0x20
     880:	91 a1       	ldd	r25, Z+33	; 0x21
     882:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <pendulum_encoder>
     886:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <pendulum_encoder+0x1>
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	0f 92       	push	r0
     890:	80 83       	st	Z, r24
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	f8 01       	movw	r30, r16
     89a:	86 85       	ldd	r24, Z+14	; 0x0e
     89c:	97 85       	ldd	r25, Z+15	; 0x0f
     89e:	a0 89       	ldd	r26, Z+16	; 0x10
     8a0:	b1 89       	ldd	r27, Z+17	; 0x11
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	a1 1d       	adc	r26, r1
     8a6:	b1 1d       	adc	r27, r1
     8a8:	86 87       	std	Z+14, r24	; 0x0e
     8aa:	97 87       	std	Z+15, r25	; 0x0f
     8ac:	a0 8b       	std	Z+16, r26	; 0x10
     8ae:	b1 8b       	std	Z+17, r27	; 0x11
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 8c 1c 	call	0x3918	; 0x3918 <vTaskDelayUntil>
     8c0:	dd cf       	rjmp	.-70     	; 0x87c <_ZN21task_pendulum_encoder3runEv+0x50>

000008c2 <_ZN18task_motor_encoder3runEv>:
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <_ZN18task_motor_encoder3runEv+0x6>
     8c8:	1f 92       	push	r1
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	7c 01       	movw	r14, r24
     8d0:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
     8d4:	69 83       	std	Y+1, r22	; 0x01
     8d6:	7a 83       	std	Y+2, r23	; 0x02
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	9c 83       	std	Y+4, r25	; 0x04
     8dc:	e0 e8       	ldi	r30, 0x80	; 128
     8de:	f6 e0       	ldi	r31, 0x06	; 6
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	82 83       	std	Z+2, r24	; 0x02
     8e4:	82 89       	ldd	r24, Z+18	; 0x12
     8e6:	83 60       	ori	r24, 0x03	; 3
     8e8:	82 8b       	std	Z+18, r24	; 0x12
     8ea:	83 89       	ldd	r24, Z+19	; 0x13
     8ec:	83 60       	ori	r24, 0x03	; 3
     8ee:	83 8b       	std	Z+19, r24	; 0x13
     8f0:	e0 e8       	ldi	r30, 0x80	; 128
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	82 e7       	ldi	r24, 0x72	; 114
     8f6:	80 83       	st	Z, r24
     8f8:	89 e0       	ldi	r24, 0x09	; 9
     8fa:	80 87       	std	Z+8, r24	; 0x08
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	88 e6       	ldi	r24, 0x68	; 104
     902:	83 83       	std	Z+3, r24	; 0x03
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	86 a3       	std	Z+38, r24	; 0x26
     90a:	97 a3       	std	Z+39, r25	; 0x27
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 83       	st	Z, r24
     910:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     914:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	0f 92       	push	r0
     91e:	10 82       	st	Z, r1
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 2e       	mov	r0, r31
     928:	81 2c       	mov	r8, r1
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	9f 2e       	mov	r9, r31
     92e:	f0 2d       	mov	r31, r0
     930:	0f 2e       	mov	r0, r31
     932:	f4 e6       	ldi	r31, 0x64	; 100
     934:	4f 2e       	mov	r4, r31
     936:	51 2c       	mov	r5, r1
     938:	61 2c       	mov	r6, r1
     93a:	71 2c       	mov	r7, r1
     93c:	f0 2d       	mov	r31, r0
     93e:	f4 01       	movw	r30, r8
     940:	00 a1       	ldd	r16, Z+32	; 0x20
     942:	11 a1       	ldd	r17, Z+33	; 0x21
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	0f 92       	push	r0
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	a0 90 f2 20 	lds	r10, 0x20F2	; 0x8020f2 <linear_position>
     952:	b0 90 f3 20 	lds	r11, 0x20F3	; 0x8020f3 <linear_position+0x1>
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	0f 92       	push	r0
     95c:	c8 01       	movw	r24, r16
     95e:	01 2e       	mov	r0, r17
     960:	00 0c       	add	r0, r0
     962:	aa 0b       	sbc	r26, r26
     964:	bb 0b       	sbc	r27, r27
     966:	ac 01       	movw	r20, r24
     968:	bd 01       	movw	r22, r26
     96a:	44 0f       	add	r20, r20
     96c:	55 1f       	adc	r21, r21
     96e:	66 1f       	adc	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	84 0f       	add	r24, r20
     974:	95 1f       	adc	r25, r21
     976:	a6 1f       	adc	r26, r22
     978:	b7 1f       	adc	r27, r23
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	88 1f       	adc	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	a3 01       	movw	r20, r6
     988:	92 01       	movw	r18, r4
     98a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodsi4>
     98e:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
     992:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	28 1b       	sub	r18, r24
     99c:	39 0b       	sbc	r19, r25
     99e:	f5 01       	movw	r30, r10
     9a0:	20 83       	st	Z, r18
     9a2:	31 83       	std	Z+1, r19	; 0x01
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <thdMotor>
     9ac:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <thdMotor+0x1>
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	0f 92       	push	r0
     9b6:	c8 01       	movw	r24, r16
     9b8:	8c 19       	sub	r24, r12
     9ba:	9d 09       	sbc	r25, r13
     9bc:	80 83       	st	Z, r24
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	f7 01       	movw	r30, r14
     9c6:	86 85       	ldd	r24, Z+14	; 0x0e
     9c8:	97 85       	ldd	r25, Z+15	; 0x0f
     9ca:	a0 89       	ldd	r26, Z+16	; 0x10
     9cc:	b1 89       	ldd	r27, Z+17	; 0x11
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	a1 1d       	adc	r26, r1
     9d2:	b1 1d       	adc	r27, r1
     9d4:	86 87       	std	Z+14, r24	; 0x0e
     9d6:	97 87       	std	Z+15, r25	; 0x0f
     9d8:	a0 8b       	std	Z+16, r26	; 0x10
     9da:	b1 8b       	std	Z+17, r27	; 0x11
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	0e 94 8c 1c 	call	0x3918	; 0x3918 <vTaskDelayUntil>
     9ec:	68 01       	movw	r12, r16
     9ee:	a7 cf       	rjmp	.-178    	; 0x93e <_ZN18task_motor_encoder3runEv+0x7c>

000009f0 <_ZN18task_motor_command3runEv>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN18task_motor_command3runEv+0x6>
     9f6:	1f 92       	push	r1
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	8c 01       	movw	r16, r24
     9fe:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
     a02:	69 83       	std	Y+1, r22	; 0x01
     a04:	7a 83       	std	Y+2, r23	; 0x02
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	a0 e4       	ldi	r26, 0x40	; 64
     a0c:	b6 e0       	ldi	r27, 0x06	; 6
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	8c 93       	st	X, r24
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	15 96       	adiw	r26, 0x05	; 5
     a1a:	8c 93       	st	X, r24
     a1c:	15 97       	sbiw	r26, 0x05	; 5
     a1e:	e0 e0       	ldi	r30, 0x00	; 0
     a20:	f8 e0       	ldi	r31, 0x08	; 8
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 83       	st	Z, r24
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	81 83       	std	Z+1, r24	; 0x01
     a2a:	a6 a3       	std	Z+38, r26	; 0x26
     a2c:	b7 a3       	std	Z+39, r27	; 0x27
     a2e:	10 a6       	std	Z+40, r1	; 0x28
     a30:	11 a6       	std	Z+41, r1	; 0x29
     a32:	12 a6       	std	Z+42, r1	; 0x2a
     a34:	13 a6       	std	Z+43, r1	; 0x2b
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	80 63       	ori	r24, 0x30	; 48
     a3a:	81 83       	std	Z+1, r24	; 0x01
     a3c:	e1 2c       	mov	r14, r1
     a3e:	68 94       	set
     a40:	ff 24       	eor	r15, r15
     a42:	f3 f8       	bld	r15, 3
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	0f 92       	push	r0
     a4a:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
     a4e:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	f8 01       	movw	r30, r16
     a5c:	82 8b       	std	Z+18, r24	; 0x12
     a5e:	93 8b       	std	Z+19, r25	; 0x13
     a60:	99 23       	and	r25, r25
     a62:	34 f0       	brlt	.+12     	; 0xa70 <_ZN18task_motor_command3runEv+0x80>
     a64:	f7 01       	movw	r30, r14
     a66:	80 a7       	std	Z+40, r24	; 0x28
     a68:	91 a7       	std	Z+41, r25	; 0x29
     a6a:	12 a6       	std	Z+42, r1	; 0x2a
     a6c:	13 a6       	std	Z+43, r1	; 0x2b
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <_ZN18task_motor_command3runEv+0x98>
     a70:	f7 01       	movw	r30, r14
     a72:	10 a6       	std	Z+40, r1	; 0x28
     a74:	11 a6       	std	Z+41, r1	; 0x29
     a76:	f8 01       	movw	r30, r16
     a78:	82 89       	ldd	r24, Z+18	; 0x12
     a7a:	93 89       	ldd	r25, Z+19	; 0x13
     a7c:	91 95       	neg	r25
     a7e:	81 95       	neg	r24
     a80:	91 09       	sbc	r25, r1
     a82:	f7 01       	movw	r30, r14
     a84:	82 a7       	std	Z+42, r24	; 0x2a
     a86:	93 a7       	std	Z+43, r25	; 0x2b
     a88:	f8 01       	movw	r30, r16
     a8a:	86 85       	ldd	r24, Z+14	; 0x0e
     a8c:	97 85       	ldd	r25, Z+15	; 0x0f
     a8e:	a0 89       	ldd	r26, Z+16	; 0x10
     a90:	b1 89       	ldd	r27, Z+17	; 0x11
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	a1 1d       	adc	r26, r1
     a96:	b1 1d       	adc	r27, r1
     a98:	86 87       	std	Z+14, r24	; 0x0e
     a9a:	97 87       	std	Z+15, r25	; 0x0f
     a9c:	a0 8b       	std	Z+16, r26	; 0x10
     a9e:	b1 8b       	std	Z+17, r27	; 0x11
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	0e 94 8c 1c 	call	0x3918	; 0x3918 <vTaskDelayUntil>
     ab0:	c9 cf       	rjmp	.-110    	; 0xa44 <_ZN18task_motor_command3runEv+0x54>

00000ab2 <_ZN17task_limit_switch3runEv>:
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <_ZN17task_limit_switch3runEv+0x6>
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	8c 01       	movw	r16, r24
     ac0:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
     ac4:	69 83       	std	Y+1, r22	; 0x01
     ac6:	7a 83       	std	Y+2, r23	; 0x02
     ac8:	8b 83       	std	Y+3, r24	; 0x03
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	e0 e6       	ldi	r30, 0x60	; 96
     ace:	f6 e0       	ldi	r31, 0x06	; 6
     ad0:	90 81       	ld	r25, Z
     ad2:	d8 01       	movw	r26, r16
     ad4:	52 96       	adiw	r26, 0x12	; 18
     ad6:	8c 91       	ld	r24, X
     ad8:	52 97       	sbiw	r26, 0x12	; 18
     ada:	89 2b       	or	r24, r25
     adc:	80 83       	st	Z, r24
     ade:	94 81       	ldd	r25, Z+4	; 0x04
     ae0:	52 96       	adiw	r26, 0x12	; 18
     ae2:	8c 91       	ld	r24, X
     ae4:	52 97       	sbiw	r26, 0x12	; 18
     ae6:	89 2b       	or	r24, r25
     ae8:	84 83       	std	Z+4, r24	; 0x04
     aea:	52 96       	adiw	r26, 0x12	; 18
     aec:	8c 91       	ld	r24, X
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	21 f4       	brne	.+8      	; 0xafa <_ZN17task_limit_switch3runEv+0x48>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <_ZN17task_limit_switch3runEv+0x52>
     afa:	84 30       	cpi	r24, 0x04	; 4
     afc:	19 f4       	brne	.+6      	; 0xb04 <_ZN17task_limit_switch3runEv+0x52>
     afe:	88 e1       	ldi	r24, 0x18	; 24
     b00:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     b04:	0f 2e       	mov	r0, r31
     b06:	f8 e6       	ldi	r31, 0x68	; 104
     b08:	ef 2e       	mov	r14, r31
     b0a:	f6 e0       	ldi	r31, 0x06	; 6
     b0c:	ff 2e       	mov	r15, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	dd 24       	eor	r13, r13
     b12:	d3 94       	inc	r13
     b14:	f7 01       	movw	r30, r14
     b16:	80 81       	ld	r24, Z
     b18:	80 fd       	sbrc	r24, 0
     b1a:	0b c0       	rjmp	.+22     	; 0xb32 <_ZN17task_limit_switch3runEv+0x80>
     b1c:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
     b20:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	0f 92       	push	r0
     b2a:	d0 82       	st	Z, r13
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <_ZN17task_limit_switch3runEv+0x94>
     b32:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
     b36:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	0f 92       	push	r0
     b40:	10 82       	st	Z, r1
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	d7 01       	movw	r26, r14
     b48:	8c 91       	ld	r24, X
     b4a:	82 fd       	sbrc	r24, 2
     b4c:	0b c0       	rjmp	.+22     	; 0xb64 <_ZN17task_limit_switch3runEv+0xb2>
     b4e:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
     b52:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	0f 92       	push	r0
     b5c:	d0 82       	st	Z, r13
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <_ZN17task_limit_switch3runEv+0xc6>
     b64:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
     b68:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	0f 92       	push	r0
     b72:	10 82       	st	Z, r1
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	f8 01       	movw	r30, r16
     b7a:	86 85       	ldd	r24, Z+14	; 0x0e
     b7c:	97 85       	ldd	r25, Z+15	; 0x0f
     b7e:	a0 89       	ldd	r26, Z+16	; 0x10
     b80:	b1 89       	ldd	r27, Z+17	; 0x11
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	a1 1d       	adc	r26, r1
     b86:	b1 1d       	adc	r27, r1
     b88:	86 87       	std	Z+14, r24	; 0x0e
     b8a:	97 87       	std	Z+15, r25	; 0x0f
     b8c:	a0 8b       	std	Z+16, r26	; 0x10
     b8e:	b1 8b       	std	Z+17, r27	; 0x11
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	0e 94 8c 1c 	call	0x3918	; 0x3918 <vTaskDelayUntil>
     ba0:	b9 cf       	rjmp	.-142    	; 0xb14 <_ZN17task_limit_switch3runEv+0x62>

00000ba2 <_ZN8emstreamlsE15ser_manipulator>:
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
     ba8:	86 2f       	mov	r24, r22
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	8b 30       	cpi	r24, 0x0B	; 11
     bae:	91 05       	cpc	r25, r1
     bb0:	d8 f5       	brcc	.+118    	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bb2:	fc 01       	movw	r30, r24
     bb4:	88 27       	eor	r24, r24
     bb6:	e2 50       	subi	r30, 0x02	; 2
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__tablejump2__>
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	8a 83       	std	Y+2, r24	; 0x02
     bc4:	31 c0       	rjmp	.+98     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	8a 83       	std	Y+2, r24	; 0x02
     bca:	2e c0       	rjmp	.+92     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	2b c0       	rjmp	.+86     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	8a 83       	std	Y+2, r24	; 0x02
     bd6:	28 c0       	rjmp	.+80     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	8b 83       	std	Y+3, r24	; 0x03
     bdc:	25 c0       	rjmp	.+74     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     bde:	1b 82       	std	Y+3, r1	; 0x03
     be0:	23 c0       	rjmp	.+70     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     be2:	e8 81       	ld	r30, Y
     be4:	f9 81       	ldd	r31, Y+1	; 0x01
     be6:	02 80       	ldd	r0, Z+2	; 0x02
     be8:	f3 81       	ldd	r31, Z+3	; 0x03
     bea:	e0 2d       	mov	r30, r0
     bec:	6d e0       	ldi	r22, 0x0D	; 13
     bee:	ce 01       	movw	r24, r28
     bf0:	19 95       	eicall
     bf2:	e8 81       	ld	r30, Y
     bf4:	f9 81       	ldd	r31, Y+1	; 0x01
     bf6:	02 80       	ldd	r0, Z+2	; 0x02
     bf8:	f3 81       	ldd	r31, Z+3	; 0x03
     bfa:	e0 2d       	mov	r30, r0
     bfc:	6a e0       	ldi	r22, 0x0A	; 10
     bfe:	ce 01       	movw	r24, r28
     c00:	19 95       	eicall
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c04:	e8 81       	ld	r30, Y
     c06:	f9 81       	ldd	r31, Y+1	; 0x01
     c08:	02 84       	ldd	r0, Z+10	; 0x0a
     c0a:	f3 85       	ldd	r31, Z+11	; 0x0b
     c0c:	e0 2d       	mov	r30, r0
     c0e:	ce 01       	movw	r24, r28
     c10:	19 95       	eicall
     c12:	0a c0       	rjmp	.+20     	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c14:	e8 81       	ld	r30, Y
     c16:	f9 81       	ldd	r31, Y+1	; 0x01
     c18:	00 84       	ldd	r0, Z+8	; 0x08
     c1a:	f1 85       	ldd	r31, Z+9	; 0x09
     c1c:	e0 2d       	mov	r30, r0
     c1e:	ce 01       	movw	r24, r28
     c20:	19 95       	eicall
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <_ZN8emstreamlsE15ser_manipulator+0x86>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8c 83       	std	Y+4, r24	; 0x04
     c28:	ce 01       	movw	r24, r28
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZN8frt_task20print_status_in_listEP8emstream>:
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	8b 01       	movw	r16, r22
     c3c:	e8 81       	ld	r30, Y
     c3e:	f9 81       	ldd	r31, Y+1	; 0x01
     c40:	02 80       	ldd	r0, Z+2	; 0x02
     c42:	f3 81       	ldd	r31, Z+3	; 0x03
     c44:	e0 2d       	mov	r30, r0
     c46:	19 95       	eicall
     c48:	66 e0       	ldi	r22, 0x06	; 6
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	9d 81       	ldd	r25, Y+5	; 0x05
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	19 f0       	breq	.+6      	; 0xc5e <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     c58:	b8 01       	movw	r22, r16
     c5a:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8frt_task20print_status_in_listEP8emstream>
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <_ZN8emstream4putsEPKc>:
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	8c 01       	movw	r16, r24
     c72:	fb 01       	movw	r30, r22
     c74:	dc 01       	movw	r26, r24
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	8c 91       	ld	r24, X
     c7a:	81 11       	cpse	r24, r1
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <_ZN8emstream4putsEPKc+0x1e>
     c7e:	60 81       	ld	r22, Z
     c80:	61 11       	cpse	r22, r1
     c82:	17 c0       	rjmp	.+46     	; 0xcb2 <_ZN8emstream4putsEPKc+0x4a>
     c84:	23 c0       	rjmp	.+70     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     c86:	d8 01       	movw	r26, r16
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	1c 92       	st	X, r1
     c8c:	eb 01       	movw	r28, r22
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	64 91       	lpm	r22, Z
     c92:	66 23       	and	r22, r22
     c94:	d9 f0       	breq	.+54     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     c96:	d8 01       	movw	r26, r16
     c98:	ed 91       	ld	r30, X+
     c9a:	fc 91       	ld	r31, X
     c9c:	02 80       	ldd	r0, Z+2	; 0x02
     c9e:	f3 81       	ldd	r31, Z+3	; 0x03
     ca0:	e0 2d       	mov	r30, r0
     ca2:	c8 01       	movw	r24, r16
     ca4:	19 95       	eicall
     ca6:	fe 01       	movw	r30, r28
     ca8:	64 91       	lpm	r22, Z
     caa:	21 96       	adiw	r28, 0x01	; 1
     cac:	61 11       	cpse	r22, r1
     cae:	f3 cf       	rjmp	.-26     	; 0xc96 <_ZN8emstream4putsEPKc+0x2e>
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <_ZN8emstream4putsEPKc+0x64>
     cb2:	ef 01       	movw	r28, r30
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	d8 01       	movw	r26, r16
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	02 80       	ldd	r0, Z+2	; 0x02
     cbe:	f3 81       	ldd	r31, Z+3	; 0x03
     cc0:	e0 2d       	mov	r30, r0
     cc2:	c8 01       	movw	r24, r16
     cc4:	19 95       	eicall
     cc6:	69 91       	ld	r22, Y+
     cc8:	61 11       	cpse	r22, r1
     cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <_ZN8emstream4putsEPKc+0x4e>
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <_ZN8emstreamlsEm>:
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	a1 97       	sbiw	r28, 0x21	; 33
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	8c 01       	movw	r16, r24
     cf0:	d4 2e       	mov	r13, r20
     cf2:	e5 2e       	mov	r14, r21
     cf4:	f6 2e       	mov	r15, r22
     cf6:	97 2f       	mov	r25, r23
     cf8:	f8 01       	movw	r30, r16
     cfa:	22 81       	ldd	r18, Z+2	; 0x02
     cfc:	20 31       	cpi	r18, 0x10	; 16
     cfe:	21 f0       	breq	.+8      	; 0xd08 <_ZN8emstreamlsEm+0x32>
     d00:	28 30       	cpi	r18, 0x08	; 8
     d02:	11 f0       	breq	.+4      	; 0xd08 <_ZN8emstreamlsEm+0x32>
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	71 f4       	brne	.+28     	; 0xd24 <_ZN8emstreamlsEm+0x4e>
     d08:	69 2f       	mov	r22, r25
     d0a:	c8 01       	movw	r24, r16
     d0c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d10:	6f 2d       	mov	r22, r15
     d12:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d16:	6e 2d       	mov	r22, r14
     d18:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d1c:	6d 2d       	mov	r22, r13
     d1e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <_ZN8emstreamlsEm+0x6c>
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	6d 2d       	mov	r22, r13
     d2e:	7e 2d       	mov	r23, r14
     d30:	8f 2d       	mov	r24, r15
     d32:	0e 94 76 1f 	call	0x3eec	; 0x3eec <ultoa>
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     d42:	c8 01       	movw	r24, r16
     d44:	a1 96       	adiw	r28, 0x21	; 33
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	08 95       	ret

00000d5a <_ZN8emstreamlsEj>:
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	61 97       	sbiw	r28, 0x11	; 17
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	8c 01       	movw	r16, r24
     d70:	f6 2e       	mov	r15, r22
     d72:	97 2f       	mov	r25, r23
     d74:	f8 01       	movw	r30, r16
     d76:	42 81       	ldd	r20, Z+2	; 0x02
     d78:	40 31       	cpi	r20, 0x10	; 16
     d7a:	21 f0       	breq	.+8      	; 0xd84 <_ZN8emstreamlsEj+0x2a>
     d7c:	48 30       	cpi	r20, 0x08	; 8
     d7e:	11 f0       	breq	.+4      	; 0xd84 <_ZN8emstreamlsEj+0x2a>
     d80:	42 30       	cpi	r20, 0x02	; 2
     d82:	41 f4       	brne	.+16     	; 0xd94 <_ZN8emstreamlsEj+0x3a>
     d84:	69 2f       	mov	r22, r25
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d8c:	6f 2d       	mov	r22, r15
     d8e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     d92:	0d c0       	rjmp	.+26     	; 0xdae <_ZN8emstreamlsEj+0x54>
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 2d       	mov	r24, r15
     d9e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <utoa>
     da2:	be 01       	movw	r22, r28
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	c8 01       	movw	r24, r16
     daa:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     dae:	c8 01       	movw	r24, r16
     db0:	61 96       	adiw	r28, 0x11	; 17
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	08 95       	ret

00000dc2 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	5c 01       	movw	r10, r24
     de2:	3b 01       	movw	r6, r22
     de4:	4a 01       	movw	r8, r20
     de6:	12 2f       	mov	r17, r18
     de8:	50 2e       	mov	r5, r16
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	ca 01       	movw	r24, r20
     dee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     df2:	a6 14       	cp	r10, r6
     df4:	b7 04       	cpc	r11, r7
     df6:	08 f0       	brcs	.+2      	; 0xdfa <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     df8:	7c c0       	rjmp	.+248    	; 0xef2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     dfa:	65 01       	movw	r12, r10
     dfc:	84 e1       	ldi	r24, 0x14	; 20
     dfe:	c8 0e       	add	r12, r24
     e00:	d1 1c       	adc	r13, r1
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	75 01       	movw	r14, r10
     e06:	b5 01       	movw	r22, r10
     e08:	c4 01       	movw	r24, r8
     e0a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
     e0e:	6a e0       	ldi	r22, 0x0A	; 10
     e10:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e14:	67 ec       	ldi	r22, 0xC7	; 199
     e16:	76 e0       	ldi	r23, 0x06	; 6
     e18:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e1c:	11 23       	and	r17, r17
     e1e:	09 f4       	brne	.+2      	; 0xe22 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     e20:	6d c0       	rjmp	.+218    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e22:	00 23       	and	r16, r16
     e24:	09 f4       	brne	.+2      	; 0xe28 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     e26:	6a c0       	rjmp	.+212    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	c4 01       	movw	r24, r8
     e2c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e30:	62 ec       	ldi	r22, 0xC2	; 194
     e32:	76 e0       	ldi	r23, 0x06	; 6
     e34:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e38:	61 c0       	rjmp	.+194    	; 0xefc <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     e3a:	11 23       	and	r17, r17
     e3c:	71 f0       	breq	.+28     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e3e:	01 11       	cpse	r16, r1
     e40:	0c c0       	rjmp	.+24     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e42:	88 81       	ld	r24, Y
     e44:	85 15       	cp	r24, r5
     e46:	49 f0       	breq	.+18     	; 0xe5a <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	c4 01       	movw	r24, r8
     e4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e50:	6d eb       	ldi	r22, 0xBD	; 189
     e52:	76 e0       	ldi	r23, 0x06	; 6
     e54:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e58:	01 e0       	ldi	r16, 0x01	; 1
     e5a:	69 91       	ld	r22, Y+
     e5c:	c4 01       	movw	r24, r8
     e5e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
     e62:	dc 01       	movw	r26, r24
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	02 80       	ldd	r0, Z+2	; 0x02
     e6a:	f3 81       	ldd	r31, Z+3	; 0x03
     e6c:	e0 2d       	mov	r30, r0
     e6e:	60 e2       	ldi	r22, 0x20	; 32
     e70:	19 95       	eicall
     e72:	cc 16       	cp	r12, r28
     e74:	dd 06       	cpc	r13, r29
     e76:	09 f7       	brne	.-62     	; 0xe3a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     e78:	11 23       	and	r17, r17
     e7a:	89 f0       	breq	.+34     	; 0xe9e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	c4 01       	movw	r24, r8
     e80:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     e84:	ec 01       	movw	r28, r24
     e86:	67 eb       	ldi	r22, 0xB7	; 183
     e88:	76 e0       	ldi	r23, 0x06	; 6
     e8a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	02 80       	ldd	r0, Z+2	; 0x02
     e94:	f3 81       	ldd	r31, Z+3	; 0x03
     e96:	e0 2d       	mov	r30, r0
     e98:	60 e2       	ldi	r22, 0x20	; 32
     e9a:	ce 01       	movw	r24, r28
     e9c:	19 95       	eicall
     e9e:	f7 01       	movw	r30, r14
     ea0:	61 91       	ld	r22, Z+
     ea2:	7f 01       	movw	r14, r30
     ea4:	80 ee       	ldi	r24, 0xE0	; 224
     ea6:	86 0f       	add	r24, r22
     ea8:	8f 35       	cpi	r24, 0x5F	; 95
     eaa:	48 f4       	brcc	.+18     	; 0xebe <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     eac:	d4 01       	movw	r26, r8
     eae:	ed 91       	ld	r30, X+
     eb0:	fc 91       	ld	r31, X
     eb2:	02 80       	ldd	r0, Z+2	; 0x02
     eb4:	f3 81       	ldd	r31, Z+3	; 0x03
     eb6:	e0 2d       	mov	r30, r0
     eb8:	c4 01       	movw	r24, r8
     eba:	19 95       	eicall
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     ebe:	d4 01       	movw	r26, r8
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	02 80       	ldd	r0, Z+2	; 0x02
     ec6:	f3 81       	ldd	r31, Z+3	; 0x03
     ec8:	e0 2d       	mov	r30, r0
     eca:	6e e2       	ldi	r22, 0x2E	; 46
     ecc:	c4 01       	movw	r24, r8
     ece:	19 95       	eicall
     ed0:	ce 14       	cp	r12, r14
     ed2:	df 04       	cpc	r13, r15
     ed4:	21 f7       	brne	.-56     	; 0xe9e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     ed6:	b4 e1       	ldi	r27, 0x14	; 20
     ed8:	ab 0e       	add	r10, r27
     eda:	b1 1c       	adc	r11, r1
     edc:	66 e0       	ldi	r22, 0x06	; 6
     ede:	c4 01       	movw	r24, r8
     ee0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     ee4:	e4 e1       	ldi	r30, 0x14	; 20
     ee6:	ce 0e       	add	r12, r30
     ee8:	d1 1c       	adc	r13, r1
     eea:	a6 14       	cp	r10, r6
     eec:	b7 04       	cpc	r11, r7
     eee:	08 f4       	brcc	.+2      	; 0xef2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     ef0:	89 cf       	rjmp	.-238    	; 0xe04 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     ef2:	62 e0       	ldi	r22, 0x02	; 2
     ef4:	c4 01       	movw	r24, r8
     ef6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     efc:	e7 01       	movw	r28, r14
     efe:	9d cf       	rjmp	.-198    	; 0xe3a <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
     f1a:	6f 90       	pop	r6
     f1c:	5f 90       	pop	r5
     f1e:	08 95       	ret

00000f20 <_ZlsR8emstreamR10time_stamp>:
     f20:	8f 92       	push	r8
     f22:	9f 92       	push	r9
     f24:	af 92       	push	r10
     f26:	bf 92       	push	r11
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2f 97       	sbiw	r28, 0x0f	; 15
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	8c 01       	movw	r16, r24
     f40:	7b 01       	movw	r14, r22
     f42:	db 01       	movw	r26, r22
     f44:	6d 91       	ld	r22, X+
     f46:	7d 91       	ld	r23, X+
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f8 ee       	ldi	r31, 0xE8	; 232
     f50:	8f 2e       	mov	r8, r31
     f52:	f3 e0       	ldi	r31, 0x03	; 3
     f54:	9f 2e       	mov	r9, r31
     f56:	a1 2c       	mov	r10, r1
     f58:	b1 2c       	mov	r11, r1
     f5a:	f0 2d       	mov	r31, r0
     f5c:	a5 01       	movw	r20, r10
     f5e:	94 01       	movw	r18, r8
     f60:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
     f64:	ba 01       	movw	r22, r20
     f66:	a9 01       	movw	r20, r18
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
     f6e:	d8 01       	movw	r26, r16
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	02 80       	ldd	r0, Z+2	; 0x02
     f76:	f3 81       	ldd	r31, Z+3	; 0x03
     f78:	e0 2d       	mov	r30, r0
     f7a:	6e e2       	ldi	r22, 0x2E	; 46
     f7c:	c8 01       	movw	r24, r16
     f7e:	19 95       	eicall
     f80:	f7 01       	movw	r30, r14
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	a5 01       	movw	r20, r10
     f8c:	94 01       	movw	r18, r8
     f8e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	60 e4       	ldi	r22, 0x40	; 64
     f98:	72 e4       	ldi	r23, 0x42	; 66
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__mulsi3>
     fa2:	a5 01       	movw	r20, r10
     fa4:	94 01       	movw	r18, r8
     fa6:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
     faa:	49 01       	movw	r8, r18
     fac:	5a 01       	movw	r10, r20
     fae:	f7 01       	movw	r30, r14
     fb0:	a4 81       	ldd	r26, Z+4	; 0x04
     fb2:	b5 81       	ldd	r27, Z+5	; 0x05
     fb4:	20 e4       	ldi	r18, 0x40	; 64
     fb6:	32 e4       	ldi	r19, 0x42	; 66
     fb8:	4f e0       	ldi	r20, 0x0F	; 15
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__muluhisi3>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	38 e4       	ldi	r19, 0x48	; 72
     fc4:	48 ee       	ldi	r20, 0xE8	; 232
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
     fcc:	c5 01       	movw	r24, r10
     fce:	b4 01       	movw	r22, r8
     fd0:	62 0f       	add	r22, r18
     fd2:	73 1f       	adc	r23, r19
     fd4:	84 1f       	adc	r24, r20
     fd6:	95 1f       	adc	r25, r21
     fd8:	7e 01       	movw	r14, r28
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	ef 0e       	add	r14, r31
     fde:	f1 1c       	adc	r15, r1
     fe0:	9e 01       	movw	r18, r28
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	59 01       	movw	r10, r18
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodsi4>
     ff4:	e6 2f       	mov	r30, r22
     ff6:	28 87       	std	Y+8, r18	; 0x08
     ff8:	39 87       	std	Y+9, r19	; 0x09
     ffa:	4a 87       	std	Y+10, r20	; 0x0a
     ffc:	5b 87       	std	Y+11, r21	; 0x0b
     ffe:	68 85       	ldd	r22, Y+8	; 0x08
    1000:	79 85       	ldd	r23, Y+9	; 0x09
    1002:	8a 85       	ldd	r24, Y+10	; 0x0a
    1004:	9b 85       	ldd	r25, Y+11	; 0x0b
    1006:	20 e3       	ldi	r18, 0x30	; 48
    1008:	2e 0f       	add	r18, r30
    100a:	d7 01       	movw	r26, r14
    100c:	2e 93       	st	-X, r18
    100e:	7d 01       	movw	r14, r26
    1010:	aa 15       	cp	r26, r10
    1012:	bb 05       	cpc	r27, r11
    1014:	49 f7       	brne	.-46     	; 0xfe8 <_ZlsR8emstreamR10time_stamp+0xc8>
    1016:	1f 82       	std	Y+7, r1	; 0x07
    1018:	be 01       	movw	r22, r28
    101a:	6f 5f       	subi	r22, 0xFF	; 255
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	c8 01       	movw	r24, r16
    1020:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1024:	c8 01       	movw	r24, r16
    1026:	2f 96       	adiw	r28, 0x0f	; 15
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	9f 90       	pop	r9
    103e:	8f 90       	pop	r8
    1040:	08 95       	ret

00001042 <_ZN8frt_task12print_statusER8emstream>:
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
    105c:	8b 01       	movw	r16, r22
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <pcTaskGetTaskName>
    1066:	bc 01       	movw	r22, r24
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    106e:	d8 01       	movw	r26, r16
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	02 80       	ldd	r0, Z+2	; 0x02
    1076:	f3 81       	ldd	r31, Z+3	; 0x03
    1078:	e0 2d       	mov	r30, r0
    107a:	69 e0       	ldi	r22, 0x09	; 9
    107c:	c8 01       	movw	r24, r16
    107e:	19 95       	eicall
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <pcTaskGetTaskName>
    1088:	fc 01       	movw	r30, r24
    108a:	01 90       	ld	r0, Z+
    108c:	00 20       	and	r0, r0
    108e:	e9 f7       	brne	.-6      	; 0x108a <_ZN8frt_task12print_statusER8emstream+0x48>
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	e8 1b       	sub	r30, r24
    1094:	f9 0b       	sbc	r31, r25
    1096:	38 97       	sbiw	r30, 0x08	; 8
    1098:	48 f4       	brcc	.+18     	; 0x10ac <_ZN8frt_task12print_statusER8emstream+0x6a>
    109a:	d8 01       	movw	r26, r16
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	02 80       	ldd	r0, Z+2	; 0x02
    10a2:	f3 81       	ldd	r31, Z+3	; 0x03
    10a4:	e0 2d       	mov	r30, r0
    10a6:	69 e0       	ldi	r22, 0x09	; 9
    10a8:	c8 01       	movw	r24, r16
    10aa:	19 95       	eicall
    10ac:	ce 84       	ldd	r12, Y+14	; 0x0e
    10ae:	df 84       	ldd	r13, Y+15	; 0x0f
    10b0:	e8 88       	ldd	r14, Y+16	; 0x10
    10b2:	f9 88       	ldd	r15, Y+17	; 0x11
    10b4:	a8 84       	ldd	r10, Y+8	; 0x08
    10b6:	b9 84       	ldd	r11, Y+9	; 0x09
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <uxTaskGetStackHighWaterMark>
    10c0:	98 2e       	mov	r9, r24
    10c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	0e 94 a7 1a 	call	0x354e	; 0x354e <uxTaskPriorityGet>
    10cc:	68 2f       	mov	r22, r24
    10ce:	c8 01       	movw	r24, r16
    10d0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
    10d4:	6a e0       	ldi	r22, 0x0A	; 10
    10d6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    10da:	ec 01       	movw	r28, r24
    10dc:	65 eb       	ldi	r22, 0xB5	; 181
    10de:	76 e0       	ldi	r23, 0x06	; 6
    10e0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    10e4:	68 2d       	mov	r22, r8
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
    10ec:	6a e0       	ldi	r22, 0x0A	; 10
    10ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    10f2:	ec 01       	movw	r28, r24
    10f4:	63 eb       	ldi	r22, 0xB3	; 179
    10f6:	76 e0       	ldi	r23, 0x06	; 6
    10f8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    10fc:	69 2d       	mov	r22, r9
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
    1104:	6a e0       	ldi	r22, 0x0A	; 10
    1106:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    110a:	ec 01       	movw	r28, r24
    110c:	61 eb       	ldi	r22, 0xB1	; 177
    110e:	76 e0       	ldi	r23, 0x06	; 6
    1110:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1114:	b5 01       	movw	r22, r10
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    111c:	6a e0       	ldi	r22, 0x0A	; 10
    111e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1122:	ec 01       	movw	r28, r24
    1124:	6f ea       	ldi	r22, 0xAF	; 175
    1126:	76 e0       	ldi	r23, 0x06	; 6
    1128:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1134:	ec 01       	movw	r28, r24
    1136:	6d ea       	ldi	r22, 0xAD	; 173
    1138:	76 e0       	ldi	r23, 0x06	; 6
    113a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    113e:	b7 01       	movw	r22, r14
    1140:	a6 01       	movw	r20, r12
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <_ZN8frt_task19print_stack_in_listEP8emstream>:
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	7b 01       	movw	r14, r22
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <pcTaskGetTaskName>
    117e:	6c 01       	movw	r12, r24
    1180:	6a e0       	ldi	r22, 0x0A	; 10
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1188:	8c 01       	movw	r16, r24
    118a:	68 ea       	ldi	r22, 0xA8	; 168
    118c:	76 e0       	ldi	r23, 0x06	; 6
    118e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1192:	6a e0       	ldi	r22, 0x0A	; 10
    1194:	c8 01       	movw	r24, r16
    1196:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    119a:	8c 01       	movw	r16, r24
    119c:	61 ea       	ldi	r22, 0xA1	; 161
    119e:	76 e0       	ldi	r23, 0x06	; 6
    11a0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11a4:	b6 01       	movw	r22, r12
    11a6:	c8 01       	movw	r24, r16
    11a8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11ac:	6a e0       	ldi	r22, 0x0A	; 10
    11ae:	c8 01       	movw	r24, r16
    11b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    11b4:	8c 01       	movw	r16, r24
    11b6:	6b e9       	ldi	r22, 0x9B	; 155
    11b8:	76 e0       	ldi	r23, 0x06	; 6
    11ba:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    11be:	66 e0       	ldi	r22, 0x06	; 6
    11c0:	c8 01       	movw	r24, r16
    11c2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    11c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ca:	e8 85       	ldd	r30, Y+8	; 0x08
    11cc:	f9 85       	ldd	r31, Y+9	; 0x09
    11ce:	01 e1       	ldi	r16, 0x11	; 17
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	a7 01       	movw	r20, r14
    11d4:	bc 01       	movw	r22, r24
    11d6:	8e 1b       	sub	r24, r30
    11d8:	9f 0b       	sbc	r25, r31
    11da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z15hex_dump_memoryPhS_P8emstreambh>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	19 f0       	breq	.+6      	; 0x11ec <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    11e6:	b7 01       	movw	r22, r14
    11e8:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN8frt_task19print_stack_in_listEP8emstream>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	08 95       	ret

000011fe <_ZN9task_user18print_help_messageEv>:
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	6a e0       	ldi	r22, 0x0A	; 10
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	9f 81       	ldd	r25, Y+7	; 0x07
    120e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1212:	8c 01       	movw	r16, r24
    1214:	63 e6       	ldi	r22, 0x63	; 99
    1216:	76 e0       	ldi	r23, 0x06	; 6
    1218:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    121c:	6a e0       	ldi	r22, 0x0A	; 10
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1224:	8c 01       	movw	r16, r24
    1226:	6d e5       	ldi	r22, 0x5D	; 93
    1228:	76 e0       	ldi	r23, 0x06	; 6
    122a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    122e:	67 e0       	ldi	r22, 0x07	; 7
    1230:	c8 01       	movw	r24, r16
    1232:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1236:	6a e0       	ldi	r22, 0x0A	; 10
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	9f 81       	ldd	r25, Y+7	; 0x07
    123c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1240:	8c 01       	movw	r16, r24
    1242:	6e e3       	ldi	r22, 0x3E	; 62
    1244:	76 e0       	ldi	r23, 0x06	; 6
    1246:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    124a:	6a e0       	ldi	r22, 0x0A	; 10
    124c:	c8 01       	movw	r24, r16
    124e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1252:	8c 01       	movw	r16, r24
    1254:	68 e3       	ldi	r22, 0x38	; 56
    1256:	76 e0       	ldi	r23, 0x06	; 6
    1258:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    125c:	66 e0       	ldi	r22, 0x06	; 6
    125e:	c8 01       	movw	r24, r16
    1260:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1264:	6a e0       	ldi	r22, 0x0A	; 10
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    126e:	8c 01       	movw	r16, r24
    1270:	61 e2       	ldi	r22, 0x21	; 33
    1272:	76 e0       	ldi	r23, 0x06	; 6
    1274:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1278:	66 e0       	ldi	r22, 0x06	; 6
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1280:	6a e0       	ldi	r22, 0x0A	; 10
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    128a:	8c 01       	movw	r16, r24
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	76 e0       	ldi	r23, 0x06	; 6
    1290:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1294:	66 e0       	ldi	r22, 0x06	; 6
    1296:	c8 01       	movw	r24, r16
    1298:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    129c:	6a e0       	ldi	r22, 0x0A	; 10
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12a6:	8c 01       	movw	r16, r24
    12a8:	6d ee       	ldi	r22, 0xED	; 237
    12aa:	75 e0       	ldi	r23, 0x05	; 5
    12ac:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12b0:	66 e0       	ldi	r22, 0x06	; 6
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12c2:	8c 01       	movw	r16, r24
    12c4:	6c ec       	ldi	r22, 0xCC	; 204
    12c6:	75 e0       	ldi	r23, 0x05	; 5
    12c8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	c8 01       	movw	r24, r16
    12d0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12d4:	6a e0       	ldi	r22, 0x0A	; 10
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12de:	8c 01       	movw	r16, r24
    12e0:	65 ea       	ldi	r22, 0xA5	; 165
    12e2:	75 e0       	ldi	r23, 0x05	; 5
    12e4:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    12e8:	66 e0       	ldi	r22, 0x06	; 6
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12f0:	6a e0       	ldi	r22, 0x0A	; 10
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	9f 81       	ldd	r25, Y+7	; 0x07
    12f6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    12fa:	8c 01       	movw	r16, r24
    12fc:	67 e8       	ldi	r22, 0x87	; 135
    12fe:	75 e0       	ldi	r23, 0x05	; 5
    1300:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1304:	66 e0       	ldi	r22, 0x06	; 6
    1306:	c8 01       	movw	r24, r16
    1308:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    130c:	6a e0       	ldi	r22, 0x0A	; 10
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1316:	8c 01       	movw	r16, r24
    1318:	6c e6       	ldi	r22, 0x6C	; 108
    131a:	75 e0       	ldi	r23, 0x05	; 5
    131c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	c8 01       	movw	r24, r16
    1324:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1328:	6a e0       	ldi	r22, 0x0A	; 10
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1332:	8c 01       	movw	r16, r24
    1334:	61 e5       	ldi	r22, 0x51	; 81
    1336:	75 e0       	ldi	r23, 0x05	; 5
    1338:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    133c:	66 e0       	ldi	r22, 0x06	; 6
    133e:	c8 01       	movw	r24, r16
    1340:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1344:	6a e0       	ldi	r22, 0x0A	; 10
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    134e:	8c 01       	movw	r16, r24
    1350:	69 e3       	ldi	r22, 0x39	; 57
    1352:	75 e0       	ldi	r23, 0x05	; 5
    1354:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1360:	6a e0       	ldi	r22, 0x0A	; 10
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    136a:	8c 01       	movw	r16, r24
    136c:	61 e2       	ldi	r22, 0x21	; 33
    136e:	75 e0       	ldi	r23, 0x05	; 5
    1370:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1374:	66 e0       	ldi	r22, 0x06	; 6
    1376:	c8 01       	movw	r24, r16
    1378:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    137c:	6a e0       	ldi	r22, 0x0A	; 10
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1386:	8c 01       	movw	r16, r24
    1388:	6a e0       	ldi	r22, 0x0A	; 10
    138a:	75 e0       	ldi	r23, 0x05	; 5
    138c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1390:	66 e0       	ldi	r22, 0x06	; 6
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13a2:	ec 01       	movw	r28, r24
    13a4:	6b ef       	ldi	r22, 0xFB	; 251
    13a6:	74 e0       	ldi	r23, 0x04	; 4
    13a8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    13ac:	66 e0       	ldi	r22, 0x06	; 6
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <_ZN9task_user3runEv>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	2c 97       	sbiw	r28, 0x0c	; 12
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	7c 01       	movw	r14, r24
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	1a 82       	std	Y+2, r1	; 0x02
    13d2:	1b 82       	std	Y+3, r1	; 0x03
    13d4:	1c 82       	std	Y+4, r1	; 0x04
    13d6:	1d 82       	std	Y+5, r1	; 0x05
    13d8:	1e 82       	std	Y+6, r1	; 0x06
    13da:	6a e0       	ldi	r22, 0x0A	; 10
    13dc:	dc 01       	movw	r26, r24
    13de:	16 96       	adiw	r26, 0x06	; 6
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	17 97       	sbiw	r26, 0x07	; 7
    13e6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13ea:	6c 01       	movw	r12, r24
    13ec:	6d ed       	ldi	r22, 0xDD	; 221
    13ee:	74 e0       	ldi	r23, 0x04	; 4
    13f0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    13f4:	66 e0       	ldi	r22, 0x06	; 6
    13f6:	c6 01       	movw	r24, r12
    13f8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    13fc:	11 e0       	ldi	r17, 0x01	; 1
    13fe:	81 2c       	mov	r8, r1
    1400:	68 94       	set
    1402:	99 24       	eor	r9, r9
    1404:	93 f8       	bld	r9, 3
    1406:	0f 2e       	mov	r0, r31
    1408:	f0 ee       	ldi	r31, 0xE0	; 224
    140a:	af 2e       	mov	r10, r31
    140c:	f0 e2       	ldi	r31, 0x20	; 32
    140e:	bf 2e       	mov	r11, r31
    1410:	f0 2d       	mov	r31, r0
    1412:	f7 01       	movw	r30, r14
    1414:	84 85       	ldd	r24, Z+12	; 0x0c
    1416:	88 23       	and	r24, r24
    1418:	21 f0       	breq	.+8      	; 0x1422 <_ZN9task_user3runEv+0x64>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f4       	brne	.+2      	; 0x1420 <_ZN9task_user3runEv+0x62>
    141e:	60 c0       	rjmp	.+192    	; 0x14e0 <_ZN9task_user3runEv+0x122>
    1420:	63 c2       	rjmp	.+1222   	; 0x18e8 <_ZN9task_user3runEv+0x52a>
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	97 81       	ldd	r25, Z+7	; 0x07
    1426:	dc 01       	movw	r26, r24
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	04 80       	ldd	r0, Z+4	; 0x04
    142e:	f5 81       	ldd	r31, Z+5	; 0x05
    1430:	e0 2d       	mov	r30, r0
    1432:	19 95       	eicall
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <_ZN9task_user3runEv+0x7c>
    1438:	37 c0       	rjmp	.+110    	; 0x14a8 <_ZN9task_user3runEv+0xea>
    143a:	f7 01       	movw	r30, r14
    143c:	86 81       	ldd	r24, Z+6	; 0x06
    143e:	97 81       	ldd	r25, Z+7	; 0x07
    1440:	dc 01       	movw	r26, r24
    1442:	ed 91       	ld	r30, X+
    1444:	fc 91       	ld	r31, X
    1446:	06 80       	ldd	r0, Z+6	; 0x06
    1448:	f7 81       	ldd	r31, Z+7	; 0x07
    144a:	e0 2d       	mov	r30, r0
    144c:	19 95       	eicall
    144e:	99 27       	eor	r25, r25
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	f9 f0       	breq	.+62     	; 0x1494 <_ZN9task_user3runEv+0xd6>
    1456:	03 97       	sbiw	r24, 0x03	; 3
    1458:	09 f0       	breq	.+2      	; 0x145c <_ZN9task_user3runEv+0x9e>
    145a:	61 c2       	rjmp	.+1218   	; 0x191e <_ZN9task_user3runEv+0x560>
    145c:	6a e0       	ldi	r22, 0x0A	; 10
    145e:	f7 01       	movw	r30, r14
    1460:	86 81       	ldd	r24, Z+6	; 0x06
    1462:	97 81       	ldd	r25, Z+7	; 0x07
    1464:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1468:	7c 01       	movw	r14, r24
    146a:	6f ec       	ldi	r22, 0xCF	; 207
    146c:	74 e0       	ldi	r23, 0x04	; 4
    146e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1472:	66 e0       	ldi	r22, 0x06	; 6
    1474:	c7 01       	movw	r24, r14
    1476:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	88 ed       	ldi	r24, 0xD8	; 216
    147e:	08 b6       	in	r0, 0x38	; 56
    1480:	18 be       	out	0x38, r1	; 56
    1482:	84 bf       	out	0x34, r24	; 52
    1484:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1488:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    148c:	81 fd       	sbrc	r24, 1
    148e:	fc cf       	rjmp	.-8      	; 0x1488 <_ZN9task_user3runEv+0xca>
    1490:	08 be       	out	0x38, r0	; 56
    1492:	ff cf       	rjmp	.-2      	; 0x1492 <_ZN9task_user3runEv+0xd4>
    1494:	c7 01       	movw	r24, r14
    1496:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN9task_user18print_help_messageEv>
    149a:	d7 01       	movw	r26, r14
    149c:	1c 96       	adiw	r26, 0x0c	; 12
    149e:	1c 93       	st	X, r17
    14a0:	1c 97       	sbiw	r26, 0x0c	; 12
    14a2:	1d 96       	adiw	r26, 0x0d	; 13
    14a4:	1c 93       	st	X, r17
    14a6:	3b c2       	rjmp	.+1142   	; 0x191e <_ZN9task_user3runEv+0x560>
    14a8:	88 ef       	ldi	r24, 0xF8	; 248
    14aa:	90 e2       	ldi	r25, 0x20	; 32
    14ac:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <_ZN9task_user3runEv+0xf8>
    14b4:	34 c2       	rjmp	.+1128   	; 0x191e <_ZN9task_user3runEv+0x560>
    14b6:	d7 01       	movw	r26, r14
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	17 97       	sbiw	r26, 0x07	; 7
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	c2 80       	ldd	r12, Z+2	; 0x02
    14c8:	d3 80       	ldd	r13, Z+3	; 0x03
    14ca:	88 ef       	ldi	r24, 0xF8	; 248
    14cc:	90 e2       	ldi	r25, 0x20	; 32
    14ce:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
    14d2:	68 2f       	mov	r22, r24
    14d4:	f7 01       	movw	r30, r14
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	97 81       	ldd	r25, Z+7	; 0x07
    14da:	f6 01       	movw	r30, r12
    14dc:	19 95       	eicall
    14de:	1f c2       	rjmp	.+1086   	; 0x191e <_ZN9task_user3runEv+0x560>
    14e0:	86 81       	ldd	r24, Z+6	; 0x06
    14e2:	97 81       	ldd	r25, Z+7	; 0x07
    14e4:	dc 01       	movw	r26, r24
    14e6:	ed 91       	ld	r30, X+
    14e8:	fc 91       	ld	r31, X
    14ea:	04 80       	ldd	r0, Z+4	; 0x04
    14ec:	f5 81       	ldd	r31, Z+5	; 0x05
    14ee:	e0 2d       	mov	r30, r0
    14f0:	19 95       	eicall
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <_ZN9task_user3runEv+0x13a>
    14f6:	13 c2       	rjmp	.+1062   	; 0x191e <_ZN9task_user3runEv+0x560>
    14f8:	f7 01       	movw	r30, r14
    14fa:	86 81       	ldd	r24, Z+6	; 0x06
    14fc:	97 81       	ldd	r25, Z+7	; 0x07
    14fe:	dc 01       	movw	r26, r24
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	06 80       	ldd	r0, Z+6	; 0x06
    1506:	f7 81       	ldd	r31, Z+7	; 0x07
    1508:	e0 2d       	mov	r30, r0
    150a:	19 95       	eicall
    150c:	bc 01       	movw	r22, r24
    150e:	fc 01       	movw	r30, r24
    1510:	ff 27       	eor	r31, r31
    1512:	7b 97       	sbiw	r30, 0x1b	; 27
    1514:	ec 35       	cpi	r30, 0x5C	; 92
    1516:	f1 05       	cpc	r31, r1
    1518:	08 f0       	brcs	.+2      	; 0x151c <_ZN9task_user3runEv+0x15e>
    151a:	ca c1       	rjmp	.+916    	; 0x18b0 <_ZN9task_user3runEv+0x4f2>
    151c:	88 27       	eor	r24, r24
    151e:	e7 5f       	subi	r30, 0xF7	; 247
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	8f 4f       	sbci	r24, 0xFF	; 255
    1524:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__tablejump2__>
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    1530:	bc 01       	movw	r22, r24
    1532:	f7 01       	movw	r30, r14
    1534:	86 81       	ldd	r24, Z+6	; 0x06
    1536:	97 81       	ldd	r25, Z+7	; 0x07
    1538:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZlsR8emstreamR10time_stamp>
    153c:	66 e0       	ldi	r22, 0x06	; 6
    153e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1542:	ed c1       	rjmp	.+986    	; 0x191e <_ZN9task_user3runEv+0x560>
    1544:	1f 82       	std	Y+7, r1	; 0x07
    1546:	18 86       	std	Y+8, r1	; 0x08
    1548:	19 86       	std	Y+9, r1	; 0x09
    154a:	1a 86       	std	Y+10, r1	; 0x0a
    154c:	1b 86       	std	Y+11, r1	; 0x0b
    154e:	1c 86       	std	Y+12, r1	; 0x0c
    1550:	0e 94 a1 14 	call	0x2942	; 0x2942 <xPortGetFreeHeapSize>
    1554:	3c 01       	movw	r6, r24
    1556:	ce 01       	movw	r24, r28
    1558:	07 96       	adiw	r24, 0x07	; 7
    155a:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    155e:	2c 01       	movw	r4, r24
    1560:	66 e0       	ldi	r22, 0x06	; 6
    1562:	d7 01       	movw	r26, r14
    1564:	16 96       	adiw	r26, 0x06	; 6
    1566:	8d 91       	ld	r24, X+
    1568:	9c 91       	ld	r25, X
    156a:	17 97       	sbiw	r26, 0x07	; 7
    156c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1570:	6a e0       	ldi	r22, 0x0A	; 10
    1572:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1576:	6c 01       	movw	r12, r24
    1578:	60 e1       	ldi	r22, 0x10	; 16
    157a:	74 e0       	ldi	r23, 0x04	; 4
    157c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1580:	6a e0       	ldi	r22, 0x0A	; 10
    1582:	c6 01       	movw	r24, r12
    1584:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1588:	6c 01       	movw	r12, r24
    158a:	64 e0       	ldi	r22, 0x04	; 4
    158c:	74 e0       	ldi	r23, 0x04	; 4
    158e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1592:	66 e0       	ldi	r22, 0x06	; 6
    1594:	c6 01       	movw	r24, r12
    1596:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    159a:	6a e0       	ldi	r22, 0x0A	; 10
    159c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15a0:	6c 01       	movw	r12, r24
    15a2:	6d ef       	ldi	r22, 0xFD	; 253
    15a4:	73 e0       	ldi	r23, 0x03	; 3
    15a6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15aa:	b2 01       	movw	r22, r4
    15ac:	c6 01       	movw	r24, r12
    15ae:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZlsR8emstreamR10time_stamp>
    15b2:	6a e0       	ldi	r22, 0x0A	; 10
    15b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15b8:	6c 01       	movw	r12, r24
    15ba:	6f ee       	ldi	r22, 0xEF	; 239
    15bc:	73 e0       	ldi	r23, 0x03	; 3
    15be:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15c2:	b3 01       	movw	r22, r6
    15c4:	c6 01       	movw	r24, r12
    15c6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    15ca:	6a e0       	ldi	r22, 0x0A	; 10
    15cc:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15d0:	6c 01       	movw	r12, r24
    15d2:	6d ee       	ldi	r22, 0xED	; 237
    15d4:	73 e0       	ldi	r23, 0x03	; 3
    15d6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    15da:	4f ef       	ldi	r20, 0xFF	; 255
    15dc:	5f e0       	ldi	r21, 0x0F	; 15
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	c6 01       	movw	r24, r12
    15e4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8emstreamlsEm>
    15e8:	f4 01       	movw	r30, r8
    15ea:	60 a4       	ldd	r6, Z+40	; 0x28
    15ec:	71 a4       	ldd	r7, Z+41	; 0x29
    15ee:	6a e0       	ldi	r22, 0x0A	; 10
    15f0:	d7 01       	movw	r26, r14
    15f2:	16 96       	adiw	r26, 0x06	; 6
    15f4:	8d 91       	ld	r24, X+
    15f6:	9c 91       	ld	r25, X
    15f8:	17 97       	sbiw	r26, 0x07	; 7
    15fa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    15fe:	6c 01       	movw	r12, r24
    1600:	62 ee       	ldi	r22, 0xE2	; 226
    1602:	73 e0       	ldi	r23, 0x03	; 3
    1604:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1608:	b3 01       	movw	r22, r6
    160a:	c6 01       	movw	r24, r12
    160c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1610:	66 e0       	ldi	r22, 0x06	; 6
    1612:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    161c:	f7 01       	movw	r30, r14
    161e:	c6 80       	ldd	r12, Z+6	; 0x06
    1620:	d7 80       	ldd	r13, Z+7	; 0x07
    1622:	6a e0       	ldi	r22, 0x0A	; 10
    1624:	c6 01       	movw	r24, r12
    1626:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    162a:	3c 01       	movw	r6, r24
    162c:	67 ed       	ldi	r22, 0xD7	; 215
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1634:	6a e0       	ldi	r22, 0x0A	; 10
    1636:	c3 01       	movw	r24, r6
    1638:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    163c:	3c 01       	movw	r6, r24
    163e:	60 ed       	ldi	r22, 0xD0	; 208
    1640:	73 e0       	ldi	r23, 0x03	; 3
    1642:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1646:	66 e0       	ldi	r22, 0x06	; 6
    1648:	c3 01       	movw	r24, r6
    164a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    164e:	6a e0       	ldi	r22, 0x0A	; 10
    1650:	c6 01       	movw	r24, r12
    1652:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1656:	3c 01       	movw	r6, r24
    1658:	6f eb       	ldi	r22, 0xBF	; 191
    165a:	73 e0       	ldi	r23, 0x03	; 3
    165c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1660:	6a e0       	ldi	r22, 0x0A	; 10
    1662:	c3 01       	movw	r24, r6
    1664:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1668:	3c 01       	movw	r6, r24
    166a:	63 eb       	ldi	r22, 0xB3	; 179
    166c:	73 e0       	ldi	r23, 0x03	; 3
    166e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1672:	6a e0       	ldi	r22, 0x0A	; 10
    1674:	c3 01       	movw	r24, r6
    1676:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    167a:	3c 01       	movw	r6, r24
    167c:	6d ea       	ldi	r22, 0xAD	; 173
    167e:	73 e0       	ldi	r23, 0x03	; 3
    1680:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1684:	66 e0       	ldi	r22, 0x06	; 6
    1686:	c3 01       	movw	r24, r6
    1688:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    168c:	6a e0       	ldi	r22, 0x0A	; 10
    168e:	c6 01       	movw	r24, r12
    1690:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1694:	3c 01       	movw	r6, r24
    1696:	6c e9       	ldi	r22, 0x9C	; 156
    1698:	73 e0       	ldi	r23, 0x03	; 3
    169a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    169e:	6a e0       	ldi	r22, 0x0A	; 10
    16a0:	c3 01       	movw	r24, r6
    16a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16a6:	3c 01       	movw	r6, r24
    16a8:	60 e9       	ldi	r22, 0x90	; 144
    16aa:	73 e0       	ldi	r23, 0x03	; 3
    16ac:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16b0:	6a e0       	ldi	r22, 0x0A	; 10
    16b2:	c3 01       	movw	r24, r6
    16b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16b8:	3c 01       	movw	r6, r24
    16ba:	6a e8       	ldi	r22, 0x8A	; 138
    16bc:	73 e0       	ldi	r23, 0x03	; 3
    16be:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16c2:	66 e0       	ldi	r22, 0x06	; 6
    16c4:	c3 01       	movw	r24, r6
    16c6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16ca:	d5 01       	movw	r26, r10
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	19 f0       	breq	.+6      	; 0x16da <_ZN9task_user3runEv+0x31c>
    16d4:	b6 01       	movw	r22, r12
    16d6:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8frt_task20print_status_in_listEP8emstream>
    16da:	0e 94 04 1b 	call	0x3608	; 0x3608 <xTaskGetIdleTaskHandle>
    16de:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <uxTaskGetStackHighWaterMark>
    16e2:	08 2f       	mov	r16, r24
    16e4:	6a e0       	ldi	r22, 0x0A	; 10
    16e6:	c6 01       	movw	r24, r12
    16e8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    16ec:	6c 01       	movw	r12, r24
    16ee:	6f e7       	ldi	r22, 0x7F	; 127
    16f0:	73 e0       	ldi	r23, 0x03	; 3
    16f2:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    16f6:	60 2f       	mov	r22, r16
    16f8:	c6 01       	movw	r24, r12
    16fa:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN8emstreamlsEh>
    16fe:	6a e0       	ldi	r22, 0x0A	; 10
    1700:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1704:	6c 01       	movw	r12, r24
    1706:	6d e7       	ldi	r22, 0x7D	; 125
    1708:	73 e0       	ldi	r23, 0x03	; 3
    170a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    170e:	64 e6       	ldi	r22, 0x64	; 100
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	c6 01       	movw	r24, r12
    1714:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1718:	6a e0       	ldi	r22, 0x0A	; 10
    171a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    171e:	6c 01       	movw	r12, r24
    1720:	6a e7       	ldi	r22, 0x7A	; 122
    1722:	73 e0       	ldi	r23, 0x03	; 3
    1724:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1728:	66 e0       	ldi	r22, 0x06	; 6
    172a:	c6 01       	movw	r24, r12
    172c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1730:	f6 c0       	rjmp	.+492    	; 0x191e <_ZN9task_user3runEv+0x560>
    1732:	f7 01       	movw	r30, r14
    1734:	c6 80       	ldd	r12, Z+6	; 0x06
    1736:	d7 80       	ldd	r13, Z+7	; 0x07
    1738:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    173c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	19 f0       	breq	.+6      	; 0x174a <_ZN9task_user3runEv+0x38c>
    1744:	b6 01       	movw	r22, r12
    1746:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN8frt_task19print_stack_in_listEP8emstream>
    174a:	6a e0       	ldi	r22, 0x0A	; 10
    174c:	c6 01       	movw	r24, r12
    174e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1752:	3c 01       	movw	r6, r24
    1754:	60 e4       	ldi	r22, 0x40	; 64
    1756:	74 e0       	ldi	r23, 0x04	; 4
    1758:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    175c:	6a e0       	ldi	r22, 0x0A	; 10
    175e:	c3 01       	movw	r24, r6
    1760:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1764:	3c 01       	movw	r6, r24
    1766:	65 e3       	ldi	r22, 0x35	; 53
    1768:	74 e0       	ldi	r23, 0x04	; 4
    176a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    176e:	6a e0       	ldi	r22, 0x0A	; 10
    1770:	c3 01       	movw	r24, r6
    1772:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1776:	3c 01       	movw	r6, r24
    1778:	6f e2       	ldi	r22, 0x2F	; 47
    177a:	74 e0       	ldi	r23, 0x04	; 4
    177c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1780:	66 e0       	ldi	r22, 0x06	; 6
    1782:	c3 01       	movw	r24, r6
    1784:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1788:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <portStackTopForTask>
    178c:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <portStackTopForTask+0x1>
    1790:	bc 01       	movw	r22, r24
    1792:	6f 5f       	subi	r22, 0xFF	; 255
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	01 e1       	ldi	r16, 0x11	; 17
    1798:	21 2f       	mov	r18, r17
    179a:	a6 01       	movw	r20, r12
    179c:	83 56       	subi	r24, 0x63	; 99
    179e:	91 09       	sbc	r25, r1
    17a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z15hex_dump_memoryPhS_P8emstreambh>
    17a4:	bc c0       	rjmp	.+376    	; 0x191e <_ZN9task_user3runEv+0x560>
    17a6:	c7 01       	movw	r24, r14
    17a8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN9task_user18print_help_messageEv>
    17ac:	b8 c0       	rjmp	.+368    	; 0x191e <_ZN9task_user3runEv+0x560>
    17ae:	6a e0       	ldi	r22, 0x0A	; 10
    17b0:	d7 01       	movw	r26, r14
    17b2:	16 96       	adiw	r26, 0x06	; 6
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	17 97       	sbiw	r26, 0x07	; 7
    17ba:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17be:	6c 01       	movw	r12, r24
    17c0:	6d eb       	ldi	r22, 0xBD	; 189
    17c2:	74 e0       	ldi	r23, 0x04	; 4
    17c4:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    17c8:	66 e0       	ldi	r22, 0x06	; 6
    17ca:	c6 01       	movw	r24, r12
    17cc:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17d0:	f7 01       	movw	r30, r14
    17d2:	14 86       	std	Z+12, r1	; 0x0c
    17d4:	15 86       	std	Z+13, r1	; 0x0d
    17d6:	a3 c0       	rjmp	.+326    	; 0x191e <_ZN9task_user3runEv+0x560>
    17d8:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    17dc:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	0f 92       	push	r0
    17e6:	10 83       	st	Z, r17
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	6a e0       	ldi	r22, 0x0A	; 10
    17ee:	d7 01       	movw	r26, r14
    17f0:	16 96       	adiw	r26, 0x06	; 6
    17f2:	8d 91       	ld	r24, X+
    17f4:	9c 91       	ld	r25, X
    17f6:	17 97       	sbiw	r26, 0x07	; 7
    17f8:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    17fc:	6c 01       	movw	r12, r24
    17fe:	60 eb       	ldi	r22, 0xB0	; 176
    1800:	74 e0       	ldi	r23, 0x04	; 4
    1802:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1806:	66 e0       	ldi	r22, 0x06	; 6
    1808:	c6 01       	movw	r24, r12
    180a:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    180e:	87 c0       	rjmp	.+270    	; 0x191e <_ZN9task_user3runEv+0x560>
    1810:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1814:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	0f 92       	push	r0
    181e:	10 83       	st	Z, r17
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	6a e0       	ldi	r22, 0x0A	; 10
    1826:	f7 01       	movw	r30, r14
    1828:	86 81       	ldd	r24, Z+6	; 0x06
    182a:	97 81       	ldd	r25, Z+7	; 0x07
    182c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1830:	6c 01       	movw	r12, r24
    1832:	6f e9       	ldi	r22, 0x9F	; 159
    1834:	74 e0       	ldi	r23, 0x04	; 4
    1836:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    183a:	66 e0       	ldi	r22, 0x06	; 6
    183c:	c6 01       	movw	r24, r12
    183e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1842:	6d c0       	rjmp	.+218    	; 0x191e <_ZN9task_user3runEv+0x560>
    1844:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    1848:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	0f 92       	push	r0
    1852:	10 83       	st	Z, r17
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	6a e0       	ldi	r22, 0x0A	; 10
    185a:	d7 01       	movw	r26, r14
    185c:	16 96       	adiw	r26, 0x06	; 6
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	17 97       	sbiw	r26, 0x07	; 7
    1864:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1868:	6c 01       	movw	r12, r24
    186a:	60 e9       	ldi	r22, 0x90	; 144
    186c:	74 e0       	ldi	r23, 0x04	; 4
    186e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1872:	66 e0       	ldi	r22, 0x06	; 6
    1874:	c6 01       	movw	r24, r12
    1876:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    187a:	51 c0       	rjmp	.+162    	; 0x191e <_ZN9task_user3runEv+0x560>
    187c:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1880:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	0f 92       	push	r0
    188a:	10 83       	st	Z, r17
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	6a e0       	ldi	r22, 0x0A	; 10
    1892:	f7 01       	movw	r30, r14
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	97 81       	ldd	r25, Z+7	; 0x07
    1898:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    189c:	6c 01       	movw	r12, r24
    189e:	68 e6       	ldi	r22, 0x68	; 104
    18a0:	74 e0       	ldi	r23, 0x04	; 4
    18a2:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	c6 01       	movw	r24, r12
    18aa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18ae:	37 c0       	rjmp	.+110    	; 0x191e <_ZN9task_user3runEv+0x560>
    18b0:	d7 01       	movw	r26, r14
    18b2:	16 96       	adiw	r26, 0x06	; 6
    18b4:	8d 91       	ld	r24, X+
    18b6:	9c 91       	ld	r25, X
    18b8:	17 97       	sbiw	r26, 0x07	; 7
    18ba:	dc 01       	movw	r26, r24
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	02 80       	ldd	r0, Z+2	; 0x02
    18c2:	f3 81       	ldd	r31, Z+3	; 0x03
    18c4:	e0 2d       	mov	r30, r0
    18c6:	19 95       	eicall
    18c8:	6a e0       	ldi	r22, 0x0A	; 10
    18ca:	f7 01       	movw	r30, r14
    18cc:	86 81       	ldd	r24, Z+6	; 0x06
    18ce:	97 81       	ldd	r25, Z+7	; 0x07
    18d0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18d4:	6c 01       	movw	r12, r24
    18d6:	62 e6       	ldi	r22, 0x62	; 98
    18d8:	74 e0       	ldi	r23, 0x04	; 4
    18da:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18de:	66 e0       	ldi	r22, 0x06	; 6
    18e0:	c6 01       	movw	r24, r12
    18e2:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18e6:	1b c0       	rjmp	.+54     	; 0x191e <_ZN9task_user3runEv+0x560>
    18e8:	6a e0       	ldi	r22, 0x0A	; 10
    18ea:	86 81       	ldd	r24, Z+6	; 0x06
    18ec:	97 81       	ldd	r25, Z+7	; 0x07
    18ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    18f2:	7c 01       	movw	r14, r24
    18f4:	65 e4       	ldi	r22, 0x45	; 69
    18f6:	74 e0       	ldi	r23, 0x04	; 4
    18f8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    18fc:	66 e0       	ldi	r22, 0x06	; 6
    18fe:	c7 01       	movw	r24, r14
    1900:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	88 ed       	ldi	r24, 0xD8	; 216
    1908:	08 b6       	in	r0, 0x38	; 56
    190a:	18 be       	out	0x38, r1	; 56
    190c:	84 bf       	out	0x34, r24	; 52
    190e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1912:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1916:	81 fd       	sbrc	r24, 1
    1918:	fc cf       	rjmp	.-8      	; 0x1912 <_ZN9task_user3runEv+0x554>
    191a:	08 be       	out	0x38, r0	; 56
    191c:	ff cf       	rjmp	.-2      	; 0x191c <_ZN9task_user3runEv+0x55e>
    191e:	f7 01       	movw	r30, r14
    1920:	86 85       	ldd	r24, Z+14	; 0x0e
    1922:	97 85       	ldd	r25, Z+15	; 0x0f
    1924:	a0 89       	ldd	r26, Z+16	; 0x10
    1926:	b1 89       	ldd	r27, Z+17	; 0x11
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	a1 1d       	adc	r26, r1
    192c:	b1 1d       	adc	r27, r1
    192e:	86 87       	std	Z+14, r24	; 0x0e
    1930:	97 87       	std	Z+15, r25	; 0x0f
    1932:	a0 8b       	std	Z+16, r26	; 0x10
    1934:	b1 8b       	std	Z+17, r27	; 0x11
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <vTaskDelay>
    1942:	67 cd       	rjmp	.-1330   	; 0x1412 <_ZN9task_user3runEv+0x54>

00001944 <_ZN22task_system_controller3runEv>:
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	00 d0       	rcall	.+0      	; 0x194a <_ZN22task_system_controller3runEv+0x6>
    194a:	1f 92       	push	r1
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8c 01       	movw	r16, r24
    1952:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <xTaskGetTickCount>
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	0f 2e       	mov	r0, r31
    1960:	f3 e0       	ldi	r31, 0x03	; 3
    1962:	6f 2e       	mov	r6, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	0f 2e       	mov	r0, r31
    1968:	fc ed       	ldi	r31, 0xDC	; 220
    196a:	ef 2e       	mov	r14, r31
    196c:	f1 2c       	mov	r15, r1
    196e:	f0 2d       	mov	r31, r0
    1970:	68 94       	set
    1972:	77 24       	eor	r7, r7
    1974:	72 f8       	bld	r7, 2
    1976:	0f 2e       	mov	r0, r31
    1978:	f4 e6       	ldi	r31, 0x64	; 100
    197a:	8f 2e       	mov	r8, r31
    197c:	f0 2d       	mov	r31, r0
    197e:	55 24       	eor	r5, r5
    1980:	53 94       	inc	r5
    1982:	0f 2e       	mov	r0, r31
    1984:	f4 e2       	ldi	r31, 0x24	; 36
    1986:	cf 2e       	mov	r12, r31
    1988:	dd 24       	eor	r13, r13
    198a:	da 94       	dec	r13
    198c:	f0 2d       	mov	r31, r0
    198e:	68 94       	set
    1990:	99 24       	eor	r9, r9
    1992:	91 f8       	bld	r9, 1
    1994:	d8 01       	movw	r26, r16
    1996:	1c 96       	adiw	r26, 0x0c	; 12
    1998:	8c 91       	ld	r24, X
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	09 f4       	brne	.+2      	; 0x19a0 <_ZN22task_system_controller3runEv+0x5c>
    199e:	b3 c0       	rjmp	.+358    	; 0x1b06 <_ZN22task_system_controller3runEv+0x1c2>
    19a0:	30 f4       	brcc	.+12     	; 0x19ae <_ZN22task_system_controller3runEv+0x6a>
    19a2:	88 23       	and	r24, r24
    19a4:	59 f0       	breq	.+22     	; 0x19bc <_ZN22task_system_controller3runEv+0x78>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <_ZN22task_system_controller3runEv+0x68>
    19aa:	66 c0       	rjmp	.+204    	; 0x1a78 <_ZN22task_system_controller3runEv+0x134>
    19ac:	81 c1       	rjmp	.+770    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <_ZN22task_system_controller3runEv+0x70>
    19b2:	d9 c0       	rjmp	.+434    	; 0x1b66 <_ZN22task_system_controller3runEv+0x222>
    19b4:	84 36       	cpi	r24, 0x64	; 100
    19b6:	09 f4       	brne	.+2      	; 0x19ba <_ZN22task_system_controller3runEv+0x76>
    19b8:	5b c1       	rjmp	.+694    	; 0x1c70 <_ZN22task_system_controller3runEv+0x32c>
    19ba:	7a c1       	rjmp	.+756    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    19bc:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    19c0:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	0f 92       	push	r0
    19ca:	10 82       	st	Z, r1
    19cc:	11 82       	std	Z+1, r1	; 0x01
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	0f 92       	push	r0
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    19e0:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    19e4:	80 81       	ld	r24, Z
    19e6:	88 23       	and	r24, r24
    19e8:	09 f4       	brne	.+2      	; 0x19ec <_ZN22task_system_controller3runEv+0xa8>
    19ea:	62 c1       	rjmp	.+708    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    19ec:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    19f0:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	0f 92       	push	r0
    19fa:	10 82       	st	Z, r1
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <stop>
    1a04:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <stop+0x1>
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	0f 92       	push	r0
    1a0e:	10 82       	st	Z, r1
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1a18:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	0f 92       	push	r0
    1a22:	e0 82       	st	Z, r14
    1a24:	f1 82       	std	Z+1, r15	; 0x01
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
    1a38:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <_ZN22task_system_controller3runEv+0x100>
    1a42:	36 c1       	rjmp	.+620    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	0f 92       	push	r0
    1a4a:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1a4e:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <linear_offset>
    1a5e:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <linear_offset+0x1>
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	0f 92       	push	r0
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	f8 01       	movw	r30, r16
    1a72:	54 86       	std	Z+12, r5	; 0x0c
    1a74:	55 86       	std	Z+13, r5	; 0x0d
    1a76:	1c c1       	rjmp	.+568    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1a78:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <begin>
    1a7c:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <begin+0x1>
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	0f 92       	push	r0
    1a86:	10 82       	st	Z, r1
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1a90:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	0f 92       	push	r0
    1a9a:	c0 82       	st	Z, r12
    1a9c:	d1 82       	std	Z+1, r13	; 0x01
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	0f 92       	push	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1ab0:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 23       	and	r24, r24
    1ab8:	a9 f0       	breq	.+42     	; 0x1ae4 <_ZN22task_system_controller3runEv+0x1a0>
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	0f 92       	push	r0
    1ac0:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1ac4:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	d8 01       	movw	r26, r16
    1ad2:	52 96       	adiw	r26, 0x12	; 18
    1ad4:	8d 93       	st	X+, r24
    1ad6:	9c 93       	st	X, r25
    1ad8:	53 97       	sbiw	r26, 0x13	; 19
    1ada:	1c 96       	adiw	r26, 0x0c	; 12
    1adc:	9c 92       	st	X, r9
    1ade:	1c 97       	sbiw	r26, 0x0c	; 12
    1ae0:	1d 96       	adiw	r26, 0x0d	; 13
    1ae2:	9c 92       	st	X, r9
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	0f 92       	push	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1af2:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1af6:	80 81       	ld	r24, Z
    1af8:	88 23       	and	r24, r24
    1afa:	09 f4       	brne	.+2      	; 0x1afe <_ZN22task_system_controller3runEv+0x1ba>
    1afc:	d9 c0       	rjmp	.+434    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1afe:	f8 01       	movw	r30, r16
    1b00:	14 86       	std	Z+12, r1	; 0x0c
    1b02:	15 86       	std	Z+13, r1	; 0x0d
    1b04:	d5 c0       	rjmp	.+426    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1b06:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b0a:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	0f 92       	push	r0
    1b14:	10 82       	st	Z, r1
    1b16:	11 82       	std	Z+1, r1	; 0x01
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	68 ec       	ldi	r22, 0xC8	; 200
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <vTaskDelay>
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	0f 92       	push	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1b36:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 23       	and	r24, r24
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <_ZN22task_system_controller3runEv+0x214>
    1b40:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1b44:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
    1b4e:	e0 82       	st	Z, r14
    1b50:	f1 82       	std	Z+1, r15	; 0x01
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	ac c0       	rjmp	.+344    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1b58:	d8 01       	movw	r26, r16
    1b5a:	1c 96       	adiw	r26, 0x0c	; 12
    1b5c:	6c 92       	st	X, r6
    1b5e:	1c 97       	sbiw	r26, 0x0c	; 12
    1b60:	1d 96       	adiw	r26, 0x0d	; 13
    1b62:	6c 92       	st	X, r6
    1b64:	a5 c0       	rjmp	.+330    	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1b66:	f8 01       	movw	r30, r16
    1b68:	82 89       	ldd	r24, Z+18	; 0x12
    1b6a:	93 89       	ldd	r25, Z+19	; 0x13
    1b6c:	99 23       	and	r25, r25
    1b6e:	0c f4       	brge	.+2      	; 0x1b72 <_ZN22task_system_controller3runEv+0x22e>
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	95 95       	asr	r25
    1b74:	87 95       	ror	r24
    1b76:	d8 01       	movw	r26, r16
    1b78:	54 96       	adiw	r26, 0x14	; 20
    1b7a:	8d 93       	st	X+, r24
    1b7c:	9c 93       	st	X, r25
    1b7e:	55 97       	sbiw	r26, 0x15	; 21
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	0f 92       	push	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_position>
    1b8e:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_position+0x1>
    1b92:	20 81       	ld	r18, Z
    1b94:	31 81       	ldd	r19, Z+1	; 0x01
    1b96:	82 1b       	sub	r24, r18
    1b98:	93 0b       	sbc	r25, r19
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	86 8b       	std	Z+22, r24	; 0x16
    1b9e:	97 8b       	std	Z+23, r25	; 0x17
    1ba0:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1ba4:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	0f 92       	push	r0
    1bae:	58 96       	adiw	r26, 0x18	; 24
    1bb0:	4d 91       	ld	r20, X+
    1bb2:	5c 91       	ld	r21, X
    1bb4:	59 97       	sbiw	r26, 0x19	; 25
    1bb6:	48 9f       	mul	r20, r24
    1bb8:	90 01       	movw	r18, r0
    1bba:	49 9f       	mul	r20, r25
    1bbc:	30 0d       	add	r19, r0
    1bbe:	58 9f       	mul	r21, r24
    1bc0:	30 0d       	add	r19, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	20 83       	st	Z, r18
    1bc6:	31 83       	std	Z+1, r19	; 0x01
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	0f 92       	push	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <leftLimitSwitch>
    1bda:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <leftLimitSwitch+0x1>
    1bde:	80 81       	ld	r24, Z
    1be0:	81 11       	cpse	r24, r1
    1be2:	0c c0       	rjmp	.+24     	; 0x1bfc <_ZN22task_system_controller3runEv+0x2b8>
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	0f 92       	push	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rightLimitSwitch>
    1bf2:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rightLimitSwitch+0x1>
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 23       	and	r24, r24
    1bfa:	91 f0       	breq	.+36     	; 0x1c20 <_ZN22task_system_controller3runEv+0x2dc>
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	a6 80       	ldd	r10, Z+6	; 0x06
    1c00:	b7 80       	ldd	r11, Z+7	; 0x07
    1c02:	6e e6       	ldi	r22, 0x6E	; 110
    1c04:	70 e2       	ldi	r23, 0x20	; 32
    1c06:	c5 01       	movw	r24, r10
    1c08:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1c0c:	66 e0       	ldi	r22, 0x06	; 6
    1c0e:	c5 01       	movw	r24, r10
    1c10:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1c14:	d8 01       	movw	r26, r16
    1c16:	1c 96       	adiw	r26, 0x0c	; 12
    1c18:	8c 92       	st	X, r8
    1c1a:	1c 97       	sbiw	r26, 0x0c	; 12
    1c1c:	1d 96       	adiw	r26, 0x0d	; 13
    1c1e:	8c 92       	st	X, r8
    1c20:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1c24:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	0f 92       	push	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	80 81       	ld	r24, Z
    1c34:	88 23       	and	r24, r24
    1c36:	49 f0       	breq	.+18     	; 0x1c4a <_ZN22task_system_controller3runEv+0x306>
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	0f 92       	push	r0
    1c3e:	10 82       	st	Z, r1
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	f8 01       	movw	r30, r16
    1c46:	14 86       	std	Z+12, r1	; 0x0c
    1c48:	15 86       	std	Z+13, r1	; 0x0d
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <go>
    1c58:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <go+0x1>
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f1       	breq	.+78     	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1c62:	d8 01       	movw	r26, r16
    1c64:	1c 96       	adiw	r26, 0x0c	; 12
    1c66:	7c 92       	st	X, r7
    1c68:	1c 97       	sbiw	r26, 0x0c	; 12
    1c6a:	1d 96       	adiw	r26, 0x0d	; 13
    1c6c:	7c 92       	st	X, r7
    1c6e:	20 c0       	rjmp	.+64     	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1c70:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <motor_command>
    1c74:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <motor_command+0x1>
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	0f 92       	push	r0
    1c7e:	10 82       	st	Z, r1
    1c80:	11 82       	std	Z+1, r1	; 0x01
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <reset>
    1c8a:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <reset+0x1>
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	0f 92       	push	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	80 81       	ld	r24, Z
    1c9a:	88 23       	and	r24, r24
    1c9c:	49 f0       	breq	.+18     	; 0x1cb0 <_ZN22task_system_controller3runEv+0x36c>
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	0f 92       	push	r0
    1ca4:	10 82       	st	Z, r1
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	f8 01       	movw	r30, r16
    1cac:	14 86       	std	Z+12, r1	; 0x0c
    1cae:	15 86       	std	Z+13, r1	; 0x0d
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	86 85       	ldd	r24, Z+14	; 0x0e
    1cb4:	97 85       	ldd	r25, Z+15	; 0x0f
    1cb6:	a0 89       	ldd	r26, Z+16	; 0x10
    1cb8:	b1 89       	ldd	r27, Z+17	; 0x11
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	b1 1d       	adc	r27, r1
    1cc0:	86 87       	std	Z+14, r24	; 0x0e
    1cc2:	97 87       	std	Z+15, r25	; 0x0f
    1cc4:	a0 8b       	std	Z+16, r26	; 0x10
    1cc6:	b1 8b       	std	Z+17, r27	; 0x11
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <vTaskDelayUntil>
    1cd8:	5d ce       	rjmp	.-838    	; 0x1994 <_ZN22task_system_controller3runEv+0x50>

00001cda <_ZN8frt_taskC2EPKchjP8emstream>:
    1cda:	4f 92       	push	r4
    1cdc:	5f 92       	push	r5
    1cde:	6f 92       	push	r6
    1ce0:	7f 92       	push	r7
    1ce2:	8f 92       	push	r8
    1ce4:	9f 92       	push	r9
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	2a 97       	sbiw	r28, 0x0a	; 10
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	4c 01       	movw	r8, r24
    1d06:	29 01       	movw	r4, r18
    1d08:	38 01       	movw	r6, r16
    1d0a:	8a e0       	ldi	r24, 0x0A	; 10
    1d0c:	90 e2       	ldi	r25, 0x20	; 32
    1d0e:	f4 01       	movw	r30, r8
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	fb 01       	movw	r30, r22
    1d16:	80 81       	ld	r24, Z
    1d18:	88 23       	and	r24, r24
    1d1a:	69 f0       	breq	.+26     	; 0x1d36 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1d1c:	de 01       	movw	r26, r28
    1d1e:	11 96       	adiw	r26, 0x01	; 1
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1d26:	99 30       	cpi	r25, 0x09	; 9
    1d28:	39 f0       	breq	.+14     	; 0x1d38 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1d2a:	9f 5f       	subi	r25, 0xFF	; 255
    1d2c:	8d 93       	st	X+, r24
    1d2e:	81 91       	ld	r24, Z+
    1d30:	81 11       	cpse	r24, r1
    1d32:	f9 cf       	rjmp	.-14     	; 0x1d26 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	e1 e0       	ldi	r30, 0x01	; 1
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	ec 0f       	add	r30, r28
    1d3e:	fd 1f       	adc	r31, r29
    1d40:	e9 0f       	add	r30, r25
    1d42:	f1 1d       	adc	r31, r1
    1d44:	10 82       	st	Z, r1
    1d46:	74 01       	movw	r14, r8
    1d48:	f2 e0       	ldi	r31, 0x02	; 2
    1d4a:	ef 0e       	add	r14, r31
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	a1 2c       	mov	r10, r1
    1d50:	b1 2c       	mov	r11, r1
    1d52:	c1 2c       	mov	r12, r1
    1d54:	d1 2c       	mov	r13, r1
    1d56:	04 2f       	mov	r16, r20
    1d58:	94 01       	movw	r18, r8
    1d5a:	a2 01       	movw	r20, r4
    1d5c:	be 01       	movw	r22, r28
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	87 e0       	ldi	r24, 0x07	; 7
    1d64:	94 e0       	ldi	r25, 0x04	; 4
    1d66:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskGenericCreate>
    1d6a:	f4 01       	movw	r30, r8
    1d6c:	66 82       	std	Z+6, r6	; 0x06
    1d6e:	77 82       	std	Z+7, r7	; 0x07
    1d70:	40 86       	std	Z+8, r4	; 0x08
    1d72:	51 86       	std	Z+9, r5	; 0x09
    1d74:	20 91 e0 20 	lds	r18, 0x20E0	; 0x8020e0 <last_created_task_pointer>
    1d78:	30 91 e1 20 	lds	r19, 0x20E1	; 0x8020e1 <last_created_task_pointer+0x1>
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	80 92 e0 20 	sts	0x20E0, r8	; 0x8020e0 <last_created_task_pointer>
    1d84:	90 92 e1 20 	sts	0x20E1, r9	; 0x8020e1 <last_created_task_pointer+0x1>
    1d88:	14 86       	std	Z+12, r1	; 0x0c
    1d8a:	15 86       	std	Z+13, r1	; 0x0d
    1d8c:	40 90 90 31 	lds	r4, 0x3190	; 0x803190 <portStackTopForTask>
    1d90:	50 90 91 31 	lds	r5, 0x3191	; 0x803191 <portStackTopForTask+0x1>
    1d94:	ff ef       	ldi	r31, 0xFF	; 255
    1d96:	4f 1a       	sub	r4, r31
    1d98:	5f 0a       	sbc	r5, r31
    1d9a:	40 92 90 31 	sts	0x3190, r4	; 0x803190 <portStackTopForTask>
    1d9e:	50 92 91 31 	sts	0x3191, r5	; 0x803191 <portStackTopForTask+0x1>
    1da2:	f4 01       	movw	r30, r8
    1da4:	42 86       	std	Z+10, r4	; 0x0a
    1da6:	53 86       	std	Z+11, r5	; 0x0b
    1da8:	16 86       	std	Z+14, r1	; 0x0e
    1daa:	17 86       	std	Z+15, r1	; 0x0f
    1dac:	10 8a       	std	Z+16, r1	; 0x10
    1dae:	11 8a       	std	Z+17, r1	; 0x11
    1db0:	61 14       	cp	r6, r1
    1db2:	71 04       	cpc	r7, r1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1db6:	44 c0       	rjmp	.+136    	; 0x1e40 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	79 f5       	brne	.+94     	; 0x1e1a <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1dbc:	6a e0       	ldi	r22, 0x0A	; 10
    1dbe:	c3 01       	movw	r24, r6
    1dc0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	65 e9       	ldi	r22, 0x95	; 149
    1dc8:	76 e0       	ldi	r23, 0x06	; 6
    1dca:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1dce:	be 01       	movw	r22, r28
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	c7 01       	movw	r24, r14
    1dd6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1dda:	6a e0       	ldi	r22, 0x0A	; 10
    1ddc:	c7 01       	movw	r24, r14
    1dde:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1de2:	7c 01       	movw	r14, r24
    1de4:	6c e8       	ldi	r22, 0x8C	; 140
    1de6:	76 e0       	ldi	r23, 0x06	; 6
    1de8:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1dec:	6a e0       	ldi	r22, 0x0A	; 10
    1dee:	c7 01       	movw	r24, r14
    1df0:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1df4:	7c 01       	movw	r14, r24
    1df6:	6e e7       	ldi	r22, 0x7E	; 126
    1df8:	76 e0       	ldi	r23, 0x06	; 6
    1dfa:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1dfe:	63 e0       	ldi	r22, 0x03	; 3
    1e00:	c7 01       	movw	r24, r14
    1e02:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e06:	b2 01       	movw	r22, r4
    1e08:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN8emstreamlsEj>
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e12:	66 e0       	ldi	r22, 0x06	; 6
    1e14:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e18:	13 c0       	rjmp	.+38     	; 0x1e40 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1e1a:	6a e0       	ldi	r22, 0x0A	; 10
    1e1c:	c3 01       	movw	r24, r6
    1e1e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e22:	4c 01       	movw	r8, r24
    1e24:	69 e6       	ldi	r22, 0x69	; 105
    1e26:	76 e0       	ldi	r23, 0x06	; 6
    1e28:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6f 5f       	subi	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	c4 01       	movw	r24, r8
    1e34:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	c4 01       	movw	r24, r8
    1e3c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    1e40:	2a 96       	adiw	r28, 0x0a	; 10
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	8f 90       	pop	r8
    1e5e:	7f 90       	pop	r7
    1e60:	6f 90       	pop	r6
    1e62:	5f 90       	pop	r5
    1e64:	4f 90       	pop	r4
    1e66:	08 95       	ret

00001e68 <_ZN5rs23212clear_screenEv>:
    1e68:	dc 01       	movw	r26, r24
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	02 80       	ldd	r0, Z+2	; 0x02
    1e70:	f3 81       	ldd	r31, Z+3	; 0x03
    1e72:	e0 2d       	mov	r30, r0
    1e74:	6c e0       	ldi	r22, 0x0C	; 12
    1e76:	19 95       	eicall
    1e78:	08 95       	ret

00001e7a <_ZN5rs23214check_for_charEv>:
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	ec 01       	movw	r28, r24
    1e80:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e82:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e84:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e86:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	4d 91       	ld	r20, X+
    1e8c:	5c 91       	ld	r21, X
    1e8e:	20 81       	ld	r18, Z
    1e90:	31 81       	ldd	r19, Z+1	; 0x01
    1e92:	42 17       	cp	r20, r18
    1e94:	53 07       	cpc	r21, r19
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <_ZN5rs23214check_for_charEv+0x20>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <_ZN5rs2327getcharEv>:
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	c1 8d       	ldd	r28, Z+25	; 0x19
    1ea8:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1eaa:	28 81       	ld	r18, Y
    1eac:	39 81       	ldd	r19, Y+1	; 0x01
    1eae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1eb0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1eb2:	4d 91       	ld	r20, X+
    1eb4:	5c 91       	ld	r21, X
    1eb6:	24 17       	cp	r18, r20
    1eb8:	35 07       	cpc	r19, r21
    1eba:	e9 f3       	breq	.-6      	; 0x1eb6 <_ZN5rs2327getcharEv+0x16>
    1ebc:	a7 89       	ldd	r26, Z+23	; 0x17
    1ebe:	b0 8d       	ldd	r27, Z+24	; 0x18
    1ec0:	0d 90       	ld	r0, X+
    1ec2:	bc 91       	ld	r27, X
    1ec4:	a0 2d       	mov	r26, r0
    1ec6:	a2 0f       	add	r26, r18
    1ec8:	b3 1f       	adc	r27, r19
    1eca:	8c 91       	ld	r24, X
    1ecc:	2f 5f       	subi	r18, 0xFF	; 255
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	28 83       	st	Y, r18
    1ed2:	39 83       	std	Y+1, r19	; 0x01
    1ed4:	24 36       	cpi	r18, 0x64	; 100
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	28 f0       	brcs	.+10     	; 0x1ee4 <_ZN5rs2327getcharEv+0x44>
    1eda:	01 8c       	ldd	r0, Z+25	; 0x19
    1edc:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	10 82       	st	Z, r1
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret

00001eec <_ZN5rs2327putcharEc>:
    1eec:	dc 01       	movw	r26, r24
    1eee:	50 96       	adiw	r26, 0x10	; 16
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	51 97       	sbiw	r26, 0x11	; 17
    1ef6:	80 81       	ld	r24, Z
    1ef8:	54 96       	adiw	r26, 0x14	; 20
    1efa:	4c 91       	ld	r20, X
    1efc:	54 97       	sbiw	r26, 0x14	; 20
    1efe:	84 23       	and	r24, r20
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <_ZN5rs2327putcharEc+0x20>
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <_ZN5rs2327putcharEc+0x2a>
    1f04:	21 50       	subi	r18, 0x01	; 1
    1f06:	31 09       	sbc	r19, r1
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <_ZN5rs2327putcharEc+0x24>
    1f0a:	12 c0       	rjmp	.+36     	; 0x1f30 <_ZN5rs2327putcharEc+0x44>
    1f0c:	21 e2       	ldi	r18, 0x21	; 33
    1f0e:	3e e4       	ldi	r19, 0x4E	; 78
    1f10:	90 81       	ld	r25, Z
    1f12:	94 23       	and	r25, r20
    1f14:	b9 f3       	breq	.-18     	; 0x1f04 <_ZN5rs2327putcharEc+0x18>
    1f16:	90 81       	ld	r25, Z
    1f18:	56 96       	adiw	r26, 0x16	; 22
    1f1a:	8c 91       	ld	r24, X
    1f1c:	56 97       	sbiw	r26, 0x16	; 22
    1f1e:	89 2b       	or	r24, r25
    1f20:	80 83       	st	Z, r24
    1f22:	1e 96       	adiw	r26, 0x0e	; 14
    1f24:	ed 91       	ld	r30, X+
    1f26:	fc 91       	ld	r31, X
    1f28:	1f 97       	sbiw	r26, 0x0f	; 15
    1f2a:	60 83       	st	Z, r22
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	08 95       	ret
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	08 95       	ret

00001f34 <_GLOBAL__sub_I_counter>:
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	c8 ef       	ldi	r28, 0xF8	; 248
    1f3a:	d0 e2       	ldi	r29, 0x20	; 32
    1f3c:	8a e0       	ldi	r24, 0x0A	; 10
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	1c 82       	std	Y+4, r1	; 0x04
    1f48:	1e 82       	std	Y+6, r1	; 0x06
    1f4a:	1f 82       	std	Y+7, r1	; 0x07
    1f4c:	82 e6       	ldi	r24, 0x62	; 98
    1f4e:	90 e2       	ldi	r25, 0x20	; 32
    1f50:	88 83       	st	Y, r24
    1f52:	99 83       	std	Y+1, r25	; 0x01
    1f54:	1e 86       	std	Y+14, r1	; 0x0e
    1f56:	1f 86       	std	Y+15, r1	; 0x0f
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	80 e2       	ldi	r24, 0x20	; 32
    1f5e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <xQueueGenericCreate>
    1f62:	88 87       	std	Y+8, r24	; 0x08
    1f64:	99 87       	std	Y+9, r25	; 0x09
    1f66:	8a e0       	ldi	r24, 0x0A	; 10
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	8a 87       	std	Y+10, r24	; 0x0a
    1f70:	9b 87       	std	Y+11, r25	; 0x0b
    1f72:	ac 87       	std	Y+12, r26	; 0x0c
    1f74:	bd 87       	std	Y+13, r27	; 0x0d
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <main>:
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	6e 97       	sbiw	r28, 0x1e	; 30
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	e0 e6       	ldi	r30, 0x60	; 96
    1f9a:	f6 e0       	ldi	r31, 0x06	; 6
    1f9c:	80 e1       	ldi	r24, 0x10	; 16
    1f9e:	81 83       	std	Z+1, r24	; 0x01
    1fa0:	85 83       	std	Z+5, r24	; 0x05
    1fa2:	f8 94       	cli
    1fa4:	e0 e5       	ldi	r30, 0x50	; 80
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	82 60       	ori	r24, 0x02	; 2
    1fac:	80 83       	st	Z, r24
    1fae:	81 81       	ldd	r24, Z+1	; 0x01
    1fb0:	81 ff       	sbrs	r24, 1
    1fb2:	fd cf       	rjmp	.-6      	; 0x1fae <main+0x32>
    1fb4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1fb8:	9f b7       	in	r25, 0x3f	; 63
    1fba:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbc:	f8 94       	cli
    1fbe:	1b be       	out	0x3b, r1	; 59
    1fc0:	88 7f       	andi	r24, 0xF8	; 248
    1fc2:	81 60       	ori	r24, 0x01	; 1
    1fc4:	20 e4       	ldi	r18, 0x40	; 64
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	08 ed       	ldi	r16, 0xD8	; 216
    1fcc:	04 bf       	out	0x34, r16	; 52
    1fce:	80 83       	st	Z, r24
    1fd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd2:	8f bf       	out	0x3f, r24	; 63
    1fd4:	e0 e5       	ldi	r30, 0x50	; 80
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8e 7f       	andi	r24, 0xFE	; 254
    1fdc:	80 83       	st	Z, r24
    1fde:	9d ef       	ldi	r25, 0xFD	; 253
    1fe0:	88 ed       	ldi	r24, 0xD8	; 216
    1fe2:	08 b6       	in	r0, 0x38	; 56
    1fe4:	18 be       	out	0x38, r1	; 56
    1fe6:	84 bf       	out	0x34, r24	; 52
    1fe8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1fec:	08 be       	out	0x38, r0	; 56
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    1ff6:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <leftLimitSwitch>
    1ffa:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <leftLimitSwitch+0x1>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2006:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <rightLimitSwitch>
    200a:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <rightLimitSwitch+0x1>
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2016:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <linear_position>
    201a:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <linear_position+0x1>
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    202e:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <thdMotor>
    2032:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <thdMotor+0x1>
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    203e:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <pendulum_encoder>
    2042:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <pendulum_encoder+0x1>
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    204e:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <linear_offset>
    2052:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <linear_offset+0x1>
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    205e:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <motor_command>
    2062:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <motor_command+0x1>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    206e:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <begin>
    2072:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <begin+0x1>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    207e:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <go>
    2082:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <go+0x1>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    208e:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <stop>
    2092:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <stop+0x1>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    209e:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <reset>
    20a2:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <reset+0x1>
    20a6:	82 e5       	ldi	r24, 0x52	; 82
    20a8:	90 e2       	ldi	r25, 0x20	; 32
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	8a e0       	ldi	r24, 0x0A	; 10
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    20b2:	1c 82       	std	Y+4, r1	; 0x04
    20b4:	43 e0       	ldi	r20, 0x03	; 3
    20b6:	4e 83       	std	Y+6, r20	; 0x06
    20b8:	1d 82       	std	Y+5, r1	; 0x05
    20ba:	1f 82       	std	Y+7, r1	; 0x07
    20bc:	18 86       	std	Y+8, r1	; 0x08
    20be:	a0 e4       	ldi	r26, 0x40	; 64
    20c0:	b6 e0       	ldi	r27, 0x06	; 6
    20c2:	ab 87       	std	Y+11, r26	; 0x0b
    20c4:	bc 87       	std	Y+12, r27	; 0x0c
    20c6:	86 e0       	ldi	r24, 0x06	; 6
    20c8:	8d 87       	std	Y+13, r24	; 0x0d
    20ca:	0f 2e       	mov	r0, r31
    20cc:	f7 e0       	ldi	r31, 0x07	; 7
    20ce:	df 2e       	mov	r13, r31
    20d0:	f0 2d       	mov	r31, r0
    20d2:	de 86       	std	Y+14, r13	; 0x0e
    20d4:	e0 eb       	ldi	r30, 0xB0	; 176
    20d6:	f8 e0       	ldi	r31, 0x08	; 8
    20d8:	ef 87       	std	Y+15, r30	; 0x0f
    20da:	f8 8b       	std	Y+16, r31	; 0x10
    20dc:	81 eb       	ldi	r24, 0xB1	; 177
    20de:	98 e0       	ldi	r25, 0x08	; 8
    20e0:	89 8b       	std	Y+17, r24	; 0x11
    20e2:	9a 8b       	std	Y+18, r25	; 0x12
    20e4:	84 eb       	ldi	r24, 0xB4	; 180
    20e6:	98 e0       	ldi	r25, 0x08	; 8
    20e8:	8b 8b       	std	Y+19, r24	; 0x13
    20ea:	9c 8b       	std	Y+20, r25	; 0x14
    20ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    20ee:	14 96       	adiw	r26, 0x04	; 4
    20f0:	5c 91       	ld	r21, X
    20f2:	14 97       	sbiw	r26, 0x04	; 4
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	bc 01       	movw	r22, r24
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <main+0x184>
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	2a 95       	dec	r18
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <main+0x180>
    2104:	9b 01       	movw	r18, r22
    2106:	25 2b       	or	r18, r21
    2108:	14 96       	adiw	r26, 0x04	; 4
    210a:	2c 93       	st	X, r18
    210c:	2e 85       	ldd	r18, Y+14	; 0x0e
    210e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2110:	bc 85       	ldd	r27, Y+12	; 0x0c
    2112:	5c 91       	ld	r21, X
    2114:	bc 01       	movw	r22, r24
    2116:	02 c0       	rjmp	.+4      	; 0x211c <main+0x1a0>
    2118:	66 0f       	add	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	2a 95       	dec	r18
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <main+0x19c>
    2120:	9b 01       	movw	r18, r22
    2122:	25 2b       	or	r18, r21
    2124:	2c 93       	st	X, r18
    2126:	3d 85       	ldd	r19, Y+13	; 0x0d
    2128:	ab 85       	ldd	r26, Y+11	; 0x0b
    212a:	bc 85       	ldd	r27, Y+12	; 0x0c
    212c:	2c 91       	ld	r18, X
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <main+0x1b8>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	3a 95       	dec	r19
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <main+0x1b4>
    2138:	80 95       	com	r24
    213a:	90 95       	com	r25
    213c:	82 23       	and	r24, r18
    213e:	8c 93       	st	X, r24
    2140:	80 e1       	ldi	r24, 0x10	; 16
    2142:	83 83       	std	Z+3, r24	; 0x03
    2144:	45 83       	std	Z+5, r20	; 0x05
    2146:	80 ef       	ldi	r24, 0xF0	; 240
    2148:	87 83       	std	Z+7, r24	; 0x07
    214a:	81 e2       	ldi	r24, 0x21	; 33
    214c:	86 83       	std	Z+6, r24	; 0x06
    214e:	88 e1       	ldi	r24, 0x18	; 24
    2150:	84 83       	std	Z+4, r24	; 0x04
    2152:	80 e8       	ldi	r24, 0x80	; 128
    2154:	8e 8b       	std	Y+22, r24	; 0x16
    2156:	80 e4       	ldi	r24, 0x40	; 64
    2158:	8f 8b       	std	Y+23, r24	; 0x17
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	8d 8b       	std	Y+21, r24	; 0x15
    215e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2160:	f8 89       	ldd	r31, Y+16	; 0x10
    2162:	80 81       	ld	r24, Z
    2164:	80 81       	ld	r24, Z
    2166:	82 e1       	ldi	r24, 0x12	; 18
    2168:	90 e2       	ldi	r25, 0x20	; 32
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	8e e1       	ldi	r24, 0x1E	; 30
    2170:	91 e2       	ldi	r25, 0x21	; 33
    2172:	88 8f       	std	Y+24, r24	; 0x18
    2174:	99 8f       	std	Y+25, r25	; 0x19
    2176:	8c e1       	ldi	r24, 0x1C	; 28
    2178:	91 e2       	ldi	r25, 0x21	; 33
    217a:	8a 8f       	std	Y+26, r24	; 0x1a
    217c:	9b 8f       	std	Y+27, r25	; 0x1b
    217e:	8a e1       	ldi	r24, 0x1A	; 26
    2180:	91 e2       	ldi	r25, 0x21	; 33
    2182:	8c 8f       	std	Y+28, r24	; 0x1c
    2184:	9d 8f       	std	Y+29, r25	; 0x1d
    2186:	84 e6       	ldi	r24, 0x64	; 100
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    218e:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <rcvC1_buffer>
    2192:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <rcvC1_buffer+0x1>
    2196:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2198:	fb 8d       	ldd	r31, Y+27	; 0x1b
    219a:	10 82       	st	Z, r1
    219c:	11 82       	std	Z+1, r1	; 0x01
    219e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    21a0:	fd 8d       	ldd	r31, Y+29	; 0x1d
    21a2:	10 82       	st	Z, r1
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	67 e0       	ldi	r22, 0x07	; 7
    21a8:	ce 01       	movw	r24, r28
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    21b0:	7c 01       	movw	r14, r24
    21b2:	65 e8       	ldi	r22, 0x85	; 133
    21b4:	70 e2       	ldi	r23, 0x20	; 32
    21b6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    21ba:	66 e0       	ldi	r22, 0x06	; 6
    21bc:	c7 01       	movw	r24, r14
    21be:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    21c2:	66 e0       	ldi	r22, 0x06	; 6
    21c4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN8emstreamlsE15ser_manipulator>
    21c8:	82 e1       	ldi	r24, 0x12	; 18
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    21d0:	7c 01       	movw	r14, r24
    21d2:	8e 01       	movw	r16, r28
    21d4:	0f 5f       	subi	r16, 0xFF	; 255
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	24 e0       	ldi	r18, 0x04	; 4
    21da:	31 e0       	ldi	r19, 0x01	; 1
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	64 ea       	ldi	r22, 0xA4	; 164
    21e0:	70 e2       	ldi	r23, 0x20	; 32
    21e2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    21e6:	82 e2       	ldi	r24, 0x22	; 34
    21e8:	90 e2       	ldi	r25, 0x20	; 32
    21ea:	f7 01       	movw	r30, r14
    21ec:	80 83       	st	Z, r24
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	83 e1       	ldi	r24, 0x13	; 19
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    21f8:	7c 01       	movw	r14, r24
    21fa:	24 e0       	ldi	r18, 0x04	; 4
    21fc:	31 e0       	ldi	r19, 0x01	; 1
    21fe:	44 e0       	ldi	r20, 0x04	; 4
    2200:	6c ea       	ldi	r22, 0xAC	; 172
    2202:	70 e2       	ldi	r23, 0x20	; 32
    2204:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    2208:	0f 2e       	mov	r0, r31
    220a:	fa e2       	ldi	r31, 0x2A	; 42
    220c:	af 2e       	mov	r10, r31
    220e:	f0 e2       	ldi	r31, 0x20	; 32
    2210:	bf 2e       	mov	r11, r31
    2212:	f0 2d       	mov	r31, r0
    2214:	f7 01       	movw	r30, r14
    2216:	a0 82       	st	Z, r10
    2218:	b1 82       	std	Z+1, r11	; 0x01
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	82 8b       	std	Z+18, r24	; 0x12
    221e:	83 e1       	ldi	r24, 0x13	; 19
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2226:	7c 01       	movw	r14, r24
    2228:	24 e0       	ldi	r18, 0x04	; 4
    222a:	31 e0       	ldi	r19, 0x01	; 1
    222c:	44 e0       	ldi	r20, 0x04	; 4
    222e:	63 eb       	ldi	r22, 0xB3	; 179
    2230:	70 e2       	ldi	r23, 0x20	; 32
    2232:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    2236:	f7 01       	movw	r30, r14
    2238:	a0 82       	st	Z, r10
    223a:	b1 82       	std	Z+1, r11	; 0x01
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	82 8b       	std	Z+18, r24	; 0x12
    2240:	82 e1       	ldi	r24, 0x12	; 18
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2248:	7c 01       	movw	r14, r24
    224a:	24 e0       	ldi	r18, 0x04	; 4
    224c:	31 e0       	ldi	r19, 0x01	; 1
    224e:	44 e0       	ldi	r20, 0x04	; 4
    2250:	6b eb       	ldi	r22, 0xBB	; 187
    2252:	70 e2       	ldi	r23, 0x20	; 32
    2254:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    2258:	82 e3       	ldi	r24, 0x32	; 50
    225a:	90 e2       	ldi	r25, 0x20	; 32
    225c:	f7 01       	movw	r30, r14
    225e:	80 83       	st	Z, r24
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	82 e1       	ldi	r24, 0x12	; 18
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    226a:	7c 01       	movw	r14, r24
    226c:	24 e0       	ldi	r18, 0x04	; 4
    226e:	31 e0       	ldi	r19, 0x01	; 1
    2270:	43 e0       	ldi	r20, 0x03	; 3
    2272:	62 ec       	ldi	r22, 0xC2	; 194
    2274:	70 e2       	ldi	r23, 0x20	; 32
    2276:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    227a:	8a e3       	ldi	r24, 0x3A	; 58
    227c:	90 e2       	ldi	r25, 0x20	; 32
    227e:	f7 01       	movw	r30, r14
    2280:	80 83       	st	Z, r24
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	8a e1       	ldi	r24, 0x1A	; 26
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    228c:	7c 01       	movw	r14, r24
    228e:	24 e0       	ldi	r18, 0x04	; 4
    2290:	31 e0       	ldi	r19, 0x01	; 1
    2292:	42 e0       	ldi	r20, 0x02	; 2
    2294:	69 ec       	ldi	r22, 0xC9	; 201
    2296:	70 e2       	ldi	r23, 0x20	; 32
    2298:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    229c:	82 e4       	ldi	r24, 0x42	; 66
    229e:	90 e2       	ldi	r25, 0x20	; 32
    22a0:	f7 01       	movw	r30, r14
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	80 8f       	std	Z+24, r24	; 0x18
    22ac:	91 8f       	std	Z+25, r25	; 0x19
    22ae:	84 e1       	ldi	r24, 0x14	; 20
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    22b6:	7c 01       	movw	r14, r24
    22b8:	24 e0       	ldi	r18, 0x04	; 4
    22ba:	31 e0       	ldi	r19, 0x01	; 1
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	61 ed       	ldi	r22, 0xD1	; 209
    22c0:	70 e2       	ldi	r23, 0x20	; 32
    22c2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN8frt_taskC2EPKchjP8emstream>
    22c6:	8a e4       	ldi	r24, 0x4A	; 74
    22c8:	90 e2       	ldi	r25, 0x20	; 32
    22ca:	f7 01       	movw	r30, r14
    22cc:	80 83       	st	Z, r24
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	12 8a       	std	Z+18, r1	; 0x12
    22d2:	13 8a       	std	Z+19, r1	; 0x13
    22d4:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22d8:	78 94       	sei
    22da:	0e 94 b5 1a 	call	0x356a	; 0x356a <vTaskStartScheduler>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	6e 96       	adiw	r28, 0x1e	; 30
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	08 95       	ret

000022fc <__vector_58>:
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	08 b6       	in	r0, 0x38	; 56
    2308:	0f 92       	push	r0
    230a:	18 be       	out	0x38, r1	; 56
    230c:	0b b6       	in	r0, 0x3b	; 59
    230e:	0f 92       	push	r0
    2310:	1b be       	out	0x3b, r1	; 59
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	8f 93       	push	r24
    2318:	9f 93       	push	r25
    231a:	ef 93       	push	r30
    231c:	ff 93       	push	r31
    231e:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    2322:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <rcvE0_buffer>
    2326:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <rcvE0_buffer+0x1>
    232a:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvE0_write_index>
    232e:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvE0_write_index+0x1>
    2332:	e8 0f       	add	r30, r24
    2334:	f9 1f       	adc	r31, r25
    2336:	20 83       	st	Z, r18
    2338:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvE0_write_index>
    233c:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvE0_write_index+0x1>
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	84 36       	cpi	r24, 0x64	; 100
    2344:	91 05       	cpc	r25, r1
    2346:	60 f4       	brcc	.+24     	; 0x2360 <__vector_58+0x64>
    2348:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <rcvE0_write_index>
    234c:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <rcvE0_write_index+0x1>
    2350:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <rcvE0_read_index>
    2354:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <rcvE0_read_index+0x1>
    2358:	82 17       	cp	r24, r18
    235a:	93 07       	cpc	r25, r19
    235c:	f1 f4       	brne	.+60     	; 0x239a <__vector_58+0x9e>
    235e:	0c c0       	rjmp	.+24     	; 0x2378 <__vector_58+0x7c>
    2360:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <rcvE0_write_index>
    2364:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <rcvE0_write_index+0x1>
    2368:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvE0_read_index>
    236c:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvE0_read_index+0x1>
    2370:	18 16       	cp	r1, r24
    2372:	19 06       	cpc	r1, r25
    2374:	91 f4       	brne	.+36     	; 0x239a <__vector_58+0x9e>
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <__vector_58+0x98>
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	84 36       	cpi	r24, 0x64	; 100
    237c:	91 05       	cpc	r25, r1
    237e:	28 f4       	brcc	.+10     	; 0x238a <__vector_58+0x8e>
    2380:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvE0_read_index>
    2384:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvE0_read_index+0x1>
    2388:	08 c0       	rjmp	.+16     	; 0x239a <__vector_58+0x9e>
    238a:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvE0_read_index>
    238e:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvE0_read_index+0x1>
    2392:	03 c0       	rjmp	.+6      	; 0x239a <__vector_58+0x9e>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	f3 cf       	rjmp	.-26     	; 0x2380 <__vector_58+0x84>
    239a:	ff 91       	pop	r31
    239c:	ef 91       	pop	r30
    239e:	9f 91       	pop	r25
    23a0:	8f 91       	pop	r24
    23a2:	3f 91       	pop	r19
    23a4:	2f 91       	pop	r18
    23a6:	0f 90       	pop	r0
    23a8:	0b be       	out	0x3b, r0	; 59
    23aa:	0f 90       	pop	r0
    23ac:	08 be       	out	0x38, r0	; 56
    23ae:	0f 90       	pop	r0
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	0f 90       	pop	r0
    23b4:	1f 90       	pop	r1
    23b6:	18 95       	reti

000023b8 <__vector_91>:
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	08 b6       	in	r0, 0x38	; 56
    23c4:	0f 92       	push	r0
    23c6:	18 be       	out	0x38, r1	; 56
    23c8:	0b b6       	in	r0, 0x3b	; 59
    23ca:	0f 92       	push	r0
    23cc:	1b be       	out	0x3b, r1	; 59
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	8f 93       	push	r24
    23d4:	9f 93       	push	r25
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
    23da:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    23de:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <rcvD1_buffer>
    23e2:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <rcvD1_buffer+0x1>
    23e6:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD1_write_index>
    23ea:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD1_write_index+0x1>
    23ee:	e8 0f       	add	r30, r24
    23f0:	f9 1f       	adc	r31, r25
    23f2:	20 83       	st	Z, r18
    23f4:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD1_write_index>
    23f8:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD1_write_index+0x1>
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	84 36       	cpi	r24, 0x64	; 100
    2400:	91 05       	cpc	r25, r1
    2402:	60 f4       	brcc	.+24     	; 0x241c <__vector_91+0x64>
    2404:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <rcvD1_write_index>
    2408:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <rcvD1_write_index+0x1>
    240c:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <rcvD1_read_index>
    2410:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <rcvD1_read_index+0x1>
    2414:	82 17       	cp	r24, r18
    2416:	93 07       	cpc	r25, r19
    2418:	f1 f4       	brne	.+60     	; 0x2456 <__vector_91+0x9e>
    241a:	0c c0       	rjmp	.+24     	; 0x2434 <__vector_91+0x7c>
    241c:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <rcvD1_write_index>
    2420:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <rcvD1_write_index+0x1>
    2424:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvD1_read_index>
    2428:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvD1_read_index+0x1>
    242c:	18 16       	cp	r1, r24
    242e:	19 06       	cpc	r1, r25
    2430:	91 f4       	brne	.+36     	; 0x2456 <__vector_91+0x9e>
    2432:	0e c0       	rjmp	.+28     	; 0x2450 <__vector_91+0x98>
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	84 36       	cpi	r24, 0x64	; 100
    2438:	91 05       	cpc	r25, r1
    243a:	28 f4       	brcc	.+10     	; 0x2446 <__vector_91+0x8e>
    243c:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvD1_read_index>
    2440:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvD1_read_index+0x1>
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <__vector_91+0x9e>
    2446:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvD1_read_index>
    244a:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvD1_read_index+0x1>
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <__vector_91+0x9e>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	f3 cf       	rjmp	.-26     	; 0x243c <__vector_91+0x84>
    2456:	ff 91       	pop	r31
    2458:	ef 91       	pop	r30
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0b be       	out	0x3b, r0	; 59
    2466:	0f 90       	pop	r0
    2468:	08 be       	out	0x38, r0	; 56
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <__vector_88>:
    2474:	1f 92       	push	r1
    2476:	0f 92       	push	r0
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	0f 92       	push	r0
    247c:	11 24       	eor	r1, r1
    247e:	08 b6       	in	r0, 0x38	; 56
    2480:	0f 92       	push	r0
    2482:	18 be       	out	0x38, r1	; 56
    2484:	0b b6       	in	r0, 0x3b	; 59
    2486:	0f 92       	push	r0
    2488:	1b be       	out	0x3b, r1	; 59
    248a:	2f 93       	push	r18
    248c:	3f 93       	push	r19
    248e:	8f 93       	push	r24
    2490:	9f 93       	push	r25
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    249a:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <rcvD0_buffer>
    249e:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <rcvD0_buffer+0x1>
    24a2:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    24a6:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    24aa:	e8 0f       	add	r30, r24
    24ac:	f9 1f       	adc	r31, r25
    24ae:	20 83       	st	Z, r18
    24b0:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvD0_write_index>
    24b4:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvD0_write_index+0x1>
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	84 36       	cpi	r24, 0x64	; 100
    24bc:	91 05       	cpc	r25, r1
    24be:	60 f4       	brcc	.+24     	; 0x24d8 <__vector_88+0x64>
    24c0:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rcvD0_write_index>
    24c4:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rcvD0_write_index+0x1>
    24c8:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <rcvD0_read_index>
    24cc:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <rcvD0_read_index+0x1>
    24d0:	82 17       	cp	r24, r18
    24d2:	93 07       	cpc	r25, r19
    24d4:	f1 f4       	brne	.+60     	; 0x2512 <__vector_88+0x9e>
    24d6:	0c c0       	rjmp	.+24     	; 0x24f0 <__vector_88+0x7c>
    24d8:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <rcvD0_write_index>
    24dc:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <rcvD0_write_index+0x1>
    24e0:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvD0_read_index>
    24e4:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvD0_read_index+0x1>
    24e8:	18 16       	cp	r1, r24
    24ea:	19 06       	cpc	r1, r25
    24ec:	91 f4       	brne	.+36     	; 0x2512 <__vector_88+0x9e>
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <__vector_88+0x98>
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	84 36       	cpi	r24, 0x64	; 100
    24f4:	91 05       	cpc	r25, r1
    24f6:	28 f4       	brcc	.+10     	; 0x2502 <__vector_88+0x8e>
    24f8:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvD0_read_index>
    24fc:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvD0_read_index+0x1>
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <__vector_88+0x9e>
    2502:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvD0_read_index>
    2506:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvD0_read_index+0x1>
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <__vector_88+0x9e>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	f3 cf       	rjmp	.-26     	; 0x24f8 <__vector_88+0x84>
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	9f 91       	pop	r25
    2518:	8f 91       	pop	r24
    251a:	3f 91       	pop	r19
    251c:	2f 91       	pop	r18
    251e:	0f 90       	pop	r0
    2520:	0b be       	out	0x3b, r0	; 59
    2522:	0f 90       	pop	r0
    2524:	08 be       	out	0x38, r0	; 56
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti

00002530 <__vector_28>:
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	08 b6       	in	r0, 0x38	; 56
    253c:	0f 92       	push	r0
    253e:	18 be       	out	0x38, r1	; 56
    2540:	0b b6       	in	r0, 0x3b	; 59
    2542:	0f 92       	push	r0
    2544:	1b be       	out	0x3b, r1	; 59
    2546:	2f 93       	push	r18
    2548:	3f 93       	push	r19
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
    2552:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    2556:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <rcvC1_buffer>
    255a:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <rcvC1_buffer+0x1>
    255e:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC1_write_index>
    2562:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC1_write_index+0x1>
    2566:	e8 0f       	add	r30, r24
    2568:	f9 1f       	adc	r31, r25
    256a:	20 83       	st	Z, r18
    256c:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC1_write_index>
    2570:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC1_write_index+0x1>
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	84 36       	cpi	r24, 0x64	; 100
    2578:	91 05       	cpc	r25, r1
    257a:	60 f4       	brcc	.+24     	; 0x2594 <__vector_28+0x64>
    257c:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvC1_write_index>
    2580:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvC1_write_index+0x1>
    2584:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <rcvC1_read_index>
    2588:	30 91 1d 21 	lds	r19, 0x211D	; 0x80211d <rcvC1_read_index+0x1>
    258c:	82 17       	cp	r24, r18
    258e:	93 07       	cpc	r25, r19
    2590:	f1 f4       	brne	.+60     	; 0x25ce <__vector_28+0x9e>
    2592:	0c c0       	rjmp	.+24     	; 0x25ac <__vector_28+0x7c>
    2594:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <rcvC1_write_index>
    2598:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <rcvC1_write_index+0x1>
    259c:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvC1_read_index>
    25a0:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvC1_read_index+0x1>
    25a4:	18 16       	cp	r1, r24
    25a6:	19 06       	cpc	r1, r25
    25a8:	91 f4       	brne	.+36     	; 0x25ce <__vector_28+0x9e>
    25aa:	0e c0       	rjmp	.+28     	; 0x25c8 <__vector_28+0x98>
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	84 36       	cpi	r24, 0x64	; 100
    25b0:	91 05       	cpc	r25, r1
    25b2:	28 f4       	brcc	.+10     	; 0x25be <__vector_28+0x8e>
    25b4:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC1_read_index>
    25b8:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC1_read_index+0x1>
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <__vector_28+0x9e>
    25be:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvC1_read_index>
    25c2:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvC1_read_index+0x1>
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <__vector_28+0x9e>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	f3 cf       	rjmp	.-26     	; 0x25b4 <__vector_28+0x84>
    25ce:	ff 91       	pop	r31
    25d0:	ef 91       	pop	r30
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	3f 91       	pop	r19
    25d8:	2f 91       	pop	r18
    25da:	0f 90       	pop	r0
    25dc:	0b be       	out	0x3b, r0	; 59
    25de:	0f 90       	pop	r0
    25e0:	08 be       	out	0x38, r0	; 56
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	0f 90       	pop	r0
    25e8:	1f 90       	pop	r1
    25ea:	18 95       	reti

000025ec <__vector_25>:
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	08 b6       	in	r0, 0x38	; 56
    25f8:	0f 92       	push	r0
    25fa:	18 be       	out	0x38, r1	; 56
    25fc:	0b b6       	in	r0, 0x3b	; 59
    25fe:	0f 92       	push	r0
    2600:	1b be       	out	0x3b, r1	; 59
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	8f 93       	push	r24
    2608:	9f 93       	push	r25
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    2612:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <rcvC0_buffer>
    2616:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <rcvC0_buffer+0x1>
    261a:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    261e:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    2622:	e8 0f       	add	r30, r24
    2624:	f9 1f       	adc	r31, r25
    2626:	20 83       	st	Z, r18
    2628:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_write_index>
    262c:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_write_index+0x1>
    2630:	01 96       	adiw	r24, 0x01	; 1
    2632:	84 36       	cpi	r24, 0x64	; 100
    2634:	91 05       	cpc	r25, r1
    2636:	60 f4       	brcc	.+24     	; 0x2650 <__vector_25+0x64>
    2638:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <rcvC0_write_index>
    263c:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <rcvC0_write_index+0x1>
    2640:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <rcvC0_read_index>
    2644:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <rcvC0_read_index+0x1>
    2648:	82 17       	cp	r24, r18
    264a:	93 07       	cpc	r25, r19
    264c:	f1 f4       	brne	.+60     	; 0x268a <__vector_25+0x9e>
    264e:	0c c0       	rjmp	.+24     	; 0x2668 <__vector_25+0x7c>
    2650:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <rcvC0_write_index>
    2654:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <rcvC0_write_index+0x1>
    2658:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC0_read_index>
    265c:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC0_read_index+0x1>
    2660:	18 16       	cp	r1, r24
    2662:	19 06       	cpc	r1, r25
    2664:	91 f4       	brne	.+36     	; 0x268a <__vector_25+0x9e>
    2666:	0e c0       	rjmp	.+28     	; 0x2684 <__vector_25+0x98>
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	84 36       	cpi	r24, 0x64	; 100
    266c:	91 05       	cpc	r25, r1
    266e:	28 f4       	brcc	.+10     	; 0x267a <__vector_25+0x8e>
    2670:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <rcvC0_read_index>
    2674:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <rcvC0_read_index+0x1>
    2678:	08 c0       	rjmp	.+16     	; 0x268a <__vector_25+0x9e>
    267a:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <rcvC0_read_index>
    267e:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <rcvC0_read_index+0x1>
    2682:	03 c0       	rjmp	.+6      	; 0x268a <__vector_25+0x9e>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	f3 cf       	rjmp	.-26     	; 0x2670 <__vector_25+0x84>
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	9f 91       	pop	r25
    2690:	8f 91       	pop	r24
    2692:	3f 91       	pop	r19
    2694:	2f 91       	pop	r18
    2696:	0f 90       	pop	r0
    2698:	0b be       	out	0x3b, r0	; 59
    269a:	0f 90       	pop	r0
    269c:	08 be       	out	0x38, r0	; 56
    269e:	0f 90       	pop	r0
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	0f 90       	pop	r0
    26a4:	1f 90       	pop	r1
    26a6:	18 95       	reti

000026a8 <_ZN8emstreamlsEh>:
    26a8:	cf 92       	push	r12
    26aa:	df 92       	push	r13
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	29 97       	sbiw	r28, 0x09	; 9
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	8c 01       	movw	r16, r24
    26c4:	e6 2e       	mov	r14, r22
    26c6:	dc 01       	movw	r26, r24
    26c8:	13 96       	adiw	r26, 0x03	; 3
    26ca:	8c 91       	ld	r24, X
    26cc:	13 97       	sbiw	r26, 0x03	; 3
    26ce:	88 23       	and	r24, r24
    26d0:	41 f0       	breq	.+16     	; 0x26e2 <_ZN8emstreamlsEh+0x3a>
    26d2:	ed 91       	ld	r30, X+
    26d4:	fc 91       	ld	r31, X
    26d6:	02 80       	ldd	r0, Z+2	; 0x02
    26d8:	f3 81       	ldd	r31, Z+3	; 0x03
    26da:	e0 2d       	mov	r30, r0
    26dc:	c8 01       	movw	r24, r16
    26de:	19 95       	eicall
    26e0:	56 c0       	rjmp	.+172    	; 0x278e <_ZN8emstreamlsEh+0xe6>
    26e2:	f8 01       	movw	r30, r16
    26e4:	42 81       	ldd	r20, Z+2	; 0x02
    26e6:	42 30       	cpi	r20, 0x02	; 2
    26e8:	19 f5       	brne	.+70     	; 0x2730 <_ZN8emstreamlsEh+0x88>
    26ea:	68 94       	set
    26ec:	cc 24       	eor	r12, r12
    26ee:	c3 f8       	bld	r12, 3
    26f0:	d1 2c       	mov	r13, r1
    26f2:	68 94       	set
    26f4:	ff 24       	eor	r15, r15
    26f6:	f7 f8       	bld	r15, 7
    26f8:	8e 2d       	mov	r24, r14
    26fa:	8f 21       	and	r24, r15
    26fc:	51 f0       	breq	.+20     	; 0x2712 <_ZN8emstreamlsEh+0x6a>
    26fe:	d8 01       	movw	r26, r16
    2700:	ed 91       	ld	r30, X+
    2702:	fc 91       	ld	r31, X
    2704:	02 80       	ldd	r0, Z+2	; 0x02
    2706:	f3 81       	ldd	r31, Z+3	; 0x03
    2708:	e0 2d       	mov	r30, r0
    270a:	61 e3       	ldi	r22, 0x31	; 49
    270c:	c8 01       	movw	r24, r16
    270e:	19 95       	eicall
    2710:	09 c0       	rjmp	.+18     	; 0x2724 <_ZN8emstreamlsEh+0x7c>
    2712:	d8 01       	movw	r26, r16
    2714:	ed 91       	ld	r30, X+
    2716:	fc 91       	ld	r31, X
    2718:	02 80       	ldd	r0, Z+2	; 0x02
    271a:	f3 81       	ldd	r31, Z+3	; 0x03
    271c:	e0 2d       	mov	r30, r0
    271e:	60 e3       	ldi	r22, 0x30	; 48
    2720:	c8 01       	movw	r24, r16
    2722:	19 95       	eicall
    2724:	f6 94       	lsr	r15
    2726:	b1 e0       	ldi	r27, 0x01	; 1
    2728:	cb 1a       	sub	r12, r27
    272a:	d1 08       	sbc	r13, r1
    272c:	29 f7       	brne	.-54     	; 0x26f8 <_ZN8emstreamlsEh+0x50>
    272e:	2f c0       	rjmp	.+94     	; 0x278e <_ZN8emstreamlsEh+0xe6>
    2730:	40 31       	cpi	r20, 0x10	; 16
    2732:	f9 f4       	brne	.+62     	; 0x2772 <_ZN8emstreamlsEh+0xca>
    2734:	62 95       	swap	r22
    2736:	6f 70       	andi	r22, 0x0F	; 15
    2738:	01 90       	ld	r0, Z+
    273a:	f0 81       	ld	r31, Z
    273c:	e0 2d       	mov	r30, r0
    273e:	02 80       	ldd	r0, Z+2	; 0x02
    2740:	f3 81       	ldd	r31, Z+3	; 0x03
    2742:	e0 2d       	mov	r30, r0
    2744:	6a 30       	cpi	r22, 0x0A	; 10
    2746:	10 f0       	brcs	.+4      	; 0x274c <_ZN8emstreamlsEh+0xa4>
    2748:	69 5c       	subi	r22, 0xC9	; 201
    274a:	01 c0       	rjmp	.+2      	; 0x274e <_ZN8emstreamlsEh+0xa6>
    274c:	60 5d       	subi	r22, 0xD0	; 208
    274e:	c8 01       	movw	r24, r16
    2750:	19 95       	eicall
    2752:	6e 2d       	mov	r22, r14
    2754:	6f 70       	andi	r22, 0x0F	; 15
    2756:	d8 01       	movw	r26, r16
    2758:	ed 91       	ld	r30, X+
    275a:	fc 91       	ld	r31, X
    275c:	02 80       	ldd	r0, Z+2	; 0x02
    275e:	f3 81       	ldd	r31, Z+3	; 0x03
    2760:	e0 2d       	mov	r30, r0
    2762:	6a 30       	cpi	r22, 0x0A	; 10
    2764:	10 f0       	brcs	.+4      	; 0x276a <_ZN8emstreamlsEh+0xc2>
    2766:	69 5c       	subi	r22, 0xC9	; 201
    2768:	01 c0       	rjmp	.+2      	; 0x276c <_ZN8emstreamlsEh+0xc4>
    276a:	60 5d       	subi	r22, 0xD0	; 208
    276c:	c8 01       	movw	r24, r16
    276e:	19 95       	eicall
    2770:	0e c0       	rjmp	.+28     	; 0x278e <_ZN8emstreamlsEh+0xe6>
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	be 01       	movw	r22, r28
    2776:	6f 5f       	subi	r22, 0xFF	; 255
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	8e 2d       	mov	r24, r14
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <utoa>
    2782:	be 01       	movw	r22, r28
    2784:	6f 5f       	subi	r22, 0xFF	; 255
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	c8 01       	movw	r24, r16
    278a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN8emstream4putsEPKc>
    278e:	c8 01       	movw	r24, r16
    2790:	29 96       	adiw	r28, 0x09	; 9
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	df 90       	pop	r13
    27a4:	cf 90       	pop	r12
    27a6:	08 95       	ret

000027a8 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    27b2:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    27b6:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <xHeapHasBeenInitialised.4150>
    27ba:	81 11       	cpse	r24, r1
    27bc:	1d c0       	rjmp	.+58     	; 0x27f8 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    27be:	ab e2       	ldi	r26, 0x2B	; 43
    27c0:	b1 e2       	ldi	r27, 0x21	; 33
    27c2:	ef e2       	ldi	r30, 0x2F	; 47
    27c4:	f1 e2       	ldi	r31, 0x21	; 33
    27c6:	ed 93       	st	X+, r30
    27c8:	fc 93       	st	X, r31
    27ca:	11 97       	sbiw	r26, 0x01	; 1
    27cc:	12 96       	adiw	r26, 0x02	; 2
    27ce:	1d 92       	st	X+, r1
    27d0:	1c 92       	st	X, r1
    27d2:	13 97       	sbiw	r26, 0x03	; 3
    27d4:	a7 e2       	ldi	r26, 0x27	; 39
    27d6:	b1 e2       	ldi	r27, 0x21	; 33
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	9f e0       	ldi	r25, 0x0F	; 15
    27dc:	12 96       	adiw	r26, 0x02	; 2
    27de:	8d 93       	st	X+, r24
    27e0:	9c 93       	st	X, r25
    27e2:	13 97       	sbiw	r26, 0x03	; 3
    27e4:	1d 92       	st	X+, r1
    27e6:	1c 92       	st	X, r1
    27e8:	11 97       	sbiw	r26, 0x01	; 1
    27ea:	82 83       	std	Z+2, r24	; 0x02
    27ec:	93 83       	std	Z+3, r25	; 0x03
    27ee:	a0 83       	st	Z, r26
    27f0:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    27f8:	20 97       	sbiw	r28, 0x00	; 0
    27fa:	09 f4       	brne	.+2      	; 0x27fe <pvPortMalloc+0x56>
    27fc:	5f c0       	rjmp	.+190    	; 0x28bc <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    27fe:	9e 01       	movw	r18, r28
    2800:	2b 5f       	subi	r18, 0xFB	; 251
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    2804:	24 96       	adiw	r28, 0x04	; 4
    2806:	ce 3f       	cpi	r28, 0xFE	; 254
    2808:	df 40       	sbci	r29, 0x0F	; 15
    280a:	08 f0       	brcs	.+2      	; 0x280e <pvPortMalloc+0x66>
    280c:	5a c0       	rjmp	.+180    	; 0x28c2 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    280e:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <xStart>
    2812:	f0 91 2c 21 	lds	r31, 0x212C	; 0x80212c <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2816:	ab e2       	ldi	r26, 0x2B	; 43
    2818:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <pvPortMalloc+0x78>
    281c:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    281e:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	82 17       	cp	r24, r18
    2826:	93 07       	cpc	r25, r19
    2828:	20 f4       	brcc	.+8      	; 0x2832 <pvPortMalloc+0x8a>
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	a9 f7       	brne	.-22     	; 0x281c <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    2832:	c1 e2       	ldi	r28, 0x21	; 33
    2834:	e7 32       	cpi	r30, 0x27	; 39
    2836:	fc 07       	cpc	r31, r28
    2838:	09 f4       	brne	.+2      	; 0x283c <pvPortMalloc+0x94>
    283a:	46 c0       	rjmp	.+140    	; 0x28c8 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    283c:	cd 91       	ld	r28, X+
    283e:	dc 91       	ld	r29, X
    2840:	11 97       	sbiw	r26, 0x01	; 1
    2842:	8e 01       	movw	r16, r28
    2844:	0b 5f       	subi	r16, 0xFB	; 251
    2846:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	8d 93       	st	X+, r24
    284e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	82 1b       	sub	r24, r18
    2856:	93 0b       	sbc	r25, r19
    2858:	8b 30       	cpi	r24, 0x0B	; 11
    285a:	91 05       	cpc	r25, r1
    285c:	10 f1       	brcs	.+68     	; 0x28a2 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    285e:	bf 01       	movw	r22, r30
    2860:	62 0f       	add	r22, r18
    2862:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2864:	db 01       	movw	r26, r22
    2866:	12 96       	adiw	r26, 0x02	; 2
    2868:	8d 93       	st	X+, r24
    286a:	9c 93       	st	X, r25
    286c:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    286e:	22 83       	std	Z+2, r18	; 0x02
    2870:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2872:	12 96       	adiw	r26, 0x02	; 2
    2874:	4d 91       	ld	r20, X+
    2876:	5c 91       	ld	r21, X
    2878:	13 97       	sbiw	r26, 0x03	; 3
    287a:	8b e2       	ldi	r24, 0x2B	; 43
    287c:	91 e2       	ldi	r25, 0x21	; 33
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <pvPortMalloc+0xda>
    2880:	cd 01       	movw	r24, r26
    2882:	ec 01       	movw	r28, r24
    2884:	a8 81       	ld	r26, Y
    2886:	b9 81       	ldd	r27, Y+1	; 0x01
    2888:	12 96       	adiw	r26, 0x02	; 2
    288a:	2d 91       	ld	r18, X+
    288c:	3c 91       	ld	r19, X
    288e:	13 97       	sbiw	r26, 0x03	; 3
    2890:	24 17       	cp	r18, r20
    2892:	35 07       	cpc	r19, r21
    2894:	a8 f3       	brcs	.-22     	; 0x2880 <pvPortMalloc+0xd8>
    2896:	eb 01       	movw	r28, r22
    2898:	a8 83       	st	Y, r26
    289a:	b9 83       	std	Y+1, r27	; 0x01
    289c:	dc 01       	movw	r26, r24
    289e:	6d 93       	st	X+, r22
    28a0:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    28a2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    28a6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    28aa:	22 81       	ldd	r18, Z+2	; 0x02
    28ac:	33 81       	ldd	r19, Z+3	; 0x03
    28ae:	82 1b       	sub	r24, r18
    28b0:	93 0b       	sbc	r25, r19
    28b2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    28b6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    28bc:	00 e0       	ldi	r16, 0x00	; 0
    28be:	10 e0       	ldi	r17, 0x00	; 0
    28c0:	05 c0       	rjmp	.+10     	; 0x28cc <pvPortMalloc+0x124>
    28c2:	00 e0       	ldi	r16, 0x00	; 0
    28c4:	10 e0       	ldi	r17, 0x00	; 0
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <pvPortMalloc+0x124>
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    28cc:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    28d0:	c8 01       	movw	r24, r16
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	1f 91       	pop	r17
    28d8:	0f 91       	pop	r16
    28da:	08 95       	ret

000028dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	41 f1       	breq	.+80     	; 0x2938 <vPortFree+0x5c>
    28e8:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    28ea:	8c 01       	movw	r16, r24
    28ec:	05 50       	subi	r16, 0x05	; 5
    28ee:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    28f0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    28f4:	f8 01       	movw	r30, r16
    28f6:	42 81       	ldd	r20, Z+2	; 0x02
    28f8:	53 81       	ldd	r21, Z+3	; 0x03
    28fa:	ab e2       	ldi	r26, 0x2B	; 43
    28fc:	b1 e2       	ldi	r27, 0x21	; 33
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <vPortFree+0x26>
    2900:	df 01       	movw	r26, r30
    2902:	ed 91       	ld	r30, X+
    2904:	fc 91       	ld	r31, X
    2906:	11 97       	sbiw	r26, 0x01	; 1
    2908:	22 81       	ldd	r18, Z+2	; 0x02
    290a:	33 81       	ldd	r19, Z+3	; 0x03
    290c:	24 17       	cp	r18, r20
    290e:	35 07       	cpc	r19, r21
    2910:	b8 f3       	brcs	.-18     	; 0x2900 <vPortFree+0x24>
    2912:	25 97       	sbiw	r28, 0x05	; 5
    2914:	e8 83       	st	Y, r30
    2916:	f9 83       	std	Y+1, r31	; 0x01
    2918:	0d 93       	st	X+, r16
    291a:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    291c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2920:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	9b 81       	ldd	r25, Y+3	; 0x03
    2928:	82 0f       	add	r24, r18
    292a:	93 1f       	adc	r25, r19
    292c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2930:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    2934:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
	}
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2942:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2946:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    294a:	08 95       	ret

0000294c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    294c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    294e:	03 96       	adiw	r24, 0x03	; 3
    2950:	81 83       	std	Z+1, r24	; 0x01
    2952:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2954:	4f ef       	ldi	r20, 0xFF	; 255
    2956:	5f ef       	ldi	r21, 0xFF	; 255
    2958:	ba 01       	movw	r22, r20
    295a:	43 83       	std	Z+3, r20	; 0x03
    295c:	54 83       	std	Z+4, r21	; 0x04
    295e:	65 83       	std	Z+5, r22	; 0x05
    2960:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2962:	87 83       	std	Z+7, r24	; 0x07
    2964:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2966:	81 87       	std	Z+9, r24	; 0x09
    2968:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    296a:	10 82       	st	Z, r1
    296c:	08 95       	ret

0000296e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    296e:	fc 01       	movw	r30, r24
    2970:	12 86       	std	Z+10, r1	; 0x0a
    2972:	13 86       	std	Z+11, r1	; 0x0b
    2974:	08 95       	ret

00002976 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	fc 01       	movw	r30, r24
    297c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    297e:	21 81       	ldd	r18, Z+1	; 0x01
    2980:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    2982:	e9 01       	movw	r28, r18
    2984:	8c 81       	ldd	r24, Y+4	; 0x04
    2986:	9d 81       	ldd	r25, Y+5	; 0x05
    2988:	14 96       	adiw	r26, 0x04	; 4
    298a:	8d 93       	st	X+, r24
    298c:	9c 93       	st	X, r25
    298e:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2990:	81 81       	ldd	r24, Z+1	; 0x01
    2992:	92 81       	ldd	r25, Z+2	; 0x02
    2994:	16 96       	adiw	r26, 0x06	; 6
    2996:	8d 93       	st	X+, r24
    2998:	9c 93       	st	X, r25
    299a:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	ec 01       	movw	r28, r24
    29a2:	6e 83       	std	Y+6, r22	; 0x06
    29a4:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    29a6:	e9 01       	movw	r28, r18
    29a8:	6c 83       	std	Y+4, r22	; 0x04
    29aa:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    29ac:	61 83       	std	Z+1, r22	; 0x01
    29ae:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29b0:	1a 96       	adiw	r26, 0x0a	; 10
    29b2:	ed 93       	st	X+, r30
    29b4:	fc 93       	st	X, r31
    29b6:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	80 83       	st	Z, r24
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    29ce:	08 81       	ld	r16, Y
    29d0:	19 81       	ldd	r17, Y+1	; 0x01
    29d2:	2a 81       	ldd	r18, Y+2	; 0x02
    29d4:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    29d6:	0f 3f       	cpi	r16, 0xFF	; 255
    29d8:	4f ef       	ldi	r20, 0xFF	; 255
    29da:	14 07       	cpc	r17, r20
    29dc:	24 07       	cpc	r18, r20
    29de:	34 07       	cpc	r19, r20
    29e0:	31 f4       	brne	.+12     	; 0x29ee <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    29e2:	dc 01       	movw	r26, r24
    29e4:	19 96       	adiw	r26, 0x09	; 9
    29e6:	ed 91       	ld	r30, X+
    29e8:	fc 91       	ld	r31, X
    29ea:	1a 97       	sbiw	r26, 0x0a	; 10
    29ec:	1f c0       	rjmp	.+62     	; 0x2a2c <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    29ee:	fc 01       	movw	r30, r24
    29f0:	33 96       	adiw	r30, 0x03	; 3
    29f2:	dc 01       	movw	r26, r24
    29f4:	17 96       	adiw	r26, 0x07	; 7
    29f6:	4d 91       	ld	r20, X+
    29f8:	5c 91       	ld	r21, X
    29fa:	18 97       	sbiw	r26, 0x08	; 8
    29fc:	da 01       	movw	r26, r20
    29fe:	4d 91       	ld	r20, X+
    2a00:	5d 91       	ld	r21, X+
    2a02:	6d 91       	ld	r22, X+
    2a04:	7c 91       	ld	r23, X
    2a06:	04 17       	cp	r16, r20
    2a08:	15 07       	cpc	r17, r21
    2a0a:	26 07       	cpc	r18, r22
    2a0c:	37 07       	cpc	r19, r23
    2a0e:	70 f0       	brcs	.+28     	; 0x2a2c <vListInsert+0x68>
    2a10:	04 80       	ldd	r0, Z+4	; 0x04
    2a12:	f5 81       	ldd	r31, Z+5	; 0x05
    2a14:	e0 2d       	mov	r30, r0
    2a16:	a4 81       	ldd	r26, Z+4	; 0x04
    2a18:	b5 81       	ldd	r27, Z+5	; 0x05
    2a1a:	4d 91       	ld	r20, X+
    2a1c:	5d 91       	ld	r21, X+
    2a1e:	6d 91       	ld	r22, X+
    2a20:	7c 91       	ld	r23, X
    2a22:	04 17       	cp	r16, r20
    2a24:	15 07       	cpc	r17, r21
    2a26:	26 07       	cpc	r18, r22
    2a28:	37 07       	cpc	r19, r23
    2a2a:	90 f7       	brcc	.-28     	; 0x2a10 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a2c:	a4 81       	ldd	r26, Z+4	; 0x04
    2a2e:	b5 81       	ldd	r27, Z+5	; 0x05
    2a30:	ac 83       	std	Y+4, r26	; 0x04
    2a32:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2a34:	16 96       	adiw	r26, 0x06	; 6
    2a36:	cd 93       	st	X+, r28
    2a38:	dc 93       	st	X, r29
    2a3a:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2a3c:	ee 83       	std	Y+6, r30	; 0x06
    2a3e:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a40:	c4 83       	std	Z+4, r28	; 0x04
    2a42:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a44:	8a 87       	std	Y+10, r24	; 0x0a
    2a46:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2a48:	fc 01       	movw	r30, r24
    2a4a:	20 81       	ld	r18, Z
    2a4c:	2f 5f       	subi	r18, 0xFF	; 255
    2a4e:	20 83       	st	Z, r18
}
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a5a:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a5c:	a4 81       	ldd	r26, Z+4	; 0x04
    2a5e:	b5 81       	ldd	r27, Z+5	; 0x05
    2a60:	86 81       	ldd	r24, Z+6	; 0x06
    2a62:	97 81       	ldd	r25, Z+7	; 0x07
    2a64:	16 96       	adiw	r26, 0x06	; 6
    2a66:	8d 93       	st	X+, r24
    2a68:	9c 93       	st	X, r25
    2a6a:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a6c:	a6 81       	ldd	r26, Z+6	; 0x06
    2a6e:	b7 81       	ldd	r27, Z+7	; 0x07
    2a70:	84 81       	ldd	r24, Z+4	; 0x04
    2a72:	95 81       	ldd	r25, Z+5	; 0x05
    2a74:	14 96       	adiw	r26, 0x04	; 4
    2a76:	8d 93       	st	X+, r24
    2a78:	9c 93       	st	X, r25
    2a7a:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a7c:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a7e:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a80:	11 96       	adiw	r26, 0x01	; 1
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	12 97       	sbiw	r26, 0x02	; 2
    2a88:	e8 17       	cp	r30, r24
    2a8a:	f9 07       	cpc	r31, r25
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a8e:	86 81       	ldd	r24, Z+6	; 0x06
    2a90:	97 81       	ldd	r25, Z+7	; 0x07
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	8d 93       	st	X+, r24
    2a96:	9c 93       	st	X, r25
    2a98:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2a9a:	12 86       	std	Z+10, r1	; 0x0a
    2a9c:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2a9e:	8c 91       	ld	r24, X
    2aa0:	81 50       	subi	r24, 0x01	; 1
    2aa2:	8c 93       	st	X, r24
    2aa4:	08 95       	ret

00002aa6 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2aa6:	80 93 90 31 	sts	0x3190, r24	; 0x803190 <portStackTopForTask>
    2aaa:	90 93 91 31 	sts	0x3191, r25	; 0x803191 <portStackTopForTask+0x1>
    2aae:	31 e1       	ldi	r19, 0x11	; 17
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	30 83       	st	Z, r19
    2ab4:	31 97       	sbiw	r30, 0x01	; 1
    2ab6:	22 e2       	ldi	r18, 0x22	; 34
    2ab8:	20 83       	st	Z, r18
    2aba:	31 97       	sbiw	r30, 0x01	; 1
    2abc:	a3 e3       	ldi	r26, 0x33	; 51
    2abe:	a0 83       	st	Z, r26
    2ac0:	31 97       	sbiw	r30, 0x01	; 1
    2ac2:	60 83       	st	Z, r22
    2ac4:	31 97       	sbiw	r30, 0x01	; 1
    2ac6:	70 83       	st	Z, r23
    2ac8:	31 97       	sbiw	r30, 0x01	; 1
    2aca:	10 82       	st	Z, r1
    2acc:	31 97       	sbiw	r30, 0x01	; 1
    2ace:	10 82       	st	Z, r1
    2ad0:	31 97       	sbiw	r30, 0x01	; 1
    2ad2:	60 e8       	ldi	r22, 0x80	; 128
    2ad4:	60 83       	st	Z, r22
    2ad6:	31 97       	sbiw	r30, 0x01	; 1
    2ad8:	10 82       	st	Z, r1
    2ada:	31 97       	sbiw	r30, 0x01	; 1
    2adc:	10 82       	st	Z, r1
    2ade:	31 97       	sbiw	r30, 0x01	; 1
    2ae0:	10 82       	st	Z, r1
    2ae2:	31 97       	sbiw	r30, 0x01	; 1
    2ae4:	62 e0       	ldi	r22, 0x02	; 2
    2ae6:	60 83       	st	Z, r22
    2ae8:	31 97       	sbiw	r30, 0x01	; 1
    2aea:	63 e0       	ldi	r22, 0x03	; 3
    2aec:	60 83       	st	Z, r22
    2aee:	31 97       	sbiw	r30, 0x01	; 1
    2af0:	64 e0       	ldi	r22, 0x04	; 4
    2af2:	60 83       	st	Z, r22
    2af4:	31 97       	sbiw	r30, 0x01	; 1
    2af6:	65 e0       	ldi	r22, 0x05	; 5
    2af8:	60 83       	st	Z, r22
    2afa:	31 97       	sbiw	r30, 0x01	; 1
    2afc:	66 e0       	ldi	r22, 0x06	; 6
    2afe:	60 83       	st	Z, r22
    2b00:	31 97       	sbiw	r30, 0x01	; 1
    2b02:	67 e0       	ldi	r22, 0x07	; 7
    2b04:	60 83       	st	Z, r22
    2b06:	31 97       	sbiw	r30, 0x01	; 1
    2b08:	68 e0       	ldi	r22, 0x08	; 8
    2b0a:	60 83       	st	Z, r22
    2b0c:	31 97       	sbiw	r30, 0x01	; 1
    2b0e:	69 e0       	ldi	r22, 0x09	; 9
    2b10:	60 83       	st	Z, r22
    2b12:	31 97       	sbiw	r30, 0x01	; 1
    2b14:	60 e1       	ldi	r22, 0x10	; 16
    2b16:	60 83       	st	Z, r22
    2b18:	31 97       	sbiw	r30, 0x01	; 1
    2b1a:	30 83       	st	Z, r19
    2b1c:	31 97       	sbiw	r30, 0x01	; 1
    2b1e:	32 e1       	ldi	r19, 0x12	; 18
    2b20:	30 83       	st	Z, r19
    2b22:	31 97       	sbiw	r30, 0x01	; 1
    2b24:	33 e1       	ldi	r19, 0x13	; 19
    2b26:	30 83       	st	Z, r19
    2b28:	31 97       	sbiw	r30, 0x01	; 1
    2b2a:	34 e1       	ldi	r19, 0x14	; 20
    2b2c:	30 83       	st	Z, r19
    2b2e:	31 97       	sbiw	r30, 0x01	; 1
    2b30:	35 e1       	ldi	r19, 0x15	; 21
    2b32:	30 83       	st	Z, r19
    2b34:	31 97       	sbiw	r30, 0x01	; 1
    2b36:	36 e1       	ldi	r19, 0x16	; 22
    2b38:	30 83       	st	Z, r19
    2b3a:	31 97       	sbiw	r30, 0x01	; 1
    2b3c:	37 e1       	ldi	r19, 0x17	; 23
    2b3e:	30 83       	st	Z, r19
    2b40:	31 97       	sbiw	r30, 0x01	; 1
    2b42:	38 e1       	ldi	r19, 0x18	; 24
    2b44:	30 83       	st	Z, r19
    2b46:	31 97       	sbiw	r30, 0x01	; 1
    2b48:	39 e1       	ldi	r19, 0x19	; 25
    2b4a:	30 83       	st	Z, r19
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	30 e2       	ldi	r19, 0x20	; 32
    2b50:	30 83       	st	Z, r19
    2b52:	31 97       	sbiw	r30, 0x01	; 1
    2b54:	31 e2       	ldi	r19, 0x21	; 33
    2b56:	30 83       	st	Z, r19
    2b58:	31 97       	sbiw	r30, 0x01	; 1
    2b5a:	20 83       	st	Z, r18
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	23 e2       	ldi	r18, 0x23	; 35
    2b60:	20 83       	st	Z, r18
    2b62:	31 97       	sbiw	r30, 0x01	; 1
    2b64:	40 83       	st	Z, r20
    2b66:	31 97       	sbiw	r30, 0x01	; 1
    2b68:	50 83       	st	Z, r21
    2b6a:	31 97       	sbiw	r30, 0x01	; 1
    2b6c:	26 e2       	ldi	r18, 0x26	; 38
    2b6e:	20 83       	st	Z, r18
    2b70:	31 97       	sbiw	r30, 0x01	; 1
    2b72:	27 e2       	ldi	r18, 0x27	; 39
    2b74:	20 83       	st	Z, r18
    2b76:	31 97       	sbiw	r30, 0x01	; 1
    2b78:	28 e2       	ldi	r18, 0x28	; 40
    2b7a:	20 83       	st	Z, r18
    2b7c:	31 97       	sbiw	r30, 0x01	; 1
    2b7e:	29 e2       	ldi	r18, 0x29	; 41
    2b80:	20 83       	st	Z, r18
    2b82:	31 97       	sbiw	r30, 0x01	; 1
    2b84:	20 e3       	ldi	r18, 0x30	; 48
    2b86:	20 83       	st	Z, r18
    2b88:	31 97       	sbiw	r30, 0x01	; 1
    2b8a:	21 e3       	ldi	r18, 0x31	; 49
    2b8c:	20 83       	st	Z, r18
    2b8e:	89 97       	sbiw	r24, 0x29	; 41
    2b90:	08 95       	ret

00002b92 <xPortStartScheduler>:
    2b92:	8c e7       	ldi	r24, 0x7C	; 124
    2b94:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2b98:	8f ef       	ldi	r24, 0xFF	; 255
    2b9a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2ba4:	91 e1       	ldi	r25, 0x11	; 17
    2ba6:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2baa:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2bae:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2bb2:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2bb6:	cd 91       	ld	r28, X+
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	dd 91       	ld	r29, X+
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	ff 91       	pop	r31
    2bc0:	ef 91       	pop	r30
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	bf 91       	pop	r27
    2bc8:	af 91       	pop	r26
    2bca:	9f 91       	pop	r25
    2bcc:	8f 91       	pop	r24
    2bce:	7f 91       	pop	r23
    2bd0:	6f 91       	pop	r22
    2bd2:	5f 91       	pop	r21
    2bd4:	4f 91       	pop	r20
    2bd6:	3f 91       	pop	r19
    2bd8:	2f 91       	pop	r18
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
    2be6:	bf 90       	pop	r11
    2be8:	af 90       	pop	r10
    2bea:	9f 90       	pop	r9
    2bec:	8f 90       	pop	r8
    2bee:	7f 90       	pop	r7
    2bf0:	6f 90       	pop	r6
    2bf2:	5f 90       	pop	r5
    2bf4:	4f 90       	pop	r4
    2bf6:	3f 90       	pop	r3
    2bf8:	2f 90       	pop	r2
    2bfa:	1f 90       	pop	r1
    2bfc:	0f 90       	pop	r0
    2bfe:	0c be       	out	0x3c, r0	; 60
    2c00:	0f 90       	pop	r0
    2c02:	0b be       	out	0x3b, r0	; 59
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	0f 90       	pop	r0
    2c0a:	08 95       	ret
    2c0c:	08 95       	ret

00002c0e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2c0e:	0f 92       	push	r0
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	0f 92       	push	r0
    2c16:	0b b6       	in	r0, 0x3b	; 59
    2c18:	0f 92       	push	r0
    2c1a:	0c b6       	in	r0, 0x3c	; 60
    2c1c:	0f 92       	push	r0
    2c1e:	1f 92       	push	r1
    2c20:	11 24       	eor	r1, r1
    2c22:	2f 92       	push	r2
    2c24:	3f 92       	push	r3
    2c26:	4f 92       	push	r4
    2c28:	5f 92       	push	r5
    2c2a:	6f 92       	push	r6
    2c2c:	7f 92       	push	r7
    2c2e:	8f 92       	push	r8
    2c30:	9f 92       	push	r9
    2c32:	af 92       	push	r10
    2c34:	bf 92       	push	r11
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	ef 93       	push	r30
    2c5c:	ff 93       	push	r31
    2c5e:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2c62:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2c66:	0d b6       	in	r0, 0x3d	; 61
    2c68:	0d 92       	st	X+, r0
    2c6a:	0e b6       	in	r0, 0x3e	; 62
    2c6c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2c6e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2c72:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2c76:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2c7a:	cd 91       	ld	r28, X+
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	dd 91       	ld	r29, X+
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	ff 91       	pop	r31
    2c84:	ef 91       	pop	r30
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	bf 91       	pop	r27
    2c8c:	af 91       	pop	r26
    2c8e:	9f 91       	pop	r25
    2c90:	8f 91       	pop	r24
    2c92:	7f 91       	pop	r23
    2c94:	6f 91       	pop	r22
    2c96:	5f 91       	pop	r21
    2c98:	4f 91       	pop	r20
    2c9a:	3f 91       	pop	r19
    2c9c:	2f 91       	pop	r18
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	bf 90       	pop	r11
    2cac:	af 90       	pop	r10
    2cae:	9f 90       	pop	r9
    2cb0:	8f 90       	pop	r8
    2cb2:	7f 90       	pop	r7
    2cb4:	6f 90       	pop	r6
    2cb6:	5f 90       	pop	r5
    2cb8:	4f 90       	pop	r4
    2cba:	3f 90       	pop	r3
    2cbc:	2f 90       	pop	r2
    2cbe:	1f 90       	pop	r1
    2cc0:	0f 90       	pop	r0
    2cc2:	0c be       	out	0x3c, r0	; 60
    2cc4:	0f 90       	pop	r0
    2cc6:	0b be       	out	0x3b, r0	; 59
    2cc8:	0f 90       	pop	r0
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2cce:	08 95       	ret

00002cd0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2cd0:	0f 92       	push	r0
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	0f 92       	push	r0
    2cd8:	0b b6       	in	r0, 0x3b	; 59
    2cda:	0f 92       	push	r0
    2cdc:	0c b6       	in	r0, 0x3c	; 60
    2cde:	0f 92       	push	r0
    2ce0:	1f 92       	push	r1
    2ce2:	11 24       	eor	r1, r1
    2ce4:	2f 92       	push	r2
    2ce6:	3f 92       	push	r3
    2ce8:	4f 92       	push	r4
    2cea:	5f 92       	push	r5
    2cec:	6f 92       	push	r6
    2cee:	7f 92       	push	r7
    2cf0:	8f 92       	push	r8
    2cf2:	9f 92       	push	r9
    2cf4:	af 92       	push	r10
    2cf6:	bf 92       	push	r11
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	2f 93       	push	r18
    2d06:	3f 93       	push	r19
    2d08:	4f 93       	push	r20
    2d0a:	5f 93       	push	r21
    2d0c:	6f 93       	push	r22
    2d0e:	7f 93       	push	r23
    2d10:	8f 93       	push	r24
    2d12:	9f 93       	push	r25
    2d14:	af 93       	push	r26
    2d16:	bf 93       	push	r27
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	ef 93       	push	r30
    2d1e:	ff 93       	push	r31
    2d20:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2d24:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2d28:	0d b6       	in	r0, 0x3d	; 61
    2d2a:	0d 92       	st	X+, r0
    2d2c:	0e b6       	in	r0, 0x3e	; 62
    2d2e:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2d30:	0e 94 09 1b 	call	0x3612	; 0x3612 <vTaskIncrementTick>
	vTaskSwitchContext();
    2d34:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2d38:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2d3c:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2d40:	cd 91       	ld	r28, X+
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	dd 91       	ld	r29, X+
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	ff 91       	pop	r31
    2d4a:	ef 91       	pop	r30
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	bf 91       	pop	r27
    2d52:	af 91       	pop	r26
    2d54:	9f 91       	pop	r25
    2d56:	8f 91       	pop	r24
    2d58:	7f 91       	pop	r23
    2d5a:	6f 91       	pop	r22
    2d5c:	5f 91       	pop	r21
    2d5e:	4f 91       	pop	r20
    2d60:	3f 91       	pop	r19
    2d62:	2f 91       	pop	r18
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	df 90       	pop	r13
    2d6e:	cf 90       	pop	r12
    2d70:	bf 90       	pop	r11
    2d72:	af 90       	pop	r10
    2d74:	9f 90       	pop	r9
    2d76:	8f 90       	pop	r8
    2d78:	7f 90       	pop	r7
    2d7a:	6f 90       	pop	r6
    2d7c:	5f 90       	pop	r5
    2d7e:	4f 90       	pop	r4
    2d80:	3f 90       	pop	r3
    2d82:	2f 90       	pop	r2
    2d84:	1f 90       	pop	r1
    2d86:	0f 90       	pop	r0
    2d88:	0c be       	out	0x3c, r0	; 60
    2d8a:	0f 90       	pop	r0
    2d8c:	0b be       	out	0x3b, r0	; 59
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2d94:	08 95       	ret

00002d96 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2d96:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2d9a:	18 95       	reti

00002d9c <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	ec 01       	movw	r28, r24
    2da2:	88 a1       	ldd	r24, Y+32	; 0x20
    2da4:	81 11       	cpse	r24, r1
    2da6:	0b c0       	rjmp	.+22     	; 0x2dbe <prvCopyDataToQueue+0x22>
    2da8:	88 81       	ld	r24, Y
    2daa:	99 81       	ldd	r25, Y+1	; 0x01
    2dac:	89 2b       	or	r24, r25
    2dae:	e1 f5       	brne	.+120    	; 0x2e28 <prvCopyDataToQueue+0x8c>
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	9b 81       	ldd	r25, Y+3	; 0x03
    2db4:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <vTaskPriorityDisinherit>
    2db8:	1a 82       	std	Y+2, r1	; 0x02
    2dba:	1b 82       	std	Y+3, r1	; 0x03
    2dbc:	35 c0       	rjmp	.+106    	; 0x2e28 <prvCopyDataToQueue+0x8c>
    2dbe:	41 11       	cpse	r20, r1
    2dc0:	17 c0       	rjmp	.+46     	; 0x2df0 <prvCopyDataToQueue+0x54>
    2dc2:	48 2f       	mov	r20, r24
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dca:	0e 94 57 1f 	call	0x3eae	; 0x3eae <memcpy>
    2dce:	28 a1       	ldd	r18, Y+32	; 0x20
    2dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd4:	82 0f       	add	r24, r18
    2dd6:	91 1d       	adc	r25, r1
    2dd8:	8c 83       	std	Y+4, r24	; 0x04
    2dda:	9d 83       	std	Y+5, r25	; 0x05
    2ddc:	2a 81       	ldd	r18, Y+2	; 0x02
    2dde:	3b 81       	ldd	r19, Y+3	; 0x03
    2de0:	82 17       	cp	r24, r18
    2de2:	93 07       	cpc	r25, r19
    2de4:	08 f1       	brcs	.+66     	; 0x2e28 <prvCopyDataToQueue+0x8c>
    2de6:	88 81       	ld	r24, Y
    2de8:	99 81       	ldd	r25, Y+1	; 0x01
    2dea:	8c 83       	std	Y+4, r24	; 0x04
    2dec:	9d 83       	std	Y+5, r25	; 0x05
    2dee:	1c c0       	rjmp	.+56     	; 0x2e28 <prvCopyDataToQueue+0x8c>
    2df0:	48 2f       	mov	r20, r24
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	8e 81       	ldd	r24, Y+6	; 0x06
    2df6:	9f 81       	ldd	r25, Y+7	; 0x07
    2df8:	0e 94 57 1f 	call	0x3eae	; 0x3eae <memcpy>
    2dfc:	88 a1       	ldd	r24, Y+32	; 0x20
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	91 95       	neg	r25
    2e02:	81 95       	neg	r24
    2e04:	91 09       	sbc	r25, r1
    2e06:	2e 81       	ldd	r18, Y+6	; 0x06
    2e08:	3f 81       	ldd	r19, Y+7	; 0x07
    2e0a:	28 0f       	add	r18, r24
    2e0c:	39 1f       	adc	r19, r25
    2e0e:	2e 83       	std	Y+6, r18	; 0x06
    2e10:	3f 83       	std	Y+7, r19	; 0x07
    2e12:	48 81       	ld	r20, Y
    2e14:	59 81       	ldd	r21, Y+1	; 0x01
    2e16:	24 17       	cp	r18, r20
    2e18:	35 07       	cpc	r19, r21
    2e1a:	30 f4       	brcc	.+12     	; 0x2e28 <prvCopyDataToQueue+0x8c>
    2e1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	8e 83       	std	Y+6, r24	; 0x06
    2e26:	9f 83       	std	Y+7, r25	; 0x07
    2e28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
    2e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	08 95       	ret

00002e34 <prvCopyDataFromQueue>:
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	a1 f0       	breq	.+40     	; 0x2e66 <prvCopyDataFromQueue+0x32>
    2e3e:	40 a1       	ldd	r20, Z+32	; 0x20
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	26 81       	ldd	r18, Z+6	; 0x06
    2e44:	37 81       	ldd	r19, Z+7	; 0x07
    2e46:	24 0f       	add	r18, r20
    2e48:	35 1f       	adc	r19, r21
    2e4a:	26 83       	std	Z+6, r18	; 0x06
    2e4c:	37 83       	std	Z+7, r19	; 0x07
    2e4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e50:	b3 81       	ldd	r27, Z+3	; 0x03
    2e52:	2a 17       	cp	r18, r26
    2e54:	3b 07       	cpc	r19, r27
    2e56:	10 f0       	brcs	.+4      	; 0x2e5c <prvCopyDataFromQueue+0x28>
    2e58:	86 83       	std	Z+6, r24	; 0x06
    2e5a:	97 83       	std	Z+7, r25	; 0x07
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	66 81       	ldd	r22, Z+6	; 0x06
    2e60:	77 81       	ldd	r23, Z+7	; 0x07
    2e62:	0e 94 57 1f 	call	0x3eae	; 0x3eae <memcpy>
    2e66:	08 95       	ret

00002e68 <prvUnlockQueue>:
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	ec 01       	movw	r28, r24
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	0f 92       	push	r0
    2e78:	8a a1       	ldd	r24, Y+34	; 0x22
    2e7a:	18 16       	cp	r1, r24
    2e7c:	b4 f4       	brge	.+44     	; 0x2eaa <prvUnlockQueue+0x42>
    2e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e80:	81 11       	cpse	r24, r1
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <prvUnlockQueue+0x26>
    2e84:	12 c0       	rjmp	.+36     	; 0x2eaa <prvUnlockQueue+0x42>
    2e86:	8b 89       	ldd	r24, Y+19	; 0x13
    2e88:	81 11       	cpse	r24, r1
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <prvUnlockQueue+0x2c>
    2e8c:	0e c0       	rjmp	.+28     	; 0x2eaa <prvUnlockQueue+0x42>
    2e8e:	8e 01       	movw	r16, r28
    2e90:	0d 5e       	subi	r16, 0xED	; 237
    2e92:	1f 4f       	sbci	r17, 0xFF	; 255
    2e94:	c8 01       	movw	r24, r16
    2e96:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <xTaskRemoveFromEventList>
    2e9a:	81 11       	cpse	r24, r1
    2e9c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <vTaskMissedYield>
    2ea0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ea2:	81 50       	subi	r24, 0x01	; 1
    2ea4:	8a a3       	std	Y+34, r24	; 0x22
    2ea6:	18 16       	cp	r1, r24
    2ea8:	74 f3       	brlt	.-36     	; 0x2e86 <prvUnlockQueue+0x1e>
    2eaa:	8f ef       	ldi	r24, 0xFF	; 255
    2eac:	8a a3       	std	Y+34, r24	; 0x22
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	0f 92       	push	r0
    2eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eba:	18 16       	cp	r1, r24
    2ebc:	b4 f4       	brge	.+44     	; 0x2eea <prvUnlockQueue+0x82>
    2ebe:	88 85       	ldd	r24, Y+8	; 0x08
    2ec0:	81 11       	cpse	r24, r1
    2ec2:	05 c0       	rjmp	.+10     	; 0x2ece <prvUnlockQueue+0x66>
    2ec4:	12 c0       	rjmp	.+36     	; 0x2eea <prvUnlockQueue+0x82>
    2ec6:	88 85       	ldd	r24, Y+8	; 0x08
    2ec8:	81 11       	cpse	r24, r1
    2eca:	04 c0       	rjmp	.+8      	; 0x2ed4 <prvUnlockQueue+0x6c>
    2ecc:	0e c0       	rjmp	.+28     	; 0x2eea <prvUnlockQueue+0x82>
    2ece:	8e 01       	movw	r16, r28
    2ed0:	08 5f       	subi	r16, 0xF8	; 248
    2ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed4:	c8 01       	movw	r24, r16
    2ed6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <xTaskRemoveFromEventList>
    2eda:	81 11       	cpse	r24, r1
    2edc:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <vTaskMissedYield>
    2ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee2:	81 50       	subi	r24, 0x01	; 1
    2ee4:	89 a3       	std	Y+33, r24	; 0x21
    2ee6:	18 16       	cp	r1, r24
    2ee8:	74 f3       	brlt	.-36     	; 0x2ec6 <prvUnlockQueue+0x5e>
    2eea:	8f ef       	ldi	r24, 0xFF	; 255
    2eec:	89 a3       	std	Y+33, r24	; 0x21
    2eee:	0f 90       	pop	r0
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	08 95       	ret

00002efc <xQueueGenericReset>:
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	61 30       	cpi	r22, 0x01	; 1
    2f04:	59 f0       	breq	.+22     	; 0x2f1c <xQueueGenericReset+0x20>
    2f06:	fc 01       	movw	r30, r24
    2f08:	23 89       	ldd	r18, Z+19	; 0x13
    2f0a:	30 85       	ldd	r19, Z+8	; 0x08
    2f0c:	31 11       	cpse	r19, r1
    2f0e:	2c c0       	rjmp	.+88     	; 0x2f68 <xQueueGenericReset+0x6c>
    2f10:	11 e0       	ldi	r17, 0x01	; 1
    2f12:	21 11       	cpse	r18, r1
    2f14:	10 e0       	ldi	r17, 0x00	; 0
    2f16:	21 11       	cpse	r18, r1
    2f18:	28 c0       	rjmp	.+80     	; 0x2f6a <xQueueGenericReset+0x6e>
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <xQueueGenericReset+0x22>
    2f1c:	11 e0       	ldi	r17, 0x01	; 1
    2f1e:	ec 01       	movw	r28, r24
    2f20:	48 81       	ld	r20, Y
    2f22:	59 81       	ldd	r21, Y+1	; 0x01
    2f24:	28 a1       	ldd	r18, Y+32	; 0x20
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f2a:	62 9f       	mul	r22, r18
    2f2c:	c0 01       	movw	r24, r0
    2f2e:	63 9f       	mul	r22, r19
    2f30:	90 0d       	add	r25, r0
    2f32:	11 24       	eor	r1, r1
    2f34:	ba 01       	movw	r22, r20
    2f36:	68 0f       	add	r22, r24
    2f38:	79 1f       	adc	r23, r25
    2f3a:	6a 83       	std	Y+2, r22	; 0x02
    2f3c:	7b 83       	std	Y+3, r23	; 0x03
    2f3e:	1e 8e       	std	Y+30, r1	; 0x1e
    2f40:	4c 83       	std	Y+4, r20	; 0x04
    2f42:	5d 83       	std	Y+5, r21	; 0x05
    2f44:	82 1b       	sub	r24, r18
    2f46:	93 0b       	sbc	r25, r19
    2f48:	84 0f       	add	r24, r20
    2f4a:	95 1f       	adc	r25, r21
    2f4c:	8e 83       	std	Y+6, r24	; 0x06
    2f4e:	9f 83       	std	Y+7, r25	; 0x07
    2f50:	8f ef       	ldi	r24, 0xFF	; 255
    2f52:	89 a3       	std	Y+33, r24	; 0x21
    2f54:	8a a3       	std	Y+34, r24	; 0x22
    2f56:	ce 01       	movw	r24, r28
    2f58:	08 96       	adiw	r24, 0x08	; 8
    2f5a:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    2f5e:	ce 01       	movw	r24, r28
    2f60:	43 96       	adiw	r24, 0x13	; 19
    2f62:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    2f66:	01 c0       	rjmp	.+2      	; 0x2f6a <xQueueGenericReset+0x6e>
    2f68:	10 e0       	ldi	r17, 0x00	; 0
    2f6a:	81 2f       	mov	r24, r17
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	08 95       	ret

00002f74 <xQueueGenericCreate>:
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	88 23       	and	r24, r24
    2f7e:	01 f1       	breq	.+64     	; 0x2fc0 <xQueueGenericCreate+0x4c>
    2f80:	06 2f       	mov	r16, r22
    2f82:	18 2f       	mov	r17, r24
    2f84:	83 e2       	ldi	r24, 0x23	; 35
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2f8c:	ec 01       	movw	r28, r24
    2f8e:	89 2b       	or	r24, r25
    2f90:	c9 f0       	breq	.+50     	; 0x2fc4 <xQueueGenericCreate+0x50>
    2f92:	10 9f       	mul	r17, r16
    2f94:	c0 01       	movw	r24, r0
    2f96:	11 24       	eor	r1, r1
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    2f9e:	88 83       	st	Y, r24
    2fa0:	99 83       	std	Y+1, r25	; 0x01
    2fa2:	89 2b       	or	r24, r25
    2fa4:	39 f0       	breq	.+14     	; 0x2fb4 <xQueueGenericCreate+0x40>
    2fa6:	1f 8f       	std	Y+31, r17	; 0x1f
    2fa8:	08 a3       	std	Y+32, r16	; 0x20
    2faa:	61 e0       	ldi	r22, 0x01	; 1
    2fac:	ce 01       	movw	r24, r28
    2fae:	0e 94 7e 17 	call	0x2efc	; 0x2efc <xQueueGenericReset>
    2fb2:	08 c0       	rjmp	.+16     	; 0x2fc4 <xQueueGenericCreate+0x50>
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <vPortFree>
    2fba:	c0 e0       	ldi	r28, 0x00	; 0
    2fbc:	d0 e0       	ldi	r29, 0x00	; 0
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <xQueueGenericCreate+0x50>
    2fc0:	c0 e0       	ldi	r28, 0x00	; 0
    2fc2:	d0 e0       	ldi	r29, 0x00	; 0
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <xQueueGenericSend>:
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	29 97       	sbiw	r28, 0x09	; 9
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	7c 01       	movw	r14, r24
    2ff0:	5b 01       	movw	r10, r22
    2ff2:	2e 83       	std	Y+6, r18	; 0x06
    2ff4:	3f 83       	std	Y+7, r19	; 0x07
    2ff6:	48 87       	std	Y+8, r20	; 0x08
    2ff8:	59 87       	std	Y+9, r21	; 0x09
    2ffa:	10 e0       	ldi	r17, 0x00	; 0
    2ffc:	6c 01       	movw	r12, r24
    2ffe:	88 e0       	ldi	r24, 0x08	; 8
    3000:	c8 0e       	add	r12, r24
    3002:	d1 1c       	adc	r13, r1
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	0f 92       	push	r0
    300a:	f7 01       	movw	r30, r14
    300c:	96 8d       	ldd	r25, Z+30	; 0x1e
    300e:	87 8d       	ldd	r24, Z+31	; 0x1f
    3010:	98 17       	cp	r25, r24
    3012:	a8 f4       	brcc	.+42     	; 0x303e <xQueueGenericSend+0x6e>
    3014:	40 2f       	mov	r20, r16
    3016:	b5 01       	movw	r22, r10
    3018:	c7 01       	movw	r24, r14
    301a:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvCopyDataToQueue>
    301e:	f7 01       	movw	r30, r14
    3020:	83 89       	ldd	r24, Z+19	; 0x13
    3022:	88 23       	and	r24, r24
    3024:	41 f0       	breq	.+16     	; 0x3036 <xQueueGenericSend+0x66>
    3026:	c7 01       	movw	r24, r14
    3028:	43 96       	adiw	r24, 0x13	; 19
    302a:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <xTaskRemoveFromEventList>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	11 f4       	brne	.+4      	; 0x3036 <xQueueGenericSend+0x66>
    3032:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    3036:	0f 90       	pop	r0
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	56 c0       	rjmp	.+172    	; 0x30ea <xQueueGenericSend+0x11a>
    303e:	8e 81       	ldd	r24, Y+6	; 0x06
    3040:	9f 81       	ldd	r25, Y+7	; 0x07
    3042:	a8 85       	ldd	r26, Y+8	; 0x08
    3044:	b9 85       	ldd	r27, Y+9	; 0x09
    3046:	89 2b       	or	r24, r25
    3048:	8a 2b       	or	r24, r26
    304a:	8b 2b       	or	r24, r27
    304c:	21 f4       	brne	.+8      	; 0x3056 <xQueueGenericSend+0x86>
    304e:	0f 90       	pop	r0
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	4a c0       	rjmp	.+148    	; 0x30ea <xQueueGenericSend+0x11a>
    3056:	11 11       	cpse	r17, r1
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <xQueueGenericSend+0x94>
    305a:	ce 01       	movw	r24, r28
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <vTaskSetTimeOutState>
    3062:	11 e0       	ldi	r17, 0x01	; 1
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	0f 92       	push	r0
    3072:	f7 01       	movw	r30, r14
    3074:	81 a1       	ldd	r24, Z+33	; 0x21
    3076:	8f 3f       	cpi	r24, 0xFF	; 255
    3078:	09 f4       	brne	.+2      	; 0x307c <xQueueGenericSend+0xac>
    307a:	11 a2       	std	Z+33, r1	; 0x21
    307c:	f7 01       	movw	r30, r14
    307e:	82 a1       	ldd	r24, Z+34	; 0x22
    3080:	8f 3f       	cpi	r24, 0xFF	; 255
    3082:	09 f4       	brne	.+2      	; 0x3086 <xQueueGenericSend+0xb6>
    3084:	12 a2       	std	Z+34, r1	; 0x22
    3086:	0f 90       	pop	r0
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	be 01       	movw	r22, r28
    308c:	6a 5f       	subi	r22, 0xFA	; 250
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	ce 01       	movw	r24, r28
    3092:	01 96       	adiw	r24, 0x01	; 1
    3094:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <xTaskCheckForTimeOut>
    3098:	81 11       	cpse	r24, r1
    309a:	21 c0       	rjmp	.+66     	; 0x30de <xQueueGenericSend+0x10e>
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	0f 92       	push	r0
    30a2:	f7 01       	movw	r30, r14
    30a4:	96 8d       	ldd	r25, Z+30	; 0x1e
    30a6:	0f 90       	pop	r0
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    30ac:	98 13       	cpse	r25, r24
    30ae:	11 c0       	rjmp	.+34     	; 0x30d2 <xQueueGenericSend+0x102>
    30b0:	4e 81       	ldd	r20, Y+6	; 0x06
    30b2:	5f 81       	ldd	r21, Y+7	; 0x07
    30b4:	68 85       	ldd	r22, Y+8	; 0x08
    30b6:	79 85       	ldd	r23, Y+9	; 0x09
    30b8:	c6 01       	movw	r24, r12
    30ba:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <vTaskPlaceOnEventList>
    30be:	c7 01       	movw	r24, r14
    30c0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    30c4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    30c8:	81 11       	cpse	r24, r1
    30ca:	9c cf       	rjmp	.-200    	; 0x3004 <xQueueGenericSend+0x34>
    30cc:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    30d0:	99 cf       	rjmp	.-206    	; 0x3004 <xQueueGenericSend+0x34>
    30d2:	c7 01       	movw	r24, r14
    30d4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    30d8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    30dc:	93 cf       	rjmp	.-218    	; 0x3004 <xQueueGenericSend+0x34>
    30de:	c7 01       	movw	r24, r14
    30e0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    30e4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	29 96       	adiw	r28, 0x09	; 9
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	df 90       	pop	r13
    30fe:	cf 90       	pop	r12
    3100:	bf 90       	pop	r11
    3102:	af 90       	pop	r10
    3104:	08 95       	ret

00003106 <xQueueGenericReceive>:
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	29 97       	sbiw	r28, 0x09	; 9
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	7c 01       	movw	r14, r24
    3126:	5b 01       	movw	r10, r22
    3128:	2e 83       	std	Y+6, r18	; 0x06
    312a:	3f 83       	std	Y+7, r19	; 0x07
    312c:	48 87       	std	Y+8, r20	; 0x08
    312e:	59 87       	std	Y+9, r21	; 0x09
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	6c 01       	movw	r12, r24
    3134:	83 e1       	ldi	r24, 0x13	; 19
    3136:	c8 0e       	add	r12, r24
    3138:	d1 1c       	adc	r13, r1
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	0f 92       	push	r0
    3140:	f7 01       	movw	r30, r14
    3142:	86 8d       	ldd	r24, Z+30	; 0x1e
    3144:	88 23       	and	r24, r24
    3146:	99 f1       	breq	.+102    	; 0x31ae <xQueueGenericReceive+0xa8>
    3148:	c6 80       	ldd	r12, Z+6	; 0x06
    314a:	d7 80       	ldd	r13, Z+7	; 0x07
    314c:	b5 01       	movw	r22, r10
    314e:	c7 01       	movw	r24, r14
    3150:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <prvCopyDataFromQueue>
    3154:	01 11       	cpse	r16, r1
    3156:	1a c0       	rjmp	.+52     	; 0x318c <xQueueGenericReceive+0x86>
    3158:	f7 01       	movw	r30, r14
    315a:	86 8d       	ldd	r24, Z+30	; 0x1e
    315c:	81 50       	subi	r24, 0x01	; 1
    315e:	86 8f       	std	Z+30, r24	; 0x1e
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	89 2b       	or	r24, r25
    3166:	29 f4       	brne	.+10     	; 0x3172 <xQueueGenericReceive+0x6c>
    3168:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <xTaskGetCurrentTaskHandle>
    316c:	f7 01       	movw	r30, r14
    316e:	82 83       	std	Z+2, r24	; 0x02
    3170:	93 83       	std	Z+3, r25	; 0x03
    3172:	f7 01       	movw	r30, r14
    3174:	80 85       	ldd	r24, Z+8	; 0x08
    3176:	88 23       	and	r24, r24
    3178:	b1 f0       	breq	.+44     	; 0x31a6 <xQueueGenericReceive+0xa0>
    317a:	c7 01       	movw	r24, r14
    317c:	08 96       	adiw	r24, 0x08	; 8
    317e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <xTaskRemoveFromEventList>
    3182:	81 30       	cpi	r24, 0x01	; 1
    3184:	81 f4       	brne	.+32     	; 0x31a6 <xQueueGenericReceive+0xa0>
    3186:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <xQueueGenericReceive+0xa0>
    318c:	f7 01       	movw	r30, r14
    318e:	c6 82       	std	Z+6, r12	; 0x06
    3190:	d7 82       	std	Z+7, r13	; 0x07
    3192:	83 89       	ldd	r24, Z+19	; 0x13
    3194:	88 23       	and	r24, r24
    3196:	39 f0       	breq	.+14     	; 0x31a6 <xQueueGenericReceive+0xa0>
    3198:	c7 01       	movw	r24, r14
    319a:	43 96       	adiw	r24, 0x13	; 19
    319c:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <xTaskRemoveFromEventList>
    31a0:	81 11       	cpse	r24, r1
    31a2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    31a6:	0f 90       	pop	r0
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	62 c0       	rjmp	.+196    	; 0x3272 <xQueueGenericReceive+0x16c>
    31ae:	8e 81       	ldd	r24, Y+6	; 0x06
    31b0:	9f 81       	ldd	r25, Y+7	; 0x07
    31b2:	a8 85       	ldd	r26, Y+8	; 0x08
    31b4:	b9 85       	ldd	r27, Y+9	; 0x09
    31b6:	89 2b       	or	r24, r25
    31b8:	8a 2b       	or	r24, r26
    31ba:	8b 2b       	or	r24, r27
    31bc:	21 f4       	brne	.+8      	; 0x31c6 <xQueueGenericReceive+0xc0>
    31be:	0f 90       	pop	r0
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	56 c0       	rjmp	.+172    	; 0x3272 <xQueueGenericReceive+0x16c>
    31c6:	11 11       	cpse	r17, r1
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <xQueueGenericReceive+0xce>
    31ca:	ce 01       	movw	r24, r28
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <vTaskSetTimeOutState>
    31d2:	11 e0       	ldi	r17, 0x01	; 1
    31d4:	0f 90       	pop	r0
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	0f 92       	push	r0
    31e2:	f7 01       	movw	r30, r14
    31e4:	81 a1       	ldd	r24, Z+33	; 0x21
    31e6:	8f 3f       	cpi	r24, 0xFF	; 255
    31e8:	09 f4       	brne	.+2      	; 0x31ec <xQueueGenericReceive+0xe6>
    31ea:	11 a2       	std	Z+33, r1	; 0x21
    31ec:	f7 01       	movw	r30, r14
    31ee:	82 a1       	ldd	r24, Z+34	; 0x22
    31f0:	8f 3f       	cpi	r24, 0xFF	; 255
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <xQueueGenericReceive+0xf0>
    31f4:	12 a2       	std	Z+34, r1	; 0x22
    31f6:	0f 90       	pop	r0
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	be 01       	movw	r22, r28
    31fc:	6a 5f       	subi	r22, 0xFA	; 250
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	ce 01       	movw	r24, r28
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <xTaskCheckForTimeOut>
    3208:	81 11       	cpse	r24, r1
    320a:	2d c0       	rjmp	.+90     	; 0x3266 <xQueueGenericReceive+0x160>
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	0f 92       	push	r0
    3212:	f7 01       	movw	r30, r14
    3214:	86 8d       	ldd	r24, Z+30	; 0x1e
    3216:	0f 90       	pop	r0
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	81 11       	cpse	r24, r1
    321c:	1e c0       	rjmp	.+60     	; 0x325a <xQueueGenericReceive+0x154>
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	89 2b       	or	r24, r25
    3224:	49 f4       	brne	.+18     	; 0x3238 <xQueueGenericReceive+0x132>
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	0f 92       	push	r0
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <vTaskPriorityInherit>
    3234:	0f 90       	pop	r0
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	4e 81       	ldd	r20, Y+6	; 0x06
    323a:	5f 81       	ldd	r21, Y+7	; 0x07
    323c:	68 85       	ldd	r22, Y+8	; 0x08
    323e:	79 85       	ldd	r23, Y+9	; 0x09
    3240:	c6 01       	movw	r24, r12
    3242:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <vTaskPlaceOnEventList>
    3246:	c7 01       	movw	r24, r14
    3248:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    324c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    3250:	81 11       	cpse	r24, r1
    3252:	73 cf       	rjmp	.-282    	; 0x313a <xQueueGenericReceive+0x34>
    3254:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    3258:	70 cf       	rjmp	.-288    	; 0x313a <xQueueGenericReceive+0x34>
    325a:	c7 01       	movw	r24, r14
    325c:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    3260:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    3264:	6a cf       	rjmp	.-300    	; 0x313a <xQueueGenericReceive+0x34>
    3266:	c7 01       	movw	r24, r14
    3268:	0e 94 34 17 	call	0x2e68	; 0x2e68 <prvUnlockQueue>
    326c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	29 96       	adiw	r28, 0x09	; 9
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	1f 91       	pop	r17
    327e:	0f 91       	pop	r16
    3280:	ff 90       	pop	r15
    3282:	ef 90       	pop	r14
    3284:	df 90       	pop	r13
    3286:	cf 90       	pop	r12
    3288:	bf 90       	pop	r11
    328a:	af 90       	pop	r10
    328c:	08 95       	ret

0000328e <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3294:	fc 01       	movw	r30, r24
    3296:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    3298:	0f 90       	pop	r0
    329a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    329c:	08 95       	ret

0000329e <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    329e:	c2 e6       	ldi	r28, 0x62	; 98
    32a0:	d1 e3       	ldi	r29, 0x31	; 49
    32a2:	88 81       	ld	r24, Y
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	e8 f3       	brcs	.-6      	; 0x32a2 <prvIdleTask+0x4>
    32a8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    32ac:	fa cf       	rjmp	.-12     	; 0x32a2 <prvIdleTask+0x4>

000032ae <prvAddCurrentTaskToDelayedList>:
    32ae:	cf 92       	push	r12
    32b0:	df 92       	push	r13
    32b2:	ef 92       	push	r14
    32b4:	ff 92       	push	r15
    32b6:	6b 01       	movw	r12, r22
    32b8:	7c 01       	movw	r14, r24
    32ba:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    32be:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    32c2:	62 83       	std	Z+2, r22	; 0x02
    32c4:	73 83       	std	Z+3, r23	; 0x03
    32c6:	84 83       	std	Z+4, r24	; 0x04
    32c8:	95 83       	std	Z+5, r25	; 0x05
    32ca:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    32ce:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    32d2:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    32d6:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    32da:	c8 16       	cp	r12, r24
    32dc:	d9 06       	cpc	r13, r25
    32de:	ea 06       	cpc	r14, r26
    32e0:	fb 06       	cpc	r15, r27
    32e2:	68 f4       	brcc	.+26     	; 0x32fe <prvAddCurrentTaskToDelayedList+0x50>
    32e4:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    32e8:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    32ec:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    32f0:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    32f4:	6e 5f       	subi	r22, 0xFE	; 254
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <vListInsert>
    32fc:	21 c0       	rjmp	.+66     	; 0x3340 <prvAddCurrentTaskToDelayedList+0x92>
    32fe:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3302:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3306:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    330a:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    330e:	6e 5f       	subi	r22, 0xFE	; 254
    3310:	7f 4f       	sbci	r23, 0xFF	; 255
    3312:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <vListInsert>
    3316:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    331a:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    331e:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3322:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3326:	c8 16       	cp	r12, r24
    3328:	d9 06       	cpc	r13, r25
    332a:	ea 06       	cpc	r14, r26
    332c:	fb 06       	cpc	r15, r27
    332e:	40 f4       	brcc	.+16     	; 0x3340 <prvAddCurrentTaskToDelayedList+0x92>
    3330:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    3334:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3338:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    333c:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	df 90       	pop	r13
    3346:	cf 90       	pop	r12
    3348:	08 95       	ret

0000334a <xTaskGenericCreate>:
    334a:	4f 92       	push	r4
    334c:	5f 92       	push	r5
    334e:	6f 92       	push	r6
    3350:	7f 92       	push	r7
    3352:	8f 92       	push	r8
    3354:	9f 92       	push	r9
    3356:	af 92       	push	r10
    3358:	bf 92       	push	r11
    335a:	cf 92       	push	r12
    335c:	df 92       	push	r13
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	5c 01       	movw	r10, r24
    336c:	4b 01       	movw	r8, r22
    336e:	3a 01       	movw	r6, r20
    3370:	29 01       	movw	r4, r18
    3372:	88 e2       	ldi	r24, 0x28	; 40
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    337a:	ec 01       	movw	r28, r24
    337c:	89 2b       	or	r24, r25
    337e:	09 f4       	brne	.+2      	; 0x3382 <xTaskGenericCreate+0x38>
    3380:	d4 c0       	rjmp	.+424    	; 0x352a <xTaskGenericCreate+0x1e0>
    3382:	c1 14       	cp	r12, r1
    3384:	d1 04       	cpc	r13, r1
    3386:	09 f0       	breq	.+2      	; 0x338a <xTaskGenericCreate+0x40>
    3388:	cc c0       	rjmp	.+408    	; 0x3522 <xTaskGenericCreate+0x1d8>
    338a:	c3 01       	movw	r24, r6
    338c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <pvPortMalloc>
    3390:	8b 8f       	std	Y+27, r24	; 0x1b
    3392:	9c 8f       	std	Y+28, r25	; 0x1c
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	21 f4       	brne	.+8      	; 0x33a0 <xTaskGenericCreate+0x56>
    3398:	ce 01       	movw	r24, r28
    339a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <vPortFree>
    339e:	c5 c0       	rjmp	.+394    	; 0x352a <xTaskGenericCreate+0x1e0>
    33a0:	a3 01       	movw	r20, r6
    33a2:	61 e1       	ldi	r22, 0x11	; 17
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <memset>
    33aa:	93 01       	movw	r18, r6
    33ac:	21 50       	subi	r18, 0x01	; 1
    33ae:	31 09       	sbc	r19, r1
    33b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33b4:	3c 01       	movw	r6, r24
    33b6:	62 0e       	add	r6, r18
    33b8:	73 1e       	adc	r7, r19
    33ba:	4a e0       	ldi	r20, 0x0A	; 10
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	b4 01       	movw	r22, r8
    33c0:	ce 01       	movw	r24, r28
    33c2:	4d 96       	adiw	r24, 0x1d	; 29
    33c4:	0e 94 67 1f 	call	0x3ece	; 0x3ece <strncpy>
    33c8:	1e a2       	std	Y+38, r1	; 0x26
    33ca:	10 2f       	mov	r17, r16
    33cc:	04 30       	cpi	r16, 0x04	; 4
    33ce:	08 f0       	brcs	.+2      	; 0x33d2 <xTaskGenericCreate+0x88>
    33d0:	13 e0       	ldi	r17, 0x03	; 3
    33d2:	1a 8f       	std	Y+26, r17	; 0x1a
    33d4:	1f a3       	std	Y+39, r17	; 0x27
    33d6:	6e 01       	movw	r12, r28
    33d8:	22 e0       	ldi	r18, 0x02	; 2
    33da:	c2 0e       	add	r12, r18
    33dc:	d1 1c       	adc	r13, r1
    33de:	c6 01       	movw	r24, r12
    33e0:	0e 94 b7 14 	call	0x296e	; 0x296e <vListInitialiseItem>
    33e4:	ce 01       	movw	r24, r28
    33e6:	0e 96       	adiw	r24, 0x0e	; 14
    33e8:	0e 94 b7 14 	call	0x296e	; 0x296e <vListInitialiseItem>
    33ec:	ca 87       	std	Y+10, r28	; 0x0a
    33ee:	db 87       	std	Y+11, r29	; 0x0b
    33f0:	84 e0       	ldi	r24, 0x04	; 4
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e0       	ldi	r26, 0x00	; 0
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	81 1b       	sub	r24, r17
    33fa:	91 09       	sbc	r25, r1
    33fc:	a1 09       	sbc	r26, r1
    33fe:	b1 09       	sbc	r27, r1
    3400:	8e 87       	std	Y+14, r24	; 0x0e
    3402:	9f 87       	std	Y+15, r25	; 0x0f
    3404:	a8 8b       	std	Y+16, r26	; 0x10
    3406:	b9 8b       	std	Y+17, r27	; 0x11
    3408:	ce 8b       	std	Y+22, r28	; 0x16
    340a:	df 8b       	std	Y+23, r29	; 0x17
    340c:	a2 01       	movw	r20, r4
    340e:	b5 01       	movw	r22, r10
    3410:	c3 01       	movw	r24, r6
    3412:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <pxPortInitialiseStack>
    3416:	88 83       	st	Y, r24
    3418:	99 83       	std	Y+1, r25	; 0x01
    341a:	e1 14       	cp	r14, r1
    341c:	f1 04       	cpc	r15, r1
    341e:	19 f0       	breq	.+6      	; 0x3426 <xTaskGenericCreate+0xdc>
    3420:	f7 01       	movw	r30, r14
    3422:	c0 83       	st	Z, r28
    3424:	d1 83       	std	Z+1, r29	; 0x01
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	0f 92       	push	r0
    342c:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxCurrentNumberOfTasks>
    3436:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    343a:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    343e:	89 2b       	or	r24, r25
    3440:	89 f5       	brne	.+98     	; 0x34a4 <xTaskGenericCreate+0x15a>
    3442:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    3446:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    344a:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    344e:	81 30       	cpi	r24, 0x01	; 1
    3450:	c1 f5       	brne	.+112    	; 0x34c2 <xTaskGenericCreate+0x178>
    3452:	82 e6       	ldi	r24, 0x62	; 98
    3454:	91 e3       	ldi	r25, 0x31	; 49
    3456:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    345a:	8d e6       	ldi	r24, 0x6D	; 109
    345c:	91 e3       	ldi	r25, 0x31	; 49
    345e:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    3462:	88 e7       	ldi	r24, 0x78	; 120
    3464:	91 e3       	ldi	r25, 0x31	; 49
    3466:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    346a:	83 e8       	ldi	r24, 0x83	; 131
    346c:	91 e3       	ldi	r25, 0x31	; 49
    346e:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    3472:	87 e5       	ldi	r24, 0x57	; 87
    3474:	91 e3       	ldi	r25, 0x31	; 49
    3476:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    347a:	8c e4       	ldi	r24, 0x4C	; 76
    347c:	91 e3       	ldi	r25, 0x31	; 49
    347e:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    3482:	8d e3       	ldi	r24, 0x3D	; 61
    3484:	91 e3       	ldi	r25, 0x31	; 49
    3486:	0e 94 a6 14 	call	0x294c	; 0x294c <vListInitialise>
    348a:	87 e5       	ldi	r24, 0x57	; 87
    348c:	91 e3       	ldi	r25, 0x31	; 49
    348e:	80 93 4a 31 	sts	0x314A, r24	; 0x80314a <pxDelayedTaskList>
    3492:	90 93 4b 31 	sts	0x314B, r25	; 0x80314b <pxDelayedTaskList+0x1>
    3496:	8c e4       	ldi	r24, 0x4C	; 76
    3498:	91 e3       	ldi	r25, 0x31	; 49
    349a:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    349e:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <xTaskGenericCreate+0x178>
    34a4:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    34a8:	81 11       	cpse	r24, r1
    34aa:	0b c0       	rjmp	.+22     	; 0x34c2 <xTaskGenericCreate+0x178>
    34ac:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    34b0:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    34b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34b6:	08 17       	cp	r16, r24
    34b8:	20 f0       	brcs	.+8      	; 0x34c2 <xTaskGenericCreate+0x178>
    34ba:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    34be:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    34c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34c4:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <uxTopUsedPriority>
    34c8:	98 17       	cp	r25, r24
    34ca:	10 f4       	brcc	.+4      	; 0x34d0 <xTaskGenericCreate+0x186>
    34cc:	80 93 35 31 	sts	0x3135, r24	; 0x803135 <uxTopUsedPriority>
    34d0:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTaskNumber>
    34d4:	9f 5f       	subi	r25, 0xFF	; 255
    34d6:	90 93 2e 31 	sts	0x312E, r25	; 0x80312e <uxTaskNumber>
    34da:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    34de:	98 17       	cp	r25, r24
    34e0:	10 f4       	brcc	.+4      	; 0x34e6 <xTaskGenericCreate+0x19c>
    34e2:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    34e6:	fb e0       	ldi	r31, 0x0B	; 11
    34e8:	8f 9f       	mul	r24, r31
    34ea:	c0 01       	movw	r24, r0
    34ec:	11 24       	eor	r1, r1
    34ee:	b6 01       	movw	r22, r12
    34f0:	8e 59       	subi	r24, 0x9E	; 158
    34f2:	9e 4c       	sbci	r25, 0xCE	; 206
    34f4:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
    34f8:	0f 90       	pop	r0
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    3500:	88 23       	and	r24, r24
    3502:	59 f0       	breq	.+22     	; 0x351a <xTaskGenericCreate+0x1d0>
    3504:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3508:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    350c:	82 8d       	ldd	r24, Z+26	; 0x1a
    350e:	80 17       	cp	r24, r16
    3510:	30 f4       	brcc	.+12     	; 0x351e <xTaskGenericCreate+0x1d4>
    3512:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	09 c0       	rjmp	.+18     	; 0x352c <xTaskGenericCreate+0x1e2>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	07 c0       	rjmp	.+14     	; 0x352c <xTaskGenericCreate+0x1e2>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	05 c0       	rjmp	.+10     	; 0x352c <xTaskGenericCreate+0x1e2>
    3522:	cb 8e       	std	Y+27, r12	; 0x1b
    3524:	dc 8e       	std	Y+28, r13	; 0x1c
    3526:	c6 01       	movw	r24, r12
    3528:	3b cf       	rjmp	.-394    	; 0x33a0 <xTaskGenericCreate+0x56>
    352a:	8f ef       	ldi	r24, 0xFF	; 255
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	df 90       	pop	r13
    353a:	cf 90       	pop	r12
    353c:	bf 90       	pop	r11
    353e:	af 90       	pop	r10
    3540:	9f 90       	pop	r9
    3542:	8f 90       	pop	r8
    3544:	7f 90       	pop	r7
    3546:	6f 90       	pop	r6
    3548:	5f 90       	pop	r5
    354a:	4f 90       	pop	r4
    354c:	08 95       	ret

0000354e <uxTaskPriorityGet>:
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	0f 92       	push	r0
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	21 f4       	brne	.+8      	; 0x3560 <uxTaskPriorityGet+0x12>
    3558:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    355c:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	fc 01       	movw	r30, r24
    3566:	82 8d       	ldd	r24, Z+26	; 0x1a
    3568:	08 95       	ret

0000356a <vTaskStartScheduler>:
    356a:	af 92       	push	r10
    356c:	bf 92       	push	r11
    356e:	cf 92       	push	r12
    3570:	df 92       	push	r13
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	a1 2c       	mov	r10, r1
    357a:	b1 2c       	mov	r11, r1
    357c:	c1 2c       	mov	r12, r1
    357e:	d1 2c       	mov	r13, r1
    3580:	0f 2e       	mov	r0, r31
    3582:	fb e3       	ldi	r31, 0x3B	; 59
    3584:	ef 2e       	mov	r14, r31
    3586:	f1 e3       	ldi	r31, 0x31	; 49
    3588:	ff 2e       	mov	r15, r31
    358a:	f0 2d       	mov	r31, r0
    358c:	00 e0       	ldi	r16, 0x00	; 0
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	44 e6       	ldi	r20, 0x64	; 100
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	68 ed       	ldi	r22, 0xD8	; 216
    3598:	70 e2       	ldi	r23, 0x20	; 32
    359a:	8f e4       	ldi	r24, 0x4F	; 79
    359c:	99 e1       	ldi	r25, 0x19	; 25
    359e:	0e 94 a5 19 	call	0x334a	; 0x334a <xTaskGenericCreate>
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	69 f4       	brne	.+26     	; 0x35c0 <vTaskStartScheduler+0x56>
    35a6:	f8 94       	cli
    35a8:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <xSchedulerRunning>
    35ac:	10 92 36 31 	sts	0x3136, r1	; 0x803136 <xTickCount>
    35b0:	10 92 37 31 	sts	0x3137, r1	; 0x803137 <xTickCount+0x1>
    35b4:	10 92 38 31 	sts	0x3138, r1	; 0x803138 <xTickCount+0x2>
    35b8:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <xTickCount+0x3>
    35bc:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xPortStartScheduler>
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	08 95       	ret

000035d0 <vTaskSuspendAll>:
    35d0:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    35d4:	8f 5f       	subi	r24, 0xFF	; 255
    35d6:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>
    35da:	08 95       	ret

000035dc <xTaskGetTickCount>:
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	0f 92       	push	r0
    35e2:	60 91 36 31 	lds	r22, 0x3136	; 0x803136 <xTickCount>
    35e6:	70 91 37 31 	lds	r23, 0x3137	; 0x803137 <xTickCount+0x1>
    35ea:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount+0x2>
    35ee:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x3>
    35f2:	0f 90       	pop	r0
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	08 95       	ret

000035f8 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	21 f4       	brne	.+8      	; 0x3604 <pcTaskGetTaskName+0xc>
    35fc:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3600:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    3604:	4d 96       	adiw	r24, 0x1d	; 29
    3606:	08 95       	ret

00003608 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    3608:	80 91 3b 31 	lds	r24, 0x313B	; 0x80313b <xIdleTaskHandle>
    360c:	90 91 3c 31 	lds	r25, 0x313C	; 0x80313c <xIdleTaskHandle+0x1>
    3610:	08 95       	ret

00003612 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    361c:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3620:	81 11       	cpse	r24, r1
    3622:	ed c0       	rjmp	.+474    	; 0x37fe <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    3624:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3628:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    362c:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3630:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	a1 1d       	adc	r26, r1
    3638:	b1 1d       	adc	r27, r1
    363a:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <xTickCount>
    363e:	90 93 37 31 	sts	0x3137, r25	; 0x803137 <xTickCount+0x1>
    3642:	a0 93 38 31 	sts	0x3138, r26	; 0x803138 <xTickCount+0x2>
    3646:	b0 93 39 31 	sts	0x3139, r27	; 0x803139 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    364a:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    364e:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3652:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3656:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    365a:	89 2b       	or	r24, r25
    365c:	8a 2b       	or	r24, r26
    365e:	8b 2b       	or	r24, r27
    3660:	f1 f5       	brne	.+124    	; 0x36de <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3662:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    3666:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    366a:	20 91 48 31 	lds	r18, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    366e:	30 91 49 31 	lds	r19, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    3672:	20 93 4a 31 	sts	0x314A, r18	; 0x80314a <pxDelayedTaskList>
    3676:	30 93 4b 31 	sts	0x314B, r19	; 0x80314b <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    367a:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    367e:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    3682:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    3686:	8f 5f       	subi	r24, 0xFF	; 255
    3688:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    368c:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3690:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3694:	80 81       	ld	r24, Z
    3696:	81 11       	cpse	r24, r1
    3698:	0c c0       	rjmp	.+24     	; 0x36b2 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    369a:	8f ef       	ldi	r24, 0xFF	; 255
    369c:	9f ef       	ldi	r25, 0xFF	; 255
    369e:	dc 01       	movw	r26, r24
    36a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    36a4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    36a8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    36ac:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    36b0:	16 c0       	rjmp	.+44     	; 0x36de <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    36b2:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    36b6:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    36ba:	07 80       	ldd	r0, Z+7	; 0x07
    36bc:	f0 85       	ldd	r31, Z+8	; 0x08
    36be:	e0 2d       	mov	r30, r0
    36c0:	00 84       	ldd	r0, Z+8	; 0x08
    36c2:	f1 85       	ldd	r31, Z+9	; 0x09
    36c4:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	a4 81       	ldd	r26, Z+4	; 0x04
    36cc:	b5 81       	ldd	r27, Z+5	; 0x05
    36ce:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    36d2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    36d6:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    36da:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    36de:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    36e2:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    36e6:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    36ea:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    36ee:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    36f2:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    36f6:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    36fa:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    36fe:	48 17       	cp	r20, r24
    3700:	59 07       	cpc	r21, r25
    3702:	6a 07       	cpc	r22, r26
    3704:	7b 07       	cpc	r23, r27
    3706:	08 f4       	brcc	.+2      	; 0x370a <vTaskIncrementTick+0xf8>
    3708:	7f c0       	rjmp	.+254    	; 0x3808 <vTaskIncrementTick+0x1f6>
    370a:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    370e:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3712:	80 81       	ld	r24, Z
    3714:	88 23       	and	r24, r24
    3716:	f9 f0       	breq	.+62     	; 0x3756 <vTaskIncrementTick+0x144>
    3718:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    371c:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3720:	07 80       	ldd	r0, Z+7	; 0x07
    3722:	f0 85       	ldd	r31, Z+8	; 0x08
    3724:	e0 2d       	mov	r30, r0
    3726:	c0 85       	ldd	r28, Z+8	; 0x08
    3728:	d1 85       	ldd	r29, Z+9	; 0x09
    372a:	8a 81       	ldd	r24, Y+2	; 0x02
    372c:	9b 81       	ldd	r25, Y+3	; 0x03
    372e:	ac 81       	ldd	r26, Y+4	; 0x04
    3730:	bd 81       	ldd	r27, Y+5	; 0x05
    3732:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3736:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    373a:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    373e:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3742:	48 17       	cp	r20, r24
    3744:	59 07       	cpc	r21, r25
    3746:	6a 07       	cpc	r22, r26
    3748:	7b 07       	cpc	r23, r27
    374a:	58 f1       	brcs	.+86     	; 0x37a2 <vTaskIncrementTick+0x190>
    374c:	0f 2e       	mov	r0, r31
    374e:	fb e0       	ldi	r31, 0x0B	; 11
    3750:	ff 2e       	mov	r15, r31
    3752:	f0 2d       	mov	r31, r0
    3754:	2f c0       	rjmp	.+94     	; 0x37b4 <vTaskIncrementTick+0x1a2>
    3756:	8f ef       	ldi	r24, 0xFF	; 255
    3758:	9f ef       	ldi	r25, 0xFF	; 255
    375a:	dc 01       	movw	r26, r24
    375c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3760:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3764:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3768:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    376c:	4d c0       	rjmp	.+154    	; 0x3808 <vTaskIncrementTick+0x1f6>
    376e:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3772:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3776:	07 80       	ldd	r0, Z+7	; 0x07
    3778:	f0 85       	ldd	r31, Z+8	; 0x08
    377a:	e0 2d       	mov	r30, r0
    377c:	c0 85       	ldd	r28, Z+8	; 0x08
    377e:	d1 85       	ldd	r29, Z+9	; 0x09
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	9b 81       	ldd	r25, Y+3	; 0x03
    3784:	ac 81       	ldd	r26, Y+4	; 0x04
    3786:	bd 81       	ldd	r27, Y+5	; 0x05
    3788:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    378c:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3790:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3794:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3798:	48 17       	cp	r20, r24
    379a:	59 07       	cpc	r21, r25
    379c:	6a 07       	cpc	r22, r26
    379e:	7b 07       	cpc	r23, r27
    37a0:	48 f4       	brcc	.+18     	; 0x37b4 <vTaskIncrementTick+0x1a2>
    37a2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    37a6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    37aa:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    37ae:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    37b2:	2a c0       	rjmp	.+84     	; 0x3808 <vTaskIncrementTick+0x1f6>
    37b4:	8e 01       	movw	r16, r28
    37b6:	0e 5f       	subi	r16, 0xFE	; 254
    37b8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ba:	c8 01       	movw	r24, r16
    37bc:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
    37c0:	88 8d       	ldd	r24, Y+24	; 0x18
    37c2:	99 8d       	ldd	r25, Y+25	; 0x19
    37c4:	89 2b       	or	r24, r25
    37c6:	21 f0       	breq	.+8      	; 0x37d0 <vTaskIncrementTick+0x1be>
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 96       	adiw	r24, 0x0e	; 14
    37cc:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
    37d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37d2:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    37d6:	98 17       	cp	r25, r24
    37d8:	10 f4       	brcc	.+4      	; 0x37de <vTaskIncrementTick+0x1cc>
    37da:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    37de:	f8 9e       	mul	r15, r24
    37e0:	c0 01       	movw	r24, r0
    37e2:	11 24       	eor	r1, r1
    37e4:	b8 01       	movw	r22, r16
    37e6:	8e 59       	subi	r24, 0x9E	; 158
    37e8:	9e 4c       	sbci	r25, 0xCE	; 206
    37ea:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
    37ee:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    37f2:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    37f6:	80 81       	ld	r24, Z
    37f8:	81 11       	cpse	r24, r1
    37fa:	b9 cf       	rjmp	.-142    	; 0x376e <vTaskIncrementTick+0x15c>
    37fc:	ac cf       	rjmp	.-168    	; 0x3756 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    37fe:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3802:	8f 5f       	subi	r24, 0xFF	; 255
    3804:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	ff 90       	pop	r15
    3812:	08 95       	ret

00003814 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3814:	cf 92       	push	r12
    3816:	df 92       	push	r13
    3818:	ef 92       	push	r14
    381a:	ff 92       	push	r15
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    382a:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    382e:	81 50       	subi	r24, 0x01	; 1
    3830:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3834:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3838:	81 11       	cpse	r24, r1
    383a:	60 c0       	rjmp	.+192    	; 0x38fc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    383c:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    3840:	81 11       	cpse	r24, r1
    3842:	2c c0       	rjmp	.+88     	; 0x389c <xTaskResumeAll+0x88>
    3844:	5e c0       	rjmp	.+188    	; 0x3902 <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3846:	d7 01       	movw	r26, r14
    3848:	17 96       	adiw	r26, 0x07	; 7
    384a:	ed 91       	ld	r30, X+
    384c:	fc 91       	ld	r31, X
    384e:	18 97       	sbiw	r26, 0x08	; 8
    3850:	c0 85       	ldd	r28, Z+8	; 0x08
    3852:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    3854:	ce 01       	movw	r24, r28
    3856:	0e 96       	adiw	r24, 0x0e	; 14
    3858:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    385c:	8e 01       	movw	r16, r28
    385e:	0e 5f       	subi	r16, 0xFE	; 254
    3860:	1f 4f       	sbci	r17, 0xFF	; 255
    3862:	c8 01       	movw	r24, r16
    3864:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3868:	8a 8d       	ldd	r24, Y+26	; 0x1a
    386a:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    386e:	98 17       	cp	r25, r24
    3870:	10 f4       	brcc	.+4      	; 0x3876 <xTaskResumeAll+0x62>
    3872:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3876:	d8 9e       	mul	r13, r24
    3878:	c0 01       	movw	r24, r0
    387a:	11 24       	eor	r1, r1
    387c:	b8 01       	movw	r22, r16
    387e:	8e 59       	subi	r24, 0x9E	; 158
    3880:	9e 4c       	sbci	r25, 0xCE	; 206
    3882:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3886:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    388a:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    388e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3890:	82 8d       	ldd	r24, Z+26	; 0x1a
    3892:	98 17       	cp	r25, r24
    3894:	70 f0       	brcs	.+28     	; 0x38b2 <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3896:	cc 24       	eor	r12, r12
    3898:	c3 94       	inc	r12
    389a:	0b c0       	rjmp	.+22     	; 0x38b2 <xTaskResumeAll+0x9e>
    389c:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    389e:	0f 2e       	mov	r0, r31
    38a0:	fd e3       	ldi	r31, 0x3D	; 61
    38a2:	ef 2e       	mov	r14, r31
    38a4:	f1 e3       	ldi	r31, 0x31	; 49
    38a6:	ff 2e       	mov	r15, r31
    38a8:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    38aa:	0f 2e       	mov	r0, r31
    38ac:	fb e0       	ldi	r31, 0x0B	; 11
    38ae:	df 2e       	mov	r13, r31
    38b0:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    38b2:	f7 01       	movw	r30, r14
    38b4:	80 81       	ld	r24, Z
    38b6:	81 11       	cpse	r24, r1
    38b8:	c6 cf       	rjmp	.-116    	; 0x3846 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    38ba:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    38be:	88 23       	and	r24, r24
    38c0:	81 f0       	breq	.+32     	; 0x38e2 <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    38c2:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    38c6:	88 23       	and	r24, r24
    38c8:	99 f0       	breq	.+38     	; 0x38f0 <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    38ca:	0e 94 09 1b 	call	0x3612	; 0x3612 <vTaskIncrementTick>
						--uxMissedTicks;
    38ce:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    38d2:	81 50       	subi	r24, 0x01	; 1
    38d4:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    38d8:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    38dc:	81 11       	cpse	r24, r1
    38de:	f5 cf       	rjmp	.-22     	; 0x38ca <xTaskResumeAll+0xb6>
    38e0:	07 c0       	rjmp	.+14     	; 0x38f0 <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    38e2:	f1 e0       	ldi	r31, 0x01	; 1
    38e4:	cf 16       	cp	r12, r31
    38e6:	21 f0       	breq	.+8      	; 0x38f0 <xTaskResumeAll+0xdc>
    38e8:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xMissedYield>
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	41 f4       	brne	.+16     	; 0x3900 <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    38f0:	10 92 30 31 	sts	0x3130, r1	; 0x803130 <xMissedYield>
					portYIELD_WITHIN_API();
    38f4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <xTaskResumeAll+0xee>
    3900:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3902:	0f 90       	pop	r0
    3904:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	08 95       	ret

00003918 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3918:	cf 92       	push	r12
    391a:	df 92       	push	r13
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	ec 01       	movw	r28, r24
    3926:	6a 01       	movw	r12, r20
    3928:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    392a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    392e:	88 81       	ld	r24, Y
    3930:	99 81       	ldd	r25, Y+1	; 0x01
    3932:	aa 81       	ldd	r26, Y+2	; 0x02
    3934:	bb 81       	ldd	r27, Y+3	; 0x03
    3936:	c8 0e       	add	r12, r24
    3938:	d9 1e       	adc	r13, r25
    393a:	ea 1e       	adc	r14, r26
    393c:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    393e:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3942:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3946:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    394a:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    394e:	48 17       	cp	r20, r24
    3950:	59 07       	cpc	r21, r25
    3952:	6a 07       	cpc	r22, r26
    3954:	7b 07       	cpc	r23, r27
    3956:	b8 f4       	brcc	.+46     	; 0x3986 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3958:	c8 16       	cp	r12, r24
    395a:	d9 06       	cpc	r13, r25
    395c:	ea 06       	cpc	r14, r26
    395e:	fb 06       	cpc	r15, r27
    3960:	e0 f5       	brcc	.+120    	; 0x39da <vTaskDelayUntil+0xc2>
    3962:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3966:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    396a:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    396e:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3972:	c8 82       	st	Y, r12
    3974:	d9 82       	std	Y+1, r13	; 0x01
    3976:	ea 82       	std	Y+2, r14	; 0x02
    3978:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    397a:	8c 15       	cp	r24, r12
    397c:	9d 05       	cpc	r25, r13
    397e:	ae 05       	cpc	r26, r14
    3980:	bf 05       	cpc	r27, r15
    3982:	f8 f4       	brcc	.+62     	; 0x39c2 <vTaskDelayUntil+0xaa>
    3984:	13 c0       	rjmp	.+38     	; 0x39ac <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3986:	c8 16       	cp	r12, r24
    3988:	d9 06       	cpc	r13, r25
    398a:	ea 06       	cpc	r14, r26
    398c:	fb 06       	cpc	r15, r27
    398e:	00 f1       	brcs	.+64     	; 0x39d0 <vTaskDelayUntil+0xb8>
    3990:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3994:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3998:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    399c:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    39a0:	8c 15       	cp	r24, r12
    39a2:	9d 05       	cpc	r25, r13
    39a4:	ae 05       	cpc	r26, r14
    39a6:	bf 05       	cpc	r27, r15
    39a8:	98 f0       	brcs	.+38     	; 0x39d0 <vTaskDelayUntil+0xb8>
    39aa:	17 c0       	rjmp	.+46     	; 0x39da <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39ac:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    39b0:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    39b4:	02 96       	adiw	r24, 0x02	; 2
    39b6:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    39ba:	c7 01       	movw	r24, r14
    39bc:	b6 01       	movw	r22, r12
    39be:	0e 94 57 19 	call	0x32ae	; 0x32ae <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    39c2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39c6:	81 11       	cpse	r24, r1
    39c8:	0d c0       	rjmp	.+26     	; 0x39e4 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    39ca:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
		}
	}
    39ce:	0a c0       	rjmp	.+20     	; 0x39e4 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    39d0:	c8 82       	st	Y, r12
    39d2:	d9 82       	std	Y+1, r13	; 0x01
    39d4:	ea 82       	std	Y+2, r14	; 0x02
    39d6:	fb 82       	std	Y+3, r15	; 0x03
    39d8:	e9 cf       	rjmp	.-46     	; 0x39ac <vTaskDelayUntil+0x94>
    39da:	c8 82       	st	Y, r12
    39dc:	d9 82       	std	Y+1, r13	; 0x01
    39de:	ea 82       	std	Y+2, r14	; 0x02
    39e0:	fb 82       	std	Y+3, r15	; 0x03
    39e2:	ef cf       	rjmp	.-34     	; 0x39c2 <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	df 90       	pop	r13
    39ee:	cf 90       	pop	r12
    39f0:	08 95       	ret

000039f2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    39f2:	cf 92       	push	r12
    39f4:	df 92       	push	r13
    39f6:	ef 92       	push	r14
    39f8:	ff 92       	push	r15
    39fa:	6b 01       	movw	r12, r22
    39fc:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    39fe:	67 2b       	or	r22, r23
    3a00:	68 2b       	or	r22, r24
    3a02:	69 2b       	or	r22, r25
    3a04:	e9 f0       	breq	.+58     	; 0x3a40 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3a06:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3a0a:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3a0e:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3a12:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3a16:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3a1a:	c8 0e       	add	r12, r24
    3a1c:	d9 1e       	adc	r13, r25
    3a1e:	ea 1e       	adc	r14, r26
    3a20:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3a22:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3a26:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3a2a:	02 96       	adiw	r24, 0x02	; 2
    3a2c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a30:	c7 01       	movw	r24, r14
    3a32:	b6 01       	movw	r22, r12
    3a34:	0e 94 57 19 	call	0x32ae	; 0x32ae <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3a38:	0e 94 0a 1c 	call	0x3814	; 0x3814 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a3c:	81 11       	cpse	r24, r1
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3a40:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vPortYield>
		}
	}
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	df 90       	pop	r13
    3a4a:	cf 90       	pop	r12
    3a4c:	08 95       	ret

00003a4e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3a4e:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3a52:	81 11       	cpse	r24, r1
    3a54:	0c c0       	rjmp	.+24     	; 0x3a6e <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3a56:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3a5a:	4b e0       	ldi	r20, 0x0B	; 11
    3a5c:	e4 9f       	mul	r30, r20
    3a5e:	f0 01       	movw	r30, r0
    3a60:	11 24       	eor	r1, r1
    3a62:	ee 59       	subi	r30, 0x9E	; 158
    3a64:	fe 4c       	sbci	r31, 0xCE	; 206
    3a66:	80 81       	ld	r24, Z
    3a68:	88 23       	and	r24, r24
    3a6a:	29 f0       	breq	.+10     	; 0x3a76 <vTaskSwitchContext+0x28>
    3a6c:	14 c0       	rjmp	.+40     	; 0x3a96 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    3a74:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3a76:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3a78:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3a7c:	81 50       	subi	r24, 0x01	; 1
    3a7e:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3a82:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3a86:	9e 9f       	mul	r25, r30
    3a88:	f0 01       	movw	r30, r0
    3a8a:	11 24       	eor	r1, r1
    3a8c:	ee 59       	subi	r30, 0x9E	; 158
    3a8e:	fe 4c       	sbci	r31, 0xCE	; 206
    3a90:	80 81       	ld	r24, Z
    3a92:	88 23       	and	r24, r24
    3a94:	89 f3       	breq	.-30     	; 0x3a78 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3a96:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	4b e0       	ldi	r20, 0x0B	; 11
    3aa0:	84 9f       	mul	r24, r20
    3aa2:	c0 01       	movw	r24, r0
    3aa4:	11 24       	eor	r1, r1
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	ae 59       	subi	r26, 0x9E	; 158
    3aaa:	be 4c       	sbci	r27, 0xCE	; 206
    3aac:	11 96       	adiw	r26, 0x01	; 1
    3aae:	ed 91       	ld	r30, X+
    3ab0:	fc 91       	ld	r31, X
    3ab2:	12 97       	sbiw	r26, 0x02	; 2
    3ab4:	04 80       	ldd	r0, Z+4	; 0x04
    3ab6:	f5 81       	ldd	r31, Z+5	; 0x05
    3ab8:	e0 2d       	mov	r30, r0
    3aba:	11 96       	adiw	r26, 0x01	; 1
    3abc:	ed 93       	st	X+, r30
    3abe:	fc 93       	st	X, r31
    3ac0:	12 97       	sbiw	r26, 0x02	; 2
    3ac2:	8b 59       	subi	r24, 0x9B	; 155
    3ac4:	9e 4c       	sbci	r25, 0xCE	; 206
    3ac6:	e8 17       	cp	r30, r24
    3ac8:	f9 07       	cpc	r31, r25
    3aca:	61 f4       	brne	.+24     	; 0x3ae4 <vTaskSwitchContext+0x96>
    3acc:	84 81       	ldd	r24, Z+4	; 0x04
    3ace:	95 81       	ldd	r25, Z+5	; 0x05
    3ad0:	4b e0       	ldi	r20, 0x0B	; 11
    3ad2:	42 9f       	mul	r20, r18
    3ad4:	f0 01       	movw	r30, r0
    3ad6:	43 9f       	mul	r20, r19
    3ad8:	f0 0d       	add	r31, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	ee 59       	subi	r30, 0x9E	; 158
    3ade:	fe 4c       	sbci	r31, 0xCE	; 206
    3ae0:	81 83       	std	Z+1, r24	; 0x01
    3ae2:	92 83       	std	Z+2, r25	; 0x02
    3ae4:	8b e0       	ldi	r24, 0x0B	; 11
    3ae6:	82 9f       	mul	r24, r18
    3ae8:	f0 01       	movw	r30, r0
    3aea:	83 9f       	mul	r24, r19
    3aec:	f0 0d       	add	r31, r0
    3aee:	11 24       	eor	r1, r1
    3af0:	ee 59       	subi	r30, 0x9E	; 158
    3af2:	fe 4c       	sbci	r31, 0xCE	; 206
    3af4:	01 80       	ldd	r0, Z+1	; 0x01
    3af6:	f2 81       	ldd	r31, Z+2	; 0x02
    3af8:	e0 2d       	mov	r30, r0
    3afa:	80 85       	ldd	r24, Z+8	; 0x08
    3afc:	91 85       	ldd	r25, Z+9	; 0x09
    3afe:	80 93 8e 31 	sts	0x318E, r24	; 0x80318e <pxCurrentTCB>
    3b02:	90 93 8f 31 	sts	0x318F, r25	; 0x80318f <pxCurrentTCB+0x1>
    3b06:	08 95       	ret

00003b08 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3b08:	cf 92       	push	r12
    3b0a:	df 92       	push	r13
    3b0c:	ef 92       	push	r14
    3b0e:	ff 92       	push	r15
    3b10:	6a 01       	movw	r12, r20
    3b12:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3b14:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3b18:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3b1c:	62 5f       	subi	r22, 0xF2	; 242
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3b24:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3b28:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3b2c:	02 96       	adiw	r24, 0x02	; 2
    3b2e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3b32:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3b36:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3b3a:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3b3e:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	6c 0d       	add	r22, r12
    3b48:	7d 1d       	adc	r23, r13
    3b4a:	8e 1d       	adc	r24, r14
    3b4c:	9f 1d       	adc	r25, r15
    3b4e:	0e 94 57 19 	call	0x32ae	; 0x32ae <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3b52:	ff 90       	pop	r15
    3b54:	ef 90       	pop	r14
    3b56:	df 90       	pop	r13
    3b58:	cf 90       	pop	r12
    3b5a:	08 95       	ret

00003b5c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3b64:	dc 01       	movw	r26, r24
    3b66:	17 96       	adiw	r26, 0x07	; 7
    3b68:	ed 91       	ld	r30, X+
    3b6a:	fc 91       	ld	r31, X
    3b6c:	18 97       	sbiw	r26, 0x08	; 8
    3b6e:	c0 85       	ldd	r28, Z+8	; 0x08
    3b70:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3b72:	8e 01       	movw	r16, r28
    3b74:	02 5f       	subi	r16, 0xF2	; 242
    3b76:	1f 4f       	sbci	r17, 0xFF	; 255
    3b78:	c8 01       	movw	r24, r16
    3b7a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3b7e:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3b82:	81 11       	cpse	r24, r1
    3b84:	16 c0       	rjmp	.+44     	; 0x3bb2 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3b86:	0c 50       	subi	r16, 0x0C	; 12
    3b88:	11 09       	sbc	r17, r1
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3b90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b92:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3b96:	98 17       	cp	r25, r24
    3b98:	10 f4       	brcc	.+4      	; 0x3b9e <xTaskRemoveFromEventList+0x42>
    3b9a:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3b9e:	bb e0       	ldi	r27, 0x0B	; 11
    3ba0:	8b 9f       	mul	r24, r27
    3ba2:	c0 01       	movw	r24, r0
    3ba4:	11 24       	eor	r1, r1
    3ba6:	b8 01       	movw	r22, r16
    3ba8:	8e 59       	subi	r24, 0x9E	; 158
    3baa:	9e 4c       	sbci	r25, 0xCE	; 206
    3bac:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
    3bb0:	05 c0       	rjmp	.+10     	; 0x3bbc <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3bb2:	b8 01       	movw	r22, r16
    3bb4:	8d e3       	ldi	r24, 0x3D	; 61
    3bb6:	91 e3       	ldi	r25, 0x31	; 49
    3bb8:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3bbc:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3bc0:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3bc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bca:	29 17       	cp	r18, r25
    3bcc:	08 f4       	brcc	.+2      	; 0x3bd0 <xTaskRemoveFromEventList+0x74>
    3bce:	80 e0       	ldi	r24, 0x00	; 0
}
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	08 95       	ret

00003bda <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3bda:	20 91 2f 31 	lds	r18, 0x312F	; 0x80312f <xNumOfOverflows>
    3bde:	fc 01       	movw	r30, r24
    3be0:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3be2:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3be6:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3bea:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3bee:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3bf2:	41 83       	std	Z+1, r20	; 0x01
    3bf4:	52 83       	std	Z+2, r21	; 0x02
    3bf6:	63 83       	std	Z+3, r22	; 0x03
    3bf8:	74 83       	std	Z+4, r23	; 0x04
    3bfa:	08 95       	ret

00003bfc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3bfc:	8f 92       	push	r8
    3bfe:	9f 92       	push	r9
    3c00:	af 92       	push	r10
    3c02:	bf 92       	push	r11
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3c1c:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    3c20:	90 81       	ld	r25, Z
    3c22:	98 17       	cp	r25, r24
    3c24:	89 f0       	breq	.+34     	; 0x3c48 <xTaskCheckForTimeOut+0x4c>
    3c26:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3c2a:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3c2e:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3c32:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3c36:	01 81       	ldd	r16, Z+1	; 0x01
    3c38:	12 81       	ldd	r17, Z+2	; 0x02
    3c3a:	23 81       	ldd	r18, Z+3	; 0x03
    3c3c:	34 81       	ldd	r19, Z+4	; 0x04
    3c3e:	80 17       	cp	r24, r16
    3c40:	91 07       	cpc	r25, r17
    3c42:	a2 07       	cpc	r26, r18
    3c44:	b3 07       	cpc	r27, r19
    3c46:	a8 f5       	brcc	.+106    	; 0x3cb2 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3c48:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3c4c:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3c50:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3c54:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3c58:	c1 80       	ldd	r12, Z+1	; 0x01
    3c5a:	d2 80       	ldd	r13, Z+2	; 0x02
    3c5c:	e3 80       	ldd	r14, Z+3	; 0x03
    3c5e:	f4 80       	ldd	r15, Z+4	; 0x04
    3c60:	eb 01       	movw	r28, r22
    3c62:	08 81       	ld	r16, Y
    3c64:	19 81       	ldd	r17, Y+1	; 0x01
    3c66:	2a 81       	ldd	r18, Y+2	; 0x02
    3c68:	3b 81       	ldd	r19, Y+3	; 0x03
    3c6a:	8c 19       	sub	r24, r12
    3c6c:	9d 09       	sbc	r25, r13
    3c6e:	ae 09       	sbc	r26, r14
    3c70:	bf 09       	sbc	r27, r15
    3c72:	80 17       	cp	r24, r16
    3c74:	91 07       	cpc	r25, r17
    3c76:	a2 07       	cpc	r26, r18
    3c78:	b3 07       	cpc	r27, r19
    3c7a:	e8 f4       	brcc	.+58     	; 0x3cb6 <xTaskCheckForTimeOut+0xba>
    3c7c:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3c7e:	80 90 36 31 	lds	r8, 0x3136	; 0x803136 <xTickCount>
    3c82:	90 90 37 31 	lds	r9, 0x3137	; 0x803137 <xTickCount+0x1>
    3c86:	a0 90 38 31 	lds	r10, 0x3138	; 0x803138 <xTickCount+0x2>
    3c8a:	b0 90 39 31 	lds	r11, 0x3139	; 0x803139 <xTickCount+0x3>
    3c8e:	b5 01       	movw	r22, r10
    3c90:	a4 01       	movw	r20, r8
    3c92:	4c 19       	sub	r20, r12
    3c94:	5d 09       	sbc	r21, r13
    3c96:	6e 09       	sbc	r22, r14
    3c98:	7f 09       	sbc	r23, r15
    3c9a:	04 1b       	sub	r16, r20
    3c9c:	15 0b       	sbc	r17, r21
    3c9e:	26 0b       	sbc	r18, r22
    3ca0:	37 0b       	sbc	r19, r23
    3ca2:	08 83       	st	Y, r16
    3ca4:	19 83       	std	Y+1, r17	; 0x01
    3ca6:	2a 83       	std	Y+2, r18	; 0x02
    3ca8:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3caa:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	03 c0       	rjmp	.+6      	; 0x3cb8 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3cb8:	0f 90       	pop	r0
    3cba:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	1f 91       	pop	r17
    3cc2:	0f 91       	pop	r16
    3cc4:	ff 90       	pop	r15
    3cc6:	ef 90       	pop	r14
    3cc8:	df 90       	pop	r13
    3cca:	cf 90       	pop	r12
    3ccc:	bf 90       	pop	r11
    3cce:	af 90       	pop	r10
    3cd0:	9f 90       	pop	r9
    3cd2:	8f 90       	pop	r8
    3cd4:	08 95       	ret

00003cd6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    3cdc:	08 95       	ret

00003cde <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	21 f4       	brne	.+8      	; 0x3cea <uxTaskGetStackHighWaterMark+0xc>
    3ce2:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3ce6:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3cea:	dc 01       	movw	r26, r24
    3cec:	5b 96       	adiw	r26, 0x1b	; 27
    3cee:	ed 91       	ld	r30, X+
    3cf0:	fc 91       	ld	r31, X
    3cf2:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3cf4:	80 81       	ld	r24, Z
    3cf6:	81 31       	cpi	r24, 0x11	; 17
    3cf8:	41 f4       	brne	.+16     	; 0x3d0a <uxTaskGetStackHighWaterMark+0x2c>
    3cfa:	31 96       	adiw	r30, 0x01	; 1
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3d00:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3d02:	21 91       	ld	r18, Z+
    3d04:	21 31       	cpi	r18, 0x11	; 17
    3d06:	e1 f3       	breq	.-8      	; 0x3d00 <uxTaskGetStackHighWaterMark+0x22>
    3d08:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3d0e:	08 95       	ret

00003d10 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3d10:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3d14:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		return xReturn;
	}
    3d18:	08 95       	ret

00003d1a <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3d24:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d26:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3d2a:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d2e:	5a 96       	adiw	r26, 0x1a	; 26
    3d30:	8c 91       	ld	r24, X
    3d32:	28 17       	cp	r18, r24
    3d34:	08 f0       	brcs	.+2      	; 0x3d38 <vTaskPriorityInherit+0x1e>
    3d36:	41 c0       	rjmp	.+130    	; 0x3dba <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3d38:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3d3c:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d40:	5a 96       	adiw	r26, 0x1a	; 26
    3d42:	3c 91       	ld	r19, X
    3d44:	84 e0       	ldi	r24, 0x04	; 4
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	a0 e0       	ldi	r26, 0x00	; 0
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	83 1b       	sub	r24, r19
    3d4e:	91 09       	sbc	r25, r1
    3d50:	a1 09       	sbc	r26, r1
    3d52:	b1 09       	sbc	r27, r1
    3d54:	86 87       	std	Z+14, r24	; 0x0e
    3d56:	97 87       	std	Z+15, r25	; 0x0f
    3d58:	a0 8b       	std	Z+16, r26	; 0x10
    3d5a:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3d5c:	8b e0       	ldi	r24, 0x0B	; 11
    3d5e:	28 9f       	mul	r18, r24
    3d60:	90 01       	movw	r18, r0
    3d62:	11 24       	eor	r1, r1
    3d64:	2e 59       	subi	r18, 0x9E	; 158
    3d66:	3e 4c       	sbci	r19, 0xCE	; 206
    3d68:	84 85       	ldd	r24, Z+12	; 0x0c
    3d6a:	95 85       	ldd	r25, Z+13	; 0x0d
    3d6c:	82 17       	cp	r24, r18
    3d6e:	93 07       	cpc	r25, r19
    3d70:	e9 f4       	brne	.+58     	; 0x3dac <vTaskPriorityInherit+0x92>
    3d72:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3d74:	ef 01       	movw	r28, r30
    3d76:	22 96       	adiw	r28, 0x02	; 2
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3d7e:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3d82:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d86:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d88:	f8 01       	movw	r30, r16
    3d8a:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3d8c:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3d90:	98 17       	cp	r25, r24
    3d92:	10 f4       	brcc	.+4      	; 0x3d98 <vTaskPriorityInherit+0x7e>
    3d94:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3d98:	fb e0       	ldi	r31, 0x0B	; 11
    3d9a:	8f 9f       	mul	r24, r31
    3d9c:	c0 01       	movw	r24, r0
    3d9e:	11 24       	eor	r1, r1
    3da0:	be 01       	movw	r22, r28
    3da2:	8e 59       	subi	r24, 0x9E	; 158
    3da4:	9e 4c       	sbci	r25, 0xCE	; 206
    3da6:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
    3daa:	07 c0       	rjmp	.+14     	; 0x3dba <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3dac:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3db0:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3db4:	5a 96       	adiw	r26, 0x1a	; 26
    3db6:	8c 91       	ld	r24, X
    3db8:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	08 95       	ret

00003dc4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	49 f1       	breq	.+82     	; 0x3e22 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	32 8d       	ldd	r19, Z+26	; 0x1a
    3dd4:	27 a1       	ldd	r18, Z+39	; 0x27
    3dd6:	32 17       	cp	r19, r18
    3dd8:	21 f1       	breq	.+72     	; 0x3e22 <vTaskPriorityDisinherit+0x5e>
    3dda:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3ddc:	8c 01       	movw	r16, r24
    3dde:	0e 5f       	subi	r16, 0xFE	; 254
    3de0:	1f 4f       	sbci	r17, 0xFF	; 255
    3de2:	c8 01       	movw	r24, r16
    3de4:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3de8:	8f a1       	ldd	r24, Y+39	; 0x27
    3dea:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3dec:	44 e0       	ldi	r20, 0x04	; 4
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	48 1b       	sub	r20, r24
    3df6:	51 09       	sbc	r21, r1
    3df8:	61 09       	sbc	r22, r1
    3dfa:	71 09       	sbc	r23, r1
    3dfc:	4e 87       	std	Y+14, r20	; 0x0e
    3dfe:	5f 87       	std	Y+15, r21	; 0x0f
    3e00:	68 8b       	std	Y+16, r22	; 0x10
    3e02:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3e04:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e08:	98 17       	cp	r25, r24
    3e0a:	10 f4       	brcc	.+4      	; 0x3e10 <vTaskPriorityDisinherit+0x4c>
    3e0c:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3e10:	fb e0       	ldi	r31, 0x0B	; 11
    3e12:	8f 9f       	mul	r24, r31
    3e14:	c0 01       	movw	r24, r0
    3e16:	11 24       	eor	r1, r1
    3e18:	b8 01       	movw	r22, r16
    3e1a:	8e 59       	subi	r24, 0x9E	; 158
    3e1c:	9e 4c       	sbci	r25, 0xCE	; 206
    3e1e:	0e 94 bb 14 	call	0x2976	; 0x2976 <vListInsertEnd>
			}
		}
	}
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	1f 91       	pop	r17
    3e28:	0f 91       	pop	r16
    3e2a:	08 95       	ret

00003e2c <__divmodsi4>:
    3e2c:	05 2e       	mov	r0, r21
    3e2e:	97 fb       	bst	r25, 7
    3e30:	1e f4       	brtc	.+6      	; 0x3e38 <__divmodsi4+0xc>
    3e32:	00 94       	com	r0
    3e34:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__negsi2>
    3e38:	57 fd       	sbrc	r21, 7
    3e3a:	07 d0       	rcall	.+14     	; 0x3e4a <__divmodsi4_neg2>
    3e3c:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__udivmodsi4>
    3e40:	07 fc       	sbrc	r0, 7
    3e42:	03 d0       	rcall	.+6      	; 0x3e4a <__divmodsi4_neg2>
    3e44:	4e f4       	brtc	.+18     	; 0x3e58 <__divmodsi4_exit>
    3e46:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__negsi2>

00003e4a <__divmodsi4_neg2>:
    3e4a:	50 95       	com	r21
    3e4c:	40 95       	com	r20
    3e4e:	30 95       	com	r19
    3e50:	21 95       	neg	r18
    3e52:	3f 4f       	sbci	r19, 0xFF	; 255
    3e54:	4f 4f       	sbci	r20, 0xFF	; 255
    3e56:	5f 4f       	sbci	r21, 0xFF	; 255

00003e58 <__divmodsi4_exit>:
    3e58:	08 95       	ret

00003e5a <__negsi2>:
    3e5a:	90 95       	com	r25
    3e5c:	80 95       	com	r24
    3e5e:	70 95       	com	r23
    3e60:	61 95       	neg	r22
    3e62:	7f 4f       	sbci	r23, 0xFF	; 255
    3e64:	8f 4f       	sbci	r24, 0xFF	; 255
    3e66:	9f 4f       	sbci	r25, 0xFF	; 255
    3e68:	08 95       	ret

00003e6a <__udivmodsi4>:
    3e6a:	a1 e2       	ldi	r26, 0x21	; 33
    3e6c:	1a 2e       	mov	r1, r26
    3e6e:	aa 1b       	sub	r26, r26
    3e70:	bb 1b       	sub	r27, r27
    3e72:	fd 01       	movw	r30, r26
    3e74:	0d c0       	rjmp	.+26     	; 0x3e90 <__udivmodsi4_ep>

00003e76 <__udivmodsi4_loop>:
    3e76:	aa 1f       	adc	r26, r26
    3e78:	bb 1f       	adc	r27, r27
    3e7a:	ee 1f       	adc	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	a2 17       	cp	r26, r18
    3e80:	b3 07       	cpc	r27, r19
    3e82:	e4 07       	cpc	r30, r20
    3e84:	f5 07       	cpc	r31, r21
    3e86:	20 f0       	brcs	.+8      	; 0x3e90 <__udivmodsi4_ep>
    3e88:	a2 1b       	sub	r26, r18
    3e8a:	b3 0b       	sbc	r27, r19
    3e8c:	e4 0b       	sbc	r30, r20
    3e8e:	f5 0b       	sbc	r31, r21

00003e90 <__udivmodsi4_ep>:
    3e90:	66 1f       	adc	r22, r22
    3e92:	77 1f       	adc	r23, r23
    3e94:	88 1f       	adc	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	1a 94       	dec	r1
    3e9a:	69 f7       	brne	.-38     	; 0x3e76 <__udivmodsi4_loop>
    3e9c:	60 95       	com	r22
    3e9e:	70 95       	com	r23
    3ea0:	80 95       	com	r24
    3ea2:	90 95       	com	r25
    3ea4:	9b 01       	movw	r18, r22
    3ea6:	ac 01       	movw	r20, r24
    3ea8:	bd 01       	movw	r22, r26
    3eaa:	cf 01       	movw	r24, r30
    3eac:	08 95       	ret

00003eae <memcpy>:
    3eae:	fb 01       	movw	r30, r22
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <memcpy+0xa>
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	0d 92       	st	X+, r0
    3eb8:	41 50       	subi	r20, 0x01	; 1
    3eba:	50 40       	sbci	r21, 0x00	; 0
    3ebc:	d8 f7       	brcc	.-10     	; 0x3eb4 <memcpy+0x6>
    3ebe:	08 95       	ret

00003ec0 <memset>:
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <memset+0x6>
    3ec4:	6d 93       	st	X+, r22
    3ec6:	41 50       	subi	r20, 0x01	; 1
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	e0 f7       	brcc	.-8      	; 0x3ec4 <memset+0x4>
    3ecc:	08 95       	ret

00003ece <strncpy>:
    3ece:	fb 01       	movw	r30, r22
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	41 50       	subi	r20, 0x01	; 1
    3ed4:	50 40       	sbci	r21, 0x00	; 0
    3ed6:	48 f0       	brcs	.+18     	; 0x3eea <strncpy+0x1c>
    3ed8:	01 90       	ld	r0, Z+
    3eda:	0d 92       	st	X+, r0
    3edc:	00 20       	and	r0, r0
    3ede:	c9 f7       	brne	.-14     	; 0x3ed2 <strncpy+0x4>
    3ee0:	01 c0       	rjmp	.+2      	; 0x3ee4 <strncpy+0x16>
    3ee2:	1d 92       	st	X+, r1
    3ee4:	41 50       	subi	r20, 0x01	; 1
    3ee6:	50 40       	sbci	r21, 0x00	; 0
    3ee8:	e0 f7       	brcc	.-8      	; 0x3ee2 <strncpy+0x14>
    3eea:	08 95       	ret

00003eec <ultoa>:
    3eec:	25 32       	cpi	r18, 0x25	; 37
    3eee:	31 05       	cpc	r19, r1
    3ef0:	20 f4       	brcc	.+8      	; 0x3efa <ultoa+0xe>
    3ef2:	22 30       	cpi	r18, 0x02	; 2
    3ef4:	10 f0       	brcs	.+4      	; 0x3efa <ultoa+0xe>
    3ef6:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__ultoa_ncheck>
    3efa:	fa 01       	movw	r30, r20
    3efc:	10 82       	st	Z, r1
    3efe:	ca 01       	movw	r24, r20
    3f00:	08 95       	ret

00003f02 <__ultoa_ncheck>:
    3f02:	bb 27       	eor	r27, r27

00003f04 <__ultoa_common>:
    3f04:	fa 01       	movw	r30, r20
    3f06:	a6 2f       	mov	r26, r22
    3f08:	62 17       	cp	r22, r18
    3f0a:	71 05       	cpc	r23, r1
    3f0c:	81 05       	cpc	r24, r1
    3f0e:	91 05       	cpc	r25, r1
    3f10:	33 0b       	sbc	r19, r19
    3f12:	30 fb       	bst	r19, 0
    3f14:	66 f0       	brts	.+24     	; 0x3f2e <__ultoa_common+0x2a>
    3f16:	aa 27       	eor	r26, r26
    3f18:	66 0f       	add	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	aa 1f       	adc	r26, r26
    3f22:	a2 17       	cp	r26, r18
    3f24:	10 f0       	brcs	.+4      	; 0x3f2a <__ultoa_common+0x26>
    3f26:	a2 1b       	sub	r26, r18
    3f28:	63 95       	inc	r22
    3f2a:	38 50       	subi	r19, 0x08	; 8
    3f2c:	a9 f7       	brne	.-22     	; 0x3f18 <__ultoa_common+0x14>
    3f2e:	a0 5d       	subi	r26, 0xD0	; 208
    3f30:	aa 33       	cpi	r26, 0x3A	; 58
    3f32:	08 f0       	brcs	.+2      	; 0x3f36 <__ultoa_common+0x32>
    3f34:	a9 5d       	subi	r26, 0xD9	; 217
    3f36:	a1 93       	st	Z+, r26
    3f38:	36 f7       	brtc	.-52     	; 0x3f06 <__ultoa_common+0x2>
    3f3a:	b1 11       	cpse	r27, r1
    3f3c:	b1 93       	st	Z+, r27
    3f3e:	10 82       	st	Z, r1
    3f40:	ca 01       	movw	r24, r20
    3f42:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <strrev>

00003f46 <utoa>:
    3f46:	45 32       	cpi	r20, 0x25	; 37
    3f48:	51 05       	cpc	r21, r1
    3f4a:	20 f4       	brcc	.+8      	; 0x3f54 <utoa+0xe>
    3f4c:	42 30       	cpi	r20, 0x02	; 2
    3f4e:	10 f0       	brcs	.+4      	; 0x3f54 <utoa+0xe>
    3f50:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__utoa_ncheck>
    3f54:	fb 01       	movw	r30, r22
    3f56:	10 82       	st	Z, r1
    3f58:	cb 01       	movw	r24, r22
    3f5a:	08 95       	ret

00003f5c <__utoa_ncheck>:
    3f5c:	bb 27       	eor	r27, r27

00003f5e <__utoa_common>:
    3f5e:	fb 01       	movw	r30, r22
    3f60:	55 27       	eor	r21, r21
    3f62:	aa 27       	eor	r26, r26
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	aa 1f       	adc	r26, r26
    3f6a:	a4 17       	cp	r26, r20
    3f6c:	10 f0       	brcs	.+4      	; 0x3f72 <__utoa_common+0x14>
    3f6e:	a4 1b       	sub	r26, r20
    3f70:	83 95       	inc	r24
    3f72:	50 51       	subi	r21, 0x10	; 16
    3f74:	b9 f7       	brne	.-18     	; 0x3f64 <__utoa_common+0x6>
    3f76:	a0 5d       	subi	r26, 0xD0	; 208
    3f78:	aa 33       	cpi	r26, 0x3A	; 58
    3f7a:	08 f0       	brcs	.+2      	; 0x3f7e <__utoa_common+0x20>
    3f7c:	a9 5d       	subi	r26, 0xD9	; 217
    3f7e:	a1 93       	st	Z+, r26
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	79 f7       	brne	.-34     	; 0x3f62 <__utoa_common+0x4>
    3f84:	b1 11       	cpse	r27, r1
    3f86:	b1 93       	st	Z+, r27
    3f88:	11 92       	st	Z+, r1
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <strrev>

00003f90 <strrev>:
    3f90:	dc 01       	movw	r26, r24
    3f92:	fc 01       	movw	r30, r24
    3f94:	67 2f       	mov	r22, r23
    3f96:	71 91       	ld	r23, Z+
    3f98:	77 23       	and	r23, r23
    3f9a:	e1 f7       	brne	.-8      	; 0x3f94 <strrev+0x4>
    3f9c:	32 97       	sbiw	r30, 0x02	; 2
    3f9e:	04 c0       	rjmp	.+8      	; 0x3fa8 <strrev+0x18>
    3fa0:	7c 91       	ld	r23, X
    3fa2:	6d 93       	st	X+, r22
    3fa4:	70 83       	st	Z, r23
    3fa6:	62 91       	ld	r22, -Z
    3fa8:	ae 17       	cp	r26, r30
    3faa:	bf 07       	cpc	r27, r31
    3fac:	c8 f3       	brcs	.-14     	; 0x3fa0 <strrev+0x10>
    3fae:	08 95       	ret

00003fb0 <__mulsi3>:
    3fb0:	db 01       	movw	r26, r22
    3fb2:	8f 93       	push	r24
    3fb4:	9f 93       	push	r25
    3fb6:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__muluhisi3>
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	a2 9f       	mul	r26, r18
    3fc0:	80 0d       	add	r24, r0
    3fc2:	91 1d       	adc	r25, r1
    3fc4:	a3 9f       	mul	r26, r19
    3fc6:	90 0d       	add	r25, r0
    3fc8:	b2 9f       	mul	r27, r18
    3fca:	90 0d       	add	r25, r0
    3fcc:	11 24       	eor	r1, r1
    3fce:	08 95       	ret

00003fd0 <__tablejump2__>:
    3fd0:	ee 0f       	add	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	88 1f       	adc	r24, r24
    3fd6:	8b bf       	out	0x3b, r24	; 59
    3fd8:	07 90       	elpm	r0, Z+
    3fda:	f6 91       	elpm	r31, Z
    3fdc:	e0 2d       	mov	r30, r0
    3fde:	1b be       	out	0x3b, r1	; 59
    3fe0:	19 94       	eijmp

00003fe2 <__muluhisi3>:
    3fe2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__umulhisi3>
    3fe6:	a5 9f       	mul	r26, r21
    3fe8:	90 0d       	add	r25, r0
    3fea:	b4 9f       	mul	r27, r20
    3fec:	90 0d       	add	r25, r0
    3fee:	a4 9f       	mul	r26, r20
    3ff0:	80 0d       	add	r24, r0
    3ff2:	91 1d       	adc	r25, r1
    3ff4:	11 24       	eor	r1, r1
    3ff6:	08 95       	ret

00003ff8 <__umulhisi3>:
    3ff8:	a2 9f       	mul	r26, r18
    3ffa:	b0 01       	movw	r22, r0
    3ffc:	b3 9f       	mul	r27, r19
    3ffe:	c0 01       	movw	r24, r0
    4000:	a3 9f       	mul	r26, r19
    4002:	70 0d       	add	r23, r0
    4004:	81 1d       	adc	r24, r1
    4006:	11 24       	eor	r1, r1
    4008:	91 1d       	adc	r25, r1
    400a:	b2 9f       	mul	r27, r18
    400c:	70 0d       	add	r23, r0
    400e:	81 1d       	adc	r24, r1
    4010:	11 24       	eor	r1, r1
    4012:	91 1d       	adc	r25, r1
    4014:	08 95       	ret

00004016 <_exit>:
    4016:	f8 94       	cli

00004018 <__stop_program>:
    4018:	ff cf       	rjmp	.-2      	; 0x4018 <__stop_program>
