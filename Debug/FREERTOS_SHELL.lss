
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  000047e6  0000487a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010b4  008020de  008020de  00004958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00009d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000cc71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000e820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000ef20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  0001184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00013d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      64:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_25>
      68:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      6c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      70:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__vector_28>
      74:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      78:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      7c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      80:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      84:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      88:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      8c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      90:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      94:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      98:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      9c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c4:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__vector_49>
      c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e8:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_58>
      ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     100:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     104:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     108:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     10c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     110:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     114:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     118:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     11c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     120:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     124:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     128:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     12c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     130:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     134:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     138:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     13c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     140:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     144:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     148:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     14c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     150:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     154:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     158:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     15c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     160:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_88>
     164:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     168:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     16c:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__vector_91>
     170:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     174:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     178:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     17c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     180:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     184:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     188:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     18c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     190:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     194:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     198:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     19c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1fc:	76 06       	cpc	r7, r22
     1fe:	f7 06       	cpc	r15, r23
     200:	f7 06       	cpc	r15, r23
     202:	f7 06       	cpc	r15, r23
     204:	f7 06       	cpc	r15, r23
     206:	f7 06       	cpc	r15, r23
     208:	f7 06       	cpc	r15, r23
     20a:	f7 06       	cpc	r15, r23
     20c:	f7 06       	cpc	r15, r23
     20e:	f7 06       	cpc	r15, r23
     210:	f7 06       	cpc	r15, r23
     212:	f7 06       	cpc	r15, r23
     214:	f7 06       	cpc	r15, r23
     216:	f7 06       	cpc	r15, r23
     218:	f7 06       	cpc	r15, r23
     21a:	f7 06       	cpc	r15, r23
     21c:	f7 06       	cpc	r15, r23
     21e:	f7 06       	cpc	r15, r23
     220:	f7 06       	cpc	r15, r23
     222:	f7 06       	cpc	r15, r23
     224:	f7 06       	cpc	r15, r23
     226:	f7 06       	cpc	r15, r23
     228:	f7 06       	cpc	r15, r23
     22a:	f7 06       	cpc	r15, r23
     22c:	f7 06       	cpc	r15, r23
     22e:	f7 06       	cpc	r15, r23
     230:	f7 06       	cpc	r15, r23
     232:	f7 06       	cpc	r15, r23
     234:	f7 06       	cpc	r15, r23
     236:	f7 06       	cpc	r15, r23
     238:	f7 06       	cpc	r15, r23
     23a:	f7 06       	cpc	r15, r23
     23c:	f7 06       	cpc	r15, r23
     23e:	f7 06       	cpc	r15, r23
     240:	f7 06       	cpc	r15, r23
     242:	f7 06       	cpc	r15, r23
     244:	f7 06       	cpc	r15, r23
     246:	f7 06       	cpc	r15, r23
     248:	f7 06       	cpc	r15, r23
     24a:	f7 06       	cpc	r15, r23
     24c:	f7 06       	cpc	r15, r23
     24e:	f7 06       	cpc	r15, r23
     250:	f7 06       	cpc	r15, r23
     252:	f7 06       	cpc	r15, r23
     254:	f7 06       	cpc	r15, r23
     256:	f7 06       	cpc	r15, r23
     258:	f7 06       	cpc	r15, r23
     25a:	f7 06       	cpc	r15, r23
     25c:	f7 06       	cpc	r15, r23
     25e:	f7 06       	cpc	r15, r23
     260:	f7 06       	cpc	r15, r23
     262:	f7 06       	cpc	r15, r23
     264:	f7 06       	cpc	r15, r23
     266:	f7 06       	cpc	r15, r23
     268:	f7 06       	cpc	r15, r23
     26a:	f7 06       	cpc	r15, r23
     26c:	f7 06       	cpc	r15, r23
     26e:	f7 06       	cpc	r15, r23
     270:	f7 06       	cpc	r15, r23
     272:	f7 06       	cpc	r15, r23
     274:	f7 06       	cpc	r15, r23
     276:	f7 06       	cpc	r15, r23
     278:	f7 06       	cpc	r15, r23
     27a:	f7 06       	cpc	r15, r23
     27c:	f7 06       	cpc	r15, r23
     27e:	f7 06       	cpc	r15, r23
     280:	f7 06       	cpc	r15, r23
     282:	f7 06       	cpc	r15, r23
     284:	f7 06       	cpc	r15, r23
     286:	f7 06       	cpc	r15, r23
     288:	f7 06       	cpc	r15, r23
     28a:	8b 06       	cpc	r8, r27
     28c:	f7 06       	cpc	r15, r23
     28e:	c1 06       	cpc	r12, r17
     290:	76 06       	cpc	r7, r22
     292:	f7 06       	cpc	r15, r23
     294:	a7 06       	cpc	r10, r23
     296:	72 06       	cpc	r7, r18
     298:	f7 06       	cpc	r15, r23
     29a:	f7 06       	cpc	r15, r23
     29c:	f7 06       	cpc	r15, r23
     29e:	f7 06       	cpc	r15, r23
     2a0:	f7 06       	cpc	r15, r23
     2a2:	33 05       	cpc	r19, r3
     2a4:	f7 06       	cpc	r15, r23
     2a6:	f7 06       	cpc	r15, r23
     2a8:	f7 06       	cpc	r15, r23
     2aa:	dd 06       	cpc	r13, r29
     2ac:	38 06       	cpc	r3, r24
     2ae:	f7 06       	cpc	r15, r23
     2b0:	f7 06       	cpc	r15, r23
     2b2:	41 05       	cpc	r20, r1
     2b4:	ac 11       	cpse	r26, r12
     2b6:	af 11       	cpse	r26, r15
     2b8:	b2 11       	cpse	r27, r2
     2ba:	b5 11       	cpse	r27, r5
     2bc:	b8 11       	cpse	r27, r8
     2be:	bb 11       	cpse	r27, r11
     2c0:	bd 11       	cpse	r27, r13
     2c2:	ce 11       	cpse	r28, r14
     2c4:	d6 11       	cpse	r29, r6
     2c6:	e0 11       	cpse	r30, r0
     2c8:	de 11       	cpse	r29, r14

000002ca <__trampolines_start>:
     2ca:	0c 94 bd 11 	jmp	0x237a	; 0x237a <_ZN8emstreamlsE15ser_manipulator+0x40>
     2ce:	0c 94 3f 11 	jmp	0x227e	; 0x227e <_ZN8emstream14check_for_charEv>
     2d2:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_ZN9task_user3runEv+0x186>
     2d6:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <_ZN18task_motor_command3runEv>
     2da:	0c 94 b5 11 	jmp	0x236a	; 0x236a <_ZN8emstreamlsE15ser_manipulator+0x30>
     2de:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_ZN5rs23212clear_screenEv>
     2e2:	0c 94 3d 11 	jmp	0x227a	; 0x227a <_ZN8emstream12clear_screenEv>
     2e6:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <_ZN17task_limit_switch3runEv>
     2ea:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <_ZN5rs2327getcharEv>
     2ee:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
     2f2:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_ZN8emstreamlsE15ser_manipulator+0x82>
     2f6:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_ZN18task_motor_encoder3runEv>
     2fa:	0c 94 3e 11 	jmp	0x227c	; 0x227c <_ZN8emstream12transmit_nowEv>
     2fe:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <_ZN5rs2327putcharEc>
     302:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <_ZN14frt_text_queue7putcharEc>
     306:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     30a:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_ZN9task_user3runEv+0x374>
     30e:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <_ZN21task_pendulum_encoder3runEv>
     312:	0c 94 46 11 	jmp	0x228c	; 0x228c <__cxa_pure_virtual>
     316:	0c 94 41 11 	jmp	0x2282	; 0x2282 <_ZN8emstream7getcharEv>
     31a:	0c 94 25 1b 	jmp	0x364a	; 0x364a <prvIdleTask>
     31e:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_ZN9task_user3runEv+0x486>
     322:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_ZN5rs23214check_for_charEv>
     326:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_ZN9task_user3runEv+0x3e8>
     32a:	0c 94 44 11 	jmp	0x2288	; 0x2288 <_ZN8emstream13ready_to_sendEv>
     32e:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     332:	0c 94 8e 11 	jmp	0x231c	; 0x231c <_call_static_run_method>
     336:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     33a:	0c 94 ce 11 	jmp	0x239c	; 0x239c <_ZN8emstreamlsE15ser_manipulator+0x62>
     33e:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <_GLOBAL__sub_I_counter>
     342:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <_ZN14frt_text_queue14check_for_charEv>
     346:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <_ZN8emstreamlsE15ser_manipulator+0x36>
     34a:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_ZN9task_user3runEv>
     34e:	0c 94 af 11 	jmp	0x235e	; 0x235e <_ZN8emstreamlsE15ser_manipulator+0x24>
     352:	0c 94 dd 06 	jmp	0xdba	; 0xdba <_ZN9task_user3runEv+0x4be>
     356:	0c 94 41 07 	jmp	0xe82	; 0xe82 <_ZN22task_system_controller3runEv>
     35a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <_ZN9task_user3runEv+0x452>
     35e:	0c 94 91 12 	jmp	0x2522	; 0x2522 <_ZN8frt_task12print_statusER8emstream>
     362:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <_ZN8emstreamlsE15ser_manipulator+0x72>
     366:	0c 94 f7 06 	jmp	0xdee	; 0xdee <_ZN9task_user3runEv+0x4f2>
     36a:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <_ZN9task_user3runEv+0x41a>
     36e:	0c 94 47 11 	jmp	0x228e	; 0x228e <_ZN14frt_text_queue7getcharEv>
     372:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_ZN9task_user3runEv+0x16a>
     376:	0c 94 76 06 	jmp	0xcec	; 0xcec <_ZN9task_user3runEv+0x3f0>

0000037a <__trampolines_end>:
     37a:	09 09       	sbc	r16, r9
	...

0000037d <_ZZ15print_task_listP8emstreamE3__c_8>:
     37d:	2f 00                                               /.

0000037f <_ZZ15print_task_listP8emstreamE3__c_7>:
     37f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000038a <_ZZ15print_task_listP8emstreamE3__c_6>:
     38a:	09 2d 2d 2d 2d 00                                   .----.

00000390 <_ZZ15print_task_listP8emstreamE3__c_5>:
     390:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000039c <_ZZ15print_task_listP8emstreamE3__c_4>:
     39c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000003ad <_ZZ15print_task_listP8emstreamE3__c_3>:
     3ad:	09 52 75 6e 73 00                                   .Runs.

000003b3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     3b3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000003bf <_ZZ15print_task_listP8emstreamE3__c_1>:
     3bf:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000003d0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     3d0:	09 53 74 61 63 6b 00                                .Stack.

000003d7 <_ZZ15print_task_listP8emstreamE3__c>:
     3d7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000003e2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3e2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003ed <_ZZN9task_user11show_statusEvE3__c_3>:
     3ed:	2f 00                                               /.

000003ef <_ZZN9task_user11show_statusEvE3__c_2>:
     3ef:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003fd <_ZZN9task_user11show_statusEvE3__c_1>:
     3fd:	54 69 6d 65 3a 20 00                                Time: .

00000404 <_ZZN9task_user11show_statusEvE3__c_0>:
     404:	41 70 72 20 31 33 20 32 30 32 35 00                 Apr 13 2025.

00000410 <_ZZN9task_user11show_statusEvE3__c>:
     410:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     420:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000042f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     42f:	1b 5b 32 32 6d 00                                   .[22m.

00000435 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     435:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000440 <_ZZ17print_task_stacksP8emstreamE3__c>:
     440:	1b 5b 31 6d 00                                      .[1m.

00000445 <_ZZN9task_user3runEvE3__c_7>:
     445:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     455:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000462 <_ZZN9task_user3runEvE3__c_6>:
     462:	3a 57 54 46 3f 00                                   :WTF?.

00000468 <_ZZN9task_user3runEvE3__c_5>:
     468:	52 65 73 65 74 2c 20 74 72 79 20 48 6f 6d 69 6e     Reset, try Homin
     478:	67 20 61 67 61 69 6e 20 62 79 20 70 72 65 73 73     g again by press
     488:	69 6e 67 20 27 62 27 00                             ing 'b'.

00000490 <_ZZN9task_user3runEvE3__c_4>:
     490:	45 4d 45 52 47 45 4e 43 59 20 53 54 4f 50 00        EMERGENCY STOP.

0000049f <_ZZN9task_user3runEvE3__c_3>:
     49f:	43 6f 6d 6d 65 6e 63 65 20 42 61 6c 61 6e 63 65     Commence Balance
	...

000004b0 <_ZZN9task_user3runEvE3__c_2>:
     4b0:	42 65 67 69 6e 20 48 6f 6d 69 6e 67 00              Begin Homing.

000004bd <_ZZN9task_user3runEvE3__c_1>:
     4bd:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4cd:	65 00                                               e.

000004cf <_ZZN9task_user3runEvE3__c_0>:
     4cf:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004dd <_ZZN9task_user3runEvE3__c>:
     4dd:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ed:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004fb <_ZZN9task_user18print_help_messageEvE3__c_14>:
     4fb:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_13>:
     50a:	20 20 20 20 72 3a 20 20 20 52 65 73 65 74 20 74         r:   Reset t
     51a:	6f 20 49 64 6c 65 00                                o Idle.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_12>:
     521:	20 20 20 20 64 3a 20 20 20 45 6d 65 72 67 65 6e         d:   Emergen
     531:	63 79 20 53 74 6f 70 00                             cy Stop.

00000539 <_ZZN9task_user18print_help_messageEvE3__c_11>:
     539:	20 20 20 20 67 3a 20 20 20 53 74 61 72 74 20 42         g:   Start B
     549:	61 6c 61 6e 63 65 21 00                             alance!.

00000551 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     551:	20 20 20 20 62 3a 20 20 20 42 65 67 69 6e 20 43         b:   Begin C
     561:	61 6c 69 62 72 61 74 69 6f 6e 00                    alibration.

0000056c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     56c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     57c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000587 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     587:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     597:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005a5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5a5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5b5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5c5:	6d 61 74 69 6f 6e 00                                mation.

000005cc <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5cc:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5dc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000005ed <_ZZN9task_user18print_help_messageEvE3__c_5>:
     5ed:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     5fd:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000605 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     605:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     615:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000621 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     621:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     631:	68 65 20 41 56 52 00                                he AVR.

00000638 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     638:	20 68 65 6c 70 00                                    help.

0000063e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     63e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     64e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000065d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     65d:	1b 5b 33 30 6d 00                                   .[30m.

00000663 <_ZZN9task_user18print_help_messageEvE3__c>:
     663:	1b 5b 34 36 6d 00                                   .[46m.

00000669 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     669:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     679:	61 73 6b 20 00                                      ask .

0000067e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     67e:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

0000068c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     68c:	20 63 72 65 61 74 65 64 00                           created.

00000695 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     695:	54 61 73 6b 20 00                                   Task .

0000069b <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     69b:	1b 5b 32 32 6d 00                                   .[22m.

000006a1 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     6a1:	54 61 73 6b 3a 20 00                                Task: .

000006a8 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     6a8:	1b 5b 31 6d 00                                      .[1m.

000006ad <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     6ad:	09 00                                               ..

000006af <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     6af:	09 00                                               ..

000006b1 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     6b1:	2f 00                                               /.

000006b3 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     6b3:	09 00                                               ..

000006b5 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     6b5:	09 00                                               ..

000006b7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     6b7:	1b 5b 32 32 6d 00                                   .[22m.

000006bd <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     6bd:	1b 5b 31 6d 00                                      .[1m.

000006c2 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     6c2:	1b 5b 31 6d 00                                      .[1m.

000006c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     6c7:	20 20 00                                              .

000006ca <__ctors_start>:
     6ca:	d8 0c       	add	r13, r8

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf ef       	ldi	r28, 0xFF	; 255
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df e3       	ldi	r29, 0x3F	; 63
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	0c bf       	out	0x3c, r16	; 60
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	19 be       	out	0x39, r1	; 57
     6e0:	1a be       	out	0x3a, r1	; 58
     6e2:	1b be       	out	0x3b, r1	; 59

000006e4 <__do_copy_data>:
     6e4:	10 e2       	ldi	r17, 0x20	; 32
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e2       	ldi	r27, 0x20	; 32
     6ea:	e6 ee       	ldi	r30, 0xE6	; 230
     6ec:	f7 e4       	ldi	r31, 0x47	; 71
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	ae 3d       	cpi	r26, 0xDE	; 222
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>
     6fe:	1b be       	out	0x3b, r1	; 59

00000700 <__do_clear_bss>:
     700:	21 e3       	ldi	r18, 0x31	; 49
     702:	ae ed       	ldi	r26, 0xDE	; 222
     704:	b0 e2       	ldi	r27, 0x20	; 32
     706:	01 c0       	rjmp	.+2      	; 0x70a <.do_clear_bss_start>

00000708 <.do_clear_bss_loop>:
     708:	1d 92       	st	X+, r1

0000070a <.do_clear_bss_start>:
     70a:	a2 39       	cpi	r26, 0x92	; 146
     70c:	b2 07       	cpc	r27, r18
     70e:	e1 f7       	brne	.-8      	; 0x708 <.do_clear_bss_loop>

00000710 <__do_global_ctors>:
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c6 e6       	ldi	r28, 0x66	; 102
     714:	d3 e0       	ldi	r29, 0x03	; 3
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	06 c0       	rjmp	.+12     	; 0x726 <__do_global_ctors+0x16>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	01 09       	sbc	r16, r1
     71e:	80 2f       	mov	r24, r16
     720:	fe 01       	movw	r30, r28
     722:	0e 94 ce 23 	call	0x479c	; 0x479c <__tablejump2__>
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	d1 07       	cpc	r29, r17
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 07       	cpc	r16, r24
     72e:	a9 f7       	brne	.-22     	; 0x71a <__do_global_ctors+0xa>
     730:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <main>
     734:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN9task_user18print_help_messageEv>:
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
     746:	6a e0       	ldi	r22, 0x0A	; 10
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	9f 81       	ldd	r25, Y+7	; 0x07
     74c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     750:	8c 01       	movw	r16, r24
     752:	63 e6       	ldi	r22, 0x63	; 99
     754:	76 e0       	ldi	r23, 0x06	; 6
     756:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     75a:	6a e0       	ldi	r22, 0x0A	; 10
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     762:	8c 01       	movw	r16, r24
     764:	6d e5       	ldi	r22, 0x5D	; 93
     766:	76 e0       	ldi	r23, 0x06	; 6
     768:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     774:	6a e0       	ldi	r22, 0x0A	; 10
     776:	8e 81       	ldd	r24, Y+6	; 0x06
     778:	9f 81       	ldd	r25, Y+7	; 0x07
     77a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     77e:	8c 01       	movw	r16, r24
     780:	6e e3       	ldi	r22, 0x3E	; 62
     782:	76 e0       	ldi	r23, 0x06	; 6
     784:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     788:	6a e0       	ldi	r22, 0x0A	; 10
     78a:	c8 01       	movw	r24, r16
     78c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     790:	8c 01       	movw	r16, r24
     792:	68 e3       	ldi	r22, 0x38	; 56
     794:	76 e0       	ldi	r23, 0x06	; 6
     796:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     79a:	66 e0       	ldi	r22, 0x06	; 6
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7a2:	6a e0       	ldi	r22, 0x0A	; 10
     7a4:	8e 81       	ldd	r24, Y+6	; 0x06
     7a6:	9f 81       	ldd	r25, Y+7	; 0x07
     7a8:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7ac:	8c 01       	movw	r16, r24
     7ae:	61 e2       	ldi	r22, 0x21	; 33
     7b0:	76 e0       	ldi	r23, 0x06	; 6
     7b2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     7b6:	66 e0       	ldi	r22, 0x06	; 6
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7be:	6a e0       	ldi	r22, 0x0A	; 10
     7c0:	8e 81       	ldd	r24, Y+6	; 0x06
     7c2:	9f 81       	ldd	r25, Y+7	; 0x07
     7c4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7c8:	8c 01       	movw	r16, r24
     7ca:	65 e0       	ldi	r22, 0x05	; 5
     7cc:	76 e0       	ldi	r23, 0x06	; 6
     7ce:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7da:	6a e0       	ldi	r22, 0x0A	; 10
     7dc:	8e 81       	ldd	r24, Y+6	; 0x06
     7de:	9f 81       	ldd	r25, Y+7	; 0x07
     7e0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7e4:	8c 01       	movw	r16, r24
     7e6:	6d ee       	ldi	r22, 0xED	; 237
     7e8:	75 e0       	ldi	r23, 0x05	; 5
     7ea:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     7ee:	66 e0       	ldi	r22, 0x06	; 6
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     7f6:	6a e0       	ldi	r22, 0x0A	; 10
     7f8:	8e 81       	ldd	r24, Y+6	; 0x06
     7fa:	9f 81       	ldd	r25, Y+7	; 0x07
     7fc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     800:	8c 01       	movw	r16, r24
     802:	6c ec       	ldi	r22, 0xCC	; 204
     804:	75 e0       	ldi	r23, 0x05	; 5
     806:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     80a:	66 e0       	ldi	r22, 0x06	; 6
     80c:	c8 01       	movw	r24, r16
     80e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     812:	6a e0       	ldi	r22, 0x0A	; 10
     814:	8e 81       	ldd	r24, Y+6	; 0x06
     816:	9f 81       	ldd	r25, Y+7	; 0x07
     818:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     81c:	8c 01       	movw	r16, r24
     81e:	65 ea       	ldi	r22, 0xA5	; 165
     820:	75 e0       	ldi	r23, 0x05	; 5
     822:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     826:	66 e0       	ldi	r22, 0x06	; 6
     828:	c8 01       	movw	r24, r16
     82a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     82e:	6a e0       	ldi	r22, 0x0A	; 10
     830:	8e 81       	ldd	r24, Y+6	; 0x06
     832:	9f 81       	ldd	r25, Y+7	; 0x07
     834:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     838:	8c 01       	movw	r16, r24
     83a:	67 e8       	ldi	r22, 0x87	; 135
     83c:	75 e0       	ldi	r23, 0x05	; 5
     83e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     842:	66 e0       	ldi	r22, 0x06	; 6
     844:	c8 01       	movw	r24, r16
     846:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     84a:	6a e0       	ldi	r22, 0x0A	; 10
     84c:	8e 81       	ldd	r24, Y+6	; 0x06
     84e:	9f 81       	ldd	r25, Y+7	; 0x07
     850:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     854:	8c 01       	movw	r16, r24
     856:	6c e6       	ldi	r22, 0x6C	; 108
     858:	75 e0       	ldi	r23, 0x05	; 5
     85a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     85e:	66 e0       	ldi	r22, 0x06	; 6
     860:	c8 01       	movw	r24, r16
     862:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     866:	6a e0       	ldi	r22, 0x0A	; 10
     868:	8e 81       	ldd	r24, Y+6	; 0x06
     86a:	9f 81       	ldd	r25, Y+7	; 0x07
     86c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     870:	8c 01       	movw	r16, r24
     872:	61 e5       	ldi	r22, 0x51	; 81
     874:	75 e0       	ldi	r23, 0x05	; 5
     876:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     87a:	66 e0       	ldi	r22, 0x06	; 6
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     882:	6a e0       	ldi	r22, 0x0A	; 10
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     88c:	8c 01       	movw	r16, r24
     88e:	69 e3       	ldi	r22, 0x39	; 57
     890:	75 e0       	ldi	r23, 0x05	; 5
     892:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     896:	66 e0       	ldi	r22, 0x06	; 6
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	9f 81       	ldd	r25, Y+7	; 0x07
     8a4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8a8:	8c 01       	movw	r16, r24
     8aa:	61 e2       	ldi	r22, 0x21	; 33
     8ac:	75 e0       	ldi	r23, 0x05	; 5
     8ae:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     8b2:	66 e0       	ldi	r22, 0x06	; 6
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8ba:	6a e0       	ldi	r22, 0x0A	; 10
     8bc:	8e 81       	ldd	r24, Y+6	; 0x06
     8be:	9f 81       	ldd	r25, Y+7	; 0x07
     8c0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8c4:	8c 01       	movw	r16, r24
     8c6:	6a e0       	ldi	r22, 0x0A	; 10
     8c8:	75 e0       	ldi	r23, 0x05	; 5
     8ca:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     8ce:	66 e0       	ldi	r22, 0x06	; 6
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8d6:	6a e0       	ldi	r22, 0x0A	; 10
     8d8:	8e 81       	ldd	r24, Y+6	; 0x06
     8da:	9f 81       	ldd	r25, Y+7	; 0x07
     8dc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8e0:	ec 01       	movw	r28, r24
     8e2:	6b ef       	ldi	r22, 0xFB	; 251
     8e4:	74 e0       	ldi	r23, 0x04	; 4
     8e6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     8ea:	66 e0       	ldi	r22, 0x06	; 6
     8ec:	ce 01       	movw	r24, r28
     8ee:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	08 95       	ret

000008fc <_ZN9task_user3runEv>:
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	2c 97       	sbiw	r28, 0x0c	; 12
     906:	cd bf       	out	0x3d, r28	; 61
     908:	de bf       	out	0x3e, r29	; 62
     90a:	7c 01       	movw	r14, r24
     90c:	19 82       	std	Y+1, r1	; 0x01
     90e:	1a 82       	std	Y+2, r1	; 0x02
     910:	1b 82       	std	Y+3, r1	; 0x03
     912:	1c 82       	std	Y+4, r1	; 0x04
     914:	1d 82       	std	Y+5, r1	; 0x05
     916:	1e 82       	std	Y+6, r1	; 0x06
     918:	6a e0       	ldi	r22, 0x0A	; 10
     91a:	dc 01       	movw	r26, r24
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	8d 91       	ld	r24, X+
     920:	9c 91       	ld	r25, X
     922:	17 97       	sbiw	r26, 0x07	; 7
     924:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     928:	6c 01       	movw	r12, r24
     92a:	6d ed       	ldi	r22, 0xDD	; 221
     92c:	74 e0       	ldi	r23, 0x04	; 4
     92e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     932:	66 e0       	ldi	r22, 0x06	; 6
     934:	c6 01       	movw	r24, r12
     936:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     93a:	11 e0       	ldi	r17, 0x01	; 1
     93c:	81 2c       	mov	r8, r1
     93e:	68 94       	set
     940:	99 24       	eor	r9, r9
     942:	93 f8       	bld	r9, 3
     944:	0f 2e       	mov	r0, r31
     946:	f4 e2       	ldi	r31, 0x24	; 36
     948:	af 2e       	mov	r10, r31
     94a:	f1 e2       	ldi	r31, 0x21	; 33
     94c:	bf 2e       	mov	r11, r31
     94e:	f0 2d       	mov	r31, r0
     950:	f7 01       	movw	r30, r14
     952:	84 85       	ldd	r24, Z+12	; 0x0c
     954:	88 23       	and	r24, r24
     956:	21 f0       	breq	.+8      	; 0x960 <_ZN9task_user3runEv+0x64>
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	09 f4       	brne	.+2      	; 0x95e <_ZN9task_user3runEv+0x62>
     95c:	60 c0       	rjmp	.+192    	; 0xa1e <_ZN9task_user3runEv+0x122>
     95e:	63 c2       	rjmp	.+1222   	; 0xe26 <_ZN9task_user3runEv+0x52a>
     960:	86 81       	ldd	r24, Z+6	; 0x06
     962:	97 81       	ldd	r25, Z+7	; 0x07
     964:	dc 01       	movw	r26, r24
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	04 80       	ldd	r0, Z+4	; 0x04
     96c:	f5 81       	ldd	r31, Z+5	; 0x05
     96e:	e0 2d       	mov	r30, r0
     970:	19 95       	eicall
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <_ZN9task_user3runEv+0x7c>
     976:	37 c0       	rjmp	.+110    	; 0x9e6 <_ZN9task_user3runEv+0xea>
     978:	f7 01       	movw	r30, r14
     97a:	86 81       	ldd	r24, Z+6	; 0x06
     97c:	97 81       	ldd	r25, Z+7	; 0x07
     97e:	dc 01       	movw	r26, r24
     980:	ed 91       	ld	r30, X+
     982:	fc 91       	ld	r31, X
     984:	06 80       	ldd	r0, Z+6	; 0x06
     986:	f7 81       	ldd	r31, Z+7	; 0x07
     988:	e0 2d       	mov	r30, r0
     98a:	19 95       	eicall
     98c:	99 27       	eor	r25, r25
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	91 05       	cpc	r25, r1
     992:	f9 f0       	breq	.+62     	; 0x9d2 <_ZN9task_user3runEv+0xd6>
     994:	03 97       	sbiw	r24, 0x03	; 3
     996:	09 f0       	breq	.+2      	; 0x99a <_ZN9task_user3runEv+0x9e>
     998:	61 c2       	rjmp	.+1218   	; 0xe5c <_ZN9task_user3runEv+0x560>
     99a:	6a e0       	ldi	r22, 0x0A	; 10
     99c:	f7 01       	movw	r30, r14
     99e:	86 81       	ldd	r24, Z+6	; 0x06
     9a0:	97 81       	ldd	r25, Z+7	; 0x07
     9a2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     9a6:	7c 01       	movw	r14, r24
     9a8:	6f ec       	ldi	r22, 0xCF	; 207
     9aa:	74 e0       	ldi	r23, 0x04	; 4
     9ac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     9b0:	66 e0       	ldi	r22, 0x06	; 6
     9b2:	c7 01       	movw	r24, r14
     9b4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	88 ed       	ldi	r24, 0xD8	; 216
     9bc:	08 b6       	in	r0, 0x38	; 56
     9be:	18 be       	out	0x38, r1	; 56
     9c0:	84 bf       	out	0x34, r24	; 52
     9c2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     9c6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     9ca:	81 fd       	sbrc	r24, 1
     9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <_ZN9task_user3runEv+0xca>
     9ce:	08 be       	out	0x38, r0	; 56
     9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <_ZN9task_user3runEv+0xd4>
     9d2:	c7 01       	movw	r24, r14
     9d4:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN9task_user18print_help_messageEv>
     9d8:	d7 01       	movw	r26, r14
     9da:	1c 96       	adiw	r26, 0x0c	; 12
     9dc:	1c 93       	st	X, r17
     9de:	1c 97       	sbiw	r26, 0x0c	; 12
     9e0:	1d 96       	adiw	r26, 0x0d	; 13
     9e2:	1c 93       	st	X, r17
     9e4:	3b c2       	rjmp	.+1142   	; 0xe5c <_ZN9task_user3runEv+0x560>
     9e6:	86 ef       	ldi	r24, 0xF6	; 246
     9e8:	90 e2       	ldi	r25, 0x20	; 32
     9ea:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN14frt_text_queue14check_for_charEv>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <_ZN9task_user3runEv+0xf8>
     9f2:	34 c2       	rjmp	.+1128   	; 0xe5c <_ZN9task_user3runEv+0x560>
     9f4:	d7 01       	movw	r26, r14
     9f6:	16 96       	adiw	r26, 0x06	; 6
     9f8:	ed 91       	ld	r30, X+
     9fa:	fc 91       	ld	r31, X
     9fc:	17 97       	sbiw	r26, 0x07	; 7
     9fe:	01 90       	ld	r0, Z+
     a00:	f0 81       	ld	r31, Z
     a02:	e0 2d       	mov	r30, r0
     a04:	c2 80       	ldd	r12, Z+2	; 0x02
     a06:	d3 80       	ldd	r13, Z+3	; 0x03
     a08:	86 ef       	ldi	r24, 0xF6	; 246
     a0a:	90 e2       	ldi	r25, 0x20	; 32
     a0c:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN14frt_text_queue7getcharEv>
     a10:	68 2f       	mov	r22, r24
     a12:	f7 01       	movw	r30, r14
     a14:	86 81       	ldd	r24, Z+6	; 0x06
     a16:	97 81       	ldd	r25, Z+7	; 0x07
     a18:	f6 01       	movw	r30, r12
     a1a:	19 95       	eicall
     a1c:	1f c2       	rjmp	.+1086   	; 0xe5c <_ZN9task_user3runEv+0x560>
     a1e:	86 81       	ldd	r24, Z+6	; 0x06
     a20:	97 81       	ldd	r25, Z+7	; 0x07
     a22:	dc 01       	movw	r26, r24
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	04 80       	ldd	r0, Z+4	; 0x04
     a2a:	f5 81       	ldd	r31, Z+5	; 0x05
     a2c:	e0 2d       	mov	r30, r0
     a2e:	19 95       	eicall
     a30:	88 23       	and	r24, r24
     a32:	09 f4       	brne	.+2      	; 0xa36 <_ZN9task_user3runEv+0x13a>
     a34:	13 c2       	rjmp	.+1062   	; 0xe5c <_ZN9task_user3runEv+0x560>
     a36:	f7 01       	movw	r30, r14
     a38:	86 81       	ldd	r24, Z+6	; 0x06
     a3a:	97 81       	ldd	r25, Z+7	; 0x07
     a3c:	dc 01       	movw	r26, r24
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	06 80       	ldd	r0, Z+6	; 0x06
     a44:	f7 81       	ldd	r31, Z+7	; 0x07
     a46:	e0 2d       	mov	r30, r0
     a48:	19 95       	eicall
     a4a:	bc 01       	movw	r22, r24
     a4c:	fc 01       	movw	r30, r24
     a4e:	ff 27       	eor	r31, r31
     a50:	7b 97       	sbiw	r30, 0x1b	; 27
     a52:	ec 35       	cpi	r30, 0x5C	; 92
     a54:	f1 05       	cpc	r31, r1
     a56:	08 f0       	brcs	.+2      	; 0xa5a <_ZN9task_user3runEv+0x15e>
     a58:	ca c1       	rjmp	.+916    	; 0xdee <_ZN9task_user3runEv+0x4f2>
     a5a:	88 27       	eor	r24, r24
     a5c:	e2 50       	subi	r30, 0x02	; 2
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	8f 4f       	sbci	r24, 0xFF	; 255
     a62:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__tablejump2__>
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN10time_stamp10set_to_nowEv>
     a6e:	bc 01       	movw	r22, r24
     a70:	f7 01       	movw	r30, r14
     a72:	86 81       	ldd	r24, Z+6	; 0x06
     a74:	97 81       	ldd	r25, Z+7	; 0x07
     a76:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZlsR8emstreamR10time_stamp>
     a7a:	66 e0       	ldi	r22, 0x06	; 6
     a7c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     a80:	ed c1       	rjmp	.+986    	; 0xe5c <_ZN9task_user3runEv+0x560>
     a82:	1f 82       	std	Y+7, r1	; 0x07
     a84:	18 86       	std	Y+8, r1	; 0x08
     a86:	19 86       	std	Y+9, r1	; 0x09
     a88:	1a 86       	std	Y+10, r1	; 0x0a
     a8a:	1b 86       	std	Y+11, r1	; 0x0b
     a8c:	1c 86       	std	Y+12, r1	; 0x0c
     a8e:	0e 94 77 16 	call	0x2cee	; 0x2cee <xPortGetFreeHeapSize>
     a92:	3c 01       	movw	r6, r24
     a94:	ce 01       	movw	r24, r28
     a96:	07 96       	adiw	r24, 0x07	; 7
     a98:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN10time_stamp10set_to_nowEv>
     a9c:	2c 01       	movw	r4, r24
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	d7 01       	movw	r26, r14
     aa2:	16 96       	adiw	r26, 0x06	; 6
     aa4:	8d 91       	ld	r24, X+
     aa6:	9c 91       	ld	r25, X
     aa8:	17 97       	sbiw	r26, 0x07	; 7
     aaa:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     aae:	6a e0       	ldi	r22, 0x0A	; 10
     ab0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ab4:	6c 01       	movw	r12, r24
     ab6:	60 e1       	ldi	r22, 0x10	; 16
     ab8:	74 e0       	ldi	r23, 0x04	; 4
     aba:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	c6 01       	movw	r24, r12
     ac2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ac6:	6c 01       	movw	r12, r24
     ac8:	64 e0       	ldi	r22, 0x04	; 4
     aca:	74 e0       	ldi	r23, 0x04	; 4
     acc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     ad0:	66 e0       	ldi	r22, 0x06	; 6
     ad2:	c6 01       	movw	r24, r12
     ad4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ade:	6c 01       	movw	r12, r24
     ae0:	6d ef       	ldi	r22, 0xFD	; 253
     ae2:	73 e0       	ldi	r23, 0x03	; 3
     ae4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     ae8:	b2 01       	movw	r22, r4
     aea:	c6 01       	movw	r24, r12
     aec:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZlsR8emstreamR10time_stamp>
     af0:	6a e0       	ldi	r22, 0x0A	; 10
     af2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     af6:	6c 01       	movw	r12, r24
     af8:	6f ee       	ldi	r22, 0xEF	; 239
     afa:	73 e0       	ldi	r23, 0x03	; 3
     afc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b00:	b3 01       	movw	r22, r6
     b02:	c6 01       	movw	r24, r12
     b04:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
     b08:	6a e0       	ldi	r22, 0x0A	; 10
     b0a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b0e:	6c 01       	movw	r12, r24
     b10:	6d ee       	ldi	r22, 0xED	; 237
     b12:	73 e0       	ldi	r23, 0x03	; 3
     b14:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b18:	4f ef       	ldi	r20, 0xFF	; 255
     b1a:	5f e0       	ldi	r21, 0x0F	; 15
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	c6 01       	movw	r24, r12
     b22:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZN8emstreamlsEm>
     b26:	f4 01       	movw	r30, r8
     b28:	60 a4       	ldd	r6, Z+40	; 0x28
     b2a:	71 a4       	ldd	r7, Z+41	; 0x29
     b2c:	6a e0       	ldi	r22, 0x0A	; 10
     b2e:	d7 01       	movw	r26, r14
     b30:	16 96       	adiw	r26, 0x06	; 6
     b32:	8d 91       	ld	r24, X+
     b34:	9c 91       	ld	r25, X
     b36:	17 97       	sbiw	r26, 0x07	; 7
     b38:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b3c:	6c 01       	movw	r12, r24
     b3e:	62 ee       	ldi	r22, 0xE2	; 226
     b40:	73 e0       	ldi	r23, 0x03	; 3
     b42:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b46:	b3 01       	movw	r22, r6
     b48:	c6 01       	movw	r24, r12
     b4a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
     b4e:	66 e0       	ldi	r22, 0x06	; 6
     b50:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b54:	66 e0       	ldi	r22, 0x06	; 6
     b56:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b5a:	f7 01       	movw	r30, r14
     b5c:	c6 80       	ldd	r12, Z+6	; 0x06
     b5e:	d7 80       	ldd	r13, Z+7	; 0x07
     b60:	6a e0       	ldi	r22, 0x0A	; 10
     b62:	c6 01       	movw	r24, r12
     b64:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b68:	3c 01       	movw	r6, r24
     b6a:	67 ed       	ldi	r22, 0xD7	; 215
     b6c:	73 e0       	ldi	r23, 0x03	; 3
     b6e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b72:	6a e0       	ldi	r22, 0x0A	; 10
     b74:	c3 01       	movw	r24, r6
     b76:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b7a:	3c 01       	movw	r6, r24
     b7c:	60 ed       	ldi	r22, 0xD0	; 208
     b7e:	73 e0       	ldi	r23, 0x03	; 3
     b80:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b84:	66 e0       	ldi	r22, 0x06	; 6
     b86:	c3 01       	movw	r24, r6
     b88:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b8c:	6a e0       	ldi	r22, 0x0A	; 10
     b8e:	c6 01       	movw	r24, r12
     b90:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     b94:	3c 01       	movw	r6, r24
     b96:	6f eb       	ldi	r22, 0xBF	; 191
     b98:	73 e0       	ldi	r23, 0x03	; 3
     b9a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     b9e:	6a e0       	ldi	r22, 0x0A	; 10
     ba0:	c3 01       	movw	r24, r6
     ba2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ba6:	3c 01       	movw	r6, r24
     ba8:	63 eb       	ldi	r22, 0xB3	; 179
     baa:	73 e0       	ldi	r23, 0x03	; 3
     bac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     bb0:	6a e0       	ldi	r22, 0x0A	; 10
     bb2:	c3 01       	movw	r24, r6
     bb4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     bb8:	3c 01       	movw	r6, r24
     bba:	6d ea       	ldi	r22, 0xAD	; 173
     bbc:	73 e0       	ldi	r23, 0x03	; 3
     bbe:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     bc2:	66 e0       	ldi	r22, 0x06	; 6
     bc4:	c3 01       	movw	r24, r6
     bc6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     bca:	6a e0       	ldi	r22, 0x0A	; 10
     bcc:	c6 01       	movw	r24, r12
     bce:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     bd2:	3c 01       	movw	r6, r24
     bd4:	6c e9       	ldi	r22, 0x9C	; 156
     bd6:	73 e0       	ldi	r23, 0x03	; 3
     bd8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     bdc:	6a e0       	ldi	r22, 0x0A	; 10
     bde:	c3 01       	movw	r24, r6
     be0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     be4:	3c 01       	movw	r6, r24
     be6:	60 e9       	ldi	r22, 0x90	; 144
     be8:	73 e0       	ldi	r23, 0x03	; 3
     bea:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     bee:	6a e0       	ldi	r22, 0x0A	; 10
     bf0:	c3 01       	movw	r24, r6
     bf2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     bf6:	3c 01       	movw	r6, r24
     bf8:	6a e8       	ldi	r22, 0x8A	; 138
     bfa:	73 e0       	ldi	r23, 0x03	; 3
     bfc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     c00:	66 e0       	ldi	r22, 0x06	; 6
     c02:	c3 01       	movw	r24, r6
     c04:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c08:	d5 01       	movw	r26, r10
     c0a:	8d 91       	ld	r24, X+
     c0c:	9c 91       	ld	r25, X
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	19 f0       	breq	.+6      	; 0xc18 <_ZN9task_user3runEv+0x31c>
     c12:	b6 01       	movw	r22, r12
     c14:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_ZN8frt_task20print_status_in_listEP8emstream>
     c18:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <xTaskGetIdleTaskHandle>
     c1c:	0e 94 45 20 	call	0x408a	; 0x408a <uxTaskGetStackHighWaterMark>
     c20:	08 2f       	mov	r16, r24
     c22:	6a e0       	ldi	r22, 0x0A	; 10
     c24:	c6 01       	movw	r24, r12
     c26:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c2a:	6c 01       	movw	r12, r24
     c2c:	6f e7       	ldi	r22, 0x7F	; 127
     c2e:	73 e0       	ldi	r23, 0x03	; 3
     c30:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     c34:	60 2f       	mov	r22, r16
     c36:	c6 01       	movw	r24, r12
     c38:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
     c3c:	6a e0       	ldi	r22, 0x0A	; 10
     c3e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c42:	6c 01       	movw	r12, r24
     c44:	6d e7       	ldi	r22, 0x7D	; 125
     c46:	73 e0       	ldi	r23, 0x03	; 3
     c48:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     c4c:	64 e6       	ldi	r22, 0x64	; 100
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	c6 01       	movw	r24, r12
     c52:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
     c56:	6a e0       	ldi	r22, 0x0A	; 10
     c58:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c5c:	6c 01       	movw	r12, r24
     c5e:	6a e7       	ldi	r22, 0x7A	; 122
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     c66:	66 e0       	ldi	r22, 0x06	; 6
     c68:	c6 01       	movw	r24, r12
     c6a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c6e:	f6 c0       	rjmp	.+492    	; 0xe5c <_ZN9task_user3runEv+0x560>
     c70:	f7 01       	movw	r30, r14
     c72:	c6 80       	ldd	r12, Z+6	; 0x06
     c74:	d7 80       	ldd	r13, Z+7	; 0x07
     c76:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <last_created_task_pointer>
     c7a:	90 91 25 21 	lds	r25, 0x2125	; 0x802125 <last_created_task_pointer+0x1>
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	19 f0       	breq	.+6      	; 0xc88 <_ZN9task_user3runEv+0x38c>
     c82:	b6 01       	movw	r22, r12
     c84:	0e 94 95 14 	call	0x292a	; 0x292a <_ZN8frt_task19print_stack_in_listEP8emstream>
     c88:	6a e0       	ldi	r22, 0x0A	; 10
     c8a:	c6 01       	movw	r24, r12
     c8c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     c90:	3c 01       	movw	r6, r24
     c92:	60 e4       	ldi	r22, 0x40	; 64
     c94:	74 e0       	ldi	r23, 0x04	; 4
     c96:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     c9a:	6a e0       	ldi	r22, 0x0A	; 10
     c9c:	c3 01       	movw	r24, r6
     c9e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     ca2:	3c 01       	movw	r6, r24
     ca4:	65 e3       	ldi	r22, 0x35	; 53
     ca6:	74 e0       	ldi	r23, 0x04	; 4
     ca8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     cac:	6a e0       	ldi	r22, 0x0A	; 10
     cae:	c3 01       	movw	r24, r6
     cb0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     cb4:	3c 01       	movw	r6, r24
     cb6:	6f e2       	ldi	r22, 0x2F	; 47
     cb8:	74 e0       	ldi	r23, 0x04	; 4
     cba:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     cbe:	66 e0       	ldi	r22, 0x06	; 6
     cc0:	c3 01       	movw	r24, r6
     cc2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     cc6:	80 91 90 31 	lds	r24, 0x3190	; 0x803190 <portStackTopForTask>
     cca:	90 91 91 31 	lds	r25, 0x3191	; 0x803191 <portStackTopForTask+0x1>
     cce:	bc 01       	movw	r22, r24
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	01 e1       	ldi	r16, 0x11	; 17
     cd6:	21 2f       	mov	r18, r17
     cd8:	a6 01       	movw	r20, r12
     cda:	83 56       	subi	r24, 0x63	; 99
     cdc:	91 09       	sbc	r25, r1
     cde:	0e 94 21 13 	call	0x2642	; 0x2642 <_Z15hex_dump_memoryPhS_P8emstreambh>
     ce2:	bc c0       	rjmp	.+376    	; 0xe5c <_ZN9task_user3runEv+0x560>
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN9task_user18print_help_messageEv>
     cea:	b8 c0       	rjmp	.+368    	; 0xe5c <_ZN9task_user3runEv+0x560>
     cec:	6a e0       	ldi	r22, 0x0A	; 10
     cee:	d7 01       	movw	r26, r14
     cf0:	16 96       	adiw	r26, 0x06	; 6
     cf2:	8d 91       	ld	r24, X+
     cf4:	9c 91       	ld	r25, X
     cf6:	17 97       	sbiw	r26, 0x07	; 7
     cf8:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     cfc:	6c 01       	movw	r12, r24
     cfe:	6d eb       	ldi	r22, 0xBD	; 189
     d00:	74 e0       	ldi	r23, 0x04	; 4
     d02:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     d06:	66 e0       	ldi	r22, 0x06	; 6
     d08:	c6 01       	movw	r24, r12
     d0a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     d0e:	f7 01       	movw	r30, r14
     d10:	14 86       	std	Z+12, r1	; 0x0c
     d12:	15 86       	std	Z+13, r1	; 0x0d
     d14:	a3 c0       	rjmp	.+326    	; 0xe5c <_ZN9task_user3runEv+0x560>
     d16:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <begin>
     d1a:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <begin+0x1>
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	0f 92       	push	r0
     d24:	10 83       	st	Z, r17
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	6a e0       	ldi	r22, 0x0A	; 10
     d2c:	d7 01       	movw	r26, r14
     d2e:	16 96       	adiw	r26, 0x06	; 6
     d30:	8d 91       	ld	r24, X+
     d32:	9c 91       	ld	r25, X
     d34:	17 97       	sbiw	r26, 0x07	; 7
     d36:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     d3a:	6c 01       	movw	r12, r24
     d3c:	60 eb       	ldi	r22, 0xB0	; 176
     d3e:	74 e0       	ldi	r23, 0x04	; 4
     d40:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     d44:	66 e0       	ldi	r22, 0x06	; 6
     d46:	c6 01       	movw	r24, r12
     d48:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     d4c:	87 c0       	rjmp	.+270    	; 0xe5c <_ZN9task_user3runEv+0x560>
     d4e:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <go>
     d52:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <go+0x1>
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	0f 92       	push	r0
     d5c:	10 83       	st	Z, r17
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	6a e0       	ldi	r22, 0x0A	; 10
     d64:	f7 01       	movw	r30, r14
     d66:	86 81       	ldd	r24, Z+6	; 0x06
     d68:	97 81       	ldd	r25, Z+7	; 0x07
     d6a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     d6e:	6c 01       	movw	r12, r24
     d70:	6f e9       	ldi	r22, 0x9F	; 159
     d72:	74 e0       	ldi	r23, 0x04	; 4
     d74:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     d78:	66 e0       	ldi	r22, 0x06	; 6
     d7a:	c6 01       	movw	r24, r12
     d7c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     d80:	6d c0       	rjmp	.+218    	; 0xe5c <_ZN9task_user3runEv+0x560>
     d82:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <stop>
     d86:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <stop+0x1>
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	0f 92       	push	r0
     d90:	10 83       	st	Z, r17
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	6a e0       	ldi	r22, 0x0A	; 10
     d98:	d7 01       	movw	r26, r14
     d9a:	16 96       	adiw	r26, 0x06	; 6
     d9c:	8d 91       	ld	r24, X+
     d9e:	9c 91       	ld	r25, X
     da0:	17 97       	sbiw	r26, 0x07	; 7
     da2:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     da6:	6c 01       	movw	r12, r24
     da8:	60 e9       	ldi	r22, 0x90	; 144
     daa:	74 e0       	ldi	r23, 0x04	; 4
     dac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     db0:	66 e0       	ldi	r22, 0x06	; 6
     db2:	c6 01       	movw	r24, r12
     db4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     db8:	51 c0       	rjmp	.+162    	; 0xe5c <_ZN9task_user3runEv+0x560>
     dba:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
     dbe:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	0f 92       	push	r0
     dc8:	10 83       	st	Z, r17
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	6a e0       	ldi	r22, 0x0A	; 10
     dd0:	f7 01       	movw	r30, r14
     dd2:	86 81       	ldd	r24, Z+6	; 0x06
     dd4:	97 81       	ldd	r25, Z+7	; 0x07
     dd6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     dda:	6c 01       	movw	r12, r24
     ddc:	68 e6       	ldi	r22, 0x68	; 104
     dde:	74 e0       	ldi	r23, 0x04	; 4
     de0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     de4:	66 e0       	ldi	r22, 0x06	; 6
     de6:	c6 01       	movw	r24, r12
     de8:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     dec:	37 c0       	rjmp	.+110    	; 0xe5c <_ZN9task_user3runEv+0x560>
     dee:	d7 01       	movw	r26, r14
     df0:	16 96       	adiw	r26, 0x06	; 6
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	17 97       	sbiw	r26, 0x07	; 7
     df8:	dc 01       	movw	r26, r24
     dfa:	ed 91       	ld	r30, X+
     dfc:	fc 91       	ld	r31, X
     dfe:	02 80       	ldd	r0, Z+2	; 0x02
     e00:	f3 81       	ldd	r31, Z+3	; 0x03
     e02:	e0 2d       	mov	r30, r0
     e04:	19 95       	eicall
     e06:	6a e0       	ldi	r22, 0x0A	; 10
     e08:	f7 01       	movw	r30, r14
     e0a:	86 81       	ldd	r24, Z+6	; 0x06
     e0c:	97 81       	ldd	r25, Z+7	; 0x07
     e0e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     e12:	6c 01       	movw	r12, r24
     e14:	62 e6       	ldi	r22, 0x62	; 98
     e16:	74 e0       	ldi	r23, 0x04	; 4
     e18:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	c6 01       	movw	r24, r12
     e20:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     e24:	1b c0       	rjmp	.+54     	; 0xe5c <_ZN9task_user3runEv+0x560>
     e26:	6a e0       	ldi	r22, 0x0A	; 10
     e28:	86 81       	ldd	r24, Z+6	; 0x06
     e2a:	97 81       	ldd	r25, Z+7	; 0x07
     e2c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     e30:	7c 01       	movw	r14, r24
     e32:	65 e4       	ldi	r22, 0x45	; 69
     e34:	74 e0       	ldi	r23, 0x04	; 4
     e36:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
     e3a:	66 e0       	ldi	r22, 0x06	; 6
     e3c:	c7 01       	movw	r24, r14
     e3e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	88 ed       	ldi	r24, 0xD8	; 216
     e46:	08 b6       	in	r0, 0x38	; 56
     e48:	18 be       	out	0x38, r1	; 56
     e4a:	84 bf       	out	0x34, r24	; 52
     e4c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e50:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     e54:	81 fd       	sbrc	r24, 1
     e56:	fc cf       	rjmp	.-8      	; 0xe50 <_ZN9task_user3runEv+0x554>
     e58:	08 be       	out	0x38, r0	; 56
     e5a:	ff cf       	rjmp	.-2      	; 0xe5a <_ZN9task_user3runEv+0x55e>
     e5c:	f7 01       	movw	r30, r14
     e5e:	86 85       	ldd	r24, Z+14	; 0x0e
     e60:	97 85       	ldd	r25, Z+15	; 0x0f
     e62:	a0 89       	ldd	r26, Z+16	; 0x10
     e64:	b1 89       	ldd	r27, Z+17	; 0x11
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	a1 1d       	adc	r26, r1
     e6a:	b1 1d       	adc	r27, r1
     e6c:	86 87       	std	Z+14, r24	; 0x0e
     e6e:	97 87       	std	Z+15, r25	; 0x0f
     e70:	a0 8b       	std	Z+16, r26	; 0x10
     e72:	b1 8b       	std	Z+17, r27	; 0x11
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <vTaskDelay>
     e80:	67 cd       	rjmp	.-1330   	; 0x950 <_ZN9task_user3runEv+0x54>

00000e82 <_ZN22task_system_controller3runEv>:
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	28 97       	sbiw	r28, 0x08	; 8
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	1c 01       	movw	r2, r24
     e92:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
     e96:	69 83       	std	Y+1, r22	; 0x01
     e98:	7a 83       	std	Y+2, r23	; 0x02
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	d1 01       	movw	r26, r2
     ea0:	1c 96       	adiw	r26, 0x0c	; 12
     ea2:	8c 91       	ld	r24, X
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	09 f4       	brne	.+2      	; 0xeaa <_ZN22task_system_controller3runEv+0x28>
     ea8:	c7 c0       	rjmp	.+398    	; 0x1038 <_ZN22task_system_controller3runEv+0x1b6>
     eaa:	30 f4       	brcc	.+12     	; 0xeb8 <_ZN22task_system_controller3runEv+0x36>
     eac:	88 23       	and	r24, r24
     eae:	69 f0       	breq	.+26     	; 0xeca <_ZN22task_system_controller3runEv+0x48>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <_ZN22task_system_controller3runEv+0x34>
     eb4:	75 c0       	rjmp	.+234    	; 0xfa0 <_ZN22task_system_controller3runEv+0x11e>
     eb6:	f8 c2       	rjmp	.+1520   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	09 f4       	brne	.+2      	; 0xebe <_ZN22task_system_controller3runEv+0x3c>
     ebc:	b1 c1       	rjmp	.+866    	; 0x1220 <_ZN22task_system_controller3runEv+0x39e>
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <_ZN22task_system_controller3runEv+0x40>
     ec0:	ef c0       	rjmp	.+478    	; 0x10a0 <_ZN22task_system_controller3runEv+0x21e>
     ec2:	84 36       	cpi	r24, 0x64	; 100
     ec4:	09 f4       	brne	.+2      	; 0xec8 <_ZN22task_system_controller3runEv+0x46>
     ec6:	c6 c2       	rjmp	.+1420   	; 0x1454 <_ZN22task_system_controller3runEv+0x5d2>
     ec8:	ef c2       	rjmp	.+1502   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
     eca:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <linear_offset>
     ece:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <linear_offset+0x1>
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
     ed8:	10 82       	st	Z, r1
     eda:	11 82       	std	Z+1, r1	; 0x01
     edc:	12 82       	std	Z+2, r1	; 0x02
     ede:	13 82       	std	Z+3, r1	; 0x03
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	0f 92       	push	r0
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <begin>
     ef2:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <begin+0x1>
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <_ZN22task_system_controller3runEv+0x7c>
     efc:	d5 c2       	rjmp	.+1450   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
     efe:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
     f02:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	0f 92       	push	r0
     f0c:	10 82       	st	Z, r1
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <stop>
     f16:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <stop+0x1>
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	10 82       	st	Z, r1
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
     f2a:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	0f 92       	push	r0
     f34:	8c ed       	ldi	r24, 0xDC	; 220
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	0f 92       	push	r0
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <rightLimitSwitch>
     f4e:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <rightLimitSwitch+0x1>
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <_ZN22task_system_controller3runEv+0xd8>
     f58:	a7 c2       	rjmp	.+1358   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	0f 92       	push	r0
     f60:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <linear_position>
     f64:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <linear_position+0x1>
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	a2 81       	ldd	r26, Z+2	; 0x02
     f6e:	b3 81       	ldd	r27, Z+3	; 0x03
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <linear_offset>
     f78:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <linear_offset+0x1>
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	e1 e0       	ldi	r30, 0x01	; 1
     f90:	d1 01       	movw	r26, r2
     f92:	1c 96       	adiw	r26, 0x0c	; 12
     f94:	ec 93       	st	X, r30
     f96:	1c 97       	sbiw	r26, 0x0c	; 12
     f98:	f1 e0       	ldi	r31, 0x01	; 1
     f9a:	1d 96       	adiw	r26, 0x0d	; 13
     f9c:	fc 93       	st	X, r31
     f9e:	84 c2       	rjmp	.+1288   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
     fa0:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <begin>
     fa4:	f0 91 e5 20 	lds	r31, 0x20E5	; 0x8020e5 <begin+0x1>
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	0f 92       	push	r0
     fae:	10 82       	st	Z, r1
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
     fb8:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	0f 92       	push	r0
     fc2:	84 e2       	ldi	r24, 0x24	; 36
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	80 83       	st	Z, r24
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	0f 92       	push	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
     fdc:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
     fe0:	80 81       	ld	r24, Z
     fe2:	88 23       	and	r24, r24
     fe4:	a9 f0       	breq	.+42     	; 0x1010 <_ZN22task_system_controller3runEv+0x18e>
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	0f 92       	push	r0
     fec:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <linear_position>
     ff0:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <linear_position+0x1>
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	a2 81       	ldd	r26, Z+2	; 0x02
     ffa:	b3 81       	ldd	r27, Z+3	; 0x03
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	f1 01       	movw	r30, r2
    1002:	82 8b       	std	Z+18, r24	; 0x12
    1004:	93 8b       	std	Z+19, r25	; 0x13
    1006:	a4 8b       	std	Z+20, r26	; 0x14
    1008:	b5 8b       	std	Z+21, r27	; 0x15
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	84 87       	std	Z+12, r24	; 0x0c
    100e:	85 87       	std	Z+13, r24	; 0x0d
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	0f 92       	push	r0
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
    101e:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <_ZN22task_system_controller3runEv+0x1a8>
    1028:	3f c2       	rjmp	.+1150   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    102a:	d1 01       	movw	r26, r2
    102c:	1c 96       	adiw	r26, 0x0c	; 12
    102e:	1c 92       	st	X, r1
    1030:	1c 97       	sbiw	r26, 0x0c	; 12
    1032:	1d 96       	adiw	r26, 0x0d	; 13
    1034:	1c 92       	st	X, r1
    1036:	38 c2       	rjmp	.+1136   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1038:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
    103c:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
    1046:	10 82       	st	Z, r1
    1048:	11 82       	std	Z+1, r1	; 0x01
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	68 ec       	ldi	r22, 0xC8	; 200
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <vTaskDelay>
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	0f 92       	push	r0
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
    1068:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	71 f0       	breq	.+28     	; 0x108e <_ZN22task_system_controller3runEv+0x20c>
    1072:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
    1076:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	0f 92       	push	r0
    1080:	8c ed       	ldi	r24, 0xDC	; 220
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	80 83       	st	Z, r24
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0d c2       	rjmp	.+1050   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    108e:	e3 e0       	ldi	r30, 0x03	; 3
    1090:	d1 01       	movw	r26, r2
    1092:	1c 96       	adiw	r26, 0x0c	; 12
    1094:	ec 93       	st	X, r30
    1096:	1c 97       	sbiw	r26, 0x0c	; 12
    1098:	f3 e0       	ldi	r31, 0x03	; 3
    109a:	1d 96       	adiw	r26, 0x0d	; 13
    109c:	fc 93       	st	X, r31
    109e:	04 c2       	rjmp	.+1032   	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	d1 01       	movw	r26, r2
    10aa:	52 96       	adiw	r26, 0x12	; 18
    10ac:	6d 91       	ld	r22, X+
    10ae:	7d 91       	ld	r23, X+
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	55 97       	sbiw	r26, 0x15	; 21
    10b6:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    10ba:	f1 01       	movw	r30, r2
    10bc:	66 8b       	std	Z+22, r22	; 0x16
    10be:	77 8b       	std	Z+23, r23	; 0x17
    10c0:	80 8f       	std	Z+24, r24	; 0x18
    10c2:	91 8f       	std	Z+25, r25	; 0x19
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	0f 92       	push	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <linear_position>
    10d2:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <linear_position+0x1>
    10d6:	20 81       	ld	r18, Z
    10d8:	31 81       	ldd	r19, Z+1	; 0x01
    10da:	42 81       	ldd	r20, Z+2	; 0x02
    10dc:	53 81       	ldd	r21, Z+3	; 0x03
    10de:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    10e2:	6b 01       	movw	r12, r22
    10e4:	7c 01       	movw	r14, r24
    10e6:	d1 01       	movw	r26, r2
    10e8:	5a 96       	adiw	r26, 0x1a	; 26
    10ea:	6d 93       	st	X+, r22
    10ec:	7d 93       	st	X+, r23
    10ee:	8d 93       	st	X+, r24
    10f0:	9c 93       	st	X, r25
    10f2:	5d 97       	sbiw	r26, 0x1d	; 29
    10f4:	5e 96       	adiw	r26, 0x1e	; 30
    10f6:	2d 91       	ld	r18, X+
    10f8:	3d 91       	ld	r19, X+
    10fa:	4d 91       	ld	r20, X+
    10fc:	5c 91       	ld	r21, X
    10fe:	91 97       	sbiw	r26, 0x21	; 33
    1100:	0e 94 af 21 	call	0x435e	; 0x435e <__addsf3>
    1104:	4b 01       	movw	r8, r22
    1106:	5c 01       	movw	r10, r24
    1108:	f1 01       	movw	r30, r2
    110a:	66 8f       	std	Z+30, r22	; 0x1e
    110c:	77 8f       	std	Z+31, r23	; 0x1f
    110e:	80 a3       	std	Z+32, r24	; 0x20
    1110:	91 a3       	std	Z+33, r25	; 0x21
    1112:	00 91 e6 20 	lds	r16, 0x20E6	; 0x8020e6 <motor_command>
    1116:	10 91 e7 20 	lds	r17, 0x20E7	; 0x8020e7 <motor_command+0x1>
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	0f 92       	push	r0
    1120:	22 a1       	ldd	r18, Z+34	; 0x22
    1122:	33 a1       	ldd	r19, Z+35	; 0x23
    1124:	44 a1       	ldd	r20, Z+36	; 0x24
    1126:	55 a1       	ldd	r21, Z+37	; 0x25
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	f1 01       	movw	r30, r2
    1136:	26 a1       	ldd	r18, Z+38	; 0x26
    1138:	37 a1       	ldd	r19, Z+39	; 0x27
    113a:	40 a5       	ldd	r20, Z+40	; 0x28
    113c:	51 a5       	ldd	r21, Z+41	; 0x29
    113e:	c5 01       	movw	r24, r10
    1140:	b4 01       	movw	r22, r8
    1142:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1146:	9b 01       	movw	r18, r22
    1148:	ac 01       	movw	r20, r24
    114a:	c7 01       	movw	r24, r14
    114c:	b6 01       	movw	r22, r12
    114e:	0e 94 af 21 	call	0x435e	; 0x435e <__addsf3>
    1152:	0e 94 8d 22 	call	0x451a	; 0x451a <__fixsfsi>
    1156:	d8 01       	movw	r26, r16
    1158:	6d 93       	st	X+, r22
    115a:	7c 93       	st	X, r23
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	0f 92       	push	r0
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
    116e:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
    1172:	80 81       	ld	r24, Z
    1174:	81 11       	cpse	r24, r1
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <_ZN22task_system_controller3runEv+0x30e>
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	0f 92       	push	r0
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <rightLimitSwitch>
    1186:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <rightLimitSwitch+0x1>
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	a1 f0       	breq	.+40     	; 0x11b8 <_ZN22task_system_controller3runEv+0x336>
    1190:	f1 01       	movw	r30, r2
    1192:	06 81       	ldd	r16, Z+6	; 0x06
    1194:	17 81       	ldd	r17, Z+7	; 0x07
    1196:	6e e6       	ldi	r22, 0x6E	; 110
    1198:	70 e2       	ldi	r23, 0x20	; 32
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    11a0:	66 e0       	ldi	r22, 0x06	; 6
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    11a8:	e4 e6       	ldi	r30, 0x64	; 100
    11aa:	d1 01       	movw	r26, r2
    11ac:	1c 96       	adiw	r26, 0x0c	; 12
    11ae:	ec 93       	st	X, r30
    11b0:	1c 97       	sbiw	r26, 0x0c	; 12
    11b2:	f4 e6       	ldi	r31, 0x64	; 100
    11b4:	1d 96       	adiw	r26, 0x0d	; 13
    11b6:	fc 93       	st	X, r31
    11b8:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
    11bc:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	0f 92       	push	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	b1 f0       	breq	.+44     	; 0x11fc <_ZN22task_system_controller3runEv+0x37a>
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	0f 92       	push	r0
    11d6:	10 82       	st	Z, r1
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <stop>
    11e0:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <stop+0x1>
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	0f 92       	push	r0
    11ea:	10 82       	st	Z, r1
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	d1 01       	movw	r26, r2
    11f2:	1c 96       	adiw	r26, 0x0c	; 12
    11f4:	1c 92       	st	X, r1
    11f6:	1c 97       	sbiw	r26, 0x0c	; 12
    11f8:	1d 96       	adiw	r26, 0x0d	; 13
    11fa:	1c 92       	st	X, r1
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	0f 92       	push	r0
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <go>
    120a:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <go+0x1>
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	09 f4       	brne	.+2      	; 0x1216 <_ZN22task_system_controller3runEv+0x394>
    1214:	49 c1       	rjmp	.+658    	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	f1 01       	movw	r30, r2
    121a:	84 87       	std	Z+12, r24	; 0x0c
    121c:	85 87       	std	Z+13, r24	; 0x0d
    121e:	44 c1       	rjmp	.+648    	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	0f 92       	push	r0
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <pendulum_encoder>
    122e:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <pendulum_encoder+0x1>
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	07 2e       	mov	r0, r23
    1238:	00 0c       	add	r0, r0
    123a:	88 0b       	sbc	r24, r24
    123c:	99 0b       	sbc	r25, r25
    123e:	0e 94 c5 22 	call	0x458a	; 0x458a <__floatsisf>
    1242:	d1 01       	movw	r26, r2
    1244:	9a 96       	adiw	r26, 0x2a	; 42
    1246:	6d 93       	st	X+, r22
    1248:	7d 93       	st	X+, r23
    124a:	8d 93       	st	X+, r24
    124c:	9c 93       	st	X, r25
    124e:	9d 97       	sbiw	r26, 0x2d	; 45
    1250:	e0 91 e2 20 	lds	r30, 0x20E2	; 0x8020e2 <go>
    1254:	f0 91 e3 20 	lds	r31, 0x20E3	; 0x8020e3 <go+0x1>
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
    125e:	10 82       	st	Z, r1
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <linear_position>
    1272:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <linear_position+0x1>
    1276:	56 96       	adiw	r26, 0x16	; 22
    1278:	2d 91       	ld	r18, X+
    127a:	3d 91       	ld	r19, X+
    127c:	4d 91       	ld	r20, X+
    127e:	5c 91       	ld	r21, X
    1280:	59 97       	sbiw	r26, 0x19	; 25
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    128e:	4b 01       	movw	r8, r22
    1290:	5c 01       	movw	r10, r24
    1292:	f1 01       	movw	r30, r2
    1294:	66 a7       	std	Z+46, r22	; 0x2e
    1296:	77 a7       	std	Z+47, r23	; 0x2f
    1298:	80 ab       	std	Z+48, r24	; 0x30
    129a:	91 ab       	std	Z+49, r25	; 0x31
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	40 b0       	in	r4, 0x00	; 0
    12a4:	51 b0       	in	r5, 0x01	; 1
    12a6:	62 b0       	in	r6, 0x02	; 2
    12a8:	73 b0       	in	r7, 0x03	; 3
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	d1 01       	movw	r26, r2
    12b0:	42 aa       	std	Z+50, r4	; 0x32
    12b2:	53 aa       	std	Z+51, r5	; 0x33
    12b4:	64 aa       	std	Z+52, r6	; 0x34
    12b6:	75 aa       	std	Z+53, r7	; 0x35
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	0f 92       	push	r0
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <pendulum_encoder_radians>
    12c6:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <pendulum_encoder_radians+0x1>
    12ca:	9a 96       	adiw	r26, 0x2a	; 42
    12cc:	2d 91       	ld	r18, X+
    12ce:	3d 91       	ld	r19, X+
    12d0:	4d 91       	ld	r20, X+
    12d2:	5c 91       	ld	r21, X
    12d4:	9d 97       	sbiw	r26, 0x2d	; 45
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    12e2:	6d 83       	std	Y+5, r22	; 0x05
    12e4:	7e 83       	std	Y+6, r23	; 0x06
    12e6:	8f 83       	std	Y+7, r24	; 0x07
    12e8:	98 87       	std	Y+8, r25	; 0x08
    12ea:	f1 01       	movw	r30, r2
    12ec:	66 ab       	std	Z+54, r22	; 0x36
    12ee:	77 ab       	std	Z+55, r23	; 0x37
    12f0:	80 af       	std	Z+56, r24	; 0x38
    12f2:	91 af       	std	Z+57, r25	; 0x39
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	0f 92       	push	r0
    12fa:	e0 91 ea 20 	lds	r30, 0x20EA	; 0x8020ea <pendulum_encoder_w_radians>
    12fe:	f0 91 eb 20 	lds	r31, 0x20EB	; 0x8020eb <pendulum_encoder_w_radians+0x1>
    1302:	c0 80       	ld	r12, Z
    1304:	d1 80       	ldd	r13, Z+1	; 0x01
    1306:	e2 80       	ldd	r14, Z+2	; 0x02
    1308:	f3 80       	ldd	r15, Z+3	; 0x03
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	d1 01       	movw	r26, r2
    1310:	da 96       	adiw	r26, 0x3a	; 58
    1312:	cd 92       	st	X+, r12
    1314:	dd 92       	st	X+, r13
    1316:	ed 92       	st	X+, r14
    1318:	fc 92       	st	X, r15
    131a:	dd 97       	sbiw	r26, 0x3d	; 61
    131c:	00 91 e6 20 	lds	r16, 0x20E6	; 0x8020e6 <motor_command>
    1320:	10 91 e7 20 	lds	r17, 0x20E7	; 0x8020e7 <motor_command+0x1>
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	0f 92       	push	r0
    132a:	2a ef       	ldi	r18, 0xFA	; 250
    132c:	35 e5       	ldi	r19, 0x55	; 85
    132e:	44 e3       	ldi	r20, 0x34	; 52
    1330:	50 e4       	ldi	r21, 0x40	; 64
    1332:	c3 01       	movw	r24, r6
    1334:	b2 01       	movw	r22, r4
    1336:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    133a:	2b 01       	movw	r4, r22
    133c:	3c 01       	movw	r6, r24
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e7       	ldi	r20, 0x70	; 112
    1344:	52 e4       	ldi	r21, 0x42	; 66
    1346:	c5 01       	movw	r24, r10
    1348:	b4 01       	movw	r22, r8
    134a:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	c3 01       	movw	r24, r6
    1354:	b2 01       	movw	r22, r4
    1356:	0e 94 af 21 	call	0x435e	; 0x435e <__addsf3>
    135a:	4b 01       	movw	r8, r22
    135c:	5c 01       	movw	r10, r24
    135e:	2e e0       	ldi	r18, 0x0E	; 14
    1360:	3a ee       	ldi	r19, 0xEA	; 234
    1362:	44 ef       	ldi	r20, 0xF4	; 244
    1364:	51 ec       	ldi	r21, 0xC1	; 193
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	c5 01       	movw	r24, r10
    1378:	b4 01       	movw	r22, r8
    137a:	0e 94 af 21 	call	0x435e	; 0x435e <__addsf3>
    137e:	4b 01       	movw	r8, r22
    1380:	5c 01       	movw	r10, r24
    1382:	20 ea       	ldi	r18, 0xA0	; 160
    1384:	34 e6       	ldi	r19, 0x64	; 100
    1386:	43 ec       	ldi	r20, 0xC3	; 195
    1388:	5f eb       	ldi	r21, 0xBF	; 191
    138a:	c7 01       	movw	r24, r14
    138c:	b6 01       	movw	r22, r12
    138e:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	c5 01       	movw	r24, r10
    1398:	b4 01       	movw	r22, r8
    139a:	0e 94 af 21 	call	0x435e	; 0x435e <__addsf3>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	44 e8       	ldi	r20, 0x84	; 132
    13a4:	52 e4       	ldi	r21, 0x42	; 66
    13a6:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    13aa:	0e 94 8d 22 	call	0x451a	; 0x451a <__fixsfsi>
    13ae:	f8 01       	movw	r30, r16
    13b0:	60 83       	st	Z, r22
    13b2:	71 83       	std	Z+1, r23	; 0x01
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	0f 92       	push	r0
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
    13c6:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
    13ca:	80 81       	ld	r24, Z
    13cc:	81 11       	cpse	r24, r1
    13ce:	0c c0       	rjmp	.+24     	; 0x13e8 <_ZN22task_system_controller3runEv+0x566>
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	0f 92       	push	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <rightLimitSwitch>
    13de:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <rightLimitSwitch+0x1>
    13e2:	80 81       	ld	r24, Z
    13e4:	88 23       	and	r24, r24
    13e6:	91 f0       	breq	.+36     	; 0x140c <_ZN22task_system_controller3runEv+0x58a>
    13e8:	d1 01       	movw	r26, r2
    13ea:	16 96       	adiw	r26, 0x06	; 6
    13ec:	0d 91       	ld	r16, X+
    13ee:	1c 91       	ld	r17, X
    13f0:	17 97       	sbiw	r26, 0x07	; 7
    13f2:	6e e6       	ldi	r22, 0x6E	; 110
    13f4:	70 e2       	ldi	r23, 0x20	; 32
    13f6:	c8 01       	movw	r24, r16
    13f8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    13fc:	66 e0       	ldi	r22, 0x06	; 6
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    1404:	84 e6       	ldi	r24, 0x64	; 100
    1406:	f1 01       	movw	r30, r2
    1408:	84 87       	std	Z+12, r24	; 0x0c
    140a:	85 87       	std	Z+13, r24	; 0x0d
    140c:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
    1410:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	0f 92       	push	r0
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	80 81       	ld	r24, Z
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <_ZN22task_system_controller3runEv+0x5a4>
    1424:	41 c0       	rjmp	.+130    	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	0f 92       	push	r0
    142c:	10 82       	st	Z, r1
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <stop>
    1436:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <stop+0x1>
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	0f 92       	push	r0
    1440:	10 82       	st	Z, r1
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	d1 01       	movw	r26, r2
    1448:	1c 96       	adiw	r26, 0x0c	; 12
    144a:	1c 92       	st	X, r1
    144c:	1c 97       	sbiw	r26, 0x0c	; 12
    144e:	1d 96       	adiw	r26, 0x0d	; 13
    1450:	1c 92       	st	X, r1
    1452:	2a c0       	rjmp	.+84     	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1454:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
    1458:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	0f 92       	push	r0
    1462:	10 82       	st	Z, r1
    1464:	11 82       	std	Z+1, r1	; 0x01
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <__data_end>
    146e:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <__data_end+0x1>
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	0f 92       	push	r0
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	99 f0       	breq	.+38     	; 0x14a8 <_ZN22task_system_controller3runEv+0x626>
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	0f 92       	push	r0
    1488:	10 82       	st	Z, r1
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <stop>
    1492:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <stop+0x1>
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	0f 92       	push	r0
    149c:	10 82       	st	Z, r1
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	f1 01       	movw	r30, r2
    14a4:	14 86       	std	Z+12, r1	; 0x0c
    14a6:	15 86       	std	Z+13, r1	; 0x0d
    14a8:	f1 01       	movw	r30, r2
    14aa:	86 85       	ldd	r24, Z+14	; 0x0e
    14ac:	97 85       	ldd	r25, Z+15	; 0x0f
    14ae:	a0 89       	ldd	r26, Z+16	; 0x10
    14b0:	b1 89       	ldd	r27, Z+17	; 0x11
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	a1 1d       	adc	r26, r1
    14b6:	b1 1d       	adc	r27, r1
    14b8:	86 87       	std	Z+14, r24	; 0x0e
    14ba:	97 87       	std	Z+15, r25	; 0x0f
    14bc:	a0 8b       	std	Z+16, r26	; 0x10
    14be:	b1 8b       	std	Z+17, r27	; 0x11
    14c0:	41 e0       	ldi	r20, 0x01	; 1
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vTaskDelayUntil>
    14d0:	e6 cc       	rjmp	.-1588   	; 0xe9e <_ZN22task_system_controller3runEv+0x1c>

000014d2 <_ZN21task_pendulum_encoder3runEv>:
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <_ZN21task_pendulum_encoder3runEv+0x6>
    14d8:	1f 92       	push	r1
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	7c 01       	movw	r14, r24
    14e0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
    14e4:	69 83       	std	Y+1, r22	; 0x01
    14e6:	7a 83       	std	Y+2, r23	; 0x02
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	e0 e8       	ldi	r30, 0x80	; 128
    14ee:	f6 e0       	ldi	r31, 0x06	; 6
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	82 83       	std	Z+2, r24	; 0x02
    14f4:	80 8b       	std	Z+16, r24	; 0x10
    14f6:	81 8b       	std	Z+17, r24	; 0x11
    14f8:	e0 e8       	ldi	r30, 0x80	; 128
    14fa:	f1 e0       	ldi	r31, 0x01	; 1
    14fc:	80 e7       	ldi	r24, 0x70	; 112
    14fe:	82 83       	std	Z+2, r24	; 0x02
    1500:	89 e0       	ldi	r24, 0x09	; 9
    1502:	82 87       	std	Z+10, r24	; 0x0a
    1504:	e0 e4       	ldi	r30, 0x40	; 64
    1506:	f8 e0       	ldi	r31, 0x08	; 8
    1508:	8a e6       	ldi	r24, 0x6A	; 106
    150a:	83 83       	std	Z+3, r24	; 0x03
    150c:	8d ec       	ldi	r24, 0xCD	; 205
    150e:	97 e0       	ldi	r25, 0x07	; 7
    1510:	86 a3       	std	Z+38, r24	; 0x26
    1512:	97 a3       	std	Z+39, r25	; 0x27
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 83       	st	Z, r24
    1518:	68 94       	set
    151a:	88 24       	eor	r8, r8
    151c:	86 f8       	bld	r8, 6
    151e:	99 24       	eor	r9, r9
    1520:	93 f8       	bld	r9, 3
    1522:	f4 01       	movw	r30, r8
    1524:	60 a1       	ldd	r22, Z+32	; 0x20
    1526:	71 a1       	ldd	r23, Z+33	; 0x21
    1528:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <pendulum_encoder>
    152c:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <pendulum_encoder+0x1>
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	0f 92       	push	r0
    1536:	60 83       	st	Z, r22
    1538:	71 83       	std	Z+1, r23	; 0x01
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	07 2e       	mov	r0, r23
    1540:	00 0c       	add	r0, r0
    1542:	88 0b       	sbc	r24, r24
    1544:	99 0b       	sbc	r25, r25
    1546:	0e 94 c5 22 	call	0x458a	; 0x458a <__floatsisf>
    154a:	28 e2       	ldi	r18, 0x28	; 40
    154c:	3f e0       	ldi	r19, 0x0F	; 15
    154e:	49 ec       	ldi	r20, 0xC9	; 201
    1550:	50 e4       	ldi	r21, 0x40	; 64
    1552:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 ea       	ldi	r19, 0xA0	; 160
    155a:	49 ef       	ldi	r20, 0xF9	; 249
    155c:	54 e4       	ldi	r21, 0x44	; 68
    155e:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divsf3>
    1562:	a6 2e       	mov	r10, r22
    1564:	b7 2e       	mov	r11, r23
    1566:	c8 2e       	mov	r12, r24
    1568:	d9 2e       	mov	r13, r25
    156a:	e0 91 ec 20 	lds	r30, 0x20EC	; 0x8020ec <pendulum_encoder_radians>
    156e:	f0 91 ed 20 	lds	r31, 0x20ED	; 0x8020ed <pendulum_encoder_radians+0x1>
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	0f 92       	push	r0
    1578:	86 2f       	mov	r24, r22
    157a:	9b 2d       	mov	r25, r11
    157c:	ac 2d       	mov	r26, r12
    157e:	bd 2d       	mov	r27, r13
    1580:	80 83       	st	Z, r24
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	a2 83       	std	Z+2, r26	; 0x02
    1586:	b3 83       	std	Z+3, r27	; 0x03
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	00 91 ea 20 	lds	r16, 0x20EA	; 0x8020ea <pendulum_encoder_w_radians>
    1590:	10 91 eb 20 	lds	r17, 0x20EB	; 0x8020eb <pendulum_encoder_w_radians+0x1>
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	0f 92       	push	r0
    159a:	24 2d       	mov	r18, r4
    159c:	35 2d       	mov	r19, r5
    159e:	47 2d       	mov	r20, r7
    15a0:	56 2d       	mov	r21, r6
    15a2:	6a 2d       	mov	r22, r10
    15a4:	7b 2d       	mov	r23, r11
    15a6:	8c 2d       	mov	r24, r12
    15a8:	9d 2d       	mov	r25, r13
    15aa:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    15ae:	f8 01       	movw	r30, r16
    15b0:	60 83       	st	Z, r22
    15b2:	71 83       	std	Z+1, r23	; 0x01
    15b4:	82 83       	std	Z+2, r24	; 0x02
    15b6:	93 83       	std	Z+3, r25	; 0x03
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	f7 01       	movw	r30, r14
    15be:	86 85       	ldd	r24, Z+14	; 0x0e
    15c0:	97 85       	ldd	r25, Z+15	; 0x0f
    15c2:	a0 89       	ldd	r26, Z+16	; 0x10
    15c4:	b1 89       	ldd	r27, Z+17	; 0x11
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	a1 1d       	adc	r26, r1
    15ca:	b1 1d       	adc	r27, r1
    15cc:	86 87       	std	Z+14, r24	; 0x0e
    15ce:	97 87       	std	Z+15, r25	; 0x0f
    15d0:	a0 8b       	std	Z+16, r26	; 0x10
    15d2:	b1 8b       	std	Z+17, r27	; 0x11
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vTaskDelayUntil>
    15e4:	4a 2c       	mov	r4, r10
    15e6:	5b 2c       	mov	r5, r11
    15e8:	7c 2c       	mov	r7, r12
    15ea:	6d 2c       	mov	r6, r13
    15ec:	9a cf       	rjmp	.-204    	; 0x1522 <_ZN21task_pendulum_encoder3runEv+0x50>

000015ee <_ZN18task_motor_encoder3runEv>:
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <_ZN18task_motor_encoder3runEv+0x6>
    15f4:	1f 92       	push	r1
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8c 01       	movw	r16, r24
    15fc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
    1600:	69 83       	std	Y+1, r22	; 0x01
    1602:	7a 83       	std	Y+2, r23	; 0x02
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	f6 e0       	ldi	r31, 0x06	; 6
    160c:	8c e0       	ldi	r24, 0x0C	; 12
    160e:	82 83       	std	Z+2, r24	; 0x02
    1610:	82 89       	ldd	r24, Z+18	; 0x12
    1612:	83 60       	ori	r24, 0x03	; 3
    1614:	82 8b       	std	Z+18, r24	; 0x12
    1616:	83 89       	ldd	r24, Z+19	; 0x13
    1618:	83 60       	ori	r24, 0x03	; 3
    161a:	83 8b       	std	Z+19, r24	; 0x13
    161c:	e0 e8       	ldi	r30, 0x80	; 128
    161e:	f1 e0       	ldi	r31, 0x01	; 1
    1620:	82 e7       	ldi	r24, 0x72	; 114
    1622:	80 83       	st	Z, r24
    1624:	89 e0       	ldi	r24, 0x09	; 9
    1626:	80 87       	std	Z+8, r24	; 0x08
    1628:	e0 e0       	ldi	r30, 0x00	; 0
    162a:	f9 e0       	ldi	r31, 0x09	; 9
    162c:	88 e6       	ldi	r24, 0x68	; 104
    162e:	83 83       	std	Z+3, r24	; 0x03
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	86 a3       	std	Z+38, r24	; 0x26
    1636:	97 a3       	std	Z+39, r25	; 0x27
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 83       	st	Z, r24
    163c:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <linear_offset>
    1640:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <linear_offset+0x1>
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	0f 92       	push	r0
    164a:	10 82       	st	Z, r1
    164c:	11 82       	std	Z+1, r1	; 0x01
    164e:	12 82       	std	Z+2, r1	; 0x02
    1650:	13 82       	std	Z+3, r1	; 0x03
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	61 2c       	mov	r6, r1
    1658:	71 2c       	mov	r7, r1
    165a:	81 2c       	mov	r8, r1
    165c:	91 2c       	mov	r9, r1
    165e:	0f 2e       	mov	r0, r31
    1660:	e1 2c       	mov	r14, r1
    1662:	f9 e0       	ldi	r31, 0x09	; 9
    1664:	ff 2e       	mov	r15, r31
    1666:	f0 2d       	mov	r31, r0
    1668:	f7 01       	movw	r30, r14
    166a:	60 a1       	ldd	r22, Z+32	; 0x20
    166c:	71 a1       	ldd	r23, Z+33	; 0x21
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	0f 92       	push	r0
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	07 2e       	mov	r0, r23
    167a:	00 0c       	add	r0, r0
    167c:	88 0b       	sbc	r24, r24
    167e:	99 0b       	sbc	r25, r25
    1680:	0e 94 c5 22 	call	0x458a	; 0x458a <__floatsisf>
    1684:	2f e8       	ldi	r18, 0x8F	; 143
    1686:	32 ec       	ldi	r19, 0xC2	; 194
    1688:	45 e7       	ldi	r20, 0x75	; 117
    168a:	5d e3       	ldi	r21, 0x3D	; 61
    168c:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    1690:	2f e6       	ldi	r18, 0x6F	; 111
    1692:	32 e1       	ldi	r19, 0x12	; 18
    1694:	43 e8       	ldi	r20, 0x83	; 131
    1696:	5a e3       	ldi	r21, 0x3A	; 58
    1698:	0e 94 51 23 	call	0x46a2	; 0x46a2 <__mulsf3>
    169c:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <linear_offset>
    16a0:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <linear_offset+0x1>
    16a4:	20 81       	ld	r18, Z
    16a6:	31 81       	ldd	r19, Z+1	; 0x01
    16a8:	42 81       	ldd	r20, Z+2	; 0x02
    16aa:	53 81       	ldd	r21, Z+3	; 0x03
    16ac:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    16b0:	a6 2e       	mov	r10, r22
    16b2:	b7 2e       	mov	r11, r23
    16b4:	c8 2e       	mov	r12, r24
    16b6:	d9 2e       	mov	r13, r25
    16b8:	e0 91 f0 20 	lds	r30, 0x20F0	; 0x8020f0 <linear_position>
    16bc:	f0 91 f1 20 	lds	r31, 0x20F1	; 0x8020f1 <linear_position+0x1>
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	0f 92       	push	r0
    16c6:	86 2f       	mov	r24, r22
    16c8:	9b 2d       	mov	r25, r11
    16ca:	ac 2d       	mov	r26, r12
    16cc:	bd 2d       	mov	r27, r13
    16ce:	80 83       	st	Z, r24
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	b3 83       	std	Z+3, r27	; 0x03
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	0f 92       	push	r0
    16e0:	26 2d       	mov	r18, r6
    16e2:	37 2d       	mov	r19, r7
    16e4:	48 2d       	mov	r20, r8
    16e6:	59 2d       	mov	r21, r9
    16e8:	6a 2d       	mov	r22, r10
    16ea:	7b 2d       	mov	r23, r11
    16ec:	8c 2d       	mov	r24, r12
    16ee:	9d 2d       	mov	r25, r13
    16f0:	0e 94 ae 21 	call	0x435c	; 0x435c <__subsf3>
    16f4:	60 b9       	out	0x00, r22	; 0
    16f6:	71 b9       	out	0x01, r23	; 1
    16f8:	82 b9       	out	0x02, r24	; 2
    16fa:	93 b9       	out	0x03, r25	; 3
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	f8 01       	movw	r30, r16
    1702:	86 85       	ldd	r24, Z+14	; 0x0e
    1704:	97 85       	ldd	r25, Z+15	; 0x0f
    1706:	a0 89       	ldd	r26, Z+16	; 0x10
    1708:	b1 89       	ldd	r27, Z+17	; 0x11
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	a1 1d       	adc	r26, r1
    170e:	b1 1d       	adc	r27, r1
    1710:	86 87       	std	Z+14, r24	; 0x0e
    1712:	97 87       	std	Z+15, r25	; 0x0f
    1714:	a0 8b       	std	Z+16, r26	; 0x10
    1716:	b1 8b       	std	Z+17, r27	; 0x11
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vTaskDelayUntil>
    1728:	6a 2c       	mov	r6, r10
    172a:	7b 2c       	mov	r7, r11
    172c:	8c 2c       	mov	r8, r12
    172e:	9d 2c       	mov	r9, r13
    1730:	9b cf       	rjmp	.-202    	; 0x1668 <_ZN18task_motor_encoder3runEv+0x7a>

00001732 <_ZN18task_motor_command3runEv>:
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	00 d0       	rcall	.+0      	; 0x1738 <_ZN18task_motor_command3runEv+0x6>
    1738:	1f 92       	push	r1
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	8c 01       	movw	r16, r24
    1740:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
    1744:	69 83       	std	Y+1, r22	; 0x01
    1746:	7a 83       	std	Y+2, r23	; 0x02
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	a0 e4       	ldi	r26, 0x40	; 64
    174e:	b6 e0       	ldi	r27, 0x06	; 6
    1750:	87 e0       	ldi	r24, 0x07	; 7
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	8c 93       	st	X, r24
    1756:	11 97       	sbiw	r26, 0x01	; 1
    1758:	84 e0       	ldi	r24, 0x04	; 4
    175a:	15 96       	adiw	r26, 0x05	; 5
    175c:	8c 93       	st	X, r24
    175e:	15 97       	sbiw	r26, 0x05	; 5
    1760:	e0 e0       	ldi	r30, 0x00	; 0
    1762:	f8 e0       	ldi	r31, 0x08	; 8
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 83       	st	Z, r24
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	81 83       	std	Z+1, r24	; 0x01
    176c:	a6 a3       	std	Z+38, r26	; 0x26
    176e:	b7 a3       	std	Z+39, r27	; 0x27
    1770:	10 a6       	std	Z+40, r1	; 0x28
    1772:	11 a6       	std	Z+41, r1	; 0x29
    1774:	12 a6       	std	Z+42, r1	; 0x2a
    1776:	13 a6       	std	Z+43, r1	; 0x2b
    1778:	81 81       	ldd	r24, Z+1	; 0x01
    177a:	80 63       	ori	r24, 0x30	; 48
    177c:	81 83       	std	Z+1, r24	; 0x01
    177e:	e1 2c       	mov	r14, r1
    1780:	68 94       	set
    1782:	ff 24       	eor	r15, r15
    1784:	f3 f8       	bld	r15, 3
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	0f 92       	push	r0
    178c:	e0 91 e6 20 	lds	r30, 0x20E6	; 0x8020e6 <motor_command>
    1790:	f0 91 e7 20 	lds	r31, 0x20E7	; 0x8020e7 <motor_command+0x1>
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	f8 01       	movw	r30, r16
    179e:	82 8b       	std	Z+18, r24	; 0x12
    17a0:	93 8b       	std	Z+19, r25	; 0x13
    17a2:	99 23       	and	r25, r25
    17a4:	34 f0       	brlt	.+12     	; 0x17b2 <_ZN18task_motor_command3runEv+0x80>
    17a6:	f7 01       	movw	r30, r14
    17a8:	80 a7       	std	Z+40, r24	; 0x28
    17aa:	91 a7       	std	Z+41, r25	; 0x29
    17ac:	12 a6       	std	Z+42, r1	; 0x2a
    17ae:	13 a6       	std	Z+43, r1	; 0x2b
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <_ZN18task_motor_command3runEv+0x98>
    17b2:	f7 01       	movw	r30, r14
    17b4:	10 a6       	std	Z+40, r1	; 0x28
    17b6:	11 a6       	std	Z+41, r1	; 0x29
    17b8:	f8 01       	movw	r30, r16
    17ba:	82 89       	ldd	r24, Z+18	; 0x12
    17bc:	93 89       	ldd	r25, Z+19	; 0x13
    17be:	91 95       	neg	r25
    17c0:	81 95       	neg	r24
    17c2:	91 09       	sbc	r25, r1
    17c4:	f7 01       	movw	r30, r14
    17c6:	82 a7       	std	Z+42, r24	; 0x2a
    17c8:	93 a7       	std	Z+43, r25	; 0x2b
    17ca:	f8 01       	movw	r30, r16
    17cc:	86 85       	ldd	r24, Z+14	; 0x0e
    17ce:	97 85       	ldd	r25, Z+15	; 0x0f
    17d0:	a0 89       	ldd	r26, Z+16	; 0x10
    17d2:	b1 89       	ldd	r27, Z+17	; 0x11
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	a1 1d       	adc	r26, r1
    17d8:	b1 1d       	adc	r27, r1
    17da:	86 87       	std	Z+14, r24	; 0x0e
    17dc:	97 87       	std	Z+15, r25	; 0x0f
    17de:	a0 8b       	std	Z+16, r26	; 0x10
    17e0:	b1 8b       	std	Z+17, r27	; 0x11
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vTaskDelayUntil>
    17f2:	c9 cf       	rjmp	.-110    	; 0x1786 <_ZN18task_motor_command3runEv+0x54>

000017f4 <_ZN17task_limit_switch3runEv>:
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <_ZN17task_limit_switch3runEv+0x6>
    17fa:	1f 92       	push	r1
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8c 01       	movw	r16, r24
    1802:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
    1806:	69 83       	std	Y+1, r22	; 0x01
    1808:	7a 83       	std	Y+2, r23	; 0x02
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	e0 e6       	ldi	r30, 0x60	; 96
    1810:	f6 e0       	ldi	r31, 0x06	; 6
    1812:	90 81       	ld	r25, Z
    1814:	d8 01       	movw	r26, r16
    1816:	52 96       	adiw	r26, 0x12	; 18
    1818:	8c 91       	ld	r24, X
    181a:	52 97       	sbiw	r26, 0x12	; 18
    181c:	89 2b       	or	r24, r25
    181e:	80 83       	st	Z, r24
    1820:	94 81       	ldd	r25, Z+4	; 0x04
    1822:	52 96       	adiw	r26, 0x12	; 18
    1824:	8c 91       	ld	r24, X
    1826:	52 97       	sbiw	r26, 0x12	; 18
    1828:	89 2b       	or	r24, r25
    182a:	84 83       	std	Z+4, r24	; 0x04
    182c:	52 96       	adiw	r26, 0x12	; 18
    182e:	8c 91       	ld	r24, X
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	21 f4       	brne	.+8      	; 0x183c <_ZN17task_limit_switch3runEv+0x48>
    1834:	88 e1       	ldi	r24, 0x18	; 24
    1836:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <_ZN17task_limit_switch3runEv+0x52>
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	19 f4       	brne	.+6      	; 0x1846 <_ZN17task_limit_switch3runEv+0x52>
    1840:	88 e1       	ldi	r24, 0x18	; 24
    1842:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
    1846:	0f 2e       	mov	r0, r31
    1848:	f8 e6       	ldi	r31, 0x68	; 104
    184a:	ef 2e       	mov	r14, r31
    184c:	f6 e0       	ldi	r31, 0x06	; 6
    184e:	ff 2e       	mov	r15, r31
    1850:	f0 2d       	mov	r31, r0
    1852:	dd 24       	eor	r13, r13
    1854:	d3 94       	inc	r13
    1856:	f7 01       	movw	r30, r14
    1858:	80 81       	ld	r24, Z
    185a:	80 fd       	sbrc	r24, 0
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <_ZN17task_limit_switch3runEv+0x80>
    185e:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
    1862:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	0f 92       	push	r0
    186c:	d0 82       	st	Z, r13
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <_ZN17task_limit_switch3runEv+0x94>
    1874:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <leftLimitSwitch>
    1878:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <leftLimitSwitch+0x1>
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	0f 92       	push	r0
    1882:	10 82       	st	Z, r1
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	d7 01       	movw	r26, r14
    188a:	8c 91       	ld	r24, X
    188c:	82 fd       	sbrc	r24, 2
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <_ZN17task_limit_switch3runEv+0xb2>
    1890:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <rightLimitSwitch>
    1894:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <rightLimitSwitch+0x1>
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	0f 92       	push	r0
    189e:	d0 82       	st	Z, r13
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <_ZN17task_limit_switch3runEv+0xc6>
    18a6:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <rightLimitSwitch>
    18aa:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <rightLimitSwitch+0x1>
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	0f 92       	push	r0
    18b4:	10 82       	st	Z, r1
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	f8 01       	movw	r30, r16
    18bc:	86 85       	ldd	r24, Z+14	; 0x0e
    18be:	97 85       	ldd	r25, Z+15	; 0x0f
    18c0:	a0 89       	ldd	r26, Z+16	; 0x10
    18c2:	b1 89       	ldd	r27, Z+17	; 0x11
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	a1 1d       	adc	r26, r1
    18c8:	b1 1d       	adc	r27, r1
    18ca:	86 87       	std	Z+14, r24	; 0x0e
    18cc:	97 87       	std	Z+15, r25	; 0x0f
    18ce:	a0 8b       	std	Z+16, r26	; 0x10
    18d0:	b1 8b       	std	Z+17, r27	; 0x11
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <vTaskDelayUntil>
    18e2:	b9 cf       	rjmp	.-142    	; 0x1856 <_ZN17task_limit_switch3runEv+0x62>

000018e4 <_ZN5rs23212clear_screenEv>:
    18e4:	dc 01       	movw	r26, r24
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	02 80       	ldd	r0, Z+2	; 0x02
    18ec:	f3 81       	ldd	r31, Z+3	; 0x03
    18ee:	e0 2d       	mov	r30, r0
    18f0:	6c e0       	ldi	r22, 0x0C	; 12
    18f2:	19 95       	eicall
    18f4:	08 95       	ret

000018f6 <_ZN5rs23214check_for_charEv>:
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	ec 01       	movw	r28, r24
    18fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    18fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1900:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1902:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	4d 91       	ld	r20, X+
    1908:	5c 91       	ld	r21, X
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	42 17       	cp	r20, r18
    1910:	53 07       	cpc	r21, r19
    1912:	09 f4       	brne	.+2      	; 0x1916 <_ZN5rs23214check_for_charEv+0x20>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <_ZN5rs2327getcharEv>:
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	fc 01       	movw	r30, r24
    1922:	c1 8d       	ldd	r28, Z+25	; 0x19
    1924:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1926:	28 81       	ld	r18, Y
    1928:	39 81       	ldd	r19, Y+1	; 0x01
    192a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    192c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    192e:	4d 91       	ld	r20, X+
    1930:	5c 91       	ld	r21, X
    1932:	24 17       	cp	r18, r20
    1934:	35 07       	cpc	r19, r21
    1936:	e9 f3       	breq	.-6      	; 0x1932 <_ZN5rs2327getcharEv+0x16>
    1938:	a7 89       	ldd	r26, Z+23	; 0x17
    193a:	b0 8d       	ldd	r27, Z+24	; 0x18
    193c:	0d 90       	ld	r0, X+
    193e:	bc 91       	ld	r27, X
    1940:	a0 2d       	mov	r26, r0
    1942:	a2 0f       	add	r26, r18
    1944:	b3 1f       	adc	r27, r19
    1946:	8c 91       	ld	r24, X
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	28 83       	st	Y, r18
    194e:	39 83       	std	Y+1, r19	; 0x01
    1950:	24 36       	cpi	r18, 0x64	; 100
    1952:	31 05       	cpc	r19, r1
    1954:	28 f0       	brcs	.+10     	; 0x1960 <_ZN5rs2327getcharEv+0x44>
    1956:	01 8c       	ldd	r0, Z+25	; 0x19
    1958:	f2 8d       	ldd	r31, Z+26	; 0x1a
    195a:	e0 2d       	mov	r30, r0
    195c:	10 82       	st	Z, r1
    195e:	11 82       	std	Z+1, r1	; 0x01
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <_ZN5rs2327putcharEc>:
    1968:	dc 01       	movw	r26, r24
    196a:	50 96       	adiw	r26, 0x10	; 16
    196c:	ed 91       	ld	r30, X+
    196e:	fc 91       	ld	r31, X
    1970:	51 97       	sbiw	r26, 0x11	; 17
    1972:	80 81       	ld	r24, Z
    1974:	54 96       	adiw	r26, 0x14	; 20
    1976:	4c 91       	ld	r20, X
    1978:	54 97       	sbiw	r26, 0x14	; 20
    197a:	84 23       	and	r24, r20
    197c:	29 f0       	breq	.+10     	; 0x1988 <_ZN5rs2327putcharEc+0x20>
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <_ZN5rs2327putcharEc+0x2a>
    1980:	21 50       	subi	r18, 0x01	; 1
    1982:	31 09       	sbc	r19, r1
    1984:	19 f4       	brne	.+6      	; 0x198c <_ZN5rs2327putcharEc+0x24>
    1986:	12 c0       	rjmp	.+36     	; 0x19ac <_ZN5rs2327putcharEc+0x44>
    1988:	21 e2       	ldi	r18, 0x21	; 33
    198a:	3e e4       	ldi	r19, 0x4E	; 78
    198c:	90 81       	ld	r25, Z
    198e:	94 23       	and	r25, r20
    1990:	b9 f3       	breq	.-18     	; 0x1980 <_ZN5rs2327putcharEc+0x18>
    1992:	90 81       	ld	r25, Z
    1994:	56 96       	adiw	r26, 0x16	; 22
    1996:	8c 91       	ld	r24, X
    1998:	56 97       	sbiw	r26, 0x16	; 22
    199a:	89 2b       	or	r24, r25
    199c:	80 83       	st	Z, r24
    199e:	1e 96       	adiw	r26, 0x0e	; 14
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	1f 97       	sbiw	r26, 0x0f	; 15
    19a6:	60 83       	st	Z, r22
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	08 95       	ret
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	08 95       	ret

000019b0 <_GLOBAL__sub_I_counter>:
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	c6 ef       	ldi	r28, 0xF6	; 246
    19b6:	d0 e2       	ldi	r29, 0x20	; 32
    19b8:	8a e0       	ldi	r24, 0x0A	; 10
    19ba:	8a 83       	std	Y+2, r24	; 0x02
    19bc:	1b 82       	std	Y+3, r1	; 0x03
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	1c 82       	std	Y+4, r1	; 0x04
    19c4:	1e 82       	std	Y+6, r1	; 0x06
    19c6:	1f 82       	std	Y+7, r1	; 0x07
    19c8:	8a e5       	ldi	r24, 0x5A	; 90
    19ca:	90 e2       	ldi	r25, 0x20	; 32
    19cc:	88 83       	st	Y, r24
    19ce:	99 83       	std	Y+1, r25	; 0x01
    19d0:	1e 86       	std	Y+14, r1	; 0x0e
    19d2:	1f 86       	std	Y+15, r1	; 0x0f
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	0e 94 90 19 	call	0x3320	; 0x3320 <xQueueGenericCreate>
    19de:	88 87       	std	Y+8, r24	; 0x08
    19e0:	99 87       	std	Y+9, r25	; 0x09
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	8a 87       	std	Y+10, r24	; 0x0a
    19ec:	9b 87       	std	Y+11, r25	; 0x0b
    19ee:	ac 87       	std	Y+12, r26	; 0x0c
    19f0:	bd 87       	std	Y+13, r27	; 0x0d
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <main>:
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	6e 97       	sbiw	r28, 0x1e	; 30
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	e0 e6       	ldi	r30, 0x60	; 96
    1a18:	f6 e0       	ldi	r31, 0x06	; 6
    1a1a:	80 e1       	ldi	r24, 0x10	; 16
    1a1c:	81 83       	std	Z+1, r24	; 0x01
    1a1e:	85 83       	std	Z+5, r24	; 0x05
    1a20:	f8 94       	cli
    1a22:	e0 e5       	ldi	r30, 0x50	; 80
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	80 83       	st	Z, r24
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	81 ff       	sbrs	r24, 1
    1a30:	fd cf       	rjmp	.-6      	; 0x1a2c <main+0x34>
    1a32:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1a36:	9f b7       	in	r25, 0x3f	; 63
    1a38:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3a:	f8 94       	cli
    1a3c:	1b be       	out	0x3b, r1	; 59
    1a3e:	88 7f       	andi	r24, 0xF8	; 248
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	20 e4       	ldi	r18, 0x40	; 64
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	f9 01       	movw	r30, r18
    1a48:	08 ed       	ldi	r16, 0xD8	; 216
    1a4a:	04 bf       	out	0x34, r16	; 52
    1a4c:	80 83       	st	Z, r24
    1a4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a50:	8f bf       	out	0x3f, r24	; 63
    1a52:	e0 e5       	ldi	r30, 0x50	; 80
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8e 7f       	andi	r24, 0xFE	; 254
    1a5a:	80 83       	st	Z, r24
    1a5c:	9d ef       	ldi	r25, 0xFD	; 253
    1a5e:	88 ed       	ldi	r24, 0xD8	; 216
    1a60:	08 b6       	in	r0, 0x38	; 56
    1a62:	18 be       	out	0x38, r1	; 56
    1a64:	84 bf       	out	0x34, r24	; 52
    1a66:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1a6a:	08 be       	out	0x38, r0	; 56
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1a74:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <leftLimitSwitch>
    1a78:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <leftLimitSwitch+0x1>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1a84:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <rightLimitSwitch>
    1a88:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <rightLimitSwitch+0x1>
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1a94:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <linear_position>
    1a98:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <linear_position+0x1>
    1a9c:	84 e0       	ldi	r24, 0x04	; 4
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1aa4:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <linear_position>
    1aa8:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <linear_position+0x1>
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1ac4:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <pendulum_encoder>
    1ac8:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <pendulum_encoder+0x1>
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1ad4:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <pendulum_encoder_radians>
    1ad8:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <pendulum_encoder_radians+0x1>
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1ae4:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <pendulum_encoder_w_radians>
    1ae8:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <pendulum_encoder_w_radians+0x1>
    1aec:	84 e0       	ldi	r24, 0x04	; 4
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1af4:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <linear_offset>
    1af8:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <linear_offset+0x1>
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1b04:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <motor_command>
    1b08:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <motor_command+0x1>
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1b14:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <begin>
    1b18:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <begin+0x1>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1b24:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <go>
    1b28:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <go+0x1>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1b34:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <stop>
    1b38:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <stop+0x1>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1b44:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <__data_end>
    1b48:	90 93 df 20 	sts	0x20DF, r25	; 0x8020df <__data_end+0x1>
    1b4c:	8a e4       	ldi	r24, 0x4A	; 74
    1b4e:	90 e2       	ldi	r25, 0x20	; 32
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	8a e0       	ldi	r24, 0x0A	; 10
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	1c 82       	std	Y+4, r1	; 0x04
    1b5a:	43 e0       	ldi	r20, 0x03	; 3
    1b5c:	4e 83       	std	Y+6, r20	; 0x06
    1b5e:	1d 82       	std	Y+5, r1	; 0x05
    1b60:	1f 82       	std	Y+7, r1	; 0x07
    1b62:	18 86       	std	Y+8, r1	; 0x08
    1b64:	a0 e4       	ldi	r26, 0x40	; 64
    1b66:	b6 e0       	ldi	r27, 0x06	; 6
    1b68:	ab 87       	std	Y+11, r26	; 0x0b
    1b6a:	bc 87       	std	Y+12, r27	; 0x0c
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	8d 87       	std	Y+13, r24	; 0x0d
    1b70:	0f 2e       	mov	r0, r31
    1b72:	f7 e0       	ldi	r31, 0x07	; 7
    1b74:	df 2e       	mov	r13, r31
    1b76:	f0 2d       	mov	r31, r0
    1b78:	de 86       	std	Y+14, r13	; 0x0e
    1b7a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b7c:	f8 e0       	ldi	r31, 0x08	; 8
    1b7e:	ef 87       	std	Y+15, r30	; 0x0f
    1b80:	f8 8b       	std	Y+16, r31	; 0x10
    1b82:	81 eb       	ldi	r24, 0xB1	; 177
    1b84:	98 e0       	ldi	r25, 0x08	; 8
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	84 eb       	ldi	r24, 0xB4	; 180
    1b8c:	98 e0       	ldi	r25, 0x08	; 8
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b94:	14 96       	adiw	r26, 0x04	; 4
    1b96:	5c 91       	ld	r21, X
    1b98:	14 97       	sbiw	r26, 0x04	; 4
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <main+0x1ae>
    1ba2:	66 0f       	add	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	2a 95       	dec	r18
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <main+0x1aa>
    1baa:	9b 01       	movw	r18, r22
    1bac:	25 2b       	or	r18, r21
    1bae:	14 96       	adiw	r26, 0x04	; 4
    1bb0:	2c 93       	st	X, r18
    1bb2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bb4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bb6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bb8:	5c 91       	ld	r21, X
    1bba:	bc 01       	movw	r22, r24
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <main+0x1ca>
    1bbe:	66 0f       	add	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	2a 95       	dec	r18
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <main+0x1c6>
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	25 2b       	or	r18, r21
    1bca:	2c 93       	st	X, r18
    1bcc:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bd2:	2c 91       	ld	r18, X
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <main+0x1e2>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	3a 95       	dec	r19
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <main+0x1de>
    1bde:	80 95       	com	r24
    1be0:	90 95       	com	r25
    1be2:	82 23       	and	r24, r18
    1be4:	8c 93       	st	X, r24
    1be6:	68 94       	set
    1be8:	cc 24       	eor	r12, r12
    1bea:	c4 f8       	bld	r12, 4
    1bec:	c3 82       	std	Z+3, r12	; 0x03
    1bee:	45 83       	std	Z+5, r20	; 0x05
    1bf0:	80 ef       	ldi	r24, 0xF0	; 240
    1bf2:	87 83       	std	Z+7, r24	; 0x07
    1bf4:	81 e2       	ldi	r24, 0x21	; 33
    1bf6:	86 83       	std	Z+6, r24	; 0x06
    1bf8:	88 e1       	ldi	r24, 0x18	; 24
    1bfa:	84 83       	std	Z+4, r24	; 0x04
    1bfc:	80 e8       	ldi	r24, 0x80	; 128
    1bfe:	8e 8b       	std	Y+22, r24	; 0x16
    1c00:	80 e4       	ldi	r24, 0x40	; 64
    1c02:	8f 8b       	std	Y+23, r24	; 0x17
    1c04:	80 e2       	ldi	r24, 0x20	; 32
    1c06:	8d 8b       	std	Y+21, r24	; 0x15
    1c08:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c0a:	f8 89       	ldd	r31, Y+16	; 0x10
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 81       	ld	r24, Z
    1c10:	8a e0       	ldi	r24, 0x0A	; 10
    1c12:	90 e2       	ldi	r25, 0x20	; 32
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	8c e1       	ldi	r24, 0x1C	; 28
    1c1a:	91 e2       	ldi	r25, 0x21	; 33
    1c1c:	88 8f       	std	Y+24, r24	; 0x18
    1c1e:	99 8f       	std	Y+25, r25	; 0x19
    1c20:	8a e1       	ldi	r24, 0x1A	; 26
    1c22:	91 e2       	ldi	r25, 0x21	; 33
    1c24:	8a 8f       	std	Y+26, r24	; 0x1a
    1c26:	9b 8f       	std	Y+27, r25	; 0x1b
    1c28:	88 e1       	ldi	r24, 0x18	; 24
    1c2a:	91 e2       	ldi	r25, 0x21	; 33
    1c2c:	8c 8f       	std	Y+28, r24	; 0x1c
    1c2e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c30:	84 e6       	ldi	r24, 0x64	; 100
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1c38:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvC1_buffer>
    1c3c:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvC1_buffer+0x1>
    1c40:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c42:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c44:	10 82       	st	Z, r1
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c4a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1c4c:	10 82       	st	Z, r1
    1c4e:	11 82       	std	Z+1, r1	; 0x01
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	ce 01       	movw	r24, r28
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    1c5a:	7c 01       	movw	r14, r24
    1c5c:	65 e8       	ldi	r22, 0x85	; 133
    1c5e:	70 e2       	ldi	r23, 0x20	; 32
    1c60:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    1c64:	66 e0       	ldi	r22, 0x06	; 6
    1c66:	c7 01       	movw	r24, r14
    1c68:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    1c6c:	66 e0       	ldi	r22, 0x06	; 6
    1c6e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    1c72:	82 e1       	ldi	r24, 0x12	; 18
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1c7a:	7c 01       	movw	r14, r24
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	0f 5f       	subi	r16, 0xFF	; 255
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	24 e0       	ldi	r18, 0x04	; 4
    1c84:	31 e0       	ldi	r19, 0x01	; 1
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	64 ea       	ldi	r22, 0xA4	; 164
    1c8a:	70 e2       	ldi	r23, 0x20	; 32
    1c8c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1c90:	8a e1       	ldi	r24, 0x1A	; 26
    1c92:	90 e2       	ldi	r25, 0x20	; 32
    1c94:	d7 01       	movw	r26, r14
    1c96:	8d 93       	st	X+, r24
    1c98:	9c 93       	st	X, r25
    1c9a:	83 e1       	ldi	r24, 0x13	; 19
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	24 e0       	ldi	r18, 0x04	; 4
    1ca6:	31 e0       	ldi	r19, 0x01	; 1
    1ca8:	44 e0       	ldi	r20, 0x04	; 4
    1caa:	6c ea       	ldi	r22, 0xAC	; 172
    1cac:	70 e2       	ldi	r23, 0x20	; 32
    1cae:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1cb2:	0f 2e       	mov	r0, r31
    1cb4:	f2 e2       	ldi	r31, 0x22	; 34
    1cb6:	af 2e       	mov	r10, r31
    1cb8:	f0 e2       	ldi	r31, 0x20	; 32
    1cba:	bf 2e       	mov	r11, r31
    1cbc:	f0 2d       	mov	r31, r0
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	a0 82       	st	Z, r10
    1cc2:	b1 82       	std	Z+1, r11	; 0x01
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	82 8b       	std	Z+18, r24	; 0x12
    1cc8:	83 e1       	ldi	r24, 0x13	; 19
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1cd0:	7c 01       	movw	r14, r24
    1cd2:	24 e0       	ldi	r18, 0x04	; 4
    1cd4:	31 e0       	ldi	r19, 0x01	; 1
    1cd6:	44 e0       	ldi	r20, 0x04	; 4
    1cd8:	63 eb       	ldi	r22, 0xB3	; 179
    1cda:	70 e2       	ldi	r23, 0x20	; 32
    1cdc:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1ce0:	d7 01       	movw	r26, r14
    1ce2:	ad 92       	st	X+, r10
    1ce4:	bc 92       	st	X, r11
    1ce6:	11 97       	sbiw	r26, 0x01	; 1
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	52 96       	adiw	r26, 0x12	; 18
    1cec:	8c 93       	st	X, r24
    1cee:	82 e1       	ldi	r24, 0x12	; 18
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1cf6:	7c 01       	movw	r14, r24
    1cf8:	24 e0       	ldi	r18, 0x04	; 4
    1cfa:	31 e0       	ldi	r19, 0x01	; 1
    1cfc:	44 e0       	ldi	r20, 0x04	; 4
    1cfe:	6b eb       	ldi	r22, 0xBB	; 187
    1d00:	70 e2       	ldi	r23, 0x20	; 32
    1d02:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1d06:	8a e2       	ldi	r24, 0x2A	; 42
    1d08:	90 e2       	ldi	r25, 0x20	; 32
    1d0a:	f7 01       	movw	r30, r14
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	82 e1       	ldi	r24, 0x12	; 18
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1d18:	7c 01       	movw	r14, r24
    1d1a:	24 e0       	ldi	r18, 0x04	; 4
    1d1c:	31 e0       	ldi	r19, 0x01	; 1
    1d1e:	43 e0       	ldi	r20, 0x03	; 3
    1d20:	62 ec       	ldi	r22, 0xC2	; 194
    1d22:	70 e2       	ldi	r23, 0x20	; 32
    1d24:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1d28:	82 e3       	ldi	r24, 0x32	; 50
    1d2a:	90 e2       	ldi	r25, 0x20	; 32
    1d2c:	d7 01       	movw	r26, r14
    1d2e:	8d 93       	st	X+, r24
    1d30:	9c 93       	st	X, r25
    1d32:	8e e3       	ldi	r24, 0x3E	; 62
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1d3a:	7c 01       	movw	r14, r24
    1d3c:	24 e0       	ldi	r18, 0x04	; 4
    1d3e:	31 e0       	ldi	r19, 0x01	; 1
    1d40:	42 e0       	ldi	r20, 0x02	; 2
    1d42:	69 ec       	ldi	r22, 0xC9	; 201
    1d44:	70 e2       	ldi	r23, 0x20	; 32
    1d46:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1d4a:	8a e3       	ldi	r24, 0x3A	; 58
    1d4c:	90 e2       	ldi	r25, 0x20	; 32
    1d4e:	f7 01       	movw	r30, r14
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e8       	ldi	r25, 0x80	; 128
    1d58:	a9 e0       	ldi	r26, 0x09	; 9
    1d5a:	b5 e4       	ldi	r27, 0x45	; 69
    1d5c:	82 a3       	std	Z+34, r24	; 0x22
    1d5e:	93 a3       	std	Z+35, r25	; 0x23
    1d60:	a4 a3       	std	Z+36, r26	; 0x24
    1d62:	b5 a3       	std	Z+37, r27	; 0x25
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 ea       	ldi	r26, 0xA0	; 160
    1d6a:	b0 e4       	ldi	r27, 0x40	; 64
    1d6c:	86 a3       	std	Z+38, r24	; 0x26
    1d6e:	97 a3       	std	Z+39, r25	; 0x27
    1d70:	a0 a7       	std	Z+40, r26	; 0x28
    1d72:	b1 a7       	std	Z+41, r27	; 0x29
    1d74:	be 96       	adiw	r30, 0x2e	; 46
    1d76:	df 01       	movw	r26, r30
    1d78:	1d 92       	st	X+, r1
    1d7a:	ca 94       	dec	r12
    1d7c:	e9 f7       	brne	.-6      	; 0x1d78 <main+0x380>
    1d7e:	84 e1       	ldi	r24, 0x14	; 20
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    1d86:	7c 01       	movw	r14, r24
    1d88:	24 e0       	ldi	r18, 0x04	; 4
    1d8a:	31 e0       	ldi	r19, 0x01	; 1
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	61 ed       	ldi	r22, 0xD1	; 209
    1d90:	70 e2       	ldi	r23, 0x20	; 32
    1d92:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN8frt_taskC2EPKchjP8emstream>
    1d96:	82 e4       	ldi	r24, 0x42	; 66
    1d98:	90 e2       	ldi	r25, 0x20	; 32
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	12 8a       	std	Z+18, r1	; 0x12
    1da2:	13 8a       	std	Z+19, r1	; 0x13
    1da4:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1da8:	78 94       	sei
    1daa:	0e 94 8b 1c 	call	0x3916	; 0x3916 <vTaskStartScheduler>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	6e 96       	adiw	r28, 0x1e	; 30
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	08 95       	ret

00001dce <__vector_58>:
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	08 b6       	in	r0, 0x38	; 56
    1dda:	0f 92       	push	r0
    1ddc:	18 be       	out	0x38, r1	; 56
    1dde:	0b b6       	in	r0, 0x3b	; 59
    1de0:	0f 92       	push	r0
    1de2:	1b be       	out	0x3b, r1	; 59
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1df4:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <rcvE0_buffer>
    1df8:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <rcvE0_buffer+0x1>
    1dfc:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <rcvE0_write_index>
    1e00:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <rcvE0_write_index+0x1>
    1e04:	e8 0f       	add	r30, r24
    1e06:	f9 1f       	adc	r31, r25
    1e08:	20 83       	st	Z, r18
    1e0a:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <rcvE0_write_index>
    1e0e:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <rcvE0_write_index+0x1>
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	84 36       	cpi	r24, 0x64	; 100
    1e16:	91 05       	cpc	r25, r1
    1e18:	60 f4       	brcc	.+24     	; 0x1e32 <__vector_58+0x64>
    1e1a:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <rcvE0_write_index>
    1e1e:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <rcvE0_write_index+0x1>
    1e22:	20 91 08 21 	lds	r18, 0x2108	; 0x802108 <rcvE0_read_index>
    1e26:	30 91 09 21 	lds	r19, 0x2109	; 0x802109 <rcvE0_read_index+0x1>
    1e2a:	82 17       	cp	r24, r18
    1e2c:	93 07       	cpc	r25, r19
    1e2e:	f1 f4       	brne	.+60     	; 0x1e6c <__vector_58+0x9e>
    1e30:	0c c0       	rjmp	.+24     	; 0x1e4a <__vector_58+0x7c>
    1e32:	10 92 06 21 	sts	0x2106, r1	; 0x802106 <rcvE0_write_index>
    1e36:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <rcvE0_write_index+0x1>
    1e3a:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvE0_read_index>
    1e3e:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvE0_read_index+0x1>
    1e42:	18 16       	cp	r1, r24
    1e44:	19 06       	cpc	r1, r25
    1e46:	91 f4       	brne	.+36     	; 0x1e6c <__vector_58+0x9e>
    1e48:	0e c0       	rjmp	.+28     	; 0x1e66 <__vector_58+0x98>
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	84 36       	cpi	r24, 0x64	; 100
    1e4e:	91 05       	cpc	r25, r1
    1e50:	28 f4       	brcc	.+10     	; 0x1e5c <__vector_58+0x8e>
    1e52:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <rcvE0_read_index>
    1e56:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <rcvE0_read_index+0x1>
    1e5a:	08 c0       	rjmp	.+16     	; 0x1e6c <__vector_58+0x9e>
    1e5c:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <rcvE0_read_index>
    1e60:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <rcvE0_read_index+0x1>
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <__vector_58+0x9e>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	f3 cf       	rjmp	.-26     	; 0x1e52 <__vector_58+0x84>
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	3f 91       	pop	r19
    1e76:	2f 91       	pop	r18
    1e78:	0f 90       	pop	r0
    1e7a:	0b be       	out	0x3b, r0	; 59
    1e7c:	0f 90       	pop	r0
    1e7e:	08 be       	out	0x38, r0	; 56
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <__vector_91>:
    1e8a:	1f 92       	push	r1
    1e8c:	0f 92       	push	r0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	0f 92       	push	r0
    1e92:	11 24       	eor	r1, r1
    1e94:	08 b6       	in	r0, 0x38	; 56
    1e96:	0f 92       	push	r0
    1e98:	18 be       	out	0x38, r1	; 56
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	1b be       	out	0x3b, r1	; 59
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	ef 93       	push	r30
    1eaa:	ff 93       	push	r31
    1eac:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    1eb0:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <rcvD1_buffer>
    1eb4:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <rcvD1_buffer+0x1>
    1eb8:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <rcvD1_write_index>
    1ebc:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <rcvD1_write_index+0x1>
    1ec0:	e8 0f       	add	r30, r24
    1ec2:	f9 1f       	adc	r31, r25
    1ec4:	20 83       	st	Z, r18
    1ec6:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <rcvD1_write_index>
    1eca:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <rcvD1_write_index+0x1>
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	84 36       	cpi	r24, 0x64	; 100
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	60 f4       	brcc	.+24     	; 0x1eee <__vector_91+0x64>
    1ed6:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <rcvD1_write_index>
    1eda:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <rcvD1_write_index+0x1>
    1ede:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <rcvD1_read_index>
    1ee2:	30 91 0f 21 	lds	r19, 0x210F	; 0x80210f <rcvD1_read_index+0x1>
    1ee6:	82 17       	cp	r24, r18
    1ee8:	93 07       	cpc	r25, r19
    1eea:	f1 f4       	brne	.+60     	; 0x1f28 <__vector_91+0x9e>
    1eec:	0c c0       	rjmp	.+24     	; 0x1f06 <__vector_91+0x7c>
    1eee:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <rcvD1_write_index>
    1ef2:	10 92 0d 21 	sts	0x210D, r1	; 0x80210d <rcvD1_write_index+0x1>
    1ef6:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvD1_read_index>
    1efa:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvD1_read_index+0x1>
    1efe:	18 16       	cp	r1, r24
    1f00:	19 06       	cpc	r1, r25
    1f02:	91 f4       	brne	.+36     	; 0x1f28 <__vector_91+0x9e>
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <__vector_91+0x98>
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	84 36       	cpi	r24, 0x64	; 100
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	28 f4       	brcc	.+10     	; 0x1f18 <__vector_91+0x8e>
    1f0e:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <rcvD1_read_index>
    1f12:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <rcvD1_read_index+0x1>
    1f16:	08 c0       	rjmp	.+16     	; 0x1f28 <__vector_91+0x9e>
    1f18:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <rcvD1_read_index>
    1f1c:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <rcvD1_read_index+0x1>
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <__vector_91+0x9e>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	f3 cf       	rjmp	.-26     	; 0x1f0e <__vector_91+0x84>
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	3f 91       	pop	r19
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0b be       	out	0x3b, r0	; 59
    1f38:	0f 90       	pop	r0
    1f3a:	08 be       	out	0x38, r0	; 56
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <__vector_88>:
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	08 b6       	in	r0, 0x38	; 56
    1f52:	0f 92       	push	r0
    1f54:	18 be       	out	0x38, r1	; 56
    1f56:	0b b6       	in	r0, 0x3b	; 59
    1f58:	0f 92       	push	r0
    1f5a:	1b be       	out	0x3b, r1	; 59
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	8f 93       	push	r24
    1f62:	9f 93       	push	r25
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1f6c:	e0 91 16 21 	lds	r30, 0x2116	; 0x802116 <rcvD0_buffer>
    1f70:	f0 91 17 21 	lds	r31, 0x2117	; 0x802117 <rcvD0_buffer+0x1>
    1f74:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <rcvC0_write_index>
    1f78:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <rcvC0_write_index+0x1>
    1f7c:	e8 0f       	add	r30, r24
    1f7e:	f9 1f       	adc	r31, r25
    1f80:	20 83       	st	Z, r18
    1f82:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <rcvD0_write_index>
    1f86:	90 91 13 21 	lds	r25, 0x2113	; 0x802113 <rcvD0_write_index+0x1>
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	84 36       	cpi	r24, 0x64	; 100
    1f8e:	91 05       	cpc	r25, r1
    1f90:	60 f4       	brcc	.+24     	; 0x1faa <__vector_88+0x64>
    1f92:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <rcvD0_write_index>
    1f96:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <rcvD0_write_index+0x1>
    1f9a:	20 91 14 21 	lds	r18, 0x2114	; 0x802114 <rcvD0_read_index>
    1f9e:	30 91 15 21 	lds	r19, 0x2115	; 0x802115 <rcvD0_read_index+0x1>
    1fa2:	82 17       	cp	r24, r18
    1fa4:	93 07       	cpc	r25, r19
    1fa6:	f1 f4       	brne	.+60     	; 0x1fe4 <__vector_88+0x9e>
    1fa8:	0c c0       	rjmp	.+24     	; 0x1fc2 <__vector_88+0x7c>
    1faa:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <rcvD0_write_index>
    1fae:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <rcvD0_write_index+0x1>
    1fb2:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvD0_read_index>
    1fb6:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvD0_read_index+0x1>
    1fba:	18 16       	cp	r1, r24
    1fbc:	19 06       	cpc	r1, r25
    1fbe:	91 f4       	brne	.+36     	; 0x1fe4 <__vector_88+0x9e>
    1fc0:	0e c0       	rjmp	.+28     	; 0x1fde <__vector_88+0x98>
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	84 36       	cpi	r24, 0x64	; 100
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	28 f4       	brcc	.+10     	; 0x1fd4 <__vector_88+0x8e>
    1fca:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rcvD0_read_index>
    1fce:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rcvD0_read_index+0x1>
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <__vector_88+0x9e>
    1fd4:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <rcvD0_read_index>
    1fd8:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <rcvD0_read_index+0x1>
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <__vector_88+0x9e>
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	f3 cf       	rjmp	.-26     	; 0x1fca <__vector_88+0x84>
    1fe4:	ff 91       	pop	r31
    1fe6:	ef 91       	pop	r30
    1fe8:	9f 91       	pop	r25
    1fea:	8f 91       	pop	r24
    1fec:	3f 91       	pop	r19
    1fee:	2f 91       	pop	r18
    1ff0:	0f 90       	pop	r0
    1ff2:	0b be       	out	0x3b, r0	; 59
    1ff4:	0f 90       	pop	r0
    1ff6:	08 be       	out	0x38, r0	; 56
    1ff8:	0f 90       	pop	r0
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	0f 90       	pop	r0
    1ffe:	1f 90       	pop	r1
    2000:	18 95       	reti

00002002 <__vector_28>:
    2002:	1f 92       	push	r1
    2004:	0f 92       	push	r0
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	0f 92       	push	r0
    200a:	11 24       	eor	r1, r1
    200c:	08 b6       	in	r0, 0x38	; 56
    200e:	0f 92       	push	r0
    2010:	18 be       	out	0x38, r1	; 56
    2012:	0b b6       	in	r0, 0x3b	; 59
    2014:	0f 92       	push	r0
    2016:	1b be       	out	0x3b, r1	; 59
    2018:	2f 93       	push	r18
    201a:	3f 93       	push	r19
    201c:	8f 93       	push	r24
    201e:	9f 93       	push	r25
    2020:	ef 93       	push	r30
    2022:	ff 93       	push	r31
    2024:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    2028:	e0 91 1c 21 	lds	r30, 0x211C	; 0x80211c <rcvC1_buffer>
    202c:	f0 91 1d 21 	lds	r31, 0x211D	; 0x80211d <rcvC1_buffer+0x1>
    2030:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <rcvC1_write_index>
    2034:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <rcvC1_write_index+0x1>
    2038:	e8 0f       	add	r30, r24
    203a:	f9 1f       	adc	r31, r25
    203c:	20 83       	st	Z, r18
    203e:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <rcvC1_write_index>
    2042:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <rcvC1_write_index+0x1>
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	84 36       	cpi	r24, 0x64	; 100
    204a:	91 05       	cpc	r25, r1
    204c:	60 f4       	brcc	.+24     	; 0x2066 <__vector_28+0x64>
    204e:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <rcvC1_write_index>
    2052:	90 93 19 21 	sts	0x2119, r25	; 0x802119 <rcvC1_write_index+0x1>
    2056:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <rcvC1_read_index>
    205a:	30 91 1b 21 	lds	r19, 0x211B	; 0x80211b <rcvC1_read_index+0x1>
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	f1 f4       	brne	.+60     	; 0x20a0 <__vector_28+0x9e>
    2064:	0c c0       	rjmp	.+24     	; 0x207e <__vector_28+0x7c>
    2066:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <rcvC1_write_index>
    206a:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <rcvC1_write_index+0x1>
    206e:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvC1_read_index>
    2072:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvC1_read_index+0x1>
    2076:	18 16       	cp	r1, r24
    2078:	19 06       	cpc	r1, r25
    207a:	91 f4       	brne	.+36     	; 0x20a0 <__vector_28+0x9e>
    207c:	0e c0       	rjmp	.+28     	; 0x209a <__vector_28+0x98>
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	84 36       	cpi	r24, 0x64	; 100
    2082:	91 05       	cpc	r25, r1
    2084:	28 f4       	brcc	.+10     	; 0x2090 <__vector_28+0x8e>
    2086:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvC1_read_index>
    208a:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvC1_read_index+0x1>
    208e:	08 c0       	rjmp	.+16     	; 0x20a0 <__vector_28+0x9e>
    2090:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <rcvC1_read_index>
    2094:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <rcvC1_read_index+0x1>
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <__vector_28+0x9e>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	f3 cf       	rjmp	.-26     	; 0x2086 <__vector_28+0x84>
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	9f 91       	pop	r25
    20a6:	8f 91       	pop	r24
    20a8:	3f 91       	pop	r19
    20aa:	2f 91       	pop	r18
    20ac:	0f 90       	pop	r0
    20ae:	0b be       	out	0x3b, r0	; 59
    20b0:	0f 90       	pop	r0
    20b2:	08 be       	out	0x38, r0	; 56
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	0f 90       	pop	r0
    20ba:	1f 90       	pop	r1
    20bc:	18 95       	reti

000020be <__vector_25>:
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	08 b6       	in	r0, 0x38	; 56
    20ca:	0f 92       	push	r0
    20cc:	18 be       	out	0x38, r1	; 56
    20ce:	0b b6       	in	r0, 0x3b	; 59
    20d0:	0f 92       	push	r0
    20d2:	1b be       	out	0x3b, r1	; 59
    20d4:	2f 93       	push	r18
    20d6:	3f 93       	push	r19
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
    20e0:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    20e4:	e0 91 22 21 	lds	r30, 0x2122	; 0x802122 <rcvC0_buffer>
    20e8:	f0 91 23 21 	lds	r31, 0x2123	; 0x802123 <rcvC0_buffer+0x1>
    20ec:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <rcvC0_write_index>
    20f0:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <rcvC0_write_index+0x1>
    20f4:	e8 0f       	add	r30, r24
    20f6:	f9 1f       	adc	r31, r25
    20f8:	20 83       	st	Z, r18
    20fa:	80 91 1e 21 	lds	r24, 0x211E	; 0x80211e <rcvC0_write_index>
    20fe:	90 91 1f 21 	lds	r25, 0x211F	; 0x80211f <rcvC0_write_index+0x1>
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	84 36       	cpi	r24, 0x64	; 100
    2106:	91 05       	cpc	r25, r1
    2108:	60 f4       	brcc	.+24     	; 0x2122 <__vector_25+0x64>
    210a:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <rcvC0_write_index>
    210e:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <rcvC0_write_index+0x1>
    2112:	20 91 20 21 	lds	r18, 0x2120	; 0x802120 <rcvC0_read_index>
    2116:	30 91 21 21 	lds	r19, 0x2121	; 0x802121 <rcvC0_read_index+0x1>
    211a:	82 17       	cp	r24, r18
    211c:	93 07       	cpc	r25, r19
    211e:	f1 f4       	brne	.+60     	; 0x215c <__vector_25+0x9e>
    2120:	0c c0       	rjmp	.+24     	; 0x213a <__vector_25+0x7c>
    2122:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <rcvC0_write_index>
    2126:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <rcvC0_write_index+0x1>
    212a:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC0_read_index>
    212e:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC0_read_index+0x1>
    2132:	18 16       	cp	r1, r24
    2134:	19 06       	cpc	r1, r25
    2136:	91 f4       	brne	.+36     	; 0x215c <__vector_25+0x9e>
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <__vector_25+0x98>
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	84 36       	cpi	r24, 0x64	; 100
    213e:	91 05       	cpc	r25, r1
    2140:	28 f4       	brcc	.+10     	; 0x214c <__vector_25+0x8e>
    2142:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <rcvC0_read_index>
    2146:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <rcvC0_read_index+0x1>
    214a:	08 c0       	rjmp	.+16     	; 0x215c <__vector_25+0x9e>
    214c:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <rcvC0_read_index>
    2150:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <rcvC0_read_index+0x1>
    2154:	03 c0       	rjmp	.+6      	; 0x215c <__vector_25+0x9e>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	f3 cf       	rjmp	.-26     	; 0x2142 <__vector_25+0x84>
    215c:	ff 91       	pop	r31
    215e:	ef 91       	pop	r30
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	3f 91       	pop	r19
    2166:	2f 91       	pop	r18
    2168:	0f 90       	pop	r0
    216a:	0b be       	out	0x3b, r0	; 59
    216c:	0f 90       	pop	r0
    216e:	08 be       	out	0x38, r0	; 56
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <_ZN8emstreamlsEh>:
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	29 97       	sbiw	r28, 0x09	; 9
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	8c 01       	movw	r16, r24
    2196:	e6 2e       	mov	r14, r22
    2198:	dc 01       	movw	r26, r24
    219a:	13 96       	adiw	r26, 0x03	; 3
    219c:	8c 91       	ld	r24, X
    219e:	13 97       	sbiw	r26, 0x03	; 3
    21a0:	88 23       	and	r24, r24
    21a2:	41 f0       	breq	.+16     	; 0x21b4 <_ZN8emstreamlsEh+0x3a>
    21a4:	ed 91       	ld	r30, X+
    21a6:	fc 91       	ld	r31, X
    21a8:	02 80       	ldd	r0, Z+2	; 0x02
    21aa:	f3 81       	ldd	r31, Z+3	; 0x03
    21ac:	e0 2d       	mov	r30, r0
    21ae:	c8 01       	movw	r24, r16
    21b0:	19 95       	eicall
    21b2:	56 c0       	rjmp	.+172    	; 0x2260 <_ZN8emstreamlsEh+0xe6>
    21b4:	f8 01       	movw	r30, r16
    21b6:	42 81       	ldd	r20, Z+2	; 0x02
    21b8:	42 30       	cpi	r20, 0x02	; 2
    21ba:	19 f5       	brne	.+70     	; 0x2202 <_ZN8emstreamlsEh+0x88>
    21bc:	68 94       	set
    21be:	cc 24       	eor	r12, r12
    21c0:	c3 f8       	bld	r12, 3
    21c2:	d1 2c       	mov	r13, r1
    21c4:	68 94       	set
    21c6:	ff 24       	eor	r15, r15
    21c8:	f7 f8       	bld	r15, 7
    21ca:	8e 2d       	mov	r24, r14
    21cc:	8f 21       	and	r24, r15
    21ce:	51 f0       	breq	.+20     	; 0x21e4 <_ZN8emstreamlsEh+0x6a>
    21d0:	d8 01       	movw	r26, r16
    21d2:	ed 91       	ld	r30, X+
    21d4:	fc 91       	ld	r31, X
    21d6:	02 80       	ldd	r0, Z+2	; 0x02
    21d8:	f3 81       	ldd	r31, Z+3	; 0x03
    21da:	e0 2d       	mov	r30, r0
    21dc:	61 e3       	ldi	r22, 0x31	; 49
    21de:	c8 01       	movw	r24, r16
    21e0:	19 95       	eicall
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <_ZN8emstreamlsEh+0x7c>
    21e4:	d8 01       	movw	r26, r16
    21e6:	ed 91       	ld	r30, X+
    21e8:	fc 91       	ld	r31, X
    21ea:	02 80       	ldd	r0, Z+2	; 0x02
    21ec:	f3 81       	ldd	r31, Z+3	; 0x03
    21ee:	e0 2d       	mov	r30, r0
    21f0:	60 e3       	ldi	r22, 0x30	; 48
    21f2:	c8 01       	movw	r24, r16
    21f4:	19 95       	eicall
    21f6:	f6 94       	lsr	r15
    21f8:	b1 e0       	ldi	r27, 0x01	; 1
    21fa:	cb 1a       	sub	r12, r27
    21fc:	d1 08       	sbc	r13, r1
    21fe:	29 f7       	brne	.-54     	; 0x21ca <_ZN8emstreamlsEh+0x50>
    2200:	2f c0       	rjmp	.+94     	; 0x2260 <_ZN8emstreamlsEh+0xe6>
    2202:	40 31       	cpi	r20, 0x10	; 16
    2204:	f9 f4       	brne	.+62     	; 0x2244 <_ZN8emstreamlsEh+0xca>
    2206:	62 95       	swap	r22
    2208:	6f 70       	andi	r22, 0x0F	; 15
    220a:	01 90       	ld	r0, Z+
    220c:	f0 81       	ld	r31, Z
    220e:	e0 2d       	mov	r30, r0
    2210:	02 80       	ldd	r0, Z+2	; 0x02
    2212:	f3 81       	ldd	r31, Z+3	; 0x03
    2214:	e0 2d       	mov	r30, r0
    2216:	6a 30       	cpi	r22, 0x0A	; 10
    2218:	10 f0       	brcs	.+4      	; 0x221e <_ZN8emstreamlsEh+0xa4>
    221a:	69 5c       	subi	r22, 0xC9	; 201
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <_ZN8emstreamlsEh+0xa6>
    221e:	60 5d       	subi	r22, 0xD0	; 208
    2220:	c8 01       	movw	r24, r16
    2222:	19 95       	eicall
    2224:	6e 2d       	mov	r22, r14
    2226:	6f 70       	andi	r22, 0x0F	; 15
    2228:	d8 01       	movw	r26, r16
    222a:	ed 91       	ld	r30, X+
    222c:	fc 91       	ld	r31, X
    222e:	02 80       	ldd	r0, Z+2	; 0x02
    2230:	f3 81       	ldd	r31, Z+3	; 0x03
    2232:	e0 2d       	mov	r30, r0
    2234:	6a 30       	cpi	r22, 0x0A	; 10
    2236:	10 f0       	brcs	.+4      	; 0x223c <_ZN8emstreamlsEh+0xc2>
    2238:	69 5c       	subi	r22, 0xC9	; 201
    223a:	01 c0       	rjmp	.+2      	; 0x223e <_ZN8emstreamlsEh+0xc4>
    223c:	60 5d       	subi	r22, 0xD0	; 208
    223e:	c8 01       	movw	r24, r16
    2240:	19 95       	eicall
    2242:	0e c0       	rjmp	.+28     	; 0x2260 <_ZN8emstreamlsEh+0xe6>
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	be 01       	movw	r22, r28
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8e 2d       	mov	r24, r14
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 79 21 	call	0x42f2	; 0x42f2 <utoa>
    2254:	be 01       	movw	r22, r28
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	c8 01       	movw	r24, r16
    225c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2260:	c8 01       	movw	r24, r16
    2262:	29 96       	adiw	r28, 0x09	; 9
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	08 95       	ret

0000227a <_ZN8emstream12clear_screenEv>:
    227a:	08 95       	ret

0000227c <_ZN8emstream12transmit_nowEv>:
    227c:	08 95       	ret

0000227e <_ZN8emstream14check_for_charEv>:
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	08 95       	ret

00002282 <_ZN8emstream7getcharEv>:
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	08 95       	ret

00002288 <_ZN8emstream13ready_to_sendEv>:
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	08 95       	ret

0000228c <__cxa_pure_virtual>:
    228c:	08 95       	ret

0000228e <_ZN14frt_text_queue7getcharEv>:
    228e:	0f 93       	push	r16
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	1f 92       	push	r1
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	00 e0       	ldi	r16, 0x00	; 0
    229c:	2f ef       	ldi	r18, 0xFF	; 255
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	a9 01       	movw	r20, r18
    22a2:	be 01       	movw	r22, r28
    22a4:	6f 5f       	subi	r22, 0xFF	; 255
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	fc 01       	movw	r30, r24
    22aa:	80 85       	ldd	r24, Z+8	; 0x08
    22ac:	91 85       	ldd	r25, Z+9	; 0x09
    22ae:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <xQueueGenericReceive>
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	19 f4       	brne	.+6      	; 0x22bc <_ZN14frt_text_queue7getcharEv+0x2e>
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <_ZN14frt_text_queue7getcharEv+0x32>
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	9f ef       	ldi	r25, 0xFF	; 255
    22c0:	0f 90       	pop	r0
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <_ZN14frt_text_queue14check_for_charEv>:
    22ca:	fc 01       	movw	r30, r24
    22cc:	80 85       	ldd	r24, Z+8	; 0x08
    22ce:	91 85       	ldd	r25, Z+9	; 0x09
    22d0:	0e 94 1d 1b 	call	0x363a	; 0x363a <uxQueueMessagesWaiting>
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	81 11       	cpse	r24, r1
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <_ZN14frt_text_queue14check_for_charEv+0x12>
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	89 2f       	mov	r24, r25
    22de:	08 95       	ret

000022e0 <_ZN14frt_text_queue7putcharEc>:
    22e0:	0f 93       	push	r16
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	1f 92       	push	r1
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	69 83       	std	Y+1, r22	; 0x01
    22ee:	fc 01       	movw	r30, r24
    22f0:	22 85       	ldd	r18, Z+10	; 0x0a
    22f2:	33 85       	ldd	r19, Z+11	; 0x0b
    22f4:	44 85       	ldd	r20, Z+12	; 0x0c
    22f6:	55 85       	ldd	r21, Z+13	; 0x0d
    22f8:	00 e0       	ldi	r16, 0x00	; 0
    22fa:	be 01       	movw	r22, r28
    22fc:	6f 5f       	subi	r22, 0xFF	; 255
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	80 85       	ldd	r24, Z+8	; 0x08
    2302:	91 85       	ldd	r25, Z+9	; 0x09
    2304:	0e 94 be 19 	call	0x337c	; 0x337c <xQueueGenericSend>
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	81 11       	cpse	r24, r1
    230c:	01 c0       	rjmp	.+2      	; 0x2310 <_ZN14frt_text_queue7putcharEc+0x30>
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	89 2f       	mov	r24, r25
    2312:	0f 90       	pop	r0
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	0f 91       	pop	r16
    231a:	08 95       	ret

0000231c <_call_static_run_method>:
    231c:	ec 01       	movw	r28, r24
    231e:	e8 81       	ld	r30, Y
    2320:	f9 81       	ldd	r31, Y+1	; 0x01
    2322:	01 90       	ld	r0, Z+
    2324:	f0 81       	ld	r31, Z
    2326:	e0 2d       	mov	r30, r0
    2328:	19 95       	eicall
    232a:	1a 82       	std	Y+2, r1	; 0x02
    232c:	1b 82       	std	Y+3, r1	; 0x03
    232e:	6f ef       	ldi	r22, 0xFF	; 255
    2330:	7f ef       	ldi	r23, 0xFF	; 255
    2332:	cb 01       	movw	r24, r22
    2334:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <vTaskDelay>
    2338:	fa cf       	rjmp	.-12     	; 0x232e <_call_static_run_method+0x12>

0000233a <_ZN8emstreamlsE15ser_manipulator>:
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	ec 01       	movw	r28, r24
    2340:	86 2f       	mov	r24, r22
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	8b 30       	cpi	r24, 0x0B	; 11
    2346:	91 05       	cpc	r25, r1
    2348:	d8 f5       	brcc	.+118    	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    234a:	fc 01       	movw	r30, r24
    234c:	88 27       	eor	r24, r24
    234e:	e6 5a       	subi	r30, 0xA6	; 166
    2350:	fe 4f       	sbci	r31, 0xFE	; 254
    2352:	8f 4f       	sbci	r24, 0xFF	; 255
    2354:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__tablejump2__>
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	31 c0       	rjmp	.+98     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    235e:	88 e0       	ldi	r24, 0x08	; 8
    2360:	8a 83       	std	Y+2, r24	; 0x02
    2362:	2e c0       	rjmp	.+92     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2364:	8a e0       	ldi	r24, 0x0A	; 10
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	2b c0       	rjmp	.+86     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    236a:	80 e1       	ldi	r24, 0x10	; 16
    236c:	8a 83       	std	Y+2, r24	; 0x02
    236e:	28 c0       	rjmp	.+80     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	25 c0       	rjmp	.+74     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2376:	1b 82       	std	Y+3, r1	; 0x03
    2378:	23 c0       	rjmp	.+70     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    237a:	e8 81       	ld	r30, Y
    237c:	f9 81       	ldd	r31, Y+1	; 0x01
    237e:	02 80       	ldd	r0, Z+2	; 0x02
    2380:	f3 81       	ldd	r31, Z+3	; 0x03
    2382:	e0 2d       	mov	r30, r0
    2384:	6d e0       	ldi	r22, 0x0D	; 13
    2386:	ce 01       	movw	r24, r28
    2388:	19 95       	eicall
    238a:	e8 81       	ld	r30, Y
    238c:	f9 81       	ldd	r31, Y+1	; 0x01
    238e:	02 80       	ldd	r0, Z+2	; 0x02
    2390:	f3 81       	ldd	r31, Z+3	; 0x03
    2392:	e0 2d       	mov	r30, r0
    2394:	6a e0       	ldi	r22, 0x0A	; 10
    2396:	ce 01       	movw	r24, r28
    2398:	19 95       	eicall
    239a:	12 c0       	rjmp	.+36     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    239c:	e8 81       	ld	r30, Y
    239e:	f9 81       	ldd	r31, Y+1	; 0x01
    23a0:	02 84       	ldd	r0, Z+10	; 0x0a
    23a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    23a4:	e0 2d       	mov	r30, r0
    23a6:	ce 01       	movw	r24, r28
    23a8:	19 95       	eicall
    23aa:	0a c0       	rjmp	.+20     	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    23ac:	e8 81       	ld	r30, Y
    23ae:	f9 81       	ldd	r31, Y+1	; 0x01
    23b0:	00 84       	ldd	r0, Z+8	; 0x08
    23b2:	f1 85       	ldd	r31, Z+9	; 0x09
    23b4:	e0 2d       	mov	r30, r0
    23b6:	ce 01       	movw	r24, r28
    23b8:	19 95       	eicall
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <_ZN8emstreamlsE15ser_manipulator+0x86>
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8c 83       	std	Y+4, r24	; 0x04
    23c0:	ce 01       	movw	r24, r28
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <_ZN8emstream4putsEPKc>:
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	8c 01       	movw	r16, r24
    23d2:	fb 01       	movw	r30, r22
    23d4:	dc 01       	movw	r26, r24
    23d6:	14 96       	adiw	r26, 0x04	; 4
    23d8:	8c 91       	ld	r24, X
    23da:	81 11       	cpse	r24, r1
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <_ZN8emstream4putsEPKc+0x1e>
    23de:	60 81       	ld	r22, Z
    23e0:	61 11       	cpse	r22, r1
    23e2:	17 c0       	rjmp	.+46     	; 0x2412 <_ZN8emstream4putsEPKc+0x4a>
    23e4:	23 c0       	rjmp	.+70     	; 0x242c <_ZN8emstream4putsEPKc+0x64>
    23e6:	d8 01       	movw	r26, r16
    23e8:	14 96       	adiw	r26, 0x04	; 4
    23ea:	1c 92       	st	X, r1
    23ec:	eb 01       	movw	r28, r22
    23ee:	21 96       	adiw	r28, 0x01	; 1
    23f0:	64 91       	lpm	r22, Z
    23f2:	66 23       	and	r22, r22
    23f4:	d9 f0       	breq	.+54     	; 0x242c <_ZN8emstream4putsEPKc+0x64>
    23f6:	d8 01       	movw	r26, r16
    23f8:	ed 91       	ld	r30, X+
    23fa:	fc 91       	ld	r31, X
    23fc:	02 80       	ldd	r0, Z+2	; 0x02
    23fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2400:	e0 2d       	mov	r30, r0
    2402:	c8 01       	movw	r24, r16
    2404:	19 95       	eicall
    2406:	fe 01       	movw	r30, r28
    2408:	64 91       	lpm	r22, Z
    240a:	21 96       	adiw	r28, 0x01	; 1
    240c:	61 11       	cpse	r22, r1
    240e:	f3 cf       	rjmp	.-26     	; 0x23f6 <_ZN8emstream4putsEPKc+0x2e>
    2410:	0d c0       	rjmp	.+26     	; 0x242c <_ZN8emstream4putsEPKc+0x64>
    2412:	ef 01       	movw	r28, r30
    2414:	21 96       	adiw	r28, 0x01	; 1
    2416:	d8 01       	movw	r26, r16
    2418:	ed 91       	ld	r30, X+
    241a:	fc 91       	ld	r31, X
    241c:	02 80       	ldd	r0, Z+2	; 0x02
    241e:	f3 81       	ldd	r31, Z+3	; 0x03
    2420:	e0 2d       	mov	r30, r0
    2422:	c8 01       	movw	r24, r16
    2424:	19 95       	eicall
    2426:	69 91       	ld	r22, Y+
    2428:	61 11       	cpse	r22, r1
    242a:	f5 cf       	rjmp	.-22     	; 0x2416 <_ZN8emstream4putsEPKc+0x4e>
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	08 95       	ret

00002436 <_ZN8emstreamlsEm>:
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	a1 97       	sbiw	r28, 0x21	; 33
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	8c 01       	movw	r16, r24
    2450:	d4 2e       	mov	r13, r20
    2452:	e5 2e       	mov	r14, r21
    2454:	f6 2e       	mov	r15, r22
    2456:	97 2f       	mov	r25, r23
    2458:	f8 01       	movw	r30, r16
    245a:	22 81       	ldd	r18, Z+2	; 0x02
    245c:	20 31       	cpi	r18, 0x10	; 16
    245e:	21 f0       	breq	.+8      	; 0x2468 <_ZN8emstreamlsEm+0x32>
    2460:	28 30       	cpi	r18, 0x08	; 8
    2462:	11 f0       	breq	.+4      	; 0x2468 <_ZN8emstreamlsEm+0x32>
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	71 f4       	brne	.+28     	; 0x2484 <_ZN8emstreamlsEm+0x4e>
    2468:	69 2f       	mov	r22, r25
    246a:	c8 01       	movw	r24, r16
    246c:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    2470:	6f 2d       	mov	r22, r15
    2472:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    2476:	6e 2d       	mov	r22, r14
    2478:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    247c:	6d 2d       	mov	r22, r13
    247e:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <_ZN8emstreamlsEm+0x6c>
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	ae 01       	movw	r20, r28
    2488:	4f 5f       	subi	r20, 0xFF	; 255
    248a:	5f 4f       	sbci	r21, 0xFF	; 255
    248c:	6d 2d       	mov	r22, r13
    248e:	7e 2d       	mov	r23, r14
    2490:	8f 2d       	mov	r24, r15
    2492:	0e 94 4c 21 	call	0x4298	; 0x4298 <ultoa>
    2496:	be 01       	movw	r22, r28
    2498:	6f 5f       	subi	r22, 0xFF	; 255
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
    249c:	c8 01       	movw	r24, r16
    249e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    24a2:	c8 01       	movw	r24, r16
    24a4:	a1 96       	adiw	r28, 0x21	; 33
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	08 95       	ret

000024ba <_ZN8emstreamlsEj>:
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	61 97       	sbiw	r28, 0x11	; 17
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	8c 01       	movw	r16, r24
    24d0:	f6 2e       	mov	r15, r22
    24d2:	97 2f       	mov	r25, r23
    24d4:	f8 01       	movw	r30, r16
    24d6:	42 81       	ldd	r20, Z+2	; 0x02
    24d8:	40 31       	cpi	r20, 0x10	; 16
    24da:	21 f0       	breq	.+8      	; 0x24e4 <_ZN8emstreamlsEj+0x2a>
    24dc:	48 30       	cpi	r20, 0x08	; 8
    24de:	11 f0       	breq	.+4      	; 0x24e4 <_ZN8emstreamlsEj+0x2a>
    24e0:	42 30       	cpi	r20, 0x02	; 2
    24e2:	41 f4       	brne	.+16     	; 0x24f4 <_ZN8emstreamlsEj+0x3a>
    24e4:	69 2f       	mov	r22, r25
    24e6:	c8 01       	movw	r24, r16
    24e8:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    24ec:	6f 2d       	mov	r22, r15
    24ee:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    24f2:	0d c0       	rjmp	.+26     	; 0x250e <_ZN8emstreamlsEj+0x54>
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	be 01       	movw	r22, r28
    24f8:	6f 5f       	subi	r22, 0xFF	; 255
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 2d       	mov	r24, r15
    24fe:	0e 94 79 21 	call	0x42f2	; 0x42f2 <utoa>
    2502:	be 01       	movw	r22, r28
    2504:	6f 5f       	subi	r22, 0xFF	; 255
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	c8 01       	movw	r24, r16
    250a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    250e:	c8 01       	movw	r24, r16
    2510:	61 96       	adiw	r28, 0x11	; 17
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	08 95       	ret

00002522 <_ZN8frt_task12print_statusER8emstream>:
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	ec 01       	movw	r28, r24
    253c:	8b 01       	movw	r16, r22
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <pcTaskGetTaskName>
    2546:	bc 01       	movw	r22, r24
    2548:	c8 01       	movw	r24, r16
    254a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    254e:	d8 01       	movw	r26, r16
    2550:	ed 91       	ld	r30, X+
    2552:	fc 91       	ld	r31, X
    2554:	02 80       	ldd	r0, Z+2	; 0x02
    2556:	f3 81       	ldd	r31, Z+3	; 0x03
    2558:	e0 2d       	mov	r30, r0
    255a:	69 e0       	ldi	r22, 0x09	; 9
    255c:	c8 01       	movw	r24, r16
    255e:	19 95       	eicall
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <pcTaskGetTaskName>
    2568:	fc 01       	movw	r30, r24
    256a:	01 90       	ld	r0, Z+
    256c:	00 20       	and	r0, r0
    256e:	e9 f7       	brne	.-6      	; 0x256a <_ZN8frt_task12print_statusER8emstream+0x48>
    2570:	31 97       	sbiw	r30, 0x01	; 1
    2572:	e8 1b       	sub	r30, r24
    2574:	f9 0b       	sbc	r31, r25
    2576:	38 97       	sbiw	r30, 0x08	; 8
    2578:	48 f4       	brcc	.+18     	; 0x258c <_ZN8frt_task12print_statusER8emstream+0x6a>
    257a:	d8 01       	movw	r26, r16
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	02 80       	ldd	r0, Z+2	; 0x02
    2582:	f3 81       	ldd	r31, Z+3	; 0x03
    2584:	e0 2d       	mov	r30, r0
    2586:	69 e0       	ldi	r22, 0x09	; 9
    2588:	c8 01       	movw	r24, r16
    258a:	19 95       	eicall
    258c:	ce 84       	ldd	r12, Y+14	; 0x0e
    258e:	df 84       	ldd	r13, Y+15	; 0x0f
    2590:	e8 88       	ldd	r14, Y+16	; 0x10
    2592:	f9 88       	ldd	r15, Y+17	; 0x11
    2594:	a8 84       	ldd	r10, Y+8	; 0x08
    2596:	b9 84       	ldd	r11, Y+9	; 0x09
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	9b 81       	ldd	r25, Y+3	; 0x03
    259c:	0e 94 45 20 	call	0x408a	; 0x408a <uxTaskGetStackHighWaterMark>
    25a0:	98 2e       	mov	r9, r24
    25a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uxTaskPriorityGet>
    25ac:	68 2f       	mov	r22, r24
    25ae:	c8 01       	movw	r24, r16
    25b0:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    25b4:	6a e0       	ldi	r22, 0x0A	; 10
    25b6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    25ba:	ec 01       	movw	r28, r24
    25bc:	65 eb       	ldi	r22, 0xB5	; 181
    25be:	76 e0       	ldi	r23, 0x06	; 6
    25c0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    25c4:	68 2d       	mov	r22, r8
    25c6:	ce 01       	movw	r24, r28
    25c8:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    25cc:	6a e0       	ldi	r22, 0x0A	; 10
    25ce:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    25d2:	ec 01       	movw	r28, r24
    25d4:	63 eb       	ldi	r22, 0xB3	; 179
    25d6:	76 e0       	ldi	r23, 0x06	; 6
    25d8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    25dc:	69 2d       	mov	r22, r9
    25de:	ce 01       	movw	r24, r28
    25e0:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    25e4:	6a e0       	ldi	r22, 0x0A	; 10
    25e6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    25ea:	ec 01       	movw	r28, r24
    25ec:	61 eb       	ldi	r22, 0xB1	; 177
    25ee:	76 e0       	ldi	r23, 0x06	; 6
    25f0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    25f4:	b5 01       	movw	r22, r10
    25f6:	ce 01       	movw	r24, r28
    25f8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
    25fc:	6a e0       	ldi	r22, 0x0A	; 10
    25fe:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2602:	ec 01       	movw	r28, r24
    2604:	6f ea       	ldi	r22, 0xAF	; 175
    2606:	76 e0       	ldi	r23, 0x06	; 6
    2608:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    260c:	6a e0       	ldi	r22, 0x0A	; 10
    260e:	ce 01       	movw	r24, r28
    2610:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2614:	ec 01       	movw	r28, r24
    2616:	6d ea       	ldi	r22, 0xAD	; 173
    2618:	76 e0       	ldi	r23, 0x06	; 6
    261a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    261e:	b7 01       	movw	r22, r14
    2620:	a6 01       	movw	r20, r12
    2622:	ce 01       	movw	r24, r28
    2624:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZN8emstreamlsEm>
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
    2634:	df 90       	pop	r13
    2636:	cf 90       	pop	r12
    2638:	bf 90       	pop	r11
    263a:	af 90       	pop	r10
    263c:	9f 90       	pop	r9
    263e:	8f 90       	pop	r8
    2640:	08 95       	ret

00002642 <_Z15hex_dump_memoryPhS_P8emstreambh>:
    2642:	5f 92       	push	r5
    2644:	6f 92       	push	r6
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	5c 01       	movw	r10, r24
    2662:	3b 01       	movw	r6, r22
    2664:	4a 01       	movw	r8, r20
    2666:	12 2f       	mov	r17, r18
    2668:	50 2e       	mov	r5, r16
    266a:	63 e0       	ldi	r22, 0x03	; 3
    266c:	ca 01       	movw	r24, r20
    266e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2672:	a6 14       	cp	r10, r6
    2674:	b7 04       	cpc	r11, r7
    2676:	08 f0       	brcs	.+2      	; 0x267a <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    2678:	7c c0       	rjmp	.+248    	; 0x2772 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
    267a:	65 01       	movw	r12, r10
    267c:	84 e1       	ldi	r24, 0x14	; 20
    267e:	c8 0e       	add	r12, r24
    2680:	d1 1c       	adc	r13, r1
    2682:	00 e0       	ldi	r16, 0x00	; 0
    2684:	75 01       	movw	r14, r10
    2686:	b5 01       	movw	r22, r10
    2688:	c4 01       	movw	r24, r8
    268a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
    268e:	6a e0       	ldi	r22, 0x0A	; 10
    2690:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2694:	67 ec       	ldi	r22, 0xC7	; 199
    2696:	76 e0       	ldi	r23, 0x06	; 6
    2698:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    269c:	11 23       	and	r17, r17
    269e:	09 f4       	brne	.+2      	; 0x26a2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
    26a0:	6d c0       	rjmp	.+218    	; 0x277c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    26a2:	00 23       	and	r16, r16
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
    26a6:	6a c0       	rjmp	.+212    	; 0x277c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    26a8:	6a e0       	ldi	r22, 0x0A	; 10
    26aa:	c4 01       	movw	r24, r8
    26ac:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    26b0:	62 ec       	ldi	r22, 0xC2	; 194
    26b2:	76 e0       	ldi	r23, 0x06	; 6
    26b4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    26b8:	61 c0       	rjmp	.+194    	; 0x277c <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    26ba:	11 23       	and	r17, r17
    26bc:	71 f0       	breq	.+28     	; 0x26da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    26be:	01 11       	cpse	r16, r1
    26c0:	0c c0       	rjmp	.+24     	; 0x26da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    26c2:	88 81       	ld	r24, Y
    26c4:	85 15       	cp	r24, r5
    26c6:	49 f0       	breq	.+18     	; 0x26da <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    26c8:	6a e0       	ldi	r22, 0x0A	; 10
    26ca:	c4 01       	movw	r24, r8
    26cc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    26d0:	6d eb       	ldi	r22, 0xBD	; 189
    26d2:	76 e0       	ldi	r23, 0x06	; 6
    26d4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    26d8:	01 e0       	ldi	r16, 0x01	; 1
    26da:	69 91       	ld	r22, Y+
    26dc:	c4 01       	movw	r24, r8
    26de:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN8emstreamlsEh>
    26e2:	dc 01       	movw	r26, r24
    26e4:	ed 91       	ld	r30, X+
    26e6:	fc 91       	ld	r31, X
    26e8:	02 80       	ldd	r0, Z+2	; 0x02
    26ea:	f3 81       	ldd	r31, Z+3	; 0x03
    26ec:	e0 2d       	mov	r30, r0
    26ee:	60 e2       	ldi	r22, 0x20	; 32
    26f0:	19 95       	eicall
    26f2:	cc 16       	cp	r12, r28
    26f4:	dd 06       	cpc	r13, r29
    26f6:	09 f7       	brne	.-62     	; 0x26ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
    26f8:	11 23       	and	r17, r17
    26fa:	89 f0       	breq	.+34     	; 0x271e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
    26fc:	6a e0       	ldi	r22, 0x0A	; 10
    26fe:	c4 01       	movw	r24, r8
    2700:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2704:	ec 01       	movw	r28, r24
    2706:	67 eb       	ldi	r22, 0xB7	; 183
    2708:	76 e0       	ldi	r23, 0x06	; 6
    270a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    270e:	e8 81       	ld	r30, Y
    2710:	f9 81       	ldd	r31, Y+1	; 0x01
    2712:	02 80       	ldd	r0, Z+2	; 0x02
    2714:	f3 81       	ldd	r31, Z+3	; 0x03
    2716:	e0 2d       	mov	r30, r0
    2718:	60 e2       	ldi	r22, 0x20	; 32
    271a:	ce 01       	movw	r24, r28
    271c:	19 95       	eicall
    271e:	f7 01       	movw	r30, r14
    2720:	61 91       	ld	r22, Z+
    2722:	7f 01       	movw	r14, r30
    2724:	80 ee       	ldi	r24, 0xE0	; 224
    2726:	86 0f       	add	r24, r22
    2728:	8f 35       	cpi	r24, 0x5F	; 95
    272a:	48 f4       	brcc	.+18     	; 0x273e <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
    272c:	d4 01       	movw	r26, r8
    272e:	ed 91       	ld	r30, X+
    2730:	fc 91       	ld	r31, X
    2732:	02 80       	ldd	r0, Z+2	; 0x02
    2734:	f3 81       	ldd	r31, Z+3	; 0x03
    2736:	e0 2d       	mov	r30, r0
    2738:	c4 01       	movw	r24, r8
    273a:	19 95       	eicall
    273c:	09 c0       	rjmp	.+18     	; 0x2750 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
    273e:	d4 01       	movw	r26, r8
    2740:	ed 91       	ld	r30, X+
    2742:	fc 91       	ld	r31, X
    2744:	02 80       	ldd	r0, Z+2	; 0x02
    2746:	f3 81       	ldd	r31, Z+3	; 0x03
    2748:	e0 2d       	mov	r30, r0
    274a:	6e e2       	ldi	r22, 0x2E	; 46
    274c:	c4 01       	movw	r24, r8
    274e:	19 95       	eicall
    2750:	ce 14       	cp	r12, r14
    2752:	df 04       	cpc	r13, r15
    2754:	21 f7       	brne	.-56     	; 0x271e <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
    2756:	b4 e1       	ldi	r27, 0x14	; 20
    2758:	ab 0e       	add	r10, r27
    275a:	b1 1c       	adc	r11, r1
    275c:	66 e0       	ldi	r22, 0x06	; 6
    275e:	c4 01       	movw	r24, r8
    2760:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2764:	e4 e1       	ldi	r30, 0x14	; 20
    2766:	ce 0e       	add	r12, r30
    2768:	d1 1c       	adc	r13, r1
    276a:	a6 14       	cp	r10, r6
    276c:	b7 04       	cpc	r11, r7
    276e:	08 f4       	brcc	.+2      	; 0x2772 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
    2770:	89 cf       	rjmp	.-238    	; 0x2684 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
    2772:	62 e0       	ldi	r22, 0x02	; 2
    2774:	c4 01       	movw	r24, r8
    2776:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
    277c:	e7 01       	movw	r28, r14
    277e:	9d cf       	rjmp	.-198    	; 0x26ba <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	ff 90       	pop	r15
    278a:	ef 90       	pop	r14
    278c:	df 90       	pop	r13
    278e:	cf 90       	pop	r12
    2790:	bf 90       	pop	r11
    2792:	af 90       	pop	r10
    2794:	9f 90       	pop	r9
    2796:	8f 90       	pop	r8
    2798:	7f 90       	pop	r7
    279a:	6f 90       	pop	r6
    279c:	5f 90       	pop	r5
    279e:	08 95       	ret

000027a0 <_ZN10time_stamp10set_to_nowEv>:
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	ec 01       	movw	r28, r24
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	0f 92       	push	r0
    27ac:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    27b0:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    27b4:	8c 83       	std	Y+4, r24	; 0x04
    27b6:	9d 83       	std	Y+5, r25	; 0x05
    27b8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <xTaskGetTickCount>
    27bc:	68 83       	st	Y, r22
    27be:	79 83       	std	Y+1, r23	; 0x01
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	9b 83       	std	Y+3, r25	; 0x03
    27c4:	0f 90       	pop	r0
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	ce 01       	movw	r24, r28
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <_ZlsR8emstreamR10time_stamp>:
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	ef 92       	push	r14
    27da:	ff 92       	push	r15
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	2f 97       	sbiw	r28, 0x0f	; 15
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	8c 01       	movw	r16, r24
    27f0:	7b 01       	movw	r14, r22
    27f2:	db 01       	movw	r26, r22
    27f4:	6d 91       	ld	r22, X+
    27f6:	7d 91       	ld	r23, X+
    27f8:	8d 91       	ld	r24, X+
    27fa:	9c 91       	ld	r25, X
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f8 ee       	ldi	r31, 0xE8	; 232
    2800:	8f 2e       	mov	r8, r31
    2802:	f3 e0       	ldi	r31, 0x03	; 3
    2804:	9f 2e       	mov	r9, r31
    2806:	a1 2c       	mov	r10, r1
    2808:	b1 2c       	mov	r11, r1
    280a:	f0 2d       	mov	r31, r0
    280c:	a5 01       	movw	r20, r10
    280e:	94 01       	movw	r18, r8
    2810:	0e 94 0b 21 	call	0x4216	; 0x4216 <__udivmodsi4>
    2814:	ba 01       	movw	r22, r20
    2816:	a9 01       	movw	r20, r18
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 1b 12 	call	0x2436	; 0x2436 <_ZN8emstreamlsEm>
    281e:	d8 01       	movw	r26, r16
    2820:	ed 91       	ld	r30, X+
    2822:	fc 91       	ld	r31, X
    2824:	02 80       	ldd	r0, Z+2	; 0x02
    2826:	f3 81       	ldd	r31, Z+3	; 0x03
    2828:	e0 2d       	mov	r30, r0
    282a:	6e e2       	ldi	r22, 0x2E	; 46
    282c:	c8 01       	movw	r24, r16
    282e:	19 95       	eicall
    2830:	f7 01       	movw	r30, r14
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	a5 01       	movw	r20, r10
    283c:	94 01       	movw	r18, r8
    283e:	0e 94 0b 21 	call	0x4216	; 0x4216 <__udivmodsi4>
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	60 e4       	ldi	r22, 0x40	; 64
    2848:	72 e4       	ldi	r23, 0x42	; 66
    284a:	8f e0       	ldi	r24, 0x0F	; 15
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 be 23 	call	0x477c	; 0x477c <__mulsi3>
    2852:	a5 01       	movw	r20, r10
    2854:	94 01       	movw	r18, r8
    2856:	0e 94 0b 21 	call	0x4216	; 0x4216 <__udivmodsi4>
    285a:	49 01       	movw	r8, r18
    285c:	5a 01       	movw	r10, r20
    285e:	f7 01       	movw	r30, r14
    2860:	a4 81       	ldd	r26, Z+4	; 0x04
    2862:	b5 81       	ldd	r27, Z+5	; 0x05
    2864:	20 e4       	ldi	r18, 0x40	; 64
    2866:	32 e4       	ldi	r19, 0x42	; 66
    2868:	4f e0       	ldi	r20, 0x0F	; 15
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__muluhisi3>
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	38 e4       	ldi	r19, 0x48	; 72
    2874:	48 ee       	ldi	r20, 0xE8	; 232
    2876:	51 e0       	ldi	r21, 0x01	; 1
    2878:	0e 94 0b 21 	call	0x4216	; 0x4216 <__udivmodsi4>
    287c:	c5 01       	movw	r24, r10
    287e:	b4 01       	movw	r22, r8
    2880:	62 0f       	add	r22, r18
    2882:	73 1f       	adc	r23, r19
    2884:	84 1f       	adc	r24, r20
    2886:	95 1f       	adc	r25, r21
    2888:	7e 01       	movw	r14, r28
    288a:	f7 e0       	ldi	r31, 0x07	; 7
    288c:	ef 0e       	add	r14, r31
    288e:	f1 1c       	adc	r15, r1
    2890:	9e 01       	movw	r18, r28
    2892:	2f 5f       	subi	r18, 0xFF	; 255
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	59 01       	movw	r10, r18
    2898:	2a e0       	ldi	r18, 0x0A	; 10
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <__divmodsi4>
    28a4:	e6 2f       	mov	r30, r22
    28a6:	28 87       	std	Y+8, r18	; 0x08
    28a8:	39 87       	std	Y+9, r19	; 0x09
    28aa:	4a 87       	std	Y+10, r20	; 0x0a
    28ac:	5b 87       	std	Y+11, r21	; 0x0b
    28ae:	68 85       	ldd	r22, Y+8	; 0x08
    28b0:	79 85       	ldd	r23, Y+9	; 0x09
    28b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b6:	20 e3       	ldi	r18, 0x30	; 48
    28b8:	2e 0f       	add	r18, r30
    28ba:	d7 01       	movw	r26, r14
    28bc:	2e 93       	st	-X, r18
    28be:	7d 01       	movw	r14, r26
    28c0:	aa 15       	cp	r26, r10
    28c2:	bb 05       	cpc	r27, r11
    28c4:	49 f7       	brne	.-46     	; 0x2898 <_ZlsR8emstreamR10time_stamp+0xc8>
    28c6:	1f 82       	std	Y+7, r1	; 0x07
    28c8:	be 01       	movw	r22, r28
    28ca:	6f 5f       	subi	r22, 0xFF	; 255
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	c8 01       	movw	r24, r16
    28d0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    28d4:	c8 01       	movw	r24, r16
    28d6:	2f 96       	adiw	r28, 0x0f	; 15
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	bf 90       	pop	r11
    28ea:	af 90       	pop	r10
    28ec:	9f 90       	pop	r9
    28ee:	8f 90       	pop	r8
    28f0:	08 95       	ret

000028f2 <_ZN8frt_task20print_status_in_listEP8emstream>:
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	ec 01       	movw	r28, r24
    28fc:	8b 01       	movw	r16, r22
    28fe:	e8 81       	ld	r30, Y
    2900:	f9 81       	ldd	r31, Y+1	; 0x01
    2902:	02 80       	ldd	r0, Z+2	; 0x02
    2904:	f3 81       	ldd	r31, Z+3	; 0x03
    2906:	e0 2d       	mov	r30, r0
    2908:	19 95       	eicall
    290a:	66 e0       	ldi	r22, 0x06	; 6
    290c:	c8 01       	movw	r24, r16
    290e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	9d 81       	ldd	r25, Y+5	; 0x05
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	19 f0       	breq	.+6      	; 0x2920 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
    291a:	b8 01       	movw	r22, r16
    291c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_ZN8frt_task20print_status_in_listEP8emstream>
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	08 95       	ret

0000292a <_ZN8frt_task19print_stack_in_listEP8emstream>:
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	ec 01       	movw	r28, r24
    293c:	7b 01       	movw	r14, r22
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <pcTaskGetTaskName>
    2946:	6c 01       	movw	r12, r24
    2948:	6a e0       	ldi	r22, 0x0A	; 10
    294a:	c7 01       	movw	r24, r14
    294c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2950:	8c 01       	movw	r16, r24
    2952:	68 ea       	ldi	r22, 0xA8	; 168
    2954:	76 e0       	ldi	r23, 0x06	; 6
    2956:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    295a:	6a e0       	ldi	r22, 0x0A	; 10
    295c:	c8 01       	movw	r24, r16
    295e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2962:	8c 01       	movw	r16, r24
    2964:	61 ea       	ldi	r22, 0xA1	; 161
    2966:	76 e0       	ldi	r23, 0x06	; 6
    2968:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    296c:	b6 01       	movw	r22, r12
    296e:	c8 01       	movw	r24, r16
    2970:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2974:	6a e0       	ldi	r22, 0x0A	; 10
    2976:	c8 01       	movw	r24, r16
    2978:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    297c:	8c 01       	movw	r16, r24
    297e:	6b e9       	ldi	r22, 0x9B	; 155
    2980:	76 e0       	ldi	r23, 0x06	; 6
    2982:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2986:	66 e0       	ldi	r22, 0x06	; 6
    2988:	c8 01       	movw	r24, r16
    298a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    298e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2990:	9b 85       	ldd	r25, Y+11	; 0x0b
    2992:	e8 85       	ldd	r30, Y+8	; 0x08
    2994:	f9 85       	ldd	r31, Y+9	; 0x09
    2996:	01 e1       	ldi	r16, 0x11	; 17
    2998:	21 e0       	ldi	r18, 0x01	; 1
    299a:	a7 01       	movw	r20, r14
    299c:	bc 01       	movw	r22, r24
    299e:	8e 1b       	sub	r24, r30
    29a0:	9f 0b       	sbc	r25, r31
    29a2:	0e 94 21 13 	call	0x2642	; 0x2642 <_Z15hex_dump_memoryPhS_P8emstreambh>
    29a6:	8c 81       	ldd	r24, Y+4	; 0x04
    29a8:	9d 81       	ldd	r25, Y+5	; 0x05
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    29ae:	b7 01       	movw	r22, r14
    29b0:	0e 94 95 14 	call	0x292a	; 0x292a <_ZN8frt_task19print_stack_in_listEP8emstream>
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	08 95       	ret

000029c6 <_ZN8frt_taskC2EPKchjP8emstream>:
    29c6:	4f 92       	push	r4
    29c8:	5f 92       	push	r5
    29ca:	6f 92       	push	r6
    29cc:	7f 92       	push	r7
    29ce:	8f 92       	push	r8
    29d0:	9f 92       	push	r9
    29d2:	af 92       	push	r10
    29d4:	bf 92       	push	r11
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	2a 97       	sbiw	r28, 0x0a	; 10
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	4c 01       	movw	r8, r24
    29f2:	29 01       	movw	r4, r18
    29f4:	38 01       	movw	r6, r16
    29f6:	8a e6       	ldi	r24, 0x6A	; 106
    29f8:	90 e2       	ldi	r25, 0x20	; 32
    29fa:	f4 01       	movw	r30, r8
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	fb 01       	movw	r30, r22
    2a02:	80 81       	ld	r24, Z
    2a04:	88 23       	and	r24, r24
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    2a08:	de 01       	movw	r26, r28
    2a0a:	11 96       	adiw	r26, 0x01	; 1
    2a0c:	31 96       	adiw	r30, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    2a12:	99 30       	cpi	r25, 0x09	; 9
    2a14:	39 f0       	breq	.+14     	; 0x2a24 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    2a16:	9f 5f       	subi	r25, 0xFF	; 255
    2a18:	8d 93       	st	X+, r24
    2a1a:	81 91       	ld	r24, Z+
    2a1c:	81 11       	cpse	r24, r1
    2a1e:	f9 cf       	rjmp	.-14     	; 0x2a12 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	e1 e0       	ldi	r30, 0x01	; 1
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	ec 0f       	add	r30, r28
    2a2a:	fd 1f       	adc	r31, r29
    2a2c:	e9 0f       	add	r30, r25
    2a2e:	f1 1d       	adc	r31, r1
    2a30:	10 82       	st	Z, r1
    2a32:	74 01       	movw	r14, r8
    2a34:	f2 e0       	ldi	r31, 0x02	; 2
    2a36:	ef 0e       	add	r14, r31
    2a38:	f1 1c       	adc	r15, r1
    2a3a:	a1 2c       	mov	r10, r1
    2a3c:	b1 2c       	mov	r11, r1
    2a3e:	c1 2c       	mov	r12, r1
    2a40:	d1 2c       	mov	r13, r1
    2a42:	04 2f       	mov	r16, r20
    2a44:	94 01       	movw	r18, r8
    2a46:	a2 01       	movw	r20, r4
    2a48:	be 01       	movw	r22, r28
    2a4a:	6f 5f       	subi	r22, 0xFF	; 255
    2a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4e:	8e e8       	ldi	r24, 0x8E	; 142
    2a50:	91 e1       	ldi	r25, 0x11	; 17
    2a52:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <xTaskGenericCreate>
    2a56:	f4 01       	movw	r30, r8
    2a58:	66 82       	std	Z+6, r6	; 0x06
    2a5a:	77 82       	std	Z+7, r7	; 0x07
    2a5c:	40 86       	std	Z+8, r4	; 0x08
    2a5e:	51 86       	std	Z+9, r5	; 0x09
    2a60:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <last_created_task_pointer>
    2a64:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <last_created_task_pointer+0x1>
    2a68:	24 83       	std	Z+4, r18	; 0x04
    2a6a:	35 83       	std	Z+5, r19	; 0x05
    2a6c:	80 92 24 21 	sts	0x2124, r8	; 0x802124 <last_created_task_pointer>
    2a70:	90 92 25 21 	sts	0x2125, r9	; 0x802125 <last_created_task_pointer+0x1>
    2a74:	14 86       	std	Z+12, r1	; 0x0c
    2a76:	15 86       	std	Z+13, r1	; 0x0d
    2a78:	40 90 90 31 	lds	r4, 0x3190	; 0x803190 <portStackTopForTask>
    2a7c:	50 90 91 31 	lds	r5, 0x3191	; 0x803191 <portStackTopForTask+0x1>
    2a80:	ff ef       	ldi	r31, 0xFF	; 255
    2a82:	4f 1a       	sub	r4, r31
    2a84:	5f 0a       	sbc	r5, r31
    2a86:	40 92 90 31 	sts	0x3190, r4	; 0x803190 <portStackTopForTask>
    2a8a:	50 92 91 31 	sts	0x3191, r5	; 0x803191 <portStackTopForTask+0x1>
    2a8e:	f4 01       	movw	r30, r8
    2a90:	42 86       	std	Z+10, r4	; 0x0a
    2a92:	53 86       	std	Z+11, r5	; 0x0b
    2a94:	16 86       	std	Z+14, r1	; 0x0e
    2a96:	17 86       	std	Z+15, r1	; 0x0f
    2a98:	10 8a       	std	Z+16, r1	; 0x10
    2a9a:	11 8a       	std	Z+17, r1	; 0x11
    2a9c:	61 14       	cp	r6, r1
    2a9e:	71 04       	cpc	r7, r1
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    2aa2:	44 c0       	rjmp	.+136    	; 0x2b2c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	79 f5       	brne	.+94     	; 0x2b06 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    2aa8:	6a e0       	ldi	r22, 0x0A	; 10
    2aaa:	c3 01       	movw	r24, r6
    2aac:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2ab0:	7c 01       	movw	r14, r24
    2ab2:	65 e9       	ldi	r22, 0x95	; 149
    2ab4:	76 e0       	ldi	r23, 0x06	; 6
    2ab6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2aba:	be 01       	movw	r22, r28
    2abc:	6f 5f       	subi	r22, 0xFF	; 255
    2abe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2ac6:	6a e0       	ldi	r22, 0x0A	; 10
    2ac8:	c7 01       	movw	r24, r14
    2aca:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2ace:	7c 01       	movw	r14, r24
    2ad0:	6c e8       	ldi	r22, 0x8C	; 140
    2ad2:	76 e0       	ldi	r23, 0x06	; 6
    2ad4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2ad8:	6a e0       	ldi	r22, 0x0A	; 10
    2ada:	c7 01       	movw	r24, r14
    2adc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2ae0:	7c 01       	movw	r14, r24
    2ae2:	6e e7       	ldi	r22, 0x7E	; 126
    2ae4:	76 e0       	ldi	r23, 0x06	; 6
    2ae6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2aea:	63 e0       	ldi	r22, 0x03	; 3
    2aec:	c7 01       	movw	r24, r14
    2aee:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2af2:	b2 01       	movw	r22, r4
    2af4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN8emstreamlsEj>
    2af8:	62 e0       	ldi	r22, 0x02	; 2
    2afa:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2afe:	66 e0       	ldi	r22, 0x06	; 6
    2b00:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2b04:	13 c0       	rjmp	.+38     	; 0x2b2c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    2b06:	6a e0       	ldi	r22, 0x0A	; 10
    2b08:	c3 01       	movw	r24, r6
    2b0a:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2b0e:	4c 01       	movw	r8, r24
    2b10:	69 e6       	ldi	r22, 0x69	; 105
    2b12:	76 e0       	ldi	r23, 0x06	; 6
    2b14:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2b18:	be 01       	movw	r22, r28
    2b1a:	6f 5f       	subi	r22, 0xFF	; 255
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	c4 01       	movw	r24, r8
    2b20:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN8emstream4putsEPKc>
    2b24:	66 e0       	ldi	r22, 0x06	; 6
    2b26:	c4 01       	movw	r24, r8
    2b28:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN8emstreamlsE15ser_manipulator>
    2b2c:	2a 96       	adiw	r28, 0x0a	; 10
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	df 90       	pop	r13
    2b40:	cf 90       	pop	r12
    2b42:	bf 90       	pop	r11
    2b44:	af 90       	pop	r10
    2b46:	9f 90       	pop	r9
    2b48:	8f 90       	pop	r8
    2b4a:	7f 90       	pop	r7
    2b4c:	6f 90       	pop	r6
    2b4e:	5f 90       	pop	r5
    2b50:	4f 90       	pop	r4
    2b52:	08 95       	ret

00002b54 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    2b5e:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    2b62:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <xHeapHasBeenInitialised.4150>
    2b66:	81 11       	cpse	r24, r1
    2b68:	1d c0       	rjmp	.+58     	; 0x2ba4 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    2b6a:	ab e2       	ldi	r26, 0x2B	; 43
    2b6c:	b1 e2       	ldi	r27, 0x21	; 33
    2b6e:	ef e2       	ldi	r30, 0x2F	; 47
    2b70:	f1 e2       	ldi	r31, 0x21	; 33
    2b72:	ed 93       	st	X+, r30
    2b74:	fc 93       	st	X, r31
    2b76:	11 97       	sbiw	r26, 0x01	; 1
    2b78:	12 96       	adiw	r26, 0x02	; 2
    2b7a:	1d 92       	st	X+, r1
    2b7c:	1c 92       	st	X, r1
    2b7e:	13 97       	sbiw	r26, 0x03	; 3
    2b80:	a7 e2       	ldi	r26, 0x27	; 39
    2b82:	b1 e2       	ldi	r27, 0x21	; 33
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	9f e0       	ldi	r25, 0x0F	; 15
    2b88:	12 96       	adiw	r26, 0x02	; 2
    2b8a:	8d 93       	st	X+, r24
    2b8c:	9c 93       	st	X, r25
    2b8e:	13 97       	sbiw	r26, 0x03	; 3
    2b90:	1d 92       	st	X+, r1
    2b92:	1c 92       	st	X, r1
    2b94:	11 97       	sbiw	r26, 0x01	; 1
    2b96:	82 83       	std	Z+2, r24	; 0x02
    2b98:	93 83       	std	Z+3, r25	; 0x03
    2b9a:	a0 83       	st	Z, r26
    2b9c:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    2ba4:	20 97       	sbiw	r28, 0x00	; 0
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <pvPortMalloc+0x56>
    2ba8:	5f c0       	rjmp	.+190    	; 0x2c68 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    2baa:	9e 01       	movw	r18, r28
    2bac:	2b 5f       	subi	r18, 0xFB	; 251
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    2bb0:	24 96       	adiw	r28, 0x04	; 4
    2bb2:	ce 3f       	cpi	r28, 0xFE	; 254
    2bb4:	df 40       	sbci	r29, 0x0F	; 15
    2bb6:	08 f0       	brcs	.+2      	; 0x2bba <pvPortMalloc+0x66>
    2bb8:	5a c0       	rjmp	.+180    	; 0x2c6e <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    2bba:	e0 91 2b 21 	lds	r30, 0x212B	; 0x80212b <xStart>
    2bbe:	f0 91 2c 21 	lds	r31, 0x212C	; 0x80212c <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2bc2:	ab e2       	ldi	r26, 0x2B	; 43
    2bc4:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <pvPortMalloc+0x78>
    2bc8:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    2bca:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	82 17       	cp	r24, r18
    2bd2:	93 07       	cpc	r25, r19
    2bd4:	20 f4       	brcc	.+8      	; 0x2bde <pvPortMalloc+0x8a>
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	a9 f7       	brne	.-22     	; 0x2bc8 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    2bde:	c1 e2       	ldi	r28, 0x21	; 33
    2be0:	e7 32       	cpi	r30, 0x27	; 39
    2be2:	fc 07       	cpc	r31, r28
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <pvPortMalloc+0x94>
    2be6:	46 c0       	rjmp	.+140    	; 0x2c74 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2be8:	cd 91       	ld	r28, X+
    2bea:	dc 91       	ld	r29, X
    2bec:	11 97       	sbiw	r26, 0x01	; 1
    2bee:	8e 01       	movw	r16, r28
    2bf0:	0b 5f       	subi	r16, 0xFB	; 251
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	8d 93       	st	X+, r24
    2bfa:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	82 1b       	sub	r24, r18
    2c02:	93 0b       	sbc	r25, r19
    2c04:	8b 30       	cpi	r24, 0x0B	; 11
    2c06:	91 05       	cpc	r25, r1
    2c08:	10 f1       	brcs	.+68     	; 0x2c4e <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2c0a:	bf 01       	movw	r22, r30
    2c0c:	62 0f       	add	r22, r18
    2c0e:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2c10:	db 01       	movw	r26, r22
    2c12:	12 96       	adiw	r26, 0x02	; 2
    2c14:	8d 93       	st	X+, r24
    2c16:	9c 93       	st	X, r25
    2c18:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2c1a:	22 83       	std	Z+2, r18	; 0x02
    2c1c:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2c1e:	12 96       	adiw	r26, 0x02	; 2
    2c20:	4d 91       	ld	r20, X+
    2c22:	5c 91       	ld	r21, X
    2c24:	13 97       	sbiw	r26, 0x03	; 3
    2c26:	8b e2       	ldi	r24, 0x2B	; 43
    2c28:	91 e2       	ldi	r25, 0x21	; 33
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <pvPortMalloc+0xda>
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	ec 01       	movw	r28, r24
    2c30:	a8 81       	ld	r26, Y
    2c32:	b9 81       	ldd	r27, Y+1	; 0x01
    2c34:	12 96       	adiw	r26, 0x02	; 2
    2c36:	2d 91       	ld	r18, X+
    2c38:	3c 91       	ld	r19, X
    2c3a:	13 97       	sbiw	r26, 0x03	; 3
    2c3c:	24 17       	cp	r18, r20
    2c3e:	35 07       	cpc	r19, r21
    2c40:	a8 f3       	brcs	.-22     	; 0x2c2c <pvPortMalloc+0xd8>
    2c42:	eb 01       	movw	r28, r22
    2c44:	a8 83       	st	Y, r26
    2c46:	b9 83       	std	Y+1, r27	; 0x01
    2c48:	dc 01       	movw	r26, r24
    2c4a:	6d 93       	st	X+, r22
    2c4c:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    2c4e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2c52:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2c56:	22 81       	ldd	r18, Z+2	; 0x02
    2c58:	33 81       	ldd	r19, Z+3	; 0x03
    2c5a:	82 1b       	sub	r24, r18
    2c5c:	93 0b       	sbc	r25, r19
    2c5e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2c62:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2c68:	00 e0       	ldi	r16, 0x00	; 0
    2c6a:	10 e0       	ldi	r17, 0x00	; 0
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <pvPortMalloc+0x124>
    2c6e:	00 e0       	ldi	r16, 0x00	; 0
    2c70:	10 e0       	ldi	r17, 0x00	; 0
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <pvPortMalloc+0x124>
    2c74:	00 e0       	ldi	r16, 0x00	; 0
    2c76:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2c78:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	08 95       	ret

00002c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	41 f1       	breq	.+80     	; 0x2ce4 <vPortFree+0x5c>
    2c94:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2c96:	8c 01       	movw	r16, r24
    2c98:	05 50       	subi	r16, 0x05	; 5
    2c9a:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    2c9c:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	42 81       	ldd	r20, Z+2	; 0x02
    2ca4:	53 81       	ldd	r21, Z+3	; 0x03
    2ca6:	ab e2       	ldi	r26, 0x2B	; 43
    2ca8:	b1 e2       	ldi	r27, 0x21	; 33
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <vPortFree+0x26>
    2cac:	df 01       	movw	r26, r30
    2cae:	ed 91       	ld	r30, X+
    2cb0:	fc 91       	ld	r31, X
    2cb2:	11 97       	sbiw	r26, 0x01	; 1
    2cb4:	22 81       	ldd	r18, Z+2	; 0x02
    2cb6:	33 81       	ldd	r19, Z+3	; 0x03
    2cb8:	24 17       	cp	r18, r20
    2cba:	35 07       	cpc	r19, r21
    2cbc:	b8 f3       	brcs	.-18     	; 0x2cac <vPortFree+0x24>
    2cbe:	25 97       	sbiw	r28, 0x05	; 5
    2cc0:	e8 83       	st	Y, r30
    2cc2:	f9 83       	std	Y+1, r31	; 0x01
    2cc4:	0d 93       	st	X+, r16
    2cc6:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2cc8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2ccc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	82 0f       	add	r24, r18
    2cd6:	93 1f       	adc	r25, r19
    2cd8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2cdc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    2ce0:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
	}
}
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2cee:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2cf2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2cf6:	08 95       	ret

00002cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2cf8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2cfa:	03 96       	adiw	r24, 0x03	; 3
    2cfc:	81 83       	std	Z+1, r24	; 0x01
    2cfe:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2d00:	4f ef       	ldi	r20, 0xFF	; 255
    2d02:	5f ef       	ldi	r21, 0xFF	; 255
    2d04:	ba 01       	movw	r22, r20
    2d06:	43 83       	std	Z+3, r20	; 0x03
    2d08:	54 83       	std	Z+4, r21	; 0x04
    2d0a:	65 83       	std	Z+5, r22	; 0x05
    2d0c:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2d0e:	87 83       	std	Z+7, r24	; 0x07
    2d10:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2d12:	81 87       	std	Z+9, r24	; 0x09
    2d14:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2d16:	10 82       	st	Z, r1
    2d18:	08 95       	ret

00002d1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	12 86       	std	Z+10, r1	; 0x0a
    2d1e:	13 86       	std	Z+11, r1	; 0x0b
    2d20:	08 95       	ret

00002d22 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	fc 01       	movw	r30, r24
    2d28:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2d2a:	21 81       	ldd	r18, Z+1	; 0x01
    2d2c:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    2d2e:	e9 01       	movw	r28, r18
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	9d 81       	ldd	r25, Y+5	; 0x05
    2d34:	14 96       	adiw	r26, 0x04	; 4
    2d36:	8d 93       	st	X+, r24
    2d38:	9c 93       	st	X, r25
    2d3a:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2d3c:	81 81       	ldd	r24, Z+1	; 0x01
    2d3e:	92 81       	ldd	r25, Z+2	; 0x02
    2d40:	16 96       	adiw	r26, 0x06	; 6
    2d42:	8d 93       	st	X+, r24
    2d44:	9c 93       	st	X, r25
    2d46:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d48:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	6e 83       	std	Y+6, r22	; 0x06
    2d50:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d52:	e9 01       	movw	r28, r18
    2d54:	6c 83       	std	Y+4, r22	; 0x04
    2d56:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2d58:	61 83       	std	Z+1, r22	; 0x01
    2d5a:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d5c:	1a 96       	adiw	r26, 0x0a	; 10
    2d5e:	ed 93       	st	X+, r30
    2d60:	fc 93       	st	X, r31
    2d62:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    2d64:	80 81       	ld	r24, Z
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	08 95       	ret

00002d70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2d7a:	08 81       	ld	r16, Y
    2d7c:	19 81       	ldd	r17, Y+1	; 0x01
    2d7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d80:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2d82:	0f 3f       	cpi	r16, 0xFF	; 255
    2d84:	4f ef       	ldi	r20, 0xFF	; 255
    2d86:	14 07       	cpc	r17, r20
    2d88:	24 07       	cpc	r18, r20
    2d8a:	34 07       	cpc	r19, r20
    2d8c:	31 f4       	brne	.+12     	; 0x2d9a <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2d8e:	dc 01       	movw	r26, r24
    2d90:	19 96       	adiw	r26, 0x09	; 9
    2d92:	ed 91       	ld	r30, X+
    2d94:	fc 91       	ld	r31, X
    2d96:	1a 97       	sbiw	r26, 0x0a	; 10
    2d98:	1f c0       	rjmp	.+62     	; 0x2dd8 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	33 96       	adiw	r30, 0x03	; 3
    2d9e:	dc 01       	movw	r26, r24
    2da0:	17 96       	adiw	r26, 0x07	; 7
    2da2:	4d 91       	ld	r20, X+
    2da4:	5c 91       	ld	r21, X
    2da6:	18 97       	sbiw	r26, 0x08	; 8
    2da8:	da 01       	movw	r26, r20
    2daa:	4d 91       	ld	r20, X+
    2dac:	5d 91       	ld	r21, X+
    2dae:	6d 91       	ld	r22, X+
    2db0:	7c 91       	ld	r23, X
    2db2:	04 17       	cp	r16, r20
    2db4:	15 07       	cpc	r17, r21
    2db6:	26 07       	cpc	r18, r22
    2db8:	37 07       	cpc	r19, r23
    2dba:	70 f0       	brcs	.+28     	; 0x2dd8 <vListInsert+0x68>
    2dbc:	04 80       	ldd	r0, Z+4	; 0x04
    2dbe:	f5 81       	ldd	r31, Z+5	; 0x05
    2dc0:	e0 2d       	mov	r30, r0
    2dc2:	a4 81       	ldd	r26, Z+4	; 0x04
    2dc4:	b5 81       	ldd	r27, Z+5	; 0x05
    2dc6:	4d 91       	ld	r20, X+
    2dc8:	5d 91       	ld	r21, X+
    2dca:	6d 91       	ld	r22, X+
    2dcc:	7c 91       	ld	r23, X
    2dce:	04 17       	cp	r16, r20
    2dd0:	15 07       	cpc	r17, r21
    2dd2:	26 07       	cpc	r18, r22
    2dd4:	37 07       	cpc	r19, r23
    2dd6:	90 f7       	brcc	.-28     	; 0x2dbc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2dd8:	a4 81       	ldd	r26, Z+4	; 0x04
    2dda:	b5 81       	ldd	r27, Z+5	; 0x05
    2ddc:	ac 83       	std	Y+4, r26	; 0x04
    2dde:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2de0:	16 96       	adiw	r26, 0x06	; 6
    2de2:	cd 93       	st	X+, r28
    2de4:	dc 93       	st	X, r29
    2de6:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2de8:	ee 83       	std	Y+6, r30	; 0x06
    2dea:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2dec:	c4 83       	std	Z+4, r28	; 0x04
    2dee:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2df0:	8a 87       	std	Y+10, r24	; 0x0a
    2df2:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2df4:	fc 01       	movw	r30, r24
    2df6:	20 81       	ld	r18, Z
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	20 83       	st	Z, r18
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	08 95       	ret

00002e06 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2e06:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e08:	a4 81       	ldd	r26, Z+4	; 0x04
    2e0a:	b5 81       	ldd	r27, Z+5	; 0x05
    2e0c:	86 81       	ldd	r24, Z+6	; 0x06
    2e0e:	97 81       	ldd	r25, Z+7	; 0x07
    2e10:	16 96       	adiw	r26, 0x06	; 6
    2e12:	8d 93       	st	X+, r24
    2e14:	9c 93       	st	X, r25
    2e16:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2e18:	a6 81       	ldd	r26, Z+6	; 0x06
    2e1a:	b7 81       	ldd	r27, Z+7	; 0x07
    2e1c:	84 81       	ldd	r24, Z+4	; 0x04
    2e1e:	95 81       	ldd	r25, Z+5	; 0x05
    2e20:	14 96       	adiw	r26, 0x04	; 4
    2e22:	8d 93       	st	X+, r24
    2e24:	9c 93       	st	X, r25
    2e26:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2e28:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e2a:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2e2c:	11 96       	adiw	r26, 0x01	; 1
    2e2e:	8d 91       	ld	r24, X+
    2e30:	9c 91       	ld	r25, X
    2e32:	12 97       	sbiw	r26, 0x02	; 2
    2e34:	e8 17       	cp	r30, r24
    2e36:	f9 07       	cpc	r31, r25
    2e38:	31 f4       	brne	.+12     	; 0x2e46 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2e3a:	86 81       	ldd	r24, Z+6	; 0x06
    2e3c:	97 81       	ldd	r25, Z+7	; 0x07
    2e3e:	11 96       	adiw	r26, 0x01	; 1
    2e40:	8d 93       	st	X+, r24
    2e42:	9c 93       	st	X, r25
    2e44:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2e46:	12 86       	std	Z+10, r1	; 0x0a
    2e48:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2e4a:	8c 91       	ld	r24, X
    2e4c:	81 50       	subi	r24, 0x01	; 1
    2e4e:	8c 93       	st	X, r24
    2e50:	08 95       	ret

00002e52 <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2e52:	80 93 90 31 	sts	0x3190, r24	; 0x803190 <portStackTopForTask>
    2e56:	90 93 91 31 	sts	0x3191, r25	; 0x803191 <portStackTopForTask+0x1>
    2e5a:	31 e1       	ldi	r19, 0x11	; 17
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	30 83       	st	Z, r19
    2e60:	31 97       	sbiw	r30, 0x01	; 1
    2e62:	22 e2       	ldi	r18, 0x22	; 34
    2e64:	20 83       	st	Z, r18
    2e66:	31 97       	sbiw	r30, 0x01	; 1
    2e68:	a3 e3       	ldi	r26, 0x33	; 51
    2e6a:	a0 83       	st	Z, r26
    2e6c:	31 97       	sbiw	r30, 0x01	; 1
    2e6e:	60 83       	st	Z, r22
    2e70:	31 97       	sbiw	r30, 0x01	; 1
    2e72:	70 83       	st	Z, r23
    2e74:	31 97       	sbiw	r30, 0x01	; 1
    2e76:	10 82       	st	Z, r1
    2e78:	31 97       	sbiw	r30, 0x01	; 1
    2e7a:	10 82       	st	Z, r1
    2e7c:	31 97       	sbiw	r30, 0x01	; 1
    2e7e:	60 e8       	ldi	r22, 0x80	; 128
    2e80:	60 83       	st	Z, r22
    2e82:	31 97       	sbiw	r30, 0x01	; 1
    2e84:	10 82       	st	Z, r1
    2e86:	31 97       	sbiw	r30, 0x01	; 1
    2e88:	10 82       	st	Z, r1
    2e8a:	31 97       	sbiw	r30, 0x01	; 1
    2e8c:	10 82       	st	Z, r1
    2e8e:	31 97       	sbiw	r30, 0x01	; 1
    2e90:	62 e0       	ldi	r22, 0x02	; 2
    2e92:	60 83       	st	Z, r22
    2e94:	31 97       	sbiw	r30, 0x01	; 1
    2e96:	63 e0       	ldi	r22, 0x03	; 3
    2e98:	60 83       	st	Z, r22
    2e9a:	31 97       	sbiw	r30, 0x01	; 1
    2e9c:	64 e0       	ldi	r22, 0x04	; 4
    2e9e:	60 83       	st	Z, r22
    2ea0:	31 97       	sbiw	r30, 0x01	; 1
    2ea2:	65 e0       	ldi	r22, 0x05	; 5
    2ea4:	60 83       	st	Z, r22
    2ea6:	31 97       	sbiw	r30, 0x01	; 1
    2ea8:	66 e0       	ldi	r22, 0x06	; 6
    2eaa:	60 83       	st	Z, r22
    2eac:	31 97       	sbiw	r30, 0x01	; 1
    2eae:	67 e0       	ldi	r22, 0x07	; 7
    2eb0:	60 83       	st	Z, r22
    2eb2:	31 97       	sbiw	r30, 0x01	; 1
    2eb4:	68 e0       	ldi	r22, 0x08	; 8
    2eb6:	60 83       	st	Z, r22
    2eb8:	31 97       	sbiw	r30, 0x01	; 1
    2eba:	69 e0       	ldi	r22, 0x09	; 9
    2ebc:	60 83       	st	Z, r22
    2ebe:	31 97       	sbiw	r30, 0x01	; 1
    2ec0:	60 e1       	ldi	r22, 0x10	; 16
    2ec2:	60 83       	st	Z, r22
    2ec4:	31 97       	sbiw	r30, 0x01	; 1
    2ec6:	30 83       	st	Z, r19
    2ec8:	31 97       	sbiw	r30, 0x01	; 1
    2eca:	32 e1       	ldi	r19, 0x12	; 18
    2ecc:	30 83       	st	Z, r19
    2ece:	31 97       	sbiw	r30, 0x01	; 1
    2ed0:	33 e1       	ldi	r19, 0x13	; 19
    2ed2:	30 83       	st	Z, r19
    2ed4:	31 97       	sbiw	r30, 0x01	; 1
    2ed6:	34 e1       	ldi	r19, 0x14	; 20
    2ed8:	30 83       	st	Z, r19
    2eda:	31 97       	sbiw	r30, 0x01	; 1
    2edc:	35 e1       	ldi	r19, 0x15	; 21
    2ede:	30 83       	st	Z, r19
    2ee0:	31 97       	sbiw	r30, 0x01	; 1
    2ee2:	36 e1       	ldi	r19, 0x16	; 22
    2ee4:	30 83       	st	Z, r19
    2ee6:	31 97       	sbiw	r30, 0x01	; 1
    2ee8:	37 e1       	ldi	r19, 0x17	; 23
    2eea:	30 83       	st	Z, r19
    2eec:	31 97       	sbiw	r30, 0x01	; 1
    2eee:	38 e1       	ldi	r19, 0x18	; 24
    2ef0:	30 83       	st	Z, r19
    2ef2:	31 97       	sbiw	r30, 0x01	; 1
    2ef4:	39 e1       	ldi	r19, 0x19	; 25
    2ef6:	30 83       	st	Z, r19
    2ef8:	31 97       	sbiw	r30, 0x01	; 1
    2efa:	30 e2       	ldi	r19, 0x20	; 32
    2efc:	30 83       	st	Z, r19
    2efe:	31 97       	sbiw	r30, 0x01	; 1
    2f00:	31 e2       	ldi	r19, 0x21	; 33
    2f02:	30 83       	st	Z, r19
    2f04:	31 97       	sbiw	r30, 0x01	; 1
    2f06:	20 83       	st	Z, r18
    2f08:	31 97       	sbiw	r30, 0x01	; 1
    2f0a:	23 e2       	ldi	r18, 0x23	; 35
    2f0c:	20 83       	st	Z, r18
    2f0e:	31 97       	sbiw	r30, 0x01	; 1
    2f10:	40 83       	st	Z, r20
    2f12:	31 97       	sbiw	r30, 0x01	; 1
    2f14:	50 83       	st	Z, r21
    2f16:	31 97       	sbiw	r30, 0x01	; 1
    2f18:	26 e2       	ldi	r18, 0x26	; 38
    2f1a:	20 83       	st	Z, r18
    2f1c:	31 97       	sbiw	r30, 0x01	; 1
    2f1e:	27 e2       	ldi	r18, 0x27	; 39
    2f20:	20 83       	st	Z, r18
    2f22:	31 97       	sbiw	r30, 0x01	; 1
    2f24:	28 e2       	ldi	r18, 0x28	; 40
    2f26:	20 83       	st	Z, r18
    2f28:	31 97       	sbiw	r30, 0x01	; 1
    2f2a:	29 e2       	ldi	r18, 0x29	; 41
    2f2c:	20 83       	st	Z, r18
    2f2e:	31 97       	sbiw	r30, 0x01	; 1
    2f30:	20 e3       	ldi	r18, 0x30	; 48
    2f32:	20 83       	st	Z, r18
    2f34:	31 97       	sbiw	r30, 0x01	; 1
    2f36:	21 e3       	ldi	r18, 0x31	; 49
    2f38:	20 83       	st	Z, r18
    2f3a:	89 97       	sbiw	r24, 0x29	; 41
    2f3c:	08 95       	ret

00002f3e <xPortStartScheduler>:
    2f3e:	8c e7       	ldi	r24, 0x7C	; 124
    2f40:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2f44:	8f ef       	ldi	r24, 0xFF	; 255
    2f46:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2f50:	91 e1       	ldi	r25, 0x11	; 17
    2f52:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2f56:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2f5a:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    2f5e:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    2f62:	cd 91       	ld	r28, X+
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	dd 91       	ld	r29, X+
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	ff 91       	pop	r31
    2f6c:	ef 91       	pop	r30
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	9f 91       	pop	r25
    2f78:	8f 91       	pop	r24
    2f7a:	7f 91       	pop	r23
    2f7c:	6f 91       	pop	r22
    2f7e:	5f 91       	pop	r21
    2f80:	4f 91       	pop	r20
    2f82:	3f 91       	pop	r19
    2f84:	2f 91       	pop	r18
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	ff 90       	pop	r15
    2f8c:	ef 90       	pop	r14
    2f8e:	df 90       	pop	r13
    2f90:	cf 90       	pop	r12
    2f92:	bf 90       	pop	r11
    2f94:	af 90       	pop	r10
    2f96:	9f 90       	pop	r9
    2f98:	8f 90       	pop	r8
    2f9a:	7f 90       	pop	r7
    2f9c:	6f 90       	pop	r6
    2f9e:	5f 90       	pop	r5
    2fa0:	4f 90       	pop	r4
    2fa2:	3f 90       	pop	r3
    2fa4:	2f 90       	pop	r2
    2fa6:	1f 90       	pop	r1
    2fa8:	0f 90       	pop	r0
    2faa:	0c be       	out	0x3c, r0	; 60
    2fac:	0f 90       	pop	r0
    2fae:	0b be       	out	0x3b, r0	; 59
    2fb0:	0f 90       	pop	r0
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	0f 90       	pop	r0
    2fb6:	08 95       	ret
    2fb8:	08 95       	ret

00002fba <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2fba:	0f 92       	push	r0
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	0f 92       	push	r0
    2fc2:	0b b6       	in	r0, 0x3b	; 59
    2fc4:	0f 92       	push	r0
    2fc6:	0c b6       	in	r0, 0x3c	; 60
    2fc8:	0f 92       	push	r0
    2fca:	1f 92       	push	r1
    2fcc:	11 24       	eor	r1, r1
    2fce:	2f 92       	push	r2
    2fd0:	3f 92       	push	r3
    2fd2:	4f 92       	push	r4
    2fd4:	5f 92       	push	r5
    2fd6:	6f 92       	push	r6
    2fd8:	7f 92       	push	r7
    2fda:	8f 92       	push	r8
    2fdc:	9f 92       	push	r9
    2fde:	af 92       	push	r10
    2fe0:	bf 92       	push	r11
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	2f 93       	push	r18
    2ff0:	3f 93       	push	r19
    2ff2:	4f 93       	push	r20
    2ff4:	5f 93       	push	r21
    2ff6:	6f 93       	push	r22
    2ff8:	7f 93       	push	r23
    2ffa:	8f 93       	push	r24
    2ffc:	9f 93       	push	r25
    2ffe:	af 93       	push	r26
    3000:	bf 93       	push	r27
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	ef 93       	push	r30
    3008:	ff 93       	push	r31
    300a:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    300e:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3012:	0d b6       	in	r0, 0x3d	; 61
    3014:	0d 92       	st	X+, r0
    3016:	0e b6       	in	r0, 0x3e	; 62
    3018:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    301a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    301e:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    3022:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3026:	cd 91       	ld	r28, X+
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	dd 91       	ld	r29, X+
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	ff 91       	pop	r31
    3030:	ef 91       	pop	r30
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	bf 91       	pop	r27
    3038:	af 91       	pop	r26
    303a:	9f 91       	pop	r25
    303c:	8f 91       	pop	r24
    303e:	7f 91       	pop	r23
    3040:	6f 91       	pop	r22
    3042:	5f 91       	pop	r21
    3044:	4f 91       	pop	r20
    3046:	3f 91       	pop	r19
    3048:	2f 91       	pop	r18
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	8f 90       	pop	r8
    305e:	7f 90       	pop	r7
    3060:	6f 90       	pop	r6
    3062:	5f 90       	pop	r5
    3064:	4f 90       	pop	r4
    3066:	3f 90       	pop	r3
    3068:	2f 90       	pop	r2
    306a:	1f 90       	pop	r1
    306c:	0f 90       	pop	r0
    306e:	0c be       	out	0x3c, r0	; 60
    3070:	0f 90       	pop	r0
    3072:	0b be       	out	0x3b, r0	; 59
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0

	asm volatile ( "ret" );
    307a:	08 95       	ret

0000307c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    307c:	0f 92       	push	r0
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	0f 92       	push	r0
    3084:	0b b6       	in	r0, 0x3b	; 59
    3086:	0f 92       	push	r0
    3088:	0c b6       	in	r0, 0x3c	; 60
    308a:	0f 92       	push	r0
    308c:	1f 92       	push	r1
    308e:	11 24       	eor	r1, r1
    3090:	2f 92       	push	r2
    3092:	3f 92       	push	r3
    3094:	4f 92       	push	r4
    3096:	5f 92       	push	r5
    3098:	6f 92       	push	r6
    309a:	7f 92       	push	r7
    309c:	8f 92       	push	r8
    309e:	9f 92       	push	r9
    30a0:	af 92       	push	r10
    30a2:	bf 92       	push	r11
    30a4:	cf 92       	push	r12
    30a6:	df 92       	push	r13
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	2f 93       	push	r18
    30b2:	3f 93       	push	r19
    30b4:	4f 93       	push	r20
    30b6:	5f 93       	push	r21
    30b8:	6f 93       	push	r22
    30ba:	7f 93       	push	r23
    30bc:	8f 93       	push	r24
    30be:	9f 93       	push	r25
    30c0:	af 93       	push	r26
    30c2:	bf 93       	push	r27
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    30d0:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    30d4:	0d b6       	in	r0, 0x3d	; 61
    30d6:	0d 92       	st	X+, r0
    30d8:	0e b6       	in	r0, 0x3e	; 62
    30da:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    30dc:	0e 94 df 1c 	call	0x39be	; 0x39be <vTaskIncrementTick>
	vTaskSwitchContext();
    30e0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    30e4:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    30e8:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    30ec:	cd 91       	ld	r28, X+
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	dd 91       	ld	r29, X+
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	ff 91       	pop	r31
    30f6:	ef 91       	pop	r30
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	bf 91       	pop	r27
    30fe:	af 91       	pop	r26
    3100:	9f 91       	pop	r25
    3102:	8f 91       	pop	r24
    3104:	7f 91       	pop	r23
    3106:	6f 91       	pop	r22
    3108:	5f 91       	pop	r21
    310a:	4f 91       	pop	r20
    310c:	3f 91       	pop	r19
    310e:	2f 91       	pop	r18
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	bf 90       	pop	r11
    311e:	af 90       	pop	r10
    3120:	9f 90       	pop	r9
    3122:	8f 90       	pop	r8
    3124:	7f 90       	pop	r7
    3126:	6f 90       	pop	r6
    3128:	5f 90       	pop	r5
    312a:	4f 90       	pop	r4
    312c:	3f 90       	pop	r3
    312e:	2f 90       	pop	r2
    3130:	1f 90       	pop	r1
    3132:	0f 90       	pop	r0
    3134:	0c be       	out	0x3c, r0	; 60
    3136:	0f 90       	pop	r0
    3138:	0b be       	out	0x3b, r0	; 59
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3140:	08 95       	ret

00003142 <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    3142:	0e 94 3e 18 	call	0x307c	; 0x307c <vPortYieldFromTick>
		asm volatile ( "reti" );
    3146:	18 95       	reti

00003148 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	ec 01       	movw	r28, r24
    314e:	88 a1       	ldd	r24, Y+32	; 0x20
    3150:	81 11       	cpse	r24, r1
    3152:	0b c0       	rjmp	.+22     	; 0x316a <prvCopyDataToQueue+0x22>
    3154:	88 81       	ld	r24, Y
    3156:	99 81       	ldd	r25, Y+1	; 0x01
    3158:	89 2b       	or	r24, r25
    315a:	e1 f5       	brne	.+120    	; 0x31d4 <prvCopyDataToQueue+0x8c>
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	9b 81       	ldd	r25, Y+3	; 0x03
    3160:	0e 94 b8 20 	call	0x4170	; 0x4170 <vTaskPriorityDisinherit>
    3164:	1a 82       	std	Y+2, r1	; 0x02
    3166:	1b 82       	std	Y+3, r1	; 0x03
    3168:	35 c0       	rjmp	.+106    	; 0x31d4 <prvCopyDataToQueue+0x8c>
    316a:	41 11       	cpse	r20, r1
    316c:	17 c0       	rjmp	.+46     	; 0x319c <prvCopyDataToQueue+0x54>
    316e:	48 2f       	mov	r20, r24
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	0e 94 2d 21 	call	0x425a	; 0x425a <memcpy>
    317a:	28 a1       	ldd	r18, Y+32	; 0x20
    317c:	8c 81       	ldd	r24, Y+4	; 0x04
    317e:	9d 81       	ldd	r25, Y+5	; 0x05
    3180:	82 0f       	add	r24, r18
    3182:	91 1d       	adc	r25, r1
    3184:	8c 83       	std	Y+4, r24	; 0x04
    3186:	9d 83       	std	Y+5, r25	; 0x05
    3188:	2a 81       	ldd	r18, Y+2	; 0x02
    318a:	3b 81       	ldd	r19, Y+3	; 0x03
    318c:	82 17       	cp	r24, r18
    318e:	93 07       	cpc	r25, r19
    3190:	08 f1       	brcs	.+66     	; 0x31d4 <prvCopyDataToQueue+0x8c>
    3192:	88 81       	ld	r24, Y
    3194:	99 81       	ldd	r25, Y+1	; 0x01
    3196:	8c 83       	std	Y+4, r24	; 0x04
    3198:	9d 83       	std	Y+5, r25	; 0x05
    319a:	1c c0       	rjmp	.+56     	; 0x31d4 <prvCopyDataToQueue+0x8c>
    319c:	48 2f       	mov	r20, r24
    319e:	50 e0       	ldi	r21, 0x00	; 0
    31a0:	8e 81       	ldd	r24, Y+6	; 0x06
    31a2:	9f 81       	ldd	r25, Y+7	; 0x07
    31a4:	0e 94 2d 21 	call	0x425a	; 0x425a <memcpy>
    31a8:	88 a1       	ldd	r24, Y+32	; 0x20
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	91 95       	neg	r25
    31ae:	81 95       	neg	r24
    31b0:	91 09       	sbc	r25, r1
    31b2:	2e 81       	ldd	r18, Y+6	; 0x06
    31b4:	3f 81       	ldd	r19, Y+7	; 0x07
    31b6:	28 0f       	add	r18, r24
    31b8:	39 1f       	adc	r19, r25
    31ba:	2e 83       	std	Y+6, r18	; 0x06
    31bc:	3f 83       	std	Y+7, r19	; 0x07
    31be:	48 81       	ld	r20, Y
    31c0:	59 81       	ldd	r21, Y+1	; 0x01
    31c2:	24 17       	cp	r18, r20
    31c4:	35 07       	cpc	r19, r21
    31c6:	30 f4       	brcc	.+12     	; 0x31d4 <prvCopyDataToQueue+0x8c>
    31c8:	2a 81       	ldd	r18, Y+2	; 0x02
    31ca:	3b 81       	ldd	r19, Y+3	; 0x03
    31cc:	82 0f       	add	r24, r18
    31ce:	93 1f       	adc	r25, r19
    31d0:	8e 83       	std	Y+6, r24	; 0x06
    31d2:	9f 83       	std	Y+7, r25	; 0x07
    31d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d6:	8f 5f       	subi	r24, 0xFF	; 255
    31d8:	8e 8f       	std	Y+30, r24	; 0x1e
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <prvCopyDataFromQueue>:
    31e0:	fc 01       	movw	r30, r24
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	a1 f0       	breq	.+40     	; 0x3212 <prvCopyDataFromQueue+0x32>
    31ea:	40 a1       	ldd	r20, Z+32	; 0x20
    31ec:	50 e0       	ldi	r21, 0x00	; 0
    31ee:	26 81       	ldd	r18, Z+6	; 0x06
    31f0:	37 81       	ldd	r19, Z+7	; 0x07
    31f2:	24 0f       	add	r18, r20
    31f4:	35 1f       	adc	r19, r21
    31f6:	26 83       	std	Z+6, r18	; 0x06
    31f8:	37 83       	std	Z+7, r19	; 0x07
    31fa:	a2 81       	ldd	r26, Z+2	; 0x02
    31fc:	b3 81       	ldd	r27, Z+3	; 0x03
    31fe:	2a 17       	cp	r18, r26
    3200:	3b 07       	cpc	r19, r27
    3202:	10 f0       	brcs	.+4      	; 0x3208 <prvCopyDataFromQueue+0x28>
    3204:	86 83       	std	Z+6, r24	; 0x06
    3206:	97 83       	std	Z+7, r25	; 0x07
    3208:	cb 01       	movw	r24, r22
    320a:	66 81       	ldd	r22, Z+6	; 0x06
    320c:	77 81       	ldd	r23, Z+7	; 0x07
    320e:	0e 94 2d 21 	call	0x425a	; 0x425a <memcpy>
    3212:	08 95       	ret

00003214 <prvUnlockQueue>:
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	ec 01       	movw	r28, r24
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	0f 92       	push	r0
    3224:	8a a1       	ldd	r24, Y+34	; 0x22
    3226:	18 16       	cp	r1, r24
    3228:	b4 f4       	brge	.+44     	; 0x3256 <prvUnlockQueue+0x42>
    322a:	8b 89       	ldd	r24, Y+19	; 0x13
    322c:	81 11       	cpse	r24, r1
    322e:	05 c0       	rjmp	.+10     	; 0x323a <prvUnlockQueue+0x26>
    3230:	12 c0       	rjmp	.+36     	; 0x3256 <prvUnlockQueue+0x42>
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	81 11       	cpse	r24, r1
    3236:	04 c0       	rjmp	.+8      	; 0x3240 <prvUnlockQueue+0x2c>
    3238:	0e c0       	rjmp	.+28     	; 0x3256 <prvUnlockQueue+0x42>
    323a:	8e 01       	movw	r16, r28
    323c:	0d 5e       	subi	r16, 0xED	; 237
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	c8 01       	movw	r24, r16
    3242:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <xTaskRemoveFromEventList>
    3246:	81 11       	cpse	r24, r1
    3248:	0e 94 41 20 	call	0x4082	; 0x4082 <vTaskMissedYield>
    324c:	8a a1       	ldd	r24, Y+34	; 0x22
    324e:	81 50       	subi	r24, 0x01	; 1
    3250:	8a a3       	std	Y+34, r24	; 0x22
    3252:	18 16       	cp	r1, r24
    3254:	74 f3       	brlt	.-36     	; 0x3232 <prvUnlockQueue+0x1e>
    3256:	8f ef       	ldi	r24, 0xFF	; 255
    3258:	8a a3       	std	Y+34, r24	; 0x22
    325a:	0f 90       	pop	r0
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	0f 92       	push	r0
    3264:	89 a1       	ldd	r24, Y+33	; 0x21
    3266:	18 16       	cp	r1, r24
    3268:	b4 f4       	brge	.+44     	; 0x3296 <prvUnlockQueue+0x82>
    326a:	88 85       	ldd	r24, Y+8	; 0x08
    326c:	81 11       	cpse	r24, r1
    326e:	05 c0       	rjmp	.+10     	; 0x327a <prvUnlockQueue+0x66>
    3270:	12 c0       	rjmp	.+36     	; 0x3296 <prvUnlockQueue+0x82>
    3272:	88 85       	ldd	r24, Y+8	; 0x08
    3274:	81 11       	cpse	r24, r1
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <prvUnlockQueue+0x6c>
    3278:	0e c0       	rjmp	.+28     	; 0x3296 <prvUnlockQueue+0x82>
    327a:	8e 01       	movw	r16, r28
    327c:	08 5f       	subi	r16, 0xF8	; 248
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	c8 01       	movw	r24, r16
    3282:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <xTaskRemoveFromEventList>
    3286:	81 11       	cpse	r24, r1
    3288:	0e 94 41 20 	call	0x4082	; 0x4082 <vTaskMissedYield>
    328c:	89 a1       	ldd	r24, Y+33	; 0x21
    328e:	81 50       	subi	r24, 0x01	; 1
    3290:	89 a3       	std	Y+33, r24	; 0x21
    3292:	18 16       	cp	r1, r24
    3294:	74 f3       	brlt	.-36     	; 0x3272 <prvUnlockQueue+0x5e>
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	0f 90       	pop	r0
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	df 91       	pop	r29
    32a0:	cf 91       	pop	r28
    32a2:	1f 91       	pop	r17
    32a4:	0f 91       	pop	r16
    32a6:	08 95       	ret

000032a8 <xQueueGenericReset>:
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	61 30       	cpi	r22, 0x01	; 1
    32b0:	59 f0       	breq	.+22     	; 0x32c8 <xQueueGenericReset+0x20>
    32b2:	fc 01       	movw	r30, r24
    32b4:	23 89       	ldd	r18, Z+19	; 0x13
    32b6:	30 85       	ldd	r19, Z+8	; 0x08
    32b8:	31 11       	cpse	r19, r1
    32ba:	2c c0       	rjmp	.+88     	; 0x3314 <xQueueGenericReset+0x6c>
    32bc:	11 e0       	ldi	r17, 0x01	; 1
    32be:	21 11       	cpse	r18, r1
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	21 11       	cpse	r18, r1
    32c4:	28 c0       	rjmp	.+80     	; 0x3316 <xQueueGenericReset+0x6e>
    32c6:	01 c0       	rjmp	.+2      	; 0x32ca <xQueueGenericReset+0x22>
    32c8:	11 e0       	ldi	r17, 0x01	; 1
    32ca:	ec 01       	movw	r28, r24
    32cc:	48 81       	ld	r20, Y
    32ce:	59 81       	ldd	r21, Y+1	; 0x01
    32d0:	28 a1       	ldd	r18, Y+32	; 0x20
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32d6:	62 9f       	mul	r22, r18
    32d8:	c0 01       	movw	r24, r0
    32da:	63 9f       	mul	r22, r19
    32dc:	90 0d       	add	r25, r0
    32de:	11 24       	eor	r1, r1
    32e0:	ba 01       	movw	r22, r20
    32e2:	68 0f       	add	r22, r24
    32e4:	79 1f       	adc	r23, r25
    32e6:	6a 83       	std	Y+2, r22	; 0x02
    32e8:	7b 83       	std	Y+3, r23	; 0x03
    32ea:	1e 8e       	std	Y+30, r1	; 0x1e
    32ec:	4c 83       	std	Y+4, r20	; 0x04
    32ee:	5d 83       	std	Y+5, r21	; 0x05
    32f0:	82 1b       	sub	r24, r18
    32f2:	93 0b       	sbc	r25, r19
    32f4:	84 0f       	add	r24, r20
    32f6:	95 1f       	adc	r25, r21
    32f8:	8e 83       	std	Y+6, r24	; 0x06
    32fa:	9f 83       	std	Y+7, r25	; 0x07
    32fc:	8f ef       	ldi	r24, 0xFF	; 255
    32fe:	89 a3       	std	Y+33, r24	; 0x21
    3300:	8a a3       	std	Y+34, r24	; 0x22
    3302:	ce 01       	movw	r24, r28
    3304:	08 96       	adiw	r24, 0x08	; 8
    3306:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    330a:	ce 01       	movw	r24, r28
    330c:	43 96       	adiw	r24, 0x13	; 19
    330e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <xQueueGenericReset+0x6e>
    3314:	10 e0       	ldi	r17, 0x00	; 0
    3316:	81 2f       	mov	r24, r17
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	08 95       	ret

00003320 <xQueueGenericCreate>:
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	88 23       	and	r24, r24
    332a:	01 f1       	breq	.+64     	; 0x336c <xQueueGenericCreate+0x4c>
    332c:	06 2f       	mov	r16, r22
    332e:	18 2f       	mov	r17, r24
    3330:	83 e2       	ldi	r24, 0x23	; 35
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    3338:	ec 01       	movw	r28, r24
    333a:	89 2b       	or	r24, r25
    333c:	c9 f0       	breq	.+50     	; 0x3370 <xQueueGenericCreate+0x50>
    333e:	10 9f       	mul	r17, r16
    3340:	c0 01       	movw	r24, r0
    3342:	11 24       	eor	r1, r1
    3344:	01 96       	adiw	r24, 0x01	; 1
    3346:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    334a:	88 83       	st	Y, r24
    334c:	99 83       	std	Y+1, r25	; 0x01
    334e:	89 2b       	or	r24, r25
    3350:	39 f0       	breq	.+14     	; 0x3360 <xQueueGenericCreate+0x40>
    3352:	1f 8f       	std	Y+31, r17	; 0x1f
    3354:	08 a3       	std	Y+32, r16	; 0x20
    3356:	61 e0       	ldi	r22, 0x01	; 1
    3358:	ce 01       	movw	r24, r28
    335a:	0e 94 54 19 	call	0x32a8	; 0x32a8 <xQueueGenericReset>
    335e:	08 c0       	rjmp	.+16     	; 0x3370 <xQueueGenericCreate+0x50>
    3360:	ce 01       	movw	r24, r28
    3362:	0e 94 44 16 	call	0x2c88	; 0x2c88 <vPortFree>
    3366:	c0 e0       	ldi	r28, 0x00	; 0
    3368:	d0 e0       	ldi	r29, 0x00	; 0
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <xQueueGenericCreate+0x50>
    336c:	c0 e0       	ldi	r28, 0x00	; 0
    336e:	d0 e0       	ldi	r29, 0x00	; 0
    3370:	ce 01       	movw	r24, r28
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	08 95       	ret

0000337c <xQueueGenericSend>:
    337c:	af 92       	push	r10
    337e:	bf 92       	push	r11
    3380:	cf 92       	push	r12
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	29 97       	sbiw	r28, 0x09	; 9
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	7c 01       	movw	r14, r24
    339c:	5b 01       	movw	r10, r22
    339e:	2e 83       	std	Y+6, r18	; 0x06
    33a0:	3f 83       	std	Y+7, r19	; 0x07
    33a2:	48 87       	std	Y+8, r20	; 0x08
    33a4:	59 87       	std	Y+9, r21	; 0x09
    33a6:	10 e0       	ldi	r17, 0x00	; 0
    33a8:	6c 01       	movw	r12, r24
    33aa:	88 e0       	ldi	r24, 0x08	; 8
    33ac:	c8 0e       	add	r12, r24
    33ae:	d1 1c       	adc	r13, r1
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	0f 92       	push	r0
    33b6:	f7 01       	movw	r30, r14
    33b8:	96 8d       	ldd	r25, Z+30	; 0x1e
    33ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    33bc:	98 17       	cp	r25, r24
    33be:	a8 f4       	brcc	.+42     	; 0x33ea <xQueueGenericSend+0x6e>
    33c0:	40 2f       	mov	r20, r16
    33c2:	b5 01       	movw	r22, r10
    33c4:	c7 01       	movw	r24, r14
    33c6:	0e 94 a4 18 	call	0x3148	; 0x3148 <prvCopyDataToQueue>
    33ca:	f7 01       	movw	r30, r14
    33cc:	83 89       	ldd	r24, Z+19	; 0x13
    33ce:	88 23       	and	r24, r24
    33d0:	41 f0       	breq	.+16     	; 0x33e2 <xQueueGenericSend+0x66>
    33d2:	c7 01       	movw	r24, r14
    33d4:	43 96       	adiw	r24, 0x13	; 19
    33d6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <xTaskRemoveFromEventList>
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	11 f4       	brne	.+4      	; 0x33e2 <xQueueGenericSend+0x66>
    33de:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	56 c0       	rjmp	.+172    	; 0x3496 <xQueueGenericSend+0x11a>
    33ea:	8e 81       	ldd	r24, Y+6	; 0x06
    33ec:	9f 81       	ldd	r25, Y+7	; 0x07
    33ee:	a8 85       	ldd	r26, Y+8	; 0x08
    33f0:	b9 85       	ldd	r27, Y+9	; 0x09
    33f2:	89 2b       	or	r24, r25
    33f4:	8a 2b       	or	r24, r26
    33f6:	8b 2b       	or	r24, r27
    33f8:	21 f4       	brne	.+8      	; 0x3402 <xQueueGenericSend+0x86>
    33fa:	0f 90       	pop	r0
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	4a c0       	rjmp	.+148    	; 0x3496 <xQueueGenericSend+0x11a>
    3402:	11 11       	cpse	r17, r1
    3404:	05 c0       	rjmp	.+10     	; 0x3410 <xQueueGenericSend+0x94>
    3406:	ce 01       	movw	r24, r28
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <vTaskSetTimeOutState>
    340e:	11 e0       	ldi	r17, 0x01	; 1
    3410:	0f 90       	pop	r0
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	0f 92       	push	r0
    341e:	f7 01       	movw	r30, r14
    3420:	81 a1       	ldd	r24, Z+33	; 0x21
    3422:	8f 3f       	cpi	r24, 0xFF	; 255
    3424:	09 f4       	brne	.+2      	; 0x3428 <xQueueGenericSend+0xac>
    3426:	11 a2       	std	Z+33, r1	; 0x21
    3428:	f7 01       	movw	r30, r14
    342a:	82 a1       	ldd	r24, Z+34	; 0x22
    342c:	8f 3f       	cpi	r24, 0xFF	; 255
    342e:	09 f4       	brne	.+2      	; 0x3432 <xQueueGenericSend+0xb6>
    3430:	12 a2       	std	Z+34, r1	; 0x22
    3432:	0f 90       	pop	r0
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	be 01       	movw	r22, r28
    3438:	6a 5f       	subi	r22, 0xFA	; 250
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	ce 01       	movw	r24, r28
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <xTaskCheckForTimeOut>
    3444:	81 11       	cpse	r24, r1
    3446:	21 c0       	rjmp	.+66     	; 0x348a <xQueueGenericSend+0x10e>
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	0f 92       	push	r0
    344e:	f7 01       	movw	r30, r14
    3450:	96 8d       	ldd	r25, Z+30	; 0x1e
    3452:	0f 90       	pop	r0
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	87 8d       	ldd	r24, Z+31	; 0x1f
    3458:	98 13       	cpse	r25, r24
    345a:	11 c0       	rjmp	.+34     	; 0x347e <xQueueGenericSend+0x102>
    345c:	4e 81       	ldd	r20, Y+6	; 0x06
    345e:	5f 81       	ldd	r21, Y+7	; 0x07
    3460:	68 85       	ldd	r22, Y+8	; 0x08
    3462:	79 85       	ldd	r23, Y+9	; 0x09
    3464:	c6 01       	movw	r24, r12
    3466:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <vTaskPlaceOnEventList>
    346a:	c7 01       	movw	r24, r14
    346c:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    3470:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    3474:	81 11       	cpse	r24, r1
    3476:	9c cf       	rjmp	.-200    	; 0x33b0 <xQueueGenericSend+0x34>
    3478:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    347c:	99 cf       	rjmp	.-206    	; 0x33b0 <xQueueGenericSend+0x34>
    347e:	c7 01       	movw	r24, r14
    3480:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    3484:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    3488:	93 cf       	rjmp	.-218    	; 0x33b0 <xQueueGenericSend+0x34>
    348a:	c7 01       	movw	r24, r14
    348c:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    3490:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	29 96       	adiw	r28, 0x09	; 9
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	ff 90       	pop	r15
    34a6:	ef 90       	pop	r14
    34a8:	df 90       	pop	r13
    34aa:	cf 90       	pop	r12
    34ac:	bf 90       	pop	r11
    34ae:	af 90       	pop	r10
    34b0:	08 95       	ret

000034b2 <xQueueGenericReceive>:
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	29 97       	sbiw	r28, 0x09	; 9
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	7c 01       	movw	r14, r24
    34d2:	5b 01       	movw	r10, r22
    34d4:	2e 83       	std	Y+6, r18	; 0x06
    34d6:	3f 83       	std	Y+7, r19	; 0x07
    34d8:	48 87       	std	Y+8, r20	; 0x08
    34da:	59 87       	std	Y+9, r21	; 0x09
    34dc:	10 e0       	ldi	r17, 0x00	; 0
    34de:	6c 01       	movw	r12, r24
    34e0:	83 e1       	ldi	r24, 0x13	; 19
    34e2:	c8 0e       	add	r12, r24
    34e4:	d1 1c       	adc	r13, r1
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	0f 92       	push	r0
    34ec:	f7 01       	movw	r30, r14
    34ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    34f0:	88 23       	and	r24, r24
    34f2:	99 f1       	breq	.+102    	; 0x355a <xQueueGenericReceive+0xa8>
    34f4:	c6 80       	ldd	r12, Z+6	; 0x06
    34f6:	d7 80       	ldd	r13, Z+7	; 0x07
    34f8:	b5 01       	movw	r22, r10
    34fa:	c7 01       	movw	r24, r14
    34fc:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <prvCopyDataFromQueue>
    3500:	01 11       	cpse	r16, r1
    3502:	1a c0       	rjmp	.+52     	; 0x3538 <xQueueGenericReceive+0x86>
    3504:	f7 01       	movw	r30, r14
    3506:	86 8d       	ldd	r24, Z+30	; 0x1e
    3508:	81 50       	subi	r24, 0x01	; 1
    350a:	86 8f       	std	Z+30, r24	; 0x1e
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	89 2b       	or	r24, r25
    3512:	29 f4       	brne	.+10     	; 0x351e <xQueueGenericReceive+0x6c>
    3514:	0e 94 5e 20 	call	0x40bc	; 0x40bc <xTaskGetCurrentTaskHandle>
    3518:	f7 01       	movw	r30, r14
    351a:	82 83       	std	Z+2, r24	; 0x02
    351c:	93 83       	std	Z+3, r25	; 0x03
    351e:	f7 01       	movw	r30, r14
    3520:	80 85       	ldd	r24, Z+8	; 0x08
    3522:	88 23       	and	r24, r24
    3524:	b1 f0       	breq	.+44     	; 0x3552 <xQueueGenericReceive+0xa0>
    3526:	c7 01       	movw	r24, r14
    3528:	08 96       	adiw	r24, 0x08	; 8
    352a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <xTaskRemoveFromEventList>
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	81 f4       	brne	.+32     	; 0x3552 <xQueueGenericReceive+0xa0>
    3532:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <xQueueGenericReceive+0xa0>
    3538:	f7 01       	movw	r30, r14
    353a:	c6 82       	std	Z+6, r12	; 0x06
    353c:	d7 82       	std	Z+7, r13	; 0x07
    353e:	83 89       	ldd	r24, Z+19	; 0x13
    3540:	88 23       	and	r24, r24
    3542:	39 f0       	breq	.+14     	; 0x3552 <xQueueGenericReceive+0xa0>
    3544:	c7 01       	movw	r24, r14
    3546:	43 96       	adiw	r24, 0x13	; 19
    3548:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <xTaskRemoveFromEventList>
    354c:	81 11       	cpse	r24, r1
    354e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    3552:	0f 90       	pop	r0
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	62 c0       	rjmp	.+196    	; 0x361e <xQueueGenericReceive+0x16c>
    355a:	8e 81       	ldd	r24, Y+6	; 0x06
    355c:	9f 81       	ldd	r25, Y+7	; 0x07
    355e:	a8 85       	ldd	r26, Y+8	; 0x08
    3560:	b9 85       	ldd	r27, Y+9	; 0x09
    3562:	89 2b       	or	r24, r25
    3564:	8a 2b       	or	r24, r26
    3566:	8b 2b       	or	r24, r27
    3568:	21 f4       	brne	.+8      	; 0x3572 <xQueueGenericReceive+0xc0>
    356a:	0f 90       	pop	r0
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	56 c0       	rjmp	.+172    	; 0x361e <xQueueGenericReceive+0x16c>
    3572:	11 11       	cpse	r17, r1
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <xQueueGenericReceive+0xce>
    3576:	ce 01       	movw	r24, r28
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <vTaskSetTimeOutState>
    357e:	11 e0       	ldi	r17, 0x01	; 1
    3580:	0f 90       	pop	r0
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	0f 92       	push	r0
    358e:	f7 01       	movw	r30, r14
    3590:	81 a1       	ldd	r24, Z+33	; 0x21
    3592:	8f 3f       	cpi	r24, 0xFF	; 255
    3594:	09 f4       	brne	.+2      	; 0x3598 <xQueueGenericReceive+0xe6>
    3596:	11 a2       	std	Z+33, r1	; 0x21
    3598:	f7 01       	movw	r30, r14
    359a:	82 a1       	ldd	r24, Z+34	; 0x22
    359c:	8f 3f       	cpi	r24, 0xFF	; 255
    359e:	09 f4       	brne	.+2      	; 0x35a2 <xQueueGenericReceive+0xf0>
    35a0:	12 a2       	std	Z+34, r1	; 0x22
    35a2:	0f 90       	pop	r0
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	be 01       	movw	r22, r28
    35a8:	6a 5f       	subi	r22, 0xFA	; 250
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	ce 01       	movw	r24, r28
    35ae:	01 96       	adiw	r24, 0x01	; 1
    35b0:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <xTaskCheckForTimeOut>
    35b4:	81 11       	cpse	r24, r1
    35b6:	2d c0       	rjmp	.+90     	; 0x3612 <xQueueGenericReceive+0x160>
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	0f 92       	push	r0
    35be:	f7 01       	movw	r30, r14
    35c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    35c2:	0f 90       	pop	r0
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	81 11       	cpse	r24, r1
    35c8:	1e c0       	rjmp	.+60     	; 0x3606 <xQueueGenericReceive+0x154>
    35ca:	80 81       	ld	r24, Z
    35cc:	91 81       	ldd	r25, Z+1	; 0x01
    35ce:	89 2b       	or	r24, r25
    35d0:	49 f4       	brne	.+18     	; 0x35e4 <xQueueGenericReceive+0x132>
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	0f 92       	push	r0
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	0e 94 63 20 	call	0x40c6	; 0x40c6 <vTaskPriorityInherit>
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	4e 81       	ldd	r20, Y+6	; 0x06
    35e6:	5f 81       	ldd	r21, Y+7	; 0x07
    35e8:	68 85       	ldd	r22, Y+8	; 0x08
    35ea:	79 85       	ldd	r23, Y+9	; 0x09
    35ec:	c6 01       	movw	r24, r12
    35ee:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <vTaskPlaceOnEventList>
    35f2:	c7 01       	movw	r24, r14
    35f4:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    35f8:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    35fc:	81 11       	cpse	r24, r1
    35fe:	73 cf       	rjmp	.-282    	; 0x34e6 <xQueueGenericReceive+0x34>
    3600:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    3604:	70 cf       	rjmp	.-288    	; 0x34e6 <xQueueGenericReceive+0x34>
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    360c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    3610:	6a cf       	rjmp	.-300    	; 0x34e6 <xQueueGenericReceive+0x34>
    3612:	c7 01       	movw	r24, r14
    3614:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvUnlockQueue>
    3618:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	29 96       	adiw	r28, 0x09	; 9
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	08 95       	ret

0000363a <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3640:	fc 01       	movw	r30, r24
    3642:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    3644:	0f 90       	pop	r0
    3646:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    3648:	08 95       	ret

0000364a <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    364a:	c2 e6       	ldi	r28, 0x62	; 98
    364c:	d1 e3       	ldi	r29, 0x31	; 49
    364e:	88 81       	ld	r24, Y
    3650:	82 30       	cpi	r24, 0x02	; 2
    3652:	e8 f3       	brcs	.-6      	; 0x364e <prvIdleTask+0x4>
    3654:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    3658:	fa cf       	rjmp	.-12     	; 0x364e <prvIdleTask+0x4>

0000365a <prvAddCurrentTaskToDelayedList>:
    365a:	cf 92       	push	r12
    365c:	df 92       	push	r13
    365e:	ef 92       	push	r14
    3660:	ff 92       	push	r15
    3662:	6b 01       	movw	r12, r22
    3664:	7c 01       	movw	r14, r24
    3666:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    366a:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    366e:	62 83       	std	Z+2, r22	; 0x02
    3670:	73 83       	std	Z+3, r23	; 0x03
    3672:	84 83       	std	Z+4, r24	; 0x04
    3674:	95 83       	std	Z+5, r25	; 0x05
    3676:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    367a:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    367e:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3682:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3686:	c8 16       	cp	r12, r24
    3688:	d9 06       	cpc	r13, r25
    368a:	ea 06       	cpc	r14, r26
    368c:	fb 06       	cpc	r15, r27
    368e:	68 f4       	brcc	.+26     	; 0x36aa <prvAddCurrentTaskToDelayedList+0x50>
    3690:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3694:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3698:	80 91 48 31 	lds	r24, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    369c:	90 91 49 31 	lds	r25, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    36a0:	6e 5f       	subi	r22, 0xFE	; 254
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <vListInsert>
    36a8:	21 c0       	rjmp	.+66     	; 0x36ec <prvAddCurrentTaskToDelayedList+0x92>
    36aa:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    36ae:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    36b2:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    36b6:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    36ba:	6e 5f       	subi	r22, 0xFE	; 254
    36bc:	7f 4f       	sbci	r23, 0xFF	; 255
    36be:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <vListInsert>
    36c2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    36c6:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    36ca:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    36ce:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    36d2:	c8 16       	cp	r12, r24
    36d4:	d9 06       	cpc	r13, r25
    36d6:	ea 06       	cpc	r14, r26
    36d8:	fb 06       	cpc	r15, r27
    36da:	40 f4       	brcc	.+16     	; 0x36ec <prvAddCurrentTaskToDelayedList+0x92>
    36dc:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    36e0:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    36e4:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    36e8:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    36ec:	ff 90       	pop	r15
    36ee:	ef 90       	pop	r14
    36f0:	df 90       	pop	r13
    36f2:	cf 90       	pop	r12
    36f4:	08 95       	ret

000036f6 <xTaskGenericCreate>:
    36f6:	4f 92       	push	r4
    36f8:	5f 92       	push	r5
    36fa:	6f 92       	push	r6
    36fc:	7f 92       	push	r7
    36fe:	8f 92       	push	r8
    3700:	9f 92       	push	r9
    3702:	af 92       	push	r10
    3704:	bf 92       	push	r11
    3706:	cf 92       	push	r12
    3708:	df 92       	push	r13
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
    3716:	5c 01       	movw	r10, r24
    3718:	4b 01       	movw	r8, r22
    371a:	3a 01       	movw	r6, r20
    371c:	29 01       	movw	r4, r18
    371e:	88 e2       	ldi	r24, 0x28	; 40
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    3726:	ec 01       	movw	r28, r24
    3728:	89 2b       	or	r24, r25
    372a:	09 f4       	brne	.+2      	; 0x372e <xTaskGenericCreate+0x38>
    372c:	d4 c0       	rjmp	.+424    	; 0x38d6 <xTaskGenericCreate+0x1e0>
    372e:	c1 14       	cp	r12, r1
    3730:	d1 04       	cpc	r13, r1
    3732:	09 f0       	breq	.+2      	; 0x3736 <xTaskGenericCreate+0x40>
    3734:	cc c0       	rjmp	.+408    	; 0x38ce <xTaskGenericCreate+0x1d8>
    3736:	c3 01       	movw	r24, r6
    3738:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <pvPortMalloc>
    373c:	8b 8f       	std	Y+27, r24	; 0x1b
    373e:	9c 8f       	std	Y+28, r25	; 0x1c
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	21 f4       	brne	.+8      	; 0x374c <xTaskGenericCreate+0x56>
    3744:	ce 01       	movw	r24, r28
    3746:	0e 94 44 16 	call	0x2c88	; 0x2c88 <vPortFree>
    374a:	c5 c0       	rjmp	.+394    	; 0x38d6 <xTaskGenericCreate+0x1e0>
    374c:	a3 01       	movw	r20, r6
    374e:	61 e1       	ldi	r22, 0x11	; 17
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	0e 94 36 21 	call	0x426c	; 0x426c <memset>
    3756:	93 01       	movw	r18, r6
    3758:	21 50       	subi	r18, 0x01	; 1
    375a:	31 09       	sbc	r19, r1
    375c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3760:	3c 01       	movw	r6, r24
    3762:	62 0e       	add	r6, r18
    3764:	73 1e       	adc	r7, r19
    3766:	4a e0       	ldi	r20, 0x0A	; 10
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	b4 01       	movw	r22, r8
    376c:	ce 01       	movw	r24, r28
    376e:	4d 96       	adiw	r24, 0x1d	; 29
    3770:	0e 94 3d 21 	call	0x427a	; 0x427a <strncpy>
    3774:	1e a2       	std	Y+38, r1	; 0x26
    3776:	10 2f       	mov	r17, r16
    3778:	04 30       	cpi	r16, 0x04	; 4
    377a:	08 f0       	brcs	.+2      	; 0x377e <xTaskGenericCreate+0x88>
    377c:	13 e0       	ldi	r17, 0x03	; 3
    377e:	1a 8f       	std	Y+26, r17	; 0x1a
    3780:	1f a3       	std	Y+39, r17	; 0x27
    3782:	6e 01       	movw	r12, r28
    3784:	22 e0       	ldi	r18, 0x02	; 2
    3786:	c2 0e       	add	r12, r18
    3788:	d1 1c       	adc	r13, r1
    378a:	c6 01       	movw	r24, r12
    378c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <vListInitialiseItem>
    3790:	ce 01       	movw	r24, r28
    3792:	0e 96       	adiw	r24, 0x0e	; 14
    3794:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <vListInitialiseItem>
    3798:	ca 87       	std	Y+10, r28	; 0x0a
    379a:	db 87       	std	Y+11, r29	; 0x0b
    379c:	84 e0       	ldi	r24, 0x04	; 4
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	a0 e0       	ldi	r26, 0x00	; 0
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	81 1b       	sub	r24, r17
    37a6:	91 09       	sbc	r25, r1
    37a8:	a1 09       	sbc	r26, r1
    37aa:	b1 09       	sbc	r27, r1
    37ac:	8e 87       	std	Y+14, r24	; 0x0e
    37ae:	9f 87       	std	Y+15, r25	; 0x0f
    37b0:	a8 8b       	std	Y+16, r26	; 0x10
    37b2:	b9 8b       	std	Y+17, r27	; 0x11
    37b4:	ce 8b       	std	Y+22, r28	; 0x16
    37b6:	df 8b       	std	Y+23, r29	; 0x17
    37b8:	a2 01       	movw	r20, r4
    37ba:	b5 01       	movw	r22, r10
    37bc:	c3 01       	movw	r24, r6
    37be:	0e 94 29 17 	call	0x2e52	; 0x2e52 <pxPortInitialiseStack>
    37c2:	88 83       	st	Y, r24
    37c4:	99 83       	std	Y+1, r25	; 0x01
    37c6:	e1 14       	cp	r14, r1
    37c8:	f1 04       	cpc	r15, r1
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <xTaskGenericCreate+0xdc>
    37cc:	f7 01       	movw	r30, r14
    37ce:	c0 83       	st	Z, r28
    37d0:	d1 83       	std	Z+1, r29	; 0x01
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	0f 92       	push	r0
    37d8:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    37dc:	8f 5f       	subi	r24, 0xFF	; 255
    37de:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxCurrentNumberOfTasks>
    37e2:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    37e6:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    37ea:	89 2b       	or	r24, r25
    37ec:	89 f5       	brne	.+98     	; 0x3850 <xTaskGenericCreate+0x15a>
    37ee:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    37f2:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    37f6:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	c1 f5       	brne	.+112    	; 0x386e <xTaskGenericCreate+0x178>
    37fe:	82 e6       	ldi	r24, 0x62	; 98
    3800:	91 e3       	ldi	r25, 0x31	; 49
    3802:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    3806:	8d e6       	ldi	r24, 0x6D	; 109
    3808:	91 e3       	ldi	r25, 0x31	; 49
    380a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    380e:	88 e7       	ldi	r24, 0x78	; 120
    3810:	91 e3       	ldi	r25, 0x31	; 49
    3812:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    3816:	83 e8       	ldi	r24, 0x83	; 131
    3818:	91 e3       	ldi	r25, 0x31	; 49
    381a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    381e:	87 e5       	ldi	r24, 0x57	; 87
    3820:	91 e3       	ldi	r25, 0x31	; 49
    3822:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    3826:	8c e4       	ldi	r24, 0x4C	; 76
    3828:	91 e3       	ldi	r25, 0x31	; 49
    382a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    382e:	8d e3       	ldi	r24, 0x3D	; 61
    3830:	91 e3       	ldi	r25, 0x31	; 49
    3832:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <vListInitialise>
    3836:	87 e5       	ldi	r24, 0x57	; 87
    3838:	91 e3       	ldi	r25, 0x31	; 49
    383a:	80 93 4a 31 	sts	0x314A, r24	; 0x80314a <pxDelayedTaskList>
    383e:	90 93 4b 31 	sts	0x314B, r25	; 0x80314b <pxDelayedTaskList+0x1>
    3842:	8c e4       	ldi	r24, 0x4C	; 76
    3844:	91 e3       	ldi	r25, 0x31	; 49
    3846:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    384a:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    384e:	0f c0       	rjmp	.+30     	; 0x386e <xTaskGenericCreate+0x178>
    3850:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    3854:	81 11       	cpse	r24, r1
    3856:	0b c0       	rjmp	.+22     	; 0x386e <xTaskGenericCreate+0x178>
    3858:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    385c:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3860:	82 8d       	ldd	r24, Z+26	; 0x1a
    3862:	08 17       	cp	r16, r24
    3864:	20 f0       	brcs	.+8      	; 0x386e <xTaskGenericCreate+0x178>
    3866:	c0 93 8e 31 	sts	0x318E, r28	; 0x80318e <pxCurrentTCB>
    386a:	d0 93 8f 31 	sts	0x318F, r29	; 0x80318f <pxCurrentTCB+0x1>
    386e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3870:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <uxTopUsedPriority>
    3874:	98 17       	cp	r25, r24
    3876:	10 f4       	brcc	.+4      	; 0x387c <xTaskGenericCreate+0x186>
    3878:	80 93 35 31 	sts	0x3135, r24	; 0x803135 <uxTopUsedPriority>
    387c:	90 91 2e 31 	lds	r25, 0x312E	; 0x80312e <uxTaskNumber>
    3880:	9f 5f       	subi	r25, 0xFF	; 255
    3882:	90 93 2e 31 	sts	0x312E, r25	; 0x80312e <uxTaskNumber>
    3886:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    388a:	98 17       	cp	r25, r24
    388c:	10 f4       	brcc	.+4      	; 0x3892 <xTaskGenericCreate+0x19c>
    388e:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3892:	fb e0       	ldi	r31, 0x0B	; 11
    3894:	8f 9f       	mul	r24, r31
    3896:	c0 01       	movw	r24, r0
    3898:	11 24       	eor	r1, r1
    389a:	b6 01       	movw	r22, r12
    389c:	8e 59       	subi	r24, 0x9E	; 158
    389e:	9e 4c       	sbci	r25, 0xCE	; 206
    38a0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
    38a4:	0f 90       	pop	r0
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <xSchedulerRunning>
    38ac:	88 23       	and	r24, r24
    38ae:	59 f0       	breq	.+22     	; 0x38c6 <xTaskGenericCreate+0x1d0>
    38b0:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    38b4:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    38b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ba:	80 17       	cp	r24, r16
    38bc:	30 f4       	brcc	.+12     	; 0x38ca <xTaskGenericCreate+0x1d4>
    38be:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	09 c0       	rjmp	.+18     	; 0x38d8 <xTaskGenericCreate+0x1e2>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	07 c0       	rjmp	.+14     	; 0x38d8 <xTaskGenericCreate+0x1e2>
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	05 c0       	rjmp	.+10     	; 0x38d8 <xTaskGenericCreate+0x1e2>
    38ce:	cb 8e       	std	Y+27, r12	; 0x1b
    38d0:	dc 8e       	std	Y+28, r13	; 0x1c
    38d2:	c6 01       	movw	r24, r12
    38d4:	3b cf       	rjmp	.-394    	; 0x374c <xTaskGenericCreate+0x56>
    38d6:	8f ef       	ldi	r24, 0xFF	; 255
    38d8:	df 91       	pop	r29
    38da:	cf 91       	pop	r28
    38dc:	1f 91       	pop	r17
    38de:	0f 91       	pop	r16
    38e0:	ff 90       	pop	r15
    38e2:	ef 90       	pop	r14
    38e4:	df 90       	pop	r13
    38e6:	cf 90       	pop	r12
    38e8:	bf 90       	pop	r11
    38ea:	af 90       	pop	r10
    38ec:	9f 90       	pop	r9
    38ee:	8f 90       	pop	r8
    38f0:	7f 90       	pop	r7
    38f2:	6f 90       	pop	r6
    38f4:	5f 90       	pop	r5
    38f6:	4f 90       	pop	r4
    38f8:	08 95       	ret

000038fa <uxTaskPriorityGet>:
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	0f 92       	push	r0
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	21 f4       	brne	.+8      	; 0x390c <uxTaskPriorityGet+0x12>
    3904:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3908:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    390c:	0f 90       	pop	r0
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	fc 01       	movw	r30, r24
    3912:	82 8d       	ldd	r24, Z+26	; 0x1a
    3914:	08 95       	ret

00003916 <vTaskStartScheduler>:
    3916:	af 92       	push	r10
    3918:	bf 92       	push	r11
    391a:	cf 92       	push	r12
    391c:	df 92       	push	r13
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	a1 2c       	mov	r10, r1
    3926:	b1 2c       	mov	r11, r1
    3928:	c1 2c       	mov	r12, r1
    392a:	d1 2c       	mov	r13, r1
    392c:	0f 2e       	mov	r0, r31
    392e:	fb e3       	ldi	r31, 0x3B	; 59
    3930:	ef 2e       	mov	r14, r31
    3932:	f1 e3       	ldi	r31, 0x31	; 49
    3934:	ff 2e       	mov	r15, r31
    3936:	f0 2d       	mov	r31, r0
    3938:	00 e0       	ldi	r16, 0x00	; 0
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	44 e6       	ldi	r20, 0x64	; 100
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	68 ed       	ldi	r22, 0xD8	; 216
    3944:	70 e2       	ldi	r23, 0x20	; 32
    3946:	85 e2       	ldi	r24, 0x25	; 37
    3948:	9b e1       	ldi	r25, 0x1B	; 27
    394a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <xTaskGenericCreate>
    394e:	81 30       	cpi	r24, 0x01	; 1
    3950:	69 f4       	brne	.+26     	; 0x396c <vTaskStartScheduler+0x56>
    3952:	f8 94       	cli
    3954:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <xSchedulerRunning>
    3958:	10 92 36 31 	sts	0x3136, r1	; 0x803136 <xTickCount>
    395c:	10 92 37 31 	sts	0x3137, r1	; 0x803137 <xTickCount+0x1>
    3960:	10 92 38 31 	sts	0x3138, r1	; 0x803138 <xTickCount+0x2>
    3964:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <xTickCount+0x3>
    3968:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <xPortStartScheduler>
    396c:	0f 91       	pop	r16
    396e:	ff 90       	pop	r15
    3970:	ef 90       	pop	r14
    3972:	df 90       	pop	r13
    3974:	cf 90       	pop	r12
    3976:	bf 90       	pop	r11
    3978:	af 90       	pop	r10
    397a:	08 95       	ret

0000397c <vTaskSuspendAll>:
    397c:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3980:	8f 5f       	subi	r24, 0xFF	; 255
    3982:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>
    3986:	08 95       	ret

00003988 <xTaskGetTickCount>:
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	0f 92       	push	r0
    398e:	60 91 36 31 	lds	r22, 0x3136	; 0x803136 <xTickCount>
    3992:	70 91 37 31 	lds	r23, 0x3137	; 0x803137 <xTickCount+0x1>
    3996:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <xTickCount+0x2>
    399a:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <xTickCount+0x3>
    399e:	0f 90       	pop	r0
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	08 95       	ret

000039a4 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	21 f4       	brne	.+8      	; 0x39b0 <pcTaskGetTaskName+0xc>
    39a8:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    39ac:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    39b0:	4d 96       	adiw	r24, 0x1d	; 29
    39b2:	08 95       	ret

000039b4 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    39b4:	80 91 3b 31 	lds	r24, 0x313B	; 0x80313b <xIdleTaskHandle>
    39b8:	90 91 3c 31 	lds	r25, 0x313C	; 0x80313c <xIdleTaskHandle+0x1>
    39bc:	08 95       	ret

000039be <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39c8:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    39cc:	81 11       	cpse	r24, r1
    39ce:	ed c0       	rjmp	.+474    	; 0x3baa <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    39d0:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    39d4:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    39d8:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    39dc:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    39e0:	01 96       	adiw	r24, 0x01	; 1
    39e2:	a1 1d       	adc	r26, r1
    39e4:	b1 1d       	adc	r27, r1
    39e6:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <xTickCount>
    39ea:	90 93 37 31 	sts	0x3137, r25	; 0x803137 <xTickCount+0x1>
    39ee:	a0 93 38 31 	sts	0x3138, r26	; 0x803138 <xTickCount+0x2>
    39f2:	b0 93 39 31 	sts	0x3139, r27	; 0x803139 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    39f6:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    39fa:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    39fe:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3a02:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3a06:	89 2b       	or	r24, r25
    3a08:	8a 2b       	or	r24, r26
    3a0a:	8b 2b       	or	r24, r27
    3a0c:	f1 f5       	brne	.+124    	; 0x3a8a <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3a0e:	80 91 4a 31 	lds	r24, 0x314A	; 0x80314a <pxDelayedTaskList>
    3a12:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a16:	20 91 48 31 	lds	r18, 0x3148	; 0x803148 <pxOverflowDelayedTaskList>
    3a1a:	30 91 49 31 	lds	r19, 0x3149	; 0x803149 <pxOverflowDelayedTaskList+0x1>
    3a1e:	20 93 4a 31 	sts	0x314A, r18	; 0x80314a <pxDelayedTaskList>
    3a22:	30 93 4b 31 	sts	0x314B, r19	; 0x80314b <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    3a26:	80 93 48 31 	sts	0x3148, r24	; 0x803148 <pxOverflowDelayedTaskList>
    3a2a:	90 93 49 31 	sts	0x3149, r25	; 0x803149 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    3a2e:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    3a32:	8f 5f       	subi	r24, 0xFF	; 255
    3a34:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3a38:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3a3c:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3a40:	80 81       	ld	r24, Z
    3a42:	81 11       	cpse	r24, r1
    3a44:	0c c0       	rjmp	.+24     	; 0x3a5e <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	9f ef       	ldi	r25, 0xFF	; 255
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3a50:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3a54:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3a58:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3a5c:	16 c0       	rjmp	.+44     	; 0x3a8a <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3a5e:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3a62:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3a66:	07 80       	ldd	r0, Z+7	; 0x07
    3a68:	f0 85       	ldd	r31, Z+8	; 0x08
    3a6a:	e0 2d       	mov	r30, r0
    3a6c:	00 84       	ldd	r0, Z+8	; 0x08
    3a6e:	f1 85       	ldd	r31, Z+9	; 0x09
    3a70:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	a4 81       	ldd	r26, Z+4	; 0x04
    3a78:	b5 81       	ldd	r27, Z+5	; 0x05
    3a7a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3a7e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3a82:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3a86:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3a8a:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3a8e:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3a92:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3a96:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3a9a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3a9e:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3aa2:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3aa6:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3aaa:	48 17       	cp	r20, r24
    3aac:	59 07       	cpc	r21, r25
    3aae:	6a 07       	cpc	r22, r26
    3ab0:	7b 07       	cpc	r23, r27
    3ab2:	08 f4       	brcc	.+2      	; 0x3ab6 <vTaskIncrementTick+0xf8>
    3ab4:	7f c0       	rjmp	.+254    	; 0x3bb4 <vTaskIncrementTick+0x1f6>
    3ab6:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3aba:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 23       	and	r24, r24
    3ac2:	f9 f0       	breq	.+62     	; 0x3b02 <vTaskIncrementTick+0x144>
    3ac4:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3ac8:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3acc:	07 80       	ldd	r0, Z+7	; 0x07
    3ace:	f0 85       	ldd	r31, Z+8	; 0x08
    3ad0:	e0 2d       	mov	r30, r0
    3ad2:	c0 85       	ldd	r28, Z+8	; 0x08
    3ad4:	d1 85       	ldd	r29, Z+9	; 0x09
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ada:	ac 81       	ldd	r26, Y+4	; 0x04
    3adc:	bd 81       	ldd	r27, Y+5	; 0x05
    3ade:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3ae2:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3ae6:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3aea:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3aee:	48 17       	cp	r20, r24
    3af0:	59 07       	cpc	r21, r25
    3af2:	6a 07       	cpc	r22, r26
    3af4:	7b 07       	cpc	r23, r27
    3af6:	58 f1       	brcs	.+86     	; 0x3b4e <vTaskIncrementTick+0x190>
    3af8:	0f 2e       	mov	r0, r31
    3afa:	fb e0       	ldi	r31, 0x0B	; 11
    3afc:	ff 2e       	mov	r15, r31
    3afe:	f0 2d       	mov	r31, r0
    3b00:	2f c0       	rjmp	.+94     	; 0x3b60 <vTaskIncrementTick+0x1a2>
    3b02:	8f ef       	ldi	r24, 0xFF	; 255
    3b04:	9f ef       	ldi	r25, 0xFF	; 255
    3b06:	dc 01       	movw	r26, r24
    3b08:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3b0c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3b10:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3b14:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3b18:	4d c0       	rjmp	.+154    	; 0x3bb4 <vTaskIncrementTick+0x1f6>
    3b1a:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3b1e:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3b22:	07 80       	ldd	r0, Z+7	; 0x07
    3b24:	f0 85       	ldd	r31, Z+8	; 0x08
    3b26:	e0 2d       	mov	r30, r0
    3b28:	c0 85       	ldd	r28, Z+8	; 0x08
    3b2a:	d1 85       	ldd	r29, Z+9	; 0x09
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b30:	ac 81       	ldd	r26, Y+4	; 0x04
    3b32:	bd 81       	ldd	r27, Y+5	; 0x05
    3b34:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3b38:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3b3c:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3b40:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3b44:	48 17       	cp	r20, r24
    3b46:	59 07       	cpc	r21, r25
    3b48:	6a 07       	cpc	r22, r26
    3b4a:	7b 07       	cpc	r23, r27
    3b4c:	48 f4       	brcc	.+18     	; 0x3b60 <vTaskIncrementTick+0x1a2>
    3b4e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3b52:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3b56:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3b5a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3b5e:	2a c0       	rjmp	.+84     	; 0x3bb4 <vTaskIncrementTick+0x1f6>
    3b60:	8e 01       	movw	r16, r28
    3b62:	0e 5f       	subi	r16, 0xFE	; 254
    3b64:	1f 4f       	sbci	r17, 0xFF	; 255
    3b66:	c8 01       	movw	r24, r16
    3b68:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
    3b6c:	88 8d       	ldd	r24, Y+24	; 0x18
    3b6e:	99 8d       	ldd	r25, Y+25	; 0x19
    3b70:	89 2b       	or	r24, r25
    3b72:	21 f0       	breq	.+8      	; 0x3b7c <vTaskIncrementTick+0x1be>
    3b74:	ce 01       	movw	r24, r28
    3b76:	0e 96       	adiw	r24, 0x0e	; 14
    3b78:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
    3b7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b7e:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3b82:	98 17       	cp	r25, r24
    3b84:	10 f4       	brcc	.+4      	; 0x3b8a <vTaskIncrementTick+0x1cc>
    3b86:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3b8a:	f8 9e       	mul	r15, r24
    3b8c:	c0 01       	movw	r24, r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	b8 01       	movw	r22, r16
    3b92:	8e 59       	subi	r24, 0x9E	; 158
    3b94:	9e 4c       	sbci	r25, 0xCE	; 206
    3b96:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
    3b9a:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <pxDelayedTaskList>
    3b9e:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <pxDelayedTaskList+0x1>
    3ba2:	80 81       	ld	r24, Z
    3ba4:	81 11       	cpse	r24, r1
    3ba6:	b9 cf       	rjmp	.-142    	; 0x3b1a <vTaskIncrementTick+0x15c>
    3ba8:	ac cf       	rjmp	.-168    	; 0x3b02 <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    3baa:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3bae:	8f 5f       	subi	r24, 0xFF	; 255
    3bb0:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	ff 90       	pop	r15
    3bbe:	08 95       	ret

00003bc0 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3bc0:	cf 92       	push	r12
    3bc2:	df 92       	push	r13
    3bc4:	ef 92       	push	r14
    3bc6:	ff 92       	push	r15
    3bc8:	0f 93       	push	r16
    3bca:	1f 93       	push	r17
    3bcc:	cf 93       	push	r28
    3bce:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3bd6:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3bda:	81 50       	subi	r24, 0x01	; 1
    3bdc:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3be0:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3be4:	81 11       	cpse	r24, r1
    3be6:	60 c0       	rjmp	.+192    	; 0x3ca8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3be8:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxCurrentNumberOfTasks>
    3bec:	81 11       	cpse	r24, r1
    3bee:	2c c0       	rjmp	.+88     	; 0x3c48 <xTaskResumeAll+0x88>
    3bf0:	5e c0       	rjmp	.+188    	; 0x3cae <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3bf2:	d7 01       	movw	r26, r14
    3bf4:	17 96       	adiw	r26, 0x07	; 7
    3bf6:	ed 91       	ld	r30, X+
    3bf8:	fc 91       	ld	r31, X
    3bfa:	18 97       	sbiw	r26, 0x08	; 8
    3bfc:	c0 85       	ldd	r28, Z+8	; 0x08
    3bfe:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    3c00:	ce 01       	movw	r24, r28
    3c02:	0e 96       	adiw	r24, 0x0e	; 14
    3c04:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3c08:	8e 01       	movw	r16, r28
    3c0a:	0e 5f       	subi	r16, 0xFE	; 254
    3c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0e:	c8 01       	movw	r24, r16
    3c10:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c16:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3c1a:	98 17       	cp	r25, r24
    3c1c:	10 f4       	brcc	.+4      	; 0x3c22 <xTaskResumeAll+0x62>
    3c1e:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3c22:	d8 9e       	mul	r13, r24
    3c24:	c0 01       	movw	r24, r0
    3c26:	11 24       	eor	r1, r1
    3c28:	b8 01       	movw	r22, r16
    3c2a:	8e 59       	subi	r24, 0x9E	; 158
    3c2c:	9e 4c       	sbci	r25, 0xCE	; 206
    3c2e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c32:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3c36:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c3e:	98 17       	cp	r25, r24
    3c40:	70 f0       	brcs	.+28     	; 0x3c5e <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    3c42:	cc 24       	eor	r12, r12
    3c44:	c3 94       	inc	r12
    3c46:	0b c0       	rjmp	.+22     	; 0x3c5e <xTaskResumeAll+0x9e>
    3c48:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3c4a:	0f 2e       	mov	r0, r31
    3c4c:	fd e3       	ldi	r31, 0x3D	; 61
    3c4e:	ef 2e       	mov	r14, r31
    3c50:	f1 e3       	ldi	r31, 0x31	; 49
    3c52:	ff 2e       	mov	r15, r31
    3c54:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3c56:	0f 2e       	mov	r0, r31
    3c58:	fb e0       	ldi	r31, 0x0B	; 11
    3c5a:	df 2e       	mov	r13, r31
    3c5c:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3c5e:	f7 01       	movw	r30, r14
    3c60:	80 81       	ld	r24, Z
    3c62:	81 11       	cpse	r24, r1
    3c64:	c6 cf       	rjmp	.-116    	; 0x3bf2 <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3c66:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3c6a:	88 23       	and	r24, r24
    3c6c:	81 f0       	breq	.+32     	; 0x3c8e <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3c6e:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3c72:	88 23       	and	r24, r24
    3c74:	99 f0       	breq	.+38     	; 0x3c9c <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    3c76:	0e 94 df 1c 	call	0x39be	; 0x39be <vTaskIncrementTick>
						--uxMissedTicks;
    3c7a:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3c7e:	81 50       	subi	r24, 0x01	; 1
    3c80:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3c84:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <uxMissedTicks>
    3c88:	81 11       	cpse	r24, r1
    3c8a:	f5 cf       	rjmp	.-22     	; 0x3c76 <xTaskResumeAll+0xb6>
    3c8c:	07 c0       	rjmp	.+14     	; 0x3c9c <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3c8e:	f1 e0       	ldi	r31, 0x01	; 1
    3c90:	cf 16       	cp	r12, r31
    3c92:	21 f0       	breq	.+8      	; 0x3c9c <xTaskResumeAll+0xdc>
    3c94:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <xMissedYield>
    3c98:	81 30       	cpi	r24, 0x01	; 1
    3c9a:	41 f4       	brne	.+16     	; 0x3cac <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    3c9c:	10 92 30 31 	sts	0x3130, r1	; 0x803130 <xMissedYield>
					portYIELD_WITHIN_API();
    3ca0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	03 c0       	rjmp	.+6      	; 0x3cae <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <xTaskResumeAll+0xee>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3cae:	0f 90       	pop	r0
    3cb0:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	1f 91       	pop	r17
    3cb8:	0f 91       	pop	r16
    3cba:	ff 90       	pop	r15
    3cbc:	ef 90       	pop	r14
    3cbe:	df 90       	pop	r13
    3cc0:	cf 90       	pop	r12
    3cc2:	08 95       	ret

00003cc4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3cc4:	cf 92       	push	r12
    3cc6:	df 92       	push	r13
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	ec 01       	movw	r28, r24
    3cd2:	6a 01       	movw	r12, r20
    3cd4:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3cd6:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3cda:	88 81       	ld	r24, Y
    3cdc:	99 81       	ldd	r25, Y+1	; 0x01
    3cde:	aa 81       	ldd	r26, Y+2	; 0x02
    3ce0:	bb 81       	ldd	r27, Y+3	; 0x03
    3ce2:	c8 0e       	add	r12, r24
    3ce4:	d9 1e       	adc	r13, r25
    3ce6:	ea 1e       	adc	r14, r26
    3ce8:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    3cea:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3cee:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3cf2:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3cf6:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3cfa:	48 17       	cp	r20, r24
    3cfc:	59 07       	cpc	r21, r25
    3cfe:	6a 07       	cpc	r22, r26
    3d00:	7b 07       	cpc	r23, r27
    3d02:	b8 f4       	brcc	.+46     	; 0x3d32 <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3d04:	c8 16       	cp	r12, r24
    3d06:	d9 06       	cpc	r13, r25
    3d08:	ea 06       	cpc	r14, r26
    3d0a:	fb 06       	cpc	r15, r27
    3d0c:	e0 f5       	brcc	.+120    	; 0x3d86 <vTaskDelayUntil+0xc2>
    3d0e:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3d12:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3d16:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3d1a:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3d1e:	c8 82       	st	Y, r12
    3d20:	d9 82       	std	Y+1, r13	; 0x01
    3d22:	ea 82       	std	Y+2, r14	; 0x02
    3d24:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3d26:	8c 15       	cp	r24, r12
    3d28:	9d 05       	cpc	r25, r13
    3d2a:	ae 05       	cpc	r26, r14
    3d2c:	bf 05       	cpc	r27, r15
    3d2e:	f8 f4       	brcc	.+62     	; 0x3d6e <vTaskDelayUntil+0xaa>
    3d30:	13 c0       	rjmp	.+38     	; 0x3d58 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3d32:	c8 16       	cp	r12, r24
    3d34:	d9 06       	cpc	r13, r25
    3d36:	ea 06       	cpc	r14, r26
    3d38:	fb 06       	cpc	r15, r27
    3d3a:	00 f1       	brcs	.+64     	; 0x3d7c <vTaskDelayUntil+0xb8>
    3d3c:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3d40:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3d44:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3d48:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3d4c:	8c 15       	cp	r24, r12
    3d4e:	9d 05       	cpc	r25, r13
    3d50:	ae 05       	cpc	r26, r14
    3d52:	bf 05       	cpc	r27, r15
    3d54:	98 f0       	brcs	.+38     	; 0x3d7c <vTaskDelayUntil+0xb8>
    3d56:	17 c0       	rjmp	.+46     	; 0x3d86 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d58:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3d5c:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3d60:	02 96       	adiw	r24, 0x02	; 2
    3d62:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3d66:	c7 01       	movw	r24, r14
    3d68:	b6 01       	movw	r22, r12
    3d6a:	0e 94 2d 1b 	call	0x365a	; 0x365a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3d6e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3d72:	81 11       	cpse	r24, r1
    3d74:	0d c0       	rjmp	.+26     	; 0x3d90 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3d76:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
		}
	}
    3d7a:	0a c0       	rjmp	.+20     	; 0x3d90 <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3d7c:	c8 82       	st	Y, r12
    3d7e:	d9 82       	std	Y+1, r13	; 0x01
    3d80:	ea 82       	std	Y+2, r14	; 0x02
    3d82:	fb 82       	std	Y+3, r15	; 0x03
    3d84:	e9 cf       	rjmp	.-46     	; 0x3d58 <vTaskDelayUntil+0x94>
    3d86:	c8 82       	st	Y, r12
    3d88:	d9 82       	std	Y+1, r13	; 0x01
    3d8a:	ea 82       	std	Y+2, r14	; 0x02
    3d8c:	fb 82       	std	Y+3, r15	; 0x03
    3d8e:	ef cf       	rjmp	.-34     	; 0x3d6e <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	ff 90       	pop	r15
    3d96:	ef 90       	pop	r14
    3d98:	df 90       	pop	r13
    3d9a:	cf 90       	pop	r12
    3d9c:	08 95       	ret

00003d9e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3d9e:	cf 92       	push	r12
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	6b 01       	movw	r12, r22
    3da8:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3daa:	67 2b       	or	r22, r23
    3dac:	68 2b       	or	r22, r24
    3dae:	69 2b       	or	r22, r25
    3db0:	e9 f0       	breq	.+58     	; 0x3dec <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    3db2:	0e 94 be 1c 	call	0x397c	; 0x397c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3db6:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3dba:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3dbe:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3dc2:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3dc6:	c8 0e       	add	r12, r24
    3dc8:	d9 1e       	adc	r13, r25
    3dca:	ea 1e       	adc	r14, r26
    3dcc:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3dce:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3dd2:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3dd6:	02 96       	adiw	r24, 0x02	; 2
    3dd8:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3ddc:	c7 01       	movw	r24, r14
    3dde:	b6 01       	movw	r22, r12
    3de0:	0e 94 2d 1b 	call	0x365a	; 0x365a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3de4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3de8:	81 11       	cpse	r24, r1
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3dec:	0e 94 dd 17 	call	0x2fba	; 0x2fba <vPortYield>
		}
	}
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	08 95       	ret

00003dfa <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3dfa:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3dfe:	81 11       	cpse	r24, r1
    3e00:	0c c0       	rjmp	.+24     	; 0x3e1a <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e02:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e06:	4b e0       	ldi	r20, 0x0B	; 11
    3e08:	e4 9f       	mul	r30, r20
    3e0a:	f0 01       	movw	r30, r0
    3e0c:	11 24       	eor	r1, r1
    3e0e:	ee 59       	subi	r30, 0x9E	; 158
    3e10:	fe 4c       	sbci	r31, 0xCE	; 206
    3e12:	80 81       	ld	r24, Z
    3e14:	88 23       	and	r24, r24
    3e16:	29 f0       	breq	.+10     	; 0x3e22 <vTaskSwitchContext+0x28>
    3e18:	14 c0       	rjmp	.+40     	; 0x3e42 <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    3e20:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e22:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3e24:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e28:	81 50       	subi	r24, 0x01	; 1
    3e2a:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e2e:	e0 91 34 31 	lds	r30, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e32:	9e 9f       	mul	r25, r30
    3e34:	f0 01       	movw	r30, r0
    3e36:	11 24       	eor	r1, r1
    3e38:	ee 59       	subi	r30, 0x9E	; 158
    3e3a:	fe 4c       	sbci	r31, 0xCE	; 206
    3e3c:	80 81       	ld	r24, Z
    3e3e:	88 23       	and	r24, r24
    3e40:	89 f3       	breq	.-30     	; 0x3e24 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e42:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <uxTopReadyPriority>
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	4b e0       	ldi	r20, 0x0B	; 11
    3e4c:	84 9f       	mul	r24, r20
    3e4e:	c0 01       	movw	r24, r0
    3e50:	11 24       	eor	r1, r1
    3e52:	dc 01       	movw	r26, r24
    3e54:	ae 59       	subi	r26, 0x9E	; 158
    3e56:	be 4c       	sbci	r27, 0xCE	; 206
    3e58:	11 96       	adiw	r26, 0x01	; 1
    3e5a:	ed 91       	ld	r30, X+
    3e5c:	fc 91       	ld	r31, X
    3e5e:	12 97       	sbiw	r26, 0x02	; 2
    3e60:	04 80       	ldd	r0, Z+4	; 0x04
    3e62:	f5 81       	ldd	r31, Z+5	; 0x05
    3e64:	e0 2d       	mov	r30, r0
    3e66:	11 96       	adiw	r26, 0x01	; 1
    3e68:	ed 93       	st	X+, r30
    3e6a:	fc 93       	st	X, r31
    3e6c:	12 97       	sbiw	r26, 0x02	; 2
    3e6e:	8b 59       	subi	r24, 0x9B	; 155
    3e70:	9e 4c       	sbci	r25, 0xCE	; 206
    3e72:	e8 17       	cp	r30, r24
    3e74:	f9 07       	cpc	r31, r25
    3e76:	61 f4       	brne	.+24     	; 0x3e90 <vTaskSwitchContext+0x96>
    3e78:	84 81       	ldd	r24, Z+4	; 0x04
    3e7a:	95 81       	ldd	r25, Z+5	; 0x05
    3e7c:	4b e0       	ldi	r20, 0x0B	; 11
    3e7e:	42 9f       	mul	r20, r18
    3e80:	f0 01       	movw	r30, r0
    3e82:	43 9f       	mul	r20, r19
    3e84:	f0 0d       	add	r31, r0
    3e86:	11 24       	eor	r1, r1
    3e88:	ee 59       	subi	r30, 0x9E	; 158
    3e8a:	fe 4c       	sbci	r31, 0xCE	; 206
    3e8c:	81 83       	std	Z+1, r24	; 0x01
    3e8e:	92 83       	std	Z+2, r25	; 0x02
    3e90:	8b e0       	ldi	r24, 0x0B	; 11
    3e92:	82 9f       	mul	r24, r18
    3e94:	f0 01       	movw	r30, r0
    3e96:	83 9f       	mul	r24, r19
    3e98:	f0 0d       	add	r31, r0
    3e9a:	11 24       	eor	r1, r1
    3e9c:	ee 59       	subi	r30, 0x9E	; 158
    3e9e:	fe 4c       	sbci	r31, 0xCE	; 206
    3ea0:	01 80       	ldd	r0, Z+1	; 0x01
    3ea2:	f2 81       	ldd	r31, Z+2	; 0x02
    3ea4:	e0 2d       	mov	r30, r0
    3ea6:	80 85       	ldd	r24, Z+8	; 0x08
    3ea8:	91 85       	ldd	r25, Z+9	; 0x09
    3eaa:	80 93 8e 31 	sts	0x318E, r24	; 0x80318e <pxCurrentTCB>
    3eae:	90 93 8f 31 	sts	0x318F, r25	; 0x80318f <pxCurrentTCB+0x1>
    3eb2:	08 95       	ret

00003eb4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3eb4:	cf 92       	push	r12
    3eb6:	df 92       	push	r13
    3eb8:	ef 92       	push	r14
    3eba:	ff 92       	push	r15
    3ebc:	6a 01       	movw	r12, r20
    3ebe:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3ec0:	60 91 8e 31 	lds	r22, 0x318E	; 0x80318e <pxCurrentTCB>
    3ec4:	70 91 8f 31 	lds	r23, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3ec8:	62 5f       	subi	r22, 0xF2	; 242
    3eca:	7f 4f       	sbci	r23, 0xFF	; 255
    3ecc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3ed0:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    3ed4:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    3ed8:	02 96       	adiw	r24, 0x02	; 2
    3eda:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3ede:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3ee2:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3ee6:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3eea:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	6c 0d       	add	r22, r12
    3ef4:	7d 1d       	adc	r23, r13
    3ef6:	8e 1d       	adc	r24, r14
    3ef8:	9f 1d       	adc	r25, r15
    3efa:	0e 94 2d 1b 	call	0x365a	; 0x365a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3efe:	ff 90       	pop	r15
    3f00:	ef 90       	pop	r14
    3f02:	df 90       	pop	r13
    3f04:	cf 90       	pop	r12
    3f06:	08 95       	ret

00003f08 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3f10:	dc 01       	movw	r26, r24
    3f12:	17 96       	adiw	r26, 0x07	; 7
    3f14:	ed 91       	ld	r30, X+
    3f16:	fc 91       	ld	r31, X
    3f18:	18 97       	sbiw	r26, 0x08	; 8
    3f1a:	c0 85       	ldd	r28, Z+8	; 0x08
    3f1c:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3f1e:	8e 01       	movw	r16, r28
    3f20:	02 5f       	subi	r16, 0xF2	; 242
    3f22:	1f 4f       	sbci	r17, 0xFF	; 255
    3f24:	c8 01       	movw	r24, r16
    3f26:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3f2a:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <uxSchedulerSuspended>
    3f2e:	81 11       	cpse	r24, r1
    3f30:	16 c0       	rjmp	.+44     	; 0x3f5e <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3f32:	0c 50       	subi	r16, 0x0C	; 12
    3f34:	11 09       	sbc	r17, r1
    3f36:	c8 01       	movw	r24, r16
    3f38:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f3e:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    3f42:	98 17       	cp	r25, r24
    3f44:	10 f4       	brcc	.+4      	; 0x3f4a <xTaskRemoveFromEventList+0x42>
    3f46:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    3f4a:	bb e0       	ldi	r27, 0x0B	; 11
    3f4c:	8b 9f       	mul	r24, r27
    3f4e:	c0 01       	movw	r24, r0
    3f50:	11 24       	eor	r1, r1
    3f52:	b8 01       	movw	r22, r16
    3f54:	8e 59       	subi	r24, 0x9E	; 158
    3f56:	9e 4c       	sbci	r25, 0xCE	; 206
    3f58:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
    3f5c:	05 c0       	rjmp	.+10     	; 0x3f68 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3f5e:	b8 01       	movw	r22, r16
    3f60:	8d e3       	ldi	r24, 0x3D	; 61
    3f62:	91 e3       	ldi	r25, 0x31	; 49
    3f64:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f68:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    3f6c:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3f74:	92 8d       	ldd	r25, Z+26	; 0x1a
    3f76:	29 17       	cp	r18, r25
    3f78:	08 f4       	brcc	.+2      	; 0x3f7c <xTaskRemoveFromEventList+0x74>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
}
    3f7c:	df 91       	pop	r29
    3f7e:	cf 91       	pop	r28
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	08 95       	ret

00003f86 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3f86:	20 91 2f 31 	lds	r18, 0x312F	; 0x80312f <xNumOfOverflows>
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3f8e:	40 91 36 31 	lds	r20, 0x3136	; 0x803136 <xTickCount>
    3f92:	50 91 37 31 	lds	r21, 0x3137	; 0x803137 <xTickCount+0x1>
    3f96:	60 91 38 31 	lds	r22, 0x3138	; 0x803138 <xTickCount+0x2>
    3f9a:	70 91 39 31 	lds	r23, 0x3139	; 0x803139 <xTickCount+0x3>
    3f9e:	41 83       	std	Z+1, r20	; 0x01
    3fa0:	52 83       	std	Z+2, r21	; 0x02
    3fa2:	63 83       	std	Z+3, r22	; 0x03
    3fa4:	74 83       	std	Z+4, r23	; 0x04
    3fa6:	08 95       	ret

00003fa8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3fa8:	8f 92       	push	r8
    3faa:	9f 92       	push	r9
    3fac:	af 92       	push	r10
    3fae:	bf 92       	push	r11
    3fb0:	cf 92       	push	r12
    3fb2:	df 92       	push	r13
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	f8 94       	cli
    3fc6:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3fc8:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <xNumOfOverflows>
    3fcc:	90 81       	ld	r25, Z
    3fce:	98 17       	cp	r25, r24
    3fd0:	89 f0       	breq	.+34     	; 0x3ff4 <xTaskCheckForTimeOut+0x4c>
    3fd2:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3fd6:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3fda:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    3fde:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    3fe2:	01 81       	ldd	r16, Z+1	; 0x01
    3fe4:	12 81       	ldd	r17, Z+2	; 0x02
    3fe6:	23 81       	ldd	r18, Z+3	; 0x03
    3fe8:	34 81       	ldd	r19, Z+4	; 0x04
    3fea:	80 17       	cp	r24, r16
    3fec:	91 07       	cpc	r25, r17
    3fee:	a2 07       	cpc	r26, r18
    3ff0:	b3 07       	cpc	r27, r19
    3ff2:	a8 f5       	brcc	.+106    	; 0x405e <__stack+0x5f>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3ff4:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xTickCount>
    3ff8:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <xTickCount+0x1>
    3ffc:	a0 91 38 31 	lds	r26, 0x3138	; 0x803138 <xTickCount+0x2>
    4000:	b0 91 39 31 	lds	r27, 0x3139	; 0x803139 <xTickCount+0x3>
    4004:	c1 80       	ldd	r12, Z+1	; 0x01
    4006:	d2 80       	ldd	r13, Z+2	; 0x02
    4008:	e3 80       	ldd	r14, Z+3	; 0x03
    400a:	f4 80       	ldd	r15, Z+4	; 0x04
    400c:	eb 01       	movw	r28, r22
    400e:	08 81       	ld	r16, Y
    4010:	19 81       	ldd	r17, Y+1	; 0x01
    4012:	2a 81       	ldd	r18, Y+2	; 0x02
    4014:	3b 81       	ldd	r19, Y+3	; 0x03
    4016:	8c 19       	sub	r24, r12
    4018:	9d 09       	sbc	r25, r13
    401a:	ae 09       	sbc	r26, r14
    401c:	bf 09       	sbc	r27, r15
    401e:	80 17       	cp	r24, r16
    4020:	91 07       	cpc	r25, r17
    4022:	a2 07       	cpc	r26, r18
    4024:	b3 07       	cpc	r27, r19
    4026:	e8 f4       	brcc	.+58     	; 0x4062 <__stack+0x63>
    4028:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    402a:	80 90 36 31 	lds	r8, 0x3136	; 0x803136 <xTickCount>
    402e:	90 90 37 31 	lds	r9, 0x3137	; 0x803137 <xTickCount+0x1>
    4032:	a0 90 38 31 	lds	r10, 0x3138	; 0x803138 <xTickCount+0x2>
    4036:	b0 90 39 31 	lds	r11, 0x3139	; 0x803139 <xTickCount+0x3>
    403a:	b5 01       	movw	r22, r10
    403c:	a4 01       	movw	r20, r8
    403e:	4c 19       	sub	r20, r12
    4040:	5d 09       	sbc	r21, r13
    4042:	6e 09       	sbc	r22, r14
    4044:	7f 09       	sbc	r23, r15
    4046:	04 1b       	sub	r16, r20
    4048:	15 0b       	sbc	r17, r21
    404a:	26 0b       	sbc	r18, r22
    404c:	37 0b       	sbc	r19, r23
    404e:	08 83       	st	Y, r16
    4050:	19 83       	std	Y+1, r17	; 0x01
    4052:	2a 83       	std	Y+2, r18	; 0x02
    4054:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    4056:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	03 c0       	rjmp	.+6      	; 0x4064 <__stack+0x65>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	01 c0       	rjmp	.+2      	; 0x4064 <__stack+0x65>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    4062:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    4064:	0f 90       	pop	r0
    4066:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	1f 91       	pop	r17
    406e:	0f 91       	pop	r16
    4070:	ff 90       	pop	r15
    4072:	ef 90       	pop	r14
    4074:	df 90       	pop	r13
    4076:	cf 90       	pop	r12
    4078:	bf 90       	pop	r11
    407a:	af 90       	pop	r10
    407c:	9f 90       	pop	r9
    407e:	8f 90       	pop	r8
    4080:	08 95       	ret

00004082 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <xMissedYield>
    4088:	08 95       	ret

0000408a <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	21 f4       	brne	.+8      	; 0x4096 <uxTaskGetStackHighWaterMark+0xc>
    408e:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    4092:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    4096:	dc 01       	movw	r26, r24
    4098:	5b 96       	adiw	r26, 0x1b	; 27
    409a:	ed 91       	ld	r30, X+
    409c:	fc 91       	ld	r31, X
    409e:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    40a0:	80 81       	ld	r24, Z
    40a2:	81 31       	cpi	r24, 0x11	; 17
    40a4:	41 f4       	brne	.+16     	; 0x40b6 <uxTaskGetStackHighWaterMark+0x2c>
    40a6:	31 96       	adiw	r30, 0x01	; 1
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    40ac:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    40ae:	21 91       	ld	r18, Z+
    40b0:	21 31       	cpi	r18, 0x11	; 17
    40b2:	e1 f3       	breq	.-8      	; 0x40ac <uxTaskGetStackHighWaterMark+0x22>
    40b4:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    40ba:	08 95       	ret

000040bc <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    40bc:	80 91 8e 31 	lds	r24, 0x318E	; 0x80318e <pxCurrentTCB>
    40c0:	90 91 8f 31 	lds	r25, 0x318F	; 0x80318f <pxCurrentTCB+0x1>

		return xReturn;
	}
    40c4:	08 95       	ret

000040c6 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    40d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    40d2:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    40d6:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    40da:	5a 96       	adiw	r26, 0x1a	; 26
    40dc:	8c 91       	ld	r24, X
    40de:	28 17       	cp	r18, r24
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <vTaskPriorityInherit+0x1e>
    40e2:	41 c0       	rjmp	.+130    	; 0x4166 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    40e4:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    40e8:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    40ec:	5a 96       	adiw	r26, 0x1a	; 26
    40ee:	3c 91       	ld	r19, X
    40f0:	84 e0       	ldi	r24, 0x04	; 4
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a0 e0       	ldi	r26, 0x00	; 0
    40f6:	b0 e0       	ldi	r27, 0x00	; 0
    40f8:	83 1b       	sub	r24, r19
    40fa:	91 09       	sbc	r25, r1
    40fc:	a1 09       	sbc	r26, r1
    40fe:	b1 09       	sbc	r27, r1
    4100:	86 87       	std	Z+14, r24	; 0x0e
    4102:	97 87       	std	Z+15, r25	; 0x0f
    4104:	a0 8b       	std	Z+16, r26	; 0x10
    4106:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4108:	8b e0       	ldi	r24, 0x0B	; 11
    410a:	28 9f       	mul	r18, r24
    410c:	90 01       	movw	r18, r0
    410e:	11 24       	eor	r1, r1
    4110:	2e 59       	subi	r18, 0x9E	; 158
    4112:	3e 4c       	sbci	r19, 0xCE	; 206
    4114:	84 85       	ldd	r24, Z+12	; 0x0c
    4116:	95 85       	ldd	r25, Z+13	; 0x0d
    4118:	82 17       	cp	r24, r18
    411a:	93 07       	cpc	r25, r19
    411c:	e9 f4       	brne	.+58     	; 0x4158 <vTaskPriorityInherit+0x92>
    411e:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4120:	ef 01       	movw	r28, r30
    4122:	22 96       	adiw	r28, 0x02	; 2
    4124:	ce 01       	movw	r24, r28
    4126:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    412a:	e0 91 8e 31 	lds	r30, 0x318E	; 0x80318e <pxCurrentTCB>
    412e:	f0 91 8f 31 	lds	r31, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    4132:	82 8d       	ldd	r24, Z+26	; 0x1a
    4134:	f8 01       	movw	r30, r16
    4136:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    4138:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    413c:	98 17       	cp	r25, r24
    413e:	10 f4       	brcc	.+4      	; 0x4144 <vTaskPriorityInherit+0x7e>
    4140:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    4144:	fb e0       	ldi	r31, 0x0B	; 11
    4146:	8f 9f       	mul	r24, r31
    4148:	c0 01       	movw	r24, r0
    414a:	11 24       	eor	r1, r1
    414c:	be 01       	movw	r22, r28
    414e:	8e 59       	subi	r24, 0x9E	; 158
    4150:	9e 4c       	sbci	r25, 0xCE	; 206
    4152:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
    4156:	07 c0       	rjmp	.+14     	; 0x4166 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4158:	a0 91 8e 31 	lds	r26, 0x318E	; 0x80318e <pxCurrentTCB>
    415c:	b0 91 8f 31 	lds	r27, 0x318F	; 0x80318f <pxCurrentTCB+0x1>
    4160:	5a 96       	adiw	r26, 0x1a	; 26
    4162:	8c 91       	ld	r24, X
    4164:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	08 95       	ret

00004170 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4170:	0f 93       	push	r16
    4172:	1f 93       	push	r17
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	49 f1       	breq	.+82     	; 0x41ce <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    417c:	fc 01       	movw	r30, r24
    417e:	32 8d       	ldd	r19, Z+26	; 0x1a
    4180:	27 a1       	ldd	r18, Z+39	; 0x27
    4182:	32 17       	cp	r19, r18
    4184:	21 f1       	breq	.+72     	; 0x41ce <vTaskPriorityDisinherit+0x5e>
    4186:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4188:	8c 01       	movw	r16, r24
    418a:	0e 5f       	subi	r16, 0xFE	; 254
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	c8 01       	movw	r24, r16
    4190:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4194:	8f a1       	ldd	r24, Y+39	; 0x27
    4196:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4198:	44 e0       	ldi	r20, 0x04	; 4
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	48 1b       	sub	r20, r24
    41a2:	51 09       	sbc	r21, r1
    41a4:	61 09       	sbc	r22, r1
    41a6:	71 09       	sbc	r23, r1
    41a8:	4e 87       	std	Y+14, r20	; 0x0e
    41aa:	5f 87       	std	Y+15, r21	; 0x0f
    41ac:	68 8b       	std	Y+16, r22	; 0x10
    41ae:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    41b0:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTopReadyPriority>
    41b4:	98 17       	cp	r25, r24
    41b6:	10 f4       	brcc	.+4      	; 0x41bc <vTaskPriorityDisinherit+0x4c>
    41b8:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <uxTopReadyPriority>
    41bc:	fb e0       	ldi	r31, 0x0B	; 11
    41be:	8f 9f       	mul	r24, r31
    41c0:	c0 01       	movw	r24, r0
    41c2:	11 24       	eor	r1, r1
    41c4:	b8 01       	movw	r22, r16
    41c6:	8e 59       	subi	r24, 0x9E	; 158
    41c8:	9e 4c       	sbci	r25, 0xCE	; 206
    41ca:	0e 94 91 16 	call	0x2d22	; 0x2d22 <vListInsertEnd>
			}
		}
	}
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	08 95       	ret

000041d8 <__divmodsi4>:
    41d8:	05 2e       	mov	r0, r21
    41da:	97 fb       	bst	r25, 7
    41dc:	1e f4       	brtc	.+6      	; 0x41e4 <__divmodsi4+0xc>
    41de:	00 94       	com	r0
    41e0:	0e 94 03 21 	call	0x4206	; 0x4206 <__negsi2>
    41e4:	57 fd       	sbrc	r21, 7
    41e6:	07 d0       	rcall	.+14     	; 0x41f6 <__divmodsi4_neg2>
    41e8:	0e 94 0b 21 	call	0x4216	; 0x4216 <__udivmodsi4>
    41ec:	07 fc       	sbrc	r0, 7
    41ee:	03 d0       	rcall	.+6      	; 0x41f6 <__divmodsi4_neg2>
    41f0:	4e f4       	brtc	.+18     	; 0x4204 <__divmodsi4_exit>
    41f2:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__negsi2>

000041f6 <__divmodsi4_neg2>:
    41f6:	50 95       	com	r21
    41f8:	40 95       	com	r20
    41fa:	30 95       	com	r19
    41fc:	21 95       	neg	r18
    41fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4200:	4f 4f       	sbci	r20, 0xFF	; 255
    4202:	5f 4f       	sbci	r21, 0xFF	; 255

00004204 <__divmodsi4_exit>:
    4204:	08 95       	ret

00004206 <__negsi2>:
    4206:	90 95       	com	r25
    4208:	80 95       	com	r24
    420a:	70 95       	com	r23
    420c:	61 95       	neg	r22
    420e:	7f 4f       	sbci	r23, 0xFF	; 255
    4210:	8f 4f       	sbci	r24, 0xFF	; 255
    4212:	9f 4f       	sbci	r25, 0xFF	; 255
    4214:	08 95       	ret

00004216 <__udivmodsi4>:
    4216:	a1 e2       	ldi	r26, 0x21	; 33
    4218:	1a 2e       	mov	r1, r26
    421a:	aa 1b       	sub	r26, r26
    421c:	bb 1b       	sub	r27, r27
    421e:	fd 01       	movw	r30, r26
    4220:	0d c0       	rjmp	.+26     	; 0x423c <__udivmodsi4_ep>

00004222 <__udivmodsi4_loop>:
    4222:	aa 1f       	adc	r26, r26
    4224:	bb 1f       	adc	r27, r27
    4226:	ee 1f       	adc	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	a2 17       	cp	r26, r18
    422c:	b3 07       	cpc	r27, r19
    422e:	e4 07       	cpc	r30, r20
    4230:	f5 07       	cpc	r31, r21
    4232:	20 f0       	brcs	.+8      	; 0x423c <__udivmodsi4_ep>
    4234:	a2 1b       	sub	r26, r18
    4236:	b3 0b       	sbc	r27, r19
    4238:	e4 0b       	sbc	r30, r20
    423a:	f5 0b       	sbc	r31, r21

0000423c <__udivmodsi4_ep>:
    423c:	66 1f       	adc	r22, r22
    423e:	77 1f       	adc	r23, r23
    4240:	88 1f       	adc	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	1a 94       	dec	r1
    4246:	69 f7       	brne	.-38     	; 0x4222 <__udivmodsi4_loop>
    4248:	60 95       	com	r22
    424a:	70 95       	com	r23
    424c:	80 95       	com	r24
    424e:	90 95       	com	r25
    4250:	9b 01       	movw	r18, r22
    4252:	ac 01       	movw	r20, r24
    4254:	bd 01       	movw	r22, r26
    4256:	cf 01       	movw	r24, r30
    4258:	08 95       	ret

0000425a <memcpy>:
    425a:	fb 01       	movw	r30, r22
    425c:	dc 01       	movw	r26, r24
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <memcpy+0xa>
    4260:	01 90       	ld	r0, Z+
    4262:	0d 92       	st	X+, r0
    4264:	41 50       	subi	r20, 0x01	; 1
    4266:	50 40       	sbci	r21, 0x00	; 0
    4268:	d8 f7       	brcc	.-10     	; 0x4260 <memcpy+0x6>
    426a:	08 95       	ret

0000426c <memset>:
    426c:	dc 01       	movw	r26, r24
    426e:	01 c0       	rjmp	.+2      	; 0x4272 <memset+0x6>
    4270:	6d 93       	st	X+, r22
    4272:	41 50       	subi	r20, 0x01	; 1
    4274:	50 40       	sbci	r21, 0x00	; 0
    4276:	e0 f7       	brcc	.-8      	; 0x4270 <memset+0x4>
    4278:	08 95       	ret

0000427a <strncpy>:
    427a:	fb 01       	movw	r30, r22
    427c:	dc 01       	movw	r26, r24
    427e:	41 50       	subi	r20, 0x01	; 1
    4280:	50 40       	sbci	r21, 0x00	; 0
    4282:	48 f0       	brcs	.+18     	; 0x4296 <strncpy+0x1c>
    4284:	01 90       	ld	r0, Z+
    4286:	0d 92       	st	X+, r0
    4288:	00 20       	and	r0, r0
    428a:	c9 f7       	brne	.-14     	; 0x427e <strncpy+0x4>
    428c:	01 c0       	rjmp	.+2      	; 0x4290 <strncpy+0x16>
    428e:	1d 92       	st	X+, r1
    4290:	41 50       	subi	r20, 0x01	; 1
    4292:	50 40       	sbci	r21, 0x00	; 0
    4294:	e0 f7       	brcc	.-8      	; 0x428e <strncpy+0x14>
    4296:	08 95       	ret

00004298 <ultoa>:
    4298:	25 32       	cpi	r18, 0x25	; 37
    429a:	31 05       	cpc	r19, r1
    429c:	20 f4       	brcc	.+8      	; 0x42a6 <ultoa+0xe>
    429e:	22 30       	cpi	r18, 0x02	; 2
    42a0:	10 f0       	brcs	.+4      	; 0x42a6 <ultoa+0xe>
    42a2:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__ultoa_ncheck>
    42a6:	fa 01       	movw	r30, r20
    42a8:	10 82       	st	Z, r1
    42aa:	ca 01       	movw	r24, r20
    42ac:	08 95       	ret

000042ae <__ultoa_ncheck>:
    42ae:	bb 27       	eor	r27, r27

000042b0 <__ultoa_common>:
    42b0:	fa 01       	movw	r30, r20
    42b2:	a6 2f       	mov	r26, r22
    42b4:	62 17       	cp	r22, r18
    42b6:	71 05       	cpc	r23, r1
    42b8:	81 05       	cpc	r24, r1
    42ba:	91 05       	cpc	r25, r1
    42bc:	33 0b       	sbc	r19, r19
    42be:	30 fb       	bst	r19, 0
    42c0:	66 f0       	brts	.+24     	; 0x42da <__ultoa_common+0x2a>
    42c2:	aa 27       	eor	r26, r26
    42c4:	66 0f       	add	r22, r22
    42c6:	77 1f       	adc	r23, r23
    42c8:	88 1f       	adc	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	aa 1f       	adc	r26, r26
    42ce:	a2 17       	cp	r26, r18
    42d0:	10 f0       	brcs	.+4      	; 0x42d6 <__ultoa_common+0x26>
    42d2:	a2 1b       	sub	r26, r18
    42d4:	63 95       	inc	r22
    42d6:	38 50       	subi	r19, 0x08	; 8
    42d8:	a9 f7       	brne	.-22     	; 0x42c4 <__ultoa_common+0x14>
    42da:	a0 5d       	subi	r26, 0xD0	; 208
    42dc:	aa 33       	cpi	r26, 0x3A	; 58
    42de:	08 f0       	brcs	.+2      	; 0x42e2 <__ultoa_common+0x32>
    42e0:	a9 5d       	subi	r26, 0xD9	; 217
    42e2:	a1 93       	st	Z+, r26
    42e4:	36 f7       	brtc	.-52     	; 0x42b2 <__ultoa_common+0x2>
    42e6:	b1 11       	cpse	r27, r1
    42e8:	b1 93       	st	Z+, r27
    42ea:	10 82       	st	Z, r1
    42ec:	ca 01       	movw	r24, r20
    42ee:	0c 94 9e 21 	jmp	0x433c	; 0x433c <strrev>

000042f2 <utoa>:
    42f2:	45 32       	cpi	r20, 0x25	; 37
    42f4:	51 05       	cpc	r21, r1
    42f6:	20 f4       	brcc	.+8      	; 0x4300 <utoa+0xe>
    42f8:	42 30       	cpi	r20, 0x02	; 2
    42fa:	10 f0       	brcs	.+4      	; 0x4300 <utoa+0xe>
    42fc:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__utoa_ncheck>
    4300:	fb 01       	movw	r30, r22
    4302:	10 82       	st	Z, r1
    4304:	cb 01       	movw	r24, r22
    4306:	08 95       	ret

00004308 <__utoa_ncheck>:
    4308:	bb 27       	eor	r27, r27

0000430a <__utoa_common>:
    430a:	fb 01       	movw	r30, r22
    430c:	55 27       	eor	r21, r21
    430e:	aa 27       	eor	r26, r26
    4310:	88 0f       	add	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	aa 1f       	adc	r26, r26
    4316:	a4 17       	cp	r26, r20
    4318:	10 f0       	brcs	.+4      	; 0x431e <__utoa_common+0x14>
    431a:	a4 1b       	sub	r26, r20
    431c:	83 95       	inc	r24
    431e:	50 51       	subi	r21, 0x10	; 16
    4320:	b9 f7       	brne	.-18     	; 0x4310 <__utoa_common+0x6>
    4322:	a0 5d       	subi	r26, 0xD0	; 208
    4324:	aa 33       	cpi	r26, 0x3A	; 58
    4326:	08 f0       	brcs	.+2      	; 0x432a <__utoa_common+0x20>
    4328:	a9 5d       	subi	r26, 0xD9	; 217
    432a:	a1 93       	st	Z+, r26
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	79 f7       	brne	.-34     	; 0x430e <__utoa_common+0x4>
    4330:	b1 11       	cpse	r27, r1
    4332:	b1 93       	st	Z+, r27
    4334:	11 92       	st	Z+, r1
    4336:	cb 01       	movw	r24, r22
    4338:	0c 94 9e 21 	jmp	0x433c	; 0x433c <strrev>

0000433c <strrev>:
    433c:	dc 01       	movw	r26, r24
    433e:	fc 01       	movw	r30, r24
    4340:	67 2f       	mov	r22, r23
    4342:	71 91       	ld	r23, Z+
    4344:	77 23       	and	r23, r23
    4346:	e1 f7       	brne	.-8      	; 0x4340 <strrev+0x4>
    4348:	32 97       	sbiw	r30, 0x02	; 2
    434a:	04 c0       	rjmp	.+8      	; 0x4354 <strrev+0x18>
    434c:	7c 91       	ld	r23, X
    434e:	6d 93       	st	X+, r22
    4350:	70 83       	st	Z, r23
    4352:	62 91       	ld	r22, -Z
    4354:	ae 17       	cp	r26, r30
    4356:	bf 07       	cpc	r27, r31
    4358:	c8 f3       	brcs	.-14     	; 0x434c <strrev+0x10>
    435a:	08 95       	ret

0000435c <__subsf3>:
    435c:	50 58       	subi	r21, 0x80	; 128

0000435e <__addsf3>:
    435e:	bb 27       	eor	r27, r27
    4360:	aa 27       	eor	r26, r26
    4362:	0e 94 c6 21 	call	0x438c	; 0x438c <__addsf3x>
    4366:	0c 94 17 23 	jmp	0x462e	; 0x462e <__fp_round>
    436a:	0e 94 09 23 	call	0x4612	; 0x4612 <__fp_pscA>
    436e:	38 f0       	brcs	.+14     	; 0x437e <__addsf3+0x20>
    4370:	0e 94 10 23 	call	0x4620	; 0x4620 <__fp_pscB>
    4374:	20 f0       	brcs	.+8      	; 0x437e <__addsf3+0x20>
    4376:	39 f4       	brne	.+14     	; 0x4386 <__addsf3+0x28>
    4378:	9f 3f       	cpi	r25, 0xFF	; 255
    437a:	19 f4       	brne	.+6      	; 0x4382 <__addsf3+0x24>
    437c:	26 f4       	brtc	.+8      	; 0x4386 <__addsf3+0x28>
    437e:	0c 94 06 23 	jmp	0x460c	; 0x460c <__fp_nan>
    4382:	0e f4       	brtc	.+2      	; 0x4386 <__addsf3+0x28>
    4384:	e0 95       	com	r30
    4386:	e7 fb       	bst	r30, 7
    4388:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__fp_inf>

0000438c <__addsf3x>:
    438c:	e9 2f       	mov	r30, r25
    438e:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_split3>
    4392:	58 f3       	brcs	.-42     	; 0x436a <__addsf3+0xc>
    4394:	ba 17       	cp	r27, r26
    4396:	62 07       	cpc	r22, r18
    4398:	73 07       	cpc	r23, r19
    439a:	84 07       	cpc	r24, r20
    439c:	95 07       	cpc	r25, r21
    439e:	20 f0       	brcs	.+8      	; 0x43a8 <__addsf3x+0x1c>
    43a0:	79 f4       	brne	.+30     	; 0x43c0 <__addsf3x+0x34>
    43a2:	a6 f5       	brtc	.+104    	; 0x440c <__addsf3x+0x80>
    43a4:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__fp_zero>
    43a8:	0e f4       	brtc	.+2      	; 0x43ac <__addsf3x+0x20>
    43aa:	e0 95       	com	r30
    43ac:	0b 2e       	mov	r0, r27
    43ae:	ba 2f       	mov	r27, r26
    43b0:	a0 2d       	mov	r26, r0
    43b2:	0b 01       	movw	r0, r22
    43b4:	b9 01       	movw	r22, r18
    43b6:	90 01       	movw	r18, r0
    43b8:	0c 01       	movw	r0, r24
    43ba:	ca 01       	movw	r24, r20
    43bc:	a0 01       	movw	r20, r0
    43be:	11 24       	eor	r1, r1
    43c0:	ff 27       	eor	r31, r31
    43c2:	59 1b       	sub	r21, r25
    43c4:	99 f0       	breq	.+38     	; 0x43ec <__addsf3x+0x60>
    43c6:	59 3f       	cpi	r21, 0xF9	; 249
    43c8:	50 f4       	brcc	.+20     	; 0x43de <__addsf3x+0x52>
    43ca:	50 3e       	cpi	r21, 0xE0	; 224
    43cc:	68 f1       	brcs	.+90     	; 0x4428 <__addsf3x+0x9c>
    43ce:	1a 16       	cp	r1, r26
    43d0:	f0 40       	sbci	r31, 0x00	; 0
    43d2:	a2 2f       	mov	r26, r18
    43d4:	23 2f       	mov	r18, r19
    43d6:	34 2f       	mov	r19, r20
    43d8:	44 27       	eor	r20, r20
    43da:	58 5f       	subi	r21, 0xF8	; 248
    43dc:	f3 cf       	rjmp	.-26     	; 0x43c4 <__addsf3x+0x38>
    43de:	46 95       	lsr	r20
    43e0:	37 95       	ror	r19
    43e2:	27 95       	ror	r18
    43e4:	a7 95       	ror	r26
    43e6:	f0 40       	sbci	r31, 0x00	; 0
    43e8:	53 95       	inc	r21
    43ea:	c9 f7       	brne	.-14     	; 0x43de <__addsf3x+0x52>
    43ec:	7e f4       	brtc	.+30     	; 0x440c <__addsf3x+0x80>
    43ee:	1f 16       	cp	r1, r31
    43f0:	ba 0b       	sbc	r27, r26
    43f2:	62 0b       	sbc	r22, r18
    43f4:	73 0b       	sbc	r23, r19
    43f6:	84 0b       	sbc	r24, r20
    43f8:	ba f0       	brmi	.+46     	; 0x4428 <__addsf3x+0x9c>
    43fa:	91 50       	subi	r25, 0x01	; 1
    43fc:	a1 f0       	breq	.+40     	; 0x4426 <__addsf3x+0x9a>
    43fe:	ff 0f       	add	r31, r31
    4400:	bb 1f       	adc	r27, r27
    4402:	66 1f       	adc	r22, r22
    4404:	77 1f       	adc	r23, r23
    4406:	88 1f       	adc	r24, r24
    4408:	c2 f7       	brpl	.-16     	; 0x43fa <__addsf3x+0x6e>
    440a:	0e c0       	rjmp	.+28     	; 0x4428 <__addsf3x+0x9c>
    440c:	ba 0f       	add	r27, r26
    440e:	62 1f       	adc	r22, r18
    4410:	73 1f       	adc	r23, r19
    4412:	84 1f       	adc	r24, r20
    4414:	48 f4       	brcc	.+18     	; 0x4428 <__addsf3x+0x9c>
    4416:	87 95       	ror	r24
    4418:	77 95       	ror	r23
    441a:	67 95       	ror	r22
    441c:	b7 95       	ror	r27
    441e:	f7 95       	ror	r31
    4420:	9e 3f       	cpi	r25, 0xFE	; 254
    4422:	08 f0       	brcs	.+2      	; 0x4426 <__addsf3x+0x9a>
    4424:	b0 cf       	rjmp	.-160    	; 0x4386 <__addsf3+0x28>
    4426:	93 95       	inc	r25
    4428:	88 0f       	add	r24, r24
    442a:	08 f0       	brcs	.+2      	; 0x442e <__addsf3x+0xa2>
    442c:	99 27       	eor	r25, r25
    442e:	ee 0f       	add	r30, r30
    4430:	97 95       	ror	r25
    4432:	87 95       	ror	r24
    4434:	08 95       	ret

00004436 <__divsf3>:
    4436:	0e 94 2f 22 	call	0x445e	; 0x445e <__divsf3x>
    443a:	0c 94 17 23 	jmp	0x462e	; 0x462e <__fp_round>
    443e:	0e 94 10 23 	call	0x4620	; 0x4620 <__fp_pscB>
    4442:	58 f0       	brcs	.+22     	; 0x445a <__divsf3+0x24>
    4444:	0e 94 09 23 	call	0x4612	; 0x4612 <__fp_pscA>
    4448:	40 f0       	brcs	.+16     	; 0x445a <__divsf3+0x24>
    444a:	29 f4       	brne	.+10     	; 0x4456 <__divsf3+0x20>
    444c:	5f 3f       	cpi	r21, 0xFF	; 255
    444e:	29 f0       	breq	.+10     	; 0x445a <__divsf3+0x24>
    4450:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__fp_inf>
    4454:	51 11       	cpse	r21, r1
    4456:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_szero>
    445a:	0c 94 06 23 	jmp	0x460c	; 0x460c <__fp_nan>

0000445e <__divsf3x>:
    445e:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_split3>
    4462:	68 f3       	brcs	.-38     	; 0x443e <__divsf3+0x8>

00004464 <__divsf3_pse>:
    4464:	99 23       	and	r25, r25
    4466:	b1 f3       	breq	.-20     	; 0x4454 <__divsf3+0x1e>
    4468:	55 23       	and	r21, r21
    446a:	91 f3       	breq	.-28     	; 0x4450 <__divsf3+0x1a>
    446c:	95 1b       	sub	r25, r21
    446e:	55 0b       	sbc	r21, r21
    4470:	bb 27       	eor	r27, r27
    4472:	aa 27       	eor	r26, r26
    4474:	62 17       	cp	r22, r18
    4476:	73 07       	cpc	r23, r19
    4478:	84 07       	cpc	r24, r20
    447a:	38 f0       	brcs	.+14     	; 0x448a <__divsf3_pse+0x26>
    447c:	9f 5f       	subi	r25, 0xFF	; 255
    447e:	5f 4f       	sbci	r21, 0xFF	; 255
    4480:	22 0f       	add	r18, r18
    4482:	33 1f       	adc	r19, r19
    4484:	44 1f       	adc	r20, r20
    4486:	aa 1f       	adc	r26, r26
    4488:	a9 f3       	breq	.-22     	; 0x4474 <__divsf3_pse+0x10>
    448a:	35 d0       	rcall	.+106    	; 0x44f6 <__divsf3_pse+0x92>
    448c:	0e 2e       	mov	r0, r30
    448e:	3a f0       	brmi	.+14     	; 0x449e <__divsf3_pse+0x3a>
    4490:	e0 e8       	ldi	r30, 0x80	; 128
    4492:	32 d0       	rcall	.+100    	; 0x44f8 <__divsf3_pse+0x94>
    4494:	91 50       	subi	r25, 0x01	; 1
    4496:	50 40       	sbci	r21, 0x00	; 0
    4498:	e6 95       	lsr	r30
    449a:	00 1c       	adc	r0, r0
    449c:	ca f7       	brpl	.-14     	; 0x4490 <__divsf3_pse+0x2c>
    449e:	2b d0       	rcall	.+86     	; 0x44f6 <__divsf3_pse+0x92>
    44a0:	fe 2f       	mov	r31, r30
    44a2:	29 d0       	rcall	.+82     	; 0x44f6 <__divsf3_pse+0x92>
    44a4:	66 0f       	add	r22, r22
    44a6:	77 1f       	adc	r23, r23
    44a8:	88 1f       	adc	r24, r24
    44aa:	bb 1f       	adc	r27, r27
    44ac:	26 17       	cp	r18, r22
    44ae:	37 07       	cpc	r19, r23
    44b0:	48 07       	cpc	r20, r24
    44b2:	ab 07       	cpc	r26, r27
    44b4:	b0 e8       	ldi	r27, 0x80	; 128
    44b6:	09 f0       	breq	.+2      	; 0x44ba <__divsf3_pse+0x56>
    44b8:	bb 0b       	sbc	r27, r27
    44ba:	80 2d       	mov	r24, r0
    44bc:	bf 01       	movw	r22, r30
    44be:	ff 27       	eor	r31, r31
    44c0:	93 58       	subi	r25, 0x83	; 131
    44c2:	5f 4f       	sbci	r21, 0xFF	; 255
    44c4:	3a f0       	brmi	.+14     	; 0x44d4 <__divsf3_pse+0x70>
    44c6:	9e 3f       	cpi	r25, 0xFE	; 254
    44c8:	51 05       	cpc	r21, r1
    44ca:	78 f0       	brcs	.+30     	; 0x44ea <__divsf3_pse+0x86>
    44cc:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__fp_inf>
    44d0:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_szero>
    44d4:	5f 3f       	cpi	r21, 0xFF	; 255
    44d6:	e4 f3       	brlt	.-8      	; 0x44d0 <__divsf3_pse+0x6c>
    44d8:	98 3e       	cpi	r25, 0xE8	; 232
    44da:	d4 f3       	brlt	.-12     	; 0x44d0 <__divsf3_pse+0x6c>
    44dc:	86 95       	lsr	r24
    44de:	77 95       	ror	r23
    44e0:	67 95       	ror	r22
    44e2:	b7 95       	ror	r27
    44e4:	f7 95       	ror	r31
    44e6:	9f 5f       	subi	r25, 0xFF	; 255
    44e8:	c9 f7       	brne	.-14     	; 0x44dc <__divsf3_pse+0x78>
    44ea:	88 0f       	add	r24, r24
    44ec:	91 1d       	adc	r25, r1
    44ee:	96 95       	lsr	r25
    44f0:	87 95       	ror	r24
    44f2:	97 f9       	bld	r25, 7
    44f4:	08 95       	ret
    44f6:	e1 e0       	ldi	r30, 0x01	; 1
    44f8:	66 0f       	add	r22, r22
    44fa:	77 1f       	adc	r23, r23
    44fc:	88 1f       	adc	r24, r24
    44fe:	bb 1f       	adc	r27, r27
    4500:	62 17       	cp	r22, r18
    4502:	73 07       	cpc	r23, r19
    4504:	84 07       	cpc	r24, r20
    4506:	ba 07       	cpc	r27, r26
    4508:	20 f0       	brcs	.+8      	; 0x4512 <__divsf3_pse+0xae>
    450a:	62 1b       	sub	r22, r18
    450c:	73 0b       	sbc	r23, r19
    450e:	84 0b       	sbc	r24, r20
    4510:	ba 0b       	sbc	r27, r26
    4512:	ee 1f       	adc	r30, r30
    4514:	88 f7       	brcc	.-30     	; 0x44f8 <__divsf3_pse+0x94>
    4516:	e0 95       	com	r30
    4518:	08 95       	ret

0000451a <__fixsfsi>:
    451a:	0e 94 94 22 	call	0x4528	; 0x4528 <__fixunssfsi>
    451e:	68 94       	set
    4520:	b1 11       	cpse	r27, r1
    4522:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_szero>
    4526:	08 95       	ret

00004528 <__fixunssfsi>:
    4528:	0e 94 30 23 	call	0x4660	; 0x4660 <__fp_splitA>
    452c:	88 f0       	brcs	.+34     	; 0x4550 <__fixunssfsi+0x28>
    452e:	9f 57       	subi	r25, 0x7F	; 127
    4530:	98 f0       	brcs	.+38     	; 0x4558 <__fixunssfsi+0x30>
    4532:	b9 2f       	mov	r27, r25
    4534:	99 27       	eor	r25, r25
    4536:	b7 51       	subi	r27, 0x17	; 23
    4538:	b0 f0       	brcs	.+44     	; 0x4566 <__fixunssfsi+0x3e>
    453a:	e1 f0       	breq	.+56     	; 0x4574 <__fixunssfsi+0x4c>
    453c:	66 0f       	add	r22, r22
    453e:	77 1f       	adc	r23, r23
    4540:	88 1f       	adc	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	1a f0       	brmi	.+6      	; 0x454c <__fixunssfsi+0x24>
    4546:	ba 95       	dec	r27
    4548:	c9 f7       	brne	.-14     	; 0x453c <__fixunssfsi+0x14>
    454a:	14 c0       	rjmp	.+40     	; 0x4574 <__fixunssfsi+0x4c>
    454c:	b1 30       	cpi	r27, 0x01	; 1
    454e:	91 f0       	breq	.+36     	; 0x4574 <__fixunssfsi+0x4c>
    4550:	0e 94 4a 23 	call	0x4694	; 0x4694 <__fp_zero>
    4554:	b1 e0       	ldi	r27, 0x01	; 1
    4556:	08 95       	ret
    4558:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__fp_zero>
    455c:	67 2f       	mov	r22, r23
    455e:	78 2f       	mov	r23, r24
    4560:	88 27       	eor	r24, r24
    4562:	b8 5f       	subi	r27, 0xF8	; 248
    4564:	39 f0       	breq	.+14     	; 0x4574 <__fixunssfsi+0x4c>
    4566:	b9 3f       	cpi	r27, 0xF9	; 249
    4568:	cc f3       	brlt	.-14     	; 0x455c <__fixunssfsi+0x34>
    456a:	86 95       	lsr	r24
    456c:	77 95       	ror	r23
    456e:	67 95       	ror	r22
    4570:	b3 95       	inc	r27
    4572:	d9 f7       	brne	.-10     	; 0x456a <__fixunssfsi+0x42>
    4574:	3e f4       	brtc	.+14     	; 0x4584 <__fixunssfsi+0x5c>
    4576:	90 95       	com	r25
    4578:	80 95       	com	r24
    457a:	70 95       	com	r23
    457c:	61 95       	neg	r22
    457e:	7f 4f       	sbci	r23, 0xFF	; 255
    4580:	8f 4f       	sbci	r24, 0xFF	; 255
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	08 95       	ret

00004586 <__floatunsisf>:
    4586:	e8 94       	clt
    4588:	09 c0       	rjmp	.+18     	; 0x459c <__floatsisf+0x12>

0000458a <__floatsisf>:
    458a:	97 fb       	bst	r25, 7
    458c:	3e f4       	brtc	.+14     	; 0x459c <__floatsisf+0x12>
    458e:	90 95       	com	r25
    4590:	80 95       	com	r24
    4592:	70 95       	com	r23
    4594:	61 95       	neg	r22
    4596:	7f 4f       	sbci	r23, 0xFF	; 255
    4598:	8f 4f       	sbci	r24, 0xFF	; 255
    459a:	9f 4f       	sbci	r25, 0xFF	; 255
    459c:	99 23       	and	r25, r25
    459e:	a9 f0       	breq	.+42     	; 0x45ca <__floatsisf+0x40>
    45a0:	f9 2f       	mov	r31, r25
    45a2:	96 e9       	ldi	r25, 0x96	; 150
    45a4:	bb 27       	eor	r27, r27
    45a6:	93 95       	inc	r25
    45a8:	f6 95       	lsr	r31
    45aa:	87 95       	ror	r24
    45ac:	77 95       	ror	r23
    45ae:	67 95       	ror	r22
    45b0:	b7 95       	ror	r27
    45b2:	f1 11       	cpse	r31, r1
    45b4:	f8 cf       	rjmp	.-16     	; 0x45a6 <__floatsisf+0x1c>
    45b6:	fa f4       	brpl	.+62     	; 0x45f6 <__floatsisf+0x6c>
    45b8:	bb 0f       	add	r27, r27
    45ba:	11 f4       	brne	.+4      	; 0x45c0 <__floatsisf+0x36>
    45bc:	60 ff       	sbrs	r22, 0
    45be:	1b c0       	rjmp	.+54     	; 0x45f6 <__floatsisf+0x6c>
    45c0:	6f 5f       	subi	r22, 0xFF	; 255
    45c2:	7f 4f       	sbci	r23, 0xFF	; 255
    45c4:	8f 4f       	sbci	r24, 0xFF	; 255
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	16 c0       	rjmp	.+44     	; 0x45f6 <__floatsisf+0x6c>
    45ca:	88 23       	and	r24, r24
    45cc:	11 f0       	breq	.+4      	; 0x45d2 <__floatsisf+0x48>
    45ce:	96 e9       	ldi	r25, 0x96	; 150
    45d0:	11 c0       	rjmp	.+34     	; 0x45f4 <__floatsisf+0x6a>
    45d2:	77 23       	and	r23, r23
    45d4:	21 f0       	breq	.+8      	; 0x45de <__floatsisf+0x54>
    45d6:	9e e8       	ldi	r25, 0x8E	; 142
    45d8:	87 2f       	mov	r24, r23
    45da:	76 2f       	mov	r23, r22
    45dc:	05 c0       	rjmp	.+10     	; 0x45e8 <__floatsisf+0x5e>
    45de:	66 23       	and	r22, r22
    45e0:	71 f0       	breq	.+28     	; 0x45fe <__floatsisf+0x74>
    45e2:	96 e8       	ldi	r25, 0x86	; 134
    45e4:	86 2f       	mov	r24, r22
    45e6:	70 e0       	ldi	r23, 0x00	; 0
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	2a f0       	brmi	.+10     	; 0x45f6 <__floatsisf+0x6c>
    45ec:	9a 95       	dec	r25
    45ee:	66 0f       	add	r22, r22
    45f0:	77 1f       	adc	r23, r23
    45f2:	88 1f       	adc	r24, r24
    45f4:	da f7       	brpl	.-10     	; 0x45ec <__floatsisf+0x62>
    45f6:	88 0f       	add	r24, r24
    45f8:	96 95       	lsr	r25
    45fa:	87 95       	ror	r24
    45fc:	97 f9       	bld	r25, 7
    45fe:	08 95       	ret

00004600 <__fp_inf>:
    4600:	97 f9       	bld	r25, 7
    4602:	9f 67       	ori	r25, 0x7F	; 127
    4604:	80 e8       	ldi	r24, 0x80	; 128
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	60 e0       	ldi	r22, 0x00	; 0
    460a:	08 95       	ret

0000460c <__fp_nan>:
    460c:	9f ef       	ldi	r25, 0xFF	; 255
    460e:	80 ec       	ldi	r24, 0xC0	; 192
    4610:	08 95       	ret

00004612 <__fp_pscA>:
    4612:	00 24       	eor	r0, r0
    4614:	0a 94       	dec	r0
    4616:	16 16       	cp	r1, r22
    4618:	17 06       	cpc	r1, r23
    461a:	18 06       	cpc	r1, r24
    461c:	09 06       	cpc	r0, r25
    461e:	08 95       	ret

00004620 <__fp_pscB>:
    4620:	00 24       	eor	r0, r0
    4622:	0a 94       	dec	r0
    4624:	12 16       	cp	r1, r18
    4626:	13 06       	cpc	r1, r19
    4628:	14 06       	cpc	r1, r20
    462a:	05 06       	cpc	r0, r21
    462c:	08 95       	ret

0000462e <__fp_round>:
    462e:	09 2e       	mov	r0, r25
    4630:	03 94       	inc	r0
    4632:	00 0c       	add	r0, r0
    4634:	11 f4       	brne	.+4      	; 0x463a <__fp_round+0xc>
    4636:	88 23       	and	r24, r24
    4638:	52 f0       	brmi	.+20     	; 0x464e <__fp_round+0x20>
    463a:	bb 0f       	add	r27, r27
    463c:	40 f4       	brcc	.+16     	; 0x464e <__fp_round+0x20>
    463e:	bf 2b       	or	r27, r31
    4640:	11 f4       	brne	.+4      	; 0x4646 <__fp_round+0x18>
    4642:	60 ff       	sbrs	r22, 0
    4644:	04 c0       	rjmp	.+8      	; 0x464e <__fp_round+0x20>
    4646:	6f 5f       	subi	r22, 0xFF	; 255
    4648:	7f 4f       	sbci	r23, 0xFF	; 255
    464a:	8f 4f       	sbci	r24, 0xFF	; 255
    464c:	9f 4f       	sbci	r25, 0xFF	; 255
    464e:	08 95       	ret

00004650 <__fp_split3>:
    4650:	57 fd       	sbrc	r21, 7
    4652:	90 58       	subi	r25, 0x80	; 128
    4654:	44 0f       	add	r20, r20
    4656:	55 1f       	adc	r21, r21
    4658:	59 f0       	breq	.+22     	; 0x4670 <__fp_splitA+0x10>
    465a:	5f 3f       	cpi	r21, 0xFF	; 255
    465c:	71 f0       	breq	.+28     	; 0x467a <__fp_splitA+0x1a>
    465e:	47 95       	ror	r20

00004660 <__fp_splitA>:
    4660:	88 0f       	add	r24, r24
    4662:	97 fb       	bst	r25, 7
    4664:	99 1f       	adc	r25, r25
    4666:	61 f0       	breq	.+24     	; 0x4680 <__fp_splitA+0x20>
    4668:	9f 3f       	cpi	r25, 0xFF	; 255
    466a:	79 f0       	breq	.+30     	; 0x468a <__fp_splitA+0x2a>
    466c:	87 95       	ror	r24
    466e:	08 95       	ret
    4670:	12 16       	cp	r1, r18
    4672:	13 06       	cpc	r1, r19
    4674:	14 06       	cpc	r1, r20
    4676:	55 1f       	adc	r21, r21
    4678:	f2 cf       	rjmp	.-28     	; 0x465e <__fp_split3+0xe>
    467a:	46 95       	lsr	r20
    467c:	f1 df       	rcall	.-30     	; 0x4660 <__fp_splitA>
    467e:	08 c0       	rjmp	.+16     	; 0x4690 <__fp_splitA+0x30>
    4680:	16 16       	cp	r1, r22
    4682:	17 06       	cpc	r1, r23
    4684:	18 06       	cpc	r1, r24
    4686:	99 1f       	adc	r25, r25
    4688:	f1 cf       	rjmp	.-30     	; 0x466c <__fp_splitA+0xc>
    468a:	86 95       	lsr	r24
    468c:	71 05       	cpc	r23, r1
    468e:	61 05       	cpc	r22, r1
    4690:	08 94       	sec
    4692:	08 95       	ret

00004694 <__fp_zero>:
    4694:	e8 94       	clt

00004696 <__fp_szero>:
    4696:	bb 27       	eor	r27, r27
    4698:	66 27       	eor	r22, r22
    469a:	77 27       	eor	r23, r23
    469c:	cb 01       	movw	r24, r22
    469e:	97 f9       	bld	r25, 7
    46a0:	08 95       	ret

000046a2 <__mulsf3>:
    46a2:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__mulsf3x>
    46a6:	0c 94 17 23 	jmp	0x462e	; 0x462e <__fp_round>
    46aa:	0e 94 09 23 	call	0x4612	; 0x4612 <__fp_pscA>
    46ae:	38 f0       	brcs	.+14     	; 0x46be <__mulsf3+0x1c>
    46b0:	0e 94 10 23 	call	0x4620	; 0x4620 <__fp_pscB>
    46b4:	20 f0       	brcs	.+8      	; 0x46be <__mulsf3+0x1c>
    46b6:	95 23       	and	r25, r21
    46b8:	11 f0       	breq	.+4      	; 0x46be <__mulsf3+0x1c>
    46ba:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__fp_inf>
    46be:	0c 94 06 23 	jmp	0x460c	; 0x460c <__fp_nan>
    46c2:	11 24       	eor	r1, r1
    46c4:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_szero>

000046c8 <__mulsf3x>:
    46c8:	0e 94 28 23 	call	0x4650	; 0x4650 <__fp_split3>
    46cc:	70 f3       	brcs	.-36     	; 0x46aa <__mulsf3+0x8>

000046ce <__mulsf3_pse>:
    46ce:	95 9f       	mul	r25, r21
    46d0:	c1 f3       	breq	.-16     	; 0x46c2 <__mulsf3+0x20>
    46d2:	95 0f       	add	r25, r21
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	55 1f       	adc	r21, r21
    46d8:	62 9f       	mul	r22, r18
    46da:	f0 01       	movw	r30, r0
    46dc:	72 9f       	mul	r23, r18
    46de:	bb 27       	eor	r27, r27
    46e0:	f0 0d       	add	r31, r0
    46e2:	b1 1d       	adc	r27, r1
    46e4:	63 9f       	mul	r22, r19
    46e6:	aa 27       	eor	r26, r26
    46e8:	f0 0d       	add	r31, r0
    46ea:	b1 1d       	adc	r27, r1
    46ec:	aa 1f       	adc	r26, r26
    46ee:	64 9f       	mul	r22, r20
    46f0:	66 27       	eor	r22, r22
    46f2:	b0 0d       	add	r27, r0
    46f4:	a1 1d       	adc	r26, r1
    46f6:	66 1f       	adc	r22, r22
    46f8:	82 9f       	mul	r24, r18
    46fa:	22 27       	eor	r18, r18
    46fc:	b0 0d       	add	r27, r0
    46fe:	a1 1d       	adc	r26, r1
    4700:	62 1f       	adc	r22, r18
    4702:	73 9f       	mul	r23, r19
    4704:	b0 0d       	add	r27, r0
    4706:	a1 1d       	adc	r26, r1
    4708:	62 1f       	adc	r22, r18
    470a:	83 9f       	mul	r24, r19
    470c:	a0 0d       	add	r26, r0
    470e:	61 1d       	adc	r22, r1
    4710:	22 1f       	adc	r18, r18
    4712:	74 9f       	mul	r23, r20
    4714:	33 27       	eor	r19, r19
    4716:	a0 0d       	add	r26, r0
    4718:	61 1d       	adc	r22, r1
    471a:	23 1f       	adc	r18, r19
    471c:	84 9f       	mul	r24, r20
    471e:	60 0d       	add	r22, r0
    4720:	21 1d       	adc	r18, r1
    4722:	82 2f       	mov	r24, r18
    4724:	76 2f       	mov	r23, r22
    4726:	6a 2f       	mov	r22, r26
    4728:	11 24       	eor	r1, r1
    472a:	9f 57       	subi	r25, 0x7F	; 127
    472c:	50 40       	sbci	r21, 0x00	; 0
    472e:	9a f0       	brmi	.+38     	; 0x4756 <__mulsf3_pse+0x88>
    4730:	f1 f0       	breq	.+60     	; 0x476e <__mulsf3_pse+0xa0>
    4732:	88 23       	and	r24, r24
    4734:	4a f0       	brmi	.+18     	; 0x4748 <__mulsf3_pse+0x7a>
    4736:	ee 0f       	add	r30, r30
    4738:	ff 1f       	adc	r31, r31
    473a:	bb 1f       	adc	r27, r27
    473c:	66 1f       	adc	r22, r22
    473e:	77 1f       	adc	r23, r23
    4740:	88 1f       	adc	r24, r24
    4742:	91 50       	subi	r25, 0x01	; 1
    4744:	50 40       	sbci	r21, 0x00	; 0
    4746:	a9 f7       	brne	.-22     	; 0x4732 <__mulsf3_pse+0x64>
    4748:	9e 3f       	cpi	r25, 0xFE	; 254
    474a:	51 05       	cpc	r21, r1
    474c:	80 f0       	brcs	.+32     	; 0x476e <__mulsf3_pse+0xa0>
    474e:	0c 94 00 23 	jmp	0x4600	; 0x4600 <__fp_inf>
    4752:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_szero>
    4756:	5f 3f       	cpi	r21, 0xFF	; 255
    4758:	e4 f3       	brlt	.-8      	; 0x4752 <__mulsf3_pse+0x84>
    475a:	98 3e       	cpi	r25, 0xE8	; 232
    475c:	d4 f3       	brlt	.-12     	; 0x4752 <__mulsf3_pse+0x84>
    475e:	86 95       	lsr	r24
    4760:	77 95       	ror	r23
    4762:	67 95       	ror	r22
    4764:	b7 95       	ror	r27
    4766:	f7 95       	ror	r31
    4768:	e7 95       	ror	r30
    476a:	9f 5f       	subi	r25, 0xFF	; 255
    476c:	c1 f7       	brne	.-16     	; 0x475e <__mulsf3_pse+0x90>
    476e:	fe 2b       	or	r31, r30
    4770:	88 0f       	add	r24, r24
    4772:	91 1d       	adc	r25, r1
    4774:	96 95       	lsr	r25
    4776:	87 95       	ror	r24
    4778:	97 f9       	bld	r25, 7
    477a:	08 95       	ret

0000477c <__mulsi3>:
    477c:	db 01       	movw	r26, r22
    477e:	8f 93       	push	r24
    4780:	9f 93       	push	r25
    4782:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__muluhisi3>
    4786:	bf 91       	pop	r27
    4788:	af 91       	pop	r26
    478a:	a2 9f       	mul	r26, r18
    478c:	80 0d       	add	r24, r0
    478e:	91 1d       	adc	r25, r1
    4790:	a3 9f       	mul	r26, r19
    4792:	90 0d       	add	r25, r0
    4794:	b2 9f       	mul	r27, r18
    4796:	90 0d       	add	r25, r0
    4798:	11 24       	eor	r1, r1
    479a:	08 95       	ret

0000479c <__tablejump2__>:
    479c:	ee 0f       	add	r30, r30
    479e:	ff 1f       	adc	r31, r31
    47a0:	88 1f       	adc	r24, r24
    47a2:	8b bf       	out	0x3b, r24	; 59
    47a4:	07 90       	elpm	r0, Z+
    47a6:	f6 91       	elpm	r31, Z
    47a8:	e0 2d       	mov	r30, r0
    47aa:	1b be       	out	0x3b, r1	; 59
    47ac:	19 94       	eijmp

000047ae <__muluhisi3>:
    47ae:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulhisi3>
    47b2:	a5 9f       	mul	r26, r21
    47b4:	90 0d       	add	r25, r0
    47b6:	b4 9f       	mul	r27, r20
    47b8:	90 0d       	add	r25, r0
    47ba:	a4 9f       	mul	r26, r20
    47bc:	80 0d       	add	r24, r0
    47be:	91 1d       	adc	r25, r1
    47c0:	11 24       	eor	r1, r1
    47c2:	08 95       	ret

000047c4 <__umulhisi3>:
    47c4:	a2 9f       	mul	r26, r18
    47c6:	b0 01       	movw	r22, r0
    47c8:	b3 9f       	mul	r27, r19
    47ca:	c0 01       	movw	r24, r0
    47cc:	a3 9f       	mul	r26, r19
    47ce:	70 0d       	add	r23, r0
    47d0:	81 1d       	adc	r24, r1
    47d2:	11 24       	eor	r1, r1
    47d4:	91 1d       	adc	r25, r1
    47d6:	b2 9f       	mul	r27, r18
    47d8:	70 0d       	add	r23, r0
    47da:	81 1d       	adc	r24, r1
    47dc:	11 24       	eor	r1, r1
    47de:	91 1d       	adc	r25, r1
    47e0:	08 95       	ret

000047e2 <_exit>:
    47e2:	f8 94       	cli

000047e4 <__stop_program>:
    47e4:	ff cf       	rjmp	.-2      	; 0x47e4 <__stop_program>
