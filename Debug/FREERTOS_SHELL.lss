
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00003f72  00004006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010b4  008020c6  008020c6  000040cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000413c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  000094fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000df94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00010fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0001350a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__ctors_end>
       4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
       c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      10:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      14:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      4c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      64:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_25>
      68:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      6c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      70:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__vector_28>
      74:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      78:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      7c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      80:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      84:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      88:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      8c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      90:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      94:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      98:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      9c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      c4:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__vector_49>
      c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      e8:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__vector_58>
      ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     100:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     104:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     108:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     10c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     110:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     114:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     118:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     11c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     120:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     124:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     128:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     12c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     130:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     134:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     138:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     13c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     140:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     144:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     148:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     14c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     150:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     154:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     158:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     15c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     160:	0c 94 be 11 	jmp	0x237c	; 0x237c <__vector_88>
     164:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     168:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     16c:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_91>
     170:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     174:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     178:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     17c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     180:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     184:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     188:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     18c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     190:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     194:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     198:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     19c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1a8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ac:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1b8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1bc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1c8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1cc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1d8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1dc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1e8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1ec:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f0:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1f8:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
     1fc:	31 07       	cpc	r19, r17
     1fe:	34 07       	cpc	r19, r20
     200:	37 07       	cpc	r19, r23
     202:	3a 07       	cpc	r19, r26
     204:	3d 07       	cpc	r19, r29
     206:	40 07       	cpc	r20, r16
     208:	42 07       	cpc	r20, r18
     20a:	53 07       	cpc	r21, r19
     20c:	5b 07       	cpc	r21, r27
     20e:	65 07       	cpc	r22, r21
     210:	63 07       	cpc	r22, r19
     212:	28 0d       	add	r18, r8
     214:	a9 0d       	add	r26, r9
     216:	a9 0d       	add	r26, r9
     218:	a9 0d       	add	r26, r9
     21a:	a9 0d       	add	r26, r9
     21c:	a9 0d       	add	r26, r9
     21e:	a9 0d       	add	r26, r9
     220:	a9 0d       	add	r26, r9
     222:	a9 0d       	add	r26, r9
     224:	a9 0d       	add	r26, r9
     226:	a9 0d       	add	r26, r9
     228:	a9 0d       	add	r26, r9
     22a:	a9 0d       	add	r26, r9
     22c:	a9 0d       	add	r26, r9
     22e:	a9 0d       	add	r26, r9
     230:	a9 0d       	add	r26, r9
     232:	a9 0d       	add	r26, r9
     234:	a9 0d       	add	r26, r9
     236:	a9 0d       	add	r26, r9
     238:	a9 0d       	add	r26, r9
     23a:	a9 0d       	add	r26, r9
     23c:	a9 0d       	add	r26, r9
     23e:	a9 0d       	add	r26, r9
     240:	a9 0d       	add	r26, r9
     242:	a9 0d       	add	r26, r9
     244:	a9 0d       	add	r26, r9
     246:	a9 0d       	add	r26, r9
     248:	a9 0d       	add	r26, r9
     24a:	a9 0d       	add	r26, r9
     24c:	a9 0d       	add	r26, r9
     24e:	a9 0d       	add	r26, r9
     250:	a9 0d       	add	r26, r9
     252:	a9 0d       	add	r26, r9
     254:	a9 0d       	add	r26, r9
     256:	a9 0d       	add	r26, r9
     258:	a9 0d       	add	r26, r9
     25a:	a9 0d       	add	r26, r9
     25c:	a9 0d       	add	r26, r9
     25e:	a9 0d       	add	r26, r9
     260:	a9 0d       	add	r26, r9
     262:	a9 0d       	add	r26, r9
     264:	a9 0d       	add	r26, r9
     266:	a9 0d       	add	r26, r9
     268:	a9 0d       	add	r26, r9
     26a:	a9 0d       	add	r26, r9
     26c:	a9 0d       	add	r26, r9
     26e:	a9 0d       	add	r26, r9
     270:	a9 0d       	add	r26, r9
     272:	a9 0d       	add	r26, r9
     274:	a9 0d       	add	r26, r9
     276:	a9 0d       	add	r26, r9
     278:	a9 0d       	add	r26, r9
     27a:	a9 0d       	add	r26, r9
     27c:	a9 0d       	add	r26, r9
     27e:	a9 0d       	add	r26, r9
     280:	a9 0d       	add	r26, r9
     282:	a9 0d       	add	r26, r9
     284:	a9 0d       	add	r26, r9
     286:	a9 0d       	add	r26, r9
     288:	a9 0d       	add	r26, r9
     28a:	a9 0d       	add	r26, r9
     28c:	a9 0d       	add	r26, r9
     28e:	a9 0d       	add	r26, r9
     290:	a9 0d       	add	r26, r9
     292:	a9 0d       	add	r26, r9
     294:	a9 0d       	add	r26, r9
     296:	a9 0d       	add	r26, r9
     298:	a9 0d       	add	r26, r9
     29a:	a9 0d       	add	r26, r9
     29c:	a9 0d       	add	r26, r9
     29e:	a9 0d       	add	r26, r9
     2a0:	3d 0d       	add	r19, r13
     2a2:	a9 0d       	add	r26, r9
     2a4:	73 0d       	add	r23, r3
     2a6:	28 0d       	add	r18, r8
     2a8:	a9 0d       	add	r26, r9
     2aa:	59 0d       	add	r21, r9
     2ac:	24 0d       	add	r18, r4
     2ae:	a9 0d       	add	r26, r9
     2b0:	a9 0d       	add	r26, r9
     2b2:	a9 0d       	add	r26, r9
     2b4:	a9 0d       	add	r26, r9
     2b6:	a9 0d       	add	r26, r9
     2b8:	e5 0b       	sbc	r30, r21
     2ba:	a9 0d       	add	r26, r9
     2bc:	a9 0d       	add	r26, r9
     2be:	a9 0d       	add	r26, r9
     2c0:	8f 0d       	add	r24, r15
     2c2:	ea 0c       	add	r14, r10
     2c4:	a9 0d       	add	r26, r9
     2c6:	a9 0d       	add	r26, r9
     2c8:	f3 0b       	sbc	r31, r19

000002ca <__trampolines_start>:
     2ca:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <_ZN5rs23214check_for_charEv>
     2ce:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <_ZN5rs23212clear_screenEv>
     2d2:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_ZN8emstreamlsE15ser_manipulator+0x40>
     2d6:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_ZN8emstreamlsE15ser_manipulator+0x2a>
     2da:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <_ZN9task_user3runEv+0x41a>
     2de:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN8emstream12transmit_nowEv>
     2e2:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_ZN8emstreamlsE15ser_manipulator+0x30>
     2e6:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
     2ea:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <_ZN8emstreamlsE15ser_manipulator+0x36>
     2ee:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <_ZN9task_user3runEv+0x452>
     2f2:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <_ZN5rs2327putcharEc>
     2f6:	0c 94 16 04 	jmp	0x82c	; 0x82c <_ZN22task_system_controller3runEv>
     2fa:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_ZN8emstream13ready_to_sendEv>
     2fe:	0c 94 63 07 	jmp	0xec6	; 0xec6 <_ZN8emstreamlsE15ser_manipulator+0x82>
     302:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN8emstream7getcharEv>
     306:	0c 94 07 04 	jmp	0x80e	; 0x80e <_call_static_run_method>
     30a:	0c 94 76 05 	jmp	0xaec	; 0xaec <_ZN21task_pendulum_encoder3runEv>
     30e:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN8emstream14check_for_charEv>
     312:	0c 94 31 07 	jmp	0xe62	; 0xe62 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     316:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN14frt_text_queue7putcharEc>
     31a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN9task_user3runEv>
     31e:	0c 94 53 07 	jmp	0xea6	; 0xea6 <_ZN8emstreamlsE15ser_manipulator+0x62>
     322:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_ZN17task_limit_switch3runEv>
     326:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_ZN5rs2327getcharEv>
     32a:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__cxa_pure_virtual>
     32e:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <_ZN9task_user3runEv+0x374>
     332:	0c 94 40 07 	jmp	0xe80	; 0xe80 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     336:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <_ZN9task_user3runEv+0x4f2>
     33a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
     33e:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <_ZN8frt_task12print_statusER8emstream>
     342:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_ZN18task_motor_encoder3runEv>
     346:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_ZN9task_user3runEv+0x186>
     34a:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_ZN9task_user3runEv+0x4be>
     34e:	0c 94 34 07 	jmp	0xe68	; 0xe68 <_ZN8emstreamlsE15ser_manipulator+0x24>
     352:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <_ZN9task_user3runEv+0x486>
     356:	0c 94 65 07 	jmp	0xeca	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     35a:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <_ZN18task_motor_command3runEv>
     35e:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_ZN9task_user3runEv+0x16a>
     362:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_GLOBAL__sub_I_counter>
     366:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_ZN8emstream12clear_screenEv>
     36a:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <_ZN9task_user3runEv+0x3e8>
     36e:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <prvIdleTask>
     372:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <_ZN8emstreamlsE15ser_manipulator+0x72>
     376:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <_ZN9task_user3runEv+0x3f0>

0000037a <__trampolines_end>:
     37a:	09 09       	sbc	r16, r9
	...

0000037d <_ZZ15print_task_listP8emstreamE3__c_8>:
     37d:	2f 00                                               /.

0000037f <_ZZ15print_task_listP8emstreamE3__c_7>:
     37f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

0000038a <_ZZ15print_task_listP8emstreamE3__c_6>:
     38a:	09 2d 2d 2d 2d 00                                   .----.

00000390 <_ZZ15print_task_listP8emstreamE3__c_5>:
     390:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

0000039c <_ZZ15print_task_listP8emstreamE3__c_4>:
     39c:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000003ad <_ZZ15print_task_listP8emstreamE3__c_3>:
     3ad:	09 52 75 6e 73 00                                   .Runs.

000003b3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     3b3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000003bf <_ZZ15print_task_listP8emstreamE3__c_1>:
     3bf:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000003d0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     3d0:	09 53 74 61 63 6b 00                                .Stack.

000003d7 <_ZZ15print_task_listP8emstreamE3__c>:
     3d7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

000003e2 <_ZZN9task_user11show_statusEvE3__c_4>:
     3e2:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000003ed <_ZZN9task_user11show_statusEvE3__c_3>:
     3ed:	2f 00                                               /.

000003ef <_ZZN9task_user11show_statusEvE3__c_2>:
     3ef:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000003fd <_ZZN9task_user11show_statusEvE3__c_1>:
     3fd:	54 69 6d 65 3a 20 00                                Time: .

00000404 <_ZZN9task_user11show_statusEvE3__c_0>:
     404:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000410 <_ZZN9task_user11show_statusEvE3__c>:
     410:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     420:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000042f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     42f:	1b 5b 32 32 6d 00                                   .[22m.

00000435 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     435:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000440 <_ZZ17print_task_stacksP8emstreamE3__c>:
     440:	1b 5b 31 6d 00                                      .[1m.

00000445 <_ZZN9task_user3runEvE3__c_7>:
     445:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     455:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000462 <_ZZN9task_user3runEvE3__c_6>:
     462:	3a 57 54 46 3f 00                                   :WTF?.

00000468 <_ZZN9task_user3runEvE3__c_5>:
     468:	52 65 73 65 74 2c 20 74 72 79 20 48 6f 6d 69 6e     Reset, try Homin
     478:	67 20 61 67 61 69 6e 20 62 79 20 70 72 65 73 73     g again by press
     488:	69 6e 67 20 27 62 27 00                             ing 'b'.

00000490 <_ZZN9task_user3runEvE3__c_4>:
     490:	45 4d 45 52 47 45 4e 43 59 20 53 54 4f 50 00        EMERGENCY STOP.

0000049f <_ZZN9task_user3runEvE3__c_3>:
     49f:	43 6f 6d 6d 65 6e 63 65 20 42 61 6c 61 6e 63 65     Commence Balance
	...

000004b0 <_ZZN9task_user3runEvE3__c_2>:
     4b0:	42 65 67 69 6e 20 48 6f 6d 69 6e 67 00              Begin Homing.

000004bd <_ZZN9task_user3runEvE3__c_1>:
     4bd:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     4cd:	65 00                                               e.

000004cf <_ZZN9task_user3runEvE3__c_0>:
     4cf:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000004dd <_ZZN9task_user3runEvE3__c>:
     4dd:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     4ed:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000004fb <_ZZN9task_user18print_help_messageEvE3__c_14>:
     4fb:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000050a <_ZZN9task_user18print_help_messageEvE3__c_13>:
     50a:	20 20 20 20 72 3a 20 20 20 52 65 73 65 74 20 74         r:   Reset t
     51a:	6f 20 49 64 6c 65 00                                o Idle.

00000521 <_ZZN9task_user18print_help_messageEvE3__c_12>:
     521:	20 20 20 20 64 3a 20 20 20 45 6d 65 72 67 65 6e         d:   Emergen
     531:	63 79 20 53 74 6f 70 00                             cy Stop.

00000539 <_ZZN9task_user18print_help_messageEvE3__c_11>:
     539:	20 20 20 20 67 3a 20 20 20 53 74 61 72 74 20 42         g:   Start B
     549:	61 6c 61 6e 63 65 21 00                             alance!.

00000551 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     551:	20 20 20 20 62 3a 20 20 20 42 65 67 69 6e 20 43         b:   Begin C
     561:	61 6c 69 62 72 61 74 69 6f 6e 00                    alibration.

0000056c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     56c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     57c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000587 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     587:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     597:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005a5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5a5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5b5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5c5:	6d 61 74 69 6f 6e 00                                mation.

000005cc <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5cc:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5dc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000005ed <_ZZN9task_user18print_help_messageEvE3__c_5>:
     5ed:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     5fd:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000605 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     605:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     615:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000621 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     621:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     631:	68 65 20 41 56 52 00                                he AVR.

00000638 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     638:	20 68 65 6c 70 00                                    help.

0000063e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     63e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     64e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000065d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     65d:	1b 5b 33 30 6d 00                                   .[30m.

00000663 <_ZZN9task_user18print_help_messageEvE3__c>:
     663:	1b 5b 34 36 6d 00                                   .[46m.

00000669 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     669:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     679:	61 73 6b 20 00                                      ask .

0000067e <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     67e:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

0000068c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     68c:	20 63 72 65 61 74 65 64 00                           created.

00000695 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     695:	54 61 73 6b 20 00                                   Task .

0000069b <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     69b:	1b 5b 32 32 6d 00                                   .[22m.

000006a1 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     6a1:	54 61 73 6b 3a 20 00                                Task: .

000006a8 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     6a8:	1b 5b 31 6d 00                                      .[1m.

000006ad <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     6ad:	09 00                                               ..

000006af <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     6af:	09 00                                               ..

000006b1 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     6b1:	2f 00                                               /.

000006b3 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     6b3:	09 00                                               ..

000006b5 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     6b5:	09 00                                               ..

000006b7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     6b7:	1b 5b 32 32 6d 00                                   .[22m.

000006bd <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     6bd:	1b 5b 31 6d 00                                      .[1m.

000006c2 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     6c2:	1b 5b 31 6d 00                                      .[1m.

000006c7 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     6c7:	20 20 00                                              .

000006ca <__ctors_start>:
     6ca:	20 0f       	add	r18, r16

000006cc <__ctors_end>:
     6cc:	11 24       	eor	r1, r1
     6ce:	1f be       	out	0x3f, r1	; 63
     6d0:	cf ef       	ldi	r28, 0xFF	; 255
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df e3       	ldi	r29, 0x3F	; 63
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	0c bf       	out	0x3c, r16	; 60
     6dc:	18 be       	out	0x38, r1	; 56
     6de:	19 be       	out	0x39, r1	; 57
     6e0:	1a be       	out	0x3a, r1	; 58
     6e2:	1b be       	out	0x3b, r1	; 59

000006e4 <__do_copy_data>:
     6e4:	10 e2       	ldi	r17, 0x20	; 32
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e2       	ldi	r27, 0x20	; 32
     6ea:	e2 e7       	ldi	r30, 0x72	; 114
     6ec:	ff e3       	ldi	r31, 0x3F	; 63
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	a6 3c       	cpi	r26, 0xC6	; 198
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>
     6fe:	1b be       	out	0x3b, r1	; 59

00000700 <__do_clear_bss>:
     700:	21 e3       	ldi	r18, 0x31	; 49
     702:	a6 ec       	ldi	r26, 0xC6	; 198
     704:	b0 e2       	ldi	r27, 0x20	; 32
     706:	01 c0       	rjmp	.+2      	; 0x70a <.do_clear_bss_start>

00000708 <.do_clear_bss_loop>:
     708:	1d 92       	st	X+, r1

0000070a <.do_clear_bss_start>:
     70a:	aa 37       	cpi	r26, 0x7A	; 122
     70c:	b2 07       	cpc	r27, r18
     70e:	e1 f7       	brne	.-8      	; 0x708 <.do_clear_bss_loop>

00000710 <__do_global_ctors>:
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c6 e6       	ldi	r28, 0x66	; 102
     714:	d3 e0       	ldi	r29, 0x03	; 3
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	06 c0       	rjmp	.+12     	; 0x726 <__do_global_ctors+0x16>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	01 09       	sbc	r16, r1
     71e:	80 2f       	mov	r24, r16
     720:	fe 01       	movw	r30, r28
     722:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__tablejump2__>
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	d1 07       	cpc	r29, r17
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 07       	cpc	r16, r24
     72e:	a9 f7       	brne	.-22     	; 0x71a <__do_global_ctors+0xa>
     730:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <main>
     734:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <_exit>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN8emstream12clear_screenEv>:
     73c:	08 95       	ret

0000073e <_ZN8emstream12transmit_nowEv>:
     73e:	08 95       	ret

00000740 <_ZN8emstream14check_for_charEv>:
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	08 95       	ret

00000744 <_ZN8emstream7getcharEv>:
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <_ZN8emstream13ready_to_sendEv>:
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <__cxa_pure_virtual>:
     74e:	08 95       	ret

00000750 <_ZN10time_stamp10set_to_nowEv>:
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	0f 92       	push	r0
     75c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     760:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     764:	8c 83       	std	Y+4, r24	; 0x04
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     76c:	68 83       	st	Y, r22
     76e:	79 83       	std	Y+1, r23	; 0x01
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	ce 01       	movw	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZN14frt_text_queue7getcharEv>:
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	3f ef       	ldi	r19, 0xFF	; 255
     792:	a9 01       	movw	r20, r18
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	80 85       	ldd	r24, Z+8	; 0x08
     79e:	91 85       	ldd	r25, Z+9	; 0x09
     7a0:	0e 94 07 18 	call	0x300e	; 0x300e <xQueueGenericReceive>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	19 f4       	brne	.+6      	; 0x7ae <_ZN14frt_text_queue7getcharEv+0x2e>
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <_ZN14frt_text_queue7getcharEv+0x32>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <_ZN14frt_text_queue14check_for_charEv>:
     7bc:	fc 01       	movw	r30, r24
     7be:	80 85       	ldd	r24, Z+8	; 0x08
     7c0:	91 85       	ldd	r25, Z+9	; 0x09
     7c2:	0e 94 cb 18 	call	0x3196	; 0x3196 <uxQueueMessagesWaiting>
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_ZN14frt_text_queue14check_for_charEv+0x12>
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	89 2f       	mov	r24, r25
     7d0:	08 95       	ret

000007d2 <_ZN14frt_text_queue7putcharEc>:
     7d2:	0f 93       	push	r16
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	69 83       	std	Y+1, r22	; 0x01
     7e0:	fc 01       	movw	r30, r24
     7e2:	22 85       	ldd	r18, Z+10	; 0x0a
     7e4:	33 85       	ldd	r19, Z+11	; 0x0b
     7e6:	44 85       	ldd	r20, Z+12	; 0x0c
     7e8:	55 85       	ldd	r21, Z+13	; 0x0d
     7ea:	00 e0       	ldi	r16, 0x00	; 0
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 85       	ldd	r24, Z+8	; 0x08
     7f4:	91 85       	ldd	r25, Z+9	; 0x09
     7f6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xQueueGenericSend>
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	81 11       	cpse	r24, r1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <_ZN14frt_text_queue7putcharEc+0x30>
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	89 2f       	mov	r24, r25
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <_call_static_run_method>:
     80e:	ec 01       	movw	r28, r24
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	19 95       	eicall
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	1b 82       	std	Y+3, r1	; 0x03
     820:	6f ef       	ldi	r22, 0xFF	; 255
     822:	7f ef       	ldi	r23, 0xFF	; 255
     824:	cb 01       	movw	r24, r22
     826:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <vTaskDelay>
     82a:	fa cf       	rjmp	.-12     	; 0x820 <_call_static_run_method+0x12>

0000082c <_ZN22task_system_controller3runEv>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <_ZN22task_system_controller3runEv+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8c 01       	movw	r16, r24
     83a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	7a 83       	std	Y+2, r23	; 0x02
     842:	8b 83       	std	Y+3, r24	; 0x03
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	68 94       	set
     848:	aa 24       	eor	r10, r10
     84a:	a2 f8       	bld	r10, 2
     84c:	0f 2e       	mov	r0, r31
     84e:	f3 e0       	ldi	r31, 0x03	; 3
     850:	bf 2e       	mov	r11, r31
     852:	f0 2d       	mov	r31, r0
     854:	0f 2e       	mov	r0, r31
     856:	fb ef       	ldi	r31, 0xFB	; 251
     858:	ef 2e       	mov	r14, r31
     85a:	ff 24       	eor	r15, r15
     85c:	fa 94       	dec	r15
     85e:	f0 2d       	mov	r31, r0
     860:	68 94       	set
     862:	99 24       	eor	r9, r9
     864:	91 f8       	bld	r9, 1
     866:	0f 2e       	mov	r0, r31
     868:	f5 e0       	ldi	r31, 0x05	; 5
     86a:	cf 2e       	mov	r12, r31
     86c:	d1 2c       	mov	r13, r1
     86e:	f0 2d       	mov	r31, r0
     870:	88 24       	eor	r8, r8
     872:	83 94       	inc	r8
     874:	d8 01       	movw	r26, r16
     876:	1c 96       	adiw	r26, 0x0c	; 12
     878:	8c 91       	ld	r24, X
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	09 f4       	brne	.+2      	; 0x880 <_ZN22task_system_controller3runEv+0x54>
     87e:	64 c0       	rjmp	.+200    	; 0x948 <_ZN22task_system_controller3runEv+0x11c>
     880:	38 f0       	brcs	.+14     	; 0x890 <_ZN22task_system_controller3runEv+0x64>
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	09 f4       	brne	.+2      	; 0x888 <_ZN22task_system_controller3runEv+0x5c>
     886:	a5 c0       	rjmp	.+330    	; 0x9d2 <_ZN22task_system_controller3runEv+0x1a6>
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	09 f4       	brne	.+2      	; 0x88e <_ZN22task_system_controller3runEv+0x62>
     88c:	b9 c0       	rjmp	.+370    	; 0xa00 <_ZN22task_system_controller3runEv+0x1d4>
     88e:	19 c1       	rjmp	.+562    	; 0xac2 <_ZN22task_system_controller3runEv+0x296>
     890:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <linear_offset>
     894:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <linear_offset+0x1>
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	0f 92       	push	r0
     89e:	10 82       	st	Z, r1
     8a0:	11 82       	std	Z+1, r1	; 0x01
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <begin>
     8b4:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <begin+0x1>
     8b8:	80 81       	ld	r24, Z
     8ba:	88 23       	and	r24, r24
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <_ZN22task_system_controller3runEv+0x94>
     8be:	44 c0       	rjmp	.+136    	; 0x948 <_ZN22task_system_controller3runEv+0x11c>
     8c0:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <reset>
     8c4:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <reset+0x1>
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	0f 92       	push	r0
     8ce:	10 82       	st	Z, r1
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <stop>
     8d8:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <stop+0x1>
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	0f 92       	push	r0
     8e2:	10 82       	st	Z, r1
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <motor_command>
     8ec:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <motor_command+0x1>
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	0f 92       	push	r0
     8f6:	c0 82       	st	Z, r12
     8f8:	d1 82       	std	Z+1, r13	; 0x01
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	0f 92       	push	r0
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <rightLimitSwitch>
     90c:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <rightLimitSwitch+0x1>
     910:	80 81       	ld	r24, Z
     912:	88 23       	and	r24, r24
     914:	c9 f0       	breq	.+50     	; 0x948 <_ZN22task_system_controller3runEv+0x11c>
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	0f 92       	push	r0
     91c:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <linear_position>
     920:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <linear_position+0x1>
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <linear_offset>
     930:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <linear_offset+0x1>
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	0f 92       	push	r0
     93a:	80 83       	st	Z, r24
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	f8 01       	movw	r30, r16
     944:	84 86       	std	Z+12, r8	; 0x0c
     946:	85 86       	std	Z+13, r8	; 0x0d
     948:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <begin>
     94c:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <begin+0x1>
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	0f 92       	push	r0
     956:	10 82       	st	Z, r1
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <motor_command>
     960:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <motor_command+0x1>
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	0f 92       	push	r0
     96a:	e0 82       	st	Z, r14
     96c:	f1 82       	std	Z+1, r15	; 0x01
     96e:	0f 90       	pop	r0
     970:	0f be       	out	0x3f, r0	; 63
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	0f 92       	push	r0
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <leftLimitSwitch>
     980:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <leftLimitSwitch+0x1>
     984:	80 81       	ld	r24, Z
     986:	88 23       	and	r24, r24
     988:	a9 f0       	breq	.+42     	; 0x9b4 <_ZN22task_system_controller3runEv+0x188>
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	0f 92       	push	r0
     990:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <linear_position>
     994:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <linear_position+0x1>
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	d8 01       	movw	r26, r16
     9a2:	52 96       	adiw	r26, 0x12	; 18
     9a4:	8d 93       	st	X+, r24
     9a6:	9c 93       	st	X, r25
     9a8:	53 97       	sbiw	r26, 0x13	; 19
     9aa:	1c 96       	adiw	r26, 0x0c	; 12
     9ac:	9c 92       	st	X, r9
     9ae:	1c 97       	sbiw	r26, 0x0c	; 12
     9b0:	1d 96       	adiw	r26, 0x0d	; 13
     9b2:	9c 92       	st	X, r9
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	0f 92       	push	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <reset>
     9c2:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <reset+0x1>
     9c6:	80 81       	ld	r24, Z
     9c8:	88 23       	and	r24, r24
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <_ZN22task_system_controller3runEv+0x1a6>
     9cc:	f8 01       	movw	r30, r16
     9ce:	14 86       	std	Z+12, r1	; 0x0c
     9d0:	15 86       	std	Z+13, r1	; 0x0d
     9d2:	64 ef       	ldi	r22, 0xF4	; 244
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <vTaskDelay>
     9de:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <motor_command>
     9e2:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <motor_command+0x1>
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	10 82       	st	Z, r1
     9ee:	11 82       	std	Z+1, r1	; 0x01
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	d8 01       	movw	r26, r16
     9f6:	1c 96       	adiw	r26, 0x0c	; 12
     9f8:	bc 92       	st	X, r11
     9fa:	1c 97       	sbiw	r26, 0x0c	; 12
     9fc:	1d 96       	adiw	r26, 0x0d	; 13
     9fe:	bc 92       	st	X, r11
     a00:	f8 01       	movw	r30, r16
     a02:	82 89       	ldd	r24, Z+18	; 0x12
     a04:	93 89       	ldd	r25, Z+19	; 0x13
     a06:	99 23       	and	r25, r25
     a08:	0c f4       	brge	.+2      	; 0xa0c <_ZN22task_system_controller3runEv+0x1e0>
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	95 95       	asr	r25
     a0e:	87 95       	ror	r24
     a10:	d8 01       	movw	r26, r16
     a12:	54 96       	adiw	r26, 0x14	; 20
     a14:	8d 93       	st	X+, r24
     a16:	9c 93       	st	X, r25
     a18:	55 97       	sbiw	r26, 0x15	; 21
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	0f 92       	push	r0
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <linear_position>
     a28:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <linear_position+0x1>
     a2c:	20 81       	ld	r18, Z
     a2e:	31 81       	ldd	r19, Z+1	; 0x01
     a30:	82 1b       	sub	r24, r18
     a32:	93 0b       	sbc	r25, r19
     a34:	f8 01       	movw	r30, r16
     a36:	86 8b       	std	Z+22, r24	; 0x16
     a38:	97 8b       	std	Z+23, r25	; 0x17
     a3a:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <motor_command>
     a3e:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <motor_command+0x1>
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	58 96       	adiw	r26, 0x18	; 24
     a4a:	4d 91       	ld	r20, X+
     a4c:	5c 91       	ld	r21, X
     a4e:	59 97       	sbiw	r26, 0x19	; 25
     a50:	84 9f       	mul	r24, r20
     a52:	90 01       	movw	r18, r0
     a54:	85 9f       	mul	r24, r21
     a56:	30 0d       	add	r19, r0
     a58:	94 9f       	mul	r25, r20
     a5a:	30 0d       	add	r19, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	33 23       	and	r19, r19
     a60:	14 f4       	brge	.+4      	; 0xa66 <_ZN22task_system_controller3runEv+0x23a>
     a62:	21 50       	subi	r18, 0x01	; 1
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	83 2f       	mov	r24, r19
     a68:	88 0f       	add	r24, r24
     a6a:	88 0b       	sbc	r24, r24
     a6c:	30 83       	st	Z, r19
     a6e:	81 83       	std	Z+1, r24	; 0x01
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <reset>
     a78:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <reset+0x1>
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	0f 92       	push	r0
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	80 81       	ld	r24, Z
     a88:	88 23       	and	r24, r24
     a8a:	49 f0       	breq	.+18     	; 0xa9e <_ZN22task_system_controller3runEv+0x272>
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	0f 92       	push	r0
     a92:	10 82       	st	Z, r1
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	f8 01       	movw	r30, r16
     a9a:	14 86       	std	Z+12, r1	; 0x0c
     a9c:	15 86       	std	Z+13, r1	; 0x0d
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	0f 92       	push	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <go>
     aac:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <go+0x1>
     ab0:	80 81       	ld	r24, Z
     ab2:	88 23       	and	r24, r24
     ab4:	31 f0       	breq	.+12     	; 0xac2 <_ZN22task_system_controller3runEv+0x296>
     ab6:	d8 01       	movw	r26, r16
     ab8:	1c 96       	adiw	r26, 0x0c	; 12
     aba:	ac 92       	st	X, r10
     abc:	1c 97       	sbiw	r26, 0x0c	; 12
     abe:	1d 96       	adiw	r26, 0x0d	; 13
     ac0:	ac 92       	st	X, r10
     ac2:	f8 01       	movw	r30, r16
     ac4:	86 85       	ldd	r24, Z+14	; 0x0e
     ac6:	97 85       	ldd	r25, Z+15	; 0x0f
     ac8:	a0 89       	ldd	r26, Z+16	; 0x10
     aca:	b1 89       	ldd	r27, Z+17	; 0x11
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	a1 1d       	adc	r26, r1
     ad0:	b1 1d       	adc	r27, r1
     ad2:	86 87       	std	Z+14, r24	; 0x0e
     ad4:	97 87       	std	Z+15, r25	; 0x0f
     ad6:	a0 8b       	std	Z+16, r26	; 0x10
     ad8:	b1 8b       	std	Z+17, r27	; 0x11
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	0e 94 10 1c 	call	0x3820	; 0x3820 <vTaskDelayUntil>
     aea:	c4 ce       	rjmp	.-632    	; 0x874 <_ZN22task_system_controller3runEv+0x48>

00000aec <_ZN21task_pendulum_encoder3runEv>:
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <_ZN21task_pendulum_encoder3runEv+0x6>
     af2:	1f 92       	push	r1
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	8c 01       	movw	r16, r24
     afa:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     afe:	69 83       	std	Y+1, r22	; 0x01
     b00:	7a 83       	std	Y+2, r23	; 0x02
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	e0 e8       	ldi	r30, 0x80	; 128
     b08:	f6 e0       	ldi	r31, 0x06	; 6
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	82 83       	std	Z+2, r24	; 0x02
     b0e:	80 8b       	std	Z+16, r24	; 0x10
     b10:	81 8b       	std	Z+17, r24	; 0x11
     b12:	e0 e8       	ldi	r30, 0x80	; 128
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	80 e7       	ldi	r24, 0x70	; 112
     b18:	82 83       	std	Z+2, r24	; 0x02
     b1a:	89 e0       	ldi	r24, 0x09	; 9
     b1c:	82 87       	std	Z+10, r24	; 0x0a
     b1e:	e0 e4       	ldi	r30, 0x40	; 64
     b20:	f8 e0       	ldi	r31, 0x08	; 8
     b22:	8a e6       	ldi	r24, 0x6A	; 106
     b24:	83 83       	std	Z+3, r24	; 0x03
     b26:	8d ec       	ldi	r24, 0xCD	; 205
     b28:	97 e0       	ldi	r25, 0x07	; 7
     b2a:	86 a3       	std	Z+38, r24	; 0x26
     b2c:	97 a3       	std	Z+39, r25	; 0x27
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 83       	st	Z, r24
     b32:	68 94       	set
     b34:	ee 24       	eor	r14, r14
     b36:	e6 f8       	bld	r14, 6
     b38:	ff 24       	eor	r15, r15
     b3a:	f3 f8       	bld	r15, 3
     b3c:	f7 01       	movw	r30, r14
     b3e:	80 a1       	ldd	r24, Z+32	; 0x20
     b40:	91 a1       	ldd	r25, Z+33	; 0x21
     b42:	e0 91 d6 20 	lds	r30, 0x20D6	; 0x8020d6 <pendulum_encoder>
     b46:	f0 91 d7 20 	lds	r31, 0x20D7	; 0x8020d7 <pendulum_encoder+0x1>
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	0f 92       	push	r0
     b50:	80 83       	st	Z, r24
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	f8 01       	movw	r30, r16
     b5a:	86 85       	ldd	r24, Z+14	; 0x0e
     b5c:	97 85       	ldd	r25, Z+15	; 0x0f
     b5e:	a0 89       	ldd	r26, Z+16	; 0x10
     b60:	b1 89       	ldd	r27, Z+17	; 0x11
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	a1 1d       	adc	r26, r1
     b66:	b1 1d       	adc	r27, r1
     b68:	86 87       	std	Z+14, r24	; 0x0e
     b6a:	97 87       	std	Z+15, r25	; 0x0f
     b6c:	a0 8b       	std	Z+16, r26	; 0x10
     b6e:	b1 8b       	std	Z+17, r27	; 0x11
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 10 1c 	call	0x3820	; 0x3820 <vTaskDelayUntil>
     b80:	dd cf       	rjmp	.-70     	; 0xb3c <_ZN21task_pendulum_encoder3runEv+0x50>

00000b82 <_ZN18task_motor_encoder3runEv>:
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <_ZN18task_motor_encoder3runEv+0x6>
     b88:	1f 92       	push	r1
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	7c 01       	movw	r14, r24
     b90:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     b94:	69 83       	std	Y+1, r22	; 0x01
     b96:	7a 83       	std	Y+2, r23	; 0x02
     b98:	8b 83       	std	Y+3, r24	; 0x03
     b9a:	9c 83       	std	Y+4, r25	; 0x04
     b9c:	e0 e8       	ldi	r30, 0x80	; 128
     b9e:	f6 e0       	ldi	r31, 0x06	; 6
     ba0:	8c e0       	ldi	r24, 0x0C	; 12
     ba2:	82 83       	std	Z+2, r24	; 0x02
     ba4:	82 89       	ldd	r24, Z+18	; 0x12
     ba6:	83 60       	ori	r24, 0x03	; 3
     ba8:	82 8b       	std	Z+18, r24	; 0x12
     baa:	83 89       	ldd	r24, Z+19	; 0x13
     bac:	83 60       	ori	r24, 0x03	; 3
     bae:	83 8b       	std	Z+19, r24	; 0x13
     bb0:	e0 e8       	ldi	r30, 0x80	; 128
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	82 e7       	ldi	r24, 0x72	; 114
     bb6:	80 83       	st	Z, r24
     bb8:	89 e0       	ldi	r24, 0x09	; 9
     bba:	80 87       	std	Z+8, r24	; 0x08
     bbc:	e0 e0       	ldi	r30, 0x00	; 0
     bbe:	f9 e0       	ldi	r31, 0x09	; 9
     bc0:	88 e6       	ldi	r24, 0x68	; 104
     bc2:	83 83       	std	Z+3, r24	; 0x03
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	86 a3       	std	Z+38, r24	; 0x26
     bca:	97 a3       	std	Z+39, r25	; 0x27
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 83       	st	Z, r24
     bd0:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <linear_offset>
     bd4:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <linear_offset+0x1>
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	0f 92       	push	r0
     bde:	10 82       	st	Z, r1
     be0:	11 82       	std	Z+1, r1	; 0x01
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 2e       	mov	r0, r31
     be8:	81 2c       	mov	r8, r1
     bea:	f9 e0       	ldi	r31, 0x09	; 9
     bec:	9f 2e       	mov	r9, r31
     bee:	f0 2d       	mov	r31, r0
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f4 e6       	ldi	r31, 0x64	; 100
     bf4:	af 2e       	mov	r10, r31
     bf6:	b1 2c       	mov	r11, r1
     bf8:	f0 2d       	mov	r31, r0
     bfa:	f4 01       	movw	r30, r8
     bfc:	00 a1       	ldd	r16, Z+32	; 0x20
     bfe:	11 a1       	ldd	r17, Z+33	; 0x21
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	0f 92       	push	r0
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <linear_position>
     c0e:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <linear_position+0x1>
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	0f 92       	push	r0
     c18:	c8 01       	movw	r24, r16
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	80 0f       	add	r24, r16
     c20:	91 1f       	adc	r25, r17
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	b5 01       	movw	r22, r10
     c28:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__divmodhi4>
     c2c:	a0 91 d4 20 	lds	r26, 0x20D4	; 0x8020d4 <linear_offset>
     c30:	b0 91 d5 20 	lds	r27, 0x20D5	; 0x8020d5 <linear_offset+0x1>
     c34:	8d 91       	ld	r24, X+
     c36:	9c 91       	ld	r25, X
     c38:	68 1b       	sub	r22, r24
     c3a:	79 0b       	sbc	r23, r25
     c3c:	60 83       	st	Z, r22
     c3e:	71 83       	std	Z+1, r23	; 0x01
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <thdMotor>
     c48:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <thdMotor+0x1>
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	0f 92       	push	r0
     c52:	c8 01       	movw	r24, r16
     c54:	8c 19       	sub	r24, r12
     c56:	9d 09       	sbc	r25, r13
     c58:	80 83       	st	Z, r24
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	f7 01       	movw	r30, r14
     c62:	86 85       	ldd	r24, Z+14	; 0x0e
     c64:	97 85       	ldd	r25, Z+15	; 0x0f
     c66:	a0 89       	ldd	r26, Z+16	; 0x10
     c68:	b1 89       	ldd	r27, Z+17	; 0x11
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	a1 1d       	adc	r26, r1
     c6e:	b1 1d       	adc	r27, r1
     c70:	86 87       	std	Z+14, r24	; 0x0e
     c72:	97 87       	std	Z+15, r25	; 0x0f
     c74:	a0 8b       	std	Z+16, r26	; 0x10
     c76:	b1 8b       	std	Z+17, r27	; 0x11
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 10 1c 	call	0x3820	; 0x3820 <vTaskDelayUntil>
     c88:	68 01       	movw	r12, r16
     c8a:	b7 cf       	rjmp	.-146    	; 0xbfa <_ZN18task_motor_encoder3runEv+0x78>

00000c8c <_ZN18task_motor_command3runEv>:
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <_ZN18task_motor_command3runEv+0x6>
     c92:	1f 92       	push	r1
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	8c 01       	movw	r16, r24
     c9a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     c9e:	69 83       	std	Y+1, r22	; 0x01
     ca0:	7a 83       	std	Y+2, r23	; 0x02
     ca2:	8b 83       	std	Y+3, r24	; 0x03
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	b6 e0       	ldi	r27, 0x06	; 6
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	15 96       	adiw	r26, 0x05	; 5
     cb6:	8c 93       	st	X, r24
     cb8:	15 97       	sbiw	r26, 0x05	; 5
     cba:	e0 e0       	ldi	r30, 0x00	; 0
     cbc:	f8 e0       	ldi	r31, 0x08	; 8
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	81 83       	std	Z+1, r24	; 0x01
     cc6:	a6 a3       	std	Z+38, r26	; 0x26
     cc8:	b7 a3       	std	Z+39, r27	; 0x27
     cca:	10 a6       	std	Z+40, r1	; 0x28
     ccc:	11 a6       	std	Z+41, r1	; 0x29
     cce:	12 a6       	std	Z+42, r1	; 0x2a
     cd0:	13 a6       	std	Z+43, r1	; 0x2b
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	80 63       	ori	r24, 0x30	; 48
     cd6:	81 83       	std	Z+1, r24	; 0x01
     cd8:	f8 01       	movw	r30, r16
     cda:	12 8a       	std	Z+18, r1	; 0x12
     cdc:	13 8a       	std	Z+19, r1	; 0x13
     cde:	e1 2c       	mov	r14, r1
     ce0:	68 94       	set
     ce2:	ff 24       	eor	r15, r15
     ce4:	f3 f8       	bld	r15, 3
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	0f 92       	push	r0
     cec:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <motor_command>
     cf0:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <motor_command+0x1>
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	f8 01       	movw	r30, r16
     cfe:	82 8b       	std	Z+18, r24	; 0x12
     d00:	93 8b       	std	Z+19, r25	; 0x13
     d02:	99 23       	and	r25, r25
     d04:	34 f0       	brlt	.+12     	; 0xd12 <_ZN18task_motor_command3runEv+0x86>
     d06:	f7 01       	movw	r30, r14
     d08:	80 a7       	std	Z+40, r24	; 0x28
     d0a:	91 a7       	std	Z+41, r25	; 0x29
     d0c:	12 a6       	std	Z+42, r1	; 0x2a
     d0e:	13 a6       	std	Z+43, r1	; 0x2b
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <_ZN18task_motor_command3runEv+0x9e>
     d12:	f7 01       	movw	r30, r14
     d14:	10 a6       	std	Z+40, r1	; 0x28
     d16:	11 a6       	std	Z+41, r1	; 0x29
     d18:	f8 01       	movw	r30, r16
     d1a:	82 89       	ldd	r24, Z+18	; 0x12
     d1c:	93 89       	ldd	r25, Z+19	; 0x13
     d1e:	91 95       	neg	r25
     d20:	81 95       	neg	r24
     d22:	91 09       	sbc	r25, r1
     d24:	f7 01       	movw	r30, r14
     d26:	82 a7       	std	Z+42, r24	; 0x2a
     d28:	93 a7       	std	Z+43, r25	; 0x2b
     d2a:	f8 01       	movw	r30, r16
     d2c:	86 85       	ldd	r24, Z+14	; 0x0e
     d2e:	97 85       	ldd	r25, Z+15	; 0x0f
     d30:	a0 89       	ldd	r26, Z+16	; 0x10
     d32:	b1 89       	ldd	r27, Z+17	; 0x11
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	a1 1d       	adc	r26, r1
     d38:	b1 1d       	adc	r27, r1
     d3a:	86 87       	std	Z+14, r24	; 0x0e
     d3c:	97 87       	std	Z+15, r25	; 0x0f
     d3e:	a0 8b       	std	Z+16, r26	; 0x10
     d40:	b1 8b       	std	Z+17, r27	; 0x11
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	0e 94 10 1c 	call	0x3820	; 0x3820 <vTaskDelayUntil>
     d52:	c9 cf       	rjmp	.-110    	; 0xce6 <_ZN18task_motor_command3runEv+0x5a>

00000d54 <_ZN17task_limit_switch3runEv>:
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	00 d0       	rcall	.+0      	; 0xd5a <_ZN17task_limit_switch3runEv+0x6>
     d5a:	1f 92       	push	r1
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	8c 01       	movw	r16, r24
     d62:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <xTaskGetTickCount>
     d66:	69 83       	std	Y+1, r22	; 0x01
     d68:	7a 83       	std	Y+2, r23	; 0x02
     d6a:	8b 83       	std	Y+3, r24	; 0x03
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	e0 e6       	ldi	r30, 0x60	; 96
     d70:	f6 e0       	ldi	r31, 0x06	; 6
     d72:	90 81       	ld	r25, Z
     d74:	d8 01       	movw	r26, r16
     d76:	52 96       	adiw	r26, 0x12	; 18
     d78:	8c 91       	ld	r24, X
     d7a:	52 97       	sbiw	r26, 0x12	; 18
     d7c:	89 2b       	or	r24, r25
     d7e:	80 83       	st	Z, r24
     d80:	94 81       	ldd	r25, Z+4	; 0x04
     d82:	52 96       	adiw	r26, 0x12	; 18
     d84:	8c 91       	ld	r24, X
     d86:	52 97       	sbiw	r26, 0x12	; 18
     d88:	89 2b       	or	r24, r25
     d8a:	84 83       	std	Z+4, r24	; 0x04
     d8c:	52 96       	adiw	r26, 0x12	; 18
     d8e:	8c 91       	ld	r24, X
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	21 f4       	brne	.+8      	; 0xd9c <_ZN17task_limit_switch3runEv+0x48>
     d94:	88 e1       	ldi	r24, 0x18	; 24
     d96:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <_ZN17task_limit_switch3runEv+0x52>
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	19 f4       	brne	.+6      	; 0xda6 <_ZN17task_limit_switch3runEv+0x52>
     da0:	88 e1       	ldi	r24, 0x18	; 24
     da2:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     da6:	0f 2e       	mov	r0, r31
     da8:	f8 e6       	ldi	r31, 0x68	; 104
     daa:	ef 2e       	mov	r14, r31
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	ff 2e       	mov	r15, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	dd 24       	eor	r13, r13
     db4:	d3 94       	inc	r13
     db6:	f7 01       	movw	r30, r14
     db8:	80 81       	ld	r24, Z
     dba:	80 fd       	sbrc	r24, 0
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <_ZN17task_limit_switch3runEv+0x80>
     dbe:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <leftLimitSwitch>
     dc2:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <leftLimitSwitch+0x1>
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	0f 92       	push	r0
     dcc:	d0 82       	st	Z, r13
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <_ZN17task_limit_switch3runEv+0x94>
     dd4:	e0 91 de 20 	lds	r30, 0x20DE	; 0x8020de <leftLimitSwitch>
     dd8:	f0 91 df 20 	lds	r31, 0x20DF	; 0x8020df <leftLimitSwitch+0x1>
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	0f 92       	push	r0
     de2:	10 82       	st	Z, r1
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	d7 01       	movw	r26, r14
     dea:	8c 91       	ld	r24, X
     dec:	82 fd       	sbrc	r24, 2
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <_ZN17task_limit_switch3runEv+0xb2>
     df0:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <rightLimitSwitch>
     df4:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <rightLimitSwitch+0x1>
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	0f 92       	push	r0
     dfe:	d0 82       	st	Z, r13
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <_ZN17task_limit_switch3runEv+0xc6>
     e06:	e0 91 dc 20 	lds	r30, 0x20DC	; 0x8020dc <rightLimitSwitch>
     e0a:	f0 91 dd 20 	lds	r31, 0x20DD	; 0x8020dd <rightLimitSwitch+0x1>
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	0f 92       	push	r0
     e14:	10 82       	st	Z, r1
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	f8 01       	movw	r30, r16
     e1c:	86 85       	ldd	r24, Z+14	; 0x0e
     e1e:	97 85       	ldd	r25, Z+15	; 0x0f
     e20:	a0 89       	ldd	r26, Z+16	; 0x10
     e22:	b1 89       	ldd	r27, Z+17	; 0x11
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	a1 1d       	adc	r26, r1
     e28:	b1 1d       	adc	r27, r1
     e2a:	86 87       	std	Z+14, r24	; 0x0e
     e2c:	97 87       	std	Z+15, r25	; 0x0f
     e2e:	a0 8b       	std	Z+16, r26	; 0x10
     e30:	b1 8b       	std	Z+17, r27	; 0x11
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 10 1c 	call	0x3820	; 0x3820 <vTaskDelayUntil>
     e42:	b9 cf       	rjmp	.-142    	; 0xdb6 <_ZN17task_limit_switch3runEv+0x62>

00000e44 <_ZN8emstreamlsE15ser_manipulator>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	86 2f       	mov	r24, r22
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	8b 30       	cpi	r24, 0x0B	; 11
     e50:	91 05       	cpc	r25, r1
     e52:	d8 f5       	brcc	.+118    	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e54:	fc 01       	movw	r30, r24
     e56:	88 27       	eor	r24, r24
     e58:	e2 50       	subi	r30, 0x02	; 2
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__tablejump2__>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	31 c0       	rjmp	.+98     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e68:	88 e0       	ldi	r24, 0x08	; 8
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	2e c0       	rjmp	.+92     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e6e:	8a e0       	ldi	r24, 0x0A	; 10
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	2b c0       	rjmp	.+86     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	28 c0       	rjmp	.+80     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	25 c0       	rjmp	.+74     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e80:	1b 82       	std	Y+3, r1	; 0x03
     e82:	23 c0       	rjmp	.+70     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     e84:	e8 81       	ld	r30, Y
     e86:	f9 81       	ldd	r31, Y+1	; 0x01
     e88:	02 80       	ldd	r0, Z+2	; 0x02
     e8a:	f3 81       	ldd	r31, Z+3	; 0x03
     e8c:	e0 2d       	mov	r30, r0
     e8e:	6d e0       	ldi	r22, 0x0D	; 13
     e90:	ce 01       	movw	r24, r28
     e92:	19 95       	eicall
     e94:	e8 81       	ld	r30, Y
     e96:	f9 81       	ldd	r31, Y+1	; 0x01
     e98:	02 80       	ldd	r0, Z+2	; 0x02
     e9a:	f3 81       	ldd	r31, Z+3	; 0x03
     e9c:	e0 2d       	mov	r30, r0
     e9e:	6a e0       	ldi	r22, 0x0A	; 10
     ea0:	ce 01       	movw	r24, r28
     ea2:	19 95       	eicall
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     ea6:	e8 81       	ld	r30, Y
     ea8:	f9 81       	ldd	r31, Y+1	; 0x01
     eaa:	02 84       	ldd	r0, Z+10	; 0x0a
     eac:	f3 85       	ldd	r31, Z+11	; 0x0b
     eae:	e0 2d       	mov	r30, r0
     eb0:	ce 01       	movw	r24, r28
     eb2:	19 95       	eicall
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	00 84       	ldd	r0, Z+8	; 0x08
     ebc:	f1 85       	ldd	r31, Z+9	; 0x09
     ebe:	e0 2d       	mov	r30, r0
     ec0:	ce 01       	movw	r24, r28
     ec2:	19 95       	eicall
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <_ZN8emstreamlsE15ser_manipulator+0x86>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	8c 83       	std	Y+4, r24	; 0x04
     eca:	ce 01       	movw	r24, r28
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <_ZN8frt_task20print_status_in_listEP8emstream>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
     edc:	8b 01       	movw	r16, r22
     ede:	e8 81       	ld	r30, Y
     ee0:	f9 81       	ldd	r31, Y+1	; 0x01
     ee2:	02 80       	ldd	r0, Z+2	; 0x02
     ee4:	f3 81       	ldd	r31, Z+3	; 0x03
     ee6:	e0 2d       	mov	r30, r0
     ee8:	19 95       	eicall
     eea:	66 e0       	ldi	r22, 0x06	; 6
     eec:	c8 01       	movw	r24, r16
     eee:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	19 f0       	breq	.+6      	; 0xf00 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     efa:	b8 01       	movw	r22, r16
     efc:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN8frt_task20print_status_in_listEP8emstream>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <_ZN8emstream4putsEPKc>:
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	8c 01       	movw	r16, r24
     f14:	fb 01       	movw	r30, r22
     f16:	dc 01       	movw	r26, r24
     f18:	14 96       	adiw	r26, 0x04	; 4
     f1a:	8c 91       	ld	r24, X
     f1c:	81 11       	cpse	r24, r1
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <_ZN8emstream4putsEPKc+0x1e>
     f20:	60 81       	ld	r22, Z
     f22:	61 11       	cpse	r22, r1
     f24:	17 c0       	rjmp	.+46     	; 0xf54 <_ZN8emstream4putsEPKc+0x4a>
     f26:	23 c0       	rjmp	.+70     	; 0xf6e <_ZN8emstream4putsEPKc+0x64>
     f28:	d8 01       	movw	r26, r16
     f2a:	14 96       	adiw	r26, 0x04	; 4
     f2c:	1c 92       	st	X, r1
     f2e:	eb 01       	movw	r28, r22
     f30:	21 96       	adiw	r28, 0x01	; 1
     f32:	64 91       	lpm	r22, Z
     f34:	66 23       	and	r22, r22
     f36:	d9 f0       	breq	.+54     	; 0xf6e <_ZN8emstream4putsEPKc+0x64>
     f38:	d8 01       	movw	r26, r16
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	02 80       	ldd	r0, Z+2	; 0x02
     f40:	f3 81       	ldd	r31, Z+3	; 0x03
     f42:	e0 2d       	mov	r30, r0
     f44:	c8 01       	movw	r24, r16
     f46:	19 95       	eicall
     f48:	fe 01       	movw	r30, r28
     f4a:	64 91       	lpm	r22, Z
     f4c:	21 96       	adiw	r28, 0x01	; 1
     f4e:	61 11       	cpse	r22, r1
     f50:	f3 cf       	rjmp	.-26     	; 0xf38 <_ZN8emstream4putsEPKc+0x2e>
     f52:	0d c0       	rjmp	.+26     	; 0xf6e <_ZN8emstream4putsEPKc+0x64>
     f54:	ef 01       	movw	r28, r30
     f56:	21 96       	adiw	r28, 0x01	; 1
     f58:	d8 01       	movw	r26, r16
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	02 80       	ldd	r0, Z+2	; 0x02
     f60:	f3 81       	ldd	r31, Z+3	; 0x03
     f62:	e0 2d       	mov	r30, r0
     f64:	c8 01       	movw	r24, r16
     f66:	19 95       	eicall
     f68:	69 91       	ld	r22, Y+
     f6a:	61 11       	cpse	r22, r1
     f6c:	f5 cf       	rjmp	.-22     	; 0xf58 <_ZN8emstream4putsEPKc+0x4e>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <_ZN8emstreamlsEm>:
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	a1 97       	sbiw	r28, 0x21	; 33
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	8c 01       	movw	r16, r24
     f92:	d4 2e       	mov	r13, r20
     f94:	e5 2e       	mov	r14, r21
     f96:	f6 2e       	mov	r15, r22
     f98:	97 2f       	mov	r25, r23
     f9a:	f8 01       	movw	r30, r16
     f9c:	22 81       	ldd	r18, Z+2	; 0x02
     f9e:	20 31       	cpi	r18, 0x10	; 16
     fa0:	21 f0       	breq	.+8      	; 0xfaa <_ZN8emstreamlsEm+0x32>
     fa2:	28 30       	cpi	r18, 0x08	; 8
     fa4:	11 f0       	breq	.+4      	; 0xfaa <_ZN8emstreamlsEm+0x32>
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	71 f4       	brne	.+28     	; 0xfc6 <_ZN8emstreamlsEm+0x4e>
     faa:	69 2f       	mov	r22, r25
     fac:	c8 01       	movw	r24, r16
     fae:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
     fb2:	6f 2d       	mov	r22, r15
     fb4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
     fb8:	6e 2d       	mov	r22, r14
     fba:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
     fbe:	6d 2d       	mov	r22, r13
     fc0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <_ZN8emstreamlsEm+0x6c>
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	ae 01       	movw	r20, r28
     fca:	4f 5f       	subi	r20, 0xFF	; 255
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	6d 2d       	mov	r22, r13
     fd0:	7e 2d       	mov	r23, r14
     fd2:	8f 2d       	mov	r24, r15
     fd4:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <ultoa>
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	c8 01       	movw	r24, r16
     fe0:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
     fe4:	c8 01       	movw	r24, r16
     fe6:	a1 96       	adiw	r28, 0x21	; 33
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	08 95       	ret

00000ffc <_ZN8emstreamlsEj>:
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	61 97       	sbiw	r28, 0x11	; 17
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	8c 01       	movw	r16, r24
    1012:	f6 2e       	mov	r15, r22
    1014:	97 2f       	mov	r25, r23
    1016:	f8 01       	movw	r30, r16
    1018:	42 81       	ldd	r20, Z+2	; 0x02
    101a:	40 31       	cpi	r20, 0x10	; 16
    101c:	21 f0       	breq	.+8      	; 0x1026 <_ZN8emstreamlsEj+0x2a>
    101e:	48 30       	cpi	r20, 0x08	; 8
    1020:	11 f0       	breq	.+4      	; 0x1026 <_ZN8emstreamlsEj+0x2a>
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	41 f4       	brne	.+16     	; 0x1036 <_ZN8emstreamlsEj+0x3a>
    1026:	69 2f       	mov	r22, r25
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    102e:	6f 2d       	mov	r22, r15
    1030:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <_ZN8emstreamlsEj+0x54>
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	be 01       	movw	r22, r28
    103a:	6f 5f       	subi	r22, 0xFF	; 255
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 2d       	mov	r24, r15
    1040:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <utoa>
    1044:	be 01       	movw	r22, r28
    1046:	6f 5f       	subi	r22, 0xFF	; 255
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1050:	c8 01       	movw	r24, r16
    1052:	61 96       	adiw	r28, 0x11	; 17
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	08 95       	ret

00001064 <_Z15hex_dump_memoryPhS_P8emstreambh>:
    1064:	5f 92       	push	r5
    1066:	6f 92       	push	r6
    1068:	7f 92       	push	r7
    106a:	8f 92       	push	r8
    106c:	9f 92       	push	r9
    106e:	af 92       	push	r10
    1070:	bf 92       	push	r11
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	5c 01       	movw	r10, r24
    1084:	3b 01       	movw	r6, r22
    1086:	4a 01       	movw	r8, r20
    1088:	12 2f       	mov	r17, r18
    108a:	50 2e       	mov	r5, r16
    108c:	63 e0       	ldi	r22, 0x03	; 3
    108e:	ca 01       	movw	r24, r20
    1090:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1094:	a6 14       	cp	r10, r6
    1096:	b7 04       	cpc	r11, r7
    1098:	08 f0       	brcs	.+2      	; 0x109c <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    109a:	7c c0       	rjmp	.+248    	; 0x1194 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
    109c:	65 01       	movw	r12, r10
    109e:	84 e1       	ldi	r24, 0x14	; 20
    10a0:	c8 0e       	add	r12, r24
    10a2:	d1 1c       	adc	r13, r1
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	75 01       	movw	r14, r10
    10a8:	b5 01       	movw	r22, r10
    10aa:	c4 01       	movw	r24, r8
    10ac:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    10b0:	6a e0       	ldi	r22, 0x0A	; 10
    10b2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    10b6:	67 ec       	ldi	r22, 0xC7	; 199
    10b8:	76 e0       	ldi	r23, 0x06	; 6
    10ba:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    10be:	11 23       	and	r17, r17
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
    10c2:	6d c0       	rjmp	.+218    	; 0x119e <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    10c4:	00 23       	and	r16, r16
    10c6:	09 f4       	brne	.+2      	; 0x10ca <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
    10c8:	6a c0       	rjmp	.+212    	; 0x119e <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    10ca:	6a e0       	ldi	r22, 0x0A	; 10
    10cc:	c4 01       	movw	r24, r8
    10ce:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    10d2:	62 ec       	ldi	r22, 0xC2	; 194
    10d4:	76 e0       	ldi	r23, 0x06	; 6
    10d6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    10da:	61 c0       	rjmp	.+194    	; 0x119e <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
    10dc:	11 23       	and	r17, r17
    10de:	71 f0       	breq	.+28     	; 0x10fc <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    10e0:	01 11       	cpse	r16, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    10e4:	88 81       	ld	r24, Y
    10e6:	85 15       	cp	r24, r5
    10e8:	49 f0       	breq	.+18     	; 0x10fc <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
    10ea:	6a e0       	ldi	r22, 0x0A	; 10
    10ec:	c4 01       	movw	r24, r8
    10ee:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    10f2:	6d eb       	ldi	r22, 0xBD	; 189
    10f4:	76 e0       	ldi	r23, 0x06	; 6
    10f6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    10fa:	01 e0       	ldi	r16, 0x01	; 1
    10fc:	69 91       	ld	r22, Y+
    10fe:	c4 01       	movw	r24, r8
    1100:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    1104:	dc 01       	movw	r26, r24
    1106:	ed 91       	ld	r30, X+
    1108:	fc 91       	ld	r31, X
    110a:	02 80       	ldd	r0, Z+2	; 0x02
    110c:	f3 81       	ldd	r31, Z+3	; 0x03
    110e:	e0 2d       	mov	r30, r0
    1110:	60 e2       	ldi	r22, 0x20	; 32
    1112:	19 95       	eicall
    1114:	cc 16       	cp	r12, r28
    1116:	dd 06       	cpc	r13, r29
    1118:	09 f7       	brne	.-62     	; 0x10dc <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
    111a:	11 23       	and	r17, r17
    111c:	89 f0       	breq	.+34     	; 0x1140 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
    111e:	6a e0       	ldi	r22, 0x0A	; 10
    1120:	c4 01       	movw	r24, r8
    1122:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1126:	ec 01       	movw	r28, r24
    1128:	67 eb       	ldi	r22, 0xB7	; 183
    112a:	76 e0       	ldi	r23, 0x06	; 6
    112c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1130:	e8 81       	ld	r30, Y
    1132:	f9 81       	ldd	r31, Y+1	; 0x01
    1134:	02 80       	ldd	r0, Z+2	; 0x02
    1136:	f3 81       	ldd	r31, Z+3	; 0x03
    1138:	e0 2d       	mov	r30, r0
    113a:	60 e2       	ldi	r22, 0x20	; 32
    113c:	ce 01       	movw	r24, r28
    113e:	19 95       	eicall
    1140:	f7 01       	movw	r30, r14
    1142:	61 91       	ld	r22, Z+
    1144:	7f 01       	movw	r14, r30
    1146:	80 ee       	ldi	r24, 0xE0	; 224
    1148:	86 0f       	add	r24, r22
    114a:	8f 35       	cpi	r24, 0x5F	; 95
    114c:	48 f4       	brcc	.+18     	; 0x1160 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
    114e:	d4 01       	movw	r26, r8
    1150:	ed 91       	ld	r30, X+
    1152:	fc 91       	ld	r31, X
    1154:	02 80       	ldd	r0, Z+2	; 0x02
    1156:	f3 81       	ldd	r31, Z+3	; 0x03
    1158:	e0 2d       	mov	r30, r0
    115a:	c4 01       	movw	r24, r8
    115c:	19 95       	eicall
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
    1160:	d4 01       	movw	r26, r8
    1162:	ed 91       	ld	r30, X+
    1164:	fc 91       	ld	r31, X
    1166:	02 80       	ldd	r0, Z+2	; 0x02
    1168:	f3 81       	ldd	r31, Z+3	; 0x03
    116a:	e0 2d       	mov	r30, r0
    116c:	6e e2       	ldi	r22, 0x2E	; 46
    116e:	c4 01       	movw	r24, r8
    1170:	19 95       	eicall
    1172:	ce 14       	cp	r12, r14
    1174:	df 04       	cpc	r13, r15
    1176:	21 f7       	brne	.-56     	; 0x1140 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
    1178:	b4 e1       	ldi	r27, 0x14	; 20
    117a:	ab 0e       	add	r10, r27
    117c:	b1 1c       	adc	r11, r1
    117e:	66 e0       	ldi	r22, 0x06	; 6
    1180:	c4 01       	movw	r24, r8
    1182:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1186:	e4 e1       	ldi	r30, 0x14	; 20
    1188:	ce 0e       	add	r12, r30
    118a:	d1 1c       	adc	r13, r1
    118c:	a6 14       	cp	r10, r6
    118e:	b7 04       	cpc	r11, r7
    1190:	08 f4       	brcc	.+2      	; 0x1194 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
    1192:	89 cf       	rjmp	.-238    	; 0x10a6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
    1194:	62 e0       	ldi	r22, 0x02	; 2
    1196:	c4 01       	movw	r24, r8
    1198:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
    119e:	e7 01       	movw	r28, r14
    11a0:	9d cf       	rjmp	.-198    	; 0x10dc <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	08 95       	ret

000011c2 <_ZlsR8emstreamR10time_stamp>:
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	2f 97       	sbiw	r28, 0x0f	; 15
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	8c 01       	movw	r16, r24
    11e2:	7b 01       	movw	r14, r22
    11e4:	db 01       	movw	r26, r22
    11e6:	6d 91       	ld	r22, X+
    11e8:	7d 91       	ld	r23, X+
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	0f 2e       	mov	r0, r31
    11f0:	f8 ee       	ldi	r31, 0xE8	; 232
    11f2:	8f 2e       	mov	r8, r31
    11f4:	f3 e0       	ldi	r31, 0x03	; 3
    11f6:	9f 2e       	mov	r9, r31
    11f8:	a1 2c       	mov	r10, r1
    11fa:	b1 2c       	mov	r11, r1
    11fc:	f0 2d       	mov	r31, r0
    11fe:	a5 01       	movw	r20, r10
    1200:	94 01       	movw	r18, r8
    1202:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__udivmodsi4>
    1206:	ba 01       	movw	r22, r20
    1208:	a9 01       	movw	r20, r18
    120a:	c8 01       	movw	r24, r16
    120c:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN8emstreamlsEm>
    1210:	d8 01       	movw	r26, r16
    1212:	ed 91       	ld	r30, X+
    1214:	fc 91       	ld	r31, X
    1216:	02 80       	ldd	r0, Z+2	; 0x02
    1218:	f3 81       	ldd	r31, Z+3	; 0x03
    121a:	e0 2d       	mov	r30, r0
    121c:	6e e2       	ldi	r22, 0x2E	; 46
    121e:	c8 01       	movw	r24, r16
    1220:	19 95       	eicall
    1222:	f7 01       	movw	r30, r14
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	a5 01       	movw	r20, r10
    122e:	94 01       	movw	r18, r8
    1230:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__udivmodsi4>
    1234:	9b 01       	movw	r18, r22
    1236:	ac 01       	movw	r20, r24
    1238:	60 e4       	ldi	r22, 0x40	; 64
    123a:	72 e4       	ldi	r23, 0x42	; 66
    123c:	8f e0       	ldi	r24, 0x0F	; 15
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__mulsi3>
    1244:	a5 01       	movw	r20, r10
    1246:	94 01       	movw	r18, r8
    1248:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__udivmodsi4>
    124c:	49 01       	movw	r8, r18
    124e:	5a 01       	movw	r10, r20
    1250:	f7 01       	movw	r30, r14
    1252:	a4 81       	ldd	r26, Z+4	; 0x04
    1254:	b5 81       	ldd	r27, Z+5	; 0x05
    1256:	20 e4       	ldi	r18, 0x40	; 64
    1258:	32 e4       	ldi	r19, 0x42	; 66
    125a:	4f e0       	ldi	r20, 0x0F	; 15
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__muluhisi3>
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	38 e4       	ldi	r19, 0x48	; 72
    1266:	48 ee       	ldi	r20, 0xE8	; 232
    1268:	51 e0       	ldi	r21, 0x01	; 1
    126a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__udivmodsi4>
    126e:	c5 01       	movw	r24, r10
    1270:	b4 01       	movw	r22, r8
    1272:	62 0f       	add	r22, r18
    1274:	73 1f       	adc	r23, r19
    1276:	84 1f       	adc	r24, r20
    1278:	95 1f       	adc	r25, r21
    127a:	7e 01       	movw	r14, r28
    127c:	f7 e0       	ldi	r31, 0x07	; 7
    127e:	ef 0e       	add	r14, r31
    1280:	f1 1c       	adc	r15, r1
    1282:	9e 01       	movw	r18, r28
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	59 01       	movw	r10, r18
    128a:	2a e0       	ldi	r18, 0x0A	; 10
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__divmodsi4>
    1296:	e6 2f       	mov	r30, r22
    1298:	28 87       	std	Y+8, r18	; 0x08
    129a:	39 87       	std	Y+9, r19	; 0x09
    129c:	4a 87       	std	Y+10, r20	; 0x0a
    129e:	5b 87       	std	Y+11, r21	; 0x0b
    12a0:	68 85       	ldd	r22, Y+8	; 0x08
    12a2:	79 85       	ldd	r23, Y+9	; 0x09
    12a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a8:	20 e3       	ldi	r18, 0x30	; 48
    12aa:	2e 0f       	add	r18, r30
    12ac:	d7 01       	movw	r26, r14
    12ae:	2e 93       	st	-X, r18
    12b0:	7d 01       	movw	r14, r26
    12b2:	aa 15       	cp	r26, r10
    12b4:	bb 05       	cpc	r27, r11
    12b6:	49 f7       	brne	.-46     	; 0x128a <_ZlsR8emstreamR10time_stamp+0xc8>
    12b8:	1f 82       	std	Y+7, r1	; 0x07
    12ba:	be 01       	movw	r22, r28
    12bc:	6f 5f       	subi	r22, 0xFF	; 255
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	c8 01       	movw	r24, r16
    12c2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    12c6:	c8 01       	movw	r24, r16
    12c8:	2f 96       	adiw	r28, 0x0f	; 15
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	bf 90       	pop	r11
    12dc:	af 90       	pop	r10
    12de:	9f 90       	pop	r9
    12e0:	8f 90       	pop	r8
    12e2:	08 95       	ret

000012e4 <_ZN8frt_task12print_statusER8emstream>:
    12e4:	8f 92       	push	r8
    12e6:	9f 92       	push	r9
    12e8:	af 92       	push	r10
    12ea:	bf 92       	push	r11
    12ec:	cf 92       	push	r12
    12ee:	df 92       	push	r13
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    12fe:	8b 01       	movw	r16, r22
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	9b 81       	ldd	r25, Y+3	; 0x03
    1304:	0e 94 80 1a 	call	0x3500	; 0x3500 <pcTaskGetTaskName>
    1308:	bc 01       	movw	r22, r24
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1310:	d8 01       	movw	r26, r16
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	02 80       	ldd	r0, Z+2	; 0x02
    1318:	f3 81       	ldd	r31, Z+3	; 0x03
    131a:	e0 2d       	mov	r30, r0
    131c:	69 e0       	ldi	r22, 0x09	; 9
    131e:	c8 01       	movw	r24, r16
    1320:	19 95       	eicall
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	0e 94 80 1a 	call	0x3500	; 0x3500 <pcTaskGetTaskName>
    132a:	fc 01       	movw	r30, r24
    132c:	01 90       	ld	r0, Z+
    132e:	00 20       	and	r0, r0
    1330:	e9 f7       	brne	.-6      	; 0x132c <_ZN8frt_task12print_statusER8emstream+0x48>
    1332:	31 97       	sbiw	r30, 0x01	; 1
    1334:	e8 1b       	sub	r30, r24
    1336:	f9 0b       	sbc	r31, r25
    1338:	38 97       	sbiw	r30, 0x08	; 8
    133a:	48 f4       	brcc	.+18     	; 0x134e <_ZN8frt_task12print_statusER8emstream+0x6a>
    133c:	d8 01       	movw	r26, r16
    133e:	ed 91       	ld	r30, X+
    1340:	fc 91       	ld	r31, X
    1342:	02 80       	ldd	r0, Z+2	; 0x02
    1344:	f3 81       	ldd	r31, Z+3	; 0x03
    1346:	e0 2d       	mov	r30, r0
    1348:	69 e0       	ldi	r22, 0x09	; 9
    134a:	c8 01       	movw	r24, r16
    134c:	19 95       	eicall
    134e:	ce 84       	ldd	r12, Y+14	; 0x0e
    1350:	df 84       	ldd	r13, Y+15	; 0x0f
    1352:	e8 88       	ldd	r14, Y+16	; 0x10
    1354:	f9 88       	ldd	r15, Y+17	; 0x11
    1356:	a8 84       	ldd	r10, Y+8	; 0x08
    1358:	b9 84       	ldd	r11, Y+9	; 0x09
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <uxTaskGetStackHighWaterMark>
    1362:	98 2e       	mov	r9, r24
    1364:	8c 84       	ldd	r8, Y+12	; 0x0c
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <uxTaskPriorityGet>
    136e:	68 2f       	mov	r22, r24
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    1376:	6a e0       	ldi	r22, 0x0A	; 10
    1378:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    137c:	ec 01       	movw	r28, r24
    137e:	65 eb       	ldi	r22, 0xB5	; 181
    1380:	76 e0       	ldi	r23, 0x06	; 6
    1382:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1386:	68 2d       	mov	r22, r8
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    138e:	6a e0       	ldi	r22, 0x0A	; 10
    1390:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1394:	ec 01       	movw	r28, r24
    1396:	63 eb       	ldi	r22, 0xB3	; 179
    1398:	76 e0       	ldi	r23, 0x06	; 6
    139a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    139e:	69 2d       	mov	r22, r9
    13a0:	ce 01       	movw	r24, r28
    13a2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    13a6:	6a e0       	ldi	r22, 0x0A	; 10
    13a8:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    13ac:	ec 01       	movw	r28, r24
    13ae:	61 eb       	ldi	r22, 0xB1	; 177
    13b0:	76 e0       	ldi	r23, 0x06	; 6
    13b2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    13b6:	b5 01       	movw	r22, r10
    13b8:	ce 01       	movw	r24, r28
    13ba:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    13be:	6a e0       	ldi	r22, 0x0A	; 10
    13c0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    13c4:	ec 01       	movw	r28, r24
    13c6:	6f ea       	ldi	r22, 0xAF	; 175
    13c8:	76 e0       	ldi	r23, 0x06	; 6
    13ca:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    13ce:	6a e0       	ldi	r22, 0x0A	; 10
    13d0:	ce 01       	movw	r24, r28
    13d2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    13d6:	ec 01       	movw	r28, r24
    13d8:	6d ea       	ldi	r22, 0xAD	; 173
    13da:	76 e0       	ldi	r23, 0x06	; 6
    13dc:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    13e0:	b7 01       	movw	r22, r14
    13e2:	a6 01       	movw	r20, r12
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN8emstreamlsEm>
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	08 95       	ret

00001404 <_ZN8frt_task19print_stack_in_listEP8emstream>:
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
    1416:	7b 01       	movw	r14, r22
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	9b 81       	ldd	r25, Y+3	; 0x03
    141c:	0e 94 80 1a 	call	0x3500	; 0x3500 <pcTaskGetTaskName>
    1420:	6c 01       	movw	r12, r24
    1422:	6a e0       	ldi	r22, 0x0A	; 10
    1424:	c7 01       	movw	r24, r14
    1426:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    142a:	8c 01       	movw	r16, r24
    142c:	68 ea       	ldi	r22, 0xA8	; 168
    142e:	76 e0       	ldi	r23, 0x06	; 6
    1430:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1434:	6a e0       	ldi	r22, 0x0A	; 10
    1436:	c8 01       	movw	r24, r16
    1438:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    143c:	8c 01       	movw	r16, r24
    143e:	61 ea       	ldi	r22, 0xA1	; 161
    1440:	76 e0       	ldi	r23, 0x06	; 6
    1442:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1446:	b6 01       	movw	r22, r12
    1448:	c8 01       	movw	r24, r16
    144a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    144e:	6a e0       	ldi	r22, 0x0A	; 10
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1456:	8c 01       	movw	r16, r24
    1458:	6b e9       	ldi	r22, 0x9B	; 155
    145a:	76 e0       	ldi	r23, 0x06	; 6
    145c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1460:	66 e0       	ldi	r22, 0x06	; 6
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1468:	8a 85       	ldd	r24, Y+10	; 0x0a
    146a:	9b 85       	ldd	r25, Y+11	; 0x0b
    146c:	e8 85       	ldd	r30, Y+8	; 0x08
    146e:	f9 85       	ldd	r31, Y+9	; 0x09
    1470:	01 e1       	ldi	r16, 0x11	; 17
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	a7 01       	movw	r20, r14
    1476:	bc 01       	movw	r22, r24
    1478:	8e 1b       	sub	r24, r30
    147a:	9f 0b       	sbc	r25, r31
    147c:	0e 94 32 08 	call	0x1064	; 0x1064 <_Z15hex_dump_memoryPhS_P8emstreambh>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	19 f0       	breq	.+6      	; 0x148e <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    1488:	b7 01       	movw	r22, r14
    148a:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN8frt_task19print_stack_in_listEP8emstream>
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	df 90       	pop	r13
    149c:	cf 90       	pop	r12
    149e:	08 95       	ret

000014a0 <_ZN9task_user18print_help_messageEv>:
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	6a e0       	ldi	r22, 0x0A	; 10
    14ac:	8e 81       	ldd	r24, Y+6	; 0x06
    14ae:	9f 81       	ldd	r25, Y+7	; 0x07
    14b0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    14b4:	8c 01       	movw	r16, r24
    14b6:	63 e6       	ldi	r22, 0x63	; 99
    14b8:	76 e0       	ldi	r23, 0x06	; 6
    14ba:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    14be:	6a e0       	ldi	r22, 0x0A	; 10
    14c0:	c8 01       	movw	r24, r16
    14c2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    14c6:	8c 01       	movw	r16, r24
    14c8:	6d e5       	ldi	r22, 0x5D	; 93
    14ca:	76 e0       	ldi	r23, 0x06	; 6
    14cc:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	c8 01       	movw	r24, r16
    14d4:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    14d8:	6a e0       	ldi	r22, 0x0A	; 10
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    14e2:	8c 01       	movw	r16, r24
    14e4:	6e e3       	ldi	r22, 0x3E	; 62
    14e6:	76 e0       	ldi	r23, 0x06	; 6
    14e8:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    14ec:	6a e0       	ldi	r22, 0x0A	; 10
    14ee:	c8 01       	movw	r24, r16
    14f0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    14f4:	8c 01       	movw	r16, r24
    14f6:	68 e3       	ldi	r22, 0x38	; 56
    14f8:	76 e0       	ldi	r23, 0x06	; 6
    14fa:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    14fe:	66 e0       	ldi	r22, 0x06	; 6
    1500:	c8 01       	movw	r24, r16
    1502:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1506:	6a e0       	ldi	r22, 0x0A	; 10
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1510:	8c 01       	movw	r16, r24
    1512:	61 e2       	ldi	r22, 0x21	; 33
    1514:	76 e0       	ldi	r23, 0x06	; 6
    1516:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    151a:	66 e0       	ldi	r22, 0x06	; 6
    151c:	c8 01       	movw	r24, r16
    151e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1522:	6a e0       	ldi	r22, 0x0A	; 10
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    152c:	8c 01       	movw	r16, r24
    152e:	65 e0       	ldi	r22, 0x05	; 5
    1530:	76 e0       	ldi	r23, 0x06	; 6
    1532:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1536:	66 e0       	ldi	r22, 0x06	; 6
    1538:	c8 01       	movw	r24, r16
    153a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	8e 81       	ldd	r24, Y+6	; 0x06
    1542:	9f 81       	ldd	r25, Y+7	; 0x07
    1544:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1548:	8c 01       	movw	r16, r24
    154a:	6d ee       	ldi	r22, 0xED	; 237
    154c:	75 e0       	ldi	r23, 0x05	; 5
    154e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1552:	66 e0       	ldi	r22, 0x06	; 6
    1554:	c8 01       	movw	r24, r16
    1556:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    155a:	6a e0       	ldi	r22, 0x0A	; 10
    155c:	8e 81       	ldd	r24, Y+6	; 0x06
    155e:	9f 81       	ldd	r25, Y+7	; 0x07
    1560:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1564:	8c 01       	movw	r16, r24
    1566:	6c ec       	ldi	r22, 0xCC	; 204
    1568:	75 e0       	ldi	r23, 0x05	; 5
    156a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    156e:	66 e0       	ldi	r22, 0x06	; 6
    1570:	c8 01       	movw	r24, r16
    1572:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1576:	6a e0       	ldi	r22, 0x0A	; 10
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1580:	8c 01       	movw	r16, r24
    1582:	65 ea       	ldi	r22, 0xA5	; 165
    1584:	75 e0       	ldi	r23, 0x05	; 5
    1586:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    158a:	66 e0       	ldi	r22, 0x06	; 6
    158c:	c8 01       	movw	r24, r16
    158e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1592:	6a e0       	ldi	r22, 0x0A	; 10
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    159c:	8c 01       	movw	r16, r24
    159e:	67 e8       	ldi	r22, 0x87	; 135
    15a0:	75 e0       	ldi	r23, 0x05	; 5
    15a2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    15a6:	66 e0       	ldi	r22, 0x06	; 6
    15a8:	c8 01       	movw	r24, r16
    15aa:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15ae:	6a e0       	ldi	r22, 0x0A	; 10
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15b8:	8c 01       	movw	r16, r24
    15ba:	6c e6       	ldi	r22, 0x6C	; 108
    15bc:	75 e0       	ldi	r23, 0x05	; 5
    15be:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    15c2:	66 e0       	ldi	r22, 0x06	; 6
    15c4:	c8 01       	movw	r24, r16
    15c6:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15ca:	6a e0       	ldi	r22, 0x0A	; 10
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15d4:	8c 01       	movw	r16, r24
    15d6:	61 e5       	ldi	r22, 0x51	; 81
    15d8:	75 e0       	ldi	r23, 0x05	; 5
    15da:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    15de:	66 e0       	ldi	r22, 0x06	; 6
    15e0:	c8 01       	movw	r24, r16
    15e2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15e6:	6a e0       	ldi	r22, 0x0A	; 10
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    15f0:	8c 01       	movw	r16, r24
    15f2:	69 e3       	ldi	r22, 0x39	; 57
    15f4:	75 e0       	ldi	r23, 0x05	; 5
    15f6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    15fa:	66 e0       	ldi	r22, 0x06	; 6
    15fc:	c8 01       	movw	r24, r16
    15fe:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1602:	6a e0       	ldi	r22, 0x0A	; 10
    1604:	8e 81       	ldd	r24, Y+6	; 0x06
    1606:	9f 81       	ldd	r25, Y+7	; 0x07
    1608:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    160c:	8c 01       	movw	r16, r24
    160e:	61 e2       	ldi	r22, 0x21	; 33
    1610:	75 e0       	ldi	r23, 0x05	; 5
    1612:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	c8 01       	movw	r24, r16
    161a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    161e:	6a e0       	ldi	r22, 0x0A	; 10
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1628:	8c 01       	movw	r16, r24
    162a:	6a e0       	ldi	r22, 0x0A	; 10
    162c:	75 e0       	ldi	r23, 0x05	; 5
    162e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1632:	66 e0       	ldi	r22, 0x06	; 6
    1634:	c8 01       	movw	r24, r16
    1636:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    163a:	6a e0       	ldi	r22, 0x0A	; 10
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1644:	ec 01       	movw	r28, r24
    1646:	6b ef       	ldi	r22, 0xFB	; 251
    1648:	74 e0       	ldi	r23, 0x04	; 4
    164a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    164e:	66 e0       	ldi	r22, 0x06	; 6
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <_ZN9task_user3runEv>:
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	2c 97       	sbiw	r28, 0x0c	; 12
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	7c 01       	movw	r14, r24
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	1a 82       	std	Y+2, r1	; 0x02
    1674:	1b 82       	std	Y+3, r1	; 0x03
    1676:	1c 82       	std	Y+4, r1	; 0x04
    1678:	1d 82       	std	Y+5, r1	; 0x05
    167a:	1e 82       	std	Y+6, r1	; 0x06
    167c:	6a e0       	ldi	r22, 0x0A	; 10
    167e:	dc 01       	movw	r26, r24
    1680:	16 96       	adiw	r26, 0x06	; 6
    1682:	8d 91       	ld	r24, X+
    1684:	9c 91       	ld	r25, X
    1686:	17 97       	sbiw	r26, 0x07	; 7
    1688:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    168c:	6c 01       	movw	r12, r24
    168e:	6d ed       	ldi	r22, 0xDD	; 221
    1690:	74 e0       	ldi	r23, 0x04	; 4
    1692:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1696:	66 e0       	ldi	r22, 0x06	; 6
    1698:	c6 01       	movw	r24, r12
    169a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    169e:	11 e0       	ldi	r17, 0x01	; 1
    16a0:	81 2c       	mov	r8, r1
    16a2:	68 94       	set
    16a4:	99 24       	eor	r9, r9
    16a6:	93 f8       	bld	r9, 3
    16a8:	0f 2e       	mov	r0, r31
    16aa:	f8 ec       	ldi	r31, 0xC8	; 200
    16ac:	af 2e       	mov	r10, r31
    16ae:	f0 e2       	ldi	r31, 0x20	; 32
    16b0:	bf 2e       	mov	r11, r31
    16b2:	f0 2d       	mov	r31, r0
    16b4:	f7 01       	movw	r30, r14
    16b6:	84 85       	ldd	r24, Z+12	; 0x0c
    16b8:	88 23       	and	r24, r24
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <_ZN9task_user3runEv+0x64>
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <_ZN9task_user3runEv+0x62>
    16c0:	60 c0       	rjmp	.+192    	; 0x1782 <_ZN9task_user3runEv+0x122>
    16c2:	63 c2       	rjmp	.+1222   	; 0x1b8a <_ZN9task_user3runEv+0x52a>
    16c4:	86 81       	ldd	r24, Z+6	; 0x06
    16c6:	97 81       	ldd	r25, Z+7	; 0x07
    16c8:	dc 01       	movw	r26, r24
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	04 80       	ldd	r0, Z+4	; 0x04
    16d0:	f5 81       	ldd	r31, Z+5	; 0x05
    16d2:	e0 2d       	mov	r30, r0
    16d4:	19 95       	eicall
    16d6:	88 23       	and	r24, r24
    16d8:	09 f4       	brne	.+2      	; 0x16dc <_ZN9task_user3runEv+0x7c>
    16da:	37 c0       	rjmp	.+110    	; 0x174a <_ZN9task_user3runEv+0xea>
    16dc:	f7 01       	movw	r30, r14
    16de:	86 81       	ldd	r24, Z+6	; 0x06
    16e0:	97 81       	ldd	r25, Z+7	; 0x07
    16e2:	dc 01       	movw	r26, r24
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	06 80       	ldd	r0, Z+6	; 0x06
    16ea:	f7 81       	ldd	r31, Z+7	; 0x07
    16ec:	e0 2d       	mov	r30, r0
    16ee:	19 95       	eicall
    16f0:	99 27       	eor	r25, r25
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	f9 f0       	breq	.+62     	; 0x1736 <_ZN9task_user3runEv+0xd6>
    16f8:	03 97       	sbiw	r24, 0x03	; 3
    16fa:	09 f0       	breq	.+2      	; 0x16fe <_ZN9task_user3runEv+0x9e>
    16fc:	61 c2       	rjmp	.+1218   	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    16fe:	6a e0       	ldi	r22, 0x0A	; 10
    1700:	f7 01       	movw	r30, r14
    1702:	86 81       	ldd	r24, Z+6	; 0x06
    1704:	97 81       	ldd	r25, Z+7	; 0x07
    1706:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    170a:	7c 01       	movw	r14, r24
    170c:	6f ec       	ldi	r22, 0xCF	; 207
    170e:	74 e0       	ldi	r23, 0x04	; 4
    1710:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1714:	66 e0       	ldi	r22, 0x06	; 6
    1716:	c7 01       	movw	r24, r14
    1718:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	88 ed       	ldi	r24, 0xD8	; 216
    1720:	08 b6       	in	r0, 0x38	; 56
    1722:	18 be       	out	0x38, r1	; 56
    1724:	84 bf       	out	0x34, r24	; 52
    1726:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    172a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    172e:	81 fd       	sbrc	r24, 1
    1730:	fc cf       	rjmp	.-8      	; 0x172a <_ZN9task_user3runEv+0xca>
    1732:	08 be       	out	0x38, r0	; 56
    1734:	ff cf       	rjmp	.-2      	; 0x1734 <_ZN9task_user3runEv+0xd4>
    1736:	c7 01       	movw	r24, r14
    1738:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN9task_user18print_help_messageEv>
    173c:	d7 01       	movw	r26, r14
    173e:	1c 96       	adiw	r26, 0x0c	; 12
    1740:	1c 93       	st	X, r17
    1742:	1c 97       	sbiw	r26, 0x0c	; 12
    1744:	1d 96       	adiw	r26, 0x0d	; 13
    1746:	1c 93       	st	X, r17
    1748:	3b c2       	rjmp	.+1142   	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    174a:	80 ee       	ldi	r24, 0xE0	; 224
    174c:	90 e2       	ldi	r25, 0x20	; 32
    174e:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN14frt_text_queue14check_for_charEv>
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <_ZN9task_user3runEv+0xf8>
    1756:	34 c2       	rjmp	.+1128   	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1758:	d7 01       	movw	r26, r14
    175a:	16 96       	adiw	r26, 0x06	; 6
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	17 97       	sbiw	r26, 0x07	; 7
    1762:	01 90       	ld	r0, Z+
    1764:	f0 81       	ld	r31, Z
    1766:	e0 2d       	mov	r30, r0
    1768:	c2 80       	ldd	r12, Z+2	; 0x02
    176a:	d3 80       	ldd	r13, Z+3	; 0x03
    176c:	80 ee       	ldi	r24, 0xE0	; 224
    176e:	90 e2       	ldi	r25, 0x20	; 32
    1770:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN14frt_text_queue7getcharEv>
    1774:	68 2f       	mov	r22, r24
    1776:	f7 01       	movw	r30, r14
    1778:	86 81       	ldd	r24, Z+6	; 0x06
    177a:	97 81       	ldd	r25, Z+7	; 0x07
    177c:	f6 01       	movw	r30, r12
    177e:	19 95       	eicall
    1780:	1f c2       	rjmp	.+1086   	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1782:	86 81       	ldd	r24, Z+6	; 0x06
    1784:	97 81       	ldd	r25, Z+7	; 0x07
    1786:	dc 01       	movw	r26, r24
    1788:	ed 91       	ld	r30, X+
    178a:	fc 91       	ld	r31, X
    178c:	04 80       	ldd	r0, Z+4	; 0x04
    178e:	f5 81       	ldd	r31, Z+5	; 0x05
    1790:	e0 2d       	mov	r30, r0
    1792:	19 95       	eicall
    1794:	88 23       	and	r24, r24
    1796:	09 f4       	brne	.+2      	; 0x179a <_ZN9task_user3runEv+0x13a>
    1798:	13 c2       	rjmp	.+1062   	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    179a:	f7 01       	movw	r30, r14
    179c:	86 81       	ldd	r24, Z+6	; 0x06
    179e:	97 81       	ldd	r25, Z+7	; 0x07
    17a0:	dc 01       	movw	r26, r24
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	06 80       	ldd	r0, Z+6	; 0x06
    17a8:	f7 81       	ldd	r31, Z+7	; 0x07
    17aa:	e0 2d       	mov	r30, r0
    17ac:	19 95       	eicall
    17ae:	bc 01       	movw	r22, r24
    17b0:	fc 01       	movw	r30, r24
    17b2:	ff 27       	eor	r31, r31
    17b4:	7b 97       	sbiw	r30, 0x1b	; 27
    17b6:	ec 35       	cpi	r30, 0x5C	; 92
    17b8:	f1 05       	cpc	r31, r1
    17ba:	08 f0       	brcs	.+2      	; 0x17be <_ZN9task_user3runEv+0x15e>
    17bc:	ca c1       	rjmp	.+916    	; 0x1b52 <_ZN9task_user3runEv+0x4f2>
    17be:	88 27       	eor	r24, r24
    17c0:	e7 5f       	subi	r30, 0xF7	; 247
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__tablejump2__>
    17ca:	ce 01       	movw	r24, r28
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    17d2:	bc 01       	movw	r22, r24
    17d4:	f7 01       	movw	r30, r14
    17d6:	86 81       	ldd	r24, Z+6	; 0x06
    17d8:	97 81       	ldd	r25, Z+7	; 0x07
    17da:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZlsR8emstreamR10time_stamp>
    17de:	66 e0       	ldi	r22, 0x06	; 6
    17e0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    17e4:	ed c1       	rjmp	.+986    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    17e6:	1f 82       	std	Y+7, r1	; 0x07
    17e8:	18 86       	std	Y+8, r1	; 0x08
    17ea:	19 86       	std	Y+9, r1	; 0x09
    17ec:	1a 86       	std	Y+10, r1	; 0x0a
    17ee:	1b 86       	std	Y+11, r1	; 0x0b
    17f0:	1c 86       	std	Y+12, r1	; 0x0c
    17f2:	0e 94 25 14 	call	0x284a	; 0x284a <xPortGetFreeHeapSize>
    17f6:	3c 01       	movw	r6, r24
    17f8:	ce 01       	movw	r24, r28
    17fa:	07 96       	adiw	r24, 0x07	; 7
    17fc:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN10time_stamp10set_to_nowEv>
    1800:	2c 01       	movw	r4, r24
    1802:	66 e0       	ldi	r22, 0x06	; 6
    1804:	d7 01       	movw	r26, r14
    1806:	16 96       	adiw	r26, 0x06	; 6
    1808:	8d 91       	ld	r24, X+
    180a:	9c 91       	ld	r25, X
    180c:	17 97       	sbiw	r26, 0x07	; 7
    180e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1812:	6a e0       	ldi	r22, 0x0A	; 10
    1814:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1818:	6c 01       	movw	r12, r24
    181a:	60 e1       	ldi	r22, 0x10	; 16
    181c:	74 e0       	ldi	r23, 0x04	; 4
    181e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1822:	6a e0       	ldi	r22, 0x0A	; 10
    1824:	c6 01       	movw	r24, r12
    1826:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    182a:	6c 01       	movw	r12, r24
    182c:	64 e0       	ldi	r22, 0x04	; 4
    182e:	74 e0       	ldi	r23, 0x04	; 4
    1830:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1834:	66 e0       	ldi	r22, 0x06	; 6
    1836:	c6 01       	movw	r24, r12
    1838:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    183c:	6a e0       	ldi	r22, 0x0A	; 10
    183e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1842:	6c 01       	movw	r12, r24
    1844:	6d ef       	ldi	r22, 0xFD	; 253
    1846:	73 e0       	ldi	r23, 0x03	; 3
    1848:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    184c:	b2 01       	movw	r22, r4
    184e:	c6 01       	movw	r24, r12
    1850:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZlsR8emstreamR10time_stamp>
    1854:	6a e0       	ldi	r22, 0x0A	; 10
    1856:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    185a:	6c 01       	movw	r12, r24
    185c:	6f ee       	ldi	r22, 0xEF	; 239
    185e:	73 e0       	ldi	r23, 0x03	; 3
    1860:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1864:	b3 01       	movw	r22, r6
    1866:	c6 01       	movw	r24, r12
    1868:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    186c:	6a e0       	ldi	r22, 0x0A	; 10
    186e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1872:	6c 01       	movw	r12, r24
    1874:	6d ee       	ldi	r22, 0xED	; 237
    1876:	73 e0       	ldi	r23, 0x03	; 3
    1878:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    187c:	4f ef       	ldi	r20, 0xFF	; 255
    187e:	5f e0       	ldi	r21, 0x0F	; 15
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	c6 01       	movw	r24, r12
    1886:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN8emstreamlsEm>
    188a:	f4 01       	movw	r30, r8
    188c:	60 a4       	ldd	r6, Z+40	; 0x28
    188e:	71 a4       	ldd	r7, Z+41	; 0x29
    1890:	6a e0       	ldi	r22, 0x0A	; 10
    1892:	d7 01       	movw	r26, r14
    1894:	16 96       	adiw	r26, 0x06	; 6
    1896:	8d 91       	ld	r24, X+
    1898:	9c 91       	ld	r25, X
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18a0:	6c 01       	movw	r12, r24
    18a2:	62 ee       	ldi	r22, 0xE2	; 226
    18a4:	73 e0       	ldi	r23, 0x03	; 3
    18a6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    18aa:	b3 01       	movw	r22, r6
    18ac:	c6 01       	movw	r24, r12
    18ae:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    18b2:	66 e0       	ldi	r22, 0x06	; 6
    18b4:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18b8:	66 e0       	ldi	r22, 0x06	; 6
    18ba:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18be:	f7 01       	movw	r30, r14
    18c0:	c6 80       	ldd	r12, Z+6	; 0x06
    18c2:	d7 80       	ldd	r13, Z+7	; 0x07
    18c4:	6a e0       	ldi	r22, 0x0A	; 10
    18c6:	c6 01       	movw	r24, r12
    18c8:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18cc:	3c 01       	movw	r6, r24
    18ce:	67 ed       	ldi	r22, 0xD7	; 215
    18d0:	73 e0       	ldi	r23, 0x03	; 3
    18d2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    18d6:	6a e0       	ldi	r22, 0x0A	; 10
    18d8:	c3 01       	movw	r24, r6
    18da:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18de:	3c 01       	movw	r6, r24
    18e0:	60 ed       	ldi	r22, 0xD0	; 208
    18e2:	73 e0       	ldi	r23, 0x03	; 3
    18e4:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    18e8:	66 e0       	ldi	r22, 0x06	; 6
    18ea:	c3 01       	movw	r24, r6
    18ec:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18f0:	6a e0       	ldi	r22, 0x0A	; 10
    18f2:	c6 01       	movw	r24, r12
    18f4:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    18f8:	3c 01       	movw	r6, r24
    18fa:	6f eb       	ldi	r22, 0xBF	; 191
    18fc:	73 e0       	ldi	r23, 0x03	; 3
    18fe:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1902:	6a e0       	ldi	r22, 0x0A	; 10
    1904:	c3 01       	movw	r24, r6
    1906:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    190a:	3c 01       	movw	r6, r24
    190c:	63 eb       	ldi	r22, 0xB3	; 179
    190e:	73 e0       	ldi	r23, 0x03	; 3
    1910:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1914:	6a e0       	ldi	r22, 0x0A	; 10
    1916:	c3 01       	movw	r24, r6
    1918:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    191c:	3c 01       	movw	r6, r24
    191e:	6d ea       	ldi	r22, 0xAD	; 173
    1920:	73 e0       	ldi	r23, 0x03	; 3
    1922:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1926:	66 e0       	ldi	r22, 0x06	; 6
    1928:	c3 01       	movw	r24, r6
    192a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    192e:	6a e0       	ldi	r22, 0x0A	; 10
    1930:	c6 01       	movw	r24, r12
    1932:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1936:	3c 01       	movw	r6, r24
    1938:	6c e9       	ldi	r22, 0x9C	; 156
    193a:	73 e0       	ldi	r23, 0x03	; 3
    193c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1940:	6a e0       	ldi	r22, 0x0A	; 10
    1942:	c3 01       	movw	r24, r6
    1944:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1948:	3c 01       	movw	r6, r24
    194a:	60 e9       	ldi	r22, 0x90	; 144
    194c:	73 e0       	ldi	r23, 0x03	; 3
    194e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1952:	6a e0       	ldi	r22, 0x0A	; 10
    1954:	c3 01       	movw	r24, r6
    1956:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    195a:	3c 01       	movw	r6, r24
    195c:	6a e8       	ldi	r22, 0x8A	; 138
    195e:	73 e0       	ldi	r23, 0x03	; 3
    1960:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1964:	66 e0       	ldi	r22, 0x06	; 6
    1966:	c3 01       	movw	r24, r6
    1968:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    196c:	d5 01       	movw	r26, r10
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	19 f0       	breq	.+6      	; 0x197c <_ZN9task_user3runEv+0x31c>
    1976:	b6 01       	movw	r22, r12
    1978:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN8frt_task20print_status_in_listEP8emstream>
    197c:	0e 94 88 1a 	call	0x3510	; 0x3510 <xTaskGetIdleTaskHandle>
    1980:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <uxTaskGetStackHighWaterMark>
    1984:	08 2f       	mov	r16, r24
    1986:	6a e0       	ldi	r22, 0x0A	; 10
    1988:	c6 01       	movw	r24, r12
    198a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    198e:	6c 01       	movw	r12, r24
    1990:	6f e7       	ldi	r22, 0x7F	; 127
    1992:	73 e0       	ldi	r23, 0x03	; 3
    1994:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1998:	60 2f       	mov	r22, r16
    199a:	c6 01       	movw	r24, r12
    199c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN8emstreamlsEh>
    19a0:	6a e0       	ldi	r22, 0x0A	; 10
    19a2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    19a6:	6c 01       	movw	r12, r24
    19a8:	6d e7       	ldi	r22, 0x7D	; 125
    19aa:	73 e0       	ldi	r23, 0x03	; 3
    19ac:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    19b0:	64 e6       	ldi	r22, 0x64	; 100
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	c6 01       	movw	r24, r12
    19b6:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    19ba:	6a e0       	ldi	r22, 0x0A	; 10
    19bc:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    19c0:	6c 01       	movw	r12, r24
    19c2:	6a e7       	ldi	r22, 0x7A	; 122
    19c4:	73 e0       	ldi	r23, 0x03	; 3
    19c6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    19ca:	66 e0       	ldi	r22, 0x06	; 6
    19cc:	c6 01       	movw	r24, r12
    19ce:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    19d2:	f6 c0       	rjmp	.+492    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    19d4:	f7 01       	movw	r30, r14
    19d6:	c6 80       	ldd	r12, Z+6	; 0x06
    19d8:	d7 80       	ldd	r13, Z+7	; 0x07
    19da:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <last_created_task_pointer>
    19de:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <last_created_task_pointer+0x1>
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	19 f0       	breq	.+6      	; 0x19ec <_ZN9task_user3runEv+0x38c>
    19e6:	b6 01       	movw	r22, r12
    19e8:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN8frt_task19print_stack_in_listEP8emstream>
    19ec:	6a e0       	ldi	r22, 0x0A	; 10
    19ee:	c6 01       	movw	r24, r12
    19f0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    19f4:	3c 01       	movw	r6, r24
    19f6:	60 e4       	ldi	r22, 0x40	; 64
    19f8:	74 e0       	ldi	r23, 0x04	; 4
    19fa:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    19fe:	6a e0       	ldi	r22, 0x0A	; 10
    1a00:	c3 01       	movw	r24, r6
    1a02:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a06:	3c 01       	movw	r6, r24
    1a08:	65 e3       	ldi	r22, 0x35	; 53
    1a0a:	74 e0       	ldi	r23, 0x04	; 4
    1a0c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1a10:	6a e0       	ldi	r22, 0x0A	; 10
    1a12:	c3 01       	movw	r24, r6
    1a14:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a18:	3c 01       	movw	r6, r24
    1a1a:	6f e2       	ldi	r22, 0x2F	; 47
    1a1c:	74 e0       	ldi	r23, 0x04	; 4
    1a1e:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1a22:	66 e0       	ldi	r22, 0x06	; 6
    1a24:	c3 01       	movw	r24, r6
    1a26:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a2a:	80 91 78 31 	lds	r24, 0x3178	; 0x803178 <portStackTopForTask>
    1a2e:	90 91 79 31 	lds	r25, 0x3179	; 0x803179 <portStackTopForTask+0x1>
    1a32:	bc 01       	movw	r22, r24
    1a34:	6f 5f       	subi	r22, 0xFF	; 255
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	01 e1       	ldi	r16, 0x11	; 17
    1a3a:	21 2f       	mov	r18, r17
    1a3c:	a6 01       	movw	r20, r12
    1a3e:	83 56       	subi	r24, 0x63	; 99
    1a40:	91 09       	sbc	r25, r1
    1a42:	0e 94 32 08 	call	0x1064	; 0x1064 <_Z15hex_dump_memoryPhS_P8emstreambh>
    1a46:	bc c0       	rjmp	.+376    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1a48:	c7 01       	movw	r24, r14
    1a4a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN9task_user18print_help_messageEv>
    1a4e:	b8 c0       	rjmp	.+368    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1a50:	6a e0       	ldi	r22, 0x0A	; 10
    1a52:	d7 01       	movw	r26, r14
    1a54:	16 96       	adiw	r26, 0x06	; 6
    1a56:	8d 91       	ld	r24, X+
    1a58:	9c 91       	ld	r25, X
    1a5a:	17 97       	sbiw	r26, 0x07	; 7
    1a5c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a60:	6c 01       	movw	r12, r24
    1a62:	6d eb       	ldi	r22, 0xBD	; 189
    1a64:	74 e0       	ldi	r23, 0x04	; 4
    1a66:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1a6a:	66 e0       	ldi	r22, 0x06	; 6
    1a6c:	c6 01       	movw	r24, r12
    1a6e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a72:	f7 01       	movw	r30, r14
    1a74:	14 86       	std	Z+12, r1	; 0x0c
    1a76:	15 86       	std	Z+13, r1	; 0x0d
    1a78:	a3 c0       	rjmp	.+326    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1a7a:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <begin>
    1a7e:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <begin+0x1>
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
    1a88:	10 83       	st	Z, r17
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	6a e0       	ldi	r22, 0x0A	; 10
    1a90:	d7 01       	movw	r26, r14
    1a92:	16 96       	adiw	r26, 0x06	; 6
    1a94:	8d 91       	ld	r24, X+
    1a96:	9c 91       	ld	r25, X
    1a98:	17 97       	sbiw	r26, 0x07	; 7
    1a9a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1a9e:	6c 01       	movw	r12, r24
    1aa0:	60 eb       	ldi	r22, 0xB0	; 176
    1aa2:	74 e0       	ldi	r23, 0x04	; 4
    1aa4:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1aa8:	66 e0       	ldi	r22, 0x06	; 6
    1aaa:	c6 01       	movw	r24, r12
    1aac:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1ab0:	87 c0       	rjmp	.+270    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1ab2:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <go>
    1ab6:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <go+0x1>
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	0f 92       	push	r0
    1ac0:	10 83       	st	Z, r17
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	6a e0       	ldi	r22, 0x0A	; 10
    1ac8:	f7 01       	movw	r30, r14
    1aca:	86 81       	ldd	r24, Z+6	; 0x06
    1acc:	97 81       	ldd	r25, Z+7	; 0x07
    1ace:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1ad2:	6c 01       	movw	r12, r24
    1ad4:	6f e9       	ldi	r22, 0x9F	; 159
    1ad6:	74 e0       	ldi	r23, 0x04	; 4
    1ad8:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1adc:	66 e0       	ldi	r22, 0x06	; 6
    1ade:	c6 01       	movw	r24, r12
    1ae0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1ae4:	6d c0       	rjmp	.+218    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1ae6:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <stop>
    1aea:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <stop+0x1>
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	0f 92       	push	r0
    1af4:	10 83       	st	Z, r17
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	6a e0       	ldi	r22, 0x0A	; 10
    1afc:	d7 01       	movw	r26, r14
    1afe:	16 96       	adiw	r26, 0x06	; 6
    1b00:	8d 91       	ld	r24, X+
    1b02:	9c 91       	ld	r25, X
    1b04:	17 97       	sbiw	r26, 0x07	; 7
    1b06:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b0a:	6c 01       	movw	r12, r24
    1b0c:	60 e9       	ldi	r22, 0x90	; 144
    1b0e:	74 e0       	ldi	r23, 0x04	; 4
    1b10:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1b14:	66 e0       	ldi	r22, 0x06	; 6
    1b16:	c6 01       	movw	r24, r12
    1b18:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b1c:	51 c0       	rjmp	.+162    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1b1e:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <reset>
    1b22:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <reset+0x1>
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	0f 92       	push	r0
    1b2c:	10 83       	st	Z, r17
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	6a e0       	ldi	r22, 0x0A	; 10
    1b34:	f7 01       	movw	r30, r14
    1b36:	86 81       	ldd	r24, Z+6	; 0x06
    1b38:	97 81       	ldd	r25, Z+7	; 0x07
    1b3a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b3e:	6c 01       	movw	r12, r24
    1b40:	68 e6       	ldi	r22, 0x68	; 104
    1b42:	74 e0       	ldi	r23, 0x04	; 4
    1b44:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1b48:	66 e0       	ldi	r22, 0x06	; 6
    1b4a:	c6 01       	movw	r24, r12
    1b4c:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b50:	37 c0       	rjmp	.+110    	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1b52:	d7 01       	movw	r26, r14
    1b54:	16 96       	adiw	r26, 0x06	; 6
    1b56:	8d 91       	ld	r24, X+
    1b58:	9c 91       	ld	r25, X
    1b5a:	17 97       	sbiw	r26, 0x07	; 7
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	02 80       	ldd	r0, Z+2	; 0x02
    1b64:	f3 81       	ldd	r31, Z+3	; 0x03
    1b66:	e0 2d       	mov	r30, r0
    1b68:	19 95       	eicall
    1b6a:	6a e0       	ldi	r22, 0x0A	; 10
    1b6c:	f7 01       	movw	r30, r14
    1b6e:	86 81       	ldd	r24, Z+6	; 0x06
    1b70:	97 81       	ldd	r25, Z+7	; 0x07
    1b72:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b76:	6c 01       	movw	r12, r24
    1b78:	62 e6       	ldi	r22, 0x62	; 98
    1b7a:	74 e0       	ldi	r23, 0x04	; 4
    1b7c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1b80:	66 e0       	ldi	r22, 0x06	; 6
    1b82:	c6 01       	movw	r24, r12
    1b84:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b88:	1b c0       	rjmp	.+54     	; 0x1bc0 <_ZN9task_user3runEv+0x560>
    1b8a:	6a e0       	ldi	r22, 0x0A	; 10
    1b8c:	86 81       	ldd	r24, Z+6	; 0x06
    1b8e:	97 81       	ldd	r25, Z+7	; 0x07
    1b90:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1b94:	7c 01       	movw	r14, r24
    1b96:	65 e4       	ldi	r22, 0x45	; 69
    1b98:	74 e0       	ldi	r23, 0x04	; 4
    1b9a:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1b9e:	66 e0       	ldi	r22, 0x06	; 6
    1ba0:	c7 01       	movw	r24, r14
    1ba2:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	88 ed       	ldi	r24, 0xD8	; 216
    1baa:	08 b6       	in	r0, 0x38	; 56
    1bac:	18 be       	out	0x38, r1	; 56
    1bae:	84 bf       	out	0x34, r24	; 52
    1bb0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1bb4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1bb8:	81 fd       	sbrc	r24, 1
    1bba:	fc cf       	rjmp	.-8      	; 0x1bb4 <_ZN9task_user3runEv+0x554>
    1bbc:	08 be       	out	0x38, r0	; 56
    1bbe:	ff cf       	rjmp	.-2      	; 0x1bbe <_ZN9task_user3runEv+0x55e>
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	86 85       	ldd	r24, Z+14	; 0x0e
    1bc4:	97 85       	ldd	r25, Z+15	; 0x0f
    1bc6:	a0 89       	ldd	r26, Z+16	; 0x10
    1bc8:	b1 89       	ldd	r27, Z+17	; 0x11
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	b1 1d       	adc	r27, r1
    1bd0:	86 87       	std	Z+14, r24	; 0x0e
    1bd2:	97 87       	std	Z+15, r25	; 0x0f
    1bd4:	a0 8b       	std	Z+16, r26	; 0x10
    1bd6:	b1 8b       	std	Z+17, r27	; 0x11
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <vTaskDelay>
    1be4:	67 cd       	rjmp	.-1330   	; 0x16b4 <_ZN9task_user3runEv+0x54>

00001be6 <_ZN8frt_taskC2EPKchjP8emstream>:
    1be6:	4f 92       	push	r4
    1be8:	5f 92       	push	r5
    1bea:	6f 92       	push	r6
    1bec:	7f 92       	push	r7
    1bee:	8f 92       	push	r8
    1bf0:	9f 92       	push	r9
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	2a 97       	sbiw	r28, 0x0a	; 10
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	4c 01       	movw	r8, r24
    1c12:	29 01       	movw	r4, r18
    1c14:	38 01       	movw	r6, r16
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	90 e2       	ldi	r25, 0x20	; 32
    1c1a:	f4 01       	movw	r30, r8
    1c1c:	80 83       	st	Z, r24
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	fb 01       	movw	r30, r22
    1c22:	80 81       	ld	r24, Z
    1c24:	88 23       	and	r24, r24
    1c26:	69 f0       	breq	.+26     	; 0x1c42 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    1c28:	de 01       	movw	r26, r28
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	31 96       	adiw	r30, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1c32:	99 30       	cpi	r25, 0x09	; 9
    1c34:	39 f0       	breq	.+14     	; 0x1c44 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1c36:	9f 5f       	subi	r25, 0xFF	; 255
    1c38:	8d 93       	st	X+, r24
    1c3a:	81 91       	ld	r24, Z+
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	f9 cf       	rjmp	.-14     	; 0x1c32 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	e1 e0       	ldi	r30, 0x01	; 1
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	ec 0f       	add	r30, r28
    1c4a:	fd 1f       	adc	r31, r29
    1c4c:	e9 0f       	add	r30, r25
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	10 82       	st	Z, r1
    1c52:	74 01       	movw	r14, r8
    1c54:	f2 e0       	ldi	r31, 0x02	; 2
    1c56:	ef 0e       	add	r14, r31
    1c58:	f1 1c       	adc	r15, r1
    1c5a:	a1 2c       	mov	r10, r1
    1c5c:	b1 2c       	mov	r11, r1
    1c5e:	c1 2c       	mov	r12, r1
    1c60:	d1 2c       	mov	r13, r1
    1c62:	04 2f       	mov	r16, r20
    1c64:	94 01       	movw	r18, r8
    1c66:	a2 01       	movw	r20, r4
    1c68:	be 01       	movw	r22, r28
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	94 e0       	ldi	r25, 0x04	; 4
    1c72:	0e 94 29 19 	call	0x3252	; 0x3252 <xTaskGenericCreate>
    1c76:	f4 01       	movw	r30, r8
    1c78:	66 82       	std	Z+6, r6	; 0x06
    1c7a:	77 82       	std	Z+7, r7	; 0x07
    1c7c:	40 86       	std	Z+8, r4	; 0x08
    1c7e:	51 86       	std	Z+9, r5	; 0x09
    1c80:	20 91 c8 20 	lds	r18, 0x20C8	; 0x8020c8 <last_created_task_pointer>
    1c84:	30 91 c9 20 	lds	r19, 0x20C9	; 0x8020c9 <last_created_task_pointer+0x1>
    1c88:	24 83       	std	Z+4, r18	; 0x04
    1c8a:	35 83       	std	Z+5, r19	; 0x05
    1c8c:	80 92 c8 20 	sts	0x20C8, r8	; 0x8020c8 <last_created_task_pointer>
    1c90:	90 92 c9 20 	sts	0x20C9, r9	; 0x8020c9 <last_created_task_pointer+0x1>
    1c94:	14 86       	std	Z+12, r1	; 0x0c
    1c96:	15 86       	std	Z+13, r1	; 0x0d
    1c98:	40 90 78 31 	lds	r4, 0x3178	; 0x803178 <portStackTopForTask>
    1c9c:	50 90 79 31 	lds	r5, 0x3179	; 0x803179 <portStackTopForTask+0x1>
    1ca0:	ff ef       	ldi	r31, 0xFF	; 255
    1ca2:	4f 1a       	sub	r4, r31
    1ca4:	5f 0a       	sbc	r5, r31
    1ca6:	40 92 78 31 	sts	0x3178, r4	; 0x803178 <portStackTopForTask>
    1caa:	50 92 79 31 	sts	0x3179, r5	; 0x803179 <portStackTopForTask+0x1>
    1cae:	f4 01       	movw	r30, r8
    1cb0:	42 86       	std	Z+10, r4	; 0x0a
    1cb2:	53 86       	std	Z+11, r5	; 0x0b
    1cb4:	16 86       	std	Z+14, r1	; 0x0e
    1cb6:	17 86       	std	Z+15, r1	; 0x0f
    1cb8:	10 8a       	std	Z+16, r1	; 0x10
    1cba:	11 8a       	std	Z+17, r1	; 0x11
    1cbc:	61 14       	cp	r6, r1
    1cbe:	71 04       	cpc	r7, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    1cc2:	44 c0       	rjmp	.+136    	; 0x1d4c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	79 f5       	brne	.+94     	; 0x1d26 <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    1cc8:	6a e0       	ldi	r22, 0x0A	; 10
    1cca:	c3 01       	movw	r24, r6
    1ccc:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1cd0:	7c 01       	movw	r14, r24
    1cd2:	65 e9       	ldi	r22, 0x95	; 149
    1cd4:	76 e0       	ldi	r23, 0x06	; 6
    1cd6:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1cda:	be 01       	movw	r22, r28
    1cdc:	6f 5f       	subi	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1ce6:	6a e0       	ldi	r22, 0x0A	; 10
    1ce8:	c7 01       	movw	r24, r14
    1cea:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1cee:	7c 01       	movw	r14, r24
    1cf0:	6c e8       	ldi	r22, 0x8C	; 140
    1cf2:	76 e0       	ldi	r23, 0x06	; 6
    1cf4:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1cf8:	6a e0       	ldi	r22, 0x0A	; 10
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d00:	7c 01       	movw	r14, r24
    1d02:	6e e7       	ldi	r22, 0x7E	; 126
    1d04:	76 e0       	ldi	r23, 0x06	; 6
    1d06:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1d0a:	63 e0       	ldi	r22, 0x03	; 3
    1d0c:	c7 01       	movw	r24, r14
    1d0e:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d12:	b2 01       	movw	r22, r4
    1d14:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN8emstreamlsEj>
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d1e:	66 e0       	ldi	r22, 0x06	; 6
    1d20:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d24:	13 c0       	rjmp	.+38     	; 0x1d4c <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    1d26:	6a e0       	ldi	r22, 0x0A	; 10
    1d28:	c3 01       	movw	r24, r6
    1d2a:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d2e:	4c 01       	movw	r8, r24
    1d30:	69 e6       	ldi	r22, 0x69	; 105
    1d32:	76 e0       	ldi	r23, 0x06	; 6
    1d34:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1d38:	be 01       	movw	r22, r28
    1d3a:	6f 5f       	subi	r22, 0xFF	; 255
    1d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3e:	c4 01       	movw	r24, r8
    1d40:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	c4 01       	movw	r24, r8
    1d48:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    1d4c:	2a 96       	adiw	r28, 0x0a	; 10
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	08 95       	ret

00001d74 <_ZN5rs23212clear_screenEv>:
    1d74:	dc 01       	movw	r26, r24
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	02 80       	ldd	r0, Z+2	; 0x02
    1d7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d7e:	e0 2d       	mov	r30, r0
    1d80:	6c e0       	ldi	r22, 0x0C	; 12
    1d82:	19 95       	eicall
    1d84:	08 95       	ret

00001d86 <_ZN5rs23214check_for_charEv>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d8e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d90:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d92:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	4d 91       	ld	r20, X+
    1d98:	5c 91       	ld	r21, X
    1d9a:	20 81       	ld	r18, Z
    1d9c:	31 81       	ldd	r19, Z+1	; 0x01
    1d9e:	42 17       	cp	r20, r18
    1da0:	53 07       	cpc	r21, r19
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_ZN5rs23214check_for_charEv+0x20>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <_ZN5rs2327getcharEv>:
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	fc 01       	movw	r30, r24
    1db2:	c1 8d       	ldd	r28, Z+25	; 0x19
    1db4:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1db6:	28 81       	ld	r18, Y
    1db8:	39 81       	ldd	r19, Y+1	; 0x01
    1dba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1dbc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1dbe:	4d 91       	ld	r20, X+
    1dc0:	5c 91       	ld	r21, X
    1dc2:	24 17       	cp	r18, r20
    1dc4:	35 07       	cpc	r19, r21
    1dc6:	e9 f3       	breq	.-6      	; 0x1dc2 <_ZN5rs2327getcharEv+0x16>
    1dc8:	a7 89       	ldd	r26, Z+23	; 0x17
    1dca:	b0 8d       	ldd	r27, Z+24	; 0x18
    1dcc:	0d 90       	ld	r0, X+
    1dce:	bc 91       	ld	r27, X
    1dd0:	a0 2d       	mov	r26, r0
    1dd2:	a2 0f       	add	r26, r18
    1dd4:	b3 1f       	adc	r27, r19
    1dd6:	8c 91       	ld	r24, X
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	28 83       	st	Y, r18
    1dde:	39 83       	std	Y+1, r19	; 0x01
    1de0:	24 36       	cpi	r18, 0x64	; 100
    1de2:	31 05       	cpc	r19, r1
    1de4:	28 f0       	brcs	.+10     	; 0x1df0 <_ZN5rs2327getcharEv+0x44>
    1de6:	01 8c       	ldd	r0, Z+25	; 0x19
    1de8:	f2 8d       	ldd	r31, Z+26	; 0x1a
    1dea:	e0 2d       	mov	r30, r0
    1dec:	10 82       	st	Z, r1
    1dee:	11 82       	std	Z+1, r1	; 0x01
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <_ZN5rs2327putcharEc>:
    1df8:	dc 01       	movw	r26, r24
    1dfa:	50 96       	adiw	r26, 0x10	; 16
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	51 97       	sbiw	r26, 0x11	; 17
    1e02:	80 81       	ld	r24, Z
    1e04:	54 96       	adiw	r26, 0x14	; 20
    1e06:	4c 91       	ld	r20, X
    1e08:	54 97       	sbiw	r26, 0x14	; 20
    1e0a:	84 23       	and	r24, r20
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <_ZN5rs2327putcharEc+0x20>
    1e0e:	09 c0       	rjmp	.+18     	; 0x1e22 <_ZN5rs2327putcharEc+0x2a>
    1e10:	21 50       	subi	r18, 0x01	; 1
    1e12:	31 09       	sbc	r19, r1
    1e14:	19 f4       	brne	.+6      	; 0x1e1c <_ZN5rs2327putcharEc+0x24>
    1e16:	12 c0       	rjmp	.+36     	; 0x1e3c <_ZN5rs2327putcharEc+0x44>
    1e18:	21 e2       	ldi	r18, 0x21	; 33
    1e1a:	3e e4       	ldi	r19, 0x4E	; 78
    1e1c:	90 81       	ld	r25, Z
    1e1e:	94 23       	and	r25, r20
    1e20:	b9 f3       	breq	.-18     	; 0x1e10 <_ZN5rs2327putcharEc+0x18>
    1e22:	90 81       	ld	r25, Z
    1e24:	56 96       	adiw	r26, 0x16	; 22
    1e26:	8c 91       	ld	r24, X
    1e28:	56 97       	sbiw	r26, 0x16	; 22
    1e2a:	89 2b       	or	r24, r25
    1e2c:	80 83       	st	Z, r24
    1e2e:	1e 96       	adiw	r26, 0x0e	; 14
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	1f 97       	sbiw	r26, 0x0f	; 15
    1e36:	60 83       	st	Z, r22
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	08 95       	ret
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	08 95       	ret

00001e40 <_GLOBAL__sub_I_counter>:
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	c0 ee       	ldi	r28, 0xE0	; 224
    1e46:	d0 e2       	ldi	r29, 0x20	; 32
    1e48:	8a e0       	ldi	r24, 0x0A	; 10
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	1b 82       	std	Y+3, r1	; 0x03
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	1c 82       	std	Y+4, r1	; 0x04
    1e54:	1e 82       	std	Y+6, r1	; 0x06
    1e56:	1f 82       	std	Y+7, r1	; 0x07
    1e58:	82 e6       	ldi	r24, 0x62	; 98
    1e5a:	90 e2       	ldi	r25, 0x20	; 32
    1e5c:	88 83       	st	Y, r24
    1e5e:	99 83       	std	Y+1, r25	; 0x01
    1e60:	1e 86       	std	Y+14, r1	; 0x0e
    1e62:	1f 86       	std	Y+15, r1	; 0x0f
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	80 e2       	ldi	r24, 0x20	; 32
    1e6a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xQueueGenericCreate>
    1e6e:	88 87       	std	Y+8, r24	; 0x08
    1e70:	99 87       	std	Y+9, r25	; 0x09
    1e72:	8a e0       	ldi	r24, 0x0A	; 10
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	8a 87       	std	Y+10, r24	; 0x0a
    1e7c:	9b 87       	std	Y+11, r25	; 0x0b
    1e7e:	ac 87       	std	Y+12, r26	; 0x0c
    1e80:	bd 87       	std	Y+13, r27	; 0x0d
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <main>:
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	6e 97       	sbiw	r28, 0x1e	; 30
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	e0 e6       	ldi	r30, 0x60	; 96
    1ea6:	f6 e0       	ldi	r31, 0x06	; 6
    1ea8:	80 e1       	ldi	r24, 0x10	; 16
    1eaa:	81 83       	std	Z+1, r24	; 0x01
    1eac:	85 83       	std	Z+5, r24	; 0x05
    1eae:	f8 94       	cli
    1eb0:	e0 e5       	ldi	r30, 0x50	; 80
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	82 60       	ori	r24, 0x02	; 2
    1eb8:	80 83       	st	Z, r24
    1eba:	81 81       	ldd	r24, Z+1	; 0x01
    1ebc:	81 ff       	sbrs	r24, 1
    1ebe:	fd cf       	rjmp	.-6      	; 0x1eba <main+0x32>
    1ec0:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1ec4:	9f b7       	in	r25, 0x3f	; 63
    1ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec8:	f8 94       	cli
    1eca:	1b be       	out	0x3b, r1	; 59
    1ecc:	88 7f       	andi	r24, 0xF8	; 248
    1ece:	81 60       	ori	r24, 0x01	; 1
    1ed0:	20 e4       	ldi	r18, 0x40	; 64
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	08 ed       	ldi	r16, 0xD8	; 216
    1ed8:	04 bf       	out	0x34, r16	; 52
    1eda:	80 83       	st	Z, r24
    1edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ede:	8f bf       	out	0x3f, r24	; 63
    1ee0:	e0 e5       	ldi	r30, 0x50	; 80
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8e 7f       	andi	r24, 0xFE	; 254
    1ee8:	80 83       	st	Z, r24
    1eea:	9d ef       	ldi	r25, 0xFD	; 253
    1eec:	88 ed       	ldi	r24, 0xD8	; 216
    1eee:	08 b6       	in	r0, 0x38	; 56
    1ef0:	18 be       	out	0x38, r1	; 56
    1ef2:	84 bf       	out	0x34, r24	; 52
    1ef4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1ef8:	08 be       	out	0x38, r0	; 56
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f02:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <leftLimitSwitch>
    1f06:	90 93 df 20 	sts	0x20DF, r25	; 0x8020df <leftLimitSwitch+0x1>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f12:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <rightLimitSwitch>
    1f16:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <rightLimitSwitch+0x1>
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f22:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <linear_position>
    1f26:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <linear_position+0x1>
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f3a:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <thdMotor>
    1f3e:	90 93 d9 20 	sts	0x20D9, r25	; 0x8020d9 <thdMotor+0x1>
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f4a:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <pendulum_encoder>
    1f4e:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <pendulum_encoder+0x1>
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f5a:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <linear_offset>
    1f5e:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <linear_offset+0x1>
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f6a:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <motor_command>
    1f6e:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <motor_command+0x1>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f7a:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <begin>
    1f7e:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <begin+0x1>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f8a:	80 93 ce 20 	sts	0x20CE, r24	; 0x8020ce <go>
    1f8e:	90 93 cf 20 	sts	0x20CF, r25	; 0x8020cf <go+0x1>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1f9a:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <stop>
    1f9e:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <stop+0x1>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    1faa:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <reset>
    1fae:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <reset+0x1>
    1fb2:	82 e5       	ldi	r24, 0x52	; 82
    1fb4:	90 e2       	ldi	r25, 0x20	; 32
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	8a e0       	ldi	r24, 0x0A	; 10
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
    1fbe:	1c 82       	std	Y+4, r1	; 0x04
    1fc0:	43 e0       	ldi	r20, 0x03	; 3
    1fc2:	4e 83       	std	Y+6, r20	; 0x06
    1fc4:	1d 82       	std	Y+5, r1	; 0x05
    1fc6:	1f 82       	std	Y+7, r1	; 0x07
    1fc8:	18 86       	std	Y+8, r1	; 0x08
    1fca:	a0 e4       	ldi	r26, 0x40	; 64
    1fcc:	b6 e0       	ldi	r27, 0x06	; 6
    1fce:	ab 87       	std	Y+11, r26	; 0x0b
    1fd0:	bc 87       	std	Y+12, r27	; 0x0c
    1fd2:	86 e0       	ldi	r24, 0x06	; 6
    1fd4:	8d 87       	std	Y+13, r24	; 0x0d
    1fd6:	0f 2e       	mov	r0, r31
    1fd8:	f7 e0       	ldi	r31, 0x07	; 7
    1fda:	df 2e       	mov	r13, r31
    1fdc:	f0 2d       	mov	r31, r0
    1fde:	de 86       	std	Y+14, r13	; 0x0e
    1fe0:	e0 eb       	ldi	r30, 0xB0	; 176
    1fe2:	f8 e0       	ldi	r31, 0x08	; 8
    1fe4:	ef 87       	std	Y+15, r30	; 0x0f
    1fe6:	f8 8b       	std	Y+16, r31	; 0x10
    1fe8:	81 eb       	ldi	r24, 0xB1	; 177
    1fea:	98 e0       	ldi	r25, 0x08	; 8
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	9a 8b       	std	Y+18, r25	; 0x12
    1ff0:	84 eb       	ldi	r24, 0xB4	; 180
    1ff2:	98 e0       	ldi	r25, 0x08	; 8
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	9c 8b       	std	Y+20, r25	; 0x14
    1ff8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ffa:	14 96       	adiw	r26, 0x04	; 4
    1ffc:	5c 91       	ld	r21, X
    1ffe:	14 97       	sbiw	r26, 0x04	; 4
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	bc 01       	movw	r22, r24
    2006:	02 c0       	rjmp	.+4      	; 0x200c <main+0x184>
    2008:	66 0f       	add	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	2a 95       	dec	r18
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <main+0x180>
    2010:	9b 01       	movw	r18, r22
    2012:	25 2b       	or	r18, r21
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	2c 93       	st	X, r18
    2018:	2e 85       	ldd	r18, Y+14	; 0x0e
    201a:	ab 85       	ldd	r26, Y+11	; 0x0b
    201c:	bc 85       	ldd	r27, Y+12	; 0x0c
    201e:	5c 91       	ld	r21, X
    2020:	bc 01       	movw	r22, r24
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <main+0x1a0>
    2024:	66 0f       	add	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	2a 95       	dec	r18
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <main+0x19c>
    202c:	9b 01       	movw	r18, r22
    202e:	25 2b       	or	r18, r21
    2030:	2c 93       	st	X, r18
    2032:	3d 85       	ldd	r19, Y+13	; 0x0d
    2034:	ab 85       	ldd	r26, Y+11	; 0x0b
    2036:	bc 85       	ldd	r27, Y+12	; 0x0c
    2038:	2c 91       	ld	r18, X
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <main+0x1b8>
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	3a 95       	dec	r19
    2042:	e2 f7       	brpl	.-8      	; 0x203c <main+0x1b4>
    2044:	80 95       	com	r24
    2046:	90 95       	com	r25
    2048:	82 23       	and	r24, r18
    204a:	8c 93       	st	X, r24
    204c:	80 e1       	ldi	r24, 0x10	; 16
    204e:	83 83       	std	Z+3, r24	; 0x03
    2050:	45 83       	std	Z+5, r20	; 0x05
    2052:	80 ef       	ldi	r24, 0xF0	; 240
    2054:	87 83       	std	Z+7, r24	; 0x07
    2056:	81 e2       	ldi	r24, 0x21	; 33
    2058:	86 83       	std	Z+6, r24	; 0x06
    205a:	88 e1       	ldi	r24, 0x18	; 24
    205c:	84 83       	std	Z+4, r24	; 0x04
    205e:	80 e8       	ldi	r24, 0x80	; 128
    2060:	8e 8b       	std	Y+22, r24	; 0x16
    2062:	80 e4       	ldi	r24, 0x40	; 64
    2064:	8f 8b       	std	Y+23, r24	; 0x17
    2066:	80 e2       	ldi	r24, 0x20	; 32
    2068:	8d 8b       	std	Y+21, r24	; 0x15
    206a:	ef 85       	ldd	r30, Y+15	; 0x0f
    206c:	f8 89       	ldd	r31, Y+16	; 0x10
    206e:	80 81       	ld	r24, Z
    2070:	80 81       	ld	r24, Z
    2072:	82 e1       	ldi	r24, 0x12	; 18
    2074:	90 e2       	ldi	r25, 0x20	; 32
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	86 e0       	ldi	r24, 0x06	; 6
    207c:	91 e2       	ldi	r25, 0x21	; 33
    207e:	88 8f       	std	Y+24, r24	; 0x18
    2080:	99 8f       	std	Y+25, r25	; 0x19
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	91 e2       	ldi	r25, 0x21	; 33
    2086:	8a 8f       	std	Y+26, r24	; 0x1a
    2088:	9b 8f       	std	Y+27, r25	; 0x1b
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	91 e2       	ldi	r25, 0x21	; 33
    208e:	8c 8f       	std	Y+28, r24	; 0x1c
    2090:	9d 8f       	std	Y+29, r25	; 0x1d
    2092:	84 e6       	ldi	r24, 0x64	; 100
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    209a:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <rcvC1_buffer>
    209e:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <rcvC1_buffer+0x1>
    20a2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    20a4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    20a6:	10 82       	st	Z, r1
    20a8:	11 82       	std	Z+1, r1	; 0x01
    20aa:	ec 8d       	ldd	r30, Y+28	; 0x1c
    20ac:	fd 8d       	ldd	r31, Y+29	; 0x1d
    20ae:	10 82       	st	Z, r1
    20b0:	11 82       	std	Z+1, r1	; 0x01
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    20bc:	7c 01       	movw	r14, r24
    20be:	6e e6       	ldi	r22, 0x6E	; 110
    20c0:	70 e2       	ldi	r23, 0x20	; 32
    20c2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    20c6:	66 e0       	ldi	r22, 0x06	; 6
    20c8:	c7 01       	movw	r24, r14
    20ca:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    20ce:	66 e0       	ldi	r22, 0x06	; 6
    20d0:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8emstreamlsE15ser_manipulator>
    20d4:	82 e1       	ldi	r24, 0x12	; 18
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    20dc:	7c 01       	movw	r14, r24
    20de:	8e 01       	movw	r16, r28
    20e0:	0f 5f       	subi	r16, 0xFF	; 255
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	24 e0       	ldi	r18, 0x04	; 4
    20e6:	31 e0       	ldi	r19, 0x01	; 1
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	6d e8       	ldi	r22, 0x8D	; 141
    20ec:	70 e2       	ldi	r23, 0x20	; 32
    20ee:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    20f2:	82 e2       	ldi	r24, 0x22	; 34
    20f4:	90 e2       	ldi	r25, 0x20	; 32
    20f6:	f7 01       	movw	r30, r14
    20f8:	80 83       	st	Z, r24
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	83 e1       	ldi	r24, 0x13	; 19
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2104:	7c 01       	movw	r14, r24
    2106:	24 e0       	ldi	r18, 0x04	; 4
    2108:	31 e0       	ldi	r19, 0x01	; 1
    210a:	44 e0       	ldi	r20, 0x04	; 4
    210c:	65 e9       	ldi	r22, 0x95	; 149
    210e:	70 e2       	ldi	r23, 0x20	; 32
    2110:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    2114:	0f 2e       	mov	r0, r31
    2116:	fa e2       	ldi	r31, 0x2A	; 42
    2118:	af 2e       	mov	r10, r31
    211a:	f0 e2       	ldi	r31, 0x20	; 32
    211c:	bf 2e       	mov	r11, r31
    211e:	f0 2d       	mov	r31, r0
    2120:	f7 01       	movw	r30, r14
    2122:	a0 82       	st	Z, r10
    2124:	b1 82       	std	Z+1, r11	; 0x01
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	82 8b       	std	Z+18, r24	; 0x12
    212a:	83 e1       	ldi	r24, 0x13	; 19
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2132:	7c 01       	movw	r14, r24
    2134:	24 e0       	ldi	r18, 0x04	; 4
    2136:	31 e0       	ldi	r19, 0x01	; 1
    2138:	44 e0       	ldi	r20, 0x04	; 4
    213a:	6c e9       	ldi	r22, 0x9C	; 156
    213c:	70 e2       	ldi	r23, 0x20	; 32
    213e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    2142:	f7 01       	movw	r30, r14
    2144:	a0 82       	st	Z, r10
    2146:	b1 82       	std	Z+1, r11	; 0x01
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	82 8b       	std	Z+18, r24	; 0x12
    214c:	82 e1       	ldi	r24, 0x12	; 18
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2154:	7c 01       	movw	r14, r24
    2156:	24 e0       	ldi	r18, 0x04	; 4
    2158:	31 e0       	ldi	r19, 0x01	; 1
    215a:	44 e0       	ldi	r20, 0x04	; 4
    215c:	64 ea       	ldi	r22, 0xA4	; 164
    215e:	70 e2       	ldi	r23, 0x20	; 32
    2160:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    2164:	82 e3       	ldi	r24, 0x32	; 50
    2166:	90 e2       	ldi	r25, 0x20	; 32
    2168:	f7 01       	movw	r30, r14
    216a:	80 83       	st	Z, r24
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	82 e1       	ldi	r24, 0x12	; 18
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2176:	7c 01       	movw	r14, r24
    2178:	24 e0       	ldi	r18, 0x04	; 4
    217a:	31 e0       	ldi	r19, 0x01	; 1
    217c:	43 e0       	ldi	r20, 0x03	; 3
    217e:	6b ea       	ldi	r22, 0xAB	; 171
    2180:	70 e2       	ldi	r23, 0x20	; 32
    2182:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    2186:	8a e3       	ldi	r24, 0x3A	; 58
    2188:	90 e2       	ldi	r25, 0x20	; 32
    218a:	f7 01       	movw	r30, r14
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	8a e1       	ldi	r24, 0x1A	; 26
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2198:	7c 01       	movw	r14, r24
    219a:	24 e0       	ldi	r18, 0x04	; 4
    219c:	31 e0       	ldi	r19, 0x01	; 1
    219e:	42 e0       	ldi	r20, 0x02	; 2
    21a0:	62 eb       	ldi	r22, 0xB2	; 178
    21a2:	70 e2       	ldi	r23, 0x20	; 32
    21a4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    21a8:	82 e4       	ldi	r24, 0x42	; 66
    21aa:	90 e2       	ldi	r25, 0x20	; 32
    21ac:	f7 01       	movw	r30, r14
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	86 e6       	ldi	r24, 0x66	; 102
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	80 8f       	std	Z+24, r24	; 0x18
    21b8:	91 8f       	std	Z+25, r25	; 0x19
    21ba:	84 e1       	ldi	r24, 0x14	; 20
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    21c2:	7c 01       	movw	r14, r24
    21c4:	24 e0       	ldi	r18, 0x04	; 4
    21c6:	31 e0       	ldi	r19, 0x01	; 1
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	6a eb       	ldi	r22, 0xBA	; 186
    21cc:	70 e2       	ldi	r23, 0x20	; 32
    21ce:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN8frt_taskC2EPKchjP8emstream>
    21d2:	8a e4       	ldi	r24, 0x4A	; 74
    21d4:	90 e2       	ldi	r25, 0x20	; 32
    21d6:	f7 01       	movw	r30, r14
    21d8:	80 83       	st	Z, r24
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    21e0:	78 94       	sei
    21e2:	0e 94 39 1a 	call	0x3472	; 0x3472 <vTaskStartScheduler>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	6e 96       	adiw	r28, 0x1e	; 30
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	ff 90       	pop	r15
    21fa:	ef 90       	pop	r14
    21fc:	df 90       	pop	r13
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	08 95       	ret

00002204 <__vector_58>:
    2204:	1f 92       	push	r1
    2206:	0f 92       	push	r0
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	0f 92       	push	r0
    220c:	11 24       	eor	r1, r1
    220e:	08 b6       	in	r0, 0x38	; 56
    2210:	0f 92       	push	r0
    2212:	18 be       	out	0x38, r1	; 56
    2214:	0b b6       	in	r0, 0x3b	; 59
    2216:	0f 92       	push	r0
    2218:	1b be       	out	0x3b, r1	; 59
    221a:	2f 93       	push	r18
    221c:	3f 93       	push	r19
    221e:	8f 93       	push	r24
    2220:	9f 93       	push	r25
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    2226:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    222a:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <rcvE0_buffer>
    222e:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <rcvE0_buffer+0x1>
    2232:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <rcvE0_write_index>
    2236:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <rcvE0_write_index+0x1>
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	20 83       	st	Z, r18
    2240:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <rcvE0_write_index>
    2244:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <rcvE0_write_index+0x1>
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	84 36       	cpi	r24, 0x64	; 100
    224c:	91 05       	cpc	r25, r1
    224e:	60 f4       	brcc	.+24     	; 0x2268 <__vector_58+0x64>
    2250:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <rcvE0_write_index>
    2254:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <rcvE0_write_index+0x1>
    2258:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <rcvE0_read_index>
    225c:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <rcvE0_read_index+0x1>
    2260:	82 17       	cp	r24, r18
    2262:	93 07       	cpc	r25, r19
    2264:	f1 f4       	brne	.+60     	; 0x22a2 <__vector_58+0x9e>
    2266:	0c c0       	rjmp	.+24     	; 0x2280 <__vector_58+0x7c>
    2268:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <rcvE0_write_index>
    226c:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <rcvE0_write_index+0x1>
    2270:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <rcvE0_read_index>
    2274:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <rcvE0_read_index+0x1>
    2278:	18 16       	cp	r1, r24
    227a:	19 06       	cpc	r1, r25
    227c:	91 f4       	brne	.+36     	; 0x22a2 <__vector_58+0x9e>
    227e:	0e c0       	rjmp	.+28     	; 0x229c <__vector_58+0x98>
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	84 36       	cpi	r24, 0x64	; 100
    2284:	91 05       	cpc	r25, r1
    2286:	28 f4       	brcc	.+10     	; 0x2292 <__vector_58+0x8e>
    2288:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <rcvE0_read_index>
    228c:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <rcvE0_read_index+0x1>
    2290:	08 c0       	rjmp	.+16     	; 0x22a2 <__vector_58+0x9e>
    2292:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <rcvE0_read_index>
    2296:	10 92 f3 20 	sts	0x20F3, r1	; 0x8020f3 <rcvE0_read_index+0x1>
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <__vector_58+0x9e>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	f3 cf       	rjmp	.-26     	; 0x2288 <__vector_58+0x84>
    22a2:	ff 91       	pop	r31
    22a4:	ef 91       	pop	r30
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	3f 91       	pop	r19
    22ac:	2f 91       	pop	r18
    22ae:	0f 90       	pop	r0
    22b0:	0b be       	out	0x3b, r0	; 59
    22b2:	0f 90       	pop	r0
    22b4:	08 be       	out	0x38, r0	; 56
    22b6:	0f 90       	pop	r0
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	0f 90       	pop	r0
    22bc:	1f 90       	pop	r1
    22be:	18 95       	reti

000022c0 <__vector_91>:
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	08 b6       	in	r0, 0x38	; 56
    22cc:	0f 92       	push	r0
    22ce:	18 be       	out	0x38, r1	; 56
    22d0:	0b b6       	in	r0, 0x3b	; 59
    22d2:	0f 92       	push	r0
    22d4:	1b be       	out	0x3b, r1	; 59
    22d6:	2f 93       	push	r18
    22d8:	3f 93       	push	r19
    22da:	8f 93       	push	r24
    22dc:	9f 93       	push	r25
    22de:	ef 93       	push	r30
    22e0:	ff 93       	push	r31
    22e2:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    22e6:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <rcvD1_buffer>
    22ea:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <rcvD1_buffer+0x1>
    22ee:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <rcvD1_write_index>
    22f2:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <rcvD1_write_index+0x1>
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	20 83       	st	Z, r18
    22fc:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <rcvD1_write_index>
    2300:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <rcvD1_write_index+0x1>
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	84 36       	cpi	r24, 0x64	; 100
    2308:	91 05       	cpc	r25, r1
    230a:	60 f4       	brcc	.+24     	; 0x2324 <__vector_91+0x64>
    230c:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <rcvD1_write_index>
    2310:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <rcvD1_write_index+0x1>
    2314:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <rcvD1_read_index>
    2318:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <rcvD1_read_index+0x1>
    231c:	82 17       	cp	r24, r18
    231e:	93 07       	cpc	r25, r19
    2320:	f1 f4       	brne	.+60     	; 0x235e <__vector_91+0x9e>
    2322:	0c c0       	rjmp	.+24     	; 0x233c <__vector_91+0x7c>
    2324:	10 92 f6 20 	sts	0x20F6, r1	; 0x8020f6 <rcvD1_write_index>
    2328:	10 92 f7 20 	sts	0x20F7, r1	; 0x8020f7 <rcvD1_write_index+0x1>
    232c:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <rcvD1_read_index>
    2330:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <rcvD1_read_index+0x1>
    2334:	18 16       	cp	r1, r24
    2336:	19 06       	cpc	r1, r25
    2338:	91 f4       	brne	.+36     	; 0x235e <__vector_91+0x9e>
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <__vector_91+0x98>
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	84 36       	cpi	r24, 0x64	; 100
    2340:	91 05       	cpc	r25, r1
    2342:	28 f4       	brcc	.+10     	; 0x234e <__vector_91+0x8e>
    2344:	80 93 f8 20 	sts	0x20F8, r24	; 0x8020f8 <rcvD1_read_index>
    2348:	90 93 f9 20 	sts	0x20F9, r25	; 0x8020f9 <rcvD1_read_index+0x1>
    234c:	08 c0       	rjmp	.+16     	; 0x235e <__vector_91+0x9e>
    234e:	10 92 f8 20 	sts	0x20F8, r1	; 0x8020f8 <rcvD1_read_index>
    2352:	10 92 f9 20 	sts	0x20F9, r1	; 0x8020f9 <rcvD1_read_index+0x1>
    2356:	03 c0       	rjmp	.+6      	; 0x235e <__vector_91+0x9e>
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	f3 cf       	rjmp	.-26     	; 0x2344 <__vector_91+0x84>
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	3f 91       	pop	r19
    2368:	2f 91       	pop	r18
    236a:	0f 90       	pop	r0
    236c:	0b be       	out	0x3b, r0	; 59
    236e:	0f 90       	pop	r0
    2370:	08 be       	out	0x38, r0	; 56
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	0f 90       	pop	r0
    2378:	1f 90       	pop	r1
    237a:	18 95       	reti

0000237c <__vector_88>:
    237c:	1f 92       	push	r1
    237e:	0f 92       	push	r0
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	0f 92       	push	r0
    2384:	11 24       	eor	r1, r1
    2386:	08 b6       	in	r0, 0x38	; 56
    2388:	0f 92       	push	r0
    238a:	18 be       	out	0x38, r1	; 56
    238c:	0b b6       	in	r0, 0x3b	; 59
    238e:	0f 92       	push	r0
    2390:	1b be       	out	0x3b, r1	; 59
    2392:	2f 93       	push	r18
    2394:	3f 93       	push	r19
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	ef 93       	push	r30
    239c:	ff 93       	push	r31
    239e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    23a2:	e0 91 00 21 	lds	r30, 0x2100	; 0x802100 <rcvD0_buffer>
    23a6:	f0 91 01 21 	lds	r31, 0x2101	; 0x802101 <rcvD0_buffer+0x1>
    23aa:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvC0_write_index>
    23ae:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvC0_write_index+0x1>
    23b2:	e8 0f       	add	r30, r24
    23b4:	f9 1f       	adc	r31, r25
    23b6:	20 83       	st	Z, r18
    23b8:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <rcvD0_write_index>
    23bc:	90 91 fd 20 	lds	r25, 0x20FD	; 0x8020fd <rcvD0_write_index+0x1>
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	84 36       	cpi	r24, 0x64	; 100
    23c4:	91 05       	cpc	r25, r1
    23c6:	60 f4       	brcc	.+24     	; 0x23e0 <__vector_88+0x64>
    23c8:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <rcvD0_write_index>
    23cc:	90 93 fd 20 	sts	0x20FD, r25	; 0x8020fd <rcvD0_write_index+0x1>
    23d0:	20 91 fe 20 	lds	r18, 0x20FE	; 0x8020fe <rcvD0_read_index>
    23d4:	30 91 ff 20 	lds	r19, 0x20FF	; 0x8020ff <rcvD0_read_index+0x1>
    23d8:	82 17       	cp	r24, r18
    23da:	93 07       	cpc	r25, r19
    23dc:	f1 f4       	brne	.+60     	; 0x241a <__vector_88+0x9e>
    23de:	0c c0       	rjmp	.+24     	; 0x23f8 <__vector_88+0x7c>
    23e0:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <rcvD0_write_index>
    23e4:	10 92 fd 20 	sts	0x20FD, r1	; 0x8020fd <rcvD0_write_index+0x1>
    23e8:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <rcvD0_read_index>
    23ec:	90 91 ff 20 	lds	r25, 0x20FF	; 0x8020ff <rcvD0_read_index+0x1>
    23f0:	18 16       	cp	r1, r24
    23f2:	19 06       	cpc	r1, r25
    23f4:	91 f4       	brne	.+36     	; 0x241a <__vector_88+0x9e>
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <__vector_88+0x98>
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	84 36       	cpi	r24, 0x64	; 100
    23fc:	91 05       	cpc	r25, r1
    23fe:	28 f4       	brcc	.+10     	; 0x240a <__vector_88+0x8e>
    2400:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <rcvD0_read_index>
    2404:	90 93 ff 20 	sts	0x20FF, r25	; 0x8020ff <rcvD0_read_index+0x1>
    2408:	08 c0       	rjmp	.+16     	; 0x241a <__vector_88+0x9e>
    240a:	10 92 fe 20 	sts	0x20FE, r1	; 0x8020fe <rcvD0_read_index>
    240e:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <rcvD0_read_index+0x1>
    2412:	03 c0       	rjmp	.+6      	; 0x241a <__vector_88+0x9e>
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	f3 cf       	rjmp	.-26     	; 0x2400 <__vector_88+0x84>
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	9f 91       	pop	r25
    2420:	8f 91       	pop	r24
    2422:	3f 91       	pop	r19
    2424:	2f 91       	pop	r18
    2426:	0f 90       	pop	r0
    2428:	0b be       	out	0x3b, r0	; 59
    242a:	0f 90       	pop	r0
    242c:	08 be       	out	0x38, r0	; 56
    242e:	0f 90       	pop	r0
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	0f 90       	pop	r0
    2434:	1f 90       	pop	r1
    2436:	18 95       	reti

00002438 <__vector_28>:
    2438:	1f 92       	push	r1
    243a:	0f 92       	push	r0
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	0f 92       	push	r0
    2440:	11 24       	eor	r1, r1
    2442:	08 b6       	in	r0, 0x38	; 56
    2444:	0f 92       	push	r0
    2446:	18 be       	out	0x38, r1	; 56
    2448:	0b b6       	in	r0, 0x3b	; 59
    244a:	0f 92       	push	r0
    244c:	1b be       	out	0x3b, r1	; 59
    244e:	2f 93       	push	r18
    2450:	3f 93       	push	r19
    2452:	8f 93       	push	r24
    2454:	9f 93       	push	r25
    2456:	ef 93       	push	r30
    2458:	ff 93       	push	r31
    245a:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    245e:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <rcvC1_buffer>
    2462:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <rcvC1_buffer+0x1>
    2466:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <rcvC1_write_index>
    246a:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <rcvC1_write_index+0x1>
    246e:	e8 0f       	add	r30, r24
    2470:	f9 1f       	adc	r31, r25
    2472:	20 83       	st	Z, r18
    2474:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <rcvC1_write_index>
    2478:	90 91 03 21 	lds	r25, 0x2103	; 0x802103 <rcvC1_write_index+0x1>
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	84 36       	cpi	r24, 0x64	; 100
    2480:	91 05       	cpc	r25, r1
    2482:	60 f4       	brcc	.+24     	; 0x249c <__vector_28+0x64>
    2484:	80 93 02 21 	sts	0x2102, r24	; 0x802102 <rcvC1_write_index>
    2488:	90 93 03 21 	sts	0x2103, r25	; 0x802103 <rcvC1_write_index+0x1>
    248c:	20 91 04 21 	lds	r18, 0x2104	; 0x802104 <rcvC1_read_index>
    2490:	30 91 05 21 	lds	r19, 0x2105	; 0x802105 <rcvC1_read_index+0x1>
    2494:	82 17       	cp	r24, r18
    2496:	93 07       	cpc	r25, r19
    2498:	f1 f4       	brne	.+60     	; 0x24d6 <__vector_28+0x9e>
    249a:	0c c0       	rjmp	.+24     	; 0x24b4 <__vector_28+0x7c>
    249c:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <rcvC1_write_index>
    24a0:	10 92 03 21 	sts	0x2103, r1	; 0x802103 <rcvC1_write_index+0x1>
    24a4:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <rcvC1_read_index>
    24a8:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <rcvC1_read_index+0x1>
    24ac:	18 16       	cp	r1, r24
    24ae:	19 06       	cpc	r1, r25
    24b0:	91 f4       	brne	.+36     	; 0x24d6 <__vector_28+0x9e>
    24b2:	0e c0       	rjmp	.+28     	; 0x24d0 <__vector_28+0x98>
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	84 36       	cpi	r24, 0x64	; 100
    24b8:	91 05       	cpc	r25, r1
    24ba:	28 f4       	brcc	.+10     	; 0x24c6 <__vector_28+0x8e>
    24bc:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <rcvC1_read_index>
    24c0:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <rcvC1_read_index+0x1>
    24c4:	08 c0       	rjmp	.+16     	; 0x24d6 <__vector_28+0x9e>
    24c6:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <rcvC1_read_index>
    24ca:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <rcvC1_read_index+0x1>
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <__vector_28+0x9e>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	f3 cf       	rjmp	.-26     	; 0x24bc <__vector_28+0x84>
    24d6:	ff 91       	pop	r31
    24d8:	ef 91       	pop	r30
    24da:	9f 91       	pop	r25
    24dc:	8f 91       	pop	r24
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0b be       	out	0x3b, r0	; 59
    24e6:	0f 90       	pop	r0
    24e8:	08 be       	out	0x38, r0	; 56
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	0f 90       	pop	r0
    24f0:	1f 90       	pop	r1
    24f2:	18 95       	reti

000024f4 <__vector_25>:
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	08 b6       	in	r0, 0x38	; 56
    2500:	0f 92       	push	r0
    2502:	18 be       	out	0x38, r1	; 56
    2504:	0b b6       	in	r0, 0x3b	; 59
    2506:	0f 92       	push	r0
    2508:	1b be       	out	0x3b, r1	; 59
    250a:	2f 93       	push	r18
    250c:	3f 93       	push	r19
    250e:	8f 93       	push	r24
    2510:	9f 93       	push	r25
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    251a:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <rcvC0_buffer>
    251e:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <rcvC0_buffer+0x1>
    2522:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvC0_write_index>
    2526:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvC0_write_index+0x1>
    252a:	e8 0f       	add	r30, r24
    252c:	f9 1f       	adc	r31, r25
    252e:	20 83       	st	Z, r18
    2530:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <rcvC0_write_index>
    2534:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <rcvC0_write_index+0x1>
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	84 36       	cpi	r24, 0x64	; 100
    253c:	91 05       	cpc	r25, r1
    253e:	60 f4       	brcc	.+24     	; 0x2558 <__vector_25+0x64>
    2540:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <rcvC0_write_index>
    2544:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <rcvC0_write_index+0x1>
    2548:	20 91 0a 21 	lds	r18, 0x210A	; 0x80210a <rcvC0_read_index>
    254c:	30 91 0b 21 	lds	r19, 0x210B	; 0x80210b <rcvC0_read_index+0x1>
    2550:	82 17       	cp	r24, r18
    2552:	93 07       	cpc	r25, r19
    2554:	f1 f4       	brne	.+60     	; 0x2592 <__vector_25+0x9e>
    2556:	0c c0       	rjmp	.+24     	; 0x2570 <__vector_25+0x7c>
    2558:	10 92 08 21 	sts	0x2108, r1	; 0x802108 <rcvC0_write_index>
    255c:	10 92 09 21 	sts	0x2109, r1	; 0x802109 <rcvC0_write_index+0x1>
    2560:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <rcvC0_read_index>
    2564:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <rcvC0_read_index+0x1>
    2568:	18 16       	cp	r1, r24
    256a:	19 06       	cpc	r1, r25
    256c:	91 f4       	brne	.+36     	; 0x2592 <__vector_25+0x9e>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <__vector_25+0x98>
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	84 36       	cpi	r24, 0x64	; 100
    2574:	91 05       	cpc	r25, r1
    2576:	28 f4       	brcc	.+10     	; 0x2582 <__vector_25+0x8e>
    2578:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <rcvC0_read_index>
    257c:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <rcvC0_read_index+0x1>
    2580:	08 c0       	rjmp	.+16     	; 0x2592 <__vector_25+0x9e>
    2582:	10 92 0a 21 	sts	0x210A, r1	; 0x80210a <rcvC0_read_index>
    2586:	10 92 0b 21 	sts	0x210B, r1	; 0x80210b <rcvC0_read_index+0x1>
    258a:	03 c0       	rjmp	.+6      	; 0x2592 <__vector_25+0x9e>
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	f3 cf       	rjmp	.-26     	; 0x2578 <__vector_25+0x84>
    2592:	ff 91       	pop	r31
    2594:	ef 91       	pop	r30
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	3f 91       	pop	r19
    259c:	2f 91       	pop	r18
    259e:	0f 90       	pop	r0
    25a0:	0b be       	out	0x3b, r0	; 59
    25a2:	0f 90       	pop	r0
    25a4:	08 be       	out	0x38, r0	; 56
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <_ZN8emstreamlsEh>:
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	29 97       	sbiw	r28, 0x09	; 9
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	8c 01       	movw	r16, r24
    25cc:	e6 2e       	mov	r14, r22
    25ce:	dc 01       	movw	r26, r24
    25d0:	13 96       	adiw	r26, 0x03	; 3
    25d2:	8c 91       	ld	r24, X
    25d4:	13 97       	sbiw	r26, 0x03	; 3
    25d6:	88 23       	and	r24, r24
    25d8:	41 f0       	breq	.+16     	; 0x25ea <_ZN8emstreamlsEh+0x3a>
    25da:	ed 91       	ld	r30, X+
    25dc:	fc 91       	ld	r31, X
    25de:	02 80       	ldd	r0, Z+2	; 0x02
    25e0:	f3 81       	ldd	r31, Z+3	; 0x03
    25e2:	e0 2d       	mov	r30, r0
    25e4:	c8 01       	movw	r24, r16
    25e6:	19 95       	eicall
    25e8:	56 c0       	rjmp	.+172    	; 0x2696 <_ZN8emstreamlsEh+0xe6>
    25ea:	f8 01       	movw	r30, r16
    25ec:	42 81       	ldd	r20, Z+2	; 0x02
    25ee:	42 30       	cpi	r20, 0x02	; 2
    25f0:	19 f5       	brne	.+70     	; 0x2638 <_ZN8emstreamlsEh+0x88>
    25f2:	68 94       	set
    25f4:	cc 24       	eor	r12, r12
    25f6:	c3 f8       	bld	r12, 3
    25f8:	d1 2c       	mov	r13, r1
    25fa:	68 94       	set
    25fc:	ff 24       	eor	r15, r15
    25fe:	f7 f8       	bld	r15, 7
    2600:	8e 2d       	mov	r24, r14
    2602:	8f 21       	and	r24, r15
    2604:	51 f0       	breq	.+20     	; 0x261a <_ZN8emstreamlsEh+0x6a>
    2606:	d8 01       	movw	r26, r16
    2608:	ed 91       	ld	r30, X+
    260a:	fc 91       	ld	r31, X
    260c:	02 80       	ldd	r0, Z+2	; 0x02
    260e:	f3 81       	ldd	r31, Z+3	; 0x03
    2610:	e0 2d       	mov	r30, r0
    2612:	61 e3       	ldi	r22, 0x31	; 49
    2614:	c8 01       	movw	r24, r16
    2616:	19 95       	eicall
    2618:	09 c0       	rjmp	.+18     	; 0x262c <_ZN8emstreamlsEh+0x7c>
    261a:	d8 01       	movw	r26, r16
    261c:	ed 91       	ld	r30, X+
    261e:	fc 91       	ld	r31, X
    2620:	02 80       	ldd	r0, Z+2	; 0x02
    2622:	f3 81       	ldd	r31, Z+3	; 0x03
    2624:	e0 2d       	mov	r30, r0
    2626:	60 e3       	ldi	r22, 0x30	; 48
    2628:	c8 01       	movw	r24, r16
    262a:	19 95       	eicall
    262c:	f6 94       	lsr	r15
    262e:	b1 e0       	ldi	r27, 0x01	; 1
    2630:	cb 1a       	sub	r12, r27
    2632:	d1 08       	sbc	r13, r1
    2634:	29 f7       	brne	.-54     	; 0x2600 <_ZN8emstreamlsEh+0x50>
    2636:	2f c0       	rjmp	.+94     	; 0x2696 <_ZN8emstreamlsEh+0xe6>
    2638:	40 31       	cpi	r20, 0x10	; 16
    263a:	f9 f4       	brne	.+62     	; 0x267a <_ZN8emstreamlsEh+0xca>
    263c:	62 95       	swap	r22
    263e:	6f 70       	andi	r22, 0x0F	; 15
    2640:	01 90       	ld	r0, Z+
    2642:	f0 81       	ld	r31, Z
    2644:	e0 2d       	mov	r30, r0
    2646:	02 80       	ldd	r0, Z+2	; 0x02
    2648:	f3 81       	ldd	r31, Z+3	; 0x03
    264a:	e0 2d       	mov	r30, r0
    264c:	6a 30       	cpi	r22, 0x0A	; 10
    264e:	10 f0       	brcs	.+4      	; 0x2654 <_ZN8emstreamlsEh+0xa4>
    2650:	69 5c       	subi	r22, 0xC9	; 201
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <_ZN8emstreamlsEh+0xa6>
    2654:	60 5d       	subi	r22, 0xD0	; 208
    2656:	c8 01       	movw	r24, r16
    2658:	19 95       	eicall
    265a:	6e 2d       	mov	r22, r14
    265c:	6f 70       	andi	r22, 0x0F	; 15
    265e:	d8 01       	movw	r26, r16
    2660:	ed 91       	ld	r30, X+
    2662:	fc 91       	ld	r31, X
    2664:	02 80       	ldd	r0, Z+2	; 0x02
    2666:	f3 81       	ldd	r31, Z+3	; 0x03
    2668:	e0 2d       	mov	r30, r0
    266a:	6a 30       	cpi	r22, 0x0A	; 10
    266c:	10 f0       	brcs	.+4      	; 0x2672 <_ZN8emstreamlsEh+0xc2>
    266e:	69 5c       	subi	r22, 0xC9	; 201
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <_ZN8emstreamlsEh+0xc4>
    2672:	60 5d       	subi	r22, 0xD0	; 208
    2674:	c8 01       	movw	r24, r16
    2676:	19 95       	eicall
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <_ZN8emstreamlsEh+0xe6>
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	be 01       	movw	r22, r28
    267e:	6f 5f       	subi	r22, 0xFF	; 255
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8e 2d       	mov	r24, r14
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <utoa>
    268a:	be 01       	movw	r22, r28
    268c:	6f 5f       	subi	r22, 0xFF	; 255
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	c8 01       	movw	r24, r16
    2692:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8emstream4putsEPKc>
    2696:	c8 01       	movw	r24, r16
    2698:	29 96       	adiw	r28, 0x09	; 9
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	ff 90       	pop	r15
    26a8:	ef 90       	pop	r14
    26aa:	df 90       	pop	r13
    26ac:	cf 90       	pop	r12
    26ae:	08 95       	ret

000026b0 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    26ba:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    26be:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <xHeapHasBeenInitialised.4150>
    26c2:	81 11       	cpse	r24, r1
    26c4:	1d c0       	rjmp	.+58     	; 0x2700 <pvPortMalloc+0x50>
		{
			prvHeapInit();
    26c6:	a3 e1       	ldi	r26, 0x13	; 19
    26c8:	b1 e2       	ldi	r27, 0x21	; 33
    26ca:	e7 e1       	ldi	r30, 0x17	; 23
    26cc:	f1 e2       	ldi	r31, 0x21	; 33
    26ce:	ed 93       	st	X+, r30
    26d0:	fc 93       	st	X, r31
    26d2:	11 97       	sbiw	r26, 0x01	; 1
    26d4:	12 96       	adiw	r26, 0x02	; 2
    26d6:	1d 92       	st	X+, r1
    26d8:	1c 92       	st	X, r1
    26da:	13 97       	sbiw	r26, 0x03	; 3
    26dc:	af e0       	ldi	r26, 0x0F	; 15
    26de:	b1 e2       	ldi	r27, 0x21	; 33
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	9f e0       	ldi	r25, 0x0F	; 15
    26e4:	12 96       	adiw	r26, 0x02	; 2
    26e6:	8d 93       	st	X+, r24
    26e8:	9c 93       	st	X, r25
    26ea:	13 97       	sbiw	r26, 0x03	; 3
    26ec:	1d 92       	st	X+, r1
    26ee:	1c 92       	st	X, r1
    26f0:	11 97       	sbiw	r26, 0x01	; 1
    26f2:	82 83       	std	Z+2, r24	; 0x02
    26f4:	93 83       	std	Z+3, r25	; 0x03
    26f6:	a0 83       	st	Z, r26
    26f8:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    2700:	20 97       	sbiw	r28, 0x00	; 0
    2702:	09 f4       	brne	.+2      	; 0x2706 <pvPortMalloc+0x56>
    2704:	5f c0       	rjmp	.+190    	; 0x27c4 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    2706:	9e 01       	movw	r18, r28
    2708:	2b 5f       	subi	r18, 0xFB	; 251
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    270c:	24 96       	adiw	r28, 0x04	; 4
    270e:	ce 3f       	cpi	r28, 0xFE	; 254
    2710:	df 40       	sbci	r29, 0x0F	; 15
    2712:	08 f0       	brcs	.+2      	; 0x2716 <pvPortMalloc+0x66>
    2714:	5a c0       	rjmp	.+180    	; 0x27ca <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    2716:	e0 91 13 21 	lds	r30, 0x2113	; 0x802113 <xStart>
    271a:	f0 91 14 21 	lds	r31, 0x2114	; 0x802114 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    271e:	a3 e1       	ldi	r26, 0x13	; 19
    2720:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <pvPortMalloc+0x78>
    2724:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    2726:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	82 17       	cp	r24, r18
    272e:	93 07       	cpc	r25, r19
    2730:	20 f4       	brcc	.+8      	; 0x273a <pvPortMalloc+0x8a>
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	a9 f7       	brne	.-22     	; 0x2724 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    273a:	c1 e2       	ldi	r28, 0x21	; 33
    273c:	ef 30       	cpi	r30, 0x0F	; 15
    273e:	fc 07       	cpc	r31, r28
    2740:	09 f4       	brne	.+2      	; 0x2744 <pvPortMalloc+0x94>
    2742:	46 c0       	rjmp	.+140    	; 0x27d0 <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2744:	cd 91       	ld	r28, X+
    2746:	dc 91       	ld	r29, X
    2748:	11 97       	sbiw	r26, 0x01	; 1
    274a:	8e 01       	movw	r16, r28
    274c:	0b 5f       	subi	r16, 0xFB	; 251
    274e:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	8d 93       	st	X+, r24
    2756:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	82 1b       	sub	r24, r18
    275e:	93 0b       	sbc	r25, r19
    2760:	8b 30       	cpi	r24, 0x0B	; 11
    2762:	91 05       	cpc	r25, r1
    2764:	10 f1       	brcs	.+68     	; 0x27aa <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2766:	bf 01       	movw	r22, r30
    2768:	62 0f       	add	r22, r18
    276a:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    276c:	db 01       	movw	r26, r22
    276e:	12 96       	adiw	r26, 0x02	; 2
    2770:	8d 93       	st	X+, r24
    2772:	9c 93       	st	X, r25
    2774:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2776:	22 83       	std	Z+2, r18	; 0x02
    2778:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    277a:	12 96       	adiw	r26, 0x02	; 2
    277c:	4d 91       	ld	r20, X+
    277e:	5c 91       	ld	r21, X
    2780:	13 97       	sbiw	r26, 0x03	; 3
    2782:	83 e1       	ldi	r24, 0x13	; 19
    2784:	91 e2       	ldi	r25, 0x21	; 33
    2786:	01 c0       	rjmp	.+2      	; 0x278a <pvPortMalloc+0xda>
    2788:	cd 01       	movw	r24, r26
    278a:	ec 01       	movw	r28, r24
    278c:	a8 81       	ld	r26, Y
    278e:	b9 81       	ldd	r27, Y+1	; 0x01
    2790:	12 96       	adiw	r26, 0x02	; 2
    2792:	2d 91       	ld	r18, X+
    2794:	3c 91       	ld	r19, X
    2796:	13 97       	sbiw	r26, 0x03	; 3
    2798:	24 17       	cp	r18, r20
    279a:	35 07       	cpc	r19, r21
    279c:	a8 f3       	brcs	.-22     	; 0x2788 <pvPortMalloc+0xd8>
    279e:	eb 01       	movw	r28, r22
    27a0:	a8 83       	st	Y, r26
    27a2:	b9 83       	std	Y+1, r27	; 0x01
    27a4:	dc 01       	movw	r26, r24
    27a6:	6d 93       	st	X+, r22
    27a8:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    27aa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    27ae:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    27b2:	22 81       	ldd	r18, Z+2	; 0x02
    27b4:	33 81       	ldd	r19, Z+3	; 0x03
    27b6:	82 1b       	sub	r24, r18
    27b8:	93 0b       	sbc	r25, r19
    27ba:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    27be:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    27c2:	08 c0       	rjmp	.+16     	; 0x27d4 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    27c4:	00 e0       	ldi	r16, 0x00	; 0
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <pvPortMalloc+0x124>
    27ca:	00 e0       	ldi	r16, 0x00	; 0
    27cc:	10 e0       	ldi	r17, 0x00	; 0
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <pvPortMalloc+0x124>
    27d0:	00 e0       	ldi	r16, 0x00	; 0
    27d2:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    27d4:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    27d8:	c8 01       	movw	r24, r16
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	41 f1       	breq	.+80     	; 0x2840 <vPortFree+0x5c>
    27f0:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    27f2:	8c 01       	movw	r16, r24
    27f4:	05 50       	subi	r16, 0x05	; 5
    27f6:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    27f8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    27fc:	f8 01       	movw	r30, r16
    27fe:	42 81       	ldd	r20, Z+2	; 0x02
    2800:	53 81       	ldd	r21, Z+3	; 0x03
    2802:	a3 e1       	ldi	r26, 0x13	; 19
    2804:	b1 e2       	ldi	r27, 0x21	; 33
    2806:	01 c0       	rjmp	.+2      	; 0x280a <vPortFree+0x26>
    2808:	df 01       	movw	r26, r30
    280a:	ed 91       	ld	r30, X+
    280c:	fc 91       	ld	r31, X
    280e:	11 97       	sbiw	r26, 0x01	; 1
    2810:	22 81       	ldd	r18, Z+2	; 0x02
    2812:	33 81       	ldd	r19, Z+3	; 0x03
    2814:	24 17       	cp	r18, r20
    2816:	35 07       	cpc	r19, r21
    2818:	b8 f3       	brcs	.-18     	; 0x2808 <vPortFree+0x24>
    281a:	25 97       	sbiw	r28, 0x05	; 5
    281c:	e8 83       	st	Y, r30
    281e:	f9 83       	std	Y+1, r31	; 0x01
    2820:	0d 93       	st	X+, r16
    2822:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    2824:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2828:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	82 0f       	add	r24, r18
    2832:	93 1f       	adc	r25, r19
    2834:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    2838:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    283c:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
	}
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	08 95       	ret

0000284a <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    284a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    284e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2852:	08 95       	ret

00002854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2854:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2856:	03 96       	adiw	r24, 0x03	; 3
    2858:	81 83       	std	Z+1, r24	; 0x01
    285a:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    285c:	4f ef       	ldi	r20, 0xFF	; 255
    285e:	5f ef       	ldi	r21, 0xFF	; 255
    2860:	ba 01       	movw	r22, r20
    2862:	43 83       	std	Z+3, r20	; 0x03
    2864:	54 83       	std	Z+4, r21	; 0x04
    2866:	65 83       	std	Z+5, r22	; 0x05
    2868:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    286a:	87 83       	std	Z+7, r24	; 0x07
    286c:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    286e:	81 87       	std	Z+9, r24	; 0x09
    2870:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2872:	10 82       	st	Z, r1
    2874:	08 95       	ret

00002876 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2876:	fc 01       	movw	r30, r24
    2878:	12 86       	std	Z+10, r1	; 0x0a
    287a:	13 86       	std	Z+11, r1	; 0x0b
    287c:	08 95       	ret

0000287e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	fc 01       	movw	r30, r24
    2884:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2886:	21 81       	ldd	r18, Z+1	; 0x01
    2888:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    288a:	e9 01       	movw	r28, r18
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	9d 81       	ldd	r25, Y+5	; 0x05
    2890:	14 96       	adiw	r26, 0x04	; 4
    2892:	8d 93       	st	X+, r24
    2894:	9c 93       	st	X, r25
    2896:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2898:	81 81       	ldd	r24, Z+1	; 0x01
    289a:	92 81       	ldd	r25, Z+2	; 0x02
    289c:	16 96       	adiw	r26, 0x06	; 6
    289e:	8d 93       	st	X+, r24
    28a0:	9c 93       	st	X, r25
    28a2:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
    28a6:	9d 81       	ldd	r25, Y+5	; 0x05
    28a8:	ec 01       	movw	r28, r24
    28aa:	6e 83       	std	Y+6, r22	; 0x06
    28ac:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    28ae:	e9 01       	movw	r28, r18
    28b0:	6c 83       	std	Y+4, r22	; 0x04
    28b2:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    28b4:	61 83       	std	Z+1, r22	; 0x01
    28b6:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    28b8:	1a 96       	adiw	r26, 0x0a	; 10
    28ba:	ed 93       	st	X+, r30
    28bc:	fc 93       	st	X, r31
    28be:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	80 83       	st	Z, r24
}
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    28d6:	08 81       	ld	r16, Y
    28d8:	19 81       	ldd	r17, Y+1	; 0x01
    28da:	2a 81       	ldd	r18, Y+2	; 0x02
    28dc:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    28de:	0f 3f       	cpi	r16, 0xFF	; 255
    28e0:	4f ef       	ldi	r20, 0xFF	; 255
    28e2:	14 07       	cpc	r17, r20
    28e4:	24 07       	cpc	r18, r20
    28e6:	34 07       	cpc	r19, r20
    28e8:	31 f4       	brne	.+12     	; 0x28f6 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    28ea:	dc 01       	movw	r26, r24
    28ec:	19 96       	adiw	r26, 0x09	; 9
    28ee:	ed 91       	ld	r30, X+
    28f0:	fc 91       	ld	r31, X
    28f2:	1a 97       	sbiw	r26, 0x0a	; 10
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    28f6:	fc 01       	movw	r30, r24
    28f8:	33 96       	adiw	r30, 0x03	; 3
    28fa:	dc 01       	movw	r26, r24
    28fc:	17 96       	adiw	r26, 0x07	; 7
    28fe:	4d 91       	ld	r20, X+
    2900:	5c 91       	ld	r21, X
    2902:	18 97       	sbiw	r26, 0x08	; 8
    2904:	da 01       	movw	r26, r20
    2906:	4d 91       	ld	r20, X+
    2908:	5d 91       	ld	r21, X+
    290a:	6d 91       	ld	r22, X+
    290c:	7c 91       	ld	r23, X
    290e:	04 17       	cp	r16, r20
    2910:	15 07       	cpc	r17, r21
    2912:	26 07       	cpc	r18, r22
    2914:	37 07       	cpc	r19, r23
    2916:	70 f0       	brcs	.+28     	; 0x2934 <vListInsert+0x68>
    2918:	04 80       	ldd	r0, Z+4	; 0x04
    291a:	f5 81       	ldd	r31, Z+5	; 0x05
    291c:	e0 2d       	mov	r30, r0
    291e:	a4 81       	ldd	r26, Z+4	; 0x04
    2920:	b5 81       	ldd	r27, Z+5	; 0x05
    2922:	4d 91       	ld	r20, X+
    2924:	5d 91       	ld	r21, X+
    2926:	6d 91       	ld	r22, X+
    2928:	7c 91       	ld	r23, X
    292a:	04 17       	cp	r16, r20
    292c:	15 07       	cpc	r17, r21
    292e:	26 07       	cpc	r18, r22
    2930:	37 07       	cpc	r19, r23
    2932:	90 f7       	brcc	.-28     	; 0x2918 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2934:	a4 81       	ldd	r26, Z+4	; 0x04
    2936:	b5 81       	ldd	r27, Z+5	; 0x05
    2938:	ac 83       	std	Y+4, r26	; 0x04
    293a:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    293c:	16 96       	adiw	r26, 0x06	; 6
    293e:	cd 93       	st	X+, r28
    2940:	dc 93       	st	X, r29
    2942:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    2944:	ee 83       	std	Y+6, r30	; 0x06
    2946:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2948:	c4 83       	std	Z+4, r28	; 0x04
    294a:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    294c:	8a 87       	std	Y+10, r24	; 0x0a
    294e:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    2950:	fc 01       	movw	r30, r24
    2952:	20 81       	ld	r18, Z
    2954:	2f 5f       	subi	r18, 0xFF	; 255
    2956:	20 83       	st	Z, r18
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2962:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2964:	a4 81       	ldd	r26, Z+4	; 0x04
    2966:	b5 81       	ldd	r27, Z+5	; 0x05
    2968:	86 81       	ldd	r24, Z+6	; 0x06
    296a:	97 81       	ldd	r25, Z+7	; 0x07
    296c:	16 96       	adiw	r26, 0x06	; 6
    296e:	8d 93       	st	X+, r24
    2970:	9c 93       	st	X, r25
    2972:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2974:	a6 81       	ldd	r26, Z+6	; 0x06
    2976:	b7 81       	ldd	r27, Z+7	; 0x07
    2978:	84 81       	ldd	r24, Z+4	; 0x04
    297a:	95 81       	ldd	r25, Z+5	; 0x05
    297c:	14 96       	adiw	r26, 0x04	; 4
    297e:	8d 93       	st	X+, r24
    2980:	9c 93       	st	X, r25
    2982:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2984:	a2 85       	ldd	r26, Z+10	; 0x0a
    2986:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	8d 91       	ld	r24, X+
    298c:	9c 91       	ld	r25, X
    298e:	12 97       	sbiw	r26, 0x02	; 2
    2990:	e8 17       	cp	r30, r24
    2992:	f9 07       	cpc	r31, r25
    2994:	31 f4       	brne	.+12     	; 0x29a2 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2996:	86 81       	ldd	r24, Z+6	; 0x06
    2998:	97 81       	ldd	r25, Z+7	; 0x07
    299a:	11 96       	adiw	r26, 0x01	; 1
    299c:	8d 93       	st	X+, r24
    299e:	9c 93       	st	X, r25
    29a0:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    29a2:	12 86       	std	Z+10, r1	; 0x0a
    29a4:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    29a6:	8c 91       	ld	r24, X
    29a8:	81 50       	subi	r24, 0x01	; 1
    29aa:	8c 93       	st	X, r24
    29ac:	08 95       	ret

000029ae <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    29ae:	80 93 78 31 	sts	0x3178, r24	; 0x803178 <portStackTopForTask>
    29b2:	90 93 79 31 	sts	0x3179, r25	; 0x803179 <portStackTopForTask+0x1>
    29b6:	31 e1       	ldi	r19, 0x11	; 17
    29b8:	fc 01       	movw	r30, r24
    29ba:	30 83       	st	Z, r19
    29bc:	31 97       	sbiw	r30, 0x01	; 1
    29be:	22 e2       	ldi	r18, 0x22	; 34
    29c0:	20 83       	st	Z, r18
    29c2:	31 97       	sbiw	r30, 0x01	; 1
    29c4:	a3 e3       	ldi	r26, 0x33	; 51
    29c6:	a0 83       	st	Z, r26
    29c8:	31 97       	sbiw	r30, 0x01	; 1
    29ca:	60 83       	st	Z, r22
    29cc:	31 97       	sbiw	r30, 0x01	; 1
    29ce:	70 83       	st	Z, r23
    29d0:	31 97       	sbiw	r30, 0x01	; 1
    29d2:	10 82       	st	Z, r1
    29d4:	31 97       	sbiw	r30, 0x01	; 1
    29d6:	10 82       	st	Z, r1
    29d8:	31 97       	sbiw	r30, 0x01	; 1
    29da:	60 e8       	ldi	r22, 0x80	; 128
    29dc:	60 83       	st	Z, r22
    29de:	31 97       	sbiw	r30, 0x01	; 1
    29e0:	10 82       	st	Z, r1
    29e2:	31 97       	sbiw	r30, 0x01	; 1
    29e4:	10 82       	st	Z, r1
    29e6:	31 97       	sbiw	r30, 0x01	; 1
    29e8:	10 82       	st	Z, r1
    29ea:	31 97       	sbiw	r30, 0x01	; 1
    29ec:	62 e0       	ldi	r22, 0x02	; 2
    29ee:	60 83       	st	Z, r22
    29f0:	31 97       	sbiw	r30, 0x01	; 1
    29f2:	63 e0       	ldi	r22, 0x03	; 3
    29f4:	60 83       	st	Z, r22
    29f6:	31 97       	sbiw	r30, 0x01	; 1
    29f8:	64 e0       	ldi	r22, 0x04	; 4
    29fa:	60 83       	st	Z, r22
    29fc:	31 97       	sbiw	r30, 0x01	; 1
    29fe:	65 e0       	ldi	r22, 0x05	; 5
    2a00:	60 83       	st	Z, r22
    2a02:	31 97       	sbiw	r30, 0x01	; 1
    2a04:	66 e0       	ldi	r22, 0x06	; 6
    2a06:	60 83       	st	Z, r22
    2a08:	31 97       	sbiw	r30, 0x01	; 1
    2a0a:	67 e0       	ldi	r22, 0x07	; 7
    2a0c:	60 83       	st	Z, r22
    2a0e:	31 97       	sbiw	r30, 0x01	; 1
    2a10:	68 e0       	ldi	r22, 0x08	; 8
    2a12:	60 83       	st	Z, r22
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	69 e0       	ldi	r22, 0x09	; 9
    2a18:	60 83       	st	Z, r22
    2a1a:	31 97       	sbiw	r30, 0x01	; 1
    2a1c:	60 e1       	ldi	r22, 0x10	; 16
    2a1e:	60 83       	st	Z, r22
    2a20:	31 97       	sbiw	r30, 0x01	; 1
    2a22:	30 83       	st	Z, r19
    2a24:	31 97       	sbiw	r30, 0x01	; 1
    2a26:	32 e1       	ldi	r19, 0x12	; 18
    2a28:	30 83       	st	Z, r19
    2a2a:	31 97       	sbiw	r30, 0x01	; 1
    2a2c:	33 e1       	ldi	r19, 0x13	; 19
    2a2e:	30 83       	st	Z, r19
    2a30:	31 97       	sbiw	r30, 0x01	; 1
    2a32:	34 e1       	ldi	r19, 0x14	; 20
    2a34:	30 83       	st	Z, r19
    2a36:	31 97       	sbiw	r30, 0x01	; 1
    2a38:	35 e1       	ldi	r19, 0x15	; 21
    2a3a:	30 83       	st	Z, r19
    2a3c:	31 97       	sbiw	r30, 0x01	; 1
    2a3e:	36 e1       	ldi	r19, 0x16	; 22
    2a40:	30 83       	st	Z, r19
    2a42:	31 97       	sbiw	r30, 0x01	; 1
    2a44:	37 e1       	ldi	r19, 0x17	; 23
    2a46:	30 83       	st	Z, r19
    2a48:	31 97       	sbiw	r30, 0x01	; 1
    2a4a:	38 e1       	ldi	r19, 0x18	; 24
    2a4c:	30 83       	st	Z, r19
    2a4e:	31 97       	sbiw	r30, 0x01	; 1
    2a50:	39 e1       	ldi	r19, 0x19	; 25
    2a52:	30 83       	st	Z, r19
    2a54:	31 97       	sbiw	r30, 0x01	; 1
    2a56:	30 e2       	ldi	r19, 0x20	; 32
    2a58:	30 83       	st	Z, r19
    2a5a:	31 97       	sbiw	r30, 0x01	; 1
    2a5c:	31 e2       	ldi	r19, 0x21	; 33
    2a5e:	30 83       	st	Z, r19
    2a60:	31 97       	sbiw	r30, 0x01	; 1
    2a62:	20 83       	st	Z, r18
    2a64:	31 97       	sbiw	r30, 0x01	; 1
    2a66:	23 e2       	ldi	r18, 0x23	; 35
    2a68:	20 83       	st	Z, r18
    2a6a:	31 97       	sbiw	r30, 0x01	; 1
    2a6c:	40 83       	st	Z, r20
    2a6e:	31 97       	sbiw	r30, 0x01	; 1
    2a70:	50 83       	st	Z, r21
    2a72:	31 97       	sbiw	r30, 0x01	; 1
    2a74:	26 e2       	ldi	r18, 0x26	; 38
    2a76:	20 83       	st	Z, r18
    2a78:	31 97       	sbiw	r30, 0x01	; 1
    2a7a:	27 e2       	ldi	r18, 0x27	; 39
    2a7c:	20 83       	st	Z, r18
    2a7e:	31 97       	sbiw	r30, 0x01	; 1
    2a80:	28 e2       	ldi	r18, 0x28	; 40
    2a82:	20 83       	st	Z, r18
    2a84:	31 97       	sbiw	r30, 0x01	; 1
    2a86:	29 e2       	ldi	r18, 0x29	; 41
    2a88:	20 83       	st	Z, r18
    2a8a:	31 97       	sbiw	r30, 0x01	; 1
    2a8c:	20 e3       	ldi	r18, 0x30	; 48
    2a8e:	20 83       	st	Z, r18
    2a90:	31 97       	sbiw	r30, 0x01	; 1
    2a92:	21 e3       	ldi	r18, 0x31	; 49
    2a94:	20 83       	st	Z, r18
    2a96:	89 97       	sbiw	r24, 0x29	; 41
    2a98:	08 95       	ret

00002a9a <xPortStartScheduler>:
    2a9a:	8c e7       	ldi	r24, 0x7C	; 124
    2a9c:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    2aac:	91 e1       	ldi	r25, 0x11	; 17
    2aae:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2ab2:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2ab6:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    2aba:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    2abe:	cd 91       	ld	r28, X+
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	dd 91       	ld	r29, X+
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	ff 91       	pop	r31
    2ac8:	ef 91       	pop	r30
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	ff 90       	pop	r15
    2ae8:	ef 90       	pop	r14
    2aea:	df 90       	pop	r13
    2aec:	cf 90       	pop	r12
    2aee:	bf 90       	pop	r11
    2af0:	af 90       	pop	r10
    2af2:	9f 90       	pop	r9
    2af4:	8f 90       	pop	r8
    2af6:	7f 90       	pop	r7
    2af8:	6f 90       	pop	r6
    2afa:	5f 90       	pop	r5
    2afc:	4f 90       	pop	r4
    2afe:	3f 90       	pop	r3
    2b00:	2f 90       	pop	r2
    2b02:	1f 90       	pop	r1
    2b04:	0f 90       	pop	r0
    2b06:	0c be       	out	0x3c, r0	; 60
    2b08:	0f 90       	pop	r0
    2b0a:	0b be       	out	0x3b, r0	; 59
    2b0c:	0f 90       	pop	r0
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	0f 90       	pop	r0
    2b12:	08 95       	ret
    2b14:	08 95       	ret

00002b16 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	0f 92       	push	r0
    2b1e:	0b b6       	in	r0, 0x3b	; 59
    2b20:	0f 92       	push	r0
    2b22:	0c b6       	in	r0, 0x3c	; 60
    2b24:	0f 92       	push	r0
    2b26:	1f 92       	push	r1
    2b28:	11 24       	eor	r1, r1
    2b2a:	2f 92       	push	r2
    2b2c:	3f 92       	push	r3
    2b2e:	4f 92       	push	r4
    2b30:	5f 92       	push	r5
    2b32:	6f 92       	push	r6
    2b34:	7f 92       	push	r7
    2b36:	8f 92       	push	r8
    2b38:	9f 92       	push	r9
    2b3a:	af 92       	push	r10
    2b3c:	bf 92       	push	r11
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	ef 93       	push	r30
    2b64:	ff 93       	push	r31
    2b66:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    2b6a:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    2b6e:	0d b6       	in	r0, 0x3d	; 61
    2b70:	0d 92       	st	X+, r0
    2b72:	0e b6       	in	r0, 0x3e	; 62
    2b74:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2b76:	0e 94 ab 1c 	call	0x3956	; 0x3956 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2b7a:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    2b7e:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    2b82:	cd 91       	ld	r28, X+
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	dd 91       	ld	r29, X+
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	9f 90       	pop	r9
    2bb8:	8f 90       	pop	r8
    2bba:	7f 90       	pop	r7
    2bbc:	6f 90       	pop	r6
    2bbe:	5f 90       	pop	r5
    2bc0:	4f 90       	pop	r4
    2bc2:	3f 90       	pop	r3
    2bc4:	2f 90       	pop	r2
    2bc6:	1f 90       	pop	r1
    2bc8:	0f 90       	pop	r0
    2bca:	0c be       	out	0x3c, r0	; 60
    2bcc:	0f 90       	pop	r0
    2bce:	0b be       	out	0x3b, r0	; 59
    2bd0:	0f 90       	pop	r0
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2bd6:	08 95       	ret

00002bd8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2bd8:	0f 92       	push	r0
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	0f 92       	push	r0
    2be0:	0b b6       	in	r0, 0x3b	; 59
    2be2:	0f 92       	push	r0
    2be4:	0c b6       	in	r0, 0x3c	; 60
    2be6:	0f 92       	push	r0
    2be8:	1f 92       	push	r1
    2bea:	11 24       	eor	r1, r1
    2bec:	2f 92       	push	r2
    2bee:	3f 92       	push	r3
    2bf0:	4f 92       	push	r4
    2bf2:	5f 92       	push	r5
    2bf4:	6f 92       	push	r6
    2bf6:	7f 92       	push	r7
    2bf8:	8f 92       	push	r8
    2bfa:	9f 92       	push	r9
    2bfc:	af 92       	push	r10
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	2f 93       	push	r18
    2c0e:	3f 93       	push	r19
    2c10:	4f 93       	push	r20
    2c12:	5f 93       	push	r21
    2c14:	6f 93       	push	r22
    2c16:	7f 93       	push	r23
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	af 93       	push	r26
    2c1e:	bf 93       	push	r27
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	ef 93       	push	r30
    2c26:	ff 93       	push	r31
    2c28:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    2c2c:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    2c30:	0d b6       	in	r0, 0x3d	; 61
    2c32:	0d 92       	st	X+, r0
    2c34:	0e b6       	in	r0, 0x3e	; 62
    2c36:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2c38:	0e 94 8d 1a 	call	0x351a	; 0x351a <vTaskIncrementTick>
	vTaskSwitchContext();
    2c3c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2c40:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    2c44:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    2c48:	cd 91       	ld	r28, X+
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	dd 91       	ld	r29, X+
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	ff 91       	pop	r31
    2c52:	ef 91       	pop	r30
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	bf 91       	pop	r27
    2c5a:	af 91       	pop	r26
    2c5c:	9f 91       	pop	r25
    2c5e:	8f 91       	pop	r24
    2c60:	7f 91       	pop	r23
    2c62:	6f 91       	pop	r22
    2c64:	5f 91       	pop	r21
    2c66:	4f 91       	pop	r20
    2c68:	3f 91       	pop	r19
    2c6a:	2f 91       	pop	r18
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	df 90       	pop	r13
    2c76:	cf 90       	pop	r12
    2c78:	bf 90       	pop	r11
    2c7a:	af 90       	pop	r10
    2c7c:	9f 90       	pop	r9
    2c7e:	8f 90       	pop	r8
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	5f 90       	pop	r5
    2c86:	4f 90       	pop	r4
    2c88:	3f 90       	pop	r3
    2c8a:	2f 90       	pop	r2
    2c8c:	1f 90       	pop	r1
    2c8e:	0f 90       	pop	r0
    2c90:	0c be       	out	0x3c, r0	; 60
    2c92:	0f 90       	pop	r0
    2c94:	0b be       	out	0x3b, r0	; 59
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2c9c:	08 95       	ret

00002c9e <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    2c9e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2ca2:	18 95       	reti

00002ca4 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	ec 01       	movw	r28, r24
    2caa:	88 a1       	ldd	r24, Y+32	; 0x20
    2cac:	81 11       	cpse	r24, r1
    2cae:	0b c0       	rjmp	.+22     	; 0x2cc6 <prvCopyDataToQueue+0x22>
    2cb0:	88 81       	ld	r24, Y
    2cb2:	99 81       	ldd	r25, Y+1	; 0x01
    2cb4:	89 2b       	or	r24, r25
    2cb6:	e1 f5       	brne	.+120    	; 0x2d30 <prvCopyDataToQueue+0x8c>
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <vTaskPriorityDisinherit>
    2cc0:	1a 82       	std	Y+2, r1	; 0x02
    2cc2:	1b 82       	std	Y+3, r1	; 0x03
    2cc4:	35 c0       	rjmp	.+106    	; 0x2d30 <prvCopyDataToQueue+0x8c>
    2cc6:	41 11       	cpse	r20, r1
    2cc8:	17 c0       	rjmp	.+46     	; 0x2cf8 <prvCopyDataToQueue+0x54>
    2cca:	48 2f       	mov	r20, r24
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd2:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <memcpy>
    2cd6:	28 a1       	ldd	r18, Y+32	; 0x20
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	9d 81       	ldd	r25, Y+5	; 0x05
    2cdc:	82 0f       	add	r24, r18
    2cde:	91 1d       	adc	r25, r1
    2ce0:	8c 83       	std	Y+4, r24	; 0x04
    2ce2:	9d 83       	std	Y+5, r25	; 0x05
    2ce4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ce6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ce8:	82 17       	cp	r24, r18
    2cea:	93 07       	cpc	r25, r19
    2cec:	08 f1       	brcs	.+66     	; 0x2d30 <prvCopyDataToQueue+0x8c>
    2cee:	88 81       	ld	r24, Y
    2cf0:	99 81       	ldd	r25, Y+1	; 0x01
    2cf2:	8c 83       	std	Y+4, r24	; 0x04
    2cf4:	9d 83       	std	Y+5, r25	; 0x05
    2cf6:	1c c0       	rjmp	.+56     	; 0x2d30 <prvCopyDataToQueue+0x8c>
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    2d00:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <memcpy>
    2d04:	88 a1       	ldd	r24, Y+32	; 0x20
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	91 95       	neg	r25
    2d0a:	81 95       	neg	r24
    2d0c:	91 09       	sbc	r25, r1
    2d0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d10:	3f 81       	ldd	r19, Y+7	; 0x07
    2d12:	28 0f       	add	r18, r24
    2d14:	39 1f       	adc	r19, r25
    2d16:	2e 83       	std	Y+6, r18	; 0x06
    2d18:	3f 83       	std	Y+7, r19	; 0x07
    2d1a:	48 81       	ld	r20, Y
    2d1c:	59 81       	ldd	r21, Y+1	; 0x01
    2d1e:	24 17       	cp	r18, r20
    2d20:	35 07       	cpc	r19, r21
    2d22:	30 f4       	brcc	.+12     	; 0x2d30 <prvCopyDataToQueue+0x8c>
    2d24:	2a 81       	ldd	r18, Y+2	; 0x02
    2d26:	3b 81       	ldd	r19, Y+3	; 0x03
    2d28:	82 0f       	add	r24, r18
    2d2a:	93 1f       	adc	r25, r19
    2d2c:	8e 83       	std	Y+6, r24	; 0x06
    2d2e:	9f 83       	std	Y+7, r25	; 0x07
    2d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	8e 8f       	std	Y+30, r24	; 0x1e
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

00002d3c <prvCopyDataFromQueue>:
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	a1 f0       	breq	.+40     	; 0x2d6e <prvCopyDataFromQueue+0x32>
    2d46:	40 a1       	ldd	r20, Z+32	; 0x20
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	26 81       	ldd	r18, Z+6	; 0x06
    2d4c:	37 81       	ldd	r19, Z+7	; 0x07
    2d4e:	24 0f       	add	r18, r20
    2d50:	35 1f       	adc	r19, r21
    2d52:	26 83       	std	Z+6, r18	; 0x06
    2d54:	37 83       	std	Z+7, r19	; 0x07
    2d56:	a2 81       	ldd	r26, Z+2	; 0x02
    2d58:	b3 81       	ldd	r27, Z+3	; 0x03
    2d5a:	2a 17       	cp	r18, r26
    2d5c:	3b 07       	cpc	r19, r27
    2d5e:	10 f0       	brcs	.+4      	; 0x2d64 <prvCopyDataFromQueue+0x28>
    2d60:	86 83       	std	Z+6, r24	; 0x06
    2d62:	97 83       	std	Z+7, r25	; 0x07
    2d64:	cb 01       	movw	r24, r22
    2d66:	66 81       	ldd	r22, Z+6	; 0x06
    2d68:	77 81       	ldd	r23, Z+7	; 0x07
    2d6a:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <memcpy>
    2d6e:	08 95       	ret

00002d70 <prvUnlockQueue>:
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	ec 01       	movw	r28, r24
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	0f 92       	push	r0
    2d80:	8a a1       	ldd	r24, Y+34	; 0x22
    2d82:	18 16       	cp	r1, r24
    2d84:	b4 f4       	brge	.+44     	; 0x2db2 <prvUnlockQueue+0x42>
    2d86:	8b 89       	ldd	r24, Y+19	; 0x13
    2d88:	81 11       	cpse	r24, r1
    2d8a:	05 c0       	rjmp	.+10     	; 0x2d96 <prvUnlockQueue+0x26>
    2d8c:	12 c0       	rjmp	.+36     	; 0x2db2 <prvUnlockQueue+0x42>
    2d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d90:	81 11       	cpse	r24, r1
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <prvUnlockQueue+0x2c>
    2d94:	0e c0       	rjmp	.+28     	; 0x2db2 <prvUnlockQueue+0x42>
    2d96:	8e 01       	movw	r16, r28
    2d98:	0d 5e       	subi	r16, 0xED	; 237
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	c8 01       	movw	r24, r16
    2d9e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <xTaskRemoveFromEventList>
    2da2:	81 11       	cpse	r24, r1
    2da4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <vTaskMissedYield>
    2da8:	8a a1       	ldd	r24, Y+34	; 0x22
    2daa:	81 50       	subi	r24, 0x01	; 1
    2dac:	8a a3       	std	Y+34, r24	; 0x22
    2dae:	18 16       	cp	r1, r24
    2db0:	74 f3       	brlt	.-36     	; 0x2d8e <prvUnlockQueue+0x1e>
    2db2:	8f ef       	ldi	r24, 0xFF	; 255
    2db4:	8a a3       	std	Y+34, r24	; 0x22
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	0f 92       	push	r0
    2dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc2:	18 16       	cp	r1, r24
    2dc4:	b4 f4       	brge	.+44     	; 0x2df2 <prvUnlockQueue+0x82>
    2dc6:	88 85       	ldd	r24, Y+8	; 0x08
    2dc8:	81 11       	cpse	r24, r1
    2dca:	05 c0       	rjmp	.+10     	; 0x2dd6 <prvUnlockQueue+0x66>
    2dcc:	12 c0       	rjmp	.+36     	; 0x2df2 <prvUnlockQueue+0x82>
    2dce:	88 85       	ldd	r24, Y+8	; 0x08
    2dd0:	81 11       	cpse	r24, r1
    2dd2:	04 c0       	rjmp	.+8      	; 0x2ddc <prvUnlockQueue+0x6c>
    2dd4:	0e c0       	rjmp	.+28     	; 0x2df2 <prvUnlockQueue+0x82>
    2dd6:	8e 01       	movw	r16, r28
    2dd8:	08 5f       	subi	r16, 0xF8	; 248
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	c8 01       	movw	r24, r16
    2dde:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <xTaskRemoveFromEventList>
    2de2:	81 11       	cpse	r24, r1
    2de4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <vTaskMissedYield>
    2de8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dea:	81 50       	subi	r24, 0x01	; 1
    2dec:	89 a3       	std	Y+33, r24	; 0x21
    2dee:	18 16       	cp	r1, r24
    2df0:	74 f3       	brlt	.-36     	; 0x2dce <prvUnlockQueue+0x5e>
    2df2:	8f ef       	ldi	r24, 0xFF	; 255
    2df4:	89 a3       	std	Y+33, r24	; 0x21
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	08 95       	ret

00002e04 <xQueueGenericReset>:
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	61 30       	cpi	r22, 0x01	; 1
    2e0c:	59 f0       	breq	.+22     	; 0x2e24 <xQueueGenericReset+0x20>
    2e0e:	fc 01       	movw	r30, r24
    2e10:	23 89       	ldd	r18, Z+19	; 0x13
    2e12:	30 85       	ldd	r19, Z+8	; 0x08
    2e14:	31 11       	cpse	r19, r1
    2e16:	2c c0       	rjmp	.+88     	; 0x2e70 <xQueueGenericReset+0x6c>
    2e18:	11 e0       	ldi	r17, 0x01	; 1
    2e1a:	21 11       	cpse	r18, r1
    2e1c:	10 e0       	ldi	r17, 0x00	; 0
    2e1e:	21 11       	cpse	r18, r1
    2e20:	28 c0       	rjmp	.+80     	; 0x2e72 <xQueueGenericReset+0x6e>
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <xQueueGenericReset+0x22>
    2e24:	11 e0       	ldi	r17, 0x01	; 1
    2e26:	ec 01       	movw	r28, r24
    2e28:	48 81       	ld	r20, Y
    2e2a:	59 81       	ldd	r21, Y+1	; 0x01
    2e2c:	28 a1       	ldd	r18, Y+32	; 0x20
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e32:	62 9f       	mul	r22, r18
    2e34:	c0 01       	movw	r24, r0
    2e36:	63 9f       	mul	r22, r19
    2e38:	90 0d       	add	r25, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	ba 01       	movw	r22, r20
    2e3e:	68 0f       	add	r22, r24
    2e40:	79 1f       	adc	r23, r25
    2e42:	6a 83       	std	Y+2, r22	; 0x02
    2e44:	7b 83       	std	Y+3, r23	; 0x03
    2e46:	1e 8e       	std	Y+30, r1	; 0x1e
    2e48:	4c 83       	std	Y+4, r20	; 0x04
    2e4a:	5d 83       	std	Y+5, r21	; 0x05
    2e4c:	82 1b       	sub	r24, r18
    2e4e:	93 0b       	sbc	r25, r19
    2e50:	84 0f       	add	r24, r20
    2e52:	95 1f       	adc	r25, r21
    2e54:	8e 83       	std	Y+6, r24	; 0x06
    2e56:	9f 83       	std	Y+7, r25	; 0x07
    2e58:	8f ef       	ldi	r24, 0xFF	; 255
    2e5a:	89 a3       	std	Y+33, r24	; 0x21
    2e5c:	8a a3       	std	Y+34, r24	; 0x22
    2e5e:	ce 01       	movw	r24, r28
    2e60:	08 96       	adiw	r24, 0x08	; 8
    2e62:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    2e66:	ce 01       	movw	r24, r28
    2e68:	43 96       	adiw	r24, 0x13	; 19
    2e6a:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <xQueueGenericReset+0x6e>
    2e70:	10 e0       	ldi	r17, 0x00	; 0
    2e72:	81 2f       	mov	r24, r17
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	08 95       	ret

00002e7c <xQueueGenericCreate>:
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	88 23       	and	r24, r24
    2e86:	01 f1       	breq	.+64     	; 0x2ec8 <xQueueGenericCreate+0x4c>
    2e88:	06 2f       	mov	r16, r22
    2e8a:	18 2f       	mov	r17, r24
    2e8c:	83 e2       	ldi	r24, 0x23	; 35
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2e94:	ec 01       	movw	r28, r24
    2e96:	89 2b       	or	r24, r25
    2e98:	c9 f0       	breq	.+50     	; 0x2ecc <xQueueGenericCreate+0x50>
    2e9a:	10 9f       	mul	r17, r16
    2e9c:	c0 01       	movw	r24, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    2ea6:	88 83       	st	Y, r24
    2ea8:	99 83       	std	Y+1, r25	; 0x01
    2eaa:	89 2b       	or	r24, r25
    2eac:	39 f0       	breq	.+14     	; 0x2ebc <xQueueGenericCreate+0x40>
    2eae:	1f 8f       	std	Y+31, r17	; 0x1f
    2eb0:	08 a3       	std	Y+32, r16	; 0x20
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	0e 94 02 17 	call	0x2e04	; 0x2e04 <xQueueGenericReset>
    2eba:	08 c0       	rjmp	.+16     	; 0x2ecc <xQueueGenericCreate+0x50>
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <vPortFree>
    2ec2:	c0 e0       	ldi	r28, 0x00	; 0
    2ec4:	d0 e0       	ldi	r29, 0x00	; 0
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <xQueueGenericCreate+0x50>
    2ec8:	c0 e0       	ldi	r28, 0x00	; 0
    2eca:	d0 e0       	ldi	r29, 0x00	; 0
    2ecc:	ce 01       	movw	r24, r28
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	08 95       	ret

00002ed8 <xQueueGenericSend>:
    2ed8:	af 92       	push	r10
    2eda:	bf 92       	push	r11
    2edc:	cf 92       	push	r12
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	29 97       	sbiw	r28, 0x09	; 9
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	7c 01       	movw	r14, r24
    2ef8:	5b 01       	movw	r10, r22
    2efa:	2e 83       	std	Y+6, r18	; 0x06
    2efc:	3f 83       	std	Y+7, r19	; 0x07
    2efe:	48 87       	std	Y+8, r20	; 0x08
    2f00:	59 87       	std	Y+9, r21	; 0x09
    2f02:	10 e0       	ldi	r17, 0x00	; 0
    2f04:	6c 01       	movw	r12, r24
    2f06:	88 e0       	ldi	r24, 0x08	; 8
    2f08:	c8 0e       	add	r12, r24
    2f0a:	d1 1c       	adc	r13, r1
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	0f 92       	push	r0
    2f12:	f7 01       	movw	r30, r14
    2f14:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f16:	87 8d       	ldd	r24, Z+31	; 0x1f
    2f18:	98 17       	cp	r25, r24
    2f1a:	a8 f4       	brcc	.+42     	; 0x2f46 <xQueueGenericSend+0x6e>
    2f1c:	40 2f       	mov	r20, r16
    2f1e:	b5 01       	movw	r22, r10
    2f20:	c7 01       	movw	r24, r14
    2f22:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <prvCopyDataToQueue>
    2f26:	f7 01       	movw	r30, r14
    2f28:	83 89       	ldd	r24, Z+19	; 0x13
    2f2a:	88 23       	and	r24, r24
    2f2c:	41 f0       	breq	.+16     	; 0x2f3e <xQueueGenericSend+0x66>
    2f2e:	c7 01       	movw	r24, r14
    2f30:	43 96       	adiw	r24, 0x13	; 19
    2f32:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <xTaskRemoveFromEventList>
    2f36:	81 30       	cpi	r24, 0x01	; 1
    2f38:	11 f4       	brne	.+4      	; 0x2f3e <xQueueGenericSend+0x66>
    2f3a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    2f3e:	0f 90       	pop	r0
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	56 c0       	rjmp	.+172    	; 0x2ff2 <xQueueGenericSend+0x11a>
    2f46:	8e 81       	ldd	r24, Y+6	; 0x06
    2f48:	9f 81       	ldd	r25, Y+7	; 0x07
    2f4a:	a8 85       	ldd	r26, Y+8	; 0x08
    2f4c:	b9 85       	ldd	r27, Y+9	; 0x09
    2f4e:	89 2b       	or	r24, r25
    2f50:	8a 2b       	or	r24, r26
    2f52:	8b 2b       	or	r24, r27
    2f54:	21 f4       	brne	.+8      	; 0x2f5e <xQueueGenericSend+0x86>
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	4a c0       	rjmp	.+148    	; 0x2ff2 <xQueueGenericSend+0x11a>
    2f5e:	11 11       	cpse	r17, r1
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <xQueueGenericSend+0x94>
    2f62:	ce 01       	movw	r24, r28
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <vTaskSetTimeOutState>
    2f6a:	11 e0       	ldi	r17, 0x01	; 1
    2f6c:	0f 90       	pop	r0
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	0f 92       	push	r0
    2f7a:	f7 01       	movw	r30, r14
    2f7c:	81 a1       	ldd	r24, Z+33	; 0x21
    2f7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <xQueueGenericSend+0xac>
    2f82:	11 a2       	std	Z+33, r1	; 0x21
    2f84:	f7 01       	movw	r30, r14
    2f86:	82 a1       	ldd	r24, Z+34	; 0x22
    2f88:	8f 3f       	cpi	r24, 0xFF	; 255
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <xQueueGenericSend+0xb6>
    2f8c:	12 a2       	std	Z+34, r1	; 0x22
    2f8e:	0f 90       	pop	r0
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	be 01       	movw	r22, r28
    2f94:	6a 5f       	subi	r22, 0xFA	; 250
    2f96:	7f 4f       	sbci	r23, 0xFF	; 255
    2f98:	ce 01       	movw	r24, r28
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xTaskCheckForTimeOut>
    2fa0:	81 11       	cpse	r24, r1
    2fa2:	21 c0       	rjmp	.+66     	; 0x2fe6 <xQueueGenericSend+0x10e>
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	0f 92       	push	r0
    2faa:	f7 01       	movw	r30, r14
    2fac:	96 8d       	ldd	r25, Z+30	; 0x1e
    2fae:	0f 90       	pop	r0
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	87 8d       	ldd	r24, Z+31	; 0x1f
    2fb4:	98 13       	cpse	r25, r24
    2fb6:	11 c0       	rjmp	.+34     	; 0x2fda <xQueueGenericSend+0x102>
    2fb8:	4e 81       	ldd	r20, Y+6	; 0x06
    2fba:	5f 81       	ldd	r21, Y+7	; 0x07
    2fbc:	68 85       	ldd	r22, Y+8	; 0x08
    2fbe:	79 85       	ldd	r23, Y+9	; 0x09
    2fc0:	c6 01       	movw	r24, r12
    2fc2:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskPlaceOnEventList>
    2fc6:	c7 01       	movw	r24, r14
    2fc8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    2fcc:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    2fd0:	81 11       	cpse	r24, r1
    2fd2:	9c cf       	rjmp	.-200    	; 0x2f0c <xQueueGenericSend+0x34>
    2fd4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    2fd8:	99 cf       	rjmp	.-206    	; 0x2f0c <xQueueGenericSend+0x34>
    2fda:	c7 01       	movw	r24, r14
    2fdc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    2fe0:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    2fe4:	93 cf       	rjmp	.-218    	; 0x2f0c <xQueueGenericSend+0x34>
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    2fec:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	29 96       	adiw	r28, 0x09	; 9
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	af 90       	pop	r10
    300c:	08 95       	ret

0000300e <xQueueGenericReceive>:
    300e:	af 92       	push	r10
    3010:	bf 92       	push	r11
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	29 97       	sbiw	r28, 0x09	; 9
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	7c 01       	movw	r14, r24
    302e:	5b 01       	movw	r10, r22
    3030:	2e 83       	std	Y+6, r18	; 0x06
    3032:	3f 83       	std	Y+7, r19	; 0x07
    3034:	48 87       	std	Y+8, r20	; 0x08
    3036:	59 87       	std	Y+9, r21	; 0x09
    3038:	10 e0       	ldi	r17, 0x00	; 0
    303a:	6c 01       	movw	r12, r24
    303c:	83 e1       	ldi	r24, 0x13	; 19
    303e:	c8 0e       	add	r12, r24
    3040:	d1 1c       	adc	r13, r1
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	0f 92       	push	r0
    3048:	f7 01       	movw	r30, r14
    304a:	86 8d       	ldd	r24, Z+30	; 0x1e
    304c:	88 23       	and	r24, r24
    304e:	99 f1       	breq	.+102    	; 0x30b6 <xQueueGenericReceive+0xa8>
    3050:	c6 80       	ldd	r12, Z+6	; 0x06
    3052:	d7 80       	ldd	r13, Z+7	; 0x07
    3054:	b5 01       	movw	r22, r10
    3056:	c7 01       	movw	r24, r14
    3058:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <prvCopyDataFromQueue>
    305c:	01 11       	cpse	r16, r1
    305e:	1a c0       	rjmp	.+52     	; 0x3094 <xQueueGenericReceive+0x86>
    3060:	f7 01       	movw	r30, r14
    3062:	86 8d       	ldd	r24, Z+30	; 0x1e
    3064:	81 50       	subi	r24, 0x01	; 1
    3066:	86 8f       	std	Z+30, r24	; 0x1e
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	89 2b       	or	r24, r25
    306e:	29 f4       	brne	.+10     	; 0x307a <xQueueGenericReceive+0x6c>
    3070:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <xTaskGetCurrentTaskHandle>
    3074:	f7 01       	movw	r30, r14
    3076:	82 83       	std	Z+2, r24	; 0x02
    3078:	93 83       	std	Z+3, r25	; 0x03
    307a:	f7 01       	movw	r30, r14
    307c:	80 85       	ldd	r24, Z+8	; 0x08
    307e:	88 23       	and	r24, r24
    3080:	b1 f0       	breq	.+44     	; 0x30ae <xQueueGenericReceive+0xa0>
    3082:	c7 01       	movw	r24, r14
    3084:	08 96       	adiw	r24, 0x08	; 8
    3086:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <xTaskRemoveFromEventList>
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	81 f4       	brne	.+32     	; 0x30ae <xQueueGenericReceive+0xa0>
    308e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    3092:	0d c0       	rjmp	.+26     	; 0x30ae <xQueueGenericReceive+0xa0>
    3094:	f7 01       	movw	r30, r14
    3096:	c6 82       	std	Z+6, r12	; 0x06
    3098:	d7 82       	std	Z+7, r13	; 0x07
    309a:	83 89       	ldd	r24, Z+19	; 0x13
    309c:	88 23       	and	r24, r24
    309e:	39 f0       	breq	.+14     	; 0x30ae <xQueueGenericReceive+0xa0>
    30a0:	c7 01       	movw	r24, r14
    30a2:	43 96       	adiw	r24, 0x13	; 19
    30a4:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <xTaskRemoveFromEventList>
    30a8:	81 11       	cpse	r24, r1
    30aa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    30ae:	0f 90       	pop	r0
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	62 c0       	rjmp	.+196    	; 0x317a <xQueueGenericReceive+0x16c>
    30b6:	8e 81       	ldd	r24, Y+6	; 0x06
    30b8:	9f 81       	ldd	r25, Y+7	; 0x07
    30ba:	a8 85       	ldd	r26, Y+8	; 0x08
    30bc:	b9 85       	ldd	r27, Y+9	; 0x09
    30be:	89 2b       	or	r24, r25
    30c0:	8a 2b       	or	r24, r26
    30c2:	8b 2b       	or	r24, r27
    30c4:	21 f4       	brne	.+8      	; 0x30ce <xQueueGenericReceive+0xc0>
    30c6:	0f 90       	pop	r0
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	56 c0       	rjmp	.+172    	; 0x317a <xQueueGenericReceive+0x16c>
    30ce:	11 11       	cpse	r17, r1
    30d0:	05 c0       	rjmp	.+10     	; 0x30dc <xQueueGenericReceive+0xce>
    30d2:	ce 01       	movw	r24, r28
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <vTaskSetTimeOutState>
    30da:	11 e0       	ldi	r17, 0x01	; 1
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	0f 92       	push	r0
    30ea:	f7 01       	movw	r30, r14
    30ec:	81 a1       	ldd	r24, Z+33	; 0x21
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <xQueueGenericReceive+0xe6>
    30f2:	11 a2       	std	Z+33, r1	; 0x21
    30f4:	f7 01       	movw	r30, r14
    30f6:	82 a1       	ldd	r24, Z+34	; 0x22
    30f8:	8f 3f       	cpi	r24, 0xFF	; 255
    30fa:	09 f4       	brne	.+2      	; 0x30fe <xQueueGenericReceive+0xf0>
    30fc:	12 a2       	std	Z+34, r1	; 0x22
    30fe:	0f 90       	pop	r0
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	be 01       	movw	r22, r28
    3104:	6a 5f       	subi	r22, 0xFA	; 250
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	ce 01       	movw	r24, r28
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xTaskCheckForTimeOut>
    3110:	81 11       	cpse	r24, r1
    3112:	2d c0       	rjmp	.+90     	; 0x316e <xQueueGenericReceive+0x160>
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	0f 92       	push	r0
    311a:	f7 01       	movw	r30, r14
    311c:	86 8d       	ldd	r24, Z+30	; 0x1e
    311e:	0f 90       	pop	r0
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	81 11       	cpse	r24, r1
    3124:	1e c0       	rjmp	.+60     	; 0x3162 <xQueueGenericReceive+0x154>
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	89 2b       	or	r24, r25
    312c:	49 f4       	brne	.+18     	; 0x3140 <xQueueGenericReceive+0x132>
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	0f 92       	push	r0
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <vTaskPriorityInherit>
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	4e 81       	ldd	r20, Y+6	; 0x06
    3142:	5f 81       	ldd	r21, Y+7	; 0x07
    3144:	68 85       	ldd	r22, Y+8	; 0x08
    3146:	79 85       	ldd	r23, Y+9	; 0x09
    3148:	c6 01       	movw	r24, r12
    314a:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <vTaskPlaceOnEventList>
    314e:	c7 01       	movw	r24, r14
    3150:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    3154:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    3158:	81 11       	cpse	r24, r1
    315a:	73 cf       	rjmp	.-282    	; 0x3042 <xQueueGenericReceive+0x34>
    315c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    3160:	70 cf       	rjmp	.-288    	; 0x3042 <xQueueGenericReceive+0x34>
    3162:	c7 01       	movw	r24, r14
    3164:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    3168:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    316c:	6a cf       	rjmp	.-300    	; 0x3042 <xQueueGenericReceive+0x34>
    316e:	c7 01       	movw	r24, r14
    3170:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvUnlockQueue>
    3174:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	29 96       	adiw	r28, 0x09	; 9
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	bf 90       	pop	r11
    3192:	af 90       	pop	r10
    3194:	08 95       	ret

00003196 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    319c:	fc 01       	movw	r30, r24
    319e:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    31a0:	0f 90       	pop	r0
    31a2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    31a4:	08 95       	ret

000031a6 <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    31a6:	ca e4       	ldi	r28, 0x4A	; 74
    31a8:	d1 e3       	ldi	r29, 0x31	; 49
    31aa:	88 81       	ld	r24, Y
    31ac:	82 30       	cpi	r24, 0x02	; 2
    31ae:	e8 f3       	brcs	.-6      	; 0x31aa <prvIdleTask+0x4>
    31b0:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    31b4:	fa cf       	rjmp	.-12     	; 0x31aa <prvIdleTask+0x4>

000031b6 <prvAddCurrentTaskToDelayedList>:
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	6b 01       	movw	r12, r22
    31c0:	7c 01       	movw	r14, r24
    31c2:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    31c6:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    31ca:	62 83       	std	Z+2, r22	; 0x02
    31cc:	73 83       	std	Z+3, r23	; 0x03
    31ce:	84 83       	std	Z+4, r24	; 0x04
    31d0:	95 83       	std	Z+5, r25	; 0x05
    31d2:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    31d6:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    31da:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    31de:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    31e2:	c8 16       	cp	r12, r24
    31e4:	d9 06       	cpc	r13, r25
    31e6:	ea 06       	cpc	r14, r26
    31e8:	fb 06       	cpc	r15, r27
    31ea:	68 f4       	brcc	.+26     	; 0x3206 <prvAddCurrentTaskToDelayedList+0x50>
    31ec:	60 91 76 31 	lds	r22, 0x3176	; 0x803176 <pxCurrentTCB>
    31f0:	70 91 77 31 	lds	r23, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    31f4:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <pxOverflowDelayedTaskList>
    31f8:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <pxOverflowDelayedTaskList+0x1>
    31fc:	6e 5f       	subi	r22, 0xFE	; 254
    31fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3200:	0e 94 66 14 	call	0x28cc	; 0x28cc <vListInsert>
    3204:	21 c0       	rjmp	.+66     	; 0x3248 <prvAddCurrentTaskToDelayedList+0x92>
    3206:	60 91 76 31 	lds	r22, 0x3176	; 0x803176 <pxCurrentTCB>
    320a:	70 91 77 31 	lds	r23, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    320e:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <pxDelayedTaskList>
    3212:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    3216:	6e 5f       	subi	r22, 0xFE	; 254
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	0e 94 66 14 	call	0x28cc	; 0x28cc <vListInsert>
    321e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3222:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3226:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    322a:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    322e:	c8 16       	cp	r12, r24
    3230:	d9 06       	cpc	r13, r25
    3232:	ea 06       	cpc	r14, r26
    3234:	fb 06       	cpc	r15, r27
    3236:	40 f4       	brcc	.+16     	; 0x3248 <prvAddCurrentTaskToDelayedList+0x92>
    3238:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    323c:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3240:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    3244:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	df 90       	pop	r13
    324e:	cf 90       	pop	r12
    3250:	08 95       	ret

00003252 <xTaskGenericCreate>:
    3252:	4f 92       	push	r4
    3254:	5f 92       	push	r5
    3256:	6f 92       	push	r6
    3258:	7f 92       	push	r7
    325a:	8f 92       	push	r8
    325c:	9f 92       	push	r9
    325e:	af 92       	push	r10
    3260:	bf 92       	push	r11
    3262:	cf 92       	push	r12
    3264:	df 92       	push	r13
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	5c 01       	movw	r10, r24
    3274:	4b 01       	movw	r8, r22
    3276:	3a 01       	movw	r6, r20
    3278:	29 01       	movw	r4, r18
    327a:	88 e2       	ldi	r24, 0x28	; 40
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    3282:	ec 01       	movw	r28, r24
    3284:	89 2b       	or	r24, r25
    3286:	09 f4       	brne	.+2      	; 0x328a <xTaskGenericCreate+0x38>
    3288:	d4 c0       	rjmp	.+424    	; 0x3432 <xTaskGenericCreate+0x1e0>
    328a:	c1 14       	cp	r12, r1
    328c:	d1 04       	cpc	r13, r1
    328e:	09 f0       	breq	.+2      	; 0x3292 <xTaskGenericCreate+0x40>
    3290:	cc c0       	rjmp	.+408    	; 0x342a <xTaskGenericCreate+0x1d8>
    3292:	c3 01       	movw	r24, r6
    3294:	0e 94 58 13 	call	0x26b0	; 0x26b0 <pvPortMalloc>
    3298:	8b 8f       	std	Y+27, r24	; 0x1b
    329a:	9c 8f       	std	Y+28, r25	; 0x1c
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	21 f4       	brne	.+8      	; 0x32a8 <xTaskGenericCreate+0x56>
    32a0:	ce 01       	movw	r24, r28
    32a2:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <vPortFree>
    32a6:	c5 c0       	rjmp	.+394    	; 0x3432 <xTaskGenericCreate+0x1e0>
    32a8:	a3 01       	movw	r20, r6
    32aa:	61 e1       	ldi	r22, 0x11	; 17
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <memset>
    32b2:	93 01       	movw	r18, r6
    32b4:	21 50       	subi	r18, 0x01	; 1
    32b6:	31 09       	sbc	r19, r1
    32b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32bc:	3c 01       	movw	r6, r24
    32be:	62 0e       	add	r6, r18
    32c0:	73 1e       	adc	r7, r19
    32c2:	4a e0       	ldi	r20, 0x0A	; 10
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	b4 01       	movw	r22, r8
    32c8:	ce 01       	movw	r24, r28
    32ca:	4d 96       	adiw	r24, 0x1d	; 29
    32cc:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <strncpy>
    32d0:	1e a2       	std	Y+38, r1	; 0x26
    32d2:	10 2f       	mov	r17, r16
    32d4:	04 30       	cpi	r16, 0x04	; 4
    32d6:	08 f0       	brcs	.+2      	; 0x32da <xTaskGenericCreate+0x88>
    32d8:	13 e0       	ldi	r17, 0x03	; 3
    32da:	1a 8f       	std	Y+26, r17	; 0x1a
    32dc:	1f a3       	std	Y+39, r17	; 0x27
    32de:	6e 01       	movw	r12, r28
    32e0:	22 e0       	ldi	r18, 0x02	; 2
    32e2:	c2 0e       	add	r12, r18
    32e4:	d1 1c       	adc	r13, r1
    32e6:	c6 01       	movw	r24, r12
    32e8:	0e 94 3b 14 	call	0x2876	; 0x2876 <vListInitialiseItem>
    32ec:	ce 01       	movw	r24, r28
    32ee:	0e 96       	adiw	r24, 0x0e	; 14
    32f0:	0e 94 3b 14 	call	0x2876	; 0x2876 <vListInitialiseItem>
    32f4:	ca 87       	std	Y+10, r28	; 0x0a
    32f6:	db 87       	std	Y+11, r29	; 0x0b
    32f8:	84 e0       	ldi	r24, 0x04	; 4
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	a0 e0       	ldi	r26, 0x00	; 0
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	81 1b       	sub	r24, r17
    3302:	91 09       	sbc	r25, r1
    3304:	a1 09       	sbc	r26, r1
    3306:	b1 09       	sbc	r27, r1
    3308:	8e 87       	std	Y+14, r24	; 0x0e
    330a:	9f 87       	std	Y+15, r25	; 0x0f
    330c:	a8 8b       	std	Y+16, r26	; 0x10
    330e:	b9 8b       	std	Y+17, r27	; 0x11
    3310:	ce 8b       	std	Y+22, r28	; 0x16
    3312:	df 8b       	std	Y+23, r29	; 0x17
    3314:	a2 01       	movw	r20, r4
    3316:	b5 01       	movw	r22, r10
    3318:	c3 01       	movw	r24, r6
    331a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <pxPortInitialiseStack>
    331e:	88 83       	st	Y, r24
    3320:	99 83       	std	Y+1, r25	; 0x01
    3322:	e1 14       	cp	r14, r1
    3324:	f1 04       	cpc	r15, r1
    3326:	19 f0       	breq	.+6      	; 0x332e <xTaskGenericCreate+0xdc>
    3328:	f7 01       	movw	r30, r14
    332a:	c0 83       	st	Z, r28
    332c:	d1 83       	std	Z+1, r29	; 0x01
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	0f 92       	push	r0
    3334:	80 91 22 31 	lds	r24, 0x3122	; 0x803122 <uxCurrentNumberOfTasks>
    3338:	8f 5f       	subi	r24, 0xFF	; 255
    333a:	80 93 22 31 	sts	0x3122, r24	; 0x803122 <uxCurrentNumberOfTasks>
    333e:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3342:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3346:	89 2b       	or	r24, r25
    3348:	89 f5       	brne	.+98     	; 0x33ac <xTaskGenericCreate+0x15a>
    334a:	c0 93 76 31 	sts	0x3176, r28	; 0x803176 <pxCurrentTCB>
    334e:	d0 93 77 31 	sts	0x3177, r29	; 0x803177 <pxCurrentTCB+0x1>
    3352:	80 91 22 31 	lds	r24, 0x3122	; 0x803122 <uxCurrentNumberOfTasks>
    3356:	81 30       	cpi	r24, 0x01	; 1
    3358:	c1 f5       	brne	.+112    	; 0x33ca <xTaskGenericCreate+0x178>
    335a:	8a e4       	ldi	r24, 0x4A	; 74
    335c:	91 e3       	ldi	r25, 0x31	; 49
    335e:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    3362:	85 e5       	ldi	r24, 0x55	; 85
    3364:	91 e3       	ldi	r25, 0x31	; 49
    3366:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    336a:	80 e6       	ldi	r24, 0x60	; 96
    336c:	91 e3       	ldi	r25, 0x31	; 49
    336e:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    3372:	8b e6       	ldi	r24, 0x6B	; 107
    3374:	91 e3       	ldi	r25, 0x31	; 49
    3376:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    337a:	8f e3       	ldi	r24, 0x3F	; 63
    337c:	91 e3       	ldi	r25, 0x31	; 49
    337e:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    3382:	84 e3       	ldi	r24, 0x34	; 52
    3384:	91 e3       	ldi	r25, 0x31	; 49
    3386:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    338a:	85 e2       	ldi	r24, 0x25	; 37
    338c:	91 e3       	ldi	r25, 0x31	; 49
    338e:	0e 94 2a 14 	call	0x2854	; 0x2854 <vListInitialise>
    3392:	8f e3       	ldi	r24, 0x3F	; 63
    3394:	91 e3       	ldi	r25, 0x31	; 49
    3396:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <pxDelayedTaskList>
    339a:	90 93 33 31 	sts	0x3133, r25	; 0x803133 <pxDelayedTaskList+0x1>
    339e:	84 e3       	ldi	r24, 0x34	; 52
    33a0:	91 e3       	ldi	r25, 0x31	; 49
    33a2:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <pxOverflowDelayedTaskList>
    33a6:	90 93 31 31 	sts	0x3131, r25	; 0x803131 <pxOverflowDelayedTaskList+0x1>
    33aa:	0f c0       	rjmp	.+30     	; 0x33ca <xTaskGenericCreate+0x178>
    33ac:	80 91 1b 31 	lds	r24, 0x311B	; 0x80311b <xSchedulerRunning>
    33b0:	81 11       	cpse	r24, r1
    33b2:	0b c0       	rjmp	.+22     	; 0x33ca <xTaskGenericCreate+0x178>
    33b4:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    33b8:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    33bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    33be:	08 17       	cp	r16, r24
    33c0:	20 f0       	brcs	.+8      	; 0x33ca <xTaskGenericCreate+0x178>
    33c2:	c0 93 76 31 	sts	0x3176, r28	; 0x803176 <pxCurrentTCB>
    33c6:	d0 93 77 31 	sts	0x3177, r29	; 0x803177 <pxCurrentTCB+0x1>
    33ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33cc:	90 91 1d 31 	lds	r25, 0x311D	; 0x80311d <uxTopUsedPriority>
    33d0:	98 17       	cp	r25, r24
    33d2:	10 f4       	brcc	.+4      	; 0x33d8 <xTaskGenericCreate+0x186>
    33d4:	80 93 1d 31 	sts	0x311D, r24	; 0x80311d <uxTopUsedPriority>
    33d8:	90 91 16 31 	lds	r25, 0x3116	; 0x803116 <uxTaskNumber>
    33dc:	9f 5f       	subi	r25, 0xFF	; 255
    33de:	90 93 16 31 	sts	0x3116, r25	; 0x803116 <uxTaskNumber>
    33e2:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    33e6:	98 17       	cp	r25, r24
    33e8:	10 f4       	brcc	.+4      	; 0x33ee <xTaskGenericCreate+0x19c>
    33ea:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    33ee:	fb e0       	ldi	r31, 0x0B	; 11
    33f0:	8f 9f       	mul	r24, r31
    33f2:	c0 01       	movw	r24, r0
    33f4:	11 24       	eor	r1, r1
    33f6:	b6 01       	movw	r22, r12
    33f8:	86 5b       	subi	r24, 0xB6	; 182
    33fa:	9e 4c       	sbci	r25, 0xCE	; 206
    33fc:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
    3400:	0f 90       	pop	r0
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	80 91 1b 31 	lds	r24, 0x311B	; 0x80311b <xSchedulerRunning>
    3408:	88 23       	and	r24, r24
    340a:	59 f0       	breq	.+22     	; 0x3422 <xTaskGenericCreate+0x1d0>
    340c:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    3410:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3414:	82 8d       	ldd	r24, Z+26	; 0x1a
    3416:	80 17       	cp	r24, r16
    3418:	30 f4       	brcc	.+12     	; 0x3426 <xTaskGenericCreate+0x1d4>
    341a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	09 c0       	rjmp	.+18     	; 0x3434 <xTaskGenericCreate+0x1e2>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	07 c0       	rjmp	.+14     	; 0x3434 <xTaskGenericCreate+0x1e2>
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	05 c0       	rjmp	.+10     	; 0x3434 <xTaskGenericCreate+0x1e2>
    342a:	cb 8e       	std	Y+27, r12	; 0x1b
    342c:	dc 8e       	std	Y+28, r13	; 0x1c
    342e:	c6 01       	movw	r24, r12
    3430:	3b cf       	rjmp	.-394    	; 0x32a8 <xTaskGenericCreate+0x56>
    3432:	8f ef       	ldi	r24, 0xFF	; 255
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	bf 90       	pop	r11
    3446:	af 90       	pop	r10
    3448:	9f 90       	pop	r9
    344a:	8f 90       	pop	r8
    344c:	7f 90       	pop	r7
    344e:	6f 90       	pop	r6
    3450:	5f 90       	pop	r5
    3452:	4f 90       	pop	r4
    3454:	08 95       	ret

00003456 <uxTaskPriorityGet>:
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	0f 92       	push	r0
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	21 f4       	brne	.+8      	; 0x3468 <uxTaskPriorityGet+0x12>
    3460:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3464:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3468:	0f 90       	pop	r0
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	fc 01       	movw	r30, r24
    346e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3470:	08 95       	ret

00003472 <vTaskStartScheduler>:
    3472:	af 92       	push	r10
    3474:	bf 92       	push	r11
    3476:	cf 92       	push	r12
    3478:	df 92       	push	r13
    347a:	ef 92       	push	r14
    347c:	ff 92       	push	r15
    347e:	0f 93       	push	r16
    3480:	a1 2c       	mov	r10, r1
    3482:	b1 2c       	mov	r11, r1
    3484:	c1 2c       	mov	r12, r1
    3486:	d1 2c       	mov	r13, r1
    3488:	0f 2e       	mov	r0, r31
    348a:	f3 e2       	ldi	r31, 0x23	; 35
    348c:	ef 2e       	mov	r14, r31
    348e:	f1 e3       	ldi	r31, 0x31	; 49
    3490:	ff 2e       	mov	r15, r31
    3492:	f0 2d       	mov	r31, r0
    3494:	00 e0       	ldi	r16, 0x00	; 0
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	44 e6       	ldi	r20, 0x64	; 100
    349c:	50 e0       	ldi	r21, 0x00	; 0
    349e:	61 ec       	ldi	r22, 0xC1	; 193
    34a0:	70 e2       	ldi	r23, 0x20	; 32
    34a2:	83 ed       	ldi	r24, 0xD3	; 211
    34a4:	98 e1       	ldi	r25, 0x18	; 24
    34a6:	0e 94 29 19 	call	0x3252	; 0x3252 <xTaskGenericCreate>
    34aa:	81 30       	cpi	r24, 0x01	; 1
    34ac:	69 f4       	brne	.+26     	; 0x34c8 <vTaskStartScheduler+0x56>
    34ae:	f8 94       	cli
    34b0:	80 93 1b 31 	sts	0x311B, r24	; 0x80311b <xSchedulerRunning>
    34b4:	10 92 1e 31 	sts	0x311E, r1	; 0x80311e <xTickCount>
    34b8:	10 92 1f 31 	sts	0x311F, r1	; 0x80311f <xTickCount+0x1>
    34bc:	10 92 20 31 	sts	0x3120, r1	; 0x803120 <xTickCount+0x2>
    34c0:	10 92 21 31 	sts	0x3121, r1	; 0x803121 <xTickCount+0x3>
    34c4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xPortStartScheduler>
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	af 90       	pop	r10
    34d6:	08 95       	ret

000034d8 <vTaskSuspendAll>:
    34d8:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	80 93 1a 31 	sts	0x311A, r24	; 0x80311a <uxSchedulerSuspended>
    34e2:	08 95       	ret

000034e4 <xTaskGetTickCount>:
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	0f 92       	push	r0
    34ea:	60 91 1e 31 	lds	r22, 0x311E	; 0x80311e <xTickCount>
    34ee:	70 91 1f 31 	lds	r23, 0x311F	; 0x80311f <xTickCount+0x1>
    34f2:	80 91 20 31 	lds	r24, 0x3120	; 0x803120 <xTickCount+0x2>
    34f6:	90 91 21 31 	lds	r25, 0x3121	; 0x803121 <xTickCount+0x3>
    34fa:	0f 90       	pop	r0
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	08 95       	ret

00003500 <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	21 f4       	brne	.+8      	; 0x350c <pcTaskGetTaskName+0xc>
    3504:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3508:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    350c:	4d 96       	adiw	r24, 0x1d	; 29
    350e:	08 95       	ret

00003510 <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    3510:	80 91 23 31 	lds	r24, 0x3123	; 0x803123 <xIdleTaskHandle>
    3514:	90 91 24 31 	lds	r25, 0x3124	; 0x803124 <xIdleTaskHandle+0x1>
    3518:	08 95       	ret

0000351a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    351a:	ff 92       	push	r15
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3524:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    3528:	81 11       	cpse	r24, r1
    352a:	ed c0       	rjmp	.+474    	; 0x3706 <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    352c:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3530:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    3534:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    3538:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    353c:	01 96       	adiw	r24, 0x01	; 1
    353e:	a1 1d       	adc	r26, r1
    3540:	b1 1d       	adc	r27, r1
    3542:	80 93 1e 31 	sts	0x311E, r24	; 0x80311e <xTickCount>
    3546:	90 93 1f 31 	sts	0x311F, r25	; 0x80311f <xTickCount+0x1>
    354a:	a0 93 20 31 	sts	0x3120, r26	; 0x803120 <xTickCount+0x2>
    354e:	b0 93 21 31 	sts	0x3121, r27	; 0x803121 <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    3552:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3556:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    355a:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    355e:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    3562:	89 2b       	or	r24, r25
    3564:	8a 2b       	or	r24, r26
    3566:	8b 2b       	or	r24, r27
    3568:	f1 f5       	brne	.+124    	; 0x35e6 <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    356a:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <pxDelayedTaskList>
    356e:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3572:	20 91 30 31 	lds	r18, 0x3130	; 0x803130 <pxOverflowDelayedTaskList>
    3576:	30 91 31 31 	lds	r19, 0x3131	; 0x803131 <pxOverflowDelayedTaskList+0x1>
    357a:	20 93 32 31 	sts	0x3132, r18	; 0x803132 <pxDelayedTaskList>
    357e:	30 93 33 31 	sts	0x3133, r19	; 0x803133 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    3582:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <pxOverflowDelayedTaskList>
    3586:	90 93 31 31 	sts	0x3131, r25	; 0x803131 <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    358a:	80 91 17 31 	lds	r24, 0x3117	; 0x803117 <xNumOfOverflows>
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	80 93 17 31 	sts	0x3117, r24	; 0x803117 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3594:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    3598:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    359c:	80 81       	ld	r24, Z
    359e:	81 11       	cpse	r24, r1
    35a0:	0c c0       	rjmp	.+24     	; 0x35ba <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    35a2:	8f ef       	ldi	r24, 0xFF	; 255
    35a4:	9f ef       	ldi	r25, 0xFF	; 255
    35a6:	dc 01       	movw	r26, r24
    35a8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    35ac:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    35b0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    35b4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    35b8:	16 c0       	rjmp	.+44     	; 0x35e6 <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    35ba:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    35be:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    35c2:	07 80       	ldd	r0, Z+7	; 0x07
    35c4:	f0 85       	ldd	r31, Z+8	; 0x08
    35c6:	e0 2d       	mov	r30, r0
    35c8:	00 84       	ldd	r0, Z+8	; 0x08
    35ca:	f1 85       	ldd	r31, Z+9	; 0x09
    35cc:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    35ce:	82 81       	ldd	r24, Z+2	; 0x02
    35d0:	93 81       	ldd	r25, Z+3	; 0x03
    35d2:	a4 81       	ldd	r26, Z+4	; 0x04
    35d4:	b5 81       	ldd	r27, Z+5	; 0x05
    35d6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    35da:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    35de:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    35e2:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    35e6:	40 91 1e 31 	lds	r20, 0x311E	; 0x80311e <xTickCount>
    35ea:	50 91 1f 31 	lds	r21, 0x311F	; 0x80311f <xTickCount+0x1>
    35ee:	60 91 20 31 	lds	r22, 0x3120	; 0x803120 <xTickCount+0x2>
    35f2:	70 91 21 31 	lds	r23, 0x3121	; 0x803121 <xTickCount+0x3>
    35f6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    35fa:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    35fe:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3602:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3606:	48 17       	cp	r20, r24
    3608:	59 07       	cpc	r21, r25
    360a:	6a 07       	cpc	r22, r26
    360c:	7b 07       	cpc	r23, r27
    360e:	08 f4       	brcc	.+2      	; 0x3612 <vTaskIncrementTick+0xf8>
    3610:	7f c0       	rjmp	.+254    	; 0x3710 <vTaskIncrementTick+0x1f6>
    3612:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    3616:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    361a:	80 81       	ld	r24, Z
    361c:	88 23       	and	r24, r24
    361e:	f9 f0       	breq	.+62     	; 0x365e <vTaskIncrementTick+0x144>
    3620:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    3624:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    3628:	07 80       	ldd	r0, Z+7	; 0x07
    362a:	f0 85       	ldd	r31, Z+8	; 0x08
    362c:	e0 2d       	mov	r30, r0
    362e:	c0 85       	ldd	r28, Z+8	; 0x08
    3630:	d1 85       	ldd	r29, Z+9	; 0x09
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	9b 81       	ldd	r25, Y+3	; 0x03
    3636:	ac 81       	ldd	r26, Y+4	; 0x04
    3638:	bd 81       	ldd	r27, Y+5	; 0x05
    363a:	40 91 1e 31 	lds	r20, 0x311E	; 0x80311e <xTickCount>
    363e:	50 91 1f 31 	lds	r21, 0x311F	; 0x80311f <xTickCount+0x1>
    3642:	60 91 20 31 	lds	r22, 0x3120	; 0x803120 <xTickCount+0x2>
    3646:	70 91 21 31 	lds	r23, 0x3121	; 0x803121 <xTickCount+0x3>
    364a:	48 17       	cp	r20, r24
    364c:	59 07       	cpc	r21, r25
    364e:	6a 07       	cpc	r22, r26
    3650:	7b 07       	cpc	r23, r27
    3652:	58 f1       	brcs	.+86     	; 0x36aa <vTaskIncrementTick+0x190>
    3654:	0f 2e       	mov	r0, r31
    3656:	fb e0       	ldi	r31, 0x0B	; 11
    3658:	ff 2e       	mov	r15, r31
    365a:	f0 2d       	mov	r31, r0
    365c:	2f c0       	rjmp	.+94     	; 0x36bc <vTaskIncrementTick+0x1a2>
    365e:	8f ef       	ldi	r24, 0xFF	; 255
    3660:	9f ef       	ldi	r25, 0xFF	; 255
    3662:	dc 01       	movw	r26, r24
    3664:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3668:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    366c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3670:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3674:	4d c0       	rjmp	.+154    	; 0x3710 <vTaskIncrementTick+0x1f6>
    3676:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    367a:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    367e:	07 80       	ldd	r0, Z+7	; 0x07
    3680:	f0 85       	ldd	r31, Z+8	; 0x08
    3682:	e0 2d       	mov	r30, r0
    3684:	c0 85       	ldd	r28, Z+8	; 0x08
    3686:	d1 85       	ldd	r29, Z+9	; 0x09
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	ac 81       	ldd	r26, Y+4	; 0x04
    368e:	bd 81       	ldd	r27, Y+5	; 0x05
    3690:	40 91 1e 31 	lds	r20, 0x311E	; 0x80311e <xTickCount>
    3694:	50 91 1f 31 	lds	r21, 0x311F	; 0x80311f <xTickCount+0x1>
    3698:	60 91 20 31 	lds	r22, 0x3120	; 0x803120 <xTickCount+0x2>
    369c:	70 91 21 31 	lds	r23, 0x3121	; 0x803121 <xTickCount+0x3>
    36a0:	48 17       	cp	r20, r24
    36a2:	59 07       	cpc	r21, r25
    36a4:	6a 07       	cpc	r22, r26
    36a6:	7b 07       	cpc	r23, r27
    36a8:	48 f4       	brcc	.+18     	; 0x36bc <vTaskIncrementTick+0x1a2>
    36aa:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    36ae:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    36b2:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    36b6:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    36ba:	2a c0       	rjmp	.+84     	; 0x3710 <vTaskIncrementTick+0x1f6>
    36bc:	8e 01       	movw	r16, r28
    36be:	0e 5f       	subi	r16, 0xFE	; 254
    36c0:	1f 4f       	sbci	r17, 0xFF	; 255
    36c2:	c8 01       	movw	r24, r16
    36c4:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
    36c8:	88 8d       	ldd	r24, Y+24	; 0x18
    36ca:	99 8d       	ldd	r25, Y+25	; 0x19
    36cc:	89 2b       	or	r24, r25
    36ce:	21 f0       	breq	.+8      	; 0x36d8 <vTaskIncrementTick+0x1be>
    36d0:	ce 01       	movw	r24, r28
    36d2:	0e 96       	adiw	r24, 0x0e	; 14
    36d4:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
    36d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36da:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    36de:	98 17       	cp	r25, r24
    36e0:	10 f4       	brcc	.+4      	; 0x36e6 <vTaskIncrementTick+0x1cc>
    36e2:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    36e6:	f8 9e       	mul	r15, r24
    36e8:	c0 01       	movw	r24, r0
    36ea:	11 24       	eor	r1, r1
    36ec:	b8 01       	movw	r22, r16
    36ee:	86 5b       	subi	r24, 0xB6	; 182
    36f0:	9e 4c       	sbci	r25, 0xCE	; 206
    36f2:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
    36f6:	e0 91 32 31 	lds	r30, 0x3132	; 0x803132 <pxDelayedTaskList>
    36fa:	f0 91 33 31 	lds	r31, 0x3133	; 0x803133 <pxDelayedTaskList+0x1>
    36fe:	80 81       	ld	r24, Z
    3700:	81 11       	cpse	r24, r1
    3702:	b9 cf       	rjmp	.-142    	; 0x3676 <vTaskIncrementTick+0x15c>
    3704:	ac cf       	rjmp	.-168    	; 0x365e <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    3706:	80 91 19 31 	lds	r24, 0x3119	; 0x803119 <uxMissedTicks>
    370a:	8f 5f       	subi	r24, 0xFF	; 255
    370c:	80 93 19 31 	sts	0x3119, r24	; 0x803119 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	ff 90       	pop	r15
    371a:	08 95       	ret

0000371c <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3732:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    3736:	81 50       	subi	r24, 0x01	; 1
    3738:	80 93 1a 31 	sts	0x311A, r24	; 0x80311a <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    373c:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    3740:	81 11       	cpse	r24, r1
    3742:	60 c0       	rjmp	.+192    	; 0x3804 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3744:	80 91 22 31 	lds	r24, 0x3122	; 0x803122 <uxCurrentNumberOfTasks>
    3748:	81 11       	cpse	r24, r1
    374a:	2c c0       	rjmp	.+88     	; 0x37a4 <xTaskResumeAll+0x88>
    374c:	5e c0       	rjmp	.+188    	; 0x380a <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    374e:	d7 01       	movw	r26, r14
    3750:	17 96       	adiw	r26, 0x07	; 7
    3752:	ed 91       	ld	r30, X+
    3754:	fc 91       	ld	r31, X
    3756:	18 97       	sbiw	r26, 0x08	; 8
    3758:	c0 85       	ldd	r28, Z+8	; 0x08
    375a:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    375c:	ce 01       	movw	r24, r28
    375e:	0e 96       	adiw	r24, 0x0e	; 14
    3760:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3764:	8e 01       	movw	r16, r28
    3766:	0e 5f       	subi	r16, 0xFE	; 254
    3768:	1f 4f       	sbci	r17, 0xFF	; 255
    376a:	c8 01       	movw	r24, r16
    376c:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3770:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3772:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    3776:	98 17       	cp	r25, r24
    3778:	10 f4       	brcc	.+4      	; 0x377e <xTaskResumeAll+0x62>
    377a:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    377e:	d8 9e       	mul	r13, r24
    3780:	c0 01       	movw	r24, r0
    3782:	11 24       	eor	r1, r1
    3784:	b8 01       	movw	r22, r16
    3786:	86 5b       	subi	r24, 0xB6	; 182
    3788:	9e 4c       	sbci	r25, 0xCE	; 206
    378a:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    378e:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    3792:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3796:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3798:	82 8d       	ldd	r24, Z+26	; 0x1a
    379a:	98 17       	cp	r25, r24
    379c:	70 f0       	brcs	.+28     	; 0x37ba <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    379e:	cc 24       	eor	r12, r12
    37a0:	c3 94       	inc	r12
    37a2:	0b c0       	rjmp	.+22     	; 0x37ba <xTaskResumeAll+0x9e>
    37a4:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    37a6:	0f 2e       	mov	r0, r31
    37a8:	f5 e2       	ldi	r31, 0x25	; 37
    37aa:	ef 2e       	mov	r14, r31
    37ac:	f1 e3       	ldi	r31, 0x31	; 49
    37ae:	ff 2e       	mov	r15, r31
    37b0:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    37b2:	0f 2e       	mov	r0, r31
    37b4:	fb e0       	ldi	r31, 0x0B	; 11
    37b6:	df 2e       	mov	r13, r31
    37b8:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    37ba:	f7 01       	movw	r30, r14
    37bc:	80 81       	ld	r24, Z
    37be:	81 11       	cpse	r24, r1
    37c0:	c6 cf       	rjmp	.-116    	; 0x374e <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    37c2:	80 91 19 31 	lds	r24, 0x3119	; 0x803119 <uxMissedTicks>
    37c6:	88 23       	and	r24, r24
    37c8:	81 f0       	breq	.+32     	; 0x37ea <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    37ca:	80 91 19 31 	lds	r24, 0x3119	; 0x803119 <uxMissedTicks>
    37ce:	88 23       	and	r24, r24
    37d0:	99 f0       	breq	.+38     	; 0x37f8 <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    37d2:	0e 94 8d 1a 	call	0x351a	; 0x351a <vTaskIncrementTick>
						--uxMissedTicks;
    37d6:	80 91 19 31 	lds	r24, 0x3119	; 0x803119 <uxMissedTicks>
    37da:	81 50       	subi	r24, 0x01	; 1
    37dc:	80 93 19 31 	sts	0x3119, r24	; 0x803119 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    37e0:	80 91 19 31 	lds	r24, 0x3119	; 0x803119 <uxMissedTicks>
    37e4:	81 11       	cpse	r24, r1
    37e6:	f5 cf       	rjmp	.-22     	; 0x37d2 <xTaskResumeAll+0xb6>
    37e8:	07 c0       	rjmp	.+14     	; 0x37f8 <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    37ea:	f1 e0       	ldi	r31, 0x01	; 1
    37ec:	cf 16       	cp	r12, r31
    37ee:	21 f0       	breq	.+8      	; 0x37f8 <xTaskResumeAll+0xdc>
    37f0:	80 91 18 31 	lds	r24, 0x3118	; 0x803118 <xMissedYield>
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	41 f4       	brne	.+16     	; 0x3808 <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    37f8:	10 92 18 31 	sts	0x3118, r1	; 0x803118 <xMissedYield>
					portYIELD_WITHIN_API();
    37fc:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	03 c0       	rjmp	.+6      	; 0x380a <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	01 c0       	rjmp	.+2      	; 0x380a <xTaskResumeAll+0xee>
    3808:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    380a:	0f 90       	pop	r0
    380c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	1f 91       	pop	r17
    3814:	0f 91       	pop	r16
    3816:	ff 90       	pop	r15
    3818:	ef 90       	pop	r14
    381a:	df 90       	pop	r13
    381c:	cf 90       	pop	r12
    381e:	08 95       	ret

00003820 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3820:	cf 92       	push	r12
    3822:	df 92       	push	r13
    3824:	ef 92       	push	r14
    3826:	ff 92       	push	r15
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	ec 01       	movw	r28, r24
    382e:	6a 01       	movw	r12, r20
    3830:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3832:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3836:	88 81       	ld	r24, Y
    3838:	99 81       	ldd	r25, Y+1	; 0x01
    383a:	aa 81       	ldd	r26, Y+2	; 0x02
    383c:	bb 81       	ldd	r27, Y+3	; 0x03
    383e:	c8 0e       	add	r12, r24
    3840:	d9 1e       	adc	r13, r25
    3842:	ea 1e       	adc	r14, r26
    3844:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    3846:	40 91 1e 31 	lds	r20, 0x311E	; 0x80311e <xTickCount>
    384a:	50 91 1f 31 	lds	r21, 0x311F	; 0x80311f <xTickCount+0x1>
    384e:	60 91 20 31 	lds	r22, 0x3120	; 0x803120 <xTickCount+0x2>
    3852:	70 91 21 31 	lds	r23, 0x3121	; 0x803121 <xTickCount+0x3>
    3856:	48 17       	cp	r20, r24
    3858:	59 07       	cpc	r21, r25
    385a:	6a 07       	cpc	r22, r26
    385c:	7b 07       	cpc	r23, r27
    385e:	b8 f4       	brcc	.+46     	; 0x388e <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3860:	c8 16       	cp	r12, r24
    3862:	d9 06       	cpc	r13, r25
    3864:	ea 06       	cpc	r14, r26
    3866:	fb 06       	cpc	r15, r27
    3868:	e0 f5       	brcc	.+120    	; 0x38e2 <vTaskDelayUntil+0xc2>
    386a:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    386e:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    3872:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    3876:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    387a:	c8 82       	st	Y, r12
    387c:	d9 82       	std	Y+1, r13	; 0x01
    387e:	ea 82       	std	Y+2, r14	; 0x02
    3880:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3882:	8c 15       	cp	r24, r12
    3884:	9d 05       	cpc	r25, r13
    3886:	ae 05       	cpc	r26, r14
    3888:	bf 05       	cpc	r27, r15
    388a:	f8 f4       	brcc	.+62     	; 0x38ca <vTaskDelayUntil+0xaa>
    388c:	13 c0       	rjmp	.+38     	; 0x38b4 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    388e:	c8 16       	cp	r12, r24
    3890:	d9 06       	cpc	r13, r25
    3892:	ea 06       	cpc	r14, r26
    3894:	fb 06       	cpc	r15, r27
    3896:	00 f1       	brcs	.+64     	; 0x38d8 <vTaskDelayUntil+0xb8>
    3898:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    389c:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    38a0:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    38a4:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    38a8:	8c 15       	cp	r24, r12
    38aa:	9d 05       	cpc	r25, r13
    38ac:	ae 05       	cpc	r26, r14
    38ae:	bf 05       	cpc	r27, r15
    38b0:	98 f0       	brcs	.+38     	; 0x38d8 <vTaskDelayUntil+0xb8>
    38b2:	17 c0       	rjmp	.+46     	; 0x38e2 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    38b4:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    38b8:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    38bc:	02 96       	adiw	r24, 0x02	; 2
    38be:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    38c2:	c7 01       	movw	r24, r14
    38c4:	b6 01       	movw	r22, r12
    38c6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    38ca:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    38ce:	81 11       	cpse	r24, r1
    38d0:	0d c0       	rjmp	.+26     	; 0x38ec <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    38d2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
		}
	}
    38d6:	0a c0       	rjmp	.+20     	; 0x38ec <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    38d8:	c8 82       	st	Y, r12
    38da:	d9 82       	std	Y+1, r13	; 0x01
    38dc:	ea 82       	std	Y+2, r14	; 0x02
    38de:	fb 82       	std	Y+3, r15	; 0x03
    38e0:	e9 cf       	rjmp	.-46     	; 0x38b4 <vTaskDelayUntil+0x94>
    38e2:	c8 82       	st	Y, r12
    38e4:	d9 82       	std	Y+1, r13	; 0x01
    38e6:	ea 82       	std	Y+2, r14	; 0x02
    38e8:	fb 82       	std	Y+3, r15	; 0x03
    38ea:	ef cf       	rjmp	.-34     	; 0x38ca <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    38ec:	df 91       	pop	r29
    38ee:	cf 91       	pop	r28
    38f0:	ff 90       	pop	r15
    38f2:	ef 90       	pop	r14
    38f4:	df 90       	pop	r13
    38f6:	cf 90       	pop	r12
    38f8:	08 95       	ret

000038fa <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	6b 01       	movw	r12, r22
    3904:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3906:	67 2b       	or	r22, r23
    3908:	68 2b       	or	r22, r24
    390a:	69 2b       	or	r22, r25
    390c:	e9 f0       	breq	.+58     	; 0x3948 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    390e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3912:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3916:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    391a:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    391e:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    3922:	c8 0e       	add	r12, r24
    3924:	d9 1e       	adc	r13, r25
    3926:	ea 1e       	adc	r14, r26
    3928:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    392a:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    392e:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3932:	02 96       	adiw	r24, 0x02	; 2
    3934:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3938:	c7 01       	movw	r24, r14
    393a:	b6 01       	movw	r22, r12
    393c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3940:	0e 94 8e 1b 	call	0x371c	; 0x371c <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3944:	81 11       	cpse	r24, r1
    3946:	02 c0       	rjmp	.+4      	; 0x394c <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3948:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vPortYield>
		}
	}
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	df 90       	pop	r13
    3952:	cf 90       	pop	r12
    3954:	08 95       	ret

00003956 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3956:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    395a:	81 11       	cpse	r24, r1
    395c:	0c c0       	rjmp	.+24     	; 0x3976 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    395e:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <uxTopReadyPriority>
    3962:	4b e0       	ldi	r20, 0x0B	; 11
    3964:	e4 9f       	mul	r30, r20
    3966:	f0 01       	movw	r30, r0
    3968:	11 24       	eor	r1, r1
    396a:	e6 5b       	subi	r30, 0xB6	; 182
    396c:	fe 4c       	sbci	r31, 0xCE	; 206
    396e:	80 81       	ld	r24, Z
    3970:	88 23       	and	r24, r24
    3972:	29 f0       	breq	.+10     	; 0x397e <vTaskSwitchContext+0x28>
    3974:	14 c0       	rjmp	.+40     	; 0x399e <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	80 93 18 31 	sts	0x3118, r24	; 0x803118 <xMissedYield>
    397c:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    397e:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3980:	80 91 1c 31 	lds	r24, 0x311C	; 0x80311c <uxTopReadyPriority>
    3984:	81 50       	subi	r24, 0x01	; 1
    3986:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    398a:	e0 91 1c 31 	lds	r30, 0x311C	; 0x80311c <uxTopReadyPriority>
    398e:	9e 9f       	mul	r25, r30
    3990:	f0 01       	movw	r30, r0
    3992:	11 24       	eor	r1, r1
    3994:	e6 5b       	subi	r30, 0xB6	; 182
    3996:	fe 4c       	sbci	r31, 0xCE	; 206
    3998:	80 81       	ld	r24, Z
    399a:	88 23       	and	r24, r24
    399c:	89 f3       	breq	.-30     	; 0x3980 <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    399e:	80 91 1c 31 	lds	r24, 0x311C	; 0x80311c <uxTopReadyPriority>
    39a2:	28 2f       	mov	r18, r24
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4b e0       	ldi	r20, 0x0B	; 11
    39a8:	84 9f       	mul	r24, r20
    39aa:	c0 01       	movw	r24, r0
    39ac:	11 24       	eor	r1, r1
    39ae:	dc 01       	movw	r26, r24
    39b0:	a6 5b       	subi	r26, 0xB6	; 182
    39b2:	be 4c       	sbci	r27, 0xCE	; 206
    39b4:	11 96       	adiw	r26, 0x01	; 1
    39b6:	ed 91       	ld	r30, X+
    39b8:	fc 91       	ld	r31, X
    39ba:	12 97       	sbiw	r26, 0x02	; 2
    39bc:	04 80       	ldd	r0, Z+4	; 0x04
    39be:	f5 81       	ldd	r31, Z+5	; 0x05
    39c0:	e0 2d       	mov	r30, r0
    39c2:	11 96       	adiw	r26, 0x01	; 1
    39c4:	ed 93       	st	X+, r30
    39c6:	fc 93       	st	X, r31
    39c8:	12 97       	sbiw	r26, 0x02	; 2
    39ca:	83 5b       	subi	r24, 0xB3	; 179
    39cc:	9e 4c       	sbci	r25, 0xCE	; 206
    39ce:	e8 17       	cp	r30, r24
    39d0:	f9 07       	cpc	r31, r25
    39d2:	61 f4       	brne	.+24     	; 0x39ec <vTaskSwitchContext+0x96>
    39d4:	84 81       	ldd	r24, Z+4	; 0x04
    39d6:	95 81       	ldd	r25, Z+5	; 0x05
    39d8:	4b e0       	ldi	r20, 0x0B	; 11
    39da:	42 9f       	mul	r20, r18
    39dc:	f0 01       	movw	r30, r0
    39de:	43 9f       	mul	r20, r19
    39e0:	f0 0d       	add	r31, r0
    39e2:	11 24       	eor	r1, r1
    39e4:	e6 5b       	subi	r30, 0xB6	; 182
    39e6:	fe 4c       	sbci	r31, 0xCE	; 206
    39e8:	81 83       	std	Z+1, r24	; 0x01
    39ea:	92 83       	std	Z+2, r25	; 0x02
    39ec:	8b e0       	ldi	r24, 0x0B	; 11
    39ee:	82 9f       	mul	r24, r18
    39f0:	f0 01       	movw	r30, r0
    39f2:	83 9f       	mul	r24, r19
    39f4:	f0 0d       	add	r31, r0
    39f6:	11 24       	eor	r1, r1
    39f8:	e6 5b       	subi	r30, 0xB6	; 182
    39fa:	fe 4c       	sbci	r31, 0xCE	; 206
    39fc:	01 80       	ldd	r0, Z+1	; 0x01
    39fe:	f2 81       	ldd	r31, Z+2	; 0x02
    3a00:	e0 2d       	mov	r30, r0
    3a02:	80 85       	ldd	r24, Z+8	; 0x08
    3a04:	91 85       	ldd	r25, Z+9	; 0x09
    3a06:	80 93 76 31 	sts	0x3176, r24	; 0x803176 <pxCurrentTCB>
    3a0a:	90 93 77 31 	sts	0x3177, r25	; 0x803177 <pxCurrentTCB+0x1>
    3a0e:	08 95       	ret

00003a10 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3a10:	cf 92       	push	r12
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	6a 01       	movw	r12, r20
    3a1a:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3a1c:	60 91 76 31 	lds	r22, 0x3176	; 0x803176 <pxCurrentTCB>
    3a20:	70 91 77 31 	lds	r23, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3a24:	62 5f       	subi	r22, 0xF2	; 242
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	0e 94 66 14 	call	0x28cc	; 0x28cc <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3a2c:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3a30:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3a34:	02 96       	adiw	r24, 0x02	; 2
    3a36:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3a3a:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3a3e:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    3a42:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    3a46:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	6c 0d       	add	r22, r12
    3a50:	7d 1d       	adc	r23, r13
    3a52:	8e 1d       	adc	r24, r14
    3a54:	9f 1d       	adc	r25, r15
    3a56:	0e 94 db 18 	call	0x31b6	; 0x31b6 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3a5a:	ff 90       	pop	r15
    3a5c:	ef 90       	pop	r14
    3a5e:	df 90       	pop	r13
    3a60:	cf 90       	pop	r12
    3a62:	08 95       	ret

00003a64 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	17 96       	adiw	r26, 0x07	; 7
    3a70:	ed 91       	ld	r30, X+
    3a72:	fc 91       	ld	r31, X
    3a74:	18 97       	sbiw	r26, 0x08	; 8
    3a76:	c0 85       	ldd	r28, Z+8	; 0x08
    3a78:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3a7a:	8e 01       	movw	r16, r28
    3a7c:	02 5f       	subi	r16, 0xF2	; 242
    3a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a80:	c8 01       	movw	r24, r16
    3a82:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a86:	80 91 1a 31 	lds	r24, 0x311A	; 0x80311a <uxSchedulerSuspended>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	16 c0       	rjmp	.+44     	; 0x3aba <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3a8e:	0c 50       	subi	r16, 0x0C	; 12
    3a90:	11 09       	sbc	r17, r1
    3a92:	c8 01       	movw	r24, r16
    3a94:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3a98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a9a:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    3a9e:	98 17       	cp	r25, r24
    3aa0:	10 f4       	brcc	.+4      	; 0x3aa6 <xTaskRemoveFromEventList+0x42>
    3aa2:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    3aa6:	bb e0       	ldi	r27, 0x0B	; 11
    3aa8:	8b 9f       	mul	r24, r27
    3aaa:	c0 01       	movw	r24, r0
    3aac:	11 24       	eor	r1, r1
    3aae:	b8 01       	movw	r22, r16
    3ab0:	86 5b       	subi	r24, 0xB6	; 182
    3ab2:	9e 4c       	sbci	r25, 0xCE	; 206
    3ab4:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
    3ab8:	05 c0       	rjmp	.+10     	; 0x3ac4 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3aba:	b8 01       	movw	r22, r16
    3abc:	85 e2       	ldi	r24, 0x25	; 37
    3abe:	91 e3       	ldi	r25, 0x31	; 49
    3ac0:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ac4:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    3ac8:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3ad0:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ad2:	29 17       	cp	r18, r25
    3ad4:	08 f4       	brcc	.+2      	; 0x3ad8 <xTaskRemoveFromEventList+0x74>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3ae2:	20 91 17 31 	lds	r18, 0x3117	; 0x803117 <xNumOfOverflows>
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3aea:	40 91 1e 31 	lds	r20, 0x311E	; 0x80311e <xTickCount>
    3aee:	50 91 1f 31 	lds	r21, 0x311F	; 0x80311f <xTickCount+0x1>
    3af2:	60 91 20 31 	lds	r22, 0x3120	; 0x803120 <xTickCount+0x2>
    3af6:	70 91 21 31 	lds	r23, 0x3121	; 0x803121 <xTickCount+0x3>
    3afa:	41 83       	std	Z+1, r20	; 0x01
    3afc:	52 83       	std	Z+2, r21	; 0x02
    3afe:	63 83       	std	Z+3, r22	; 0x03
    3b00:	74 83       	std	Z+4, r23	; 0x04
    3b02:	08 95       	ret

00003b04 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3b04:	8f 92       	push	r8
    3b06:	9f 92       	push	r9
    3b08:	af 92       	push	r10
    3b0a:	bf 92       	push	r11
    3b0c:	cf 92       	push	r12
    3b0e:	df 92       	push	r13
    3b10:	ef 92       	push	r14
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3b24:	80 91 17 31 	lds	r24, 0x3117	; 0x803117 <xNumOfOverflows>
    3b28:	90 81       	ld	r25, Z
    3b2a:	98 17       	cp	r25, r24
    3b2c:	89 f0       	breq	.+34     	; 0x3b50 <xTaskCheckForTimeOut+0x4c>
    3b2e:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3b32:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    3b36:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    3b3a:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    3b3e:	01 81       	ldd	r16, Z+1	; 0x01
    3b40:	12 81       	ldd	r17, Z+2	; 0x02
    3b42:	23 81       	ldd	r18, Z+3	; 0x03
    3b44:	34 81       	ldd	r19, Z+4	; 0x04
    3b46:	80 17       	cp	r24, r16
    3b48:	91 07       	cpc	r25, r17
    3b4a:	a2 07       	cpc	r26, r18
    3b4c:	b3 07       	cpc	r27, r19
    3b4e:	a8 f5       	brcc	.+106    	; 0x3bba <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3b50:	80 91 1e 31 	lds	r24, 0x311E	; 0x80311e <xTickCount>
    3b54:	90 91 1f 31 	lds	r25, 0x311F	; 0x80311f <xTickCount+0x1>
    3b58:	a0 91 20 31 	lds	r26, 0x3120	; 0x803120 <xTickCount+0x2>
    3b5c:	b0 91 21 31 	lds	r27, 0x3121	; 0x803121 <xTickCount+0x3>
    3b60:	c1 80       	ldd	r12, Z+1	; 0x01
    3b62:	d2 80       	ldd	r13, Z+2	; 0x02
    3b64:	e3 80       	ldd	r14, Z+3	; 0x03
    3b66:	f4 80       	ldd	r15, Z+4	; 0x04
    3b68:	eb 01       	movw	r28, r22
    3b6a:	08 81       	ld	r16, Y
    3b6c:	19 81       	ldd	r17, Y+1	; 0x01
    3b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3b70:	3b 81       	ldd	r19, Y+3	; 0x03
    3b72:	8c 19       	sub	r24, r12
    3b74:	9d 09       	sbc	r25, r13
    3b76:	ae 09       	sbc	r26, r14
    3b78:	bf 09       	sbc	r27, r15
    3b7a:	80 17       	cp	r24, r16
    3b7c:	91 07       	cpc	r25, r17
    3b7e:	a2 07       	cpc	r26, r18
    3b80:	b3 07       	cpc	r27, r19
    3b82:	e8 f4       	brcc	.+58     	; 0x3bbe <xTaskCheckForTimeOut+0xba>
    3b84:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3b86:	80 90 1e 31 	lds	r8, 0x311E	; 0x80311e <xTickCount>
    3b8a:	90 90 1f 31 	lds	r9, 0x311F	; 0x80311f <xTickCount+0x1>
    3b8e:	a0 90 20 31 	lds	r10, 0x3120	; 0x803120 <xTickCount+0x2>
    3b92:	b0 90 21 31 	lds	r11, 0x3121	; 0x803121 <xTickCount+0x3>
    3b96:	b5 01       	movw	r22, r10
    3b98:	a4 01       	movw	r20, r8
    3b9a:	4c 19       	sub	r20, r12
    3b9c:	5d 09       	sbc	r21, r13
    3b9e:	6e 09       	sbc	r22, r14
    3ba0:	7f 09       	sbc	r23, r15
    3ba2:	04 1b       	sub	r16, r20
    3ba4:	15 0b       	sbc	r17, r21
    3ba6:	26 0b       	sbc	r18, r22
    3ba8:	37 0b       	sbc	r19, r23
    3baa:	08 83       	st	Y, r16
    3bac:	19 83       	std	Y+1, r17	; 0x01
    3bae:	2a 83       	std	Y+2, r18	; 0x02
    3bb0:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3bb2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	03 c0       	rjmp	.+6      	; 0x3bc0 <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	01 c0       	rjmp	.+2      	; 0x3bc0 <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3bc0:	0f 90       	pop	r0
    3bc2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	df 90       	pop	r13
    3bd2:	cf 90       	pop	r12
    3bd4:	bf 90       	pop	r11
    3bd6:	af 90       	pop	r10
    3bd8:	9f 90       	pop	r9
    3bda:	8f 90       	pop	r8
    3bdc:	08 95       	ret

00003bde <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	80 93 18 31 	sts	0x3118, r24	; 0x803118 <xMissedYield>
    3be4:	08 95       	ret

00003be6 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	21 f4       	brne	.+8      	; 0x3bf2 <uxTaskGetStackHighWaterMark+0xc>
    3bea:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3bee:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	5b 96       	adiw	r26, 0x1b	; 27
    3bf6:	ed 91       	ld	r30, X+
    3bf8:	fc 91       	ld	r31, X
    3bfa:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3bfc:	80 81       	ld	r24, Z
    3bfe:	81 31       	cpi	r24, 0x11	; 17
    3c00:	41 f4       	brne	.+16     	; 0x3c12 <uxTaskGetStackHighWaterMark+0x2c>
    3c02:	31 96       	adiw	r30, 0x01	; 1
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    3c08:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3c0a:	21 91       	ld	r18, Z+
    3c0c:	21 31       	cpi	r18, 0x11	; 17
    3c0e:	e1 f3       	breq	.-8      	; 0x3c08 <uxTaskGetStackHighWaterMark+0x22>
    3c10:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    3c16:	08 95       	ret

00003c18 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3c18:	80 91 76 31 	lds	r24, 0x3176	; 0x803176 <pxCurrentTCB>
    3c1c:	90 91 77 31 	lds	r25, 0x3177	; 0x803177 <pxCurrentTCB+0x1>

		return xReturn;
	}
    3c20:	08 95       	ret

00003c22 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3c22:	0f 93       	push	r16
    3c24:	1f 93       	push	r17
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3c2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c2e:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    3c32:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3c36:	5a 96       	adiw	r26, 0x1a	; 26
    3c38:	8c 91       	ld	r24, X
    3c3a:	28 17       	cp	r18, r24
    3c3c:	08 f0       	brcs	.+2      	; 0x3c40 <vTaskPriorityInherit+0x1e>
    3c3e:	41 c0       	rjmp	.+130    	; 0x3cc2 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3c40:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    3c44:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3c48:	5a 96       	adiw	r26, 0x1a	; 26
    3c4a:	3c 91       	ld	r19, X
    3c4c:	84 e0       	ldi	r24, 0x04	; 4
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e0       	ldi	r26, 0x00	; 0
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	83 1b       	sub	r24, r19
    3c56:	91 09       	sbc	r25, r1
    3c58:	a1 09       	sbc	r26, r1
    3c5a:	b1 09       	sbc	r27, r1
    3c5c:	86 87       	std	Z+14, r24	; 0x0e
    3c5e:	97 87       	std	Z+15, r25	; 0x0f
    3c60:	a0 8b       	std	Z+16, r26	; 0x10
    3c62:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c64:	8b e0       	ldi	r24, 0x0B	; 11
    3c66:	28 9f       	mul	r18, r24
    3c68:	90 01       	movw	r18, r0
    3c6a:	11 24       	eor	r1, r1
    3c6c:	26 5b       	subi	r18, 0xB6	; 182
    3c6e:	3e 4c       	sbci	r19, 0xCE	; 206
    3c70:	84 85       	ldd	r24, Z+12	; 0x0c
    3c72:	95 85       	ldd	r25, Z+13	; 0x0d
    3c74:	82 17       	cp	r24, r18
    3c76:	93 07       	cpc	r25, r19
    3c78:	e9 f4       	brne	.+58     	; 0x3cb4 <vTaskPriorityInherit+0x92>
    3c7a:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3c7c:	ef 01       	movw	r28, r30
    3c7e:	22 96       	adiw	r28, 0x02	; 2
    3c80:	ce 01       	movw	r24, r28
    3c82:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3c86:	e0 91 76 31 	lds	r30, 0x3176	; 0x803176 <pxCurrentTCB>
    3c8a:	f0 91 77 31 	lds	r31, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3c8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c90:	f8 01       	movw	r30, r16
    3c92:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3c94:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    3c98:	98 17       	cp	r25, r24
    3c9a:	10 f4       	brcc	.+4      	; 0x3ca0 <vTaskPriorityInherit+0x7e>
    3c9c:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    3ca0:	fb e0       	ldi	r31, 0x0B	; 11
    3ca2:	8f 9f       	mul	r24, r31
    3ca4:	c0 01       	movw	r24, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	be 01       	movw	r22, r28
    3caa:	86 5b       	subi	r24, 0xB6	; 182
    3cac:	9e 4c       	sbci	r25, 0xCE	; 206
    3cae:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
    3cb2:	07 c0       	rjmp	.+14     	; 0x3cc2 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3cb4:	a0 91 76 31 	lds	r26, 0x3176	; 0x803176 <pxCurrentTCB>
    3cb8:	b0 91 77 31 	lds	r27, 0x3177	; 0x803177 <pxCurrentTCB+0x1>
    3cbc:	5a 96       	adiw	r26, 0x1a	; 26
    3cbe:	8c 91       	ld	r24, X
    3cc0:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	08 95       	ret

00003ccc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	49 f1       	breq	.+82     	; 0x3d2a <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3cd8:	fc 01       	movw	r30, r24
    3cda:	32 8d       	ldd	r19, Z+26	; 0x1a
    3cdc:	27 a1       	ldd	r18, Z+39	; 0x27
    3cde:	32 17       	cp	r19, r18
    3ce0:	21 f1       	breq	.+72     	; 0x3d2a <vTaskPriorityDisinherit+0x5e>
    3ce2:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3ce4:	8c 01       	movw	r16, r24
    3ce6:	0e 5f       	subi	r16, 0xFE	; 254
    3ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cea:	c8 01       	movw	r24, r16
    3cec:	0e 94 b1 14 	call	0x2962	; 0x2962 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3cf0:	8f a1       	ldd	r24, Y+39	; 0x27
    3cf2:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3cf4:	44 e0       	ldi	r20, 0x04	; 4
    3cf6:	50 e0       	ldi	r21, 0x00	; 0
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	48 1b       	sub	r20, r24
    3cfe:	51 09       	sbc	r21, r1
    3d00:	61 09       	sbc	r22, r1
    3d02:	71 09       	sbc	r23, r1
    3d04:	4e 87       	std	Y+14, r20	; 0x0e
    3d06:	5f 87       	std	Y+15, r21	; 0x0f
    3d08:	68 8b       	std	Y+16, r22	; 0x10
    3d0a:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    3d0c:	90 91 1c 31 	lds	r25, 0x311C	; 0x80311c <uxTopReadyPriority>
    3d10:	98 17       	cp	r25, r24
    3d12:	10 f4       	brcc	.+4      	; 0x3d18 <vTaskPriorityDisinherit+0x4c>
    3d14:	80 93 1c 31 	sts	0x311C, r24	; 0x80311c <uxTopReadyPriority>
    3d18:	fb e0       	ldi	r31, 0x0B	; 11
    3d1a:	8f 9f       	mul	r24, r31
    3d1c:	c0 01       	movw	r24, r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	b8 01       	movw	r22, r16
    3d22:	86 5b       	subi	r24, 0xB6	; 182
    3d24:	9e 4c       	sbci	r25, 0xCE	; 206
    3d26:	0e 94 3f 14 	call	0x287e	; 0x287e <vListInsertEnd>
			}
		}
	}
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	1f 91       	pop	r17
    3d30:	0f 91       	pop	r16
    3d32:	08 95       	ret

00003d34 <__divmodsi4>:
    3d34:	05 2e       	mov	r0, r21
    3d36:	97 fb       	bst	r25, 7
    3d38:	1e f4       	brtc	.+6      	; 0x3d40 <__divmodsi4+0xc>
    3d3a:	00 94       	com	r0
    3d3c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__negsi2>
    3d40:	57 fd       	sbrc	r21, 7
    3d42:	07 d0       	rcall	.+14     	; 0x3d52 <__divmodsi4_neg2>
    3d44:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__udivmodsi4>
    3d48:	07 fc       	sbrc	r0, 7
    3d4a:	03 d0       	rcall	.+6      	; 0x3d52 <__divmodsi4_neg2>
    3d4c:	4e f4       	brtc	.+18     	; 0x3d60 <__divmodsi4_exit>
    3d4e:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__negsi2>

00003d52 <__divmodsi4_neg2>:
    3d52:	50 95       	com	r21
    3d54:	40 95       	com	r20
    3d56:	30 95       	com	r19
    3d58:	21 95       	neg	r18
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255

00003d60 <__divmodsi4_exit>:
    3d60:	08 95       	ret

00003d62 <__negsi2>:
    3d62:	90 95       	com	r25
    3d64:	80 95       	com	r24
    3d66:	70 95       	com	r23
    3d68:	61 95       	neg	r22
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d70:	08 95       	ret

00003d72 <__udivmodsi4>:
    3d72:	a1 e2       	ldi	r26, 0x21	; 33
    3d74:	1a 2e       	mov	r1, r26
    3d76:	aa 1b       	sub	r26, r26
    3d78:	bb 1b       	sub	r27, r27
    3d7a:	fd 01       	movw	r30, r26
    3d7c:	0d c0       	rjmp	.+26     	; 0x3d98 <__udivmodsi4_ep>

00003d7e <__udivmodsi4_loop>:
    3d7e:	aa 1f       	adc	r26, r26
    3d80:	bb 1f       	adc	r27, r27
    3d82:	ee 1f       	adc	r30, r30
    3d84:	ff 1f       	adc	r31, r31
    3d86:	a2 17       	cp	r26, r18
    3d88:	b3 07       	cpc	r27, r19
    3d8a:	e4 07       	cpc	r30, r20
    3d8c:	f5 07       	cpc	r31, r21
    3d8e:	20 f0       	brcs	.+8      	; 0x3d98 <__udivmodsi4_ep>
    3d90:	a2 1b       	sub	r26, r18
    3d92:	b3 0b       	sbc	r27, r19
    3d94:	e4 0b       	sbc	r30, r20
    3d96:	f5 0b       	sbc	r31, r21

00003d98 <__udivmodsi4_ep>:
    3d98:	66 1f       	adc	r22, r22
    3d9a:	77 1f       	adc	r23, r23
    3d9c:	88 1f       	adc	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	1a 94       	dec	r1
    3da2:	69 f7       	brne	.-38     	; 0x3d7e <__udivmodsi4_loop>
    3da4:	60 95       	com	r22
    3da6:	70 95       	com	r23
    3da8:	80 95       	com	r24
    3daa:	90 95       	com	r25
    3dac:	9b 01       	movw	r18, r22
    3dae:	ac 01       	movw	r20, r24
    3db0:	bd 01       	movw	r22, r26
    3db2:	cf 01       	movw	r24, r30
    3db4:	08 95       	ret

00003db6 <memcpy>:
    3db6:	fb 01       	movw	r30, r22
    3db8:	dc 01       	movw	r26, r24
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <memcpy+0xa>
    3dbc:	01 90       	ld	r0, Z+
    3dbe:	0d 92       	st	X+, r0
    3dc0:	41 50       	subi	r20, 0x01	; 1
    3dc2:	50 40       	sbci	r21, 0x00	; 0
    3dc4:	d8 f7       	brcc	.-10     	; 0x3dbc <memcpy+0x6>
    3dc6:	08 95       	ret

00003dc8 <memset>:
    3dc8:	dc 01       	movw	r26, r24
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <memset+0x6>
    3dcc:	6d 93       	st	X+, r22
    3dce:	41 50       	subi	r20, 0x01	; 1
    3dd0:	50 40       	sbci	r21, 0x00	; 0
    3dd2:	e0 f7       	brcc	.-8      	; 0x3dcc <memset+0x4>
    3dd4:	08 95       	ret

00003dd6 <strncpy>:
    3dd6:	fb 01       	movw	r30, r22
    3dd8:	dc 01       	movw	r26, r24
    3dda:	41 50       	subi	r20, 0x01	; 1
    3ddc:	50 40       	sbci	r21, 0x00	; 0
    3dde:	48 f0       	brcs	.+18     	; 0x3df2 <strncpy+0x1c>
    3de0:	01 90       	ld	r0, Z+
    3de2:	0d 92       	st	X+, r0
    3de4:	00 20       	and	r0, r0
    3de6:	c9 f7       	brne	.-14     	; 0x3dda <strncpy+0x4>
    3de8:	01 c0       	rjmp	.+2      	; 0x3dec <strncpy+0x16>
    3dea:	1d 92       	st	X+, r1
    3dec:	41 50       	subi	r20, 0x01	; 1
    3dee:	50 40       	sbci	r21, 0x00	; 0
    3df0:	e0 f7       	brcc	.-8      	; 0x3dea <strncpy+0x14>
    3df2:	08 95       	ret

00003df4 <ultoa>:
    3df4:	25 32       	cpi	r18, 0x25	; 37
    3df6:	31 05       	cpc	r19, r1
    3df8:	20 f4       	brcc	.+8      	; 0x3e02 <ultoa+0xe>
    3dfa:	22 30       	cpi	r18, 0x02	; 2
    3dfc:	10 f0       	brcs	.+4      	; 0x3e02 <ultoa+0xe>
    3dfe:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__ultoa_ncheck>
    3e02:	fa 01       	movw	r30, r20
    3e04:	10 82       	st	Z, r1
    3e06:	ca 01       	movw	r24, r20
    3e08:	08 95       	ret

00003e0a <__ultoa_ncheck>:
    3e0a:	bb 27       	eor	r27, r27

00003e0c <__ultoa_common>:
    3e0c:	fa 01       	movw	r30, r20
    3e0e:	a6 2f       	mov	r26, r22
    3e10:	62 17       	cp	r22, r18
    3e12:	71 05       	cpc	r23, r1
    3e14:	81 05       	cpc	r24, r1
    3e16:	91 05       	cpc	r25, r1
    3e18:	33 0b       	sbc	r19, r19
    3e1a:	30 fb       	bst	r19, 0
    3e1c:	66 f0       	brts	.+24     	; 0x3e36 <__ultoa_common+0x2a>
    3e1e:	aa 27       	eor	r26, r26
    3e20:	66 0f       	add	r22, r22
    3e22:	77 1f       	adc	r23, r23
    3e24:	88 1f       	adc	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	aa 1f       	adc	r26, r26
    3e2a:	a2 17       	cp	r26, r18
    3e2c:	10 f0       	brcs	.+4      	; 0x3e32 <__ultoa_common+0x26>
    3e2e:	a2 1b       	sub	r26, r18
    3e30:	63 95       	inc	r22
    3e32:	38 50       	subi	r19, 0x08	; 8
    3e34:	a9 f7       	brne	.-22     	; 0x3e20 <__ultoa_common+0x14>
    3e36:	a0 5d       	subi	r26, 0xD0	; 208
    3e38:	aa 33       	cpi	r26, 0x3A	; 58
    3e3a:	08 f0       	brcs	.+2      	; 0x3e3e <__ultoa_common+0x32>
    3e3c:	a9 5d       	subi	r26, 0xD9	; 217
    3e3e:	a1 93       	st	Z+, r26
    3e40:	36 f7       	brtc	.-52     	; 0x3e0e <__ultoa_common+0x2>
    3e42:	b1 11       	cpse	r27, r1
    3e44:	b1 93       	st	Z+, r27
    3e46:	10 82       	st	Z, r1
    3e48:	ca 01       	movw	r24, r20
    3e4a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <strrev>

00003e4e <utoa>:
    3e4e:	45 32       	cpi	r20, 0x25	; 37
    3e50:	51 05       	cpc	r21, r1
    3e52:	20 f4       	brcc	.+8      	; 0x3e5c <utoa+0xe>
    3e54:	42 30       	cpi	r20, 0x02	; 2
    3e56:	10 f0       	brcs	.+4      	; 0x3e5c <utoa+0xe>
    3e58:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__utoa_ncheck>
    3e5c:	fb 01       	movw	r30, r22
    3e5e:	10 82       	st	Z, r1
    3e60:	cb 01       	movw	r24, r22
    3e62:	08 95       	ret

00003e64 <__utoa_ncheck>:
    3e64:	bb 27       	eor	r27, r27

00003e66 <__utoa_common>:
    3e66:	fb 01       	movw	r30, r22
    3e68:	55 27       	eor	r21, r21
    3e6a:	aa 27       	eor	r26, r26
    3e6c:	88 0f       	add	r24, r24
    3e6e:	99 1f       	adc	r25, r25
    3e70:	aa 1f       	adc	r26, r26
    3e72:	a4 17       	cp	r26, r20
    3e74:	10 f0       	brcs	.+4      	; 0x3e7a <__utoa_common+0x14>
    3e76:	a4 1b       	sub	r26, r20
    3e78:	83 95       	inc	r24
    3e7a:	50 51       	subi	r21, 0x10	; 16
    3e7c:	b9 f7       	brne	.-18     	; 0x3e6c <__utoa_common+0x6>
    3e7e:	a0 5d       	subi	r26, 0xD0	; 208
    3e80:	aa 33       	cpi	r26, 0x3A	; 58
    3e82:	08 f0       	brcs	.+2      	; 0x3e86 <__utoa_common+0x20>
    3e84:	a9 5d       	subi	r26, 0xD9	; 217
    3e86:	a1 93       	st	Z+, r26
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	79 f7       	brne	.-34     	; 0x3e6a <__utoa_common+0x4>
    3e8c:	b1 11       	cpse	r27, r1
    3e8e:	b1 93       	st	Z+, r27
    3e90:	11 92       	st	Z+, r1
    3e92:	cb 01       	movw	r24, r22
    3e94:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <strrev>

00003e98 <strrev>:
    3e98:	dc 01       	movw	r26, r24
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	67 2f       	mov	r22, r23
    3e9e:	71 91       	ld	r23, Z+
    3ea0:	77 23       	and	r23, r23
    3ea2:	e1 f7       	brne	.-8      	; 0x3e9c <strrev+0x4>
    3ea4:	32 97       	sbiw	r30, 0x02	; 2
    3ea6:	04 c0       	rjmp	.+8      	; 0x3eb0 <strrev+0x18>
    3ea8:	7c 91       	ld	r23, X
    3eaa:	6d 93       	st	X+, r22
    3eac:	70 83       	st	Z, r23
    3eae:	62 91       	ld	r22, -Z
    3eb0:	ae 17       	cp	r26, r30
    3eb2:	bf 07       	cpc	r27, r31
    3eb4:	c8 f3       	brcs	.-14     	; 0x3ea8 <strrev+0x10>
    3eb6:	08 95       	ret

00003eb8 <__mulsi3>:
    3eb8:	db 01       	movw	r26, r22
    3eba:	8f 93       	push	r24
    3ebc:	9f 93       	push	r25
    3ebe:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__muluhisi3>
    3ec2:	bf 91       	pop	r27
    3ec4:	af 91       	pop	r26
    3ec6:	a2 9f       	mul	r26, r18
    3ec8:	80 0d       	add	r24, r0
    3eca:	91 1d       	adc	r25, r1
    3ecc:	a3 9f       	mul	r26, r19
    3ece:	90 0d       	add	r25, r0
    3ed0:	b2 9f       	mul	r27, r18
    3ed2:	90 0d       	add	r25, r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	08 95       	ret

00003ed8 <__divmodhi4>:
    3ed8:	97 fb       	bst	r25, 7
    3eda:	07 2e       	mov	r0, r23
    3edc:	16 f4       	brtc	.+4      	; 0x3ee2 <__divmodhi4+0xa>
    3ede:	00 94       	com	r0
    3ee0:	07 d0       	rcall	.+14     	; 0x3ef0 <__divmodhi4_neg1>
    3ee2:	77 fd       	sbrc	r23, 7
    3ee4:	09 d0       	rcall	.+18     	; 0x3ef8 <__divmodhi4_neg2>
    3ee6:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__udivmodhi4>
    3eea:	07 fc       	sbrc	r0, 7
    3eec:	05 d0       	rcall	.+10     	; 0x3ef8 <__divmodhi4_neg2>
    3eee:	3e f4       	brtc	.+14     	; 0x3efe <__divmodhi4_exit>

00003ef0 <__divmodhi4_neg1>:
    3ef0:	90 95       	com	r25
    3ef2:	81 95       	neg	r24
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	08 95       	ret

00003ef8 <__divmodhi4_neg2>:
    3ef8:	70 95       	com	r23
    3efa:	61 95       	neg	r22
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255

00003efe <__divmodhi4_exit>:
    3efe:	08 95       	ret

00003f00 <__tablejump2__>:
    3f00:	ee 0f       	add	r30, r30
    3f02:	ff 1f       	adc	r31, r31
    3f04:	88 1f       	adc	r24, r24
    3f06:	8b bf       	out	0x3b, r24	; 59
    3f08:	07 90       	elpm	r0, Z+
    3f0a:	f6 91       	elpm	r31, Z
    3f0c:	e0 2d       	mov	r30, r0
    3f0e:	1b be       	out	0x3b, r1	; 59
    3f10:	19 94       	eijmp

00003f12 <__muluhisi3>:
    3f12:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__umulhisi3>
    3f16:	a5 9f       	mul	r26, r21
    3f18:	90 0d       	add	r25, r0
    3f1a:	b4 9f       	mul	r27, r20
    3f1c:	90 0d       	add	r25, r0
    3f1e:	a4 9f       	mul	r26, r20
    3f20:	80 0d       	add	r24, r0
    3f22:	91 1d       	adc	r25, r1
    3f24:	11 24       	eor	r1, r1
    3f26:	08 95       	ret

00003f28 <__udivmodhi4>:
    3f28:	aa 1b       	sub	r26, r26
    3f2a:	bb 1b       	sub	r27, r27
    3f2c:	51 e1       	ldi	r21, 0x11	; 17
    3f2e:	07 c0       	rjmp	.+14     	; 0x3f3e <__udivmodhi4_ep>

00003f30 <__udivmodhi4_loop>:
    3f30:	aa 1f       	adc	r26, r26
    3f32:	bb 1f       	adc	r27, r27
    3f34:	a6 17       	cp	r26, r22
    3f36:	b7 07       	cpc	r27, r23
    3f38:	10 f0       	brcs	.+4      	; 0x3f3e <__udivmodhi4_ep>
    3f3a:	a6 1b       	sub	r26, r22
    3f3c:	b7 0b       	sbc	r27, r23

00003f3e <__udivmodhi4_ep>:
    3f3e:	88 1f       	adc	r24, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	5a 95       	dec	r21
    3f44:	a9 f7       	brne	.-22     	; 0x3f30 <__udivmodhi4_loop>
    3f46:	80 95       	com	r24
    3f48:	90 95       	com	r25
    3f4a:	bc 01       	movw	r22, r24
    3f4c:	cd 01       	movw	r24, r26
    3f4e:	08 95       	ret

00003f50 <__umulhisi3>:
    3f50:	a2 9f       	mul	r26, r18
    3f52:	b0 01       	movw	r22, r0
    3f54:	b3 9f       	mul	r27, r19
    3f56:	c0 01       	movw	r24, r0
    3f58:	a3 9f       	mul	r26, r19
    3f5a:	70 0d       	add	r23, r0
    3f5c:	81 1d       	adc	r24, r1
    3f5e:	11 24       	eor	r1, r1
    3f60:	91 1d       	adc	r25, r1
    3f62:	b2 9f       	mul	r27, r18
    3f64:	70 0d       	add	r23, r0
    3f66:	81 1d       	adc	r24, r1
    3f68:	11 24       	eor	r1, r1
    3f6a:	91 1d       	adc	r25, r1
    3f6c:	08 95       	ret

00003f6e <_exit>:
    3f6e:	f8 94       	cli

00003f70 <__stop_program>:
    3f70:	ff cf       	rjmp	.-2      	; 0x3f70 <__stop_program>
