
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00003a36  00003aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010a0  008020c6  008020c6  00003b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eac6  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e30  00000000  00000000  00012d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d10  00000000  00000000  00018b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001244  00000000  00000000  0001d890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004db3  00000000  00000000  0001ead4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059f2  00000000  00000000  00023887  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  00029279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 02 	jmp	0x552	; 0x552 <__ctors_end>
       4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
       8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
       c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      10:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      14:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      18:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      1c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      20:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      24:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      28:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      30:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      34:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      38:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      3c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      40:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      44:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      48:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      4c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      50:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      54:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      58:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      5c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      60:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      64:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__vector_25>
      68:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      6c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      70:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__vector_28>
      74:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      78:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      7c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      80:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      84:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      88:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      8c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      90:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      94:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      98:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      9c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      a8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      ac:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      b8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      bc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      c0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      c4:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_49>
      c8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      cc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      d8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      dc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      e8:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_58>
      ec:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      f8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
      fc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     100:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     104:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     108:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     10c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     110:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     114:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     118:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     11c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     120:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     124:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     128:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     12c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     130:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     134:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     138:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     13c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     140:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     144:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     148:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     14c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     150:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     154:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     158:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     15c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     160:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__vector_88>
     164:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     168:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     16c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_91>
     170:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     174:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     178:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     17c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     180:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     184:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     188:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     18c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     190:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     194:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     198:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     19c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1a8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1ac:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1b8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1bc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1c8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1cc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1d8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1dc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1e8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1ec:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f0:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1f8:	0c 94 df 02 	jmp	0x5be	; 0x5be <__bad_interrupt>
     1fc:	68 17       	cp	r22, r24
     1fe:	6b 17       	cp	r22, r27
     200:	6e 17       	cp	r22, r30
     202:	71 17       	cp	r23, r17
     204:	74 17       	cp	r23, r20
     206:	77 17       	cp	r23, r23
     208:	79 17       	cp	r23, r25
     20a:	8a 17       	cp	r24, r26
     20c:	92 17       	cp	r25, r18
     20e:	9c 17       	cp	r25, r28
     210:	9a 17       	cp	r25, r26

00000212 <__trampolines_start>:
     212:	0c 94 cb 03 	jmp	0x796	; 0x796 <_ZN21task_pendulum_encoder3runEv>
     216:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <_ZN14frt_text_queue7putcharEc>
     21a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
     21e:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <_ZN8emstreamlsE15ser_manipulator+0x2a>
     222:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <_ZN8emstream13ready_to_sendEv>
     226:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <_ZN8emstreamlsE15ser_manipulator+0x36>
     22a:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <_ZN8emstream7getcharEv>
     22e:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <_GLOBAL__sub_I_counter>
     232:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_call_static_run_method>
     236:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <_ZN8emstream12transmit_nowEv>
     23a:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <_ZN8emstreamlsE15ser_manipulator+0x30>
     23e:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <_ZN8emstreamlsE15ser_manipulator+0x40>
     242:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <_ZN8emstream12clear_screenEv>
     246:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <_ZN14frt_text_queue14check_for_charEv>
     24a:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN18task_motor_encoder3runEv>
     24e:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <_ZN8emstreamlsE15ser_manipulator+0x62>
     252:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_ZN18task_motor_command3runEv>
     256:	0c 94 49 13 	jmp	0x2692	; 0x2692 <_ZN8frt_task12print_statusER8emstream>
     25a:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__cxa_pure_virtual>
     25e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     262:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <prvIdleTask>
     266:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN22task_system_controller3runEv>
     26a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <_ZN8emstreamlsE15ser_manipulator+0x3c>
     26e:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_ZN8emstream14check_for_charEv>
     272:	0c 94 96 18 	jmp	0x312c	; 0x312c <_ZN5rs2327putcharEc>
     276:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <_ZN5rs23214check_for_charEv>
     27a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <_ZN14frt_text_queue7getcharEv>
     27e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_ZN17task_limit_switch3runEv>
     282:	0c 94 72 05 	jmp	0xae4	; 0xae4 <_ZN9task_user3runEv>
     286:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <_ZN8emstreamlsE15ser_manipulator+0x24>
     28a:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <_ZN8emstreamlsE15ser_manipulator+0x82>
     28e:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <_ZN8emstreamlsE15ser_manipulator+0x72>
     292:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_ZN5rs23212clear_screenEv>
     296:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <_ZN5rs2327getcharEv>

0000029a <__trampolines_end>:
     29a:	2c 20       	and	r2, r12
     29c:	54 43       	sbci	r21, 0x34	; 52
     29e:	43 30       	cpi	r20, 0x03	; 3
     2a0:	43 43       	sbci	r20, 0x33	; 51
     2a2:	41 3d       	cpi	r20, 0xD1	; 209
	...

000002a5 <_ZZN9task_user11show_statusEvE3__c_3>:
     2a5:	2f 00                                               /.

000002a7 <_ZZN9task_user11show_statusEvE3__c_2>:
     2a7:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

000002b5 <_ZZN9task_user11show_statusEvE3__c_1>:
     2b5:	54 69 6d 65 3a 20 00                                Time: .

000002bc <_ZZN9task_user11show_statusEvE3__c_0>:
     2bc:	46 65 62 20 32 32 20 32 30 32 35 00                 Feb 22 2025.

000002c8 <_ZZN9task_user11show_statusEvE3__c>:
     2c8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     2d8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000002e7 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     2e7:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000002f6 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     2f6:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     306:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

00000311 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     311:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     321:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000032f <_ZZN9task_user18print_help_messageEvE3__c_7>:
     32f:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     33f:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     34f:	6d 61 74 69 6f 6e 00                                mation.

00000356 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     356:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     366:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000377 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     377:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     387:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000038f <_ZZN9task_user18print_help_messageEvE3__c_4>:
     38f:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     39f:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000003ab <_ZZN9task_user18print_help_messageEvE3__c_3>:
     3ab:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     3bb:	68 65 20 41 56 52 00                                he AVR.

000003c2 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     3c2:	20 68 65 6c 70 00                                    help.

000003c8 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     3c8:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     3d8:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000003e7 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     3e7:	1b 5b 33 30 6d 00                                   .[30m.

000003ed <_ZZN9task_user18print_help_messageEvE3__c>:
     3ed:	1b 5b 34 36 6d 00                                   .[46m.

000003f3 <_ZZN9task_user3runEvE3__c_3>:
     3f3:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     403:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000410 <_ZZN9task_user3runEvE3__c_2>:
     410:	3a 57 54 46 3f 00                                   :WTF?.

00000416 <_ZZN9task_user3runEvE3__c_1>:
     416:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     426:	65 00                                               e.

00000428 <_ZZN9task_user3runEvE3__c_0>:
     428:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

00000436 <_ZZN9task_user3runEvE3__c>:
     436:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     446:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

00000454 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     454:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

0000045e <_ZZN8frt_task15emergency_resetEvE3__c>:
     45e:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

0000046d <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     46d:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     47d:	61 73 6b 20 00                                      ask .

00000482 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     482:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000490 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     490:	20 63 72 65 61 74 65 64 00                           created.

00000499 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     499:	54 61 73 6b 20 00                                   Task .

0000049f <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     49f:	1b 5b 32 32 6d 00                                   .[22m.

000004a5 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     4a5:	54 61 73 6b 3a 20 00                                Task: .

000004ac <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     4ac:	1b 5b 31 6d 00                                      .[1m.

000004b1 <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     4b1:	1b 5b 32 32 6d 00                                   .[22m.

000004b7 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     4b7:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

000004c2 <_ZZ17print_task_stacksP8emstreamE3__c>:
     4c2:	1b 5b 31 6d 00                                      .[1m.

000004c7 <_ZZ15print_task_listP8emstreamE3__c_9>:
     4c7:	09 09 00                                            ...

000004ca <_ZZ15print_task_listP8emstreamE3__c_8>:
     4ca:	2f 00                                               /.

000004cc <_ZZ15print_task_listP8emstreamE3__c_7>:
     4cc:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000004d7 <_ZZ15print_task_listP8emstreamE3__c_6>:
     4d7:	09 2d 2d 2d 2d 00                                   .----.

000004dd <_ZZ15print_task_listP8emstreamE3__c_5>:
     4dd:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000004e9 <_ZZ15print_task_listP8emstreamE3__c_4>:
     4e9:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000004fa <_ZZ15print_task_listP8emstreamE3__c_3>:
     4fa:	09 52 75 6e 73 00                                   .Runs.

00000500 <_ZZ15print_task_listP8emstreamE3__c_2>:
     500:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

0000050c <_ZZ15print_task_listP8emstreamE3__c_1>:
     50c:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

0000051d <_ZZ15print_task_listP8emstreamE3__c_0>:
     51d:	09 53 74 61 63 6b 00                                .Stack.

00000524 <_ZZ15print_task_listP8emstreamE3__c>:
     524:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

0000052f <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     52f:	09 00                                               ..

00000531 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     531:	09 00                                               ..

00000533 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     533:	2f 00                                               /.

00000535 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     535:	09 00                                               ..

00000537 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     537:	09 00                                               ..

00000539 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     539:	1b 5b 32 32 6d 00                                   .[22m.

0000053f <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     53f:	1b 5b 31 6d 00                                      .[1m.

00000544 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     544:	1b 5b 31 6d 00                                      .[1m.

00000549 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     549:	20 20 00                                              .

0000054c <_call_static_run_method>:
     54c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN8frt_task22_call_users_run_methodEPS_>

00000550 <__ctors_start>:
     550:	13 1c       	adc	r1, r3

00000552 <__ctors_end>:
     552:	11 24       	eor	r1, r1
     554:	1f be       	out	0x3f, r1	; 63
     556:	cf ef       	ldi	r28, 0xFF	; 255
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df e3       	ldi	r29, 0x3F	; 63
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	00 e0       	ldi	r16, 0x00	; 0
     560:	0c bf       	out	0x3c, r16	; 60
     562:	18 be       	out	0x38, r1	; 56
     564:	19 be       	out	0x39, r1	; 57
     566:	1a be       	out	0x3a, r1	; 58
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_copy_data>:
     56a:	10 e2       	ldi	r17, 0x20	; 32
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	e6 e3       	ldi	r30, 0x36	; 54
     572:	fa e3       	ldi	r31, 0x3A	; 58
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	0b bf       	out	0x3b, r16	; 59
     578:	02 c0       	rjmp	.+4      	; 0x57e <__do_copy_data+0x14>
     57a:	07 90       	elpm	r0, Z+
     57c:	0d 92       	st	X+, r0
     57e:	a6 3c       	cpi	r26, 0xC6	; 198
     580:	b1 07       	cpc	r27, r17
     582:	d9 f7       	brne	.-10     	; 0x57a <__do_copy_data+0x10>
     584:	1b be       	out	0x3b, r1	; 59

00000586 <__do_clear_bss>:
     586:	21 e3       	ldi	r18, 0x31	; 49
     588:	a6 ec       	ldi	r26, 0xC6	; 198
     58a:	b0 e2       	ldi	r27, 0x20	; 32
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a6 36       	cpi	r26, 0x66	; 102
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>

00000596 <__do_global_ctors>:
     596:	12 e0       	ldi	r17, 0x02	; 2
     598:	c9 ea       	ldi	r28, 0xA9	; 169
     59a:	d2 e0       	ldi	r29, 0x02	; 2
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <__do_global_ctors+0x16>
     5a0:	21 97       	sbiw	r28, 0x01	; 1
     5a2:	01 09       	sbc	r16, r1
     5a4:	80 2f       	mov	r24, r16
     5a6:	fe 01       	movw	r30, r28
     5a8:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__tablejump2__>
     5ac:	c8 3a       	cpi	r28, 0xA8	; 168
     5ae:	d1 07       	cpc	r29, r17
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	08 07       	cpc	r16, r24
     5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__do_global_ctors+0xa>
     5b6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <main>
     5ba:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

000005be <__bad_interrupt>:
     5be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c2 <_ZN17task_limit_switch3runEv>:
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
}


void task_limit_switch::run(void) {
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <_ZN17task_limit_switch3runEv+0x6>
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     5d0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
     5d4:	69 83       	std	Y+1, r22	; 0x01
     5d6:	7a 83       	std	Y+2, r23	; 0x02
     5d8:	8b 83       	std	Y+3, r24	; 0x03
     5da:	9c 83       	std	Y+4, r25	; 0x04

	PORTD.DIRCLR |= bit_mask;
     5dc:	e0 e6       	ldi	r30, 0x60	; 96
     5de:	f6 e0       	ldi	r31, 0x06	; 6
     5e0:	92 81       	ldd	r25, Z+2	; 0x02
     5e2:	d8 01       	movw	r26, r16
     5e4:	52 96       	adiw	r26, 0x12	; 18
     5e6:	8c 91       	ld	r24, X
     5e8:	52 97       	sbiw	r26, 0x12	; 18
     5ea:	89 2b       	or	r24, r25
     5ec:	82 83       	std	Z+2, r24	; 0x02
	
	if (bit_mask == PIN0_bm) {
     5ee:	52 96       	adiw	r26, 0x12	; 18
     5f0:	8c 91       	ld	r24, X
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	61 f4       	brne	.+24     	; 0x60e <_ZN17task_limit_switch3runEv+0x4c>
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
     5f6:	88 e1       	ldi	r24, 0x18	; 24
     5f8:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f8 e6       	ldi	r31, 0x68	; 104
     600:	ef 2e       	mov	r14, r31
     602:	f6 e0       	ldi	r31, 0x06	; 6
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
     608:	dd 24       	eor	r13, r13
     60a:	d3 94       	inc	r13
     60c:	06 c0       	rjmp	.+12     	; 0x61a <_ZN17task_limit_switch3runEv+0x58>
	PORTD.DIRCLR |= bit_mask;
	
	if (bit_mask == PIN0_bm) {
		PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;
	}
	else if (bit_mask == PIN2_bm) {
     60e:	84 30       	cpi	r24, 0x04	; 4
     610:	a9 f7       	brne	.-22     	; 0x5fc <_ZN17task_limit_switch3runEv+0x3a>
		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
     612:	88 e1       	ldi	r24, 0x18	; 24
     614:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     618:	f1 cf       	rjmp	.-30     	; 0x5fc <_ZN17task_limit_switch3runEv+0x3a>
	bool rightLimit = false; 		// Init right limit bool
	bool leftLimit = false; 		// Init left limit bool

	while(1) {

		if(!(PORTD_IN & PIN0_bm)) {						// check whether limit is pressed (pin D0 is high)
     61a:	f7 01       	movw	r30, r14
     61c:	80 81       	ld	r24, Z
     61e:	80 fd       	sbrc	r24, 0
     620:	0b c0       	rjmp	.+22     	; 0x638 <_ZN17task_limit_switch3runEv+0x76>
				leftLimit = true;
				leftLimitSwitch->put(leftLimit);
     622:	e0 91 52 31 	lds	r30, 0x3152	; 0x803152 <leftLimitSwitch>
     626:	f0 91 53 31 	lds	r31, 0x3153	; 0x803153 <leftLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	0f 92       	push	r0
			the_data = new_data;
     630:	d0 82       	st	Z, r13
			portEXIT_CRITICAL ();
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0a c0       	rjmp	.+20     	; 0x64c <_ZN17task_limit_switch3runEv+0x8a>
		}
		else
		{
			leftLimit = false;
			leftLimitSwitch->put(leftLimit);
     638:	e0 91 52 31 	lds	r30, 0x3152	; 0x803152 <leftLimitSwitch>
     63c:	f0 91 53 31 	lds	r31, 0x3153	; 0x803153 <leftLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	0f 92       	push	r0
			the_data = new_data;
     646:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
		}


		if (!(PORTD_IN & PIN2_bm)) {				// check whether limit is pressed (pin D1 is high)
     64c:	d7 01       	movw	r26, r14
     64e:	8c 91       	ld	r24, X
     650:	82 fd       	sbrc	r24, 2
     652:	0b c0       	rjmp	.+22     	; 0x66a <_ZN17task_limit_switch3runEv+0xa8>
			rightLimit = true;
			rightLimitSwitch->put(rightLimit);
     654:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <rightLimitSwitch>
     658:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	0f 92       	push	r0
			the_data = new_data;
     662:	d0 82       	st	Z, r13
			portEXIT_CRITICAL ();
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0a c0       	rjmp	.+20     	; 0x67e <_ZN17task_limit_switch3runEv+0xbc>

		}
		else {
			rightLimit = false;
			rightLimitSwitch->put(rightLimit);
     66a:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <rightLimitSwitch>
     66e:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <rightLimitSwitch+0x1>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	0f 92       	push	r0
			the_data = new_data;
     678:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
			*p_serial << "rightLimit: " << rightLimit << endl;
		}
		*/
	
		// Increment counter for debugging
		runs++;
     67e:	f8 01       	movw	r30, r16
     680:	86 85       	ldd	r24, Z+14	; 0x0e
     682:	97 85       	ldd	r25, Z+15	; 0x0f
     684:	a0 89       	ldd	r26, Z+16	; 0x10
     686:	b1 89       	ldd	r27, Z+17	; 0x11
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	a1 1d       	adc	r26, r1
     68c:	b1 1d       	adc	r27, r1
     68e:	86 87       	std	Z+14, r24	; 0x0e
     690:	97 87       	std	Z+15, r25	; 0x0f
     692:	a0 8b       	std	Z+16, r26	; 0x10
     694:	b1 8b       	std	Z+17, r27	; 0x11
		 *                    delay so as to get precise, regular timing
		 *  @param interval The duration of the delay interval in RTOS ticks
		 */
		void delay_from_to (portTickType& from_ticks, portTickType interval)
		{
			vTaskDelayUntil (&from_ticks, interval);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskDelayUntil>
     6a6:	b9 cf       	rjmp	.-142    	; 0x61a <_ZN17task_limit_switch3runEv+0x58>

000006a8 <_ZN17task_limit_switchC1EPKchjP8emstreamh>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_limit_switch.h"               // Template

task_limit_switch::task_limit_switch (
     6a8:	ef 92       	push	r14
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
	size_t a_stack_size,
	emstream* p_ser_dev,
	uint8_t a_bit_mask
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     6b4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     6b8:	8a e0       	ldi	r24, 0x0A	; 10
     6ba:	90 e2       	ldi	r25, 0x20	; 32
     6bc:	88 83       	st	Y, r24
     6be:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
	bit_mask =  a_bit_mask;
     6c0:	ea 8a       	std	Y+18, r14	; 0x12
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <_ZN18task_motor_command3runEv>:
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}


void task_motor_command::run(void) {
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <_ZN18task_motor_command3runEv+0x6>
     6d4:	1f 92       	push	r1
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     6dc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
     6e0:	69 83       	std	Y+1, r22	; 0x01
     6e2:	7a 83       	std	Y+2, r23	; 0x02
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     6e8:	f8 01       	movw	r30, r16
     6ea:	86 85       	ldd	r24, Z+14	; 0x0e
     6ec:	97 85       	ldd	r25, Z+15	; 0x0f
     6ee:	a0 89       	ldd	r26, Z+16	; 0x10
     6f0:	b1 89       	ldd	r27, Z+17	; 0x11
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	a1 1d       	adc	r26, r1
     6f6:	b1 1d       	adc	r27, r1
     6f8:	86 87       	std	Z+14, r24	; 0x0e
     6fa:	97 87       	std	Z+15, r25	; 0x0f
     6fc:	a0 8b       	std	Z+16, r26	; 0x10
     6fe:	b1 8b       	std	Z+17, r27	; 0x11
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskDelayUntil>
     710:	eb cf       	rjmp	.-42     	; 0x6e8 <_ZN18task_motor_command3runEv+0x1a>

00000712 <_ZN18task_motor_commandC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_motor_command.h"                  // Template

task_motor_command::task_motor_command(
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     71c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     720:	82 e1       	ldi	r24, 0x12	; 18
     722:	90 e2       	ldi	r25, 0x20	; 32
     724:	88 83       	st	Y, r24
     726:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <_ZN18task_motor_encoder3runEv>:
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
		// Nothing to do in this constructor other than call the parent constructor
}

void task_motor_encoder::run(void) {
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <_ZN18task_motor_encoder3runEv+0x6>
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     740:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
     744:	69 83       	std	Y+1, r22	; 0x01
     746:	7a 83       	std	Y+2, r23	; 0x02
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     74c:	f8 01       	movw	r30, r16
     74e:	86 85       	ldd	r24, Z+14	; 0x0e
     750:	97 85       	ldd	r25, Z+15	; 0x0f
     752:	a0 89       	ldd	r26, Z+16	; 0x10
     754:	b1 89       	ldd	r27, Z+17	; 0x11
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	a1 1d       	adc	r26, r1
     75a:	b1 1d       	adc	r27, r1
     75c:	86 87       	std	Z+14, r24	; 0x0e
     75e:	97 87       	std	Z+15, r25	; 0x0f
     760:	a0 8b       	std	Z+16, r26	; 0x10
     762:	b1 8b       	std	Z+17, r27	; 0x11
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	ce 01       	movw	r24, r28
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskDelayUntil>
     774:	eb cf       	rjmp	.-42     	; 0x74c <_ZN18task_motor_encoder3runEv+0x1a>

00000776 <_ZN18task_motor_encoderC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_motor_encoder.h"                  // Template

task_motor_encoder::task_motor_encoder(
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     780:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     784:	8a e1       	ldi	r24, 0x1A	; 26
     786:	90 e2       	ldi	r25, 0x20	; 32
     788:	88 83       	st	Y, r24
     78a:	99 83       	std	Y+1, r25	; 0x01
		// Nothing to do in this constructor other than call the parent constructor
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <_ZN21task_pendulum_encoder3runEv>:
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}

void task_pendulum_encoder::run(void) {
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <_ZN21task_pendulum_encoder3runEv+0x6>
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     7a4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
     7a8:	69 83       	std	Y+1, r22	; 0x01
     7aa:	7a 83       	std	Y+2, r23	; 0x02
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	9c 83       	std	Y+4, r25	; 0x04
			*p_serial << "Scary, scary skeletons!" << endl;
		}
		*/
				
		// Increment counter for debugging
		runs++;
     7b0:	f8 01       	movw	r30, r16
     7b2:	86 85       	ldd	r24, Z+14	; 0x0e
     7b4:	97 85       	ldd	r25, Z+15	; 0x0f
     7b6:	a0 89       	ldd	r26, Z+16	; 0x10
     7b8:	b1 89       	ldd	r27, Z+17	; 0x11
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	a1 1d       	adc	r26, r1
     7be:	b1 1d       	adc	r27, r1
     7c0:	86 87       	std	Z+14, r24	; 0x0e
     7c2:	97 87       	std	Z+15, r25	; 0x0f
     7c4:	a0 8b       	std	Z+16, r26	; 0x10
     7c6:	b1 8b       	std	Z+17, r27	; 0x11
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskDelayUntil>
     7d8:	eb cf       	rjmp	.-42     	; 0x7b0 <_ZN21task_pendulum_encoder3runEv+0x1a>

000007da <_ZN21task_pendulum_encoderC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_pendulum_encoder.h"

task_pendulum_encoder::task_pendulum_encoder(
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     7e4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     7e8:	82 e2       	ldi	r24, 0x22	; 34
     7ea:	90 e2       	ldi	r25, 0x20	; 32
     7ec:	88 83       	st	Y, r24
     7ee:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <_ZN22task_system_controller3runEv>:
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
	// Nothing to do in this constructor other than call the parent constructor
}


void task_system_controller::run(void) {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <_ZN22task_system_controller3runEv+0x6>
     800:	1f 92       	push	r1
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	8c 01       	movw	r16, r24
	// Make a variable which will hold times to use for precise task scheduling
	portTickType previousTicks = xTaskGetTickCount ();
     808:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
     80c:	69 83       	std	Y+1, r22	; 0x01
     80e:	7a 83       	std	Y+2, r23	; 0x02
     810:	8b 83       	std	Y+3, r24	; 0x03
     812:	9c 83       	std	Y+4, r25	; 0x04
		}
		*/

		
		// Increment counter for debugging
		runs++;
     814:	f8 01       	movw	r30, r16
     816:	86 85       	ldd	r24, Z+14	; 0x0e
     818:	97 85       	ldd	r25, Z+15	; 0x0f
     81a:	a0 89       	ldd	r26, Z+16	; 0x10
     81c:	b1 89       	ldd	r27, Z+17	; 0x11
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	a1 1d       	adc	r26, r1
     822:	b1 1d       	adc	r27, r1
     824:	86 87       	std	Z+14, r24	; 0x0e
     826:	97 87       	std	Z+15, r25	; 0x0f
     828:	a0 8b       	std	Z+16, r26	; 0x10
     82a:	b1 8b       	std	Z+17, r27	; 0x11
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskDelayUntil>
     83c:	eb cf       	rjmp	.-42     	; 0x814 <_ZN22task_system_controller3runEv+0x1a>

0000083e <_ZN22task_system_controllerC1EPKchjP8emstream>:
#include "shared_data_sender.h"
#include "shared_data_receiver.h"

#include "task_system_controller.h"                  // Template

task_system_controller::task_system_controller(
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
	unsigned portBASE_TYPE a_priority,
	size_t a_stack_size,
	emstream* p_ser_dev
)
// Call the parent (task base) constructor
: frt_task (a_name, a_priority, a_stack_size, p_ser_dev) {
     848:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     84c:	8a e2       	ldi	r24, 0x2A	; 42
     84e:	90 e2       	ldi	r25, 0x20	; 32
     850:	88 83       	st	Y, r24
     852:	99 83       	std	Y+1, r25	; 0x01
	// Nothing to do in this constructor other than call the parent constructor
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <_ZN9task_userC1EPKchjP8emstream>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_user::task_user (const char* a_name, 
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	ec 01       	movw	r28, r24
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev)
     868:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN8frt_taskC1EPKchjP8emstream>
     86c:	82 e3       	ldi	r24, 0x32	; 50
     86e:	90 e2       	ldi	r25, 0x20	; 32
     870:	88 83       	st	Y, r24
     872:	99 83       	std	Y+1, r25	; 0x01
{
	// Nothing is done in the body of this constructor. All the work is done in the
	// call to the frt_task constructor on the line just above this one
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <_ZN9task_user18print_help_messageEv>:
//-------------------------------------------------------------------------------------
/** This method prints a simple help message.
 */

void task_user::print_help_message (void)
{
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
	*p_serial << ATERM_BKG_CYAN << ATERM_TXT_BLACK << clrscr;
     888:	6a e0       	ldi	r22, 0x0A	; 10
     88a:	8e 81       	ldd	r24, Y+6	; 0x06
     88c:	9f 81       	ldd	r25, Y+7	; 0x07
     88e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     892:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     894:	6d ee       	ldi	r22, 0xED	; 237
     896:	73 e0       	ldi	r23, 0x03	; 3
     898:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     89c:	6a e0       	ldi	r22, 0x0A	; 10
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     8a4:	8c 01       	movw	r16, r24
     8a6:	67 ee       	ldi	r22, 0xE7	; 231
     8a8:	73 e0       	ldi	r23, 0x03	; 3
     8aa:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     8ae:	67 e0       	ldi	r22, 0x07	; 7
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PROGRAM_VERSION << PMS (" help") << endl;
     8b6:	6a e0       	ldi	r22, 0x0A	; 10
     8b8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ba:	9f 81       	ldd	r25, Y+7	; 0x07
     8bc:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     8c0:	8c 01       	movw	r16, r24
     8c2:	68 ec       	ldi	r22, 0xC8	; 200
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     8ca:	6a e0       	ldi	r22, 0x0A	; 10
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     8d2:	8c 01       	movw	r16, r24
     8d4:	62 ec       	ldi	r22, 0xC2	; 194
     8d6:	73 e0       	ldi	r23, 0x03	; 3
     8d8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     8dc:	66 e0       	ldi	r22, 0x06	; 6
     8de:	c8 01       	movw	r24, r16
     8e0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-C: Reset the AVR") << endl;
     8e4:	6a e0       	ldi	r22, 0x0A	; 10
     8e6:	8e 81       	ldd	r24, Y+6	; 0x06
     8e8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ea:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     8ee:	8c 01       	movw	r16, r24
     8f0:	6b ea       	ldi	r22, 0xAB	; 171
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     8f8:	66 e0       	ldi	r22, 0x06	; 6
     8fa:	c8 01       	movw	r24, r16
     8fc:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  Ctl-A: Enter command mode") << endl;
     900:	6a e0       	ldi	r22, 0x0A	; 10
     902:	8e 81       	ldd	r24, Y+6	; 0x06
     904:	9f 81       	ldd	r25, Y+7	; 0x07
     906:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     90a:	8c 01       	movw	r16, r24
     90c:	6f e8       	ldi	r22, 0x8F	; 143
     90e:	73 e0       	ldi	r23, 0x03	; 3
     910:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     914:	66 e0       	ldi	r22, 0x06	; 6
     916:	c8 01       	movw	r24, r16
     918:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("  In command mode only:") << endl;
     91c:	6a e0       	ldi	r22, 0x0A	; 10
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	9f 81       	ldd	r25, Y+7	; 0x07
     922:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     926:	8c 01       	movw	r16, r24
     928:	67 e7       	ldi	r22, 0x77	; 119
     92a:	73 e0       	ldi	r23, 0x03	; 3
     92c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     930:	66 e0       	ldi	r22, 0x06	; 6
     932:	c8 01       	movw	r24, r16
     934:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    n:   Show the time right now") << endl;
     938:	6a e0       	ldi	r22, 0x0A	; 10
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	9f 81       	ldd	r25, Y+7	; 0x07
     93e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     942:	8c 01       	movw	r16, r24
     944:	66 e5       	ldi	r22, 0x56	; 86
     946:	73 e0       	ldi	r23, 0x03	; 3
     948:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     94c:	66 e0       	ldi	r22, 0x06	; 6
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    v:   Version and setup information") << endl;
     954:	6a e0       	ldi	r22, 0x0A	; 10
     956:	8e 81       	ldd	r24, Y+6	; 0x06
     958:	9f 81       	ldd	r25, Y+7	; 0x07
     95a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     95e:	8c 01       	movw	r16, r24
     960:	6f e2       	ldi	r22, 0x2F	; 47
     962:	73 e0       	ldi	r23, 0x03	; 3
     964:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     968:	66 e0       	ldi	r22, 0x06	; 6
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    s:   Stack dump for tasks") << endl;
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	8e 81       	ldd	r24, Y+6	; 0x06
     974:	9f 81       	ldd	r25, Y+7	; 0x07
     976:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     97a:	8c 01       	movw	r16, r24
     97c:	61 e1       	ldi	r22, 0x11	; 17
     97e:	73 e0       	ldi	r23, 0x03	; 3
     980:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     984:	66 e0       	ldi	r22, 0x06	; 6
     986:	c8 01       	movw	r24, r16
     988:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    e:   Exit command mode") << endl;
     98c:	6a e0       	ldi	r22, 0x0A	; 10
     98e:	8e 81       	ldd	r24, Y+6	; 0x06
     990:	9f 81       	ldd	r25, Y+7	; 0x07
     992:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     996:	8c 01       	movw	r16, r24
     998:	66 ef       	ldi	r22, 0xF6	; 246
     99a:	72 e0       	ldi	r23, 0x02	; 2
     99c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     9a0:	66 e0       	ldi	r22, 0x06	; 6
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	*p_serial << PMS ("    h:   HALP!") << endl;
     9a8:	6a e0       	ldi	r22, 0x0A	; 10
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	9f 81       	ldd	r25, Y+7	; 0x07
     9ae:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     9b2:	ec 01       	movw	r28, r24
     9b4:	67 ee       	ldi	r22, 0xE7	; 231
     9b6:	72 e0       	ldi	r23, 0x02	; 2
     9b8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     9bc:	66 e0       	ldi	r22, 0x06	; 6
     9be:	ce 01       	movw	r24, r28
     9c0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <_ZN9task_user11show_statusEv>:
 *    \li Processor cycles used by each task
 *    \li Amount of heap space free and setting of RTOS tick timer
 */

void task_user::show_status (void)
{
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <_ZN9task_user11show_statusEv+0x16>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <_ZN9task_user11show_statusEv+0x18>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     9ec:	19 82       	std	Y+1, r1	; 0x01
     9ee:	1a 82       	std	Y+2, r1	; 0x02
     9f0:	1b 82       	std	Y+3, r1	; 0x03
     9f2:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     9f4:	1d 82       	std	Y+5, r1	; 0x05
     9f6:	1e 82       	std	Y+6, r1	; 0x06
		 *  means that the number returned is how many bytes are currently unused. 
		 *  @return The approximate number of bytes left for use in the heap
		 */
		size_t heap_left (void)
		{
			return (xPortGetFreeHeapSize ());
     9f8:	0e 94 6c 07 	call	0xed8	; 0xed8 <xPortGetFreeHeapSize>
     9fc:	6c 01       	movw	r12, r24
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
			  << PMS ("Time: ") << the_time.set_to_now ()
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN10time_stamp10set_to_nowEv>
     a06:	5c 01       	movw	r10, r24
void task_user::show_status (void)
{
	time_stamp the_time;					// Holds current time for printing

	// Show program vesion, time, and free heap space
	*p_serial << endl << PROGRAM_VERSION << PMS (__DATE__) << endl 
     a08:	66 e0       	ldi	r22, 0x06	; 6
     a0a:	f8 01       	movw	r30, r16
     a0c:	86 81       	ldd	r24, Z+6	; 0x06
     a0e:	97 81       	ldd	r25, Z+7	; 0x07
     a10:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a14:	6a e0       	ldi	r22, 0x0A	; 10
     a16:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a1a:	7c 01       	movw	r14, r24
     a1c:	68 ec       	ldi	r22, 0xC8	; 200
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     a24:	6a e0       	ldi	r22, 0x0A	; 10
     a26:	c7 01       	movw	r24, r14
     a28:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a2c:	7c 01       	movw	r14, r24
     a2e:	6c eb       	ldi	r22, 0xBC	; 188
     a30:	72 e0       	ldi	r23, 0x02	; 2
     a32:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     a36:	66 e0       	ldi	r22, 0x06	; 6
     a38:	c7 01       	movw	r24, r14
     a3a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
			  << PMS ("Time: ") << the_time.set_to_now ()
     a3e:	6a e0       	ldi	r22, 0x0A	; 10
     a40:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a44:	7c 01       	movw	r14, r24
     a46:	65 eb       	ldi	r22, 0xB5	; 181
     a48:	72 e0       	ldi	r23, 0x02	; 2
     a4a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     a4e:	b5 01       	movw	r22, r10
     a50:	c7 01       	movw	r24, r14
     a52:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZlsR8emstreamR10time_stamp>
			  << PMS (", Heap free: ") << heap_left() << PMS ("/") 
     a56:	6a e0       	ldi	r22, 0x0A	; 10
     a58:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a5c:	7c 01       	movw	r14, r24
     a5e:	67 ea       	ldi	r22, 0xA7	; 167
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     a66:	b6 01       	movw	r22, r12
     a68:	c7 01       	movw	r24, r14
     a6a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
     a6e:	6a e0       	ldi	r22, 0x0A	; 10
     a70:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     a74:	7c 01       	movw	r14, r24
     a76:	65 ea       	ldi	r22, 0xA5	; 165
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
			  << configTOTAL_HEAP_SIZE;
     a7e:	4f ef       	ldi	r20, 0xFF	; 255
     a80:	5f e0       	ldi	r21, 0x0F	; 15
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	c7 01       	movw	r24, r14
     a88:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN8emstreamlsEm>

	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;
     a8c:	c0 90 28 08 	lds	r12, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     a90:	d0 90 29 08 	lds	r13, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     a94:	6a e0       	ldi	r22, 0x0A	; 10
     a96:	f8 01       	movw	r30, r16
     a98:	86 81       	ldd	r24, Z+6	; 0x06
     a9a:	97 81       	ldd	r25, Z+7	; 0x07
     a9c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     aa0:	7c 01       	movw	r14, r24
     aa2:	6a e9       	ldi	r22, 0x9A	; 154
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     aaa:	b6 01       	movw	r22, r12
     aac:	c7 01       	movw	r24, r14
     aae:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
     ab2:	66 e0       	ldi	r22, 0x06	; 6
     ab4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     ab8:	66 e0       	ldi	r22, 0x06	; 6
     aba:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>

	// Have the tasks print their status
	print_task_list (p_serial);
     abe:	f8 01       	movw	r30, r16
     ac0:	86 81       	ldd	r24, Z+6	; 0x06
     ac2:	97 81       	ldd	r25, Z+7	; 0x07
     ac4:	0e 94 02 14 	call	0x2804	; 0x2804 <_Z15print_task_listP8emstream>
}
     ac8:	26 96       	adiw	r28, 0x06	; 6
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	08 95       	ret

00000ae4 <_ZN9task_user3runEv>:
 *  is just following the modern government model of "This is the land of the free...
 *  free to do exactly what you're told." 
 */

void task_user::run (void)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN9task_user3runEv+0x6>
     aea:	00 d0       	rcall	.+0      	; 0xaec <_ZN9task_user3runEv+0x8>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	8c 01       	movw	r16, r24
	public:
		/** This constructor creates a time stamp with its time set to zero.
		 */
		time_stamp (void)
		{
			tick_count = 0;
     af2:	19 82       	std	Y+1, r1	; 0x01
     af4:	1a 82       	std	Y+2, r1	; 0x02
     af6:	1b 82       	std	Y+3, r1	; 0x03
     af8:	1c 82       	std	Y+4, r1	; 0x04
			hardware_count = 0;
     afa:	1d 82       	std	Y+5, r1	; 0x05
     afc:	1e 82       	std	Y+6, r1	; 0x06
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed

	// Tell the user how to get into command mode (state 1), where the user interface
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;
     afe:	6a e0       	ldi	r22, 0x0A	; 10
     b00:	dc 01       	movw	r26, r24
     b02:	16 96       	adiw	r26, 0x06	; 6
     b04:	8d 91       	ld	r24, X+
     b06:	9c 91       	ld	r25, X
     b08:	17 97       	sbiw	r26, 0x07	; 7
     b0a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     b0e:	7c 01       	movw	r14, r24
     b10:	66 e3       	ldi	r22, 0x36	; 54
     b12:	74 e0       	ldi	r23, 0x04	; 4
     b14:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     b18:	66 e0       	ldi	r22, 0x06	; 6
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
     b20:	f8 01       	movw	r30, r16
     b22:	84 85       	ldd	r24, Z+12	; 0x0c
     b24:	88 23       	and	r24, r24
     b26:	21 f0       	breq	.+8      	; 0xb30 <_ZN9task_user3runEv+0x4c>
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	09 f4       	brne	.+2      	; 0xb2e <_ZN9task_user3runEv+0x4a>
     b2c:	5d c0       	rjmp	.+186    	; 0xbe8 <_ZN9task_user3runEv+0x104>
     b2e:	d8 c0       	rjmp	.+432    	; 0xce0 <_ZN9task_user3runEv+0x1fc>
		{
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, we transparently relay characters from the radio to the USB 
			// serial port and vice versa but watch for certain control characters
			case (0):
				if (p_serial->check_for_char ())        // If the user typed a
     b30:	86 81       	ldd	r24, Z+6	; 0x06
     b32:	97 81       	ldd	r25, Z+7	; 0x07
     b34:	dc 01       	movw	r26, r24
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	04 80       	ldd	r0, Z+4	; 0x04
     b3c:	f5 81       	ldd	r31, Z+5	; 0x05
     b3e:	e0 2d       	mov	r30, r0
     b40:	19 95       	eicall
     b42:	88 23       	and	r24, r24
     b44:	a9 f1       	breq	.+106    	; 0xbb0 <_ZN9task_user3runEv+0xcc>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
     b46:	f8 01       	movw	r30, r16
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	dc 01       	movw	r26, r24
     b4e:	ed 91       	ld	r30, X+
     b50:	fc 91       	ld	r31, X
     b52:	06 80       	ldd	r0, Z+6	; 0x06
     b54:	f7 81       	ldd	r31, Z+7	; 0x07
     b56:	e0 2d       	mov	r30, r0
     b58:	19 95       	eicall

					// In this switch statement, we respond to different characters
					switch (char_in)
     b5a:	99 27       	eor	r25, r25
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	f9 f0       	breq	.+62     	; 0xba0 <_ZN9task_user3runEv+0xbc>
     b62:	03 97       	sbiw	r24, 0x03	; 3
     b64:	09 f0       	breq	.+2      	; 0xb68 <_ZN9task_user3runEv+0x84>
     b66:	d8 c0       	rjmp	.+432    	; 0xd18 <_ZN9task_user3runEv+0x234>
					{
						// Control-C means reset the AVR computer
						case (3):
							*p_serial << PMS ("Resetting AVR") << endl;
     b68:	6a e0       	ldi	r22, 0x0A	; 10
     b6a:	f8 01       	movw	r30, r16
     b6c:	86 81       	ldd	r24, Z+6	; 0x06
     b6e:	97 81       	ldd	r25, Z+7	; 0x07
     b70:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     b74:	8c 01       	movw	r16, r24
     b76:	68 e2       	ldi	r22, 0x28	; 40
     b78:	74 e0       	ldi	r23, 0x04	; 4
     b7a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     b7e:	66 e0       	ldi	r22, 0x06	; 6
     b80:	c8 01       	movw	r24, r16
     b82:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
							wdt_enable (WDTO_120MS);
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	88 ed       	ldi	r24, 0xD8	; 216
     b8a:	08 b6       	in	r0, 0x38	; 56
     b8c:	18 be       	out	0x38, r1	; 56
     b8e:	84 bf       	out	0x34, r24	; 52
     b90:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     b94:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     b98:	81 fd       	sbrc	r24, 1
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <_ZN9task_user3runEv+0xb0>
     b9c:	08 be       	out	0x38, r0	; 56
     b9e:	ff cf       	rjmp	.-2      	; 0xb9e <_ZN9task_user3runEv+0xba>
							for (;;);
							break;

						// Control-A puts this task in command mode
						case (1):
							print_help_message ();
     ba0:	c8 01       	movw	r24, r16
     ba2:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN9task_user18print_help_messageEv>
							transition_to (1);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	c8 01       	movw	r24, r16
     baa:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_ZN8frt_task13transition_toEh>
							break;
     bae:	b4 c0       	rjmp	.+360    	; 0xd18 <_ZN9task_user3runEv+0x234>
					};
				}

				// Check the print queue to see if another task has sent this task 
				// something to be printed
				else if (print_ser_queue.check_for_char ())
     bb0:	84 e5       	ldi	r24, 0x54	; 84
     bb2:	91 e3       	ldi	r25, 0x31	; 49
     bb4:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN14frt_text_queue14check_for_charEv>
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <_ZN9task_user3runEv+0xda>
     bbc:	ad c0       	rjmp	.+346    	; 0xd18 <_ZN9task_user3runEv+0x234>
				{
					p_serial->putchar (print_ser_queue.getchar ());
     bbe:	d8 01       	movw	r26, r16
     bc0:	16 96       	adiw	r26, 0x06	; 6
     bc2:	ed 91       	ld	r30, X+
     bc4:	fc 91       	ld	r31, X
     bc6:	17 97       	sbiw	r26, 0x07	; 7
     bc8:	01 90       	ld	r0, Z+
     bca:	f0 81       	ld	r31, Z
     bcc:	e0 2d       	mov	r30, r0
     bce:	e2 80       	ldd	r14, Z+2	; 0x02
     bd0:	f3 80       	ldd	r15, Z+3	; 0x03
     bd2:	84 e5       	ldi	r24, 0x54	; 84
     bd4:	91 e3       	ldi	r25, 0x31	; 49
     bd6:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN14frt_text_queue7getcharEv>
     bda:	68 2f       	mov	r22, r24
     bdc:	f8 01       	movw	r30, r16
     bde:	86 81       	ldd	r24, Z+6	; 0x06
     be0:	97 81       	ldd	r25, Z+7	; 0x07
     be2:	f7 01       	movw	r30, r14
     be4:	19 95       	eicall
     be6:	98 c0       	rjmp	.+304    	; 0xd18 <_ZN9task_user3runEv+0x234>

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, we're in command mode, so when the user types characters, the
			// characters are interpreted as commands to do something
			case (1):
				if (p_serial->check_for_char ())				// If the user typed a
     be8:	86 81       	ldd	r24, Z+6	; 0x06
     bea:	97 81       	ldd	r25, Z+7	; 0x07
     bec:	dc 01       	movw	r26, r24
     bee:	ed 91       	ld	r30, X+
     bf0:	fc 91       	ld	r31, X
     bf2:	04 80       	ldd	r0, Z+4	; 0x04
     bf4:	f5 81       	ldd	r31, Z+5	; 0x05
     bf6:	e0 2d       	mov	r30, r0
     bf8:	19 95       	eicall
     bfa:	88 23       	and	r24, r24
     bfc:	09 f4       	brne	.+2      	; 0xc00 <_ZN9task_user3runEv+0x11c>
     bfe:	8c c0       	rjmp	.+280    	; 0xd18 <_ZN9task_user3runEv+0x234>
				{											// character, read
					char_in = p_serial->getchar ();			// the character
     c00:	f8 01       	movw	r30, r16
     c02:	86 81       	ldd	r24, Z+6	; 0x06
     c04:	97 81       	ldd	r25, Z+7	; 0x07
     c06:	dc 01       	movw	r26, r24
     c08:	ed 91       	ld	r30, X+
     c0a:	fc 91       	ld	r31, X
     c0c:	06 80       	ldd	r0, Z+6	; 0x06
     c0e:	f7 81       	ldd	r31, Z+7	; 0x07
     c10:	e0 2d       	mov	r30, r0
     c12:	19 95       	eicall

					// In this switch statement, we respond to different characters as
					// commands typed in by the user
					switch (char_in)
     c14:	9c 01       	movw	r18, r24
     c16:	33 27       	eor	r19, r19
     c18:	28 36       	cpi	r18, 0x68	; 104
     c1a:	31 05       	cpc	r19, r1
     c1c:	59 f1       	breq	.+86     	; 0xc74 <_ZN9task_user3runEv+0x190>
     c1e:	3c f4       	brge	.+14     	; 0xc2e <_ZN9task_user3runEv+0x14a>
     c20:	2b 31       	cpi	r18, 0x1B	; 27
     c22:	31 05       	cpc	r19, r1
     c24:	59 f1       	breq	.+86     	; 0xc7c <_ZN9task_user3runEv+0x198>
     c26:	25 36       	cpi	r18, 0x65	; 101
     c28:	31 05       	cpc	r19, r1
     c2a:	41 f1       	breq	.+80     	; 0xc7c <_ZN9task_user3runEv+0x198>
     c2c:	3b c0       	rjmp	.+118    	; 0xca4 <_ZN9task_user3runEv+0x1c0>
     c2e:	23 37       	cpi	r18, 0x73	; 115
     c30:	31 05       	cpc	r19, r1
     c32:	c1 f0       	breq	.+48     	; 0xc64 <_ZN9task_user3runEv+0x180>
     c34:	26 37       	cpi	r18, 0x76	; 118
     c36:	31 05       	cpc	r19, r1
     c38:	89 f0       	breq	.+34     	; 0xc5c <_ZN9task_user3runEv+0x178>
     c3a:	2e 36       	cpi	r18, 0x6E	; 110
     c3c:	31 05       	cpc	r19, r1
     c3e:	91 f5       	brne	.+100    	; 0xca4 <_ZN9task_user3runEv+0x1c0>
					{
						// The 'n' command asks what time it is right now
						case ('n'):
							*p_serial << (a_time.set_to_now ()) << endl;
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN10time_stamp10set_to_nowEv>
     c48:	bc 01       	movw	r22, r24
     c4a:	f8 01       	movw	r30, r16
     c4c:	86 81       	ldd	r24, Z+6	; 0x06
     c4e:	97 81       	ldd	r25, Z+7	; 0x07
     c50:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZlsR8emstreamR10time_stamp>
     c54:	66 e0       	ldi	r22, 0x06	; 6
     c56:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
							break;
     c5a:	5e c0       	rjmp	.+188    	; 0xd18 <_ZN9task_user3runEv+0x234>

						// The 'v' command asks for version and status information
						case ('v'):
							show_status ();
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN9task_user11show_statusEv>
							break;
     c62:	5a c0       	rjmp	.+180    	; 0xd18 <_ZN9task_user3runEv+0x234>

						// The 's' command has all the tasks dump their stacks
						case ('s'):
							print_task_stacks (p_serial);
     c64:	d8 01       	movw	r26, r16
     c66:	16 96       	adiw	r26, 0x06	; 6
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	17 97       	sbiw	r26, 0x07	; 7
     c6e:	0e 94 09 13 	call	0x2612	; 0x2612 <_Z17print_task_stacksP8emstream>
							break;
     c72:	52 c0       	rjmp	.+164    	; 0xd18 <_ZN9task_user3runEv+0x234>

						// The 'h' command is a plea for help
						case ('h'):
							print_help_message ();
     c74:	c8 01       	movw	r24, r16
     c76:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN9task_user18print_help_messageEv>
							break;
     c7a:	4e c0       	rjmp	.+156    	; 0xd18 <_ZN9task_user3runEv+0x234>

						// The escape key or 'e' key go back to non-command mode
						case (27):
						case ('e'):
							*p_serial << PMS ("Exit command mode") << endl;
     c7c:	6a e0       	ldi	r22, 0x0A	; 10
     c7e:	f8 01       	movw	r30, r16
     c80:	86 81       	ldd	r24, Z+6	; 0x06
     c82:	97 81       	ldd	r25, Z+7	; 0x07
     c84:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     c88:	7c 01       	movw	r14, r24
     c8a:	66 e1       	ldi	r22, 0x16	; 22
     c8c:	74 e0       	ldi	r23, 0x04	; 4
     c8e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	c7 01       	movw	r24, r14
     c96:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
							transition_to (0);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	c8 01       	movw	r24, r16
     c9e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_ZN8frt_task13transition_toEh>
							break;
     ca2:	3a c0       	rjmp	.+116    	; 0xd18 <_ZN9task_user3runEv+0x234>

						// If the character isn't recognized, ask: What's That Function?
						default:
							p_serial->putchar (char_in);
     ca4:	f8 01       	movw	r30, r16
     ca6:	a6 81       	ldd	r26, Z+6	; 0x06
     ca8:	b7 81       	ldd	r27, Z+7	; 0x07
     caa:	ed 91       	ld	r30, X+
     cac:	fc 91       	ld	r31, X
     cae:	11 97       	sbiw	r26, 0x01	; 1
     cb0:	02 80       	ldd	r0, Z+2	; 0x02
     cb2:	f3 81       	ldd	r31, Z+3	; 0x03
     cb4:	e0 2d       	mov	r30, r0
     cb6:	68 2f       	mov	r22, r24
     cb8:	cd 01       	movw	r24, r26
     cba:	19 95       	eicall
							*p_serial << PMS (":WTF?") << endl;
     cbc:	6a e0       	ldi	r22, 0x0A	; 10
     cbe:	d8 01       	movw	r26, r16
     cc0:	16 96       	adiw	r26, 0x06	; 6
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     ccc:	7c 01       	movw	r14, r24
     cce:	60 e1       	ldi	r22, 0x10	; 16
     cd0:	74 e0       	ldi	r23, 0x04	; 4
     cd2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     cd6:	66 e0       	ldi	r22, 0x06	; 6
     cd8:	c7 01       	movw	r24, r14
     cda:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
							break;
     cde:	1c c0       	rjmp	.+56     	; 0xd18 <_ZN9task_user3runEv+0x234>
				break; // End of state 1

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
     ce0:	6a e0       	ldi	r22, 0x0A	; 10
     ce2:	f8 01       	movw	r30, r16
     ce4:	86 81       	ldd	r24, Z+6	; 0x06
     ce6:	97 81       	ldd	r25, Z+7	; 0x07
     ce8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
     cec:	8c 01       	movw	r16, r24
     cee:	63 ef       	ldi	r22, 0xF3	; 243
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
     cf6:	66 e0       	ldi	r22, 0x06	; 6
     cf8:	c8 01       	movw	r24, r16
     cfa:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	88 ed       	ldi	r24, 0xD8	; 216
     d02:	08 b6       	in	r0, 0x38	; 56
     d04:	18 be       	out	0x38, r1	; 56
     d06:	84 bf       	out	0x34, r24	; 52
     d08:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d0c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     d10:	81 fd       	sbrc	r24, 1
     d12:	fc cf       	rjmp	.-8      	; 0xd0c <_ZN9task_user3runEv+0x228>
     d14:	08 be       	out	0x38, r0	; 56
     d16:	ff cf       	rjmp	.-2      	; 0xd16 <_ZN9task_user3runEv+0x232>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
     d18:	f8 01       	movw	r30, r16
     d1a:	86 85       	ldd	r24, Z+14	; 0x0e
     d1c:	97 85       	ldd	r25, Z+15	; 0x0f
     d1e:	a0 89       	ldd	r26, Z+16	; 0x10
     d20:	b1 89       	ldd	r27, Z+17	; 0x11
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	86 87       	std	Z+14, r24	; 0x0e
     d2a:	97 87       	std	Z+15, r25	; 0x0f
     d2c:	a0 8b       	std	Z+16, r26	; 0x10
     d2e:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <vTaskDelay>
	// task does interesting things such as diagnostic printouts
	*p_serial << PMS ("Press Ctrl-A for command mode") << endl;

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
     d3c:	f1 ce       	rjmp	.-542    	; 0xb20 <_ZN9task_user3runEv+0x3c>

00000d3e <pvPortMalloc>:
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
     d4c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     d50:	81 11       	cpse	r24, r1
     d52:	1d c0       	rjmp	.+58     	; 0xd8e <pvPortMalloc+0x50>
     d54:	ab ec       	ldi	r26, 0xCB	; 203
     d56:	b0 e2       	ldi	r27, 0x20	; 32
     d58:	ef ec       	ldi	r30, 0xCF	; 207
     d5a:	f0 e2       	ldi	r31, 0x20	; 32
     d5c:	ed 93       	st	X+, r30
     d5e:	fc 93       	st	X, r31
     d60:	11 97       	sbiw	r26, 0x01	; 1
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	1d 92       	st	X+, r1
     d66:	1c 92       	st	X, r1
     d68:	13 97       	sbiw	r26, 0x03	; 3
     d6a:	a7 ec       	ldi	r26, 0xC7	; 199
     d6c:	b0 e2       	ldi	r27, 0x20	; 32
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f e0       	ldi	r25, 0x0F	; 15
     d72:	12 96       	adiw	r26, 0x02	; 2
     d74:	8d 93       	st	X+, r24
     d76:	9c 93       	st	X, r25
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	1d 92       	st	X+, r1
     d7c:	1c 92       	st	X, r1
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	82 83       	std	Z+2, r24	; 0x02
     d82:	93 83       	std	Z+3, r25	; 0x03
     d84:	a0 83       	st	Z, r26
     d86:	b1 83       	std	Z+1, r27	; 0x01
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end>
     d8e:	20 97       	sbiw	r28, 0x00	; 0
     d90:	09 f4       	brne	.+2      	; 0xd94 <pvPortMalloc+0x56>
     d92:	5f c0       	rjmp	.+190    	; 0xe52 <pvPortMalloc+0x114>
     d94:	9e 01       	movw	r18, r28
     d96:	2b 5f       	subi	r18, 0xFB	; 251
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	24 96       	adiw	r28, 0x04	; 4
     d9c:	ce 3f       	cpi	r28, 0xFE	; 254
     d9e:	df 40       	sbci	r29, 0x0F	; 15
     da0:	08 f0       	brcs	.+2      	; 0xda4 <pvPortMalloc+0x66>
     da2:	5a c0       	rjmp	.+180    	; 0xe58 <pvPortMalloc+0x11a>
     da4:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <xStart>
     da8:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <xStart+0x1>
     dac:	ab ec       	ldi	r26, 0xCB	; 203
     dae:	b0 e2       	ldi	r27, 0x20	; 32
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <pvPortMalloc+0x78>
     db2:	df 01       	movw	r26, r30
     db4:	fc 01       	movw	r30, r24
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	82 17       	cp	r24, r18
     dbc:	93 07       	cpc	r25, r19
     dbe:	20 f4       	brcc	.+8      	; 0xdc8 <pvPortMalloc+0x8a>
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	a9 f7       	brne	.-22     	; 0xdb2 <pvPortMalloc+0x74>
     dc8:	c0 e2       	ldi	r28, 0x20	; 32
     dca:	e7 3c       	cpi	r30, 0xC7	; 199
     dcc:	fc 07       	cpc	r31, r28
     dce:	09 f4       	brne	.+2      	; 0xdd2 <pvPortMalloc+0x94>
     dd0:	46 c0       	rjmp	.+140    	; 0xe5e <pvPortMalloc+0x120>
     dd2:	cd 91       	ld	r28, X+
     dd4:	dc 91       	ld	r29, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	8e 01       	movw	r16, r28
     dda:	0b 5f       	subi	r16, 0xFB	; 251
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	8d 93       	st	X+, r24
     de4:	9c 93       	st	X, r25
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	82 1b       	sub	r24, r18
     dec:	93 0b       	sbc	r25, r19
     dee:	8b 30       	cpi	r24, 0x0B	; 11
     df0:	91 05       	cpc	r25, r1
     df2:	10 f1       	brcs	.+68     	; 0xe38 <pvPortMalloc+0xfa>
     df4:	bf 01       	movw	r22, r30
     df6:	62 0f       	add	r22, r18
     df8:	73 1f       	adc	r23, r19
     dfa:	db 01       	movw	r26, r22
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	8d 93       	st	X+, r24
     e00:	9c 93       	st	X, r25
     e02:	13 97       	sbiw	r26, 0x03	; 3
     e04:	22 83       	std	Z+2, r18	; 0x02
     e06:	33 83       	std	Z+3, r19	; 0x03
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	4d 91       	ld	r20, X+
     e0c:	5c 91       	ld	r21, X
     e0e:	13 97       	sbiw	r26, 0x03	; 3
     e10:	8b ec       	ldi	r24, 0xCB	; 203
     e12:	90 e2       	ldi	r25, 0x20	; 32
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <pvPortMalloc+0xda>
     e16:	cd 01       	movw	r24, r26
     e18:	ec 01       	movw	r28, r24
     e1a:	a8 81       	ld	r26, Y
     e1c:	b9 81       	ldd	r27, Y+1	; 0x01
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	2d 91       	ld	r18, X+
     e22:	3c 91       	ld	r19, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	24 17       	cp	r18, r20
     e28:	35 07       	cpc	r19, r21
     e2a:	a8 f3       	brcs	.-22     	; 0xe16 <pvPortMalloc+0xd8>
     e2c:	eb 01       	movw	r28, r22
     e2e:	a8 83       	st	Y, r26
     e30:	b9 83       	std	Y+1, r27	; 0x01
     e32:	dc 01       	movw	r26, r24
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     e3c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     e40:	22 81       	ldd	r18, Z+2	; 0x02
     e42:	33 81       	ldd	r19, Z+3	; 0x03
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
     e4c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <pvPortMalloc+0x124>
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <pvPortMalloc+0x124>
     e58:	00 e0       	ldi	r16, 0x00	; 0
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <pvPortMalloc+0x124>
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
     e66:	c8 01       	movw	r24, r16
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <vPortFree>:
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	41 f1       	breq	.+80     	; 0xece <vPortFree+0x5c>
     e7e:	ec 01       	movw	r28, r24
     e80:	8c 01       	movw	r16, r24
     e82:	05 50       	subi	r16, 0x05	; 5
     e84:	11 09       	sbc	r17, r1
     e86:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
     e8a:	f8 01       	movw	r30, r16
     e8c:	42 81       	ldd	r20, Z+2	; 0x02
     e8e:	53 81       	ldd	r21, Z+3	; 0x03
     e90:	ab ec       	ldi	r26, 0xCB	; 203
     e92:	b0 e2       	ldi	r27, 0x20	; 32
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <vPortFree+0x26>
     e96:	df 01       	movw	r26, r30
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	33 81       	ldd	r19, Z+3	; 0x03
     ea2:	24 17       	cp	r18, r20
     ea4:	35 07       	cpc	r19, r21
     ea6:	b8 f3       	brcs	.-18     	; 0xe96 <vPortFree+0x24>
     ea8:	25 97       	sbiw	r28, 0x05	; 5
     eaa:	e8 83       	st	Y, r30
     eac:	f9 83       	std	Y+1, r31	; 0x01
     eae:	0d 93       	st	X+, r16
     eb0:	1c 93       	st	X, r17
     eb2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     eb6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
     ec6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     eca:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <xPortGetFreeHeapSize>:
     ed8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     edc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     ee0:	08 95       	ret

00000ee2 <vListInitialise>:
     ee2:	fc 01       	movw	r30, r24
     ee4:	03 96       	adiw	r24, 0x03	; 3
     ee6:	81 83       	std	Z+1, r24	; 0x01
     ee8:	92 83       	std	Z+2, r25	; 0x02
     eea:	4f ef       	ldi	r20, 0xFF	; 255
     eec:	5f ef       	ldi	r21, 0xFF	; 255
     eee:	ba 01       	movw	r22, r20
     ef0:	43 83       	std	Z+3, r20	; 0x03
     ef2:	54 83       	std	Z+4, r21	; 0x04
     ef4:	65 83       	std	Z+5, r22	; 0x05
     ef6:	76 83       	std	Z+6, r23	; 0x06
     ef8:	87 83       	std	Z+7, r24	; 0x07
     efa:	90 87       	std	Z+8, r25	; 0x08
     efc:	81 87       	std	Z+9, r24	; 0x09
     efe:	92 87       	std	Z+10, r25	; 0x0a
     f00:	10 82       	st	Z, r1
     f02:	08 95       	ret

00000f04 <vListInitialiseItem>:
     f04:	fc 01       	movw	r30, r24
     f06:	12 86       	std	Z+10, r1	; 0x0a
     f08:	13 86       	std	Z+11, r1	; 0x0b
     f0a:	08 95       	ret

00000f0c <vListInsertEnd>:
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	fc 01       	movw	r30, r24
     f12:	db 01       	movw	r26, r22
     f14:	21 81       	ldd	r18, Z+1	; 0x01
     f16:	32 81       	ldd	r19, Z+2	; 0x02
     f18:	e9 01       	movw	r28, r18
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	14 96       	adiw	r26, 0x04	; 4
     f20:	8d 93       	st	X+, r24
     f22:	9c 93       	st	X, r25
     f24:	15 97       	sbiw	r26, 0x05	; 5
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	92 81       	ldd	r25, Z+2	; 0x02
     f2a:	16 96       	adiw	r26, 0x06	; 6
     f2c:	8d 93       	st	X+, r24
     f2e:	9c 93       	st	X, r25
     f30:	17 97       	sbiw	r26, 0x07	; 7
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	ec 01       	movw	r28, r24
     f38:	6e 83       	std	Y+6, r22	; 0x06
     f3a:	7f 83       	std	Y+7, r23	; 0x07
     f3c:	e9 01       	movw	r28, r18
     f3e:	6c 83       	std	Y+4, r22	; 0x04
     f40:	7d 83       	std	Y+5, r23	; 0x05
     f42:	61 83       	std	Z+1, r22	; 0x01
     f44:	72 83       	std	Z+2, r23	; 0x02
     f46:	1a 96       	adiw	r26, 0x0a	; 10
     f48:	ed 93       	st	X+, r30
     f4a:	fc 93       	st	X, r31
     f4c:	1b 97       	sbiw	r26, 0x0b	; 11
     f4e:	80 81       	ld	r24, Z
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 83       	st	Z, r24
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <vListInsert>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	eb 01       	movw	r28, r22
     f64:	08 81       	ld	r16, Y
     f66:	19 81       	ldd	r17, Y+1	; 0x01
     f68:	2a 81       	ldd	r18, Y+2	; 0x02
     f6a:	3b 81       	ldd	r19, Y+3	; 0x03
     f6c:	0f 3f       	cpi	r16, 0xFF	; 255
     f6e:	4f ef       	ldi	r20, 0xFF	; 255
     f70:	14 07       	cpc	r17, r20
     f72:	24 07       	cpc	r18, r20
     f74:	34 07       	cpc	r19, r20
     f76:	31 f4       	brne	.+12     	; 0xf84 <vListInsert+0x2a>
     f78:	dc 01       	movw	r26, r24
     f7a:	19 96       	adiw	r26, 0x09	; 9
     f7c:	ed 91       	ld	r30, X+
     f7e:	fc 91       	ld	r31, X
     f80:	1a 97       	sbiw	r26, 0x0a	; 10
     f82:	1f c0       	rjmp	.+62     	; 0xfc2 <vListInsert+0x68>
     f84:	fc 01       	movw	r30, r24
     f86:	33 96       	adiw	r30, 0x03	; 3
     f88:	dc 01       	movw	r26, r24
     f8a:	17 96       	adiw	r26, 0x07	; 7
     f8c:	4d 91       	ld	r20, X+
     f8e:	5c 91       	ld	r21, X
     f90:	18 97       	sbiw	r26, 0x08	; 8
     f92:	da 01       	movw	r26, r20
     f94:	4d 91       	ld	r20, X+
     f96:	5d 91       	ld	r21, X+
     f98:	6d 91       	ld	r22, X+
     f9a:	7c 91       	ld	r23, X
     f9c:	04 17       	cp	r16, r20
     f9e:	15 07       	cpc	r17, r21
     fa0:	26 07       	cpc	r18, r22
     fa2:	37 07       	cpc	r19, r23
     fa4:	70 f0       	brcs	.+28     	; 0xfc2 <vListInsert+0x68>
     fa6:	04 80       	ldd	r0, Z+4	; 0x04
     fa8:	f5 81       	ldd	r31, Z+5	; 0x05
     faa:	e0 2d       	mov	r30, r0
     fac:	a4 81       	ldd	r26, Z+4	; 0x04
     fae:	b5 81       	ldd	r27, Z+5	; 0x05
     fb0:	4d 91       	ld	r20, X+
     fb2:	5d 91       	ld	r21, X+
     fb4:	6d 91       	ld	r22, X+
     fb6:	7c 91       	ld	r23, X
     fb8:	04 17       	cp	r16, r20
     fba:	15 07       	cpc	r17, r21
     fbc:	26 07       	cpc	r18, r22
     fbe:	37 07       	cpc	r19, r23
     fc0:	90 f7       	brcc	.-28     	; 0xfa6 <vListInsert+0x4c>
     fc2:	a4 81       	ldd	r26, Z+4	; 0x04
     fc4:	b5 81       	ldd	r27, Z+5	; 0x05
     fc6:	ac 83       	std	Y+4, r26	; 0x04
     fc8:	bd 83       	std	Y+5, r27	; 0x05
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	cd 93       	st	X+, r28
     fce:	dc 93       	st	X, r29
     fd0:	17 97       	sbiw	r26, 0x07	; 7
     fd2:	ee 83       	std	Y+6, r30	; 0x06
     fd4:	ff 83       	std	Y+7, r31	; 0x07
     fd6:	c4 83       	std	Z+4, r28	; 0x04
     fd8:	d5 83       	std	Z+5, r29	; 0x05
     fda:	8a 87       	std	Y+10, r24	; 0x0a
     fdc:	9b 87       	std	Y+11, r25	; 0x0b
     fde:	fc 01       	movw	r30, r24
     fe0:	20 81       	ld	r18, Z
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	20 83       	st	Z, r18
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <vListRemove>:
     ff0:	fc 01       	movw	r30, r24
     ff2:	a4 81       	ldd	r26, Z+4	; 0x04
     ff4:	b5 81       	ldd	r27, Z+5	; 0x05
     ff6:	86 81       	ldd	r24, Z+6	; 0x06
     ff8:	97 81       	ldd	r25, Z+7	; 0x07
     ffa:	16 96       	adiw	r26, 0x06	; 6
     ffc:	8d 93       	st	X+, r24
     ffe:	9c 93       	st	X, r25
    1000:	17 97       	sbiw	r26, 0x07	; 7
    1002:	a6 81       	ldd	r26, Z+6	; 0x06
    1004:	b7 81       	ldd	r27, Z+7	; 0x07
    1006:	84 81       	ldd	r24, Z+4	; 0x04
    1008:	95 81       	ldd	r25, Z+5	; 0x05
    100a:	14 96       	adiw	r26, 0x04	; 4
    100c:	8d 93       	st	X+, r24
    100e:	9c 93       	st	X, r25
    1010:	15 97       	sbiw	r26, 0x05	; 5
    1012:	a2 85       	ldd	r26, Z+10	; 0x0a
    1014:	b3 85       	ldd	r27, Z+11	; 0x0b
    1016:	11 96       	adiw	r26, 0x01	; 1
    1018:	8d 91       	ld	r24, X+
    101a:	9c 91       	ld	r25, X
    101c:	12 97       	sbiw	r26, 0x02	; 2
    101e:	e8 17       	cp	r30, r24
    1020:	f9 07       	cpc	r31, r25
    1022:	31 f4       	brne	.+12     	; 0x1030 <vListRemove+0x40>
    1024:	86 81       	ldd	r24, Z+6	; 0x06
    1026:	97 81       	ldd	r25, Z+7	; 0x07
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	8d 93       	st	X+, r24
    102c:	9c 93       	st	X, r25
    102e:	12 97       	sbiw	r26, 0x02	; 2
    1030:	12 86       	std	Z+10, r1	; 0x0a
    1032:	13 86       	std	Z+11, r1	; 0x0b
    1034:	8c 91       	ld	r24, X
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	8c 93       	st	X, r24
    103a:	08 95       	ret

0000103c <pxPortInitialiseStack>:
    103c:	80 93 64 31 	sts	0x3164, r24	; 0x803164 <portStackTopForTask>
    1040:	90 93 65 31 	sts	0x3165, r25	; 0x803165 <portStackTopForTask+0x1>
    1044:	31 e1       	ldi	r19, 0x11	; 17
    1046:	fc 01       	movw	r30, r24
    1048:	30 83       	st	Z, r19
    104a:	31 97       	sbiw	r30, 0x01	; 1
    104c:	22 e2       	ldi	r18, 0x22	; 34
    104e:	20 83       	st	Z, r18
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	a3 e3       	ldi	r26, 0x33	; 51
    1054:	a0 83       	st	Z, r26
    1056:	31 97       	sbiw	r30, 0x01	; 1
    1058:	60 83       	st	Z, r22
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	70 83       	st	Z, r23
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	10 82       	st	Z, r1
    1062:	31 97       	sbiw	r30, 0x01	; 1
    1064:	10 82       	st	Z, r1
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	60 e8       	ldi	r22, 0x80	; 128
    106a:	60 83       	st	Z, r22
    106c:	31 97       	sbiw	r30, 0x01	; 1
    106e:	10 82       	st	Z, r1
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	10 82       	st	Z, r1
    1074:	31 97       	sbiw	r30, 0x01	; 1
    1076:	10 82       	st	Z, r1
    1078:	31 97       	sbiw	r30, 0x01	; 1
    107a:	62 e0       	ldi	r22, 0x02	; 2
    107c:	60 83       	st	Z, r22
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	63 e0       	ldi	r22, 0x03	; 3
    1082:	60 83       	st	Z, r22
    1084:	31 97       	sbiw	r30, 0x01	; 1
    1086:	64 e0       	ldi	r22, 0x04	; 4
    1088:	60 83       	st	Z, r22
    108a:	31 97       	sbiw	r30, 0x01	; 1
    108c:	65 e0       	ldi	r22, 0x05	; 5
    108e:	60 83       	st	Z, r22
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	66 e0       	ldi	r22, 0x06	; 6
    1094:	60 83       	st	Z, r22
    1096:	31 97       	sbiw	r30, 0x01	; 1
    1098:	67 e0       	ldi	r22, 0x07	; 7
    109a:	60 83       	st	Z, r22
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	68 e0       	ldi	r22, 0x08	; 8
    10a0:	60 83       	st	Z, r22
    10a2:	31 97       	sbiw	r30, 0x01	; 1
    10a4:	69 e0       	ldi	r22, 0x09	; 9
    10a6:	60 83       	st	Z, r22
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	60 e1       	ldi	r22, 0x10	; 16
    10ac:	60 83       	st	Z, r22
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	30 83       	st	Z, r19
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	32 e1       	ldi	r19, 0x12	; 18
    10b6:	30 83       	st	Z, r19
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	33 e1       	ldi	r19, 0x13	; 19
    10bc:	30 83       	st	Z, r19
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	34 e1       	ldi	r19, 0x14	; 20
    10c2:	30 83       	st	Z, r19
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	35 e1       	ldi	r19, 0x15	; 21
    10c8:	30 83       	st	Z, r19
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	36 e1       	ldi	r19, 0x16	; 22
    10ce:	30 83       	st	Z, r19
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	37 e1       	ldi	r19, 0x17	; 23
    10d4:	30 83       	st	Z, r19
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	38 e1       	ldi	r19, 0x18	; 24
    10da:	30 83       	st	Z, r19
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	39 e1       	ldi	r19, 0x19	; 25
    10e0:	30 83       	st	Z, r19
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	30 e2       	ldi	r19, 0x20	; 32
    10e6:	30 83       	st	Z, r19
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	31 e2       	ldi	r19, 0x21	; 33
    10ec:	30 83       	st	Z, r19
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	20 83       	st	Z, r18
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	23 e2       	ldi	r18, 0x23	; 35
    10f6:	20 83       	st	Z, r18
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	40 83       	st	Z, r20
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	50 83       	st	Z, r21
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	26 e2       	ldi	r18, 0x26	; 38
    1104:	20 83       	st	Z, r18
    1106:	31 97       	sbiw	r30, 0x01	; 1
    1108:	27 e2       	ldi	r18, 0x27	; 39
    110a:	20 83       	st	Z, r18
    110c:	31 97       	sbiw	r30, 0x01	; 1
    110e:	28 e2       	ldi	r18, 0x28	; 40
    1110:	20 83       	st	Z, r18
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	29 e2       	ldi	r18, 0x29	; 41
    1116:	20 83       	st	Z, r18
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	20 e3       	ldi	r18, 0x30	; 48
    111c:	20 83       	st	Z, r18
    111e:	31 97       	sbiw	r30, 0x01	; 1
    1120:	21 e3       	ldi	r18, 0x31	; 49
    1122:	20 83       	st	Z, r18
    1124:	89 97       	sbiw	r24, 0x29	; 41
    1126:	08 95       	ret

00001128 <xPortStartScheduler>:
    1128:	8c e7       	ldi	r24, 0x7C	; 124
    112a:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    113a:	91 e1       	ldi	r25, 0x11	; 17
    113c:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    1140:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    1144:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    1148:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    114c:	cd 91       	ld	r28, X+
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	dd 91       	ld	r29, X+
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	9f 90       	pop	r9
    1182:	8f 90       	pop	r8
    1184:	7f 90       	pop	r7
    1186:	6f 90       	pop	r6
    1188:	5f 90       	pop	r5
    118a:	4f 90       	pop	r4
    118c:	3f 90       	pop	r3
    118e:	2f 90       	pop	r2
    1190:	1f 90       	pop	r1
    1192:	0f 90       	pop	r0
    1194:	0c be       	out	0x3c, r0	; 60
    1196:	0f 90       	pop	r0
    1198:	0b be       	out	0x3b, r0	; 59
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	08 95       	ret
    11a2:	08 95       	ret

000011a4 <vPortYield>:
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	0f 92       	push	r0
    11ac:	0b b6       	in	r0, 0x3b	; 59
    11ae:	0f 92       	push	r0
    11b0:	0c b6       	in	r0, 0x3c	; 60
    11b2:	0f 92       	push	r0
    11b4:	1f 92       	push	r1
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 92       	push	r2
    11ba:	3f 92       	push	r3
    11bc:	4f 92       	push	r4
    11be:	5f 92       	push	r5
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
    11f4:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    11f8:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    11fc:	0d b6       	in	r0, 0x3d	; 61
    11fe:	0d 92       	st	X+, r0
    1200:	0e b6       	in	r0, 0x3e	; 62
    1202:	0d 92       	st	X+, r0
    1204:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <vTaskSwitchContext>
    1208:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    120c:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1210:	cd 91       	ld	r28, X+
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	dd 91       	ld	r29, X+
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	3f 90       	pop	r3
    1252:	2f 90       	pop	r2
    1254:	1f 90       	pop	r1
    1256:	0f 90       	pop	r0
    1258:	0c be       	out	0x3c, r0	; 60
    125a:	0f 90       	pop	r0
    125c:	0b be       	out	0x3b, r0	; 59
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	08 95       	ret

00001266 <vPortYieldFromTick>:
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	0f 92       	push	r0
    126e:	0b b6       	in	r0, 0x3b	; 59
    1270:	0f 92       	push	r0
    1272:	0c b6       	in	r0, 0x3c	; 60
    1274:	0f 92       	push	r0
    1276:	1f 92       	push	r1
    1278:	11 24       	eor	r1, r1
    127a:	2f 92       	push	r2
    127c:	3f 92       	push	r3
    127e:	4f 92       	push	r4
    1280:	5f 92       	push	r5
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    12ba:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    12be:	0d b6       	in	r0, 0x3d	; 61
    12c0:	0d 92       	st	X+, r0
    12c2:	0e b6       	in	r0, 0x3e	; 62
    12c4:	0d 92       	st	X+, r0
    12c6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <vTaskIncrementTick>
    12ca:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <vTaskSwitchContext>
    12ce:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    12d2:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    12d6:	cd 91       	ld	r28, X+
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	dd 91       	ld	r29, X+
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	8f 90       	pop	r8
    130e:	7f 90       	pop	r7
    1310:	6f 90       	pop	r6
    1312:	5f 90       	pop	r5
    1314:	4f 90       	pop	r4
    1316:	3f 90       	pop	r3
    1318:	2f 90       	pop	r2
    131a:	1f 90       	pop	r1
    131c:	0f 90       	pop	r0
    131e:	0c be       	out	0x3c, r0	; 60
    1320:	0f 90       	pop	r0
    1322:	0b be       	out	0x3b, r0	; 59
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	08 95       	ret

0000132c <__vector_49>:
    132c:	0e 94 33 09 	call	0x1266	; 0x1266 <vPortYieldFromTick>
    1330:	18 95       	reti

00001332 <prvCopyDataToQueue>:
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	88 a1       	ldd	r24, Y+32	; 0x20
    133a:	81 11       	cpse	r24, r1
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <prvCopyDataToQueue+0x22>
    133e:	88 81       	ld	r24, Y
    1340:	99 81       	ldd	r25, Y+1	; 0x01
    1342:	89 2b       	or	r24, r25
    1344:	e1 f5       	brne	.+120    	; 0x13be <prvCopyDataToQueue+0x8c>
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	0e 94 ad 11 	call	0x235a	; 0x235a <vTaskPriorityDisinherit>
    134e:	1a 82       	std	Y+2, r1	; 0x02
    1350:	1b 82       	std	Y+3, r1	; 0x03
    1352:	35 c0       	rjmp	.+106    	; 0x13be <prvCopyDataToQueue+0x8c>
    1354:	41 11       	cpse	r20, r1
    1356:	17 c0       	rjmp	.+46     	; 0x1386 <prvCopyDataToQueue+0x54>
    1358:	48 2f       	mov	r20, r24
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	0e 94 98 1c 	call	0x3930	; 0x3930 <memcpy>
    1364:	28 a1       	ldd	r18, Y+32	; 0x20
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	82 0f       	add	r24, r18
    136c:	91 1d       	adc	r25, r1
    136e:	8c 83       	std	Y+4, r24	; 0x04
    1370:	9d 83       	std	Y+5, r25	; 0x05
    1372:	2a 81       	ldd	r18, Y+2	; 0x02
    1374:	3b 81       	ldd	r19, Y+3	; 0x03
    1376:	82 17       	cp	r24, r18
    1378:	93 07       	cpc	r25, r19
    137a:	08 f1       	brcs	.+66     	; 0x13be <prvCopyDataToQueue+0x8c>
    137c:	88 81       	ld	r24, Y
    137e:	99 81       	ldd	r25, Y+1	; 0x01
    1380:	8c 83       	std	Y+4, r24	; 0x04
    1382:	9d 83       	std	Y+5, r25	; 0x05
    1384:	1c c0       	rjmp	.+56     	; 0x13be <prvCopyDataToQueue+0x8c>
    1386:	48 2f       	mov	r20, r24
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	9f 81       	ldd	r25, Y+7	; 0x07
    138e:	0e 94 98 1c 	call	0x3930	; 0x3930 <memcpy>
    1392:	88 a1       	ldd	r24, Y+32	; 0x20
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	91 95       	neg	r25
    1398:	81 95       	neg	r24
    139a:	91 09       	sbc	r25, r1
    139c:	2e 81       	ldd	r18, Y+6	; 0x06
    139e:	3f 81       	ldd	r19, Y+7	; 0x07
    13a0:	28 0f       	add	r18, r24
    13a2:	39 1f       	adc	r19, r25
    13a4:	2e 83       	std	Y+6, r18	; 0x06
    13a6:	3f 83       	std	Y+7, r19	; 0x07
    13a8:	48 81       	ld	r20, Y
    13aa:	59 81       	ldd	r21, Y+1	; 0x01
    13ac:	24 17       	cp	r18, r20
    13ae:	35 07       	cpc	r19, r21
    13b0:	30 f4       	brcc	.+12     	; 0x13be <prvCopyDataToQueue+0x8c>
    13b2:	2a 81       	ldd	r18, Y+2	; 0x02
    13b4:	3b 81       	ldd	r19, Y+3	; 0x03
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	8e 83       	std	Y+6, r24	; 0x06
    13bc:	9f 83       	std	Y+7, r25	; 0x07
    13be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	8e 8f       	std	Y+30, r24	; 0x1e
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <prvCopyDataFromQueue>:
    13ca:	fc 01       	movw	r30, r24
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <prvCopyDataFromQueue+0x32>
    13d4:	40 a1       	ldd	r20, Z+32	; 0x20
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	26 81       	ldd	r18, Z+6	; 0x06
    13da:	37 81       	ldd	r19, Z+7	; 0x07
    13dc:	24 0f       	add	r18, r20
    13de:	35 1f       	adc	r19, r21
    13e0:	26 83       	std	Z+6, r18	; 0x06
    13e2:	37 83       	std	Z+7, r19	; 0x07
    13e4:	a2 81       	ldd	r26, Z+2	; 0x02
    13e6:	b3 81       	ldd	r27, Z+3	; 0x03
    13e8:	2a 17       	cp	r18, r26
    13ea:	3b 07       	cpc	r19, r27
    13ec:	10 f0       	brcs	.+4      	; 0x13f2 <prvCopyDataFromQueue+0x28>
    13ee:	86 83       	std	Z+6, r24	; 0x06
    13f0:	97 83       	std	Z+7, r25	; 0x07
    13f2:	cb 01       	movw	r24, r22
    13f4:	66 81       	ldd	r22, Z+6	; 0x06
    13f6:	77 81       	ldd	r23, Z+7	; 0x07
    13f8:	0e 94 98 1c 	call	0x3930	; 0x3930 <memcpy>
    13fc:	08 95       	ret

000013fe <prvUnlockQueue>:
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	0f 92       	push	r0
    140e:	8a a1       	ldd	r24, Y+34	; 0x22
    1410:	18 16       	cp	r1, r24
    1412:	b4 f4       	brge	.+44     	; 0x1440 <prvUnlockQueue+0x42>
    1414:	8b 89       	ldd	r24, Y+19	; 0x13
    1416:	81 11       	cpse	r24, r1
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <prvUnlockQueue+0x26>
    141a:	12 c0       	rjmp	.+36     	; 0x1440 <prvUnlockQueue+0x42>
    141c:	8b 89       	ldd	r24, Y+19	; 0x13
    141e:	81 11       	cpse	r24, r1
    1420:	04 c0       	rjmp	.+8      	; 0x142a <prvUnlockQueue+0x2c>
    1422:	0e c0       	rjmp	.+28     	; 0x1440 <prvUnlockQueue+0x42>
    1424:	8e 01       	movw	r16, r28
    1426:	0d 5e       	subi	r16, 0xED	; 237
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	c8 01       	movw	r24, r16
    142c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1430:	81 11       	cpse	r24, r1
    1432:	0e 94 36 11 	call	0x226c	; 0x226c <vTaskMissedYield>
    1436:	8a a1       	ldd	r24, Y+34	; 0x22
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	8a a3       	std	Y+34, r24	; 0x22
    143c:	18 16       	cp	r1, r24
    143e:	74 f3       	brlt	.-36     	; 0x141c <prvUnlockQueue+0x1e>
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	8a a3       	std	Y+34, r24	; 0x22
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	0f 92       	push	r0
    144e:	89 a1       	ldd	r24, Y+33	; 0x21
    1450:	18 16       	cp	r1, r24
    1452:	b4 f4       	brge	.+44     	; 0x1480 <prvUnlockQueue+0x82>
    1454:	88 85       	ldd	r24, Y+8	; 0x08
    1456:	81 11       	cpse	r24, r1
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <prvUnlockQueue+0x66>
    145a:	12 c0       	rjmp	.+36     	; 0x1480 <prvUnlockQueue+0x82>
    145c:	88 85       	ldd	r24, Y+8	; 0x08
    145e:	81 11       	cpse	r24, r1
    1460:	04 c0       	rjmp	.+8      	; 0x146a <prvUnlockQueue+0x6c>
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <prvUnlockQueue+0x82>
    1464:	8e 01       	movw	r16, r28
    1466:	08 5f       	subi	r16, 0xF8	; 248
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1470:	81 11       	cpse	r24, r1
    1472:	0e 94 36 11 	call	0x226c	; 0x226c <vTaskMissedYield>
    1476:	89 a1       	ldd	r24, Y+33	; 0x21
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	89 a3       	std	Y+33, r24	; 0x21
    147c:	18 16       	cp	r1, r24
    147e:	74 f3       	brlt	.-36     	; 0x145c <prvUnlockQueue+0x5e>
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	89 a3       	std	Y+33, r24	; 0x21
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <xQueueGenericReset>:
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	61 30       	cpi	r22, 0x01	; 1
    149a:	59 f0       	breq	.+22     	; 0x14b2 <xQueueGenericReset+0x20>
    149c:	fc 01       	movw	r30, r24
    149e:	23 89       	ldd	r18, Z+19	; 0x13
    14a0:	30 85       	ldd	r19, Z+8	; 0x08
    14a2:	31 11       	cpse	r19, r1
    14a4:	2c c0       	rjmp	.+88     	; 0x14fe <xQueueGenericReset+0x6c>
    14a6:	11 e0       	ldi	r17, 0x01	; 1
    14a8:	21 11       	cpse	r18, r1
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	21 11       	cpse	r18, r1
    14ae:	28 c0       	rjmp	.+80     	; 0x1500 <xQueueGenericReset+0x6e>
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <xQueueGenericReset+0x22>
    14b2:	11 e0       	ldi	r17, 0x01	; 1
    14b4:	ec 01       	movw	r28, r24
    14b6:	48 81       	ld	r20, Y
    14b8:	59 81       	ldd	r21, Y+1	; 0x01
    14ba:	28 a1       	ldd	r18, Y+32	; 0x20
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14c0:	62 9f       	mul	r22, r18
    14c2:	c0 01       	movw	r24, r0
    14c4:	63 9f       	mul	r22, r19
    14c6:	90 0d       	add	r25, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	ba 01       	movw	r22, r20
    14cc:	68 0f       	add	r22, r24
    14ce:	79 1f       	adc	r23, r25
    14d0:	6a 83       	std	Y+2, r22	; 0x02
    14d2:	7b 83       	std	Y+3, r23	; 0x03
    14d4:	1e 8e       	std	Y+30, r1	; 0x1e
    14d6:	4c 83       	std	Y+4, r20	; 0x04
    14d8:	5d 83       	std	Y+5, r21	; 0x05
    14da:	82 1b       	sub	r24, r18
    14dc:	93 0b       	sbc	r25, r19
    14de:	84 0f       	add	r24, r20
    14e0:	95 1f       	adc	r25, r21
    14e2:	8e 83       	std	Y+6, r24	; 0x06
    14e4:	9f 83       	std	Y+7, r25	; 0x07
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	89 a3       	std	Y+33, r24	; 0x21
    14ea:	8a a3       	std	Y+34, r24	; 0x22
    14ec:	ce 01       	movw	r24, r28
    14ee:	08 96       	adiw	r24, 0x08	; 8
    14f0:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    14f4:	ce 01       	movw	r24, r28
    14f6:	43 96       	adiw	r24, 0x13	; 19
    14f8:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <xQueueGenericReset+0x6e>
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	81 2f       	mov	r24, r17
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	08 95       	ret

0000150a <xQueueGenericCreate>:
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	88 23       	and	r24, r24
    1514:	01 f1       	breq	.+64     	; 0x1556 <xQueueGenericCreate+0x4c>
    1516:	06 2f       	mov	r16, r22
    1518:	18 2f       	mov	r17, r24
    151a:	83 e2       	ldi	r24, 0x23	; 35
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    1522:	ec 01       	movw	r28, r24
    1524:	89 2b       	or	r24, r25
    1526:	c9 f0       	breq	.+50     	; 0x155a <xQueueGenericCreate+0x50>
    1528:	10 9f       	mul	r17, r16
    152a:	c0 01       	movw	r24, r0
    152c:	11 24       	eor	r1, r1
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    1534:	88 83       	st	Y, r24
    1536:	99 83       	std	Y+1, r25	; 0x01
    1538:	89 2b       	or	r24, r25
    153a:	39 f0       	breq	.+14     	; 0x154a <xQueueGenericCreate+0x40>
    153c:	1f 8f       	std	Y+31, r17	; 0x1f
    153e:	08 a3       	std	Y+32, r16	; 0x20
    1540:	61 e0       	ldi	r22, 0x01	; 1
    1542:	ce 01       	movw	r24, r28
    1544:	0e 94 49 0a 	call	0x1492	; 0x1492 <xQueueGenericReset>
    1548:	08 c0       	rjmp	.+16     	; 0x155a <xQueueGenericCreate+0x50>
    154a:	ce 01       	movw	r24, r28
    154c:	0e 94 39 07 	call	0xe72	; 0xe72 <vPortFree>
    1550:	c0 e0       	ldi	r28, 0x00	; 0
    1552:	d0 e0       	ldi	r29, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <xQueueGenericCreate+0x50>
    1556:	c0 e0       	ldi	r28, 0x00	; 0
    1558:	d0 e0       	ldi	r29, 0x00	; 0
    155a:	ce 01       	movw	r24, r28
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <xQueueGenericSend>:
    1566:	af 92       	push	r10
    1568:	bf 92       	push	r11
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	29 97       	sbiw	r28, 0x09	; 9
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	7c 01       	movw	r14, r24
    1586:	5b 01       	movw	r10, r22
    1588:	2e 83       	std	Y+6, r18	; 0x06
    158a:	3f 83       	std	Y+7, r19	; 0x07
    158c:	48 87       	std	Y+8, r20	; 0x08
    158e:	59 87       	std	Y+9, r21	; 0x09
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	6c 01       	movw	r12, r24
    1594:	88 e0       	ldi	r24, 0x08	; 8
    1596:	c8 0e       	add	r12, r24
    1598:	d1 1c       	adc	r13, r1
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	0f 92       	push	r0
    15a0:	f7 01       	movw	r30, r14
    15a2:	96 8d       	ldd	r25, Z+30	; 0x1e
    15a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    15a6:	98 17       	cp	r25, r24
    15a8:	a8 f4       	brcc	.+42     	; 0x15d4 <xQueueGenericSend+0x6e>
    15aa:	40 2f       	mov	r20, r16
    15ac:	b5 01       	movw	r22, r10
    15ae:	c7 01       	movw	r24, r14
    15b0:	0e 94 99 09 	call	0x1332	; 0x1332 <prvCopyDataToQueue>
    15b4:	f7 01       	movw	r30, r14
    15b6:	83 89       	ldd	r24, Z+19	; 0x13
    15b8:	88 23       	and	r24, r24
    15ba:	41 f0       	breq	.+16     	; 0x15cc <xQueueGenericSend+0x66>
    15bc:	c7 01       	movw	r24, r14
    15be:	43 96       	adiw	r24, 0x13	; 19
    15c0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	11 f4       	brne	.+4      	; 0x15cc <xQueueGenericSend+0x66>
    15c8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	56 c0       	rjmp	.+172    	; 0x1680 <xQueueGenericSend+0x11a>
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	9f 81       	ldd	r25, Y+7	; 0x07
    15d8:	a8 85       	ldd	r26, Y+8	; 0x08
    15da:	b9 85       	ldd	r27, Y+9	; 0x09
    15dc:	89 2b       	or	r24, r25
    15de:	8a 2b       	or	r24, r26
    15e0:	8b 2b       	or	r24, r27
    15e2:	21 f4       	brne	.+8      	; 0x15ec <xQueueGenericSend+0x86>
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	4a c0       	rjmp	.+148    	; 0x1680 <xQueueGenericSend+0x11a>
    15ec:	11 11       	cpse	r17, r1
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <xQueueGenericSend+0x94>
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	0e 94 b8 10 	call	0x2170	; 0x2170 <vTaskSetTimeOutState>
    15f8:	11 e0       	ldi	r17, 0x01	; 1
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	0f 92       	push	r0
    1608:	f7 01       	movw	r30, r14
    160a:	81 a1       	ldd	r24, Z+33	; 0x21
    160c:	8f 3f       	cpi	r24, 0xFF	; 255
    160e:	09 f4       	brne	.+2      	; 0x1612 <xQueueGenericSend+0xac>
    1610:	11 a2       	std	Z+33, r1	; 0x21
    1612:	f7 01       	movw	r30, r14
    1614:	82 a1       	ldd	r24, Z+34	; 0x22
    1616:	8f 3f       	cpi	r24, 0xFF	; 255
    1618:	09 f4       	brne	.+2      	; 0x161c <xQueueGenericSend+0xb6>
    161a:	12 a2       	std	Z+34, r1	; 0x22
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	be 01       	movw	r22, r28
    1622:	6a 5f       	subi	r22, 0xFA	; 250
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	ce 01       	movw	r24, r28
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	0e 94 c9 10 	call	0x2192	; 0x2192 <xTaskCheckForTimeOut>
    162e:	81 11       	cpse	r24, r1
    1630:	21 c0       	rjmp	.+66     	; 0x1674 <xQueueGenericSend+0x10e>
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	0f 92       	push	r0
    1638:	f7 01       	movw	r30, r14
    163a:	96 8d       	ldd	r25, Z+30	; 0x1e
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	87 8d       	ldd	r24, Z+31	; 0x1f
    1642:	98 13       	cpse	r25, r24
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <xQueueGenericSend+0x102>
    1646:	4e 81       	ldd	r20, Y+6	; 0x06
    1648:	5f 81       	ldd	r21, Y+7	; 0x07
    164a:	68 85       	ldd	r22, Y+8	; 0x08
    164c:	79 85       	ldd	r23, Y+9	; 0x09
    164e:	c6 01       	movw	r24, r12
    1650:	0e 94 4f 10 	call	0x209e	; 0x209e <vTaskPlaceOnEventList>
    1654:	c7 01       	movw	r24, r14
    1656:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    165a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    165e:	81 11       	cpse	r24, r1
    1660:	9c cf       	rjmp	.-200    	; 0x159a <xQueueGenericSend+0x34>
    1662:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1666:	99 cf       	rjmp	.-206    	; 0x159a <xQueueGenericSend+0x34>
    1668:	c7 01       	movw	r24, r14
    166a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    166e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    1672:	93 cf       	rjmp	.-218    	; 0x159a <xQueueGenericSend+0x34>
    1674:	c7 01       	movw	r24, r14
    1676:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    167a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	29 96       	adiw	r28, 0x09	; 9
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	08 95       	ret

0000169c <xQueueGenericReceive>:
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	29 97       	sbiw	r28, 0x09	; 9
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	7c 01       	movw	r14, r24
    16bc:	5b 01       	movw	r10, r22
    16be:	2e 83       	std	Y+6, r18	; 0x06
    16c0:	3f 83       	std	Y+7, r19	; 0x07
    16c2:	48 87       	std	Y+8, r20	; 0x08
    16c4:	59 87       	std	Y+9, r21	; 0x09
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	6c 01       	movw	r12, r24
    16ca:	83 e1       	ldi	r24, 0x13	; 19
    16cc:	c8 0e       	add	r12, r24
    16ce:	d1 1c       	adc	r13, r1
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	0f 92       	push	r0
    16d6:	f7 01       	movw	r30, r14
    16d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    16da:	88 23       	and	r24, r24
    16dc:	99 f1       	breq	.+102    	; 0x1744 <xQueueGenericReceive+0xa8>
    16de:	c6 80       	ldd	r12, Z+6	; 0x06
    16e0:	d7 80       	ldd	r13, Z+7	; 0x07
    16e2:	b5 01       	movw	r22, r10
    16e4:	c7 01       	movw	r24, r14
    16e6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <prvCopyDataFromQueue>
    16ea:	01 11       	cpse	r16, r1
    16ec:	1a c0       	rjmp	.+52     	; 0x1722 <xQueueGenericReceive+0x86>
    16ee:	f7 01       	movw	r30, r14
    16f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	86 8f       	std	Z+30, r24	; 0x1e
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	89 2b       	or	r24, r25
    16fc:	29 f4       	brne	.+10     	; 0x1708 <xQueueGenericReceive+0x6c>
    16fe:	0e 94 53 11 	call	0x22a6	; 0x22a6 <xTaskGetCurrentTaskHandle>
    1702:	f7 01       	movw	r30, r14
    1704:	82 83       	std	Z+2, r24	; 0x02
    1706:	93 83       	std	Z+3, r25	; 0x03
    1708:	f7 01       	movw	r30, r14
    170a:	80 85       	ldd	r24, Z+8	; 0x08
    170c:	88 23       	and	r24, r24
    170e:	b1 f0       	breq	.+44     	; 0x173c <xQueueGenericReceive+0xa0>
    1710:	c7 01       	movw	r24, r14
    1712:	08 96       	adiw	r24, 0x08	; 8
    1714:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	81 f4       	brne	.+32     	; 0x173c <xQueueGenericReceive+0xa0>
    171c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1720:	0d c0       	rjmp	.+26     	; 0x173c <xQueueGenericReceive+0xa0>
    1722:	f7 01       	movw	r30, r14
    1724:	c6 82       	std	Z+6, r12	; 0x06
    1726:	d7 82       	std	Z+7, r13	; 0x07
    1728:	83 89       	ldd	r24, Z+19	; 0x13
    172a:	88 23       	and	r24, r24
    172c:	39 f0       	breq	.+14     	; 0x173c <xQueueGenericReceive+0xa0>
    172e:	c7 01       	movw	r24, r14
    1730:	43 96       	adiw	r24, 0x13	; 19
    1732:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1736:	81 11       	cpse	r24, r1
    1738:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	62 c0       	rjmp	.+196    	; 0x1808 <xQueueGenericReceive+0x16c>
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	a8 85       	ldd	r26, Y+8	; 0x08
    174a:	b9 85       	ldd	r27, Y+9	; 0x09
    174c:	89 2b       	or	r24, r25
    174e:	8a 2b       	or	r24, r26
    1750:	8b 2b       	or	r24, r27
    1752:	21 f4       	brne	.+8      	; 0x175c <xQueueGenericReceive+0xc0>
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	56 c0       	rjmp	.+172    	; 0x1808 <xQueueGenericReceive+0x16c>
    175c:	11 11       	cpse	r17, r1
    175e:	05 c0       	rjmp	.+10     	; 0x176a <xQueueGenericReceive+0xce>
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	0e 94 b8 10 	call	0x2170	; 0x2170 <vTaskSetTimeOutState>
    1768:	11 e0       	ldi	r17, 0x01	; 1
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	0f 92       	push	r0
    1778:	f7 01       	movw	r30, r14
    177a:	81 a1       	ldd	r24, Z+33	; 0x21
    177c:	8f 3f       	cpi	r24, 0xFF	; 255
    177e:	09 f4       	brne	.+2      	; 0x1782 <xQueueGenericReceive+0xe6>
    1780:	11 a2       	std	Z+33, r1	; 0x21
    1782:	f7 01       	movw	r30, r14
    1784:	82 a1       	ldd	r24, Z+34	; 0x22
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	09 f4       	brne	.+2      	; 0x178c <xQueueGenericReceive+0xf0>
    178a:	12 a2       	std	Z+34, r1	; 0x22
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	be 01       	movw	r22, r28
    1792:	6a 5f       	subi	r22, 0xFA	; 250
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 c9 10 	call	0x2192	; 0x2192 <xTaskCheckForTimeOut>
    179e:	81 11       	cpse	r24, r1
    17a0:	2d c0       	rjmp	.+90     	; 0x17fc <xQueueGenericReceive+0x160>
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	0f 92       	push	r0
    17a8:	f7 01       	movw	r30, r14
    17aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	81 11       	cpse	r24, r1
    17b2:	1e c0       	rjmp	.+60     	; 0x17f0 <xQueueGenericReceive+0x154>
    17b4:	80 81       	ld	r24, Z
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	89 2b       	or	r24, r25
    17ba:	49 f4       	brne	.+18     	; 0x17ce <xQueueGenericReceive+0x132>
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	0f 92       	push	r0
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vTaskPriorityInherit>
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	4e 81       	ldd	r20, Y+6	; 0x06
    17d0:	5f 81       	ldd	r21, Y+7	; 0x07
    17d2:	68 85       	ldd	r22, Y+8	; 0x08
    17d4:	79 85       	ldd	r23, Y+9	; 0x09
    17d6:	c6 01       	movw	r24, r12
    17d8:	0e 94 4f 10 	call	0x209e	; 0x209e <vTaskPlaceOnEventList>
    17dc:	c7 01       	movw	r24, r14
    17de:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    17e2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    17e6:	81 11       	cpse	r24, r1
    17e8:	73 cf       	rjmp	.-282    	; 0x16d0 <xQueueGenericReceive+0x34>
    17ea:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    17ee:	70 cf       	rjmp	.-288    	; 0x16d0 <xQueueGenericReceive+0x34>
    17f0:	c7 01       	movw	r24, r14
    17f2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    17f6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    17fa:	6a cf       	rjmp	.-300    	; 0x16d0 <xQueueGenericReceive+0x34>
    17fc:	c7 01       	movw	r24, r14
    17fe:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvUnlockQueue>
    1802:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	29 96       	adiw	r28, 0x09	; 9
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	08 95       	ret

00001824 <uxQueueMessagesWaiting>:
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	0f 92       	push	r0
    182a:	fc 01       	movw	r30, r24
    182c:	86 8d       	ldd	r24, Z+30	; 0x1e
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	08 95       	ret

00001834 <prvIdleTask>:
    1834:	c2 e0       	ldi	r28, 0x02	; 2
    1836:	d1 e3       	ldi	r29, 0x31	; 49
    1838:	88 81       	ld	r24, Y
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	e8 f3       	brcs	.-6      	; 0x1838 <prvIdleTask+0x4>
    183e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1842:	fa cf       	rjmp	.-12     	; 0x1838 <prvIdleTask+0x4>

00001844 <prvAddCurrentTaskToDelayedList>:
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	6b 01       	movw	r12, r22
    184e:	7c 01       	movw	r14, r24
    1850:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    1854:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1858:	62 83       	std	Z+2, r22	; 0x02
    185a:	73 83       	std	Z+3, r23	; 0x03
    185c:	84 83       	std	Z+4, r24	; 0x04
    185e:	95 83       	std	Z+5, r25	; 0x05
    1860:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1864:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1868:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    186c:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1870:	c8 16       	cp	r12, r24
    1872:	d9 06       	cpc	r13, r25
    1874:	ea 06       	cpc	r14, r26
    1876:	fb 06       	cpc	r15, r27
    1878:	68 f4       	brcc	.+26     	; 0x1894 <prvAddCurrentTaskToDelayedList+0x50>
    187a:	60 91 2e 31 	lds	r22, 0x312E	; 0x80312e <pxCurrentTCB>
    187e:	70 91 2f 31 	lds	r23, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1882:	80 91 e8 30 	lds	r24, 0x30E8	; 0x8030e8 <pxOverflowDelayedTaskList>
    1886:	90 91 e9 30 	lds	r25, 0x30E9	; 0x8030e9 <pxOverflowDelayedTaskList+0x1>
    188a:	6e 5f       	subi	r22, 0xFE	; 254
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vListInsert>
    1892:	21 c0       	rjmp	.+66     	; 0x18d6 <prvAddCurrentTaskToDelayedList+0x92>
    1894:	60 91 2e 31 	lds	r22, 0x312E	; 0x80312e <pxCurrentTCB>
    1898:	70 91 2f 31 	lds	r23, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    189c:	80 91 ea 30 	lds	r24, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    18a0:	90 91 eb 30 	lds	r25, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    18a4:	6e 5f       	subi	r22, 0xFE	; 254
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vListInsert>
    18ac:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    18b0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    18b4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    18b8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    18bc:	c8 16       	cp	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	ea 06       	cpc	r14, r26
    18c2:	fb 06       	cpc	r15, r27
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <prvAddCurrentTaskToDelayedList+0x92>
    18c6:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    18ca:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    18ce:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    18d2:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	08 95       	ret

000018e0 <xTaskGenericCreate>:
    18e0:	4f 92       	push	r4
    18e2:	5f 92       	push	r5
    18e4:	6f 92       	push	r6
    18e6:	7f 92       	push	r7
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	5c 01       	movw	r10, r24
    1902:	4b 01       	movw	r8, r22
    1904:	3a 01       	movw	r6, r20
    1906:	29 01       	movw	r4, r18
    1908:	88 e2       	ldi	r24, 0x28	; 40
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    1910:	ec 01       	movw	r28, r24
    1912:	89 2b       	or	r24, r25
    1914:	09 f4       	brne	.+2      	; 0x1918 <xTaskGenericCreate+0x38>
    1916:	d4 c0       	rjmp	.+424    	; 0x1ac0 <xTaskGenericCreate+0x1e0>
    1918:	c1 14       	cp	r12, r1
    191a:	d1 04       	cpc	r13, r1
    191c:	09 f0       	breq	.+2      	; 0x1920 <xTaskGenericCreate+0x40>
    191e:	cc c0       	rjmp	.+408    	; 0x1ab8 <xTaskGenericCreate+0x1d8>
    1920:	c3 01       	movw	r24, r6
    1922:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    1926:	8b 8f       	std	Y+27, r24	; 0x1b
    1928:	9c 8f       	std	Y+28, r25	; 0x1c
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	21 f4       	brne	.+8      	; 0x1936 <xTaskGenericCreate+0x56>
    192e:	ce 01       	movw	r24, r28
    1930:	0e 94 39 07 	call	0xe72	; 0xe72 <vPortFree>
    1934:	c5 c0       	rjmp	.+394    	; 0x1ac0 <xTaskGenericCreate+0x1e0>
    1936:	a3 01       	movw	r20, r6
    1938:	61 e1       	ldi	r22, 0x11	; 17
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <memset>
    1940:	93 01       	movw	r18, r6
    1942:	21 50       	subi	r18, 0x01	; 1
    1944:	31 09       	sbc	r19, r1
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194a:	3c 01       	movw	r6, r24
    194c:	62 0e       	add	r6, r18
    194e:	73 1e       	adc	r7, r19
    1950:	4a e0       	ldi	r20, 0x0A	; 10
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	b4 01       	movw	r22, r8
    1956:	ce 01       	movw	r24, r28
    1958:	4d 96       	adiw	r24, 0x1d	; 29
    195a:	0e 94 a8 1c 	call	0x3950	; 0x3950 <strncpy>
    195e:	1e a2       	std	Y+38, r1	; 0x26
    1960:	10 2f       	mov	r17, r16
    1962:	04 30       	cpi	r16, 0x04	; 4
    1964:	08 f0       	brcs	.+2      	; 0x1968 <xTaskGenericCreate+0x88>
    1966:	13 e0       	ldi	r17, 0x03	; 3
    1968:	1a 8f       	std	Y+26, r17	; 0x1a
    196a:	1f a3       	std	Y+39, r17	; 0x27
    196c:	6e 01       	movw	r12, r28
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	c2 0e       	add	r12, r18
    1972:	d1 1c       	adc	r13, r1
    1974:	c6 01       	movw	r24, r12
    1976:	0e 94 82 07 	call	0xf04	; 0xf04 <vListInitialiseItem>
    197a:	ce 01       	movw	r24, r28
    197c:	0e 96       	adiw	r24, 0x0e	; 14
    197e:	0e 94 82 07 	call	0xf04	; 0xf04 <vListInitialiseItem>
    1982:	ca 87       	std	Y+10, r28	; 0x0a
    1984:	db 87       	std	Y+11, r29	; 0x0b
    1986:	84 e0       	ldi	r24, 0x04	; 4
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	81 1b       	sub	r24, r17
    1990:	91 09       	sbc	r25, r1
    1992:	a1 09       	sbc	r26, r1
    1994:	b1 09       	sbc	r27, r1
    1996:	8e 87       	std	Y+14, r24	; 0x0e
    1998:	9f 87       	std	Y+15, r25	; 0x0f
    199a:	a8 8b       	std	Y+16, r26	; 0x10
    199c:	b9 8b       	std	Y+17, r27	; 0x11
    199e:	ce 8b       	std	Y+22, r28	; 0x16
    19a0:	df 8b       	std	Y+23, r29	; 0x17
    19a2:	a2 01       	movw	r20, r4
    19a4:	b5 01       	movw	r22, r10
    19a6:	c3 01       	movw	r24, r6
    19a8:	0e 94 1e 08 	call	0x103c	; 0x103c <pxPortInitialiseStack>
    19ac:	88 83       	st	Y, r24
    19ae:	99 83       	std	Y+1, r25	; 0x01
    19b0:	e1 14       	cp	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	19 f0       	breq	.+6      	; 0x19bc <xTaskGenericCreate+0xdc>
    19b6:	f7 01       	movw	r30, r14
    19b8:	c0 83       	st	Z, r28
    19ba:	d1 83       	std	Z+1, r29	; 0x01
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	0f 92       	push	r0
    19c2:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <uxCurrentNumberOfTasks>
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 da 30 	sts	0x30DA, r24	; 0x8030da <uxCurrentNumberOfTasks>
    19cc:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    19d0:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    19d4:	89 2b       	or	r24, r25
    19d6:	89 f5       	brne	.+98     	; 0x1a3a <xTaskGenericCreate+0x15a>
    19d8:	c0 93 2e 31 	sts	0x312E, r28	; 0x80312e <pxCurrentTCB>
    19dc:	d0 93 2f 31 	sts	0x312F, r29	; 0x80312f <pxCurrentTCB+0x1>
    19e0:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <uxCurrentNumberOfTasks>
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	c1 f5       	brne	.+112    	; 0x1a58 <xTaskGenericCreate+0x178>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	91 e3       	ldi	r25, 0x31	; 49
    19ec:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    19f0:	8d e0       	ldi	r24, 0x0D	; 13
    19f2:	91 e3       	ldi	r25, 0x31	; 49
    19f4:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    19f8:	88 e1       	ldi	r24, 0x18	; 24
    19fa:	91 e3       	ldi	r25, 0x31	; 49
    19fc:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    1a00:	83 e2       	ldi	r24, 0x23	; 35
    1a02:	91 e3       	ldi	r25, 0x31	; 49
    1a04:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    1a08:	87 ef       	ldi	r24, 0xF7	; 247
    1a0a:	90 e3       	ldi	r25, 0x30	; 48
    1a0c:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    1a10:	8c ee       	ldi	r24, 0xEC	; 236
    1a12:	90 e3       	ldi	r25, 0x30	; 48
    1a14:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    1a18:	8d ed       	ldi	r24, 0xDD	; 221
    1a1a:	90 e3       	ldi	r25, 0x30	; 48
    1a1c:	0e 94 71 07 	call	0xee2	; 0xee2 <vListInitialise>
    1a20:	87 ef       	ldi	r24, 0xF7	; 247
    1a22:	90 e3       	ldi	r25, 0x30	; 48
    1a24:	80 93 ea 30 	sts	0x30EA, r24	; 0x8030ea <pxDelayedTaskList>
    1a28:	90 93 eb 30 	sts	0x30EB, r25	; 0x8030eb <pxDelayedTaskList+0x1>
    1a2c:	8c ee       	ldi	r24, 0xEC	; 236
    1a2e:	90 e3       	ldi	r25, 0x30	; 48
    1a30:	80 93 e8 30 	sts	0x30E8, r24	; 0x8030e8 <pxOverflowDelayedTaskList>
    1a34:	90 93 e9 30 	sts	0x30E9, r25	; 0x8030e9 <pxOverflowDelayedTaskList+0x1>
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <xTaskGenericCreate+0x178>
    1a3a:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <xSchedulerRunning>
    1a3e:	81 11       	cpse	r24, r1
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <xTaskGenericCreate+0x178>
    1a42:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    1a46:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1a4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a4c:	08 17       	cp	r16, r24
    1a4e:	20 f0       	brcs	.+8      	; 0x1a58 <xTaskGenericCreate+0x178>
    1a50:	c0 93 2e 31 	sts	0x312E, r28	; 0x80312e <pxCurrentTCB>
    1a54:	d0 93 2f 31 	sts	0x312F, r29	; 0x80312f <pxCurrentTCB+0x1>
    1a58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a5a:	90 91 d5 30 	lds	r25, 0x30D5	; 0x8030d5 <uxTopUsedPriority>
    1a5e:	98 17       	cp	r25, r24
    1a60:	10 f4       	brcc	.+4      	; 0x1a66 <xTaskGenericCreate+0x186>
    1a62:	80 93 d5 30 	sts	0x30D5, r24	; 0x8030d5 <uxTopUsedPriority>
    1a66:	90 91 ce 30 	lds	r25, 0x30CE	; 0x8030ce <uxTaskNumber>
    1a6a:	9f 5f       	subi	r25, 0xFF	; 255
    1a6c:	90 93 ce 30 	sts	0x30CE, r25	; 0x8030ce <uxTaskNumber>
    1a70:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    1a74:	98 17       	cp	r25, r24
    1a76:	10 f4       	brcc	.+4      	; 0x1a7c <xTaskGenericCreate+0x19c>
    1a78:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    1a7c:	fb e0       	ldi	r31, 0x0B	; 11
    1a7e:	8f 9f       	mul	r24, r31
    1a80:	c0 01       	movw	r24, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	b6 01       	movw	r22, r12
    1a86:	8e 5f       	subi	r24, 0xFE	; 254
    1a88:	9e 4c       	sbci	r25, 0xCE	; 206
    1a8a:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <xSchedulerRunning>
    1a96:	88 23       	and	r24, r24
    1a98:	59 f0       	breq	.+22     	; 0x1ab0 <xTaskGenericCreate+0x1d0>
    1a9a:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    1a9e:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1aa2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aa4:	80 17       	cp	r24, r16
    1aa6:	30 f4       	brcc	.+12     	; 0x1ab4 <xTaskGenericCreate+0x1d4>
    1aa8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <xTaskGenericCreate+0x1e2>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <xTaskGenericCreate+0x1e2>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <xTaskGenericCreate+0x1e2>
    1ab8:	cb 8e       	std	Y+27, r12	; 0x1b
    1aba:	dc 8e       	std	Y+28, r13	; 0x1c
    1abc:	c6 01       	movw	r24, r12
    1abe:	3b cf       	rjmp	.-394    	; 0x1936 <xTaskGenericCreate+0x56>
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	9f 90       	pop	r9
    1ad8:	8f 90       	pop	r8
    1ada:	7f 90       	pop	r7
    1adc:	6f 90       	pop	r6
    1ade:	5f 90       	pop	r5
    1ae0:	4f 90       	pop	r4
    1ae2:	08 95       	ret

00001ae4 <uxTaskPriorityGet>:
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	0f 92       	push	r0
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	21 f4       	brne	.+8      	; 0x1af6 <uxTaskPriorityGet+0x12>
    1aee:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    1af2:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	fc 01       	movw	r30, r24
    1afc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1afe:	08 95       	ret

00001b00 <vTaskStartScheduler>:
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	a1 2c       	mov	r10, r1
    1b10:	b1 2c       	mov	r11, r1
    1b12:	c1 2c       	mov	r12, r1
    1b14:	d1 2c       	mov	r13, r1
    1b16:	0f 2e       	mov	r0, r31
    1b18:	fb ed       	ldi	r31, 0xDB	; 219
    1b1a:	ef 2e       	mov	r14, r31
    1b1c:	f0 e3       	ldi	r31, 0x30	; 48
    1b1e:	ff 2e       	mov	r15, r31
    1b20:	f0 2d       	mov	r31, r0
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	44 e6       	ldi	r20, 0x64	; 100
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	66 e3       	ldi	r22, 0x36	; 54
    1b2e:	70 e2       	ldi	r23, 0x20	; 32
    1b30:	8a e1       	ldi	r24, 0x1A	; 26
    1b32:	9c e0       	ldi	r25, 0x0C	; 12
    1b34:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <xTaskGenericCreate>
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	69 f4       	brne	.+26     	; 0x1b56 <vTaskStartScheduler+0x56>
    1b3c:	f8 94       	cli
    1b3e:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <xSchedulerRunning>
    1b42:	10 92 d6 30 	sts	0x30D6, r1	; 0x8030d6 <xTickCount>
    1b46:	10 92 d7 30 	sts	0x30D7, r1	; 0x8030d7 <xTickCount+0x1>
    1b4a:	10 92 d8 30 	sts	0x30D8, r1	; 0x8030d8 <xTickCount+0x2>
    1b4e:	10 92 d9 30 	sts	0x30D9, r1	; 0x8030d9 <xTickCount+0x3>
    1b52:	0e 94 94 08 	call	0x1128	; 0x1128 <xPortStartScheduler>
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	08 95       	ret

00001b66 <vTaskSuspendAll>:
    1b66:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	80 93 d2 30 	sts	0x30D2, r24	; 0x8030d2 <uxSchedulerSuspended>
    1b70:	08 95       	ret

00001b72 <xTaskGetTickCount>:
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	0f 92       	push	r0
    1b78:	60 91 d6 30 	lds	r22, 0x30D6	; 0x8030d6 <xTickCount>
    1b7c:	70 91 d7 30 	lds	r23, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1b80:	80 91 d8 30 	lds	r24, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1b84:	90 91 d9 30 	lds	r25, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	08 95       	ret

00001b8e <pcTaskGetTaskName>:
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <pcTaskGetTaskName+0xc>
    1b92:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    1b96:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1b9a:	4d 96       	adiw	r24, 0x1d	; 29
    1b9c:	08 95       	ret

00001b9e <xTaskGetIdleTaskHandle>:
    1b9e:	80 91 db 30 	lds	r24, 0x30DB	; 0x8030db <xIdleTaskHandle>
    1ba2:	90 91 dc 30 	lds	r25, 0x30DC	; 0x8030dc <xIdleTaskHandle+0x1>
    1ba6:	08 95       	ret

00001ba8 <vTaskIncrementTick>:
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	ed c0       	rjmp	.+474    	; 0x1d94 <vTaskIncrementTick+0x1ec>
    1bba:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1bbe:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1bc2:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1bc6:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	b1 1d       	adc	r27, r1
    1bd0:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xTickCount>
    1bd4:	90 93 d7 30 	sts	0x30D7, r25	; 0x8030d7 <xTickCount+0x1>
    1bd8:	a0 93 d8 30 	sts	0x30D8, r26	; 0x8030d8 <xTickCount+0x2>
    1bdc:	b0 93 d9 30 	sts	0x30D9, r27	; 0x8030d9 <xTickCount+0x3>
    1be0:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1be4:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1be8:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1bec:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	8a 2b       	or	r24, r26
    1bf4:	8b 2b       	or	r24, r27
    1bf6:	f1 f5       	brne	.+124    	; 0x1c74 <vTaskIncrementTick+0xcc>
    1bf8:	80 91 ea 30 	lds	r24, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1bfc:	90 91 eb 30 	lds	r25, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1c00:	20 91 e8 30 	lds	r18, 0x30E8	; 0x8030e8 <pxOverflowDelayedTaskList>
    1c04:	30 91 e9 30 	lds	r19, 0x30E9	; 0x8030e9 <pxOverflowDelayedTaskList+0x1>
    1c08:	20 93 ea 30 	sts	0x30EA, r18	; 0x8030ea <pxDelayedTaskList>
    1c0c:	30 93 eb 30 	sts	0x30EB, r19	; 0x8030eb <pxDelayedTaskList+0x1>
    1c10:	80 93 e8 30 	sts	0x30E8, r24	; 0x8030e8 <pxOverflowDelayedTaskList>
    1c14:	90 93 e9 30 	sts	0x30E9, r25	; 0x8030e9 <pxOverflowDelayedTaskList+0x1>
    1c18:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xNumOfOverflows>
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 cf 30 	sts	0x30CF, r24	; 0x8030cf <xNumOfOverflows>
    1c22:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1c26:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <vTaskIncrementTick+0xa0>
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	dc 01       	movw	r26, r24
    1c36:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1c3a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1c3e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1c42:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1c46:	16 c0       	rjmp	.+44     	; 0x1c74 <vTaskIncrementTick+0xcc>
    1c48:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1c4c:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1c50:	07 80       	ldd	r0, Z+7	; 0x07
    1c52:	f0 85       	ldd	r31, Z+8	; 0x08
    1c54:	e0 2d       	mov	r30, r0
    1c56:	00 84       	ldd	r0, Z+8	; 0x08
    1c58:	f1 85       	ldd	r31, Z+9	; 0x09
    1c5a:	e0 2d       	mov	r30, r0
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	a4 81       	ldd	r26, Z+4	; 0x04
    1c62:	b5 81       	ldd	r27, Z+5	; 0x05
    1c64:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1c68:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1c6c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1c70:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1c74:	40 91 d6 30 	lds	r20, 0x30D6	; 0x8030d6 <xTickCount>
    1c78:	50 91 d7 30 	lds	r21, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1c7c:	60 91 d8 30 	lds	r22, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1c80:	70 91 d9 30 	lds	r23, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1c84:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    1c88:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    1c8c:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    1c90:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    1c94:	48 17       	cp	r20, r24
    1c96:	59 07       	cpc	r21, r25
    1c98:	6a 07       	cpc	r22, r26
    1c9a:	7b 07       	cpc	r23, r27
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <vTaskIncrementTick+0xf8>
    1c9e:	7f c0       	rjmp	.+254    	; 0x1d9e <vTaskIncrementTick+0x1f6>
    1ca0:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1ca4:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 23       	and	r24, r24
    1cac:	f9 f0       	breq	.+62     	; 0x1cec <vTaskIncrementTick+0x144>
    1cae:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1cb2:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1cb6:	07 80       	ldd	r0, Z+7	; 0x07
    1cb8:	f0 85       	ldd	r31, Z+8	; 0x08
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	c0 85       	ldd	r28, Z+8	; 0x08
    1cbe:	d1 85       	ldd	r29, Z+9	; 0x09
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	ac 81       	ldd	r26, Y+4	; 0x04
    1cc6:	bd 81       	ldd	r27, Y+5	; 0x05
    1cc8:	40 91 d6 30 	lds	r20, 0x30D6	; 0x8030d6 <xTickCount>
    1ccc:	50 91 d7 30 	lds	r21, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1cd0:	60 91 d8 30 	lds	r22, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1cd4:	70 91 d9 30 	lds	r23, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1cd8:	48 17       	cp	r20, r24
    1cda:	59 07       	cpc	r21, r25
    1cdc:	6a 07       	cpc	r22, r26
    1cde:	7b 07       	cpc	r23, r27
    1ce0:	58 f1       	brcs	.+86     	; 0x1d38 <vTaskIncrementTick+0x190>
    1ce2:	0f 2e       	mov	r0, r31
    1ce4:	fb e0       	ldi	r31, 0x0B	; 11
    1ce6:	ff 2e       	mov	r15, r31
    1ce8:	f0 2d       	mov	r31, r0
    1cea:	2f c0       	rjmp	.+94     	; 0x1d4a <vTaskIncrementTick+0x1a2>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1cf6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1cfa:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1cfe:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1d02:	4d c0       	rjmp	.+154    	; 0x1d9e <vTaskIncrementTick+0x1f6>
    1d04:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1d08:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1d0c:	07 80       	ldd	r0, Z+7	; 0x07
    1d0e:	f0 85       	ldd	r31, Z+8	; 0x08
    1d10:	e0 2d       	mov	r30, r0
    1d12:	c0 85       	ldd	r28, Z+8	; 0x08
    1d14:	d1 85       	ldd	r29, Z+9	; 0x09
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1a:	ac 81       	ldd	r26, Y+4	; 0x04
    1d1c:	bd 81       	ldd	r27, Y+5	; 0x05
    1d1e:	40 91 d6 30 	lds	r20, 0x30D6	; 0x8030d6 <xTickCount>
    1d22:	50 91 d7 30 	lds	r21, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1d26:	60 91 d8 30 	lds	r22, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1d2a:	70 91 d9 30 	lds	r23, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1d2e:	48 17       	cp	r20, r24
    1d30:	59 07       	cpc	r21, r25
    1d32:	6a 07       	cpc	r22, r26
    1d34:	7b 07       	cpc	r23, r27
    1d36:	48 f4       	brcc	.+18     	; 0x1d4a <vTaskIncrementTick+0x1a2>
    1d38:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    1d3c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    1d40:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    1d44:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    1d48:	2a c0       	rjmp	.+84     	; 0x1d9e <vTaskIncrementTick+0x1f6>
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	0e 5f       	subi	r16, 0xFE	; 254
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	c8 01       	movw	r24, r16
    1d52:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1d56:	88 8d       	ldd	r24, Y+24	; 0x18
    1d58:	99 8d       	ldd	r25, Y+25	; 0x19
    1d5a:	89 2b       	or	r24, r25
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <vTaskIncrementTick+0x1be>
    1d5e:	ce 01       	movw	r24, r28
    1d60:	0e 96       	adiw	r24, 0x0e	; 14
    1d62:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d68:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    1d6c:	98 17       	cp	r25, r24
    1d6e:	10 f4       	brcc	.+4      	; 0x1d74 <vTaskIncrementTick+0x1cc>
    1d70:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    1d74:	f8 9e       	mul	r15, r24
    1d76:	c0 01       	movw	r24, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	b8 01       	movw	r22, r16
    1d7c:	8e 5f       	subi	r24, 0xFE	; 254
    1d7e:	9e 4c       	sbci	r25, 0xCE	; 206
    1d80:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    1d84:	e0 91 ea 30 	lds	r30, 0x30EA	; 0x8030ea <pxDelayedTaskList>
    1d88:	f0 91 eb 30 	lds	r31, 0x30EB	; 0x8030eb <pxDelayedTaskList+0x1>
    1d8c:	80 81       	ld	r24, Z
    1d8e:	81 11       	cpse	r24, r1
    1d90:	b9 cf       	rjmp	.-142    	; 0x1d04 <vTaskIncrementTick+0x15c>
    1d92:	ac cf       	rjmp	.-168    	; 0x1cec <vTaskIncrementTick+0x144>
    1d94:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <uxMissedTicks>
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 93 d1 30 	sts	0x30D1, r24	; 0x8030d1 <uxMissedTicks>
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	08 95       	ret

00001daa <xTaskResumeAll>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	0f 92       	push	r0
    1dc0:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    1dc4:	81 50       	subi	r24, 0x01	; 1
    1dc6:	80 93 d2 30 	sts	0x30D2, r24	; 0x8030d2 <uxSchedulerSuspended>
    1dca:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	60 c0       	rjmp	.+192    	; 0x1e92 <xTaskResumeAll+0xe8>
    1dd2:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <uxCurrentNumberOfTasks>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	2c c0       	rjmp	.+88     	; 0x1e32 <xTaskResumeAll+0x88>
    1dda:	5e c0       	rjmp	.+188    	; 0x1e98 <xTaskResumeAll+0xee>
    1ddc:	d7 01       	movw	r26, r14
    1dde:	17 96       	adiw	r26, 0x07	; 7
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	18 97       	sbiw	r26, 0x08	; 8
    1de6:	c0 85       	ldd	r28, Z+8	; 0x08
    1de8:	d1 85       	ldd	r29, Z+9	; 0x09
    1dea:	ce 01       	movw	r24, r28
    1dec:	0e 96       	adiw	r24, 0x0e	; 14
    1dee:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1df2:	8e 01       	movw	r16, r28
    1df4:	0e 5f       	subi	r16, 0xFE	; 254
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	c8 01       	movw	r24, r16
    1dfa:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1dfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e00:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    1e04:	98 17       	cp	r25, r24
    1e06:	10 f4       	brcc	.+4      	; 0x1e0c <xTaskResumeAll+0x62>
    1e08:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    1e0c:	d8 9e       	mul	r13, r24
    1e0e:	c0 01       	movw	r24, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	b8 01       	movw	r22, r16
    1e14:	8e 5f       	subi	r24, 0xFE	; 254
    1e16:	9e 4c       	sbci	r25, 0xCE	; 206
    1e18:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    1e1c:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    1e20:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1e24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e26:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e28:	98 17       	cp	r25, r24
    1e2a:	70 f0       	brcs	.+28     	; 0x1e48 <xTaskResumeAll+0x9e>
    1e2c:	cc 24       	eor	r12, r12
    1e2e:	c3 94       	inc	r12
    1e30:	0b c0       	rjmp	.+22     	; 0x1e48 <xTaskResumeAll+0x9e>
    1e32:	c1 2c       	mov	r12, r1
    1e34:	0f 2e       	mov	r0, r31
    1e36:	fd ed       	ldi	r31, 0xDD	; 221
    1e38:	ef 2e       	mov	r14, r31
    1e3a:	f0 e3       	ldi	r31, 0x30	; 48
    1e3c:	ff 2e       	mov	r15, r31
    1e3e:	f0 2d       	mov	r31, r0
    1e40:	0f 2e       	mov	r0, r31
    1e42:	fb e0       	ldi	r31, 0x0B	; 11
    1e44:	df 2e       	mov	r13, r31
    1e46:	f0 2d       	mov	r31, r0
    1e48:	f7 01       	movw	r30, r14
    1e4a:	80 81       	ld	r24, Z
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	c6 cf       	rjmp	.-116    	; 0x1ddc <xTaskResumeAll+0x32>
    1e50:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <uxMissedTicks>
    1e54:	88 23       	and	r24, r24
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <xTaskResumeAll+0xce>
    1e58:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <uxMissedTicks>
    1e5c:	88 23       	and	r24, r24
    1e5e:	99 f0       	breq	.+38     	; 0x1e86 <xTaskResumeAll+0xdc>
    1e60:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <vTaskIncrementTick>
    1e64:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <uxMissedTicks>
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	80 93 d1 30 	sts	0x30D1, r24	; 0x8030d1 <uxMissedTicks>
    1e6e:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <uxMissedTicks>
    1e72:	81 11       	cpse	r24, r1
    1e74:	f5 cf       	rjmp	.-22     	; 0x1e60 <xTaskResumeAll+0xb6>
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <xTaskResumeAll+0xdc>
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	cf 16       	cp	r12, r31
    1e7c:	21 f0       	breq	.+8      	; 0x1e86 <xTaskResumeAll+0xdc>
    1e7e:	80 91 d0 30 	lds	r24, 0x30D0	; 0x8030d0 <xMissedYield>
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	41 f4       	brne	.+16     	; 0x1e96 <xTaskResumeAll+0xec>
    1e86:	10 92 d0 30 	sts	0x30D0, r1	; 0x8030d0 <xMissedYield>
    1e8a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <xTaskResumeAll+0xee>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <xTaskResumeAll+0xee>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	08 95       	ret

00001eae <vTaskDelayUntil>:
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
    1ebc:	6a 01       	movw	r12, r20
    1ebe:	7b 01       	movw	r14, r22
    1ec0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
    1ec4:	88 81       	ld	r24, Y
    1ec6:	99 81       	ldd	r25, Y+1	; 0x01
    1ec8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eca:	bb 81       	ldd	r27, Y+3	; 0x03
    1ecc:	c8 0e       	add	r12, r24
    1ece:	d9 1e       	adc	r13, r25
    1ed0:	ea 1e       	adc	r14, r26
    1ed2:	fb 1e       	adc	r15, r27
    1ed4:	40 91 d6 30 	lds	r20, 0x30D6	; 0x8030d6 <xTickCount>
    1ed8:	50 91 d7 30 	lds	r21, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1edc:	60 91 d8 30 	lds	r22, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1ee0:	70 91 d9 30 	lds	r23, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1ee4:	48 17       	cp	r20, r24
    1ee6:	59 07       	cpc	r21, r25
    1ee8:	6a 07       	cpc	r22, r26
    1eea:	7b 07       	cpc	r23, r27
    1eec:	b8 f4       	brcc	.+46     	; 0x1f1c <vTaskDelayUntil+0x6e>
    1eee:	c8 16       	cp	r12, r24
    1ef0:	d9 06       	cpc	r13, r25
    1ef2:	ea 06       	cpc	r14, r26
    1ef4:	fb 06       	cpc	r15, r27
    1ef6:	e0 f5       	brcc	.+120    	; 0x1f70 <vTaskDelayUntil+0xc2>
    1ef8:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1efc:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1f00:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1f04:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1f08:	c8 82       	st	Y, r12
    1f0a:	d9 82       	std	Y+1, r13	; 0x01
    1f0c:	ea 82       	std	Y+2, r14	; 0x02
    1f0e:	fb 82       	std	Y+3, r15	; 0x03
    1f10:	8c 15       	cp	r24, r12
    1f12:	9d 05       	cpc	r25, r13
    1f14:	ae 05       	cpc	r26, r14
    1f16:	bf 05       	cpc	r27, r15
    1f18:	f8 f4       	brcc	.+62     	; 0x1f58 <vTaskDelayUntil+0xaa>
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <vTaskDelayUntil+0x94>
    1f1c:	c8 16       	cp	r12, r24
    1f1e:	d9 06       	cpc	r13, r25
    1f20:	ea 06       	cpc	r14, r26
    1f22:	fb 06       	cpc	r15, r27
    1f24:	00 f1       	brcs	.+64     	; 0x1f66 <vTaskDelayUntil+0xb8>
    1f26:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1f2a:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1f2e:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1f32:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1f36:	8c 15       	cp	r24, r12
    1f38:	9d 05       	cpc	r25, r13
    1f3a:	ae 05       	cpc	r26, r14
    1f3c:	bf 05       	cpc	r27, r15
    1f3e:	98 f0       	brcs	.+38     	; 0x1f66 <vTaskDelayUntil+0xb8>
    1f40:	17 c0       	rjmp	.+46     	; 0x1f70 <vTaskDelayUntil+0xc2>
    1f42:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    1f46:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1f4a:	02 96       	adiw	r24, 0x02	; 2
    1f4c:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1f50:	c7 01       	movw	r24, r14
    1f52:	b6 01       	movw	r22, r12
    1f54:	0e 94 22 0c 	call	0x1844	; 0x1844 <prvAddCurrentTaskToDelayedList>
    1f58:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	0d c0       	rjmp	.+26     	; 0x1f7a <vTaskDelayUntil+0xcc>
    1f60:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1f64:	0a c0       	rjmp	.+20     	; 0x1f7a <vTaskDelayUntil+0xcc>
    1f66:	c8 82       	st	Y, r12
    1f68:	d9 82       	std	Y+1, r13	; 0x01
    1f6a:	ea 82       	std	Y+2, r14	; 0x02
    1f6c:	fb 82       	std	Y+3, r15	; 0x03
    1f6e:	e9 cf       	rjmp	.-46     	; 0x1f42 <vTaskDelayUntil+0x94>
    1f70:	c8 82       	st	Y, r12
    1f72:	d9 82       	std	Y+1, r13	; 0x01
    1f74:	ea 82       	std	Y+2, r14	; 0x02
    1f76:	fb 82       	std	Y+3, r15	; 0x03
    1f78:	ef cf       	rjmp	.-34     	; 0x1f58 <vTaskDelayUntil+0xaa>
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	08 95       	ret

00001f88 <vTaskDelay>:
    1f88:	cf 92       	push	r12
    1f8a:	df 92       	push	r13
    1f8c:	ef 92       	push	r14
    1f8e:	ff 92       	push	r15
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
    1f94:	67 2b       	or	r22, r23
    1f96:	68 2b       	or	r22, r24
    1f98:	69 2b       	or	r22, r25
    1f9a:	e9 f0       	breq	.+58     	; 0x1fd6 <vTaskDelay+0x4e>
    1f9c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskSuspendAll>
    1fa0:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    1fa4:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    1fa8:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    1fac:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    1fb0:	c8 0e       	add	r12, r24
    1fb2:	d9 1e       	adc	r13, r25
    1fb4:	ea 1e       	adc	r14, r26
    1fb6:	fb 1e       	adc	r15, r27
    1fb8:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    1fbc:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	b6 01       	movw	r22, r12
    1fca:	0e 94 22 0c 	call	0x1844	; 0x1844 <prvAddCurrentTaskToDelayedList>
    1fce:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <xTaskResumeAll>
    1fd2:	81 11       	cpse	r24, r1
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vTaskDelay+0x52>
    1fd6:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <vPortYield>
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	cf 90       	pop	r12
    1fe2:	08 95       	ret

00001fe4 <vTaskSwitchContext>:
    1fe4:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    1fe8:	81 11       	cpse	r24, r1
    1fea:	0c c0       	rjmp	.+24     	; 0x2004 <vTaskSwitchContext+0x20>
    1fec:	e0 91 d4 30 	lds	r30, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    1ff0:	4b e0       	ldi	r20, 0x0B	; 11
    1ff2:	e4 9f       	mul	r30, r20
    1ff4:	f0 01       	movw	r30, r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	ee 5f       	subi	r30, 0xFE	; 254
    1ffa:	fe 4c       	sbci	r31, 0xCE	; 206
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 23       	and	r24, r24
    2000:	29 f0       	breq	.+10     	; 0x200c <vTaskSwitchContext+0x28>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <vTaskSwitchContext+0x48>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 93 d0 30 	sts	0x30D0, r24	; 0x8030d0 <xMissedYield>
    200a:	08 95       	ret
    200c:	9b e0       	ldi	r25, 0x0B	; 11
    200e:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    2018:	e0 91 d4 30 	lds	r30, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    201c:	9e 9f       	mul	r25, r30
    201e:	f0 01       	movw	r30, r0
    2020:	11 24       	eor	r1, r1
    2022:	ee 5f       	subi	r30, 0xFE	; 254
    2024:	fe 4c       	sbci	r31, 0xCE	; 206
    2026:	80 81       	ld	r24, Z
    2028:	88 23       	and	r24, r24
    202a:	89 f3       	breq	.-30     	; 0x200e <vTaskSwitchContext+0x2a>
    202c:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4b e0       	ldi	r20, 0x0B	; 11
    2036:	84 9f       	mul	r24, r20
    2038:	c0 01       	movw	r24, r0
    203a:	11 24       	eor	r1, r1
    203c:	dc 01       	movw	r26, r24
    203e:	ae 5f       	subi	r26, 0xFE	; 254
    2040:	be 4c       	sbci	r27, 0xCE	; 206
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	ed 91       	ld	r30, X+
    2046:	fc 91       	ld	r31, X
    2048:	12 97       	sbiw	r26, 0x02	; 2
    204a:	04 80       	ldd	r0, Z+4	; 0x04
    204c:	f5 81       	ldd	r31, Z+5	; 0x05
    204e:	e0 2d       	mov	r30, r0
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	ed 93       	st	X+, r30
    2054:	fc 93       	st	X, r31
    2056:	12 97       	sbiw	r26, 0x02	; 2
    2058:	8b 5f       	subi	r24, 0xFB	; 251
    205a:	9e 4c       	sbci	r25, 0xCE	; 206
    205c:	e8 17       	cp	r30, r24
    205e:	f9 07       	cpc	r31, r25
    2060:	61 f4       	brne	.+24     	; 0x207a <vTaskSwitchContext+0x96>
    2062:	84 81       	ldd	r24, Z+4	; 0x04
    2064:	95 81       	ldd	r25, Z+5	; 0x05
    2066:	4b e0       	ldi	r20, 0x0B	; 11
    2068:	42 9f       	mul	r20, r18
    206a:	f0 01       	movw	r30, r0
    206c:	43 9f       	mul	r20, r19
    206e:	f0 0d       	add	r31, r0
    2070:	11 24       	eor	r1, r1
    2072:	ee 5f       	subi	r30, 0xFE	; 254
    2074:	fe 4c       	sbci	r31, 0xCE	; 206
    2076:	81 83       	std	Z+1, r24	; 0x01
    2078:	92 83       	std	Z+2, r25	; 0x02
    207a:	8b e0       	ldi	r24, 0x0B	; 11
    207c:	82 9f       	mul	r24, r18
    207e:	f0 01       	movw	r30, r0
    2080:	83 9f       	mul	r24, r19
    2082:	f0 0d       	add	r31, r0
    2084:	11 24       	eor	r1, r1
    2086:	ee 5f       	subi	r30, 0xFE	; 254
    2088:	fe 4c       	sbci	r31, 0xCE	; 206
    208a:	01 80       	ldd	r0, Z+1	; 0x01
    208c:	f2 81       	ldd	r31, Z+2	; 0x02
    208e:	e0 2d       	mov	r30, r0
    2090:	80 85       	ldd	r24, Z+8	; 0x08
    2092:	91 85       	ldd	r25, Z+9	; 0x09
    2094:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <pxCurrentTCB>
    2098:	90 93 2f 31 	sts	0x312F, r25	; 0x80312f <pxCurrentTCB+0x1>
    209c:	08 95       	ret

0000209e <vTaskPlaceOnEventList>:
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	6a 01       	movw	r12, r20
    20a8:	7b 01       	movw	r14, r22
    20aa:	60 91 2e 31 	lds	r22, 0x312E	; 0x80312e <pxCurrentTCB>
    20ae:	70 91 2f 31 	lds	r23, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    20b2:	62 5f       	subi	r22, 0xF2	; 242
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vListInsert>
    20ba:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    20be:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    20c2:	02 96       	adiw	r24, 0x02	; 2
    20c4:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    20c8:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    20cc:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    20d0:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    20d4:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	6c 0d       	add	r22, r12
    20de:	7d 1d       	adc	r23, r13
    20e0:	8e 1d       	adc	r24, r14
    20e2:	9f 1d       	adc	r25, r15
    20e4:	0e 94 22 0c 	call	0x1844	; 0x1844 <prvAddCurrentTaskToDelayedList>
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	08 95       	ret

000020f2 <xTaskRemoveFromEventList>:
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	dc 01       	movw	r26, r24
    20fc:	17 96       	adiw	r26, 0x07	; 7
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	18 97       	sbiw	r26, 0x08	; 8
    2104:	c0 85       	ldd	r28, Z+8	; 0x08
    2106:	d1 85       	ldd	r29, Z+9	; 0x09
    2108:	8e 01       	movw	r16, r28
    210a:	02 5f       	subi	r16, 0xF2	; 242
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    2114:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <uxSchedulerSuspended>
    2118:	81 11       	cpse	r24, r1
    211a:	16 c0       	rjmp	.+44     	; 0x2148 <xTaskRemoveFromEventList+0x56>
    211c:	0c 50       	subi	r16, 0x0C	; 12
    211e:	11 09       	sbc	r17, r1
    2120:	c8 01       	movw	r24, r16
    2122:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    2126:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2128:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    212c:	98 17       	cp	r25, r24
    212e:	10 f4       	brcc	.+4      	; 0x2134 <xTaskRemoveFromEventList+0x42>
    2130:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    2134:	bb e0       	ldi	r27, 0x0B	; 11
    2136:	8b 9f       	mul	r24, r27
    2138:	c0 01       	movw	r24, r0
    213a:	11 24       	eor	r1, r1
    213c:	b8 01       	movw	r22, r16
    213e:	8e 5f       	subi	r24, 0xFE	; 254
    2140:	9e 4c       	sbci	r25, 0xCE	; 206
    2142:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <xTaskRemoveFromEventList+0x60>
    2148:	b8 01       	movw	r22, r16
    214a:	8d ed       	ldi	r24, 0xDD	; 221
    214c:	90 e3       	ldi	r25, 0x30	; 48
    214e:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    2152:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    2156:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    215e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2160:	29 17       	cp	r18, r25
    2162:	08 f4       	brcc	.+2      	; 0x2166 <xTaskRemoveFromEventList+0x74>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <vTaskSetTimeOutState>:
    2170:	20 91 cf 30 	lds	r18, 0x30CF	; 0x8030cf <xNumOfOverflows>
    2174:	fc 01       	movw	r30, r24
    2176:	20 83       	st	Z, r18
    2178:	40 91 d6 30 	lds	r20, 0x30D6	; 0x8030d6 <xTickCount>
    217c:	50 91 d7 30 	lds	r21, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    2180:	60 91 d8 30 	lds	r22, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    2184:	70 91 d9 30 	lds	r23, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    2188:	41 83       	std	Z+1, r20	; 0x01
    218a:	52 83       	std	Z+2, r21	; 0x02
    218c:	63 83       	std	Z+3, r22	; 0x03
    218e:	74 83       	std	Z+4, r23	; 0x04
    2190:	08 95       	ret

00002192 <xTaskCheckForTimeOut>:
    2192:	8f 92       	push	r8
    2194:	9f 92       	push	r9
    2196:	af 92       	push	r10
    2198:	bf 92       	push	r11
    219a:	cf 92       	push	r12
    219c:	df 92       	push	r13
    219e:	ef 92       	push	r14
    21a0:	ff 92       	push	r15
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	fc 01       	movw	r30, r24
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	0f 92       	push	r0
    21b2:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xNumOfOverflows>
    21b6:	90 81       	ld	r25, Z
    21b8:	98 17       	cp	r25, r24
    21ba:	89 f0       	breq	.+34     	; 0x21de <xTaskCheckForTimeOut+0x4c>
    21bc:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    21c0:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    21c4:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    21c8:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    21cc:	01 81       	ldd	r16, Z+1	; 0x01
    21ce:	12 81       	ldd	r17, Z+2	; 0x02
    21d0:	23 81       	ldd	r18, Z+3	; 0x03
    21d2:	34 81       	ldd	r19, Z+4	; 0x04
    21d4:	80 17       	cp	r24, r16
    21d6:	91 07       	cpc	r25, r17
    21d8:	a2 07       	cpc	r26, r18
    21da:	b3 07       	cpc	r27, r19
    21dc:	a8 f5       	brcc	.+106    	; 0x2248 <xTaskCheckForTimeOut+0xb6>
    21de:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xTickCount>
    21e2:	90 91 d7 30 	lds	r25, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    21e6:	a0 91 d8 30 	lds	r26, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    21ea:	b0 91 d9 30 	lds	r27, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    21ee:	c1 80       	ldd	r12, Z+1	; 0x01
    21f0:	d2 80       	ldd	r13, Z+2	; 0x02
    21f2:	e3 80       	ldd	r14, Z+3	; 0x03
    21f4:	f4 80       	ldd	r15, Z+4	; 0x04
    21f6:	eb 01       	movw	r28, r22
    21f8:	08 81       	ld	r16, Y
    21fa:	19 81       	ldd	r17, Y+1	; 0x01
    21fc:	2a 81       	ldd	r18, Y+2	; 0x02
    21fe:	3b 81       	ldd	r19, Y+3	; 0x03
    2200:	8c 19       	sub	r24, r12
    2202:	9d 09       	sbc	r25, r13
    2204:	ae 09       	sbc	r26, r14
    2206:	bf 09       	sbc	r27, r15
    2208:	80 17       	cp	r24, r16
    220a:	91 07       	cpc	r25, r17
    220c:	a2 07       	cpc	r26, r18
    220e:	b3 07       	cpc	r27, r19
    2210:	e8 f4       	brcc	.+58     	; 0x224c <xTaskCheckForTimeOut+0xba>
    2212:	cf 01       	movw	r24, r30
    2214:	80 90 d6 30 	lds	r8, 0x30D6	; 0x8030d6 <xTickCount>
    2218:	90 90 d7 30 	lds	r9, 0x30D7	; 0x8030d7 <xTickCount+0x1>
    221c:	a0 90 d8 30 	lds	r10, 0x30D8	; 0x8030d8 <xTickCount+0x2>
    2220:	b0 90 d9 30 	lds	r11, 0x30D9	; 0x8030d9 <xTickCount+0x3>
    2224:	b5 01       	movw	r22, r10
    2226:	a4 01       	movw	r20, r8
    2228:	4c 19       	sub	r20, r12
    222a:	5d 09       	sbc	r21, r13
    222c:	6e 09       	sbc	r22, r14
    222e:	7f 09       	sbc	r23, r15
    2230:	04 1b       	sub	r16, r20
    2232:	15 0b       	sbc	r17, r21
    2234:	26 0b       	sbc	r18, r22
    2236:	37 0b       	sbc	r19, r23
    2238:	08 83       	st	Y, r16
    223a:	19 83       	std	Y+1, r17	; 0x01
    223c:	2a 83       	std	Y+2, r18	; 0x02
    223e:	3b 83       	std	Y+3, r19	; 0x03
    2240:	0e 94 b8 10 	call	0x2170	; 0x2170 <vTaskSetTimeOutState>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	03 c0       	rjmp	.+6      	; 0x224e <xTaskCheckForTimeOut+0xbc>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	01 c0       	rjmp	.+2      	; 0x224e <xTaskCheckForTimeOut+0xbc>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	df 90       	pop	r13
    2260:	cf 90       	pop	r12
    2262:	bf 90       	pop	r11
    2264:	af 90       	pop	r10
    2266:	9f 90       	pop	r9
    2268:	8f 90       	pop	r8
    226a:	08 95       	ret

0000226c <vTaskMissedYield>:
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 d0 30 	sts	0x30D0, r24	; 0x8030d0 <xMissedYield>
    2272:	08 95       	ret

00002274 <uxTaskGetStackHighWaterMark>:
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	21 f4       	brne	.+8      	; 0x2280 <uxTaskGetStackHighWaterMark+0xc>
    2278:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    227c:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    2280:	dc 01       	movw	r26, r24
    2282:	5b 96       	adiw	r26, 0x1b	; 27
    2284:	ed 91       	ld	r30, X+
    2286:	fc 91       	ld	r31, X
    2288:	5c 97       	sbiw	r26, 0x1c	; 28
    228a:	80 81       	ld	r24, Z
    228c:	81 31       	cpi	r24, 0x11	; 17
    228e:	41 f4       	brne	.+16     	; 0x22a0 <uxTaskGetStackHighWaterMark+0x2c>
    2290:	31 96       	adiw	r30, 0x01	; 1
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	21 91       	ld	r18, Z+
    229a:	21 31       	cpi	r18, 0x11	; 17
    229c:	e1 f3       	breq	.-8      	; 0x2296 <uxTaskGetStackHighWaterMark+0x22>
    229e:	08 95       	ret
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	08 95       	ret

000022a6 <xTaskGetCurrentTaskHandle>:
    22a6:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <pxCurrentTCB>
    22aa:	90 91 2f 31 	lds	r25, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    22ae:	08 95       	ret

000022b0 <vTaskPriorityInherit>:
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	fc 01       	movw	r30, r24
    22ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    22bc:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    22c0:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    22c4:	5a 96       	adiw	r26, 0x1a	; 26
    22c6:	8c 91       	ld	r24, X
    22c8:	28 17       	cp	r18, r24
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <vTaskPriorityInherit+0x1e>
    22cc:	41 c0       	rjmp	.+130    	; 0x2350 <vTaskPriorityInherit+0xa0>
    22ce:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    22d2:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    22d6:	5a 96       	adiw	r26, 0x1a	; 26
    22d8:	3c 91       	ld	r19, X
    22da:	84 e0       	ldi	r24, 0x04	; 4
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	83 1b       	sub	r24, r19
    22e4:	91 09       	sbc	r25, r1
    22e6:	a1 09       	sbc	r26, r1
    22e8:	b1 09       	sbc	r27, r1
    22ea:	86 87       	std	Z+14, r24	; 0x0e
    22ec:	97 87       	std	Z+15, r25	; 0x0f
    22ee:	a0 8b       	std	Z+16, r26	; 0x10
    22f0:	b1 8b       	std	Z+17, r27	; 0x11
    22f2:	8b e0       	ldi	r24, 0x0B	; 11
    22f4:	28 9f       	mul	r18, r24
    22f6:	90 01       	movw	r18, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2e 5f       	subi	r18, 0xFE	; 254
    22fc:	3e 4c       	sbci	r19, 0xCE	; 206
    22fe:	84 85       	ldd	r24, Z+12	; 0x0c
    2300:	95 85       	ldd	r25, Z+13	; 0x0d
    2302:	82 17       	cp	r24, r18
    2304:	93 07       	cpc	r25, r19
    2306:	e9 f4       	brne	.+58     	; 0x2342 <vTaskPriorityInherit+0x92>
    2308:	8f 01       	movw	r16, r30
    230a:	ef 01       	movw	r28, r30
    230c:	22 96       	adiw	r28, 0x02	; 2
    230e:	ce 01       	movw	r24, r28
    2310:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    2314:	e0 91 2e 31 	lds	r30, 0x312E	; 0x80312e <pxCurrentTCB>
    2318:	f0 91 2f 31 	lds	r31, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    231c:	82 8d       	ldd	r24, Z+26	; 0x1a
    231e:	f8 01       	movw	r30, r16
    2320:	82 8f       	std	Z+26, r24	; 0x1a
    2322:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    2326:	98 17       	cp	r25, r24
    2328:	10 f4       	brcc	.+4      	; 0x232e <vTaskPriorityInherit+0x7e>
    232a:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    232e:	fb e0       	ldi	r31, 0x0B	; 11
    2330:	8f 9f       	mul	r24, r31
    2332:	c0 01       	movw	r24, r0
    2334:	11 24       	eor	r1, r1
    2336:	be 01       	movw	r22, r28
    2338:	8e 5f       	subi	r24, 0xFE	; 254
    233a:	9e 4c       	sbci	r25, 0xCE	; 206
    233c:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    2340:	07 c0       	rjmp	.+14     	; 0x2350 <vTaskPriorityInherit+0xa0>
    2342:	a0 91 2e 31 	lds	r26, 0x312E	; 0x80312e <pxCurrentTCB>
    2346:	b0 91 2f 31 	lds	r27, 0x312F	; 0x80312f <pxCurrentTCB+0x1>
    234a:	5a 96       	adiw	r26, 0x1a	; 26
    234c:	8c 91       	ld	r24, X
    234e:	82 8f       	std	Z+26, r24	; 0x1a
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <vTaskPriorityDisinherit>:
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	49 f1       	breq	.+82     	; 0x23b8 <vTaskPriorityDisinherit+0x5e>
    2366:	fc 01       	movw	r30, r24
    2368:	32 8d       	ldd	r19, Z+26	; 0x1a
    236a:	27 a1       	ldd	r18, Z+39	; 0x27
    236c:	32 17       	cp	r19, r18
    236e:	21 f1       	breq	.+72     	; 0x23b8 <vTaskPriorityDisinherit+0x5e>
    2370:	ec 01       	movw	r28, r24
    2372:	8c 01       	movw	r16, r24
    2374:	0e 5f       	subi	r16, 0xFE	; 254
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	c8 01       	movw	r24, r16
    237a:	0e 94 f8 07 	call	0xff0	; 0xff0 <vListRemove>
    237e:	8f a1       	ldd	r24, Y+39	; 0x27
    2380:	8a 8f       	std	Y+26, r24	; 0x1a
    2382:	44 e0       	ldi	r20, 0x04	; 4
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	48 1b       	sub	r20, r24
    238c:	51 09       	sbc	r21, r1
    238e:	61 09       	sbc	r22, r1
    2390:	71 09       	sbc	r23, r1
    2392:	4e 87       	std	Y+14, r20	; 0x0e
    2394:	5f 87       	std	Y+15, r21	; 0x0f
    2396:	68 8b       	std	Y+16, r22	; 0x10
    2398:	79 8b       	std	Y+17, r23	; 0x11
    239a:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <uxTopReadyPriority>
    239e:	98 17       	cp	r25, r24
    23a0:	10 f4       	brcc	.+4      	; 0x23a6 <vTaskPriorityDisinherit+0x4c>
    23a2:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <uxTopReadyPriority>
    23a6:	fb e0       	ldi	r31, 0x0B	; 11
    23a8:	8f 9f       	mul	r24, r31
    23aa:	c0 01       	movw	r24, r0
    23ac:	11 24       	eor	r1, r1
    23ae:	b8 01       	movw	r22, r16
    23b0:	8e 5f       	subi	r24, 0xFE	; 254
    23b2:	9e 4c       	sbci	r25, 0xCE	; 206
    23b4:	0e 94 86 07 	call	0xf0c	; 0xf0c <vListInsertEnd>
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <_ZN8frt_task22_call_users_run_methodEPS_>:
    23c2:	ec 01       	movw	r28, r24
    23c4:	e8 81       	ld	r30, Y
    23c6:	f9 81       	ldd	r31, Y+1	; 0x01
    23c8:	01 90       	ld	r0, Z+
    23ca:	f0 81       	ld	r31, Z
    23cc:	e0 2d       	mov	r30, r0
    23ce:	19 95       	eicall
    23d0:	1a 82       	std	Y+2, r1	; 0x02
    23d2:	1b 82       	std	Y+3, r1	; 0x03
    23d4:	6f ef       	ldi	r22, 0xFF	; 255
    23d6:	7f ef       	ldi	r23, 0xFF	; 255
    23d8:	cb 01       	movw	r24, r22
    23da:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <vTaskDelay>
    23de:	fa cf       	rjmp	.-12     	; 0x23d4 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

000023e0 <_ZN8frt_task13transition_toEh>:
    23e0:	fc 01       	movw	r30, r24
    23e2:	64 87       	std	Z+12, r22	; 0x0c
    23e4:	65 87       	std	Z+13, r22	; 0x0d
    23e6:	08 95       	ret

000023e8 <_ZN8frt_taskC1EPKchjP8emstream>:
    23e8:	4f 92       	push	r4
    23ea:	5f 92       	push	r5
    23ec:	6f 92       	push	r6
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	2a 97       	sbiw	r28, 0x0a	; 10
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	4c 01       	movw	r8, r24
    2414:	29 01       	movw	r4, r18
    2416:	38 01       	movw	r6, r16
    2418:	8f e3       	ldi	r24, 0x3F	; 63
    241a:	90 e2       	ldi	r25, 0x20	; 32
    241c:	f4 01       	movw	r30, r8
    241e:	80 83       	st	Z, r24
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	fb 01       	movw	r30, r22
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	69 f0       	breq	.+26     	; 0x2444 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    242a:	de 01       	movw	r26, r28
    242c:	11 96       	adiw	r26, 0x01	; 1
    242e:	31 96       	adiw	r30, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    2434:	99 30       	cpi	r25, 0x09	; 9
    2436:	39 f0       	breq	.+14     	; 0x2446 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    2438:	9f 5f       	subi	r25, 0xFF	; 255
    243a:	8d 93       	st	X+, r24
    243c:	81 91       	ld	r24, Z+
    243e:	81 11       	cpse	r24, r1
    2440:	f9 cf       	rjmp	.-14     	; 0x2434 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	e1 e0       	ldi	r30, 0x01	; 1
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	ec 0f       	add	r30, r28
    244c:	fd 1f       	adc	r31, r29
    244e:	e9 0f       	add	r30, r25
    2450:	f1 1d       	adc	r31, r1
    2452:	10 82       	st	Z, r1
    2454:	74 01       	movw	r14, r8
    2456:	f2 e0       	ldi	r31, 0x02	; 2
    2458:	ef 0e       	add	r14, r31
    245a:	f1 1c       	adc	r15, r1
    245c:	a1 2c       	mov	r10, r1
    245e:	b1 2c       	mov	r11, r1
    2460:	c1 2c       	mov	r12, r1
    2462:	d1 2c       	mov	r13, r1
    2464:	04 2f       	mov	r16, r20
    2466:	94 01       	movw	r18, r8
    2468:	a2 01       	movw	r20, r4
    246a:	be 01       	movw	r22, r28
    246c:	6f 5f       	subi	r22, 0xFF	; 255
    246e:	7f 4f       	sbci	r23, 0xFF	; 255
    2470:	86 ea       	ldi	r24, 0xA6	; 166
    2472:	92 e0       	ldi	r25, 0x02	; 2
    2474:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <xTaskGenericCreate>
    2478:	f4 01       	movw	r30, r8
    247a:	66 82       	std	Z+6, r6	; 0x06
    247c:	77 82       	std	Z+7, r7	; 0x07
    247e:	40 86       	std	Z+8, r4	; 0x08
    2480:	51 86       	std	Z+9, r5	; 0x09
    2482:	20 91 30 31 	lds	r18, 0x3130	; 0x803130 <last_created_task_pointer>
    2486:	30 91 31 31 	lds	r19, 0x3131	; 0x803131 <last_created_task_pointer+0x1>
    248a:	24 83       	std	Z+4, r18	; 0x04
    248c:	35 83       	std	Z+5, r19	; 0x05
    248e:	80 92 30 31 	sts	0x3130, r8	; 0x803130 <last_created_task_pointer>
    2492:	90 92 31 31 	sts	0x3131, r9	; 0x803131 <last_created_task_pointer+0x1>
    2496:	14 86       	std	Z+12, r1	; 0x0c
    2498:	15 86       	std	Z+13, r1	; 0x0d
    249a:	40 90 64 31 	lds	r4, 0x3164	; 0x803164 <portStackTopForTask>
    249e:	50 90 65 31 	lds	r5, 0x3165	; 0x803165 <portStackTopForTask+0x1>
    24a2:	ff ef       	ldi	r31, 0xFF	; 255
    24a4:	4f 1a       	sub	r4, r31
    24a6:	5f 0a       	sbc	r5, r31
    24a8:	40 92 64 31 	sts	0x3164, r4	; 0x803164 <portStackTopForTask>
    24ac:	50 92 65 31 	sts	0x3165, r5	; 0x803165 <portStackTopForTask+0x1>
    24b0:	f4 01       	movw	r30, r8
    24b2:	42 86       	std	Z+10, r4	; 0x0a
    24b4:	53 86       	std	Z+11, r5	; 0x0b
    24b6:	16 86       	std	Z+14, r1	; 0x0e
    24b8:	17 86       	std	Z+15, r1	; 0x0f
    24ba:	10 8a       	std	Z+16, r1	; 0x10
    24bc:	11 8a       	std	Z+17, r1	; 0x11
    24be:	61 14       	cp	r6, r1
    24c0:	71 04       	cpc	r7, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    24c4:	44 c0       	rjmp	.+136    	; 0x254e <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	79 f5       	brne	.+94     	; 0x2528 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    24ca:	6a e0       	ldi	r22, 0x0A	; 10
    24cc:	c3 01       	movw	r24, r6
    24ce:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    24d2:	7c 01       	movw	r14, r24
    24d4:	69 e9       	ldi	r22, 0x99	; 153
    24d6:	74 e0       	ldi	r23, 0x04	; 4
    24d8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    24dc:	be 01       	movw	r22, r28
    24de:	6f 5f       	subi	r22, 0xFF	; 255
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	c7 01       	movw	r24, r14
    24e4:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    24e8:	6a e0       	ldi	r22, 0x0A	; 10
    24ea:	c7 01       	movw	r24, r14
    24ec:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    24f0:	7c 01       	movw	r14, r24
    24f2:	60 e9       	ldi	r22, 0x90	; 144
    24f4:	74 e0       	ldi	r23, 0x04	; 4
    24f6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    24fa:	6a e0       	ldi	r22, 0x0A	; 10
    24fc:	c7 01       	movw	r24, r14
    24fe:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2502:	7c 01       	movw	r14, r24
    2504:	62 e8       	ldi	r22, 0x82	; 130
    2506:	74 e0       	ldi	r23, 0x04	; 4
    2508:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    250c:	63 e0       	ldi	r22, 0x03	; 3
    250e:	c7 01       	movw	r24, r14
    2510:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2514:	b2 01       	movw	r22, r4
    2516:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2520:	66 e0       	ldi	r22, 0x06	; 6
    2522:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2526:	13 c0       	rjmp	.+38     	; 0x254e <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    2528:	6a e0       	ldi	r22, 0x0A	; 10
    252a:	c3 01       	movw	r24, r6
    252c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2530:	4c 01       	movw	r8, r24
    2532:	6d e6       	ldi	r22, 0x6D	; 109
    2534:	74 e0       	ldi	r23, 0x04	; 4
    2536:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    253a:	be 01       	movw	r22, r28
    253c:	6f 5f       	subi	r22, 0xFF	; 255
    253e:	7f 4f       	sbci	r23, 0xFF	; 255
    2540:	c4 01       	movw	r24, r8
    2542:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2546:	66 e0       	ldi	r22, 0x06	; 6
    2548:	c4 01       	movw	r24, r8
    254a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    254e:	2a 96       	adiw	r28, 0x0a	; 10
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	df 90       	pop	r13
    2562:	cf 90       	pop	r12
    2564:	bf 90       	pop	r11
    2566:	af 90       	pop	r10
    2568:	9f 90       	pop	r9
    256a:	8f 90       	pop	r8
    256c:	7f 90       	pop	r7
    256e:	6f 90       	pop	r6
    2570:	5f 90       	pop	r5
    2572:	4f 90       	pop	r4
    2574:	08 95       	ret

00002576 <_ZN8frt_task19print_stack_in_listEP8emstream>:
    2576:	cf 92       	push	r12
    2578:	df 92       	push	r13
    257a:	ef 92       	push	r14
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
    2588:	7b 01       	movw	r14, r22
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <pcTaskGetTaskName>
    2592:	6c 01       	movw	r12, r24
    2594:	6a e0       	ldi	r22, 0x0A	; 10
    2596:	c7 01       	movw	r24, r14
    2598:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    259c:	8c 01       	movw	r16, r24
    259e:	6c ea       	ldi	r22, 0xAC	; 172
    25a0:	74 e0       	ldi	r23, 0x04	; 4
    25a2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    25a6:	6a e0       	ldi	r22, 0x0A	; 10
    25a8:	c8 01       	movw	r24, r16
    25aa:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    25ae:	8c 01       	movw	r16, r24
    25b0:	65 ea       	ldi	r22, 0xA5	; 165
    25b2:	74 e0       	ldi	r23, 0x04	; 4
    25b4:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    25b8:	b6 01       	movw	r22, r12
    25ba:	c8 01       	movw	r24, r16
    25bc:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    25c0:	6a e0       	ldi	r22, 0x0A	; 10
    25c2:	c8 01       	movw	r24, r16
    25c4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    25c8:	8c 01       	movw	r16, r24
    25ca:	6f e9       	ldi	r22, 0x9F	; 159
    25cc:	74 e0       	ldi	r23, 0x04	; 4
    25ce:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    25d2:	66 e0       	ldi	r22, 0x06	; 6
    25d4:	c8 01       	movw	r24, r16
    25d6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25de:	e8 85       	ldd	r30, Y+8	; 0x08
    25e0:	f9 85       	ldd	r31, Y+9	; 0x09
    25e2:	01 e1       	ldi	r16, 0x11	; 17
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	a7 01       	movw	r20, r14
    25e8:	bc 01       	movw	r22, r24
    25ea:	8e 1b       	sub	r24, r30
    25ec:	9f 0b       	sbc	r25, r31
    25ee:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <_Z15hex_dump_memoryPhS_P8emstreambh>
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	19 f0       	breq	.+6      	; 0x2600 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
    25fa:	b7 01       	movw	r22, r14
    25fc:	0e 94 bb 12 	call	0x2576	; 0x2576 <_ZN8frt_task19print_stack_in_listEP8emstream>
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	ff 90       	pop	r15
    260a:	ef 90       	pop	r14
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	08 95       	ret

00002612 <_Z17print_task_stacksP8emstream>:
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ec 01       	movw	r28, r24
    261c:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <last_created_task_pointer>
    2620:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <last_created_task_pointer+0x1>
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	19 f0       	breq	.+6      	; 0x262e <_Z17print_task_stacksP8emstream+0x1c>
    2628:	be 01       	movw	r22, r28
    262a:	0e 94 bb 12 	call	0x2576	; 0x2576 <_ZN8frt_task19print_stack_in_listEP8emstream>
    262e:	6a e0       	ldi	r22, 0x0A	; 10
    2630:	ce 01       	movw	r24, r28
    2632:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2636:	8c 01       	movw	r16, r24
    2638:	62 ec       	ldi	r22, 0xC2	; 194
    263a:	74 e0       	ldi	r23, 0x04	; 4
    263c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2640:	6a e0       	ldi	r22, 0x0A	; 10
    2642:	c8 01       	movw	r24, r16
    2644:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2648:	8c 01       	movw	r16, r24
    264a:	67 eb       	ldi	r22, 0xB7	; 183
    264c:	74 e0       	ldi	r23, 0x04	; 4
    264e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2652:	6a e0       	ldi	r22, 0x0A	; 10
    2654:	c8 01       	movw	r24, r16
    2656:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    265a:	8c 01       	movw	r16, r24
    265c:	61 eb       	ldi	r22, 0xB1	; 177
    265e:	74 e0       	ldi	r23, 0x04	; 4
    2660:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2664:	66 e0       	ldi	r22, 0x06	; 6
    2666:	c8 01       	movw	r24, r16
    2668:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    266c:	80 91 64 31 	lds	r24, 0x3164	; 0x803164 <portStackTopForTask>
    2670:	90 91 65 31 	lds	r25, 0x3165	; 0x803165 <portStackTopForTask+0x1>
    2674:	bc 01       	movw	r22, r24
    2676:	6f 5f       	subi	r22, 0xFF	; 255
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	01 e1       	ldi	r16, 0x11	; 17
    267c:	21 e0       	ldi	r18, 0x01	; 1
    267e:	ae 01       	movw	r20, r28
    2680:	83 56       	subi	r24, 0x63	; 99
    2682:	91 09       	sbc	r25, r1
    2684:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <_Z15hex_dump_memoryPhS_P8emstreambh>
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <_ZN8frt_task12print_statusER8emstream>:
    2692:	8f 92       	push	r8
    2694:	9f 92       	push	r9
    2696:	af 92       	push	r10
    2698:	bf 92       	push	r11
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	ec 01       	movw	r28, r24
    26ac:	8b 01       	movw	r16, r22
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <pcTaskGetTaskName>
    26b6:	bc 01       	movw	r22, r24
    26b8:	c8 01       	movw	r24, r16
    26ba:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    26be:	d8 01       	movw	r26, r16
    26c0:	ed 91       	ld	r30, X+
    26c2:	fc 91       	ld	r31, X
    26c4:	02 80       	ldd	r0, Z+2	; 0x02
    26c6:	f3 81       	ldd	r31, Z+3	; 0x03
    26c8:	e0 2d       	mov	r30, r0
    26ca:	69 e0       	ldi	r22, 0x09	; 9
    26cc:	c8 01       	movw	r24, r16
    26ce:	19 95       	eicall
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <pcTaskGetTaskName>
    26d8:	fc 01       	movw	r30, r24
    26da:	01 90       	ld	r0, Z+
    26dc:	00 20       	and	r0, r0
    26de:	e9 f7       	brne	.-6      	; 0x26da <_ZN8frt_task12print_statusER8emstream+0x48>
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	e8 1b       	sub	r30, r24
    26e4:	f9 0b       	sbc	r31, r25
    26e6:	38 97       	sbiw	r30, 0x08	; 8
    26e8:	48 f4       	brcc	.+18     	; 0x26fc <_ZN8frt_task12print_statusER8emstream+0x6a>
    26ea:	d8 01       	movw	r26, r16
    26ec:	ed 91       	ld	r30, X+
    26ee:	fc 91       	ld	r31, X
    26f0:	02 80       	ldd	r0, Z+2	; 0x02
    26f2:	f3 81       	ldd	r31, Z+3	; 0x03
    26f4:	e0 2d       	mov	r30, r0
    26f6:	69 e0       	ldi	r22, 0x09	; 9
    26f8:	c8 01       	movw	r24, r16
    26fa:	19 95       	eicall
    26fc:	ce 84       	ldd	r12, Y+14	; 0x0e
    26fe:	df 84       	ldd	r13, Y+15	; 0x0f
    2700:	e8 88       	ldd	r14, Y+16	; 0x10
    2702:	f9 88       	ldd	r15, Y+17	; 0x11
    2704:	a8 84       	ldd	r10, Y+8	; 0x08
    2706:	b9 84       	ldd	r11, Y+9	; 0x09
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	0e 94 3a 11 	call	0x2274	; 0x2274 <uxTaskGetStackHighWaterMark>
    2710:	98 2e       	mov	r9, r24
    2712:	8c 84       	ldd	r8, Y+12	; 0x0c
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	9b 81       	ldd	r25, Y+3	; 0x03
    2718:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <uxTaskPriorityGet>
    271c:	68 2f       	mov	r22, r24
    271e:	c8 01       	movw	r24, r16
    2720:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2724:	6a e0       	ldi	r22, 0x0A	; 10
    2726:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    272a:	ec 01       	movw	r28, r24
    272c:	67 e3       	ldi	r22, 0x37	; 55
    272e:	75 e0       	ldi	r23, 0x05	; 5
    2730:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2734:	68 2d       	mov	r22, r8
    2736:	ce 01       	movw	r24, r28
    2738:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    273c:	6a e0       	ldi	r22, 0x0A	; 10
    273e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2742:	ec 01       	movw	r28, r24
    2744:	65 e3       	ldi	r22, 0x35	; 53
    2746:	75 e0       	ldi	r23, 0x05	; 5
    2748:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    274c:	69 2d       	mov	r22, r9
    274e:	ce 01       	movw	r24, r28
    2750:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2754:	6a e0       	ldi	r22, 0x0A	; 10
    2756:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    275a:	ec 01       	movw	r28, r24
    275c:	63 e3       	ldi	r22, 0x33	; 51
    275e:	75 e0       	ldi	r23, 0x05	; 5
    2760:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2764:	b5 01       	movw	r22, r10
    2766:	ce 01       	movw	r24, r28
    2768:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
    276c:	6a e0       	ldi	r22, 0x0A	; 10
    276e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2772:	ec 01       	movw	r28, r24
    2774:	61 e3       	ldi	r22, 0x31	; 49
    2776:	75 e0       	ldi	r23, 0x05	; 5
    2778:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    277c:	6a e0       	ldi	r22, 0x0A	; 10
    277e:	ce 01       	movw	r24, r28
    2780:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2784:	ec 01       	movw	r28, r24
    2786:	6f e2       	ldi	r22, 0x2F	; 47
    2788:	75 e0       	ldi	r23, 0x05	; 5
    278a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    278e:	b7 01       	movw	r22, r14
    2790:	a6 01       	movw	r20, r12
    2792:	ce 01       	movw	r24, r28
    2794:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN8emstreamlsEm>
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	9f 90       	pop	r9
    27ae:	8f 90       	pop	r8
    27b0:	08 95       	ret

000027b2 <_ZlsR8emstreamR8frt_task>:
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ec 01       	movw	r28, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	db 01       	movw	r26, r22
    27bc:	ed 91       	ld	r30, X+
    27be:	fc 91       	ld	r31, X
    27c0:	02 80       	ldd	r0, Z+2	; 0x02
    27c2:	f3 81       	ldd	r31, Z+3	; 0x03
    27c4:	e0 2d       	mov	r30, r0
    27c6:	be 01       	movw	r22, r28
    27c8:	19 95       	eicall
    27ca:	ce 01       	movw	r24, r28
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <_ZN8frt_task20print_status_in_listEP8emstream>:
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	ec 01       	movw	r28, r24
    27dc:	8b 01       	movw	r16, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	c8 01       	movw	r24, r16
    27e2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZlsR8emstreamR8frt_task>
    27e6:	66 e0       	ldi	r22, 0x06	; 6
    27e8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	9d 81       	ldd	r25, Y+5	; 0x05
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	19 f0       	breq	.+6      	; 0x27fa <_ZN8frt_task20print_status_in_listEP8emstream+0x28>
    27f4:	b8 01       	movw	r22, r16
    27f6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8frt_task20print_status_in_listEP8emstream>
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <_Z15print_task_listP8emstream>:
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	ec 01       	movw	r28, r24
    280e:	6a e0       	ldi	r22, 0x0A	; 10
    2810:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2814:	8c 01       	movw	r16, r24
    2816:	64 e2       	ldi	r22, 0x24	; 36
    2818:	75 e0       	ldi	r23, 0x05	; 5
    281a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    281e:	6a e0       	ldi	r22, 0x0A	; 10
    2820:	c8 01       	movw	r24, r16
    2822:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2826:	8c 01       	movw	r16, r24
    2828:	6d e1       	ldi	r22, 0x1D	; 29
    282a:	75 e0       	ldi	r23, 0x05	; 5
    282c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2830:	66 e0       	ldi	r22, 0x06	; 6
    2832:	c8 01       	movw	r24, r16
    2834:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2838:	6a e0       	ldi	r22, 0x0A	; 10
    283a:	ce 01       	movw	r24, r28
    283c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2840:	8c 01       	movw	r16, r24
    2842:	6c e0       	ldi	r22, 0x0C	; 12
    2844:	75 e0       	ldi	r23, 0x05	; 5
    2846:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    284a:	6a e0       	ldi	r22, 0x0A	; 10
    284c:	c8 01       	movw	r24, r16
    284e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2852:	8c 01       	movw	r16, r24
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	75 e0       	ldi	r23, 0x05	; 5
    2858:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    285c:	6a e0       	ldi	r22, 0x0A	; 10
    285e:	c8 01       	movw	r24, r16
    2860:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2864:	8c 01       	movw	r16, r24
    2866:	6a ef       	ldi	r22, 0xFA	; 250
    2868:	74 e0       	ldi	r23, 0x04	; 4
    286a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    286e:	66 e0       	ldi	r22, 0x06	; 6
    2870:	c8 01       	movw	r24, r16
    2872:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2876:	6a e0       	ldi	r22, 0x0A	; 10
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    287e:	8c 01       	movw	r16, r24
    2880:	69 ee       	ldi	r22, 0xE9	; 233
    2882:	74 e0       	ldi	r23, 0x04	; 4
    2884:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2888:	6a e0       	ldi	r22, 0x0A	; 10
    288a:	c8 01       	movw	r24, r16
    288c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2890:	8c 01       	movw	r16, r24
    2892:	6d ed       	ldi	r22, 0xDD	; 221
    2894:	74 e0       	ldi	r23, 0x04	; 4
    2896:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    289a:	6a e0       	ldi	r22, 0x0A	; 10
    289c:	c8 01       	movw	r24, r16
    289e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    28a2:	8c 01       	movw	r16, r24
    28a4:	67 ed       	ldi	r22, 0xD7	; 215
    28a6:	74 e0       	ldi	r23, 0x04	; 4
    28a8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    28ac:	66 e0       	ldi	r22, 0x06	; 6
    28ae:	c8 01       	movw	r24, r16
    28b0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    28b4:	80 91 30 31 	lds	r24, 0x3130	; 0x803130 <last_created_task_pointer>
    28b8:	90 91 31 31 	lds	r25, 0x3131	; 0x803131 <last_created_task_pointer+0x1>
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	19 f0       	breq	.+6      	; 0x28c6 <_Z15print_task_listP8emstream+0xc2>
    28c0:	be 01       	movw	r22, r28
    28c2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <_ZN8frt_task20print_status_in_listEP8emstream>
    28c6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <xTaskGetIdleTaskHandle>
    28ca:	0e 94 3a 11 	call	0x2274	; 0x2274 <uxTaskGetStackHighWaterMark>
    28ce:	18 2f       	mov	r17, r24
    28d0:	6a e0       	ldi	r22, 0x0A	; 10
    28d2:	ce 01       	movw	r24, r28
    28d4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    28d8:	ec 01       	movw	r28, r24
    28da:	6c ec       	ldi	r22, 0xCC	; 204
    28dc:	74 e0       	ldi	r23, 0x04	; 4
    28de:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    28e2:	61 2f       	mov	r22, r17
    28e4:	ce 01       	movw	r24, r28
    28e6:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    28ea:	6a e0       	ldi	r22, 0x0A	; 10
    28ec:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    28f0:	ec 01       	movw	r28, r24
    28f2:	6a ec       	ldi	r22, 0xCA	; 202
    28f4:	74 e0       	ldi	r23, 0x04	; 4
    28f6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    28fa:	64 e6       	ldi	r22, 0x64	; 100
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	ce 01       	movw	r24, r28
    2900:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
    2904:	6a e0       	ldi	r22, 0x0A	; 10
    2906:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    290a:	ec 01       	movw	r28, r24
    290c:	67 ec       	ldi	r22, 0xC7	; 199
    290e:	74 e0       	ldi	r23, 0x04	; 4
    2910:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2914:	66 e0       	ldi	r22, 0x06	; 6
    2916:	ce 01       	movw	r24, r28
    2918:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	08 95       	ret

00002926 <_ZN14frt_text_queue7getcharEv>:
    2926:	0f 93       	push	r16
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	1f 92       	push	r1
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	a9 01       	movw	r20, r18
    293a:	be 01       	movw	r22, r28
    293c:	6f 5f       	subi	r22, 0xFF	; 255
    293e:	7f 4f       	sbci	r23, 0xFF	; 255
    2940:	fc 01       	movw	r30, r24
    2942:	80 85       	ldd	r24, Z+8	; 0x08
    2944:	91 85       	ldd	r25, Z+9	; 0x09
    2946:	0e 94 4e 0b 	call	0x169c	; 0x169c <xQueueGenericReceive>
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	19 f4       	brne	.+6      	; 0x2954 <_ZN14frt_text_queue7getcharEv+0x2e>
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <_ZN14frt_text_queue7getcharEv+0x32>
    2954:	8f ef       	ldi	r24, 0xFF	; 255
    2956:	9f ef       	ldi	r25, 0xFF	; 255
    2958:	0f 90       	pop	r0
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <_ZN14frt_text_queue14check_for_charEv>:
    2962:	fc 01       	movw	r30, r24
    2964:	80 85       	ldd	r24, Z+8	; 0x08
    2966:	91 85       	ldd	r25, Z+9	; 0x09
    2968:	0e 94 12 0c 	call	0x1824	; 0x1824 <uxQueueMessagesWaiting>
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	81 11       	cpse	r24, r1
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <_ZN14frt_text_queue14check_for_charEv+0x12>
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	89 2f       	mov	r24, r25
    2976:	08 95       	ret

00002978 <_ZN14frt_text_queue7putcharEc>:
    2978:	0f 93       	push	r16
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	1f 92       	push	r1
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	69 83       	std	Y+1, r22	; 0x01
    2986:	fc 01       	movw	r30, r24
    2988:	22 85       	ldd	r18, Z+10	; 0x0a
    298a:	33 85       	ldd	r19, Z+11	; 0x0b
    298c:	44 85       	ldd	r20, Z+12	; 0x0c
    298e:	55 85       	ldd	r21, Z+13	; 0x0d
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	be 01       	movw	r22, r28
    2994:	6f 5f       	subi	r22, 0xFF	; 255
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	80 85       	ldd	r24, Z+8	; 0x08
    299a:	91 85       	ldd	r25, Z+9	; 0x09
    299c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <xQueueGenericSend>
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	81 11       	cpse	r24, r1
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <_ZN14frt_text_queue7putcharEc+0x30>
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	89 2f       	mov	r24, r25
    29aa:	0f 90       	pop	r0
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <_ZN14frt_text_queueC1EjP8emstreamm>:
    29b4:	8f 92       	push	r8
    29b6:	9f 92       	push	r9
    29b8:	bf 92       	push	r11
    29ba:	cf 92       	push	r12
    29bc:	df 92       	push	r13
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	ec 01       	movw	r28, r24
    29cc:	b6 2e       	mov	r11, r22
    29ce:	4a 01       	movw	r8, r20
    29d0:	68 01       	movw	r12, r16
    29d2:	79 01       	movw	r14, r18
    29d4:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZN8emstreamC1Ev>
    29d8:	87 e4       	ldi	r24, 0x47	; 71
    29da:	90 e2       	ldi	r25, 0x20	; 32
    29dc:	88 83       	st	Y, r24
    29de:	99 83       	std	Y+1, r25	; 0x01
    29e0:	8e 86       	std	Y+14, r8	; 0x0e
    29e2:	9f 86       	std	Y+15, r9	; 0x0f
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	8b 2d       	mov	r24, r11
    29ea:	0e 94 85 0a 	call	0x150a	; 0x150a <xQueueGenericCreate>
    29ee:	88 87       	std	Y+8, r24	; 0x08
    29f0:	99 87       	std	Y+9, r25	; 0x09
    29f2:	ca 86       	std	Y+10, r12	; 0x0a
    29f4:	db 86       	std	Y+11, r13	; 0x0b
    29f6:	ec 86       	std	Y+12, r14	; 0x0c
    29f8:	fd 86       	std	Y+13, r15	; 0x0d
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	df 90       	pop	r13
    2a08:	cf 90       	pop	r12
    2a0a:	bf 90       	pop	r11
    2a0c:	9f 90       	pop	r9
    2a0e:	8f 90       	pop	r8
    2a10:	08 95       	ret

00002a12 <_ZN10time_stamp12get_microsecEv>:
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	ec 01       	movw	r28, r24
    2a20:	68 81       	ld	r22, Y
    2a22:	79 81       	ldd	r23, Y+1	; 0x01
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	9b 81       	ldd	r25, Y+3	; 0x03
    2a28:	0f 2e       	mov	r0, r31
    2a2a:	f8 ee       	ldi	r31, 0xE8	; 232
    2a2c:	cf 2e       	mov	r12, r31
    2a2e:	f3 e0       	ldi	r31, 0x03	; 3
    2a30:	df 2e       	mov	r13, r31
    2a32:	e1 2c       	mov	r14, r1
    2a34:	f1 2c       	mov	r15, r1
    2a36:	f0 2d       	mov	r31, r0
    2a38:	a7 01       	movw	r20, r14
    2a3a:	96 01       	movw	r18, r12
    2a3c:	0e 94 34 1c 	call	0x3868	; 0x3868 <__udivmodsi4>
    2a40:	9b 01       	movw	r18, r22
    2a42:	ac 01       	movw	r20, r24
    2a44:	60 e4       	ldi	r22, 0x40	; 64
    2a46:	72 e4       	ldi	r23, 0x42	; 66
    2a48:	8f e0       	ldi	r24, 0x0F	; 15
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 24 1c 	call	0x3848	; 0x3848 <__mulsi3>
    2a50:	a7 01       	movw	r20, r14
    2a52:	96 01       	movw	r18, r12
    2a54:	0e 94 34 1c 	call	0x3868	; 0x3868 <__udivmodsi4>
    2a58:	69 01       	movw	r12, r18
    2a5a:	7a 01       	movw	r14, r20
    2a5c:	ac 81       	ldd	r26, Y+4	; 0x04
    2a5e:	bd 81       	ldd	r27, Y+5	; 0x05
    2a60:	20 e4       	ldi	r18, 0x40	; 64
    2a62:	32 e4       	ldi	r19, 0x42	; 66
    2a64:	4f e0       	ldi	r20, 0x0F	; 15
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__muluhisi3>
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	38 e4       	ldi	r19, 0x48	; 72
    2a70:	48 ee       	ldi	r20, 0xE8	; 232
    2a72:	51 e0       	ldi	r21, 0x01	; 1
    2a74:	0e 94 34 1c 	call	0x3868	; 0x3868 <__udivmodsi4>
    2a78:	c7 01       	movw	r24, r14
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	62 0f       	add	r22, r18
    2a7e:	73 1f       	adc	r23, r19
    2a80:	84 1f       	adc	r24, r20
    2a82:	95 1f       	adc	r25, r21
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
    2a90:	08 95       	ret

00002a92 <_ZlsR8emstreamR10time_stamp>:
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	2f 97       	sbiw	r28, 0x0f	; 15
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	6c 01       	movw	r12, r24
    2aae:	8b 01       	movw	r16, r22
    2ab0:	db 01       	movw	r26, r22
    2ab2:	6d 91       	ld	r22, X+
    2ab4:	7d 91       	ld	r23, X+
    2ab6:	8d 91       	ld	r24, X+
    2ab8:	9c 91       	ld	r25, X
    2aba:	28 ee       	ldi	r18, 0xE8	; 232
    2abc:	33 e0       	ldi	r19, 0x03	; 3
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 34 1c 	call	0x3868	; 0x3868 <__udivmodsi4>
    2ac6:	ba 01       	movw	r22, r20
    2ac8:	a9 01       	movw	r20, r18
    2aca:	c6 01       	movw	r24, r12
    2acc:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN8emstreamlsEm>
    2ad0:	d6 01       	movw	r26, r12
    2ad2:	ed 91       	ld	r30, X+
    2ad4:	fc 91       	ld	r31, X
    2ad6:	02 80       	ldd	r0, Z+2	; 0x02
    2ad8:	f3 81       	ldd	r31, Z+3	; 0x03
    2ada:	e0 2d       	mov	r30, r0
    2adc:	6e e2       	ldi	r22, 0x2E	; 46
    2ade:	c6 01       	movw	r24, r12
    2ae0:	19 95       	eicall
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <_ZN10time_stamp12get_microsecEv>
    2ae8:	8e 01       	movw	r16, r28
    2aea:	09 5f       	subi	r16, 0xF9	; 249
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	fe 01       	movw	r30, r28
    2af0:	31 96       	adiw	r30, 0x01	; 1
    2af2:	7f 01       	movw	r14, r30
    2af4:	2a e0       	ldi	r18, 0x0A	; 10
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__divmodsi4>
    2b00:	e6 2f       	mov	r30, r22
    2b02:	28 87       	std	Y+8, r18	; 0x08
    2b04:	39 87       	std	Y+9, r19	; 0x09
    2b06:	4a 87       	std	Y+10, r20	; 0x0a
    2b08:	5b 87       	std	Y+11, r21	; 0x0b
    2b0a:	68 85       	ldd	r22, Y+8	; 0x08
    2b0c:	79 85       	ldd	r23, Y+9	; 0x09
    2b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b12:	20 e3       	ldi	r18, 0x30	; 48
    2b14:	2e 0f       	add	r18, r30
    2b16:	d8 01       	movw	r26, r16
    2b18:	2e 93       	st	-X, r18
    2b1a:	8d 01       	movw	r16, r26
    2b1c:	ae 15       	cp	r26, r14
    2b1e:	bf 05       	cpc	r27, r15
    2b20:	49 f7       	brne	.-46     	; 0x2af4 <_ZlsR8emstreamR10time_stamp+0x62>
    2b22:	1f 82       	std	Y+7, r1	; 0x07
    2b24:	be 01       	movw	r22, r28
    2b26:	6f 5f       	subi	r22, 0xFF	; 255
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2a:	c6 01       	movw	r24, r12
    2b2c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2b30:	c6 01       	movw	r24, r12
    2b32:	2f 96       	adiw	r28, 0x0f	; 15
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	ef 90       	pop	r14
    2b44:	df 90       	pop	r13
    2b46:	cf 90       	pop	r12
    2b48:	08 95       	ret

00002b4a <_ZN10time_stamp10set_to_nowEv>:
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	ec 01       	movw	r28, r24
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	0f 92       	push	r0
    2b56:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2b5a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2b5e:	8c 83       	std	Y+4, r24	; 0x04
    2b60:	9d 83       	std	Y+5, r25	; 0x05
    2b62:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xTaskGetTickCount>
    2b66:	68 83       	st	Y, r22
    2b68:	79 83       	std	Y+1, r23	; 0x01
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
    2b6c:	9b 83       	std	Y+3, r25	; 0x03
    2b6e:	0f 90       	pop	r0
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	ce 01       	movw	r24, r28
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <_Z15hex_dump_memoryPhS_P8emstreambh>:
    2b7a:	5f 92       	push	r5
    2b7c:	6f 92       	push	r6
    2b7e:	7f 92       	push	r7
    2b80:	8f 92       	push	r8
    2b82:	9f 92       	push	r9
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	5c 01       	movw	r10, r24
    2b9a:	4b 01       	movw	r8, r22
    2b9c:	7a 01       	movw	r14, r20
    2b9e:	12 2f       	mov	r17, r18
    2ba0:	70 2e       	mov	r7, r16
    2ba2:	63 e0       	ldi	r22, 0x03	; 3
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2baa:	a8 14       	cp	r10, r8
    2bac:	b9 04       	cpc	r11, r9
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
    2bb0:	7d c0       	rjmp	.+250    	; 0x2cac <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2bb2:	65 01       	movw	r12, r10
    2bb4:	84 e1       	ldi	r24, 0x14	; 20
    2bb6:	c8 0e       	add	r12, r24
    2bb8:	d1 1c       	adc	r13, r1
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	6a 2c       	mov	r6, r10
    2bbe:	5b 2c       	mov	r5, r11
    2bc0:	b5 01       	movw	r22, r10
    2bc2:	c7 01       	movw	r24, r14
    2bc4:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <_ZN8emstreamlsEj>
    2bc8:	6a e0       	ldi	r22, 0x0A	; 10
    2bca:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2bce:	69 e4       	ldi	r22, 0x49	; 73
    2bd0:	75 e0       	ldi	r23, 0x05	; 5
    2bd2:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2bd6:	11 23       	and	r17, r17
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <_Z15hex_dump_memoryPhS_P8emstreambh+0x62>
    2bda:	6d c0       	rjmp	.+218    	; 0x2cb6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2bdc:	00 23       	and	r16, r16
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <_Z15hex_dump_memoryPhS_P8emstreambh+0x68>
    2be0:	6a c0       	rjmp	.+212    	; 0x2cb6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2be2:	6a e0       	ldi	r22, 0x0A	; 10
    2be4:	c7 01       	movw	r24, r14
    2be6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2bea:	64 e4       	ldi	r22, 0x44	; 68
    2bec:	75 e0       	ldi	r23, 0x05	; 5
    2bee:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2bf2:	61 c0       	rjmp	.+194    	; 0x2cb6 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13c>
    2bf4:	11 23       	and	r17, r17
    2bf6:	71 f0       	breq	.+28     	; 0x2c14 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2bf8:	01 11       	cpse	r16, r1
    2bfa:	0c c0       	rjmp	.+24     	; 0x2c14 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2bfc:	88 81       	ld	r24, Y
    2bfe:	87 15       	cp	r24, r7
    2c00:	49 f0       	breq	.+18     	; 0x2c14 <_Z15hex_dump_memoryPhS_P8emstreambh+0x9a>
    2c02:	6a e0       	ldi	r22, 0x0A	; 10
    2c04:	c7 01       	movw	r24, r14
    2c06:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2c0a:	6f e3       	ldi	r22, 0x3F	; 63
    2c0c:	75 e0       	ldi	r23, 0x05	; 5
    2c0e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2c12:	01 e0       	ldi	r16, 0x01	; 1
    2c14:	69 91       	ld	r22, Y+
    2c16:	c7 01       	movw	r24, r14
    2c18:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	ed 91       	ld	r30, X+
    2c20:	fc 91       	ld	r31, X
    2c22:	02 80       	ldd	r0, Z+2	; 0x02
    2c24:	f3 81       	ldd	r31, Z+3	; 0x03
    2c26:	e0 2d       	mov	r30, r0
    2c28:	60 e2       	ldi	r22, 0x20	; 32
    2c2a:	19 95       	eicall
    2c2c:	cc 16       	cp	r12, r28
    2c2e:	dd 06       	cpc	r13, r29
    2c30:	09 f7       	brne	.-62     	; 0x2bf4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
    2c32:	11 23       	and	r17, r17
    2c34:	89 f0       	breq	.+34     	; 0x2c58 <_Z15hex_dump_memoryPhS_P8emstreambh+0xde>
    2c36:	6a e0       	ldi	r22, 0x0A	; 10
    2c38:	c7 01       	movw	r24, r14
    2c3a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2c3e:	ec 01       	movw	r28, r24
    2c40:	69 e3       	ldi	r22, 0x39	; 57
    2c42:	75 e0       	ldi	r23, 0x05	; 5
    2c44:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2c48:	e8 81       	ld	r30, Y
    2c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c4c:	02 80       	ldd	r0, Z+2	; 0x02
    2c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c50:	e0 2d       	mov	r30, r0
    2c52:	60 e2       	ldi	r22, 0x20	; 32
    2c54:	ce 01       	movw	r24, r28
    2c56:	19 95       	eicall
    2c58:	c6 2d       	mov	r28, r6
    2c5a:	d5 2d       	mov	r29, r5
    2c5c:	69 91       	ld	r22, Y+
    2c5e:	80 ee       	ldi	r24, 0xE0	; 224
    2c60:	86 0f       	add	r24, r22
    2c62:	8f 35       	cpi	r24, 0x5F	; 95
    2c64:	48 f4       	brcc	.+18     	; 0x2c78 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfe>
    2c66:	d7 01       	movw	r26, r14
    2c68:	ed 91       	ld	r30, X+
    2c6a:	fc 91       	ld	r31, X
    2c6c:	02 80       	ldd	r0, Z+2	; 0x02
    2c6e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c70:	e0 2d       	mov	r30, r0
    2c72:	c7 01       	movw	r24, r14
    2c74:	19 95       	eicall
    2c76:	09 c0       	rjmp	.+18     	; 0x2c8a <_Z15hex_dump_memoryPhS_P8emstreambh+0x110>
    2c78:	d7 01       	movw	r26, r14
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	02 80       	ldd	r0, Z+2	; 0x02
    2c80:	f3 81       	ldd	r31, Z+3	; 0x03
    2c82:	e0 2d       	mov	r30, r0
    2c84:	6e e2       	ldi	r22, 0x2E	; 46
    2c86:	c7 01       	movw	r24, r14
    2c88:	19 95       	eicall
    2c8a:	cc 16       	cp	r12, r28
    2c8c:	dd 06       	cpc	r13, r29
    2c8e:	31 f7       	brne	.-52     	; 0x2c5c <_Z15hex_dump_memoryPhS_P8emstreambh+0xe2>
    2c90:	b4 e1       	ldi	r27, 0x14	; 20
    2c92:	ab 0e       	add	r10, r27
    2c94:	b1 1c       	adc	r11, r1
    2c96:	66 e0       	ldi	r22, 0x06	; 6
    2c98:	c7 01       	movw	r24, r14
    2c9a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2c9e:	84 e1       	ldi	r24, 0x14	; 20
    2ca0:	c8 0e       	add	r12, r24
    2ca2:	d1 1c       	adc	r13, r1
    2ca4:	a8 14       	cp	r10, r8
    2ca6:	b9 04       	cpc	r11, r9
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <_Z15hex_dump_memoryPhS_P8emstreambh+0x132>
    2caa:	88 cf       	rjmp	.-240    	; 0x2bbc <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	c7 01       	movw	r24, r14
    2cb0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <_Z15hex_dump_memoryPhS_P8emstreambh+0x142>
    2cb6:	c6 2d       	mov	r28, r6
    2cb8:	d5 2d       	mov	r29, r5
    2cba:	9c cf       	rjmp	.-200    	; 0x2bf4 <_Z15hex_dump_memoryPhS_P8emstreambh+0x7a>
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	7f 90       	pop	r7
    2cd6:	6f 90       	pop	r6
    2cd8:	5f 90       	pop	r5
    2cda:	08 95       	ret

00002cdc <_Znwj>:
    2cdc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    2ce0:	08 95       	ret

00002ce2 <_Znaj>:
    2ce2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <pvPortMalloc>
    2ce6:	08 95       	ret

00002ce8 <__cxa_pure_virtual>:
    2ce8:	08 95       	ret

00002cea <_ZN7base232C1EjP12USART_struct>:
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	fc 01       	movw	r30, r24
    2cf0:	da 01       	movw	r26, r20
    2cf2:	40 3a       	cpi	r20, 0xA0	; 160
    2cf4:	68 e0       	ldi	r22, 0x08	; 8
    2cf6:	56 07       	cpc	r21, r22
    2cf8:	49 f4       	brne	.+18     	; 0x2d0c <_ZN7base232C1EjP12USART_struct+0x22>
    2cfa:	80 e4       	ldi	r24, 0x40	; 64
    2cfc:	96 e0       	ldi	r25, 0x06	; 6
    2cfe:	82 83       	std	Z+2, r24	; 0x02
    2d00:	93 83       	std	Z+3, r25	; 0x03
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	84 83       	std	Z+4, r24	; 0x04
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	85 83       	std	Z+5, r24	; 0x05
    2d0a:	32 c0       	rjmp	.+100    	; 0x2d70 <_ZN7base232C1EjP12USART_struct+0x86>
    2d0c:	40 3b       	cpi	r20, 0xB0	; 176
    2d0e:	78 e0       	ldi	r23, 0x08	; 8
    2d10:	57 07       	cpc	r21, r23
    2d12:	49 f4       	brne	.+18     	; 0x2d26 <_ZN7base232C1EjP12USART_struct+0x3c>
    2d14:	80 e4       	ldi	r24, 0x40	; 64
    2d16:	96 e0       	ldi	r25, 0x06	; 6
    2d18:	82 83       	std	Z+2, r24	; 0x02
    2d1a:	93 83       	std	Z+3, r25	; 0x03
    2d1c:	86 e0       	ldi	r24, 0x06	; 6
    2d1e:	84 83       	std	Z+4, r24	; 0x04
    2d20:	87 e0       	ldi	r24, 0x07	; 7
    2d22:	85 83       	std	Z+5, r24	; 0x05
    2d24:	25 c0       	rjmp	.+74     	; 0x2d70 <_ZN7base232C1EjP12USART_struct+0x86>
    2d26:	40 3a       	cpi	r20, 0xA0	; 160
    2d28:	89 e0       	ldi	r24, 0x09	; 9
    2d2a:	58 07       	cpc	r21, r24
    2d2c:	49 f4       	brne	.+18     	; 0x2d40 <_ZN7base232C1EjP12USART_struct+0x56>
    2d2e:	80 e6       	ldi	r24, 0x60	; 96
    2d30:	96 e0       	ldi	r25, 0x06	; 6
    2d32:	82 83       	std	Z+2, r24	; 0x02
    2d34:	93 83       	std	Z+3, r25	; 0x03
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	84 83       	std	Z+4, r24	; 0x04
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	85 83       	std	Z+5, r24	; 0x05
    2d3e:	18 c0       	rjmp	.+48     	; 0x2d70 <_ZN7base232C1EjP12USART_struct+0x86>
    2d40:	40 3b       	cpi	r20, 0xB0	; 176
    2d42:	69 e0       	ldi	r22, 0x09	; 9
    2d44:	56 07       	cpc	r21, r22
    2d46:	49 f4       	brne	.+18     	; 0x2d5a <_ZN7base232C1EjP12USART_struct+0x70>
    2d48:	80 e6       	ldi	r24, 0x60	; 96
    2d4a:	96 e0       	ldi	r25, 0x06	; 6
    2d4c:	82 83       	std	Z+2, r24	; 0x02
    2d4e:	93 83       	std	Z+3, r25	; 0x03
    2d50:	86 e0       	ldi	r24, 0x06	; 6
    2d52:	84 83       	std	Z+4, r24	; 0x04
    2d54:	87 e0       	ldi	r24, 0x07	; 7
    2d56:	85 83       	std	Z+5, r24	; 0x05
    2d58:	0b c0       	rjmp	.+22     	; 0x2d70 <_ZN7base232C1EjP12USART_struct+0x86>
    2d5a:	40 3a       	cpi	r20, 0xA0	; 160
    2d5c:	5a 40       	sbci	r21, 0x0A	; 10
    2d5e:	41 f4       	brne	.+16     	; 0x2d70 <_ZN7base232C1EjP12USART_struct+0x86>
    2d60:	80 e8       	ldi	r24, 0x80	; 128
    2d62:	96 e0       	ldi	r25, 0x06	; 6
    2d64:	82 83       	std	Z+2, r24	; 0x02
    2d66:	93 83       	std	Z+3, r25	; 0x03
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	84 83       	std	Z+4, r24	; 0x04
    2d6c:	83 e0       	ldi	r24, 0x03	; 3
    2d6e:	85 83       	std	Z+5, r24	; 0x05
    2d70:	a6 83       	std	Z+6, r26	; 0x06
    2d72:	b7 83       	std	Z+7, r27	; 0x07
    2d74:	cd 01       	movw	r24, r26
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	80 87       	std	Z+8, r24	; 0x08
    2d7a:	91 87       	std	Z+9, r25	; 0x09
    2d7c:	03 96       	adiw	r24, 0x03	; 3
    2d7e:	82 87       	std	Z+10, r24	; 0x0a
    2d80:	93 87       	std	Z+11, r25	; 0x0b
    2d82:	25 81       	ldd	r18, Z+5	; 0x05
    2d84:	c2 81       	ldd	r28, Z+2	; 0x02
    2d86:	d3 81       	ldd	r29, Z+3	; 0x03
    2d88:	4c 81       	ldd	r20, Y+4	; 0x04
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	bc 01       	movw	r22, r24
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <_ZN7base232C1EjP12USART_struct+0xac>
    2d92:	66 0f       	add	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	2a 95       	dec	r18
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <_ZN7base232C1EjP12USART_struct+0xa8>
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	24 2b       	or	r18, r20
    2d9e:	2c 83       	std	Y+4, r18	; 0x04
    2da0:	25 81       	ldd	r18, Z+5	; 0x05
    2da2:	c2 81       	ldd	r28, Z+2	; 0x02
    2da4:	d3 81       	ldd	r29, Z+3	; 0x03
    2da6:	48 81       	ld	r20, Y
    2da8:	bc 01       	movw	r22, r24
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <_ZN7base232C1EjP12USART_struct+0xc6>
    2dac:	66 0f       	add	r22, r22
    2dae:	77 1f       	adc	r23, r23
    2db0:	2a 95       	dec	r18
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <_ZN7base232C1EjP12USART_struct+0xc2>
    2db4:	9b 01       	movw	r18, r22
    2db6:	24 2b       	or	r18, r20
    2db8:	28 83       	st	Y, r18
    2dba:	34 81       	ldd	r19, Z+4	; 0x04
    2dbc:	c2 81       	ldd	r28, Z+2	; 0x02
    2dbe:	d3 81       	ldd	r29, Z+3	; 0x03
    2dc0:	28 81       	ld	r18, Y
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <_ZN7base232C1EjP12USART_struct+0xde>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	3a 95       	dec	r19
    2dca:	e2 f7       	brpl	.-8      	; 0x2dc4 <_ZN7base232C1EjP12USART_struct+0xda>
    2dcc:	80 95       	com	r24
    2dce:	90 95       	com	r25
    2dd0:	82 23       	and	r24, r18
    2dd2:	88 83       	st	Y, r24
    2dd4:	80 e1       	ldi	r24, 0x10	; 16
    2dd6:	13 96       	adiw	r26, 0x03	; 3
    2dd8:	8c 93       	st	X, r24
    2dda:	13 97       	sbiw	r26, 0x03	; 3
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	15 96       	adiw	r26, 0x05	; 5
    2de0:	8c 93       	st	X, r24
    2de2:	15 97       	sbiw	r26, 0x05	; 5
    2de4:	80 ef       	ldi	r24, 0xF0	; 240
    2de6:	17 96       	adiw	r26, 0x07	; 7
    2de8:	8c 93       	st	X, r24
    2dea:	17 97       	sbiw	r26, 0x07	; 7
    2dec:	81 e2       	ldi	r24, 0x21	; 33
    2dee:	16 96       	adiw	r26, 0x06	; 6
    2df0:	8c 93       	st	X, r24
    2df2:	16 97       	sbiw	r26, 0x06	; 6
    2df4:	88 e1       	ldi	r24, 0x18	; 24
    2df6:	14 96       	adiw	r26, 0x04	; 4
    2df8:	8c 93       	st	X, r24
    2dfa:	80 e8       	ldi	r24, 0x80	; 128
    2dfc:	85 87       	std	Z+13, r24	; 0x0d
    2dfe:	80 e4       	ldi	r24, 0x40	; 64
    2e00:	86 87       	std	Z+14, r24	; 0x0e
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	84 87       	std	Z+12, r24	; 0x0c
    2e06:	06 80       	ldd	r0, Z+6	; 0x06
    2e08:	f7 81       	ldd	r31, Z+7	; 0x07
    2e0a:	e0 2d       	mov	r30, r0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 81       	ld	r24, Z
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	08 95       	ret

00002e16 <_ZN8emstream13ready_to_sendEv>:
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	08 95       	ret

00002e1a <_ZN8emstream7getcharEv>:
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	08 95       	ret

00002e20 <_ZN8emstream14check_for_charEv>:
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	08 95       	ret

00002e24 <_ZN8emstream12transmit_nowEv>:
    2e24:	08 95       	ret

00002e26 <_ZN8emstream12clear_screenEv>:
    2e26:	08 95       	ret

00002e28 <_ZN8emstreamC1Ev>:
    2e28:	fc 01       	movw	r30, r24
    2e2a:	87 e5       	ldi	r24, 0x57	; 87
    2e2c:	90 e2       	ldi	r25, 0x20	; 32
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	8a e0       	ldi	r24, 0x0A	; 10
    2e34:	82 83       	std	Z+2, r24	; 0x02
    2e36:	13 82       	std	Z+3, r1	; 0x03
    2e38:	83 e0       	ldi	r24, 0x03	; 3
    2e3a:	85 83       	std	Z+5, r24	; 0x05
    2e3c:	14 82       	std	Z+4, r1	; 0x04
    2e3e:	16 82       	std	Z+6, r1	; 0x06
    2e40:	17 82       	std	Z+7, r1	; 0x07
    2e42:	08 95       	ret

00002e44 <_ZN8emstream4putsEPKc>:
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	8c 01       	movw	r16, r24
    2e4e:	fb 01       	movw	r30, r22
    2e50:	dc 01       	movw	r26, r24
    2e52:	14 96       	adiw	r26, 0x04	; 4
    2e54:	8c 91       	ld	r24, X
    2e56:	81 11       	cpse	r24, r1
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <_ZN8emstream4putsEPKc+0x1e>
    2e5a:	60 81       	ld	r22, Z
    2e5c:	61 11       	cpse	r22, r1
    2e5e:	17 c0       	rjmp	.+46     	; 0x2e8e <_ZN8emstream4putsEPKc+0x4a>
    2e60:	23 c0       	rjmp	.+70     	; 0x2ea8 <_ZN8emstream4putsEPKc+0x64>
    2e62:	d8 01       	movw	r26, r16
    2e64:	14 96       	adiw	r26, 0x04	; 4
    2e66:	1c 92       	st	X, r1
    2e68:	eb 01       	movw	r28, r22
    2e6a:	21 96       	adiw	r28, 0x01	; 1
    2e6c:	64 91       	lpm	r22, Z
    2e6e:	66 23       	and	r22, r22
    2e70:	d9 f0       	breq	.+54     	; 0x2ea8 <_ZN8emstream4putsEPKc+0x64>
    2e72:	d8 01       	movw	r26, r16
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	02 80       	ldd	r0, Z+2	; 0x02
    2e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7c:	e0 2d       	mov	r30, r0
    2e7e:	c8 01       	movw	r24, r16
    2e80:	19 95       	eicall
    2e82:	fe 01       	movw	r30, r28
    2e84:	64 91       	lpm	r22, Z
    2e86:	21 96       	adiw	r28, 0x01	; 1
    2e88:	61 11       	cpse	r22, r1
    2e8a:	f3 cf       	rjmp	.-26     	; 0x2e72 <_ZN8emstream4putsEPKc+0x2e>
    2e8c:	0d c0       	rjmp	.+26     	; 0x2ea8 <_ZN8emstream4putsEPKc+0x64>
    2e8e:	ef 01       	movw	r28, r30
    2e90:	21 96       	adiw	r28, 0x01	; 1
    2e92:	d8 01       	movw	r26, r16
    2e94:	ed 91       	ld	r30, X+
    2e96:	fc 91       	ld	r31, X
    2e98:	02 80       	ldd	r0, Z+2	; 0x02
    2e9a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e9c:	e0 2d       	mov	r30, r0
    2e9e:	c8 01       	movw	r24, r16
    2ea0:	19 95       	eicall
    2ea2:	69 91       	ld	r22, Y+
    2ea4:	61 11       	cpse	r22, r1
    2ea6:	f5 cf       	rjmp	.-22     	; 0x2e92 <_ZN8emstream4putsEPKc+0x4e>
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	08 95       	ret

00002eb2 <_ZN8emstreamlsE15ser_manipulator>:
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	ec 01       	movw	r28, r24
    2eb8:	86 2f       	mov	r24, r22
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	8b 30       	cpi	r24, 0x0B	; 11
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	d8 f5       	brcc	.+118    	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	88 27       	eor	r24, r24
    2ec6:	e2 50       	subi	r30, 0x02	; 2
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	8f 4f       	sbci	r24, 0xFF	; 255
    2ecc:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__tablejump2__>
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
    2ed4:	31 c0       	rjmp	.+98     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ed6:	88 e0       	ldi	r24, 0x08	; 8
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	2e c0       	rjmp	.+92     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2edc:	8a e0       	ldi	r24, 0x0A	; 10
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	2b c0       	rjmp	.+86     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ee2:	80 e1       	ldi	r24, 0x10	; 16
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
    2ee6:	28 c0       	rjmp	.+80     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	8b 83       	std	Y+3, r24	; 0x03
    2eec:	25 c0       	rjmp	.+74     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2eee:	1b 82       	std	Y+3, r1	; 0x03
    2ef0:	23 c0       	rjmp	.+70     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2ef2:	e8 81       	ld	r30, Y
    2ef4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef6:	02 80       	ldd	r0, Z+2	; 0x02
    2ef8:	f3 81       	ldd	r31, Z+3	; 0x03
    2efa:	e0 2d       	mov	r30, r0
    2efc:	6d e0       	ldi	r22, 0x0D	; 13
    2efe:	ce 01       	movw	r24, r28
    2f00:	19 95       	eicall
    2f02:	e8 81       	ld	r30, Y
    2f04:	f9 81       	ldd	r31, Y+1	; 0x01
    2f06:	02 80       	ldd	r0, Z+2	; 0x02
    2f08:	f3 81       	ldd	r31, Z+3	; 0x03
    2f0a:	e0 2d       	mov	r30, r0
    2f0c:	6a e0       	ldi	r22, 0x0A	; 10
    2f0e:	ce 01       	movw	r24, r28
    2f10:	19 95       	eicall
    2f12:	12 c0       	rjmp	.+36     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2f14:	e8 81       	ld	r30, Y
    2f16:	f9 81       	ldd	r31, Y+1	; 0x01
    2f18:	02 84       	ldd	r0, Z+10	; 0x0a
    2f1a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f1c:	e0 2d       	mov	r30, r0
    2f1e:	ce 01       	movw	r24, r28
    2f20:	19 95       	eicall
    2f22:	0a c0       	rjmp	.+20     	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2f24:	e8 81       	ld	r30, Y
    2f26:	f9 81       	ldd	r31, Y+1	; 0x01
    2f28:	00 84       	ldd	r0, Z+8	; 0x08
    2f2a:	f1 85       	ldd	r31, Z+9	; 0x09
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	ce 01       	movw	r24, r28
    2f30:	19 95       	eicall
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <_ZN8emstreamlsE15ser_manipulator+0x86>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	8c 83       	std	Y+4, r24	; 0x04
    2f38:	ce 01       	movw	r24, r28
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <_ZN8emstreamlsEj>:
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	61 97       	sbiw	r28, 0x11	; 17
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	8c 01       	movw	r16, r24
    2f56:	f6 2e       	mov	r15, r22
    2f58:	97 2f       	mov	r25, r23
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	42 81       	ldd	r20, Z+2	; 0x02
    2f5e:	40 31       	cpi	r20, 0x10	; 16
    2f60:	21 f0       	breq	.+8      	; 0x2f6a <_ZN8emstreamlsEj+0x2a>
    2f62:	48 30       	cpi	r20, 0x08	; 8
    2f64:	11 f0       	breq	.+4      	; 0x2f6a <_ZN8emstreamlsEj+0x2a>
    2f66:	42 30       	cpi	r20, 0x02	; 2
    2f68:	41 f4       	brne	.+16     	; 0x2f7a <_ZN8emstreamlsEj+0x3a>
    2f6a:	69 2f       	mov	r22, r25
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2f72:	6f 2d       	mov	r22, r15
    2f74:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2f78:	0d c0       	rjmp	.+26     	; 0x2f94 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	be 01       	movw	r22, r28
    2f7e:	6f 5f       	subi	r22, 0xFF	; 255
    2f80:	7f 4f       	sbci	r23, 0xFF	; 255
    2f82:	8f 2d       	mov	r24, r15
    2f84:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <utoa>
    2f88:	be 01       	movw	r22, r28
    2f8a:	6f 5f       	subi	r22, 0xFF	; 255
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	c8 01       	movw	r24, r16
    2f90:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    2f94:	c8 01       	movw	r24, r16
    2f96:	61 96       	adiw	r28, 0x11	; 17
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	08 95       	ret

00002fa8 <_ZN8emstreamlsEm>:
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	a1 97       	sbiw	r28, 0x21	; 33
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	8c 01       	movw	r16, r24
    2fc2:	d4 2e       	mov	r13, r20
    2fc4:	e5 2e       	mov	r14, r21
    2fc6:	f6 2e       	mov	r15, r22
    2fc8:	97 2f       	mov	r25, r23
    2fca:	f8 01       	movw	r30, r16
    2fcc:	22 81       	ldd	r18, Z+2	; 0x02
    2fce:	20 31       	cpi	r18, 0x10	; 16
    2fd0:	21 f0       	breq	.+8      	; 0x2fda <_ZN8emstreamlsEm+0x32>
    2fd2:	28 30       	cpi	r18, 0x08	; 8
    2fd4:	11 f0       	breq	.+4      	; 0x2fda <_ZN8emstreamlsEm+0x32>
    2fd6:	22 30       	cpi	r18, 0x02	; 2
    2fd8:	71 f4       	brne	.+28     	; 0x2ff6 <_ZN8emstreamlsEm+0x4e>
    2fda:	69 2f       	mov	r22, r25
    2fdc:	c8 01       	movw	r24, r16
    2fde:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2fe2:	6f 2d       	mov	r22, r15
    2fe4:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2fe8:	6e 2d       	mov	r22, r14
    2fea:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2fee:	6d 2d       	mov	r22, r13
    2ff0:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN8emstreamlsEh>
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	ae 01       	movw	r20, r28
    2ffa:	4f 5f       	subi	r20, 0xFF	; 255
    2ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffe:	6d 2d       	mov	r22, r13
    3000:	7e 2d       	mov	r23, r14
    3002:	8f 2d       	mov	r24, r15
    3004:	0e 94 b7 1c 	call	0x396e	; 0x396e <ultoa>
    3008:	be 01       	movw	r22, r28
    300a:	6f 5f       	subi	r22, 0xFF	; 255
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	c8 01       	movw	r24, r16
    3010:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    3014:	c8 01       	movw	r24, r16
    3016:	a1 96       	adiw	r28, 0x21	; 33
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	ff 90       	pop	r15
    3026:	ef 90       	pop	r14
    3028:	df 90       	pop	r13
    302a:	08 95       	ret

0000302c <_ZN8emstreamlsEh>:
    302c:	cf 92       	push	r12
    302e:	df 92       	push	r13
    3030:	ef 92       	push	r14
    3032:	ff 92       	push	r15
    3034:	0f 93       	push	r16
    3036:	1f 93       	push	r17
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	29 97       	sbiw	r28, 0x09	; 9
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	8c 01       	movw	r16, r24
    3048:	e6 2e       	mov	r14, r22
    304a:	dc 01       	movw	r26, r24
    304c:	13 96       	adiw	r26, 0x03	; 3
    304e:	8c 91       	ld	r24, X
    3050:	13 97       	sbiw	r26, 0x03	; 3
    3052:	88 23       	and	r24, r24
    3054:	41 f0       	breq	.+16     	; 0x3066 <_ZN8emstreamlsEh+0x3a>
    3056:	ed 91       	ld	r30, X+
    3058:	fc 91       	ld	r31, X
    305a:	02 80       	ldd	r0, Z+2	; 0x02
    305c:	f3 81       	ldd	r31, Z+3	; 0x03
    305e:	e0 2d       	mov	r30, r0
    3060:	c8 01       	movw	r24, r16
    3062:	19 95       	eicall
    3064:	56 c0       	rjmp	.+172    	; 0x3112 <_ZN8emstreamlsEh+0xe6>
    3066:	f8 01       	movw	r30, r16
    3068:	42 81       	ldd	r20, Z+2	; 0x02
    306a:	42 30       	cpi	r20, 0x02	; 2
    306c:	19 f5       	brne	.+70     	; 0x30b4 <_ZN8emstreamlsEh+0x88>
    306e:	68 94       	set
    3070:	cc 24       	eor	r12, r12
    3072:	c3 f8       	bld	r12, 3
    3074:	d1 2c       	mov	r13, r1
    3076:	68 94       	set
    3078:	ff 24       	eor	r15, r15
    307a:	f7 f8       	bld	r15, 7
    307c:	8e 2d       	mov	r24, r14
    307e:	8f 21       	and	r24, r15
    3080:	51 f0       	breq	.+20     	; 0x3096 <_ZN8emstreamlsEh+0x6a>
    3082:	d8 01       	movw	r26, r16
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	02 80       	ldd	r0, Z+2	; 0x02
    308a:	f3 81       	ldd	r31, Z+3	; 0x03
    308c:	e0 2d       	mov	r30, r0
    308e:	61 e3       	ldi	r22, 0x31	; 49
    3090:	c8 01       	movw	r24, r16
    3092:	19 95       	eicall
    3094:	09 c0       	rjmp	.+18     	; 0x30a8 <_ZN8emstreamlsEh+0x7c>
    3096:	d8 01       	movw	r26, r16
    3098:	ed 91       	ld	r30, X+
    309a:	fc 91       	ld	r31, X
    309c:	02 80       	ldd	r0, Z+2	; 0x02
    309e:	f3 81       	ldd	r31, Z+3	; 0x03
    30a0:	e0 2d       	mov	r30, r0
    30a2:	60 e3       	ldi	r22, 0x30	; 48
    30a4:	c8 01       	movw	r24, r16
    30a6:	19 95       	eicall
    30a8:	f6 94       	lsr	r15
    30aa:	b1 e0       	ldi	r27, 0x01	; 1
    30ac:	cb 1a       	sub	r12, r27
    30ae:	d1 08       	sbc	r13, r1
    30b0:	29 f7       	brne	.-54     	; 0x307c <_ZN8emstreamlsEh+0x50>
    30b2:	2f c0       	rjmp	.+94     	; 0x3112 <_ZN8emstreamlsEh+0xe6>
    30b4:	40 31       	cpi	r20, 0x10	; 16
    30b6:	f9 f4       	brne	.+62     	; 0x30f6 <_ZN8emstreamlsEh+0xca>
    30b8:	62 95       	swap	r22
    30ba:	6f 70       	andi	r22, 0x0F	; 15
    30bc:	01 90       	ld	r0, Z+
    30be:	f0 81       	ld	r31, Z
    30c0:	e0 2d       	mov	r30, r0
    30c2:	02 80       	ldd	r0, Z+2	; 0x02
    30c4:	f3 81       	ldd	r31, Z+3	; 0x03
    30c6:	e0 2d       	mov	r30, r0
    30c8:	6a 30       	cpi	r22, 0x0A	; 10
    30ca:	10 f0       	brcs	.+4      	; 0x30d0 <_ZN8emstreamlsEh+0xa4>
    30cc:	69 5c       	subi	r22, 0xC9	; 201
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <_ZN8emstreamlsEh+0xa6>
    30d0:	60 5d       	subi	r22, 0xD0	; 208
    30d2:	c8 01       	movw	r24, r16
    30d4:	19 95       	eicall
    30d6:	6e 2d       	mov	r22, r14
    30d8:	6f 70       	andi	r22, 0x0F	; 15
    30da:	d8 01       	movw	r26, r16
    30dc:	ed 91       	ld	r30, X+
    30de:	fc 91       	ld	r31, X
    30e0:	02 80       	ldd	r0, Z+2	; 0x02
    30e2:	f3 81       	ldd	r31, Z+3	; 0x03
    30e4:	e0 2d       	mov	r30, r0
    30e6:	6a 30       	cpi	r22, 0x0A	; 10
    30e8:	10 f0       	brcs	.+4      	; 0x30ee <_ZN8emstreamlsEh+0xc2>
    30ea:	69 5c       	subi	r22, 0xC9	; 201
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <_ZN8emstreamlsEh+0xc4>
    30ee:	60 5d       	subi	r22, 0xD0	; 208
    30f0:	c8 01       	movw	r24, r16
    30f2:	19 95       	eicall
    30f4:	0e c0       	rjmp	.+28     	; 0x3112 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	be 01       	movw	r22, r28
    30fa:	6f 5f       	subi	r22, 0xFF	; 255
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	8e 2d       	mov	r24, r14
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <utoa>
    3106:	be 01       	movw	r22, r28
    3108:	6f 5f       	subi	r22, 0xFF	; 255
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	c8 01       	movw	r24, r16
    310e:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    3112:	c8 01       	movw	r24, r16
    3114:	29 96       	adiw	r28, 0x09	; 9
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	df 90       	pop	r13
    3128:	cf 90       	pop	r12
    312a:	08 95       	ret

0000312c <_ZN5rs2327putcharEc>:
    312c:	dc 01       	movw	r26, r24
    312e:	50 96       	adiw	r26, 0x10	; 16
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	51 97       	sbiw	r26, 0x11	; 17
    3136:	80 81       	ld	r24, Z
    3138:	54 96       	adiw	r26, 0x14	; 20
    313a:	4c 91       	ld	r20, X
    313c:	54 97       	sbiw	r26, 0x14	; 20
    313e:	84 23       	and	r24, r20
    3140:	29 f0       	breq	.+10     	; 0x314c <_ZN5rs2327putcharEc+0x20>
    3142:	09 c0       	rjmp	.+18     	; 0x3156 <_ZN5rs2327putcharEc+0x2a>
    3144:	21 50       	subi	r18, 0x01	; 1
    3146:	31 09       	sbc	r19, r1
    3148:	19 f4       	brne	.+6      	; 0x3150 <_ZN5rs2327putcharEc+0x24>
    314a:	12 c0       	rjmp	.+36     	; 0x3170 <_ZN5rs2327putcharEc+0x44>
    314c:	21 e2       	ldi	r18, 0x21	; 33
    314e:	3e e4       	ldi	r19, 0x4E	; 78
    3150:	90 81       	ld	r25, Z
    3152:	94 23       	and	r25, r20
    3154:	b9 f3       	breq	.-18     	; 0x3144 <_ZN5rs2327putcharEc+0x18>
    3156:	90 81       	ld	r25, Z
    3158:	56 96       	adiw	r26, 0x16	; 22
    315a:	8c 91       	ld	r24, X
    315c:	56 97       	sbiw	r26, 0x16	; 22
    315e:	89 2b       	or	r24, r25
    3160:	80 83       	st	Z, r24
    3162:	1e 96       	adiw	r26, 0x0e	; 14
    3164:	ed 91       	ld	r30, X+
    3166:	fc 91       	ld	r31, X
    3168:	1f 97       	sbiw	r26, 0x0f	; 15
    316a:	60 83       	st	Z, r22
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	08 95       	ret
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	08 95       	ret

00003174 <_ZN5rs2327getcharEv>:
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	fc 01       	movw	r30, r24
    317a:	c1 8d       	ldd	r28, Z+25	; 0x19
    317c:	d2 8d       	ldd	r29, Z+26	; 0x1a
    317e:	28 81       	ld	r18, Y
    3180:	39 81       	ldd	r19, Y+1	; 0x01
    3182:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3184:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3186:	4d 91       	ld	r20, X+
    3188:	5c 91       	ld	r21, X
    318a:	24 17       	cp	r18, r20
    318c:	35 07       	cpc	r19, r21
    318e:	e9 f3       	breq	.-6      	; 0x318a <_ZN5rs2327getcharEv+0x16>
    3190:	a7 89       	ldd	r26, Z+23	; 0x17
    3192:	b0 8d       	ldd	r27, Z+24	; 0x18
    3194:	0d 90       	ld	r0, X+
    3196:	bc 91       	ld	r27, X
    3198:	a0 2d       	mov	r26, r0
    319a:	a2 0f       	add	r26, r18
    319c:	b3 1f       	adc	r27, r19
    319e:	8c 91       	ld	r24, X
    31a0:	2f 5f       	subi	r18, 0xFF	; 255
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	28 83       	st	Y, r18
    31a6:	39 83       	std	Y+1, r19	; 0x01
    31a8:	24 36       	cpi	r18, 0x64	; 100
    31aa:	31 05       	cpc	r19, r1
    31ac:	28 f0       	brcs	.+10     	; 0x31b8 <_ZN5rs2327getcharEv+0x44>
    31ae:	01 8c       	ldd	r0, Z+25	; 0x19
    31b0:	f2 8d       	ldd	r31, Z+26	; 0x1a
    31b2:	e0 2d       	mov	r30, r0
    31b4:	10 82       	st	Z, r1
    31b6:	11 82       	std	Z+1, r1	; 0x01
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	08 95       	ret

000031c0 <_ZN5rs23214check_for_charEv>:
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	ec 01       	movw	r28, r24
    31c6:	a9 8d       	ldd	r26, Y+25	; 0x19
    31c8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    31ca:	eb 8d       	ldd	r30, Y+27	; 0x1b
    31cc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	4d 91       	ld	r20, X+
    31d2:	5c 91       	ld	r21, X
    31d4:	20 81       	ld	r18, Z
    31d6:	31 81       	ldd	r19, Z+1	; 0x01
    31d8:	42 17       	cp	r20, r18
    31da:	53 07       	cpc	r21, r19
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <_ZN5rs23214check_for_charEv+0x20>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	08 95       	ret

000031e6 <_ZN5rs23212clear_screenEv>:
    31e6:	dc 01       	movw	r26, r24
    31e8:	ed 91       	ld	r30, X+
    31ea:	fc 91       	ld	r31, X
    31ec:	02 80       	ldd	r0, Z+2	; 0x02
    31ee:	f3 81       	ldd	r31, Z+3	; 0x03
    31f0:	e0 2d       	mov	r30, r0
    31f2:	6c e0       	ldi	r22, 0x0C	; 12
    31f4:	19 95       	eicall
    31f6:	08 95       	ret

000031f8 <_ZN5rs232C1EjP12USART_struct>:
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	ec 01       	movw	r28, r24
    3206:	7b 01       	movw	r14, r22
    3208:	8a 01       	movw	r16, r20
    320a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZN8emstreamC1Ev>
    320e:	a8 01       	movw	r20, r16
    3210:	b7 01       	movw	r22, r14
    3212:	ce 01       	movw	r24, r28
    3214:	08 96       	adiw	r24, 0x08	; 8
    3216:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN7base232C1EjP12USART_struct>
    321a:	87 e6       	ldi	r24, 0x67	; 103
    321c:	90 e2       	ldi	r25, 0x20	; 32
    321e:	88 83       	st	Y, r24
    3220:	99 83       	std	Y+1, r25	; 0x01
    3222:	00 3a       	cpi	r16, 0xA0	; 160
    3224:	88 e0       	ldi	r24, 0x08	; 8
    3226:	18 07       	cpc	r17, r24
    3228:	69 f4       	brne	.+26     	; 0x3244 <_ZN5rs232C1EjP12USART_struct+0x4c>
    322a:	8e e4       	ldi	r24, 0x4E	; 78
    322c:	91 e3       	ldi	r25, 0x31	; 49
    322e:	8f 8b       	std	Y+23, r24	; 0x17
    3230:	98 8f       	std	Y+24, r25	; 0x18
    3232:	84 e4       	ldi	r24, 0x44	; 68
    3234:	91 e3       	ldi	r25, 0x31	; 49
    3236:	89 8f       	std	Y+25, r24	; 0x19
    3238:	9a 8f       	std	Y+26, r25	; 0x1a
    323a:	8a e3       	ldi	r24, 0x3A	; 58
    323c:	91 e3       	ldi	r25, 0x31	; 49
    323e:	8b 8f       	std	Y+27, r24	; 0x1b
    3240:	9c 8f       	std	Y+28, r25	; 0x1c
    3242:	42 c0       	rjmp	.+132    	; 0x32c8 <_ZN5rs232C1EjP12USART_struct+0xd0>
    3244:	00 3b       	cpi	r16, 0xB0	; 176
    3246:	e8 e0       	ldi	r30, 0x08	; 8
    3248:	1e 07       	cpc	r17, r30
    324a:	69 f4       	brne	.+26     	; 0x3266 <_ZN5rs232C1EjP12USART_struct+0x6e>
    324c:	8c e4       	ldi	r24, 0x4C	; 76
    324e:	91 e3       	ldi	r25, 0x31	; 49
    3250:	8f 8b       	std	Y+23, r24	; 0x17
    3252:	98 8f       	std	Y+24, r25	; 0x18
    3254:	82 e4       	ldi	r24, 0x42	; 66
    3256:	91 e3       	ldi	r25, 0x31	; 49
    3258:	89 8f       	std	Y+25, r24	; 0x19
    325a:	9a 8f       	std	Y+26, r25	; 0x1a
    325c:	88 e3       	ldi	r24, 0x38	; 56
    325e:	91 e3       	ldi	r25, 0x31	; 49
    3260:	8b 8f       	std	Y+27, r24	; 0x1b
    3262:	9c 8f       	std	Y+28, r25	; 0x1c
    3264:	31 c0       	rjmp	.+98     	; 0x32c8 <_ZN5rs232C1EjP12USART_struct+0xd0>
    3266:	00 3a       	cpi	r16, 0xA0	; 160
    3268:	f9 e0       	ldi	r31, 0x09	; 9
    326a:	1f 07       	cpc	r17, r31
    326c:	69 f4       	brne	.+26     	; 0x3288 <_ZN5rs232C1EjP12USART_struct+0x90>
    326e:	8a e4       	ldi	r24, 0x4A	; 74
    3270:	91 e3       	ldi	r25, 0x31	; 49
    3272:	8f 8b       	std	Y+23, r24	; 0x17
    3274:	98 8f       	std	Y+24, r25	; 0x18
    3276:	80 e4       	ldi	r24, 0x40	; 64
    3278:	91 e3       	ldi	r25, 0x31	; 49
    327a:	89 8f       	std	Y+25, r24	; 0x19
    327c:	9a 8f       	std	Y+26, r25	; 0x1a
    327e:	86 e3       	ldi	r24, 0x36	; 54
    3280:	91 e3       	ldi	r25, 0x31	; 49
    3282:	8b 8f       	std	Y+27, r24	; 0x1b
    3284:	9c 8f       	std	Y+28, r25	; 0x1c
    3286:	20 c0       	rjmp	.+64     	; 0x32c8 <_ZN5rs232C1EjP12USART_struct+0xd0>
    3288:	00 3b       	cpi	r16, 0xB0	; 176
    328a:	89 e0       	ldi	r24, 0x09	; 9
    328c:	18 07       	cpc	r17, r24
    328e:	69 f4       	brne	.+26     	; 0x32aa <_ZN5rs232C1EjP12USART_struct+0xb2>
    3290:	88 e4       	ldi	r24, 0x48	; 72
    3292:	91 e3       	ldi	r25, 0x31	; 49
    3294:	8f 8b       	std	Y+23, r24	; 0x17
    3296:	98 8f       	std	Y+24, r25	; 0x18
    3298:	8e e3       	ldi	r24, 0x3E	; 62
    329a:	91 e3       	ldi	r25, 0x31	; 49
    329c:	89 8f       	std	Y+25, r24	; 0x19
    329e:	9a 8f       	std	Y+26, r25	; 0x1a
    32a0:	84 e3       	ldi	r24, 0x34	; 52
    32a2:	91 e3       	ldi	r25, 0x31	; 49
    32a4:	8b 8f       	std	Y+27, r24	; 0x1b
    32a6:	9c 8f       	std	Y+28, r25	; 0x1c
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <_ZN5rs232C1EjP12USART_struct+0xd0>
    32aa:	00 3a       	cpi	r16, 0xA0	; 160
    32ac:	1a 40       	sbci	r17, 0x0A	; 10
    32ae:	61 f4       	brne	.+24     	; 0x32c8 <_ZN5rs232C1EjP12USART_struct+0xd0>
    32b0:	86 e4       	ldi	r24, 0x46	; 70
    32b2:	91 e3       	ldi	r25, 0x31	; 49
    32b4:	8f 8b       	std	Y+23, r24	; 0x17
    32b6:	98 8f       	std	Y+24, r25	; 0x18
    32b8:	8c e3       	ldi	r24, 0x3C	; 60
    32ba:	91 e3       	ldi	r25, 0x31	; 49
    32bc:	89 8f       	std	Y+25, r24	; 0x19
    32be:	9a 8f       	std	Y+26, r25	; 0x1a
    32c0:	82 e3       	ldi	r24, 0x32	; 50
    32c2:	91 e3       	ldi	r25, 0x31	; 49
    32c4:	8b 8f       	std	Y+27, r24	; 0x1b
    32c6:	9c 8f       	std	Y+28, r25	; 0x1c
    32c8:	0f 89       	ldd	r16, Y+23	; 0x17
    32ca:	18 8d       	ldd	r17, Y+24	; 0x18
    32cc:	84 e6       	ldi	r24, 0x64	; 100
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <_Znaj>
    32d4:	f8 01       	movw	r30, r16
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	e9 8d       	ldd	r30, Y+25	; 0x19
    32dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    32de:	10 82       	st	Z, r1
    32e0:	11 82       	std	Z+1, r1	; 0x01
    32e2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    32e4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    32e6:	10 82       	st	Z, r1
    32e8:	11 82       	std	Z+1, r1	; 0x01
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	ff 90       	pop	r15
    32f4:	ef 90       	pop	r14
    32f6:	08 95       	ret

000032f8 <__vector_25>:
    32f8:	1f 92       	push	r1
    32fa:	0f 92       	push	r0
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	08 b6       	in	r0, 0x38	; 56
    3304:	0f 92       	push	r0
    3306:	18 be       	out	0x38, r1	; 56
    3308:	0b b6       	in	r0, 0x3b	; 59
    330a:	0f 92       	push	r0
    330c:	1b be       	out	0x3b, r1	; 59
    330e:	2f 93       	push	r18
    3310:	3f 93       	push	r19
    3312:	8f 93       	push	r24
    3314:	9f 93       	push	r25
    3316:	ef 93       	push	r30
    3318:	ff 93       	push	r31
    331a:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    331e:	e0 91 4e 31 	lds	r30, 0x314E	; 0x80314e <rcvC0_buffer>
    3322:	f0 91 4f 31 	lds	r31, 0x314F	; 0x80314f <rcvC0_buffer+0x1>
    3326:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <rcvC0_write_index>
    332a:	90 91 3b 31 	lds	r25, 0x313B	; 0x80313b <rcvC0_write_index+0x1>
    332e:	e8 0f       	add	r30, r24
    3330:	f9 1f       	adc	r31, r25
    3332:	20 83       	st	Z, r18
    3334:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <rcvC0_write_index>
    3338:	90 91 3b 31 	lds	r25, 0x313B	; 0x80313b <rcvC0_write_index+0x1>
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	84 36       	cpi	r24, 0x64	; 100
    3340:	91 05       	cpc	r25, r1
    3342:	60 f4       	brcc	.+24     	; 0x335c <__vector_25+0x64>
    3344:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <rcvC0_write_index>
    3348:	90 93 3b 31 	sts	0x313B, r25	; 0x80313b <rcvC0_write_index+0x1>
    334c:	20 91 44 31 	lds	r18, 0x3144	; 0x803144 <rcvC0_read_index>
    3350:	30 91 45 31 	lds	r19, 0x3145	; 0x803145 <rcvC0_read_index+0x1>
    3354:	82 17       	cp	r24, r18
    3356:	93 07       	cpc	r25, r19
    3358:	f1 f4       	brne	.+60     	; 0x3396 <__vector_25+0x9e>
    335a:	0c c0       	rjmp	.+24     	; 0x3374 <__vector_25+0x7c>
    335c:	10 92 3a 31 	sts	0x313A, r1	; 0x80313a <rcvC0_write_index>
    3360:	10 92 3b 31 	sts	0x313B, r1	; 0x80313b <rcvC0_write_index+0x1>
    3364:	80 91 44 31 	lds	r24, 0x3144	; 0x803144 <rcvC0_read_index>
    3368:	90 91 45 31 	lds	r25, 0x3145	; 0x803145 <rcvC0_read_index+0x1>
    336c:	18 16       	cp	r1, r24
    336e:	19 06       	cpc	r1, r25
    3370:	91 f4       	brne	.+36     	; 0x3396 <__vector_25+0x9e>
    3372:	0e c0       	rjmp	.+28     	; 0x3390 <__vector_25+0x98>
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	84 36       	cpi	r24, 0x64	; 100
    3378:	91 05       	cpc	r25, r1
    337a:	28 f4       	brcc	.+10     	; 0x3386 <__vector_25+0x8e>
    337c:	80 93 44 31 	sts	0x3144, r24	; 0x803144 <rcvC0_read_index>
    3380:	90 93 45 31 	sts	0x3145, r25	; 0x803145 <rcvC0_read_index+0x1>
    3384:	08 c0       	rjmp	.+16     	; 0x3396 <__vector_25+0x9e>
    3386:	10 92 44 31 	sts	0x3144, r1	; 0x803144 <rcvC0_read_index>
    338a:	10 92 45 31 	sts	0x3145, r1	; 0x803145 <rcvC0_read_index+0x1>
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <__vector_25+0x9e>
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	f3 cf       	rjmp	.-26     	; 0x337c <__vector_25+0x84>
    3396:	ff 91       	pop	r31
    3398:	ef 91       	pop	r30
    339a:	9f 91       	pop	r25
    339c:	8f 91       	pop	r24
    339e:	3f 91       	pop	r19
    33a0:	2f 91       	pop	r18
    33a2:	0f 90       	pop	r0
    33a4:	0b be       	out	0x3b, r0	; 59
    33a6:	0f 90       	pop	r0
    33a8:	08 be       	out	0x38, r0	; 56
    33aa:	0f 90       	pop	r0
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	0f 90       	pop	r0
    33b0:	1f 90       	pop	r1
    33b2:	18 95       	reti

000033b4 <__vector_28>:
    33b4:	1f 92       	push	r1
    33b6:	0f 92       	push	r0
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	0f 92       	push	r0
    33bc:	11 24       	eor	r1, r1
    33be:	08 b6       	in	r0, 0x38	; 56
    33c0:	0f 92       	push	r0
    33c2:	18 be       	out	0x38, r1	; 56
    33c4:	0b b6       	in	r0, 0x3b	; 59
    33c6:	0f 92       	push	r0
    33c8:	1b be       	out	0x3b, r1	; 59
    33ca:	2f 93       	push	r18
    33cc:	3f 93       	push	r19
    33ce:	8f 93       	push	r24
    33d0:	9f 93       	push	r25
    33d2:	ef 93       	push	r30
    33d4:	ff 93       	push	r31
    33d6:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    33da:	e0 91 4c 31 	lds	r30, 0x314C	; 0x80314c <rcvC1_buffer>
    33de:	f0 91 4d 31 	lds	r31, 0x314D	; 0x80314d <rcvC1_buffer+0x1>
    33e2:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <rcvC1_write_index>
    33e6:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <rcvC1_write_index+0x1>
    33ea:	e8 0f       	add	r30, r24
    33ec:	f9 1f       	adc	r31, r25
    33ee:	20 83       	st	Z, r18
    33f0:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <rcvC1_write_index>
    33f4:	90 91 39 31 	lds	r25, 0x3139	; 0x803139 <rcvC1_write_index+0x1>
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	84 36       	cpi	r24, 0x64	; 100
    33fc:	91 05       	cpc	r25, r1
    33fe:	60 f4       	brcc	.+24     	; 0x3418 <__vector_28+0x64>
    3400:	80 93 38 31 	sts	0x3138, r24	; 0x803138 <rcvC1_write_index>
    3404:	90 93 39 31 	sts	0x3139, r25	; 0x803139 <rcvC1_write_index+0x1>
    3408:	20 91 42 31 	lds	r18, 0x3142	; 0x803142 <rcvC1_read_index>
    340c:	30 91 43 31 	lds	r19, 0x3143	; 0x803143 <rcvC1_read_index+0x1>
    3410:	82 17       	cp	r24, r18
    3412:	93 07       	cpc	r25, r19
    3414:	f1 f4       	brne	.+60     	; 0x3452 <__vector_28+0x9e>
    3416:	0c c0       	rjmp	.+24     	; 0x3430 <__vector_28+0x7c>
    3418:	10 92 38 31 	sts	0x3138, r1	; 0x803138 <rcvC1_write_index>
    341c:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <rcvC1_write_index+0x1>
    3420:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <rcvC1_read_index>
    3424:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <rcvC1_read_index+0x1>
    3428:	18 16       	cp	r1, r24
    342a:	19 06       	cpc	r1, r25
    342c:	91 f4       	brne	.+36     	; 0x3452 <__vector_28+0x9e>
    342e:	0e c0       	rjmp	.+28     	; 0x344c <__vector_28+0x98>
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	84 36       	cpi	r24, 0x64	; 100
    3434:	91 05       	cpc	r25, r1
    3436:	28 f4       	brcc	.+10     	; 0x3442 <__vector_28+0x8e>
    3438:	80 93 42 31 	sts	0x3142, r24	; 0x803142 <rcvC1_read_index>
    343c:	90 93 43 31 	sts	0x3143, r25	; 0x803143 <rcvC1_read_index+0x1>
    3440:	08 c0       	rjmp	.+16     	; 0x3452 <__vector_28+0x9e>
    3442:	10 92 42 31 	sts	0x3142, r1	; 0x803142 <rcvC1_read_index>
    3446:	10 92 43 31 	sts	0x3143, r1	; 0x803143 <rcvC1_read_index+0x1>
    344a:	03 c0       	rjmp	.+6      	; 0x3452 <__vector_28+0x9e>
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	f3 cf       	rjmp	.-26     	; 0x3438 <__vector_28+0x84>
    3452:	ff 91       	pop	r31
    3454:	ef 91       	pop	r30
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	3f 91       	pop	r19
    345c:	2f 91       	pop	r18
    345e:	0f 90       	pop	r0
    3460:	0b be       	out	0x3b, r0	; 59
    3462:	0f 90       	pop	r0
    3464:	08 be       	out	0x38, r0	; 56
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	0f 90       	pop	r0
    346c:	1f 90       	pop	r1
    346e:	18 95       	reti

00003470 <__vector_88>:
    3470:	1f 92       	push	r1
    3472:	0f 92       	push	r0
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	0f 92       	push	r0
    3478:	11 24       	eor	r1, r1
    347a:	08 b6       	in	r0, 0x38	; 56
    347c:	0f 92       	push	r0
    347e:	18 be       	out	0x38, r1	; 56
    3480:	0b b6       	in	r0, 0x3b	; 59
    3482:	0f 92       	push	r0
    3484:	1b be       	out	0x3b, r1	; 59
    3486:	2f 93       	push	r18
    3488:	3f 93       	push	r19
    348a:	8f 93       	push	r24
    348c:	9f 93       	push	r25
    348e:	ef 93       	push	r30
    3490:	ff 93       	push	r31
    3492:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    3496:	e0 91 4a 31 	lds	r30, 0x314A	; 0x80314a <rcvD0_buffer>
    349a:	f0 91 4b 31 	lds	r31, 0x314B	; 0x80314b <rcvD0_buffer+0x1>
    349e:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <rcvC0_write_index>
    34a2:	90 91 3b 31 	lds	r25, 0x313B	; 0x80313b <rcvC0_write_index+0x1>
    34a6:	e8 0f       	add	r30, r24
    34a8:	f9 1f       	adc	r31, r25
    34aa:	20 83       	st	Z, r18
    34ac:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <rcvD0_write_index>
    34b0:	90 91 37 31 	lds	r25, 0x3137	; 0x803137 <rcvD0_write_index+0x1>
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	84 36       	cpi	r24, 0x64	; 100
    34b8:	91 05       	cpc	r25, r1
    34ba:	60 f4       	brcc	.+24     	; 0x34d4 <__vector_88+0x64>
    34bc:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <rcvD0_write_index>
    34c0:	90 93 37 31 	sts	0x3137, r25	; 0x803137 <rcvD0_write_index+0x1>
    34c4:	20 91 40 31 	lds	r18, 0x3140	; 0x803140 <rcvD0_read_index>
    34c8:	30 91 41 31 	lds	r19, 0x3141	; 0x803141 <rcvD0_read_index+0x1>
    34cc:	82 17       	cp	r24, r18
    34ce:	93 07       	cpc	r25, r19
    34d0:	f1 f4       	brne	.+60     	; 0x350e <__vector_88+0x9e>
    34d2:	0c c0       	rjmp	.+24     	; 0x34ec <__vector_88+0x7c>
    34d4:	10 92 36 31 	sts	0x3136, r1	; 0x803136 <rcvD0_write_index>
    34d8:	10 92 37 31 	sts	0x3137, r1	; 0x803137 <rcvD0_write_index+0x1>
    34dc:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <rcvD0_read_index>
    34e0:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <rcvD0_read_index+0x1>
    34e4:	18 16       	cp	r1, r24
    34e6:	19 06       	cpc	r1, r25
    34e8:	91 f4       	brne	.+36     	; 0x350e <__vector_88+0x9e>
    34ea:	0e c0       	rjmp	.+28     	; 0x3508 <__vector_88+0x98>
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	84 36       	cpi	r24, 0x64	; 100
    34f0:	91 05       	cpc	r25, r1
    34f2:	28 f4       	brcc	.+10     	; 0x34fe <__vector_88+0x8e>
    34f4:	80 93 40 31 	sts	0x3140, r24	; 0x803140 <rcvD0_read_index>
    34f8:	90 93 41 31 	sts	0x3141, r25	; 0x803141 <rcvD0_read_index+0x1>
    34fc:	08 c0       	rjmp	.+16     	; 0x350e <__vector_88+0x9e>
    34fe:	10 92 40 31 	sts	0x3140, r1	; 0x803140 <rcvD0_read_index>
    3502:	10 92 41 31 	sts	0x3141, r1	; 0x803141 <rcvD0_read_index+0x1>
    3506:	03 c0       	rjmp	.+6      	; 0x350e <__vector_88+0x9e>
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	f3 cf       	rjmp	.-26     	; 0x34f4 <__vector_88+0x84>
    350e:	ff 91       	pop	r31
    3510:	ef 91       	pop	r30
    3512:	9f 91       	pop	r25
    3514:	8f 91       	pop	r24
    3516:	3f 91       	pop	r19
    3518:	2f 91       	pop	r18
    351a:	0f 90       	pop	r0
    351c:	0b be       	out	0x3b, r0	; 59
    351e:	0f 90       	pop	r0
    3520:	08 be       	out	0x38, r0	; 56
    3522:	0f 90       	pop	r0
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	0f 90       	pop	r0
    3528:	1f 90       	pop	r1
    352a:	18 95       	reti

0000352c <__vector_91>:
    352c:	1f 92       	push	r1
    352e:	0f 92       	push	r0
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	0f 92       	push	r0
    3534:	11 24       	eor	r1, r1
    3536:	08 b6       	in	r0, 0x38	; 56
    3538:	0f 92       	push	r0
    353a:	18 be       	out	0x38, r1	; 56
    353c:	0b b6       	in	r0, 0x3b	; 59
    353e:	0f 92       	push	r0
    3540:	1b be       	out	0x3b, r1	; 59
    3542:	2f 93       	push	r18
    3544:	3f 93       	push	r19
    3546:	8f 93       	push	r24
    3548:	9f 93       	push	r25
    354a:	ef 93       	push	r30
    354c:	ff 93       	push	r31
    354e:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    3552:	e0 91 48 31 	lds	r30, 0x3148	; 0x803148 <rcvD1_buffer>
    3556:	f0 91 49 31 	lds	r31, 0x3149	; 0x803149 <rcvD1_buffer+0x1>
    355a:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <rcvD1_write_index>
    355e:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <rcvD1_write_index+0x1>
    3562:	e8 0f       	add	r30, r24
    3564:	f9 1f       	adc	r31, r25
    3566:	20 83       	st	Z, r18
    3568:	80 91 34 31 	lds	r24, 0x3134	; 0x803134 <rcvD1_write_index>
    356c:	90 91 35 31 	lds	r25, 0x3135	; 0x803135 <rcvD1_write_index+0x1>
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	84 36       	cpi	r24, 0x64	; 100
    3574:	91 05       	cpc	r25, r1
    3576:	60 f4       	brcc	.+24     	; 0x3590 <__vector_91+0x64>
    3578:	80 93 34 31 	sts	0x3134, r24	; 0x803134 <rcvD1_write_index>
    357c:	90 93 35 31 	sts	0x3135, r25	; 0x803135 <rcvD1_write_index+0x1>
    3580:	20 91 3e 31 	lds	r18, 0x313E	; 0x80313e <rcvD1_read_index>
    3584:	30 91 3f 31 	lds	r19, 0x313F	; 0x80313f <rcvD1_read_index+0x1>
    3588:	82 17       	cp	r24, r18
    358a:	93 07       	cpc	r25, r19
    358c:	f1 f4       	brne	.+60     	; 0x35ca <__vector_91+0x9e>
    358e:	0c c0       	rjmp	.+24     	; 0x35a8 <__vector_91+0x7c>
    3590:	10 92 34 31 	sts	0x3134, r1	; 0x803134 <rcvD1_write_index>
    3594:	10 92 35 31 	sts	0x3135, r1	; 0x803135 <rcvD1_write_index+0x1>
    3598:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <rcvD1_read_index>
    359c:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <rcvD1_read_index+0x1>
    35a0:	18 16       	cp	r1, r24
    35a2:	19 06       	cpc	r1, r25
    35a4:	91 f4       	brne	.+36     	; 0x35ca <__vector_91+0x9e>
    35a6:	0e c0       	rjmp	.+28     	; 0x35c4 <__vector_91+0x98>
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	84 36       	cpi	r24, 0x64	; 100
    35ac:	91 05       	cpc	r25, r1
    35ae:	28 f4       	brcc	.+10     	; 0x35ba <__vector_91+0x8e>
    35b0:	80 93 3e 31 	sts	0x313E, r24	; 0x80313e <rcvD1_read_index>
    35b4:	90 93 3f 31 	sts	0x313F, r25	; 0x80313f <rcvD1_read_index+0x1>
    35b8:	08 c0       	rjmp	.+16     	; 0x35ca <__vector_91+0x9e>
    35ba:	10 92 3e 31 	sts	0x313E, r1	; 0x80313e <rcvD1_read_index>
    35be:	10 92 3f 31 	sts	0x313F, r1	; 0x80313f <rcvD1_read_index+0x1>
    35c2:	03 c0       	rjmp	.+6      	; 0x35ca <__vector_91+0x9e>
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	f3 cf       	rjmp	.-26     	; 0x35b0 <__vector_91+0x84>
    35ca:	ff 91       	pop	r31
    35cc:	ef 91       	pop	r30
    35ce:	9f 91       	pop	r25
    35d0:	8f 91       	pop	r24
    35d2:	3f 91       	pop	r19
    35d4:	2f 91       	pop	r18
    35d6:	0f 90       	pop	r0
    35d8:	0b be       	out	0x3b, r0	; 59
    35da:	0f 90       	pop	r0
    35dc:	08 be       	out	0x38, r0	; 56
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <__vector_58>:
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	08 b6       	in	r0, 0x38	; 56
    35f4:	0f 92       	push	r0
    35f6:	18 be       	out	0x38, r1	; 56
    35f8:	0b b6       	in	r0, 0x3b	; 59
    35fa:	0f 92       	push	r0
    35fc:	1b be       	out	0x3b, r1	; 59
    35fe:	2f 93       	push	r18
    3600:	3f 93       	push	r19
    3602:	8f 93       	push	r24
    3604:	9f 93       	push	r25
    3606:	ef 93       	push	r30
    3608:	ff 93       	push	r31
    360a:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    360e:	e0 91 46 31 	lds	r30, 0x3146	; 0x803146 <rcvE0_buffer>
    3612:	f0 91 47 31 	lds	r31, 0x3147	; 0x803147 <rcvE0_buffer+0x1>
    3616:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <rcvE0_write_index>
    361a:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <rcvE0_write_index+0x1>
    361e:	e8 0f       	add	r30, r24
    3620:	f9 1f       	adc	r31, r25
    3622:	20 83       	st	Z, r18
    3624:	80 91 32 31 	lds	r24, 0x3132	; 0x803132 <rcvE0_write_index>
    3628:	90 91 33 31 	lds	r25, 0x3133	; 0x803133 <rcvE0_write_index+0x1>
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	84 36       	cpi	r24, 0x64	; 100
    3630:	91 05       	cpc	r25, r1
    3632:	60 f4       	brcc	.+24     	; 0x364c <__vector_58+0x64>
    3634:	80 93 32 31 	sts	0x3132, r24	; 0x803132 <rcvE0_write_index>
    3638:	90 93 33 31 	sts	0x3133, r25	; 0x803133 <rcvE0_write_index+0x1>
    363c:	20 91 3c 31 	lds	r18, 0x313C	; 0x80313c <rcvE0_read_index>
    3640:	30 91 3d 31 	lds	r19, 0x313D	; 0x80313d <rcvE0_read_index+0x1>
    3644:	82 17       	cp	r24, r18
    3646:	93 07       	cpc	r25, r19
    3648:	f1 f4       	brne	.+60     	; 0x3686 <__vector_58+0x9e>
    364a:	0c c0       	rjmp	.+24     	; 0x3664 <__vector_58+0x7c>
    364c:	10 92 32 31 	sts	0x3132, r1	; 0x803132 <rcvE0_write_index>
    3650:	10 92 33 31 	sts	0x3133, r1	; 0x803133 <rcvE0_write_index+0x1>
    3654:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <rcvE0_read_index>
    3658:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <rcvE0_read_index+0x1>
    365c:	18 16       	cp	r1, r24
    365e:	19 06       	cpc	r1, r25
    3660:	91 f4       	brne	.+36     	; 0x3686 <__vector_58+0x9e>
    3662:	0e c0       	rjmp	.+28     	; 0x3680 <__vector_58+0x98>
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	84 36       	cpi	r24, 0x64	; 100
    3668:	91 05       	cpc	r25, r1
    366a:	28 f4       	brcc	.+10     	; 0x3676 <__vector_58+0x8e>
    366c:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <rcvE0_read_index>
    3670:	90 93 3d 31 	sts	0x313D, r25	; 0x80313d <rcvE0_read_index+0x1>
    3674:	08 c0       	rjmp	.+16     	; 0x3686 <__vector_58+0x9e>
    3676:	10 92 3c 31 	sts	0x313C, r1	; 0x80313c <rcvE0_read_index>
    367a:	10 92 3d 31 	sts	0x313D, r1	; 0x80313d <rcvE0_read_index+0x1>
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <__vector_58+0x9e>
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	f3 cf       	rjmp	.-26     	; 0x366c <__vector_58+0x84>
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	9f 91       	pop	r25
    368c:	8f 91       	pop	r24
    368e:	3f 91       	pop	r19
    3690:	2f 91       	pop	r18
    3692:	0f 90       	pop	r0
    3694:	0b be       	out	0x3b, r0	; 59
    3696:	0f 90       	pop	r0
    3698:	08 be       	out	0x38, r0	; 56
    369a:	0f 90       	pop	r0
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	0f 90       	pop	r0
    36a0:	1f 90       	pop	r1
    36a2:	18 95       	reti

000036a4 <_Z8CCPWritePVhh>:
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    36a4:	0f 93       	push	r16
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	1f 92       	push	r1
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    36b0:	2f b7       	in	r18, 0x3f	; 63
    36b2:	29 83       	std	Y+1, r18	; 0x01
	cli();
    36b4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    36b6:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    36b8:	fc 01       	movw	r30, r24
    36ba:	08 ed       	ldi	r16, 0xD8	; 216
    36bc:	04 bf       	out	0x34, r16	; 52
    36be:	60 83       	st	Z, r22

	SREG = saved_sreg;
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    36c4:	0f 90       	pop	r0
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	0f 91       	pop	r16
    36cc:	08 95       	ret

000036ce <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    36ce:	ef 92       	push	r14
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	6d 97       	sbiw	r28, 0x1d	; 29
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	de bf       	out	0x3e, r29	; 62
	// Set up pins for LED output
	PORTD.DIRSET = PIN4_bm;									// set pin D4 as output LED0: turns on when power is on.
    36e2:	e0 e6       	ldi	r30, 0x60	; 96
    36e4:	f6 e0       	ldi	r31, 0x06	; 6
    36e6:	80 e1       	ldi	r24, 0x10	; 16
    36e8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = PIN4_bm;									// set pin high, LED 1
    36ea:	85 83       	std	Z+5, r24	; 0x05
	//PORTD.DIRSET = PIN6_bm;
	//PORTD.OUTSET = PIN6_bm;
	
	

	cli();
    36ec:	f8 94       	cli
	// Configure the system clock
	{
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    36ee:	e0 e5       	ldi	r30, 0x50	; 80
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	82 60       	ori	r24, 0x02	; 2
    36f6:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    36f8:	81 81       	ldd	r24, Z+1	; 0x01
    36fa:	81 ff       	sbrs	r24, 1
    36fc:	fd cf       	rjmp	.-6      	; 0x36f8 <main+0x2a>


		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    36fe:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    3702:	68 7f       	andi	r22, 0xF8	; 248
    3704:	61 60       	ori	r22, 0x01	; 1
    3706:	80 e4       	ldi	r24, 0x40	; 64
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <_Z8CCPWritePVhh>
		// Enable the RTC as an external oscillator
		//CLK.RTCCTRL = (CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm);
		// CCPWrite(&(CLK.RTCCTRL),(CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm));

		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    370e:	e0 e5       	ldi	r30, 0x50	; 80
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	80 81       	ld	r24, Z
    3714:	8e 7f       	andi	r24, 0xFE	; 254
    3716:	80 83       	st	Z, r24
	}

	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on
	wdt_disable ();
    3718:	9d ef       	ldi	r25, 0xFD	; 253
    371a:	88 ed       	ldi	r24, 0xD8	; 216
    371c:	08 b6       	in	r0, 0x38	; 56
    371e:	18 be       	out	0x38, r1	; 56
    3720:	84 bf       	out	0x34, r24	; 52
    3722:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3726:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0, &USARTC1); // Create a serial device on USART C1, baud 115200
    3728:	40 eb       	ldi	r20, 0xB0	; 176
    372a:	58 e0       	ldi	r21, 0x08	; 8
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	ce 01       	movw	r24, r28
    3732:	01 96       	adiw	r24, 0x01	; 1
    3734:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    3738:	67 e0       	ldi	r22, 0x07	; 7
    373a:	ce 01       	movw	r24, r28
    373c:	01 96       	adiw	r24, 0x01	; 1
    373e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    3742:	8c 01       	movw	r16, r24
    3744:	63 e7       	ldi	r22, 0x73	; 115
    3746:	70 e2       	ldi	r23, 0x20	; 32
    3748:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN8emstream4putsEPKc>
    374c:	66 e0       	ldi	r22, 0x06	; 6
    374e:	c8 01       	movw	r24, r16
    3750:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>
    3754:	66 e0       	ldi	r22, 0x06	; 6
    3756:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN8emstreamlsE15ser_manipulator>

	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	new task_user ("UserInt", task_priority (0), 260, &ser_dev);
    375a:	82 e1       	ldi	r24, 0x12	; 18
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    3762:	8e 01       	movw	r16, r28
    3764:	0f 5f       	subi	r16, 0xFF	; 255
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	24 e0       	ldi	r18, 0x04	; 4
    376a:	31 e0       	ldi	r19, 0x01	; 1
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	62 e9       	ldi	r22, 0x92	; 146
    3770:	70 e2       	ldi	r23, 0x20	; 32
    3772:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN9task_userC1EPKchjP8emstream>

	new task_limit_switch ("LeftSw", task_priority (6), 260, &ser_dev, (1<<0));
    3776:	83 e1       	ldi	r24, 0x13	; 19
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    377e:	ee 24       	eor	r14, r14
    3780:	e3 94       	inc	r14
    3782:	24 e0       	ldi	r18, 0x04	; 4
    3784:	31 e0       	ldi	r19, 0x01	; 1
    3786:	44 e0       	ldi	r20, 0x04	; 4
    3788:	6a e9       	ldi	r22, 0x9A	; 154
    378a:	70 e2       	ldi	r23, 0x20	; 32
    378c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN17task_limit_switchC1EPKchjP8emstreamh>
	new task_limit_switch ("RightSw", task_priority (5), 260, &ser_dev, (1<<2));
    3790:	83 e1       	ldi	r24, 0x13	; 19
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    3798:	68 94       	set
    379a:	ee 24       	eor	r14, r14
    379c:	e2 f8       	bld	r14, 2
    379e:	24 e0       	ldi	r18, 0x04	; 4
    37a0:	31 e0       	ldi	r19, 0x01	; 1
    37a2:	44 e0       	ldi	r20, 0x04	; 4
    37a4:	61 ea       	ldi	r22, 0xA1	; 161
    37a6:	70 e2       	ldi	r23, 0x20	; 32
    37a8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN17task_limit_switchC1EPKchjP8emstreamh>
	new task_pendulum_encoder ("EncPen", task_priority (4), 260, &ser_dev);
    37ac:	82 e1       	ldi	r24, 0x12	; 18
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    37b4:	24 e0       	ldi	r18, 0x04	; 4
    37b6:	31 e0       	ldi	r19, 0x01	; 1
    37b8:	44 e0       	ldi	r20, 0x04	; 4
    37ba:	69 ea       	ldi	r22, 0xA9	; 169
    37bc:	70 e2       	ldi	r23, 0x20	; 32
    37be:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN21task_pendulum_encoderC1EPKchjP8emstream>
	new task_motor_encoder ("EncMtr", task_priority (3), 260, &ser_dev);
    37c2:	82 e1       	ldi	r24, 0x12	; 18
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    37ca:	24 e0       	ldi	r18, 0x04	; 4
    37cc:	31 e0       	ldi	r19, 0x01	; 1
    37ce:	43 e0       	ldi	r20, 0x03	; 3
    37d0:	60 eb       	ldi	r22, 0xB0	; 176
    37d2:	70 e2       	ldi	r23, 0x20	; 32
    37d4:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN18task_motor_encoderC1EPKchjP8emstream>
	new task_system_controller ("SysCtrl", task_priority (2), 260, &ser_dev);
    37d8:	82 e1       	ldi	r24, 0x12	; 18
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    37e0:	24 e0       	ldi	r18, 0x04	; 4
    37e2:	31 e0       	ldi	r19, 0x01	; 1
    37e4:	42 e0       	ldi	r20, 0x02	; 2
    37e6:	67 eb       	ldi	r22, 0xB7	; 183
    37e8:	70 e2       	ldi	r23, 0x20	; 32
    37ea:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN22task_system_controllerC1EPKchjP8emstream>
	new task_motor_command ("MtrCmd", task_priority (1), 260, &ser_dev);
    37ee:	82 e1       	ldi	r24, 0x12	; 18
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_Znwj>
    37f6:	24 e0       	ldi	r18, 0x04	; 4
    37f8:	31 e0       	ldi	r19, 0x01	; 1
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	6f eb       	ldi	r22, 0xBF	; 191
    37fe:	70 e2       	ldi	r23, 0x20	; 32
    3800:	0e 94 89 03 	call	0x712	; 0x712 <_ZN18task_motor_commandC1EPKchjP8emstream>

	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    3804:	87 e0       	ldi	r24, 0x07	; 7
    3806:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    380a:	78 94       	sei

	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();
    380c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vTaskStartScheduler>

	return 0;
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	6d 96       	adiw	r28, 0x1d	; 29
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	1f 91       	pop	r17
    3820:	0f 91       	pop	r16
    3822:	ef 90       	pop	r14
    3824:	08 95       	ret

00003826 <_GLOBAL__sub_I_counter>:
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
#include "task_motor_encoder.h"				// Header for Motor Controller
#include "task_system_controller.h"			// Header for the system controller
#include "task_motor_command.h"				// Header for the motor command

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    382a:	0a e0       	ldi	r16, 0x0A	; 10
    382c:	10 e0       	ldi	r17, 0x00	; 0
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	60 e2       	ldi	r22, 0x20	; 32
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	84 e5       	ldi	r24, 0x54	; 84
    383c:	91 e3       	ldi	r25, 0x31	; 49
    383e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <_ZN14frt_text_queueC1EjP8emstreamm>
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	vTaskStartScheduler ();

	return 0;
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	08 95       	ret

00003848 <__mulsi3>:
    3848:	db 01       	movw	r26, r22
    384a:	8f 93       	push	r24
    384c:	9f 93       	push	r25
    384e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__muluhisi3>
    3852:	bf 91       	pop	r27
    3854:	af 91       	pop	r26
    3856:	a2 9f       	mul	r26, r18
    3858:	80 0d       	add	r24, r0
    385a:	91 1d       	adc	r25, r1
    385c:	a3 9f       	mul	r26, r19
    385e:	90 0d       	add	r25, r0
    3860:	b2 9f       	mul	r27, r18
    3862:	90 0d       	add	r25, r0
    3864:	11 24       	eor	r1, r1
    3866:	08 95       	ret

00003868 <__udivmodsi4>:
    3868:	a1 e2       	ldi	r26, 0x21	; 33
    386a:	1a 2e       	mov	r1, r26
    386c:	aa 1b       	sub	r26, r26
    386e:	bb 1b       	sub	r27, r27
    3870:	fd 01       	movw	r30, r26
    3872:	0d c0       	rjmp	.+26     	; 0x388e <__udivmodsi4_ep>

00003874 <__udivmodsi4_loop>:
    3874:	aa 1f       	adc	r26, r26
    3876:	bb 1f       	adc	r27, r27
    3878:	ee 1f       	adc	r30, r30
    387a:	ff 1f       	adc	r31, r31
    387c:	a2 17       	cp	r26, r18
    387e:	b3 07       	cpc	r27, r19
    3880:	e4 07       	cpc	r30, r20
    3882:	f5 07       	cpc	r31, r21
    3884:	20 f0       	brcs	.+8      	; 0x388e <__udivmodsi4_ep>
    3886:	a2 1b       	sub	r26, r18
    3888:	b3 0b       	sbc	r27, r19
    388a:	e4 0b       	sbc	r30, r20
    388c:	f5 0b       	sbc	r31, r21

0000388e <__udivmodsi4_ep>:
    388e:	66 1f       	adc	r22, r22
    3890:	77 1f       	adc	r23, r23
    3892:	88 1f       	adc	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	1a 94       	dec	r1
    3898:	69 f7       	brne	.-38     	; 0x3874 <__udivmodsi4_loop>
    389a:	60 95       	com	r22
    389c:	70 95       	com	r23
    389e:	80 95       	com	r24
    38a0:	90 95       	com	r25
    38a2:	9b 01       	movw	r18, r22
    38a4:	ac 01       	movw	r20, r24
    38a6:	bd 01       	movw	r22, r26
    38a8:	cf 01       	movw	r24, r30
    38aa:	08 95       	ret

000038ac <__divmodsi4>:
    38ac:	05 2e       	mov	r0, r21
    38ae:	97 fb       	bst	r25, 7
    38b0:	1e f4       	brtc	.+6      	; 0x38b8 <__divmodsi4+0xc>
    38b2:	00 94       	com	r0
    38b4:	0e 94 6d 1c 	call	0x38da	; 0x38da <__negsi2>
    38b8:	57 fd       	sbrc	r21, 7
    38ba:	07 d0       	rcall	.+14     	; 0x38ca <__divmodsi4_neg2>
    38bc:	0e 94 34 1c 	call	0x3868	; 0x3868 <__udivmodsi4>
    38c0:	07 fc       	sbrc	r0, 7
    38c2:	03 d0       	rcall	.+6      	; 0x38ca <__divmodsi4_neg2>
    38c4:	4e f4       	brtc	.+18     	; 0x38d8 <__divmodsi4_exit>
    38c6:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__negsi2>

000038ca <__divmodsi4_neg2>:
    38ca:	50 95       	com	r21
    38cc:	40 95       	com	r20
    38ce:	30 95       	com	r19
    38d0:	21 95       	neg	r18
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	4f 4f       	sbci	r20, 0xFF	; 255
    38d6:	5f 4f       	sbci	r21, 0xFF	; 255

000038d8 <__divmodsi4_exit>:
    38d8:	08 95       	ret

000038da <__negsi2>:
    38da:	90 95       	com	r25
    38dc:	80 95       	com	r24
    38de:	70 95       	com	r23
    38e0:	61 95       	neg	r22
    38e2:	7f 4f       	sbci	r23, 0xFF	; 255
    38e4:	8f 4f       	sbci	r24, 0xFF	; 255
    38e6:	9f 4f       	sbci	r25, 0xFF	; 255
    38e8:	08 95       	ret

000038ea <__tablejump2__>:
    38ea:	ee 0f       	add	r30, r30
    38ec:	ff 1f       	adc	r31, r31
    38ee:	88 1f       	adc	r24, r24
    38f0:	8b bf       	out	0x3b, r24	; 59
    38f2:	07 90       	elpm	r0, Z+
    38f4:	f6 91       	elpm	r31, Z
    38f6:	e0 2d       	mov	r30, r0
    38f8:	1b be       	out	0x3b, r1	; 59
    38fa:	19 94       	eijmp

000038fc <__muluhisi3>:
    38fc:	0e 94 89 1c 	call	0x3912	; 0x3912 <__umulhisi3>
    3900:	a5 9f       	mul	r26, r21
    3902:	90 0d       	add	r25, r0
    3904:	b4 9f       	mul	r27, r20
    3906:	90 0d       	add	r25, r0
    3908:	a4 9f       	mul	r26, r20
    390a:	80 0d       	add	r24, r0
    390c:	91 1d       	adc	r25, r1
    390e:	11 24       	eor	r1, r1
    3910:	08 95       	ret

00003912 <__umulhisi3>:
    3912:	a2 9f       	mul	r26, r18
    3914:	b0 01       	movw	r22, r0
    3916:	b3 9f       	mul	r27, r19
    3918:	c0 01       	movw	r24, r0
    391a:	a3 9f       	mul	r26, r19
    391c:	70 0d       	add	r23, r0
    391e:	81 1d       	adc	r24, r1
    3920:	11 24       	eor	r1, r1
    3922:	91 1d       	adc	r25, r1
    3924:	b2 9f       	mul	r27, r18
    3926:	70 0d       	add	r23, r0
    3928:	81 1d       	adc	r24, r1
    392a:	11 24       	eor	r1, r1
    392c:	91 1d       	adc	r25, r1
    392e:	08 95       	ret

00003930 <memcpy>:
    3930:	fb 01       	movw	r30, r22
    3932:	dc 01       	movw	r26, r24
    3934:	02 c0       	rjmp	.+4      	; 0x393a <memcpy+0xa>
    3936:	01 90       	ld	r0, Z+
    3938:	0d 92       	st	X+, r0
    393a:	41 50       	subi	r20, 0x01	; 1
    393c:	50 40       	sbci	r21, 0x00	; 0
    393e:	d8 f7       	brcc	.-10     	; 0x3936 <memcpy+0x6>
    3940:	08 95       	ret

00003942 <memset>:
    3942:	dc 01       	movw	r26, r24
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <memset+0x6>
    3946:	6d 93       	st	X+, r22
    3948:	41 50       	subi	r20, 0x01	; 1
    394a:	50 40       	sbci	r21, 0x00	; 0
    394c:	e0 f7       	brcc	.-8      	; 0x3946 <memset+0x4>
    394e:	08 95       	ret

00003950 <strncpy>:
    3950:	fb 01       	movw	r30, r22
    3952:	dc 01       	movw	r26, r24
    3954:	41 50       	subi	r20, 0x01	; 1
    3956:	50 40       	sbci	r21, 0x00	; 0
    3958:	48 f0       	brcs	.+18     	; 0x396c <strncpy+0x1c>
    395a:	01 90       	ld	r0, Z+
    395c:	0d 92       	st	X+, r0
    395e:	00 20       	and	r0, r0
    3960:	c9 f7       	brne	.-14     	; 0x3954 <strncpy+0x4>
    3962:	01 c0       	rjmp	.+2      	; 0x3966 <strncpy+0x16>
    3964:	1d 92       	st	X+, r1
    3966:	41 50       	subi	r20, 0x01	; 1
    3968:	50 40       	sbci	r21, 0x00	; 0
    396a:	e0 f7       	brcc	.-8      	; 0x3964 <strncpy+0x14>
    396c:	08 95       	ret

0000396e <ultoa>:
    396e:	25 32       	cpi	r18, 0x25	; 37
    3970:	31 05       	cpc	r19, r1
    3972:	20 f4       	brcc	.+8      	; 0x397c <ultoa+0xe>
    3974:	22 30       	cpi	r18, 0x02	; 2
    3976:	10 f0       	brcs	.+4      	; 0x397c <ultoa+0xe>
    3978:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__ultoa_ncheck>
    397c:	fa 01       	movw	r30, r20
    397e:	10 82       	st	Z, r1
    3980:	ca 01       	movw	r24, r20
    3982:	08 95       	ret

00003984 <__ultoa_ncheck>:
    3984:	bb 27       	eor	r27, r27

00003986 <__ultoa_common>:
    3986:	fa 01       	movw	r30, r20
    3988:	a6 2f       	mov	r26, r22
    398a:	62 17       	cp	r22, r18
    398c:	71 05       	cpc	r23, r1
    398e:	81 05       	cpc	r24, r1
    3990:	91 05       	cpc	r25, r1
    3992:	33 0b       	sbc	r19, r19
    3994:	30 fb       	bst	r19, 0
    3996:	66 f0       	brts	.+24     	; 0x39b0 <__ultoa_common+0x2a>
    3998:	aa 27       	eor	r26, r26
    399a:	66 0f       	add	r22, r22
    399c:	77 1f       	adc	r23, r23
    399e:	88 1f       	adc	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	aa 1f       	adc	r26, r26
    39a4:	a2 17       	cp	r26, r18
    39a6:	10 f0       	brcs	.+4      	; 0x39ac <__ultoa_common+0x26>
    39a8:	a2 1b       	sub	r26, r18
    39aa:	63 95       	inc	r22
    39ac:	38 50       	subi	r19, 0x08	; 8
    39ae:	a9 f7       	brne	.-22     	; 0x399a <__ultoa_common+0x14>
    39b0:	a0 5d       	subi	r26, 0xD0	; 208
    39b2:	aa 33       	cpi	r26, 0x3A	; 58
    39b4:	08 f0       	brcs	.+2      	; 0x39b8 <__ultoa_common+0x32>
    39b6:	a9 5d       	subi	r26, 0xD9	; 217
    39b8:	a1 93       	st	Z+, r26
    39ba:	36 f7       	brtc	.-52     	; 0x3988 <__ultoa_common+0x2>
    39bc:	b1 11       	cpse	r27, r1
    39be:	b1 93       	st	Z+, r27
    39c0:	10 82       	st	Z, r1
    39c2:	ca 01       	movw	r24, r20
    39c4:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <strrev>

000039c8 <utoa>:
    39c8:	45 32       	cpi	r20, 0x25	; 37
    39ca:	51 05       	cpc	r21, r1
    39cc:	20 f4       	brcc	.+8      	; 0x39d6 <utoa+0xe>
    39ce:	42 30       	cpi	r20, 0x02	; 2
    39d0:	10 f0       	brcs	.+4      	; 0x39d6 <utoa+0xe>
    39d2:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__utoa_ncheck>
    39d6:	fb 01       	movw	r30, r22
    39d8:	10 82       	st	Z, r1
    39da:	cb 01       	movw	r24, r22
    39dc:	08 95       	ret

000039de <__utoa_ncheck>:
    39de:	bb 27       	eor	r27, r27

000039e0 <__utoa_common>:
    39e0:	fb 01       	movw	r30, r22
    39e2:	55 27       	eor	r21, r21
    39e4:	aa 27       	eor	r26, r26
    39e6:	88 0f       	add	r24, r24
    39e8:	99 1f       	adc	r25, r25
    39ea:	aa 1f       	adc	r26, r26
    39ec:	a4 17       	cp	r26, r20
    39ee:	10 f0       	brcs	.+4      	; 0x39f4 <__utoa_common+0x14>
    39f0:	a4 1b       	sub	r26, r20
    39f2:	83 95       	inc	r24
    39f4:	50 51       	subi	r21, 0x10	; 16
    39f6:	b9 f7       	brne	.-18     	; 0x39e6 <__utoa_common+0x6>
    39f8:	a0 5d       	subi	r26, 0xD0	; 208
    39fa:	aa 33       	cpi	r26, 0x3A	; 58
    39fc:	08 f0       	brcs	.+2      	; 0x3a00 <__utoa_common+0x20>
    39fe:	a9 5d       	subi	r26, 0xD9	; 217
    3a00:	a1 93       	st	Z+, r26
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	79 f7       	brne	.-34     	; 0x39e4 <__utoa_common+0x4>
    3a06:	b1 11       	cpse	r27, r1
    3a08:	b1 93       	st	Z+, r27
    3a0a:	11 92       	st	Z+, r1
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <strrev>

00003a12 <strrev>:
    3a12:	dc 01       	movw	r26, r24
    3a14:	fc 01       	movw	r30, r24
    3a16:	67 2f       	mov	r22, r23
    3a18:	71 91       	ld	r23, Z+
    3a1a:	77 23       	and	r23, r23
    3a1c:	e1 f7       	brne	.-8      	; 0x3a16 <strrev+0x4>
    3a1e:	32 97       	sbiw	r30, 0x02	; 2
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <strrev+0x18>
    3a22:	7c 91       	ld	r23, X
    3a24:	6d 93       	st	X+, r22
    3a26:	70 83       	st	Z, r23
    3a28:	62 91       	ld	r22, -Z
    3a2a:	ae 17       	cp	r26, r30
    3a2c:	bf 07       	cpc	r27, r31
    3a2e:	c8 f3       	brcs	.-14     	; 0x3a22 <strrev+0x10>
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>
