
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00802000  00003a36  00003aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010aa  008020ee  008020ee  00003bb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005177  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eea  00000000  00000000  00008fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bad  00000000  00000000  0000bed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  0000da80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000292e  00000000  00000000  0000e180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00010aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00012ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 02 	jmp	0x536	; 0x536 <__ctors_end>
       4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
       c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      18:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      20:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      24:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      28:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      2c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      30:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      38:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      3c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      40:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      44:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      50:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      54:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      58:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      5c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      60:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      64:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_25>
      68:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      6c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      70:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_28>
      74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      78:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      7c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      80:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      84:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      8c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      90:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      94:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      98:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      9c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      c4:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__vector_49>
      c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      e8:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_58>
      ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
      fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     100:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     104:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     108:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     10c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     110:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     114:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     118:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     11c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     120:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     124:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     128:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     12c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     130:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     134:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     138:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     13c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     140:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     144:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     148:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     14c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     150:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     154:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     158:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     15c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     160:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_88>
     164:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     168:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     16c:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_91>
     170:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     174:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     178:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     17c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     180:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     184:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     188:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     18c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     190:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     194:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     198:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     19c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1a8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ac:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1b8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1c8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1cc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1dc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1e8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1ec:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f4:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1f8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__bad_interrupt>
     1fc:	61 04       	cpc	r6, r1
     1fe:	64 04       	cpc	r6, r4
     200:	67 04       	cpc	r6, r7
     202:	6a 04       	cpc	r6, r10
     204:	6d 04       	cpc	r6, r13
     206:	70 04       	cpc	r7, r0
     208:	72 04       	cpc	r7, r2
     20a:	83 04       	cpc	r8, r3
     20c:	8b 04       	cpc	r8, r11
     20e:	95 04       	cpc	r9, r5
     210:	93 04       	cpc	r9, r3

00000212 <__trampolines_start>:
     212:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <_ZN18task_motor_encoder3runEv>
     216:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <_ZN5rs2327putcharEc>
     21a:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <_ZN5rs23212clear_screenEv>
     21e:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_ZN21task_pendulum_encoder3runEv>
     222:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_ZN8emstream12transmit_nowEv>
     226:	0c 94 13 03 	jmp	0x626	; 0x626 <_ZN14frt_text_queue14check_for_charEv>
     22a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN17task_limit_switch3runEv>
     22e:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN22task_system_controller3runEv>
     232:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_ZN8emstream13ready_to_sendEv>
     236:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_ZN8emstreamlsE15ser_manipulator+0x24>
     23a:	0c 94 8b 04 	jmp	0x916	; 0x916 <_ZN8emstreamlsE15ser_manipulator+0x72>
     23e:	0c 94 b8 03 	jmp	0x770	; 0x770 <_ZN18task_motor_command3runEv>
     242:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     246:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_ZN8frt_task12print_statusER8emstream>
     24a:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <_ZN8emstream7getcharEv>
     24e:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <_ZN9task_user3runEv>
     252:	0c 94 46 0c 	jmp	0x188c	; 0x188c <_ZN5rs23214check_for_charEv>
     256:	0c 94 3c 03 	jmp	0x678	; 0x678 <_call_static_run_method>
     25a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_ZN8emstream14check_for_charEv>
     25e:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_ZN14frt_text_queue7putcharEc>
     262:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <_ZN8emstreamlsE15ser_manipulator+0x2a>
     266:	0c 94 83 04 	jmp	0x906	; 0x906 <_ZN8emstreamlsE15ser_manipulator+0x62>
     26a:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN5rs2327getcharEv>
     26e:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__cxa_pure_virtual>
     272:	0c 94 93 04 	jmp	0x926	; 0x926 <_ZN8emstreamlsE15ser_manipulator+0x82>
     276:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_ZN14frt_text_queue7getcharEv>
     27a:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <_ZN8emstreamlsE15ser_manipulator+0x30>
     27e:	0c 94 6d 04 	jmp	0x8da	; 0x8da <_ZN8emstreamlsE15ser_manipulator+0x36>
     282:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_ZN8emstreamlsE15ser_manipulator+0x40>
     286:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_ZN8emstream12clear_screenEv>
     28a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     28e:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <_GLOBAL__sub_I_counter>
     292:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <prvIdleTask>
     296:	0c 94 95 04 	jmp	0x92a	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>

0000029a <__trampolines_end>:
     29a:	09 09       	sbc	r16, r9
	...

0000029d <_ZZ15print_task_listP8emstreamE3__c_8>:
     29d:	2f 00                                               /.

0000029f <_ZZ15print_task_listP8emstreamE3__c_7>:
     29f:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

000002aa <_ZZ15print_task_listP8emstreamE3__c_6>:
     2aa:	09 2d 2d 2d 2d 00                                   .----.

000002b0 <_ZZ15print_task_listP8emstreamE3__c_5>:
     2b0:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

000002bc <_ZZ15print_task_listP8emstreamE3__c_4>:
     2bc:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

000002cd <_ZZ15print_task_listP8emstreamE3__c_3>:
     2cd:	09 52 75 6e 73 00                                   .Runs.

000002d3 <_ZZ15print_task_listP8emstreamE3__c_2>:
     2d3:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

000002df <_ZZ15print_task_listP8emstreamE3__c_1>:
     2df:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

000002f0 <_ZZ15print_task_listP8emstreamE3__c_0>:
     2f0:	09 53 74 61 63 6b 00                                .Stack.

000002f7 <_ZZ15print_task_listP8emstreamE3__c>:
     2f7:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000302 <_ZZN9task_user11show_statusEvE3__c_4>:
     302:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

0000030d <_ZZN9task_user11show_statusEvE3__c_3>:
     30d:	2f 00                                               /.

0000030f <_ZZN9task_user11show_statusEvE3__c_2>:
     30f:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000031d <_ZZN9task_user11show_statusEvE3__c_1>:
     31d:	54 69 6d 65 3a 20 00                                Time: .

00000324 <_ZZN9task_user11show_statusEvE3__c_0>:
     324:	4d 61 72 20 20 38 20 32 30 32 35 00                 Mar  8 2025.

00000330 <_ZZN9task_user11show_statusEvE3__c>:
     330:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     340:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000034f <_ZZ17print_task_stacksP8emstreamE3__c_1>:
     34f:	1b 5b 32 32 6d 00                                   .[22m.

00000355 <_ZZ17print_task_stacksP8emstreamE3__c_0>:
     355:	54 61 73 6b 3a 20 49 44 4c 45 00                    Task: IDLE.

00000360 <_ZZ17print_task_stacksP8emstreamE3__c>:
     360:	1b 5b 31 6d 00                                      .[1m.

00000365 <_ZZN9task_user3runEvE3__c_3>:
     365:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     375:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

00000382 <_ZZN9task_user3runEvE3__c_2>:
     382:	3a 57 54 46 3f 00                                   :WTF?.

00000388 <_ZZN9task_user3runEvE3__c_1>:
     388:	45 78 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     Exit command mod
     398:	65 00                                               e.

0000039a <_ZZN9task_user3runEvE3__c_0>:
     39a:	52 65 73 65 74 74 69 6e 67 20 41 56 52 00           Resetting AVR.

000003a8 <_ZZN9task_user3runEvE3__c>:
     3a8:	50 72 65 73 73 20 43 74 72 6c 2d 41 20 66 6f 72     Press Ctrl-A for
     3b8:	20 63 6f 6d 6d 61 6e 64 20 6d 6f 64 65 00            command mode.

000003c6 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     3c6:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000003d5 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     3d5:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     3e5:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000003f0 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     3f0:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     400:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000040e <_ZZN9task_user18print_help_messageEvE3__c_7>:
     40e:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     41e:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     42e:	6d 61 74 69 6f 6e 00                                mation.

00000435 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     435:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     445:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000456 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     456:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     466:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000046e <_ZZN9task_user18print_help_messageEvE3__c_4>:
     46e:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     47e:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

0000048a <_ZZN9task_user18print_help_messageEvE3__c_3>:
     48a:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     49a:	68 65 20 41 56 52 00                                he AVR.

000004a1 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     4a1:	20 68 65 6c 70 00                                    help.

000004a7 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     4a7:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     4b7:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000004c6 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     4c6:	1b 5b 33 30 6d 00                                   .[30m.

000004cc <_ZZN9task_user18print_help_messageEvE3__c>:
     4cc:	1b 5b 34 36 6d 00                                   .[46m.

000004d2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     4d2:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     4e2:	61 73 6b 20 00                                      ask .

000004e7 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     4e7:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

000004f5 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     4f5:	20 63 72 65 61 74 65 64 00                           created.

000004fe <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     4fe:	54 61 73 6b 20 00                                   Task .

00000504 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_1>:
     504:	1b 5b 32 32 6d 00                                   .[22m.

0000050a <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c_0>:
     50a:	54 61 73 6b 3a 20 00                                Task: .

00000511 <_ZZN8frt_task19print_stack_in_listEP8emstreamE3__c>:
     511:	1b 5b 31 6d 00                                      .[1m.

00000516 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     516:	09 00                                               ..

00000518 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     518:	09 00                                               ..

0000051a <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     51a:	2f 00                                               /.

0000051c <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     51c:	09 00                                               ..

0000051e <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     51e:	09 00                                               ..

00000520 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_2>:
     520:	1b 5b 32 32 6d 00                                   .[22m.

00000526 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_1>:
     526:	1b 5b 31 6d 00                                      .[1m.

0000052b <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c_0>:
     52b:	1b 5b 31 6d 00                                      .[1m.

00000530 <_ZZ15hex_dump_memoryPhS_P8emstreambhE3__c>:
     530:	20 20 00 00                                           ..

00000534 <__ctors_start>:
     534:	a3 0c       	add	r10, r3

00000536 <__ctors_end>:
     536:	11 24       	eor	r1, r1
     538:	1f be       	out	0x3f, r1	; 63
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	df e3       	ldi	r29, 0x3F	; 63
     540:	de bf       	out	0x3e, r29	; 62
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0c bf       	out	0x3c, r16	; 60
     546:	18 be       	out	0x38, r1	; 56
     548:	19 be       	out	0x39, r1	; 57
     54a:	1a be       	out	0x3a, r1	; 58
     54c:	1b be       	out	0x3b, r1	; 59

0000054e <__do_copy_data>:
     54e:	10 e2       	ldi	r17, 0x20	; 32
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e2       	ldi	r27, 0x20	; 32
     554:	e6 e3       	ldi	r30, 0x36	; 54
     556:	fa e3       	ldi	r31, 0x3A	; 58
     558:	00 e0       	ldi	r16, 0x00	; 0
     55a:	0b bf       	out	0x3b, r16	; 59
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__do_copy_data+0x14>
     55e:	07 90       	elpm	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	ae 3e       	cpi	r26, 0xEE	; 238
     564:	b1 07       	cpc	r27, r17
     566:	d9 f7       	brne	.-10     	; 0x55e <__do_copy_data+0x10>
     568:	1b be       	out	0x3b, r1	; 59

0000056a <__do_clear_bss>:
     56a:	21 e3       	ldi	r18, 0x31	; 49
     56c:	ae ee       	ldi	r26, 0xEE	; 238
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 c0       	rjmp	.+2      	; 0x574 <.do_clear_bss_start>

00000572 <.do_clear_bss_loop>:
     572:	1d 92       	st	X+, r1

00000574 <.do_clear_bss_start>:
     574:	a8 39       	cpi	r26, 0x98	; 152
     576:	b2 07       	cpc	r27, r18
     578:	e1 f7       	brne	.-8      	; 0x572 <.do_clear_bss_loop>

0000057a <__do_global_ctors>:
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	cb e9       	ldi	r28, 0x9B	; 155
     57e:	d2 e0       	ldi	r29, 0x02	; 2
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	06 c0       	rjmp	.+12     	; 0x590 <__do_global_ctors+0x16>
     584:	21 97       	sbiw	r28, 0x01	; 1
     586:	01 09       	sbc	r16, r1
     588:	80 2f       	mov	r24, r16
     58a:	fe 01       	movw	r30, r28
     58c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <__tablejump2__>
     590:	ca 39       	cpi	r28, 0x9A	; 154
     592:	d1 07       	cpc	r29, r17
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 07       	cpc	r16, r24
     598:	a9 f7       	brne	.-22     	; 0x584 <__do_global_ctors+0xa>
     59a:	0e 94 c7 0c 	call	0x198e	; 0x198e <main>
     59e:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

000005a2 <__bad_interrupt>:
     5a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a6 <_ZN8emstream12clear_screenEv>:
     5a6:	08 95       	ret

000005a8 <_ZN8emstream12transmit_nowEv>:
     5a8:	08 95       	ret

000005aa <_ZN8emstream14check_for_charEv>:
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <_ZN8emstream7getcharEv>:
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <_ZN8emstream13ready_to_sendEv>:
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	08 95       	ret

000005b8 <__cxa_pure_virtual>:
     5b8:	08 95       	ret

000005ba <_ZN10time_stamp10set_to_nowEv>:
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	0f 92       	push	r0
     5c6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     5ca:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     5ce:	8c 83       	std	Y+4, r24	; 0x04
     5d0:	9d 83       	std	Y+5, r25	; 0x05
     5d2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
     5d6:	68 83       	st	Y, r22
     5d8:	79 83       	std	Y+1, r23	; 0x01
     5da:	8a 83       	std	Y+2, r24	; 0x02
     5dc:	9b 83       	std	Y+3, r25	; 0x03
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	ce 01       	movw	r24, r28
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <_ZN14frt_text_queue7getcharEv>:
     5ea:	0f 93       	push	r16
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	1f 92       	push	r1
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	00 e0       	ldi	r16, 0x00	; 0
     5f8:	2f ef       	ldi	r18, 0xFF	; 255
     5fa:	3f ef       	ldi	r19, 0xFF	; 255
     5fc:	a9 01       	movw	r20, r18
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	fc 01       	movw	r30, r24
     606:	80 85       	ldd	r24, Z+8	; 0x08
     608:	91 85       	ldd	r25, Z+9	; 0x09
     60a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <xQueueGenericReceive>
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	19 f4       	brne	.+6      	; 0x618 <_ZN14frt_text_queue7getcharEv+0x2e>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <_ZN14frt_text_queue7getcharEv+0x32>
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	9f ef       	ldi	r25, 0xFF	; 255
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <_ZN14frt_text_queue14check_for_charEv>:
     626:	fc 01       	movw	r30, r24
     628:	80 85       	ldd	r24, Z+8	; 0x08
     62a:	91 85       	ldd	r25, Z+9	; 0x09
     62c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <uxQueueMessagesWaiting>
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	81 11       	cpse	r24, r1
     634:	01 c0       	rjmp	.+2      	; 0x638 <_ZN14frt_text_queue14check_for_charEv+0x12>
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	89 2f       	mov	r24, r25
     63a:	08 95       	ret

0000063c <_ZN14frt_text_queue7putcharEc>:
     63c:	0f 93       	push	r16
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	69 83       	std	Y+1, r22	; 0x01
     64a:	fc 01       	movw	r30, r24
     64c:	22 85       	ldd	r18, Z+10	; 0x0a
     64e:	33 85       	ldd	r19, Z+11	; 0x0b
     650:	44 85       	ldd	r20, Z+12	; 0x0c
     652:	55 85       	ldd	r21, Z+13	; 0x0d
     654:	00 e0       	ldi	r16, 0x00	; 0
     656:	be 01       	movw	r22, r28
     658:	6f 5f       	subi	r22, 0xFF	; 255
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	80 85       	ldd	r24, Z+8	; 0x08
     65e:	91 85       	ldd	r25, Z+9	; 0x09
     660:	0e 94 c3 14 	call	0x2986	; 0x2986 <xQueueGenericSend>
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	81 11       	cpse	r24, r1
     668:	01 c0       	rjmp	.+2      	; 0x66c <_ZN14frt_text_queue7putcharEc+0x30>
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	89 2f       	mov	r24, r25
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	0f 91       	pop	r16
     676:	08 95       	ret

00000678 <_call_static_run_method>:
     678:	ec 01       	movw	r28, r24
     67a:	e8 81       	ld	r30, Y
     67c:	f9 81       	ldd	r31, Y+1	; 0x01
     67e:	01 90       	ld	r0, Z+
     680:	f0 81       	ld	r31, Z
     682:	e0 2d       	mov	r30, r0
     684:	19 95       	eicall
     686:	1a 82       	std	Y+2, r1	; 0x02
     688:	1b 82       	std	Y+3, r1	; 0x03
     68a:	6f ef       	ldi	r22, 0xFF	; 255
     68c:	7f ef       	ldi	r23, 0xFF	; 255
     68e:	cb 01       	movw	r24, r22
     690:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <vTaskDelay>
     694:	fa cf       	rjmp	.-12     	; 0x68a <_call_static_run_method+0x12>

00000696 <_ZN22task_system_controller3runEv>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <_ZN22task_system_controller3runEv+0x6>
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	8c 01       	movw	r16, r24
     6a4:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
     6a8:	69 83       	std	Y+1, r22	; 0x01
     6aa:	7a 83       	std	Y+2, r23	; 0x02
     6ac:	8b 83       	std	Y+3, r24	; 0x03
     6ae:	9c 83       	std	Y+4, r25	; 0x04
     6b0:	f8 01       	movw	r30, r16
     6b2:	86 85       	ldd	r24, Z+14	; 0x0e
     6b4:	97 85       	ldd	r25, Z+15	; 0x0f
     6b6:	a0 89       	ldd	r26, Z+16	; 0x10
     6b8:	b1 89       	ldd	r27, Z+17	; 0x11
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	a1 1d       	adc	r26, r1
     6be:	b1 1d       	adc	r27, r1
     6c0:	86 87       	std	Z+14, r24	; 0x0e
     6c2:	97 87       	std	Z+15, r25	; 0x0f
     6c4:	a0 8b       	std	Z+16, r26	; 0x10
     6c6:	b1 8b       	std	Z+17, r27	; 0x11
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskDelayUntil>
     6d8:	eb cf       	rjmp	.-42     	; 0x6b0 <_ZN22task_system_controller3runEv+0x1a>

000006da <_ZN21task_pendulum_encoder3runEv>:
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <_ZN21task_pendulum_encoder3runEv+0x6>
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	8c 01       	movw	r16, r24
     6e8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
     6ec:	69 83       	std	Y+1, r22	; 0x01
     6ee:	7a 83       	std	Y+2, r23	; 0x02
     6f0:	8b 83       	std	Y+3, r24	; 0x03
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	e0 e8       	ldi	r30, 0x80	; 128
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	82 83       	std	Z+2, r24	; 0x02
     6fc:	80 8b       	std	Z+16, r24	; 0x10
     6fe:	81 8b       	std	Z+17, r24	; 0x11
     700:	e0 e8       	ldi	r30, 0x80	; 128
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	80 e7       	ldi	r24, 0x70	; 112
     706:	82 83       	std	Z+2, r24	; 0x02
     708:	89 e0       	ldi	r24, 0x09	; 9
     70a:	82 87       	std	Z+10, r24	; 0x0a
     70c:	e0 e4       	ldi	r30, 0x40	; 64
     70e:	f8 e0       	ldi	r31, 0x08	; 8
     710:	8a e6       	ldi	r24, 0x6A	; 106
     712:	83 83       	std	Z+3, r24	; 0x03
     714:	8d ec       	ldi	r24, 0xCD	; 205
     716:	97 e0       	ldi	r25, 0x07	; 7
     718:	86 a3       	std	Z+38, r24	; 0x26
     71a:	97 a3       	std	Z+39, r25	; 0x27
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 83       	st	Z, r24
     720:	68 94       	set
     722:	ee 24       	eor	r14, r14
     724:	e6 f8       	bld	r14, 6
     726:	ff 24       	eor	r15, r15
     728:	f3 f8       	bld	r15, 3
     72a:	f7 01       	movw	r30, r14
     72c:	80 a1       	ldd	r24, Z+32	; 0x20
     72e:	91 a1       	ldd	r25, Z+33	; 0x21
     730:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <pendulum_encoder>
     734:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <pendulum_encoder+0x1>
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	0f 92       	push	r0
     73e:	80 83       	st	Z, r24
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	f8 01       	movw	r30, r16
     748:	86 85       	ldd	r24, Z+14	; 0x0e
     74a:	97 85       	ldd	r25, Z+15	; 0x0f
     74c:	a0 89       	ldd	r26, Z+16	; 0x10
     74e:	b1 89       	ldd	r27, Z+17	; 0x11
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	a1 1d       	adc	r26, r1
     754:	b1 1d       	adc	r27, r1
     756:	86 87       	std	Z+14, r24	; 0x0e
     758:	97 87       	std	Z+15, r25	; 0x0f
     75a:	a0 8b       	std	Z+16, r26	; 0x10
     75c:	b1 8b       	std	Z+17, r27	; 0x11
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskDelayUntil>
     76e:	dd cf       	rjmp	.-70     	; 0x72a <_ZN21task_pendulum_encoder3runEv+0x50>

00000770 <_ZN18task_motor_command3runEv>:
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	00 d0       	rcall	.+0      	; 0x776 <_ZN18task_motor_command3runEv+0x6>
     776:	1f 92       	push	r1
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	8c 01       	movw	r16, r24
     77e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
     782:	69 83       	std	Y+1, r22	; 0x01
     784:	7a 83       	std	Y+2, r23	; 0x02
     786:	8b 83       	std	Y+3, r24	; 0x03
     788:	9c 83       	std	Y+4, r25	; 0x04
     78a:	f8 01       	movw	r30, r16
     78c:	86 85       	ldd	r24, Z+14	; 0x0e
     78e:	97 85       	ldd	r25, Z+15	; 0x0f
     790:	a0 89       	ldd	r26, Z+16	; 0x10
     792:	b1 89       	ldd	r27, Z+17	; 0x11
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	a1 1d       	adc	r26, r1
     798:	b1 1d       	adc	r27, r1
     79a:	86 87       	std	Z+14, r24	; 0x0e
     79c:	97 87       	std	Z+15, r25	; 0x0f
     79e:	a0 8b       	std	Z+16, r26	; 0x10
     7a0:	b1 8b       	std	Z+17, r27	; 0x11
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskDelayUntil>
     7b2:	eb cf       	rjmp	.-42     	; 0x78a <_ZN18task_motor_command3runEv+0x1a>

000007b4 <_ZN17task_limit_switch3runEv>:
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <_ZN17task_limit_switch3runEv+0x6>
     7ba:	1f 92       	push	r1
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	8c 01       	movw	r16, r24
     7c2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
     7c6:	69 83       	std	Y+1, r22	; 0x01
     7c8:	7a 83       	std	Y+2, r23	; 0x02
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	9c 83       	std	Y+4, r25	; 0x04
     7ce:	e0 e6       	ldi	r30, 0x60	; 96
     7d0:	f6 e0       	ldi	r31, 0x06	; 6
     7d2:	90 81       	ld	r25, Z
     7d4:	d8 01       	movw	r26, r16
     7d6:	52 96       	adiw	r26, 0x12	; 18
     7d8:	8c 91       	ld	r24, X
     7da:	52 97       	sbiw	r26, 0x12	; 18
     7dc:	89 2b       	or	r24, r25
     7de:	80 83       	st	Z, r24
     7e0:	94 81       	ldd	r25, Z+4	; 0x04
     7e2:	52 96       	adiw	r26, 0x12	; 18
     7e4:	8c 91       	ld	r24, X
     7e6:	52 97       	sbiw	r26, 0x12	; 18
     7e8:	89 2b       	or	r24, r25
     7ea:	84 83       	std	Z+4, r24	; 0x04
     7ec:	52 96       	adiw	r26, 0x12	; 18
     7ee:	8c 91       	ld	r24, X
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	21 f4       	brne	.+8      	; 0x7fc <_ZN17task_limit_switch3runEv+0x48>
     7f4:	88 e1       	ldi	r24, 0x18	; 24
     7f6:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <_ZN17task_limit_switch3runEv+0x52>
     7fc:	84 30       	cpi	r24, 0x04	; 4
     7fe:	19 f4       	brne	.+6      	; 0x806 <_ZN17task_limit_switch3runEv+0x52>
     800:	88 e1       	ldi	r24, 0x18	; 24
     802:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <__TEXT_REGION_LENGTH__+0x700672>
     806:	0f 2e       	mov	r0, r31
     808:	f8 e6       	ldi	r31, 0x68	; 104
     80a:	ef 2e       	mov	r14, r31
     80c:	f6 e0       	ldi	r31, 0x06	; 6
     80e:	ff 2e       	mov	r15, r31
     810:	f0 2d       	mov	r31, r0
     812:	dd 24       	eor	r13, r13
     814:	d3 94       	inc	r13
     816:	f7 01       	movw	r30, r14
     818:	80 81       	ld	r24, Z
     81a:	80 fd       	sbrc	r24, 0
     81c:	0b c0       	rjmp	.+22     	; 0x834 <_ZN17task_limit_switch3runEv+0x80>
     81e:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <leftLimitSwitch>
     822:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <leftLimitSwitch+0x1>
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	0f 92       	push	r0
     82c:	d0 82       	st	Z, r13
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0a c0       	rjmp	.+20     	; 0x848 <_ZN17task_limit_switch3runEv+0x94>
     834:	e0 91 fc 20 	lds	r30, 0x20FC	; 0x8020fc <leftLimitSwitch>
     838:	f0 91 fd 20 	lds	r31, 0x20FD	; 0x8020fd <leftLimitSwitch+0x1>
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	0f 92       	push	r0
     842:	10 82       	st	Z, r1
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	d7 01       	movw	r26, r14
     84a:	8c 91       	ld	r24, X
     84c:	82 fd       	sbrc	r24, 2
     84e:	0b c0       	rjmp	.+22     	; 0x866 <_ZN17task_limit_switch3runEv+0xb2>
     850:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <rightLimitSwitch>
     854:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <rightLimitSwitch+0x1>
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	0f 92       	push	r0
     85e:	d0 82       	st	Z, r13
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0a c0       	rjmp	.+20     	; 0x87a <_ZN17task_limit_switch3runEv+0xc6>
     866:	e0 91 fa 20 	lds	r30, 0x20FA	; 0x8020fa <rightLimitSwitch>
     86a:	f0 91 fb 20 	lds	r31, 0x20FB	; 0x8020fb <rightLimitSwitch+0x1>
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	0f 92       	push	r0
     874:	10 82       	st	Z, r1
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	f8 01       	movw	r30, r16
     87c:	86 85       	ldd	r24, Z+14	; 0x0e
     87e:	97 85       	ldd	r25, Z+15	; 0x0f
     880:	a0 89       	ldd	r26, Z+16	; 0x10
     882:	b1 89       	ldd	r27, Z+17	; 0x11
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
     88a:	86 87       	std	Z+14, r24	; 0x0e
     88c:	97 87       	std	Z+15, r25	; 0x0f
     88e:	a0 8b       	std	Z+16, r26	; 0x10
     890:	b1 8b       	std	Z+17, r27	; 0x11
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskDelayUntil>
     8a2:	b9 cf       	rjmp	.-142    	; 0x816 <_ZN17task_limit_switch3runEv+0x62>

000008a4 <_ZN8emstreamlsE15ser_manipulator>:
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	86 2f       	mov	r24, r22
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	8b 30       	cpi	r24, 0x0B	; 11
     8b0:	91 05       	cpc	r25, r1
     8b2:	d8 f5       	brcc	.+118    	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8b4:	fc 01       	movw	r30, r24
     8b6:	88 27       	eor	r24, r24
     8b8:	e2 50       	subi	r30, 0x02	; 2
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	8f 4f       	sbci	r24, 0xFF	; 255
     8be:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__tablejump2__>
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	8a 83       	std	Y+2, r24	; 0x02
     8c6:	31 c0       	rjmp	.+98     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	8a 83       	std	Y+2, r24	; 0x02
     8cc:	2e c0       	rjmp	.+92     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	2b c0       	rjmp	.+86     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8d4:	80 e1       	ldi	r24, 0x10	; 16
     8d6:	8a 83       	std	Y+2, r24	; 0x02
     8d8:	28 c0       	rjmp	.+80     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	25 c0       	rjmp	.+74     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8e0:	1b 82       	std	Y+3, r1	; 0x03
     8e2:	23 c0       	rjmp	.+70     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     8e4:	e8 81       	ld	r30, Y
     8e6:	f9 81       	ldd	r31, Y+1	; 0x01
     8e8:	02 80       	ldd	r0, Z+2	; 0x02
     8ea:	f3 81       	ldd	r31, Z+3	; 0x03
     8ec:	e0 2d       	mov	r30, r0
     8ee:	6d e0       	ldi	r22, 0x0D	; 13
     8f0:	ce 01       	movw	r24, r28
     8f2:	19 95       	eicall
     8f4:	e8 81       	ld	r30, Y
     8f6:	f9 81       	ldd	r31, Y+1	; 0x01
     8f8:	02 80       	ldd	r0, Z+2	; 0x02
     8fa:	f3 81       	ldd	r31, Z+3	; 0x03
     8fc:	e0 2d       	mov	r30, r0
     8fe:	6a e0       	ldi	r22, 0x0A	; 10
     900:	ce 01       	movw	r24, r28
     902:	19 95       	eicall
     904:	12 c0       	rjmp	.+36     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	02 84       	ldd	r0, Z+10	; 0x0a
     90c:	f3 85       	ldd	r31, Z+11	; 0x0b
     90e:	e0 2d       	mov	r30, r0
     910:	ce 01       	movw	r24, r28
     912:	19 95       	eicall
     914:	0a c0       	rjmp	.+20     	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     916:	e8 81       	ld	r30, Y
     918:	f9 81       	ldd	r31, Y+1	; 0x01
     91a:	00 84       	ldd	r0, Z+8	; 0x08
     91c:	f1 85       	ldd	r31, Z+9	; 0x09
     91e:	e0 2d       	mov	r30, r0
     920:	ce 01       	movw	r24, r28
     922:	19 95       	eicall
     924:	02 c0       	rjmp	.+4      	; 0x92a <_ZN8emstreamlsE15ser_manipulator+0x86>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	8c 83       	std	Y+4, r24	; 0x04
     92a:	ce 01       	movw	r24, r28
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <_ZN8frt_task20print_status_in_listEP8emstream>:
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	8b 01       	movw	r16, r22
     93e:	e8 81       	ld	r30, Y
     940:	f9 81       	ldd	r31, Y+1	; 0x01
     942:	02 80       	ldd	r0, Z+2	; 0x02
     944:	f3 81       	ldd	r31, Z+3	; 0x03
     946:	e0 2d       	mov	r30, r0
     948:	19 95       	eicall
     94a:	66 e0       	ldi	r22, 0x06	; 6
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     952:	8c 81       	ldd	r24, Y+4	; 0x04
     954:	9d 81       	ldd	r25, Y+5	; 0x05
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	19 f0       	breq	.+6      	; 0x960 <_ZN8frt_task20print_status_in_listEP8emstream+0x2e>
     95a:	b8 01       	movw	r22, r16
     95c:	0e 94 99 04 	call	0x932	; 0x932 <_ZN8frt_task20print_status_in_listEP8emstream>
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <_ZN8emstream4putsEPKc>:
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	8c 01       	movw	r16, r24
     974:	fb 01       	movw	r30, r22
     976:	dc 01       	movw	r26, r24
     978:	14 96       	adiw	r26, 0x04	; 4
     97a:	8c 91       	ld	r24, X
     97c:	81 11       	cpse	r24, r1
     97e:	04 c0       	rjmp	.+8      	; 0x988 <_ZN8emstream4putsEPKc+0x1e>
     980:	60 81       	ld	r22, Z
     982:	61 11       	cpse	r22, r1
     984:	17 c0       	rjmp	.+46     	; 0x9b4 <_ZN8emstream4putsEPKc+0x4a>
     986:	23 c0       	rjmp	.+70     	; 0x9ce <_ZN8emstream4putsEPKc+0x64>
     988:	d8 01       	movw	r26, r16
     98a:	14 96       	adiw	r26, 0x04	; 4
     98c:	1c 92       	st	X, r1
     98e:	eb 01       	movw	r28, r22
     990:	21 96       	adiw	r28, 0x01	; 1
     992:	64 91       	lpm	r22, Z
     994:	66 23       	and	r22, r22
     996:	d9 f0       	breq	.+54     	; 0x9ce <_ZN8emstream4putsEPKc+0x64>
     998:	d8 01       	movw	r26, r16
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	02 80       	ldd	r0, Z+2	; 0x02
     9a0:	f3 81       	ldd	r31, Z+3	; 0x03
     9a2:	e0 2d       	mov	r30, r0
     9a4:	c8 01       	movw	r24, r16
     9a6:	19 95       	eicall
     9a8:	fe 01       	movw	r30, r28
     9aa:	64 91       	lpm	r22, Z
     9ac:	21 96       	adiw	r28, 0x01	; 1
     9ae:	61 11       	cpse	r22, r1
     9b0:	f3 cf       	rjmp	.-26     	; 0x998 <_ZN8emstream4putsEPKc+0x2e>
     9b2:	0d c0       	rjmp	.+26     	; 0x9ce <_ZN8emstream4putsEPKc+0x64>
     9b4:	ef 01       	movw	r28, r30
     9b6:	21 96       	adiw	r28, 0x01	; 1
     9b8:	d8 01       	movw	r26, r16
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	02 80       	ldd	r0, Z+2	; 0x02
     9c0:	f3 81       	ldd	r31, Z+3	; 0x03
     9c2:	e0 2d       	mov	r30, r0
     9c4:	c8 01       	movw	r24, r16
     9c6:	19 95       	eicall
     9c8:	69 91       	ld	r22, Y+
     9ca:	61 11       	cpse	r22, r1
     9cc:	f5 cf       	rjmp	.-22     	; 0x9b8 <_ZN8emstream4putsEPKc+0x4e>
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	08 95       	ret

000009d8 <_ZN8emstreamlsEm>:
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	a1 97       	sbiw	r28, 0x21	; 33
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	8c 01       	movw	r16, r24
     9f2:	d4 2e       	mov	r13, r20
     9f4:	e5 2e       	mov	r14, r21
     9f6:	f6 2e       	mov	r15, r22
     9f8:	97 2f       	mov	r25, r23
     9fa:	f8 01       	movw	r30, r16
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	20 31       	cpi	r18, 0x10	; 16
     a00:	21 f0       	breq	.+8      	; 0xa0a <_ZN8emstreamlsEm+0x32>
     a02:	28 30       	cpi	r18, 0x08	; 8
     a04:	11 f0       	breq	.+4      	; 0xa0a <_ZN8emstreamlsEm+0x32>
     a06:	22 30       	cpi	r18, 0x02	; 2
     a08:	71 f4       	brne	.+28     	; 0xa26 <_ZN8emstreamlsEm+0x4e>
     a0a:	69 2f       	mov	r22, r25
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a12:	6f 2d       	mov	r22, r15
     a14:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a18:	6e 2d       	mov	r22, r14
     a1a:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a1e:	6d 2d       	mov	r22, r13
     a20:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a24:	0f c0       	rjmp	.+30     	; 0xa44 <_ZN8emstreamlsEm+0x6c>
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	ae 01       	movw	r20, r28
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	6d 2d       	mov	r22, r13
     a30:	7e 2d       	mov	r23, r14
     a32:	8f 2d       	mov	r24, r15
     a34:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <ultoa>
     a38:	be 01       	movw	r22, r28
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	c8 01       	movw	r24, r16
     a40:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     a44:	c8 01       	movw	r24, r16
     a46:	a1 96       	adiw	r28, 0x21	; 33
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	08 95       	ret

00000a5c <_ZN8emstreamlsEj>:
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	61 97       	sbiw	r28, 0x11	; 17
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	8c 01       	movw	r16, r24
     a72:	f6 2e       	mov	r15, r22
     a74:	97 2f       	mov	r25, r23
     a76:	f8 01       	movw	r30, r16
     a78:	42 81       	ldd	r20, Z+2	; 0x02
     a7a:	40 31       	cpi	r20, 0x10	; 16
     a7c:	21 f0       	breq	.+8      	; 0xa86 <_ZN8emstreamlsEj+0x2a>
     a7e:	48 30       	cpi	r20, 0x08	; 8
     a80:	11 f0       	breq	.+4      	; 0xa86 <_ZN8emstreamlsEj+0x2a>
     a82:	42 30       	cpi	r20, 0x02	; 2
     a84:	41 f4       	brne	.+16     	; 0xa96 <_ZN8emstreamlsEj+0x3a>
     a86:	69 2f       	mov	r22, r25
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a8e:	6f 2d       	mov	r22, r15
     a90:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <_ZN8emstreamlsEj+0x54>
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 2d       	mov	r24, r15
     aa0:	0e 94 89 1c 	call	0x3912	; 0x3912 <utoa>
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     ab0:	c8 01       	movw	r24, r16
     ab2:	61 96       	adiw	r28, 0x11	; 17
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	08 95       	ret

00000ac4 <_ZN8emstreamlsEi>:
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	61 97       	sbiw	r28, 0x11	; 17
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	8c 01       	movw	r16, r24
     ad8:	9b 01       	movw	r18, r22
     ada:	fc 01       	movw	r30, r24
     adc:	92 81       	ldd	r25, Z+2	; 0x02
     ade:	9a 30       	cpi	r25, 0x0A	; 10
     ae0:	21 f0       	breq	.+8      	; 0xaea <_ZN8emstreamlsEi+0x26>
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
     ae8:	0d c0       	rjmp	.+26     	; 0xb04 <_ZN8emstreamlsEi+0x40>
     aea:	4a e0       	ldi	r20, 0x0A	; 10
     aec:	be 01       	movw	r22, r28
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	c9 01       	movw	r24, r18
     af4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__itoa_ncheck>
     af8:	be 01       	movw	r22, r28
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	c8 01       	movw	r24, r16
     b00:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     b04:	c8 01       	movw	r24, r16
     b06:	61 96       	adiw	r28, 0x11	; 17
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <_Z15hex_dump_memoryPhS_P8emstreambh>:
     b16:	5f 92       	push	r5
     b18:	6f 92       	push	r6
     b1a:	7f 92       	push	r7
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	5c 01       	movw	r10, r24
     b36:	3b 01       	movw	r6, r22
     b38:	4a 01       	movw	r8, r20
     b3a:	12 2f       	mov	r17, r18
     b3c:	50 2e       	mov	r5, r16
     b3e:	63 e0       	ldi	r22, 0x03	; 3
     b40:	ca 01       	movw	r24, r20
     b42:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     b46:	a6 14       	cp	r10, r6
     b48:	b7 04       	cpc	r11, r7
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <_Z15hex_dump_memoryPhS_P8emstreambh+0x38>
     b4c:	7c c0       	rjmp	.+248    	; 0xc46 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     b4e:	65 01       	movw	r12, r10
     b50:	84 e1       	ldi	r24, 0x14	; 20
     b52:	c8 0e       	add	r12, r24
     b54:	d1 1c       	adc	r13, r1
     b56:	00 e0       	ldi	r16, 0x00	; 0
     b58:	75 01       	movw	r14, r10
     b5a:	b5 01       	movw	r22, r10
     b5c:	c4 01       	movw	r24, r8
     b5e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
     b62:	6a e0       	ldi	r22, 0x0A	; 10
     b64:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     b68:	60 e3       	ldi	r22, 0x30	; 48
     b6a:	75 e0       	ldi	r23, 0x05	; 5
     b6c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     b70:	11 23       	and	r17, r17
     b72:	09 f4       	brne	.+2      	; 0xb76 <_Z15hex_dump_memoryPhS_P8emstreambh+0x60>
     b74:	6d c0       	rjmp	.+218    	; 0xc50 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     b76:	00 23       	and	r16, r16
     b78:	09 f4       	brne	.+2      	; 0xb7c <_Z15hex_dump_memoryPhS_P8emstreambh+0x66>
     b7a:	6a c0       	rjmp	.+212    	; 0xc50 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     b7c:	6a e0       	ldi	r22, 0x0A	; 10
     b7e:	c4 01       	movw	r24, r8
     b80:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     b84:	6b e2       	ldi	r22, 0x2B	; 43
     b86:	75 e0       	ldi	r23, 0x05	; 5
     b88:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     b8c:	61 c0       	rjmp	.+194    	; 0xc50 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13a>
     b8e:	11 23       	and	r17, r17
     b90:	71 f0       	breq	.+28     	; 0xbae <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     b92:	01 11       	cpse	r16, r1
     b94:	0c c0       	rjmp	.+24     	; 0xbae <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     b96:	88 81       	ld	r24, Y
     b98:	85 15       	cp	r24, r5
     b9a:	49 f0       	breq	.+18     	; 0xbae <_Z15hex_dump_memoryPhS_P8emstreambh+0x98>
     b9c:	6a e0       	ldi	r22, 0x0A	; 10
     b9e:	c4 01       	movw	r24, r8
     ba0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     ba4:	66 e2       	ldi	r22, 0x26	; 38
     ba6:	75 e0       	ldi	r23, 0x05	; 5
     ba8:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     bac:	01 e0       	ldi	r16, 0x01	; 1
     bae:	69 91       	ld	r22, Y+
     bb0:	c4 01       	movw	r24, r8
     bb2:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     bb6:	dc 01       	movw	r26, r24
     bb8:	ed 91       	ld	r30, X+
     bba:	fc 91       	ld	r31, X
     bbc:	02 80       	ldd	r0, Z+2	; 0x02
     bbe:	f3 81       	ldd	r31, Z+3	; 0x03
     bc0:	e0 2d       	mov	r30, r0
     bc2:	60 e2       	ldi	r22, 0x20	; 32
     bc4:	19 95       	eicall
     bc6:	cc 16       	cp	r12, r28
     bc8:	dd 06       	cpc	r13, r29
     bca:	09 f7       	brne	.-62     	; 0xb8e <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     bcc:	11 23       	and	r17, r17
     bce:	89 f0       	breq	.+34     	; 0xbf2 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     bd0:	6a e0       	ldi	r22, 0x0A	; 10
     bd2:	c4 01       	movw	r24, r8
     bd4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     bd8:	ec 01       	movw	r28, r24
     bda:	60 e2       	ldi	r22, 0x20	; 32
     bdc:	75 e0       	ldi	r23, 0x05	; 5
     bde:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     be2:	e8 81       	ld	r30, Y
     be4:	f9 81       	ldd	r31, Y+1	; 0x01
     be6:	02 80       	ldd	r0, Z+2	; 0x02
     be8:	f3 81       	ldd	r31, Z+3	; 0x03
     bea:	e0 2d       	mov	r30, r0
     bec:	60 e2       	ldi	r22, 0x20	; 32
     bee:	ce 01       	movw	r24, r28
     bf0:	19 95       	eicall
     bf2:	f7 01       	movw	r30, r14
     bf4:	61 91       	ld	r22, Z+
     bf6:	7f 01       	movw	r14, r30
     bf8:	80 ee       	ldi	r24, 0xE0	; 224
     bfa:	86 0f       	add	r24, r22
     bfc:	8f 35       	cpi	r24, 0x5F	; 95
     bfe:	48 f4       	brcc	.+18     	; 0xc12 <_Z15hex_dump_memoryPhS_P8emstreambh+0xfc>
     c00:	d4 01       	movw	r26, r8
     c02:	ed 91       	ld	r30, X+
     c04:	fc 91       	ld	r31, X
     c06:	02 80       	ldd	r0, Z+2	; 0x02
     c08:	f3 81       	ldd	r31, Z+3	; 0x03
     c0a:	e0 2d       	mov	r30, r0
     c0c:	c4 01       	movw	r24, r8
     c0e:	19 95       	eicall
     c10:	09 c0       	rjmp	.+18     	; 0xc24 <_Z15hex_dump_memoryPhS_P8emstreambh+0x10e>
     c12:	d4 01       	movw	r26, r8
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	02 80       	ldd	r0, Z+2	; 0x02
     c1a:	f3 81       	ldd	r31, Z+3	; 0x03
     c1c:	e0 2d       	mov	r30, r0
     c1e:	6e e2       	ldi	r22, 0x2E	; 46
     c20:	c4 01       	movw	r24, r8
     c22:	19 95       	eicall
     c24:	ce 14       	cp	r12, r14
     c26:	df 04       	cpc	r13, r15
     c28:	21 f7       	brne	.-56     	; 0xbf2 <_Z15hex_dump_memoryPhS_P8emstreambh+0xdc>
     c2a:	b4 e1       	ldi	r27, 0x14	; 20
     c2c:	ab 0e       	add	r10, r27
     c2e:	b1 1c       	adc	r11, r1
     c30:	66 e0       	ldi	r22, 0x06	; 6
     c32:	c4 01       	movw	r24, r8
     c34:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     c38:	e4 e1       	ldi	r30, 0x14	; 20
     c3a:	ce 0e       	add	r12, r30
     c3c:	d1 1c       	adc	r13, r1
     c3e:	a6 14       	cp	r10, r6
     c40:	b7 04       	cpc	r11, r7
     c42:	08 f4       	brcc	.+2      	; 0xc46 <_Z15hex_dump_memoryPhS_P8emstreambh+0x130>
     c44:	89 cf       	rjmp	.-238    	; 0xb58 <_Z15hex_dump_memoryPhS_P8emstreambh+0x42>
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	c4 01       	movw	r24, r8
     c4a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <_Z15hex_dump_memoryPhS_P8emstreambh+0x13e>
     c50:	e7 01       	movw	r28, r14
     c52:	9d cf       	rjmp	.-198    	; 0xb8e <_Z15hex_dump_memoryPhS_P8emstreambh+0x78>
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	7f 90       	pop	r7
     c6e:	6f 90       	pop	r6
     c70:	5f 90       	pop	r5
     c72:	08 95       	ret

00000c74 <_ZlsR8emstreamR10time_stamp>:
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	2f 97       	sbiw	r28, 0x0f	; 15
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	8c 01       	movw	r16, r24
     c94:	7b 01       	movw	r14, r22
     c96:	db 01       	movw	r26, r22
     c98:	6d 91       	ld	r22, X+
     c9a:	7d 91       	ld	r23, X+
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	0f 2e       	mov	r0, r31
     ca2:	f8 ee       	ldi	r31, 0xE8	; 232
     ca4:	8f 2e       	mov	r8, r31
     ca6:	f3 e0       	ldi	r31, 0x03	; 3
     ca8:	9f 2e       	mov	r9, r31
     caa:	a1 2c       	mov	r10, r1
     cac:	b1 2c       	mov	r11, r1
     cae:	f0 2d       	mov	r31, r0
     cb0:	a5 01       	movw	r20, r10
     cb2:	94 01       	movw	r18, r8
     cb4:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
     cb8:	ba 01       	movw	r22, r20
     cba:	a9 01       	movw	r20, r18
     cbc:	c8 01       	movw	r24, r16
     cbe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN8emstreamlsEm>
     cc2:	d8 01       	movw	r26, r16
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	02 80       	ldd	r0, Z+2	; 0x02
     cca:	f3 81       	ldd	r31, Z+3	; 0x03
     ccc:	e0 2d       	mov	r30, r0
     cce:	6e e2       	ldi	r22, 0x2E	; 46
     cd0:	c8 01       	movw	r24, r16
     cd2:	19 95       	eicall
     cd4:	f7 01       	movw	r30, r14
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	a5 01       	movw	r20, r10
     ce0:	94 01       	movw	r18, r8
     ce2:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	60 e4       	ldi	r22, 0x40	; 64
     cec:	72 e4       	ldi	r23, 0x42	; 66
     cee:	8f e0       	ldi	r24, 0x0F	; 15
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 be 1c 	call	0x397c	; 0x397c <__mulsi3>
     cf6:	a5 01       	movw	r20, r10
     cf8:	94 01       	movw	r18, r8
     cfa:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
     cfe:	49 01       	movw	r8, r18
     d00:	5a 01       	movw	r10, r20
     d02:	f7 01       	movw	r30, r14
     d04:	a4 81       	ldd	r26, Z+4	; 0x04
     d06:	b5 81       	ldd	r27, Z+5	; 0x05
     d08:	20 e4       	ldi	r18, 0x40	; 64
     d0a:	32 e4       	ldi	r19, 0x42	; 66
     d0c:	4f e0       	ldi	r20, 0x0F	; 15
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__muluhisi3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	38 e4       	ldi	r19, 0x48	; 72
     d18:	48 ee       	ldi	r20, 0xE8	; 232
     d1a:	51 e0       	ldi	r21, 0x01	; 1
     d1c:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
     d20:	c5 01       	movw	r24, r10
     d22:	b4 01       	movw	r22, r8
     d24:	62 0f       	add	r22, r18
     d26:	73 1f       	adc	r23, r19
     d28:	84 1f       	adc	r24, r20
     d2a:	95 1f       	adc	r25, r21
     d2c:	7e 01       	movw	r14, r28
     d2e:	f7 e0       	ldi	r31, 0x07	; 7
     d30:	ef 0e       	add	r14, r31
     d32:	f1 1c       	adc	r15, r1
     d34:	9e 01       	movw	r18, r28
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	59 01       	movw	r10, r18
     d3c:	2a e0       	ldi	r18, 0x0A	; 10
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__divmodsi4>
     d48:	e6 2f       	mov	r30, r22
     d4a:	28 87       	std	Y+8, r18	; 0x08
     d4c:	39 87       	std	Y+9, r19	; 0x09
     d4e:	4a 87       	std	Y+10, r20	; 0x0a
     d50:	5b 87       	std	Y+11, r21	; 0x0b
     d52:	68 85       	ldd	r22, Y+8	; 0x08
     d54:	79 85       	ldd	r23, Y+9	; 0x09
     d56:	8a 85       	ldd	r24, Y+10	; 0x0a
     d58:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5a:	20 e3       	ldi	r18, 0x30	; 48
     d5c:	2e 0f       	add	r18, r30
     d5e:	d7 01       	movw	r26, r14
     d60:	2e 93       	st	-X, r18
     d62:	7d 01       	movw	r14, r26
     d64:	aa 15       	cp	r26, r10
     d66:	bb 05       	cpc	r27, r11
     d68:	49 f7       	brne	.-46     	; 0xd3c <_ZlsR8emstreamR10time_stamp+0xc8>
     d6a:	1f 82       	std	Y+7, r1	; 0x07
     d6c:	be 01       	movw	r22, r28
     d6e:	6f 5f       	subi	r22, 0xFF	; 255
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	c8 01       	movw	r24, r16
     d74:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     d78:	c8 01       	movw	r24, r16
     d7a:	2f 96       	adiw	r28, 0x0f	; 15
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	9f 90       	pop	r9
     d92:	8f 90       	pop	r8
     d94:	08 95       	ret

00000d96 <_ZN8frt_task12print_statusER8emstream>:
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
     db0:	8b 01       	movw	r16, r22
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pcTaskGetTaskName>
     dba:	bc 01       	movw	r22, r24
     dbc:	c8 01       	movw	r24, r16
     dbe:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     dc2:	d8 01       	movw	r26, r16
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	02 80       	ldd	r0, Z+2	; 0x02
     dca:	f3 81       	ldd	r31, Z+3	; 0x03
     dcc:	e0 2d       	mov	r30, r0
     dce:	69 e0       	ldi	r22, 0x09	; 9
     dd0:	c8 01       	movw	r24, r16
     dd2:	19 95       	eicall
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pcTaskGetTaskName>
     ddc:	fc 01       	movw	r30, r24
     dde:	01 90       	ld	r0, Z+
     de0:	00 20       	and	r0, r0
     de2:	e9 f7       	brne	.-6      	; 0xdde <_ZN8frt_task12print_statusER8emstream+0x48>
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	e8 1b       	sub	r30, r24
     de8:	f9 0b       	sbc	r31, r25
     dea:	38 97       	sbiw	r30, 0x08	; 8
     dec:	48 f4       	brcc	.+18     	; 0xe00 <_ZN8frt_task12print_statusER8emstream+0x6a>
     dee:	d8 01       	movw	r26, r16
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	02 80       	ldd	r0, Z+2	; 0x02
     df6:	f3 81       	ldd	r31, Z+3	; 0x03
     df8:	e0 2d       	mov	r30, r0
     dfa:	69 e0       	ldi	r22, 0x09	; 9
     dfc:	c8 01       	movw	r24, r16
     dfe:	19 95       	eicall
     e00:	ce 84       	ldd	r12, Y+14	; 0x0e
     e02:	df 84       	ldd	r13, Y+15	; 0x0f
     e04:	e8 88       	ldd	r14, Y+16	; 0x10
     e06:	f9 88       	ldd	r15, Y+17	; 0x11
     e08:	a8 84       	ldd	r10, Y+8	; 0x08
     e0a:	b9 84       	ldd	r11, Y+9	; 0x09
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	9b 81       	ldd	r25, Y+3	; 0x03
     e10:	0e 94 4a 1b 	call	0x3694	; 0x3694 <uxTaskGetStackHighWaterMark>
     e14:	98 2e       	mov	r9, r24
     e16:	8c 84       	ldd	r8, Y+12	; 0x0c
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	9b 81       	ldd	r25, Y+3	; 0x03
     e1c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <uxTaskPriorityGet>
     e20:	68 2f       	mov	r22, r24
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     e2e:	ec 01       	movw	r28, r24
     e30:	6e e1       	ldi	r22, 0x1E	; 30
     e32:	75 e0       	ldi	r23, 0x05	; 5
     e34:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     e38:	68 2d       	mov	r22, r8
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     e40:	6a e0       	ldi	r22, 0x0A	; 10
     e42:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     e46:	ec 01       	movw	r28, r24
     e48:	6c e1       	ldi	r22, 0x1C	; 28
     e4a:	75 e0       	ldi	r23, 0x05	; 5
     e4c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     e50:	69 2d       	mov	r22, r9
     e52:	ce 01       	movw	r24, r28
     e54:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
     e58:	6a e0       	ldi	r22, 0x0A	; 10
     e5a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     e5e:	ec 01       	movw	r28, r24
     e60:	6a e1       	ldi	r22, 0x1A	; 26
     e62:	75 e0       	ldi	r23, 0x05	; 5
     e64:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     e68:	b5 01       	movw	r22, r10
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
     e70:	6a e0       	ldi	r22, 0x0A	; 10
     e72:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     e76:	ec 01       	movw	r28, r24
     e78:	68 e1       	ldi	r22, 0x18	; 24
     e7a:	75 e0       	ldi	r23, 0x05	; 5
     e7c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	ce 01       	movw	r24, r28
     e84:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     e88:	ec 01       	movw	r28, r24
     e8a:	66 e1       	ldi	r22, 0x16	; 22
     e8c:	75 e0       	ldi	r23, 0x05	; 5
     e8e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     e92:	b7 01       	movw	r22, r14
     e94:	a6 01       	movw	r20, r12
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN8emstreamlsEm>
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	cf 90       	pop	r12
     eac:	bf 90       	pop	r11
     eae:	af 90       	pop	r10
     eb0:	9f 90       	pop	r9
     eb2:	8f 90       	pop	r8
     eb4:	08 95       	ret

00000eb6 <_ZN8frt_task19print_stack_in_listEP8emstream>:
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
     ec8:	7b 01       	movw	r14, r22
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pcTaskGetTaskName>
     ed2:	6c 01       	movw	r12, r24
     ed4:	6a e0       	ldi	r22, 0x0A	; 10
     ed6:	c7 01       	movw	r24, r14
     ed8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     edc:	8c 01       	movw	r16, r24
     ede:	61 e1       	ldi	r22, 0x11	; 17
     ee0:	75 e0       	ldi	r23, 0x05	; 5
     ee2:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     ee6:	6a e0       	ldi	r22, 0x0A	; 10
     ee8:	c8 01       	movw	r24, r16
     eea:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     eee:	8c 01       	movw	r16, r24
     ef0:	6a e0       	ldi	r22, 0x0A	; 10
     ef2:	75 e0       	ldi	r23, 0x05	; 5
     ef4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     ef8:	b6 01       	movw	r22, r12
     efa:	c8 01       	movw	r24, r16
     efc:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     f00:	6a e0       	ldi	r22, 0x0A	; 10
     f02:	c8 01       	movw	r24, r16
     f04:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f08:	8c 01       	movw	r16, r24
     f0a:	64 e0       	ldi	r22, 0x04	; 4
     f0c:	75 e0       	ldi	r23, 0x05	; 5
     f0e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     f12:	66 e0       	ldi	r22, 0x06	; 6
     f14:	c8 01       	movw	r24, r16
     f16:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1e:	e8 85       	ldd	r30, Y+8	; 0x08
     f20:	f9 85       	ldd	r31, Y+9	; 0x09
     f22:	01 e1       	ldi	r16, 0x11	; 17
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	a7 01       	movw	r20, r14
     f28:	bc 01       	movw	r22, r24
     f2a:	8e 1b       	sub	r24, r30
     f2c:	9f 0b       	sbc	r25, r31
     f2e:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z15hex_dump_memoryPhS_P8emstreambh>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	19 f0       	breq	.+6      	; 0xf40 <_ZN8frt_task19print_stack_in_listEP8emstream+0x8a>
     f3a:	b7 01       	movw	r22, r14
     f3c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN8frt_task19print_stack_in_listEP8emstream>
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <_ZN9task_user18print_help_messageEv>:
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
     f5c:	6a e0       	ldi	r22, 0x0A	; 10
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	9f 81       	ldd	r25, Y+7	; 0x07
     f62:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f66:	8c 01       	movw	r16, r24
     f68:	6c ec       	ldi	r22, 0xCC	; 204
     f6a:	74 e0       	ldi	r23, 0x04	; 4
     f6c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     f70:	6a e0       	ldi	r22, 0x0A	; 10
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f78:	8c 01       	movw	r16, r24
     f7a:	66 ec       	ldi	r22, 0xC6	; 198
     f7c:	74 e0       	ldi	r23, 0x04	; 4
     f7e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     f82:	67 e0       	ldi	r22, 0x07	; 7
     f84:	c8 01       	movw	r24, r16
     f86:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f8a:	6a e0       	ldi	r22, 0x0A	; 10
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	9f 81       	ldd	r25, Y+7	; 0x07
     f90:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     f94:	8c 01       	movw	r16, r24
     f96:	67 ea       	ldi	r22, 0xA7	; 167
     f98:	74 e0       	ldi	r23, 0x04	; 4
     f9a:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     f9e:	6a e0       	ldi	r22, 0x0A	; 10
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     fa6:	8c 01       	movw	r16, r24
     fa8:	61 ea       	ldi	r22, 0xA1	; 161
     faa:	74 e0       	ldi	r23, 0x04	; 4
     fac:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     fb0:	66 e0       	ldi	r22, 0x06	; 6
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     fb8:	6a e0       	ldi	r22, 0x0A	; 10
     fba:	8e 81       	ldd	r24, Y+6	; 0x06
     fbc:	9f 81       	ldd	r25, Y+7	; 0x07
     fbe:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     fc2:	8c 01       	movw	r16, r24
     fc4:	6a e8       	ldi	r22, 0x8A	; 138
     fc6:	74 e0       	ldi	r23, 0x04	; 4
     fc8:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	c8 01       	movw	r24, r16
     fd0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     fde:	8c 01       	movw	r16, r24
     fe0:	6e e6       	ldi	r22, 0x6E	; 110
     fe2:	74 e0       	ldi	r23, 0x04	; 4
     fe4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
     fe8:	66 e0       	ldi	r22, 0x06	; 6
     fea:	c8 01       	movw	r24, r16
     fec:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     ff0:	6a e0       	ldi	r22, 0x0A	; 10
     ff2:	8e 81       	ldd	r24, Y+6	; 0x06
     ff4:	9f 81       	ldd	r25, Y+7	; 0x07
     ff6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
     ffa:	8c 01       	movw	r16, r24
     ffc:	66 e5       	ldi	r22, 0x56	; 86
     ffe:	74 e0       	ldi	r23, 0x04	; 4
    1000:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1004:	66 e0       	ldi	r22, 0x06	; 6
    1006:	c8 01       	movw	r24, r16
    1008:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    100c:	6a e0       	ldi	r22, 0x0A	; 10
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	9f 81       	ldd	r25, Y+7	; 0x07
    1012:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1016:	8c 01       	movw	r16, r24
    1018:	65 e3       	ldi	r22, 0x35	; 53
    101a:	74 e0       	ldi	r23, 0x04	; 4
    101c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1020:	66 e0       	ldi	r22, 0x06	; 6
    1022:	c8 01       	movw	r24, r16
    1024:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1028:	6a e0       	ldi	r22, 0x0A	; 10
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1032:	8c 01       	movw	r16, r24
    1034:	6e e0       	ldi	r22, 0x0E	; 14
    1036:	74 e0       	ldi	r23, 0x04	; 4
    1038:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    103c:	66 e0       	ldi	r22, 0x06	; 6
    103e:	c8 01       	movw	r24, r16
    1040:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	8e 81       	ldd	r24, Y+6	; 0x06
    1048:	9f 81       	ldd	r25, Y+7	; 0x07
    104a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    104e:	8c 01       	movw	r16, r24
    1050:	60 ef       	ldi	r22, 0xF0	; 240
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1058:	66 e0       	ldi	r22, 0x06	; 6
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1060:	6a e0       	ldi	r22, 0x0A	; 10
    1062:	8e 81       	ldd	r24, Y+6	; 0x06
    1064:	9f 81       	ldd	r25, Y+7	; 0x07
    1066:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    106a:	8c 01       	movw	r16, r24
    106c:	65 ed       	ldi	r22, 0xD5	; 213
    106e:	73 e0       	ldi	r23, 0x03	; 3
    1070:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1074:	66 e0       	ldi	r22, 0x06	; 6
    1076:	c8 01       	movw	r24, r16
    1078:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1086:	ec 01       	movw	r28, r24
    1088:	66 ec       	ldi	r22, 0xC6	; 198
    108a:	73 e0       	ldi	r23, 0x03	; 3
    108c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1090:	66 e0       	ldi	r22, 0x06	; 6
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <_ZN9task_user3runEv>:
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	2c 97       	sbiw	r28, 0x0c	; 12
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	7c 01       	movw	r14, r24
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	1a 82       	std	Y+2, r1	; 0x02
    10b6:	1b 82       	std	Y+3, r1	; 0x03
    10b8:	1c 82       	std	Y+4, r1	; 0x04
    10ba:	1d 82       	std	Y+5, r1	; 0x05
    10bc:	1e 82       	std	Y+6, r1	; 0x06
    10be:	6a e0       	ldi	r22, 0x0A	; 10
    10c0:	dc 01       	movw	r26, r24
    10c2:	16 96       	adiw	r26, 0x06	; 6
    10c4:	8d 91       	ld	r24, X+
    10c6:	9c 91       	ld	r25, X
    10c8:	17 97       	sbiw	r26, 0x07	; 7
    10ca:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    10ce:	6c 01       	movw	r12, r24
    10d0:	68 ea       	ldi	r22, 0xA8	; 168
    10d2:	73 e0       	ldi	r23, 0x03	; 3
    10d4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    10d8:	66 e0       	ldi	r22, 0x06	; 6
    10da:	c6 01       	movw	r24, r12
    10dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    10e0:	11 e0       	ldi	r17, 0x01	; 1
    10e2:	81 2c       	mov	r8, r1
    10e4:	68 94       	set
    10e6:	99 24       	eor	r9, r9
    10e8:	93 f8       	bld	r9, 3
    10ea:	0f 2e       	mov	r0, r31
    10ec:	f0 ef       	ldi	r31, 0xF0	; 240
    10ee:	af 2e       	mov	r10, r31
    10f0:	f0 e2       	ldi	r31, 0x20	; 32
    10f2:	bf 2e       	mov	r11, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	f7 01       	movw	r30, r14
    10f8:	84 85       	ldd	r24, Z+12	; 0x0c
    10fa:	88 23       	and	r24, r24
    10fc:	21 f0       	breq	.+8      	; 0x1106 <_ZN9task_user3runEv+0x64>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f4       	brne	.+2      	; 0x1104 <_ZN9task_user3runEv+0x62>
    1102:	60 c0       	rjmp	.+192    	; 0x11c4 <_ZN9task_user3runEv+0x122>
    1104:	06 c2       	rjmp	.+1036   	; 0x1512 <_ZN9task_user3runEv+0x470>
    1106:	86 81       	ldd	r24, Z+6	; 0x06
    1108:	97 81       	ldd	r25, Z+7	; 0x07
    110a:	dc 01       	movw	r26, r24
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	04 80       	ldd	r0, Z+4	; 0x04
    1112:	f5 81       	ldd	r31, Z+5	; 0x05
    1114:	e0 2d       	mov	r30, r0
    1116:	19 95       	eicall
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <_ZN9task_user3runEv+0x7c>
    111c:	37 c0       	rjmp	.+110    	; 0x118c <_ZN9task_user3runEv+0xea>
    111e:	f7 01       	movw	r30, r14
    1120:	86 81       	ldd	r24, Z+6	; 0x06
    1122:	97 81       	ldd	r25, Z+7	; 0x07
    1124:	dc 01       	movw	r26, r24
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	06 80       	ldd	r0, Z+6	; 0x06
    112c:	f7 81       	ldd	r31, Z+7	; 0x07
    112e:	e0 2d       	mov	r30, r0
    1130:	19 95       	eicall
    1132:	99 27       	eor	r25, r25
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	f9 f0       	breq	.+62     	; 0x1178 <_ZN9task_user3runEv+0xd6>
    113a:	03 97       	sbiw	r24, 0x03	; 3
    113c:	09 f0       	breq	.+2      	; 0x1140 <_ZN9task_user3runEv+0x9e>
    113e:	05 c2       	rjmp	.+1034   	; 0x154a <_ZN9task_user3runEv+0x4a8>
    1140:	6a e0       	ldi	r22, 0x0A	; 10
    1142:	f7 01       	movw	r30, r14
    1144:	86 81       	ldd	r24, Z+6	; 0x06
    1146:	97 81       	ldd	r25, Z+7	; 0x07
    1148:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    114c:	7c 01       	movw	r14, r24
    114e:	6a e9       	ldi	r22, 0x9A	; 154
    1150:	73 e0       	ldi	r23, 0x03	; 3
    1152:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1156:	66 e0       	ldi	r22, 0x06	; 6
    1158:	c7 01       	movw	r24, r14
    115a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	88 ed       	ldi	r24, 0xD8	; 216
    1162:	08 b6       	in	r0, 0x38	; 56
    1164:	18 be       	out	0x38, r1	; 56
    1166:	84 bf       	out	0x34, r24	; 52
    1168:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    116c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1170:	81 fd       	sbrc	r24, 1
    1172:	fc cf       	rjmp	.-8      	; 0x116c <_ZN9task_user3runEv+0xca>
    1174:	08 be       	out	0x38, r0	; 56
    1176:	ff cf       	rjmp	.-2      	; 0x1176 <_ZN9task_user3runEv+0xd4>
    1178:	c7 01       	movw	r24, r14
    117a:	0e 94 a9 07 	call	0xf52	; 0xf52 <_ZN9task_user18print_help_messageEv>
    117e:	d7 01       	movw	r26, r14
    1180:	1c 96       	adiw	r26, 0x0c	; 12
    1182:	1c 93       	st	X, r17
    1184:	1c 97       	sbiw	r26, 0x0c	; 12
    1186:	1d 96       	adiw	r26, 0x0d	; 13
    1188:	1c 93       	st	X, r17
    118a:	df c1       	rjmp	.+958    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    118c:	8e ef       	ldi	r24, 0xFE	; 254
    118e:	90 e2       	ldi	r25, 0x20	; 32
    1190:	0e 94 13 03 	call	0x626	; 0x626 <_ZN14frt_text_queue14check_for_charEv>
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <_ZN9task_user3runEv+0xf8>
    1198:	d8 c1       	rjmp	.+944    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    119a:	d7 01       	movw	r26, r14
    119c:	16 96       	adiw	r26, 0x06	; 6
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	17 97       	sbiw	r26, 0x07	; 7
    11a4:	01 90       	ld	r0, Z+
    11a6:	f0 81       	ld	r31, Z
    11a8:	e0 2d       	mov	r30, r0
    11aa:	c2 80       	ldd	r12, Z+2	; 0x02
    11ac:	d3 80       	ldd	r13, Z+3	; 0x03
    11ae:	8e ef       	ldi	r24, 0xFE	; 254
    11b0:	90 e2       	ldi	r25, 0x20	; 32
    11b2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN14frt_text_queue7getcharEv>
    11b6:	68 2f       	mov	r22, r24
    11b8:	f7 01       	movw	r30, r14
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	f6 01       	movw	r30, r12
    11c0:	19 95       	eicall
    11c2:	c3 c1       	rjmp	.+902    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    11c4:	86 81       	ldd	r24, Z+6	; 0x06
    11c6:	97 81       	ldd	r25, Z+7	; 0x07
    11c8:	dc 01       	movw	r26, r24
    11ca:	ed 91       	ld	r30, X+
    11cc:	fc 91       	ld	r31, X
    11ce:	04 80       	ldd	r0, Z+4	; 0x04
    11d0:	f5 81       	ldd	r31, Z+5	; 0x05
    11d2:	e0 2d       	mov	r30, r0
    11d4:	19 95       	eicall
    11d6:	88 23       	and	r24, r24
    11d8:	09 f4       	brne	.+2      	; 0x11dc <_ZN9task_user3runEv+0x13a>
    11da:	b7 c1       	rjmp	.+878    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    11dc:	f7 01       	movw	r30, r14
    11de:	86 81       	ldd	r24, Z+6	; 0x06
    11e0:	97 81       	ldd	r25, Z+7	; 0x07
    11e2:	dc 01       	movw	r26, r24
    11e4:	ed 91       	ld	r30, X+
    11e6:	fc 91       	ld	r31, X
    11e8:	06 80       	ldd	r0, Z+6	; 0x06
    11ea:	f7 81       	ldd	r31, Z+7	; 0x07
    11ec:	e0 2d       	mov	r30, r0
    11ee:	19 95       	eicall
    11f0:	9c 01       	movw	r18, r24
    11f2:	33 27       	eor	r19, r19
    11f4:	28 36       	cpi	r18, 0x68	; 104
    11f6:	31 05       	cpc	r19, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <_ZN9task_user3runEv+0x15a>
    11fa:	54 c1       	rjmp	.+680    	; 0x14a4 <_ZN9task_user3runEv+0x402>
    11fc:	4c f4       	brge	.+18     	; 0x1210 <_ZN9task_user3runEv+0x16e>
    11fe:	2b 31       	cpi	r18, 0x1B	; 27
    1200:	31 05       	cpc	r19, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <_ZN9task_user3runEv+0x164>
    1204:	53 c1       	rjmp	.+678    	; 0x14ac <_ZN9task_user3runEv+0x40a>
    1206:	25 36       	cpi	r18, 0x65	; 101
    1208:	31 05       	cpc	r19, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <_ZN9task_user3runEv+0x16c>
    120c:	4f c1       	rjmp	.+670    	; 0x14ac <_ZN9task_user3runEv+0x40a>
    120e:	63 c1       	rjmp	.+710    	; 0x14d6 <_ZN9task_user3runEv+0x434>
    1210:	23 37       	cpi	r18, 0x73	; 115
    1212:	31 05       	cpc	r19, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <_ZN9task_user3runEv+0x176>
    1216:	0c c1       	rjmp	.+536    	; 0x1430 <_ZN9task_user3runEv+0x38e>
    1218:	26 37       	cpi	r18, 0x76	; 118
    121a:	31 05       	cpc	r19, r1
    121c:	91 f0       	breq	.+36     	; 0x1242 <_ZN9task_user3runEv+0x1a0>
    121e:	2e 36       	cpi	r18, 0x6E	; 110
    1220:	31 05       	cpc	r19, r1
    1222:	09 f0       	breq	.+2      	; 0x1226 <_ZN9task_user3runEv+0x184>
    1224:	58 c1       	rjmp	.+688    	; 0x14d6 <_ZN9task_user3runEv+0x434>
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN10time_stamp10set_to_nowEv>
    122e:	bc 01       	movw	r22, r24
    1230:	f7 01       	movw	r30, r14
    1232:	86 81       	ldd	r24, Z+6	; 0x06
    1234:	97 81       	ldd	r25, Z+7	; 0x07
    1236:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZlsR8emstreamR10time_stamp>
    123a:	66 e0       	ldi	r22, 0x06	; 6
    123c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1240:	84 c1       	rjmp	.+776    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    1242:	1f 82       	std	Y+7, r1	; 0x07
    1244:	18 86       	std	Y+8, r1	; 0x08
    1246:	19 86       	std	Y+9, r1	; 0x09
    1248:	1a 86       	std	Y+10, r1	; 0x0a
    124a:	1b 86       	std	Y+11, r1	; 0x0b
    124c:	1c 86       	std	Y+12, r1	; 0x0c
    124e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xPortGetFreeHeapSize>
    1252:	3c 01       	movw	r6, r24
    1254:	ce 01       	movw	r24, r28
    1256:	07 96       	adiw	r24, 0x07	; 7
    1258:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN10time_stamp10set_to_nowEv>
    125c:	2c 01       	movw	r4, r24
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	d7 01       	movw	r26, r14
    1262:	16 96       	adiw	r26, 0x06	; 6
    1264:	8d 91       	ld	r24, X+
    1266:	9c 91       	ld	r25, X
    1268:	17 97       	sbiw	r26, 0x07	; 7
    126a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    126e:	6a e0       	ldi	r22, 0x0A	; 10
    1270:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1274:	6c 01       	movw	r12, r24
    1276:	60 e3       	ldi	r22, 0x30	; 48
    1278:	73 e0       	ldi	r23, 0x03	; 3
    127a:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    127e:	6a e0       	ldi	r22, 0x0A	; 10
    1280:	c6 01       	movw	r24, r12
    1282:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1286:	6c 01       	movw	r12, r24
    1288:	64 e2       	ldi	r22, 0x24	; 36
    128a:	73 e0       	ldi	r23, 0x03	; 3
    128c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1290:	66 e0       	ldi	r22, 0x06	; 6
    1292:	c6 01       	movw	r24, r12
    1294:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1298:	6a e0       	ldi	r22, 0x0A	; 10
    129a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    129e:	6c 01       	movw	r12, r24
    12a0:	6d e1       	ldi	r22, 0x1D	; 29
    12a2:	73 e0       	ldi	r23, 0x03	; 3
    12a4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    12a8:	b2 01       	movw	r22, r4
    12aa:	c6 01       	movw	r24, r12
    12ac:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZlsR8emstreamR10time_stamp>
    12b0:	6a e0       	ldi	r22, 0x0A	; 10
    12b2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    12b6:	6c 01       	movw	r12, r24
    12b8:	6f e0       	ldi	r22, 0x0F	; 15
    12ba:	73 e0       	ldi	r23, 0x03	; 3
    12bc:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    12c0:	b3 01       	movw	r22, r6
    12c2:	c6 01       	movw	r24, r12
    12c4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
    12c8:	6a e0       	ldi	r22, 0x0A	; 10
    12ca:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    12ce:	6c 01       	movw	r12, r24
    12d0:	6d e0       	ldi	r22, 0x0D	; 13
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    12d8:	4f ef       	ldi	r20, 0xFF	; 255
    12da:	5f e0       	ldi	r21, 0x0F	; 15
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	c6 01       	movw	r24, r12
    12e2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN8emstreamlsEm>
    12e6:	f4 01       	movw	r30, r8
    12e8:	60 a4       	ldd	r6, Z+40	; 0x28
    12ea:	71 a4       	ldd	r7, Z+41	; 0x29
    12ec:	6a e0       	ldi	r22, 0x0A	; 10
    12ee:	d7 01       	movw	r26, r14
    12f0:	16 96       	adiw	r26, 0x06	; 6
    12f2:	8d 91       	ld	r24, X+
    12f4:	9c 91       	ld	r25, X
    12f6:	17 97       	sbiw	r26, 0x07	; 7
    12f8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    12fc:	6c 01       	movw	r12, r24
    12fe:	62 e0       	ldi	r22, 0x02	; 2
    1300:	73 e0       	ldi	r23, 0x03	; 3
    1302:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1306:	b3 01       	movw	r22, r6
    1308:	c6 01       	movw	r24, r12
    130a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
    130e:	66 e0       	ldi	r22, 0x06	; 6
    1310:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    131a:	f7 01       	movw	r30, r14
    131c:	c6 80       	ldd	r12, Z+6	; 0x06
    131e:	d7 80       	ldd	r13, Z+7	; 0x07
    1320:	6a e0       	ldi	r22, 0x0A	; 10
    1322:	c6 01       	movw	r24, r12
    1324:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1328:	3c 01       	movw	r6, r24
    132a:	67 ef       	ldi	r22, 0xF7	; 247
    132c:	72 e0       	ldi	r23, 0x02	; 2
    132e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1332:	6a e0       	ldi	r22, 0x0A	; 10
    1334:	c3 01       	movw	r24, r6
    1336:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    133a:	3c 01       	movw	r6, r24
    133c:	60 ef       	ldi	r22, 0xF0	; 240
    133e:	72 e0       	ldi	r23, 0x02	; 2
    1340:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1344:	66 e0       	ldi	r22, 0x06	; 6
    1346:	c3 01       	movw	r24, r6
    1348:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    134c:	6a e0       	ldi	r22, 0x0A	; 10
    134e:	c6 01       	movw	r24, r12
    1350:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1354:	3c 01       	movw	r6, r24
    1356:	6f ed       	ldi	r22, 0xDF	; 223
    1358:	72 e0       	ldi	r23, 0x02	; 2
    135a:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    135e:	6a e0       	ldi	r22, 0x0A	; 10
    1360:	c3 01       	movw	r24, r6
    1362:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1366:	3c 01       	movw	r6, r24
    1368:	63 ed       	ldi	r22, 0xD3	; 211
    136a:	72 e0       	ldi	r23, 0x02	; 2
    136c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1370:	6a e0       	ldi	r22, 0x0A	; 10
    1372:	c3 01       	movw	r24, r6
    1374:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1378:	3c 01       	movw	r6, r24
    137a:	6d ec       	ldi	r22, 0xCD	; 205
    137c:	72 e0       	ldi	r23, 0x02	; 2
    137e:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1382:	66 e0       	ldi	r22, 0x06	; 6
    1384:	c3 01       	movw	r24, r6
    1386:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    138a:	6a e0       	ldi	r22, 0x0A	; 10
    138c:	c6 01       	movw	r24, r12
    138e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1392:	3c 01       	movw	r6, r24
    1394:	6c eb       	ldi	r22, 0xBC	; 188
    1396:	72 e0       	ldi	r23, 0x02	; 2
    1398:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    139c:	6a e0       	ldi	r22, 0x0A	; 10
    139e:	c3 01       	movw	r24, r6
    13a0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    13a4:	3c 01       	movw	r6, r24
    13a6:	60 eb       	ldi	r22, 0xB0	; 176
    13a8:	72 e0       	ldi	r23, 0x02	; 2
    13aa:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    13ae:	6a e0       	ldi	r22, 0x0A	; 10
    13b0:	c3 01       	movw	r24, r6
    13b2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    13b6:	3c 01       	movw	r6, r24
    13b8:	6a ea       	ldi	r22, 0xAA	; 170
    13ba:	72 e0       	ldi	r23, 0x02	; 2
    13bc:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    13c0:	66 e0       	ldi	r22, 0x06	; 6
    13c2:	c3 01       	movw	r24, r6
    13c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    13c8:	d5 01       	movw	r26, r10
    13ca:	8d 91       	ld	r24, X+
    13cc:	9c 91       	ld	r25, X
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <_ZN9task_user3runEv+0x336>
    13d2:	b6 01       	movw	r22, r12
    13d4:	0e 94 99 04 	call	0x932	; 0x932 <_ZN8frt_task20print_status_in_listEP8emstream>
    13d8:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <xTaskGetIdleTaskHandle>
    13dc:	0e 94 4a 1b 	call	0x3694	; 0x3694 <uxTaskGetStackHighWaterMark>
    13e0:	08 2f       	mov	r16, r24
    13e2:	6a e0       	ldi	r22, 0x0A	; 10
    13e4:	c6 01       	movw	r24, r12
    13e6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    13ea:	6c 01       	movw	r12, r24
    13ec:	6f e9       	ldi	r22, 0x9F	; 159
    13ee:	72 e0       	ldi	r23, 0x02	; 2
    13f0:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    13f4:	60 2f       	mov	r22, r16
    13f6:	c6 01       	movw	r24, r12
    13f8:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN8emstreamlsEh>
    13fc:	6a e0       	ldi	r22, 0x0A	; 10
    13fe:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1402:	6c 01       	movw	r12, r24
    1404:	6d e9       	ldi	r22, 0x9D	; 157
    1406:	72 e0       	ldi	r23, 0x02	; 2
    1408:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    140c:	64 e6       	ldi	r22, 0x64	; 100
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	c6 01       	movw	r24, r12
    1412:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
    1416:	6a e0       	ldi	r22, 0x0A	; 10
    1418:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    141c:	6c 01       	movw	r12, r24
    141e:	6a e9       	ldi	r22, 0x9A	; 154
    1420:	72 e0       	ldi	r23, 0x02	; 2
    1422:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1426:	66 e0       	ldi	r22, 0x06	; 6
    1428:	c6 01       	movw	r24, r12
    142a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    142e:	8d c0       	rjmp	.+282    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    1430:	f7 01       	movw	r30, r14
    1432:	c6 80       	ldd	r12, Z+6	; 0x06
    1434:	d7 80       	ldd	r13, Z+7	; 0x07
    1436:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <last_created_task_pointer>
    143a:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <last_created_task_pointer+0x1>
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	19 f0       	breq	.+6      	; 0x1448 <_ZN9task_user3runEv+0x3a6>
    1442:	b6 01       	movw	r22, r12
    1444:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN8frt_task19print_stack_in_listEP8emstream>
    1448:	6a e0       	ldi	r22, 0x0A	; 10
    144a:	c6 01       	movw	r24, r12
    144c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1450:	3c 01       	movw	r6, r24
    1452:	60 e6       	ldi	r22, 0x60	; 96
    1454:	73 e0       	ldi	r23, 0x03	; 3
    1456:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    145a:	6a e0       	ldi	r22, 0x0A	; 10
    145c:	c3 01       	movw	r24, r6
    145e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1462:	3c 01       	movw	r6, r24
    1464:	65 e5       	ldi	r22, 0x55	; 85
    1466:	73 e0       	ldi	r23, 0x03	; 3
    1468:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    146c:	6a e0       	ldi	r22, 0x0A	; 10
    146e:	c3 01       	movw	r24, r6
    1470:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1474:	3c 01       	movw	r6, r24
    1476:	6f e4       	ldi	r22, 0x4F	; 79
    1478:	73 e0       	ldi	r23, 0x03	; 3
    147a:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    147e:	66 e0       	ldi	r22, 0x06	; 6
    1480:	c3 01       	movw	r24, r6
    1482:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1486:	80 91 96 31 	lds	r24, 0x3196	; 0x803196 <portStackTopForTask>
    148a:	90 91 97 31 	lds	r25, 0x3197	; 0x803197 <portStackTopForTask+0x1>
    148e:	bc 01       	movw	r22, r24
    1490:	6f 5f       	subi	r22, 0xFF	; 255
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	01 e1       	ldi	r16, 0x11	; 17
    1496:	21 2f       	mov	r18, r17
    1498:	a6 01       	movw	r20, r12
    149a:	83 56       	subi	r24, 0x63	; 99
    149c:	91 09       	sbc	r25, r1
    149e:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z15hex_dump_memoryPhS_P8emstreambh>
    14a2:	53 c0       	rjmp	.+166    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    14a4:	c7 01       	movw	r24, r14
    14a6:	0e 94 a9 07 	call	0xf52	; 0xf52 <_ZN9task_user18print_help_messageEv>
    14aa:	4f c0       	rjmp	.+158    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    14ac:	6a e0       	ldi	r22, 0x0A	; 10
    14ae:	d7 01       	movw	r26, r14
    14b0:	16 96       	adiw	r26, 0x06	; 6
    14b2:	8d 91       	ld	r24, X+
    14b4:	9c 91       	ld	r25, X
    14b6:	17 97       	sbiw	r26, 0x07	; 7
    14b8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    14bc:	6c 01       	movw	r12, r24
    14be:	68 e8       	ldi	r22, 0x88	; 136
    14c0:	73 e0       	ldi	r23, 0x03	; 3
    14c2:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    14c6:	66 e0       	ldi	r22, 0x06	; 6
    14c8:	c6 01       	movw	r24, r12
    14ca:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    14ce:	f7 01       	movw	r30, r14
    14d0:	14 86       	std	Z+12, r1	; 0x0c
    14d2:	15 86       	std	Z+13, r1	; 0x0d
    14d4:	3a c0       	rjmp	.+116    	; 0x154a <_ZN9task_user3runEv+0x4a8>
    14d6:	f7 01       	movw	r30, r14
    14d8:	a6 81       	ldd	r26, Z+6	; 0x06
    14da:	b7 81       	ldd	r27, Z+7	; 0x07
    14dc:	ed 91       	ld	r30, X+
    14de:	fc 91       	ld	r31, X
    14e0:	11 97       	sbiw	r26, 0x01	; 1
    14e2:	02 80       	ldd	r0, Z+2	; 0x02
    14e4:	f3 81       	ldd	r31, Z+3	; 0x03
    14e6:	e0 2d       	mov	r30, r0
    14e8:	68 2f       	mov	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	19 95       	eicall
    14ee:	6a e0       	ldi	r22, 0x0A	; 10
    14f0:	d7 01       	movw	r26, r14
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	8d 91       	ld	r24, X+
    14f6:	9c 91       	ld	r25, X
    14f8:	17 97       	sbiw	r26, 0x07	; 7
    14fa:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    14fe:	6c 01       	movw	r12, r24
    1500:	62 e8       	ldi	r22, 0x82	; 130
    1502:	73 e0       	ldi	r23, 0x03	; 3
    1504:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1508:	66 e0       	ldi	r22, 0x06	; 6
    150a:	c6 01       	movw	r24, r12
    150c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1510:	1c c0       	rjmp	.+56     	; 0x154a <_ZN9task_user3runEv+0x4a8>
    1512:	6a e0       	ldi	r22, 0x0A	; 10
    1514:	f7 01       	movw	r30, r14
    1516:	86 81       	ldd	r24, Z+6	; 0x06
    1518:	97 81       	ldd	r25, Z+7	; 0x07
    151a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    151e:	7c 01       	movw	r14, r24
    1520:	65 e6       	ldi	r22, 0x65	; 101
    1522:	73 e0       	ldi	r23, 0x03	; 3
    1524:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1528:	66 e0       	ldi	r22, 0x06	; 6
    152a:	c7 01       	movw	r24, r14
    152c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	88 ed       	ldi	r24, 0xD8	; 216
    1534:	08 b6       	in	r0, 0x38	; 56
    1536:	18 be       	out	0x38, r1	; 56
    1538:	84 bf       	out	0x34, r24	; 52
    153a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    153e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1542:	81 fd       	sbrc	r24, 1
    1544:	fc cf       	rjmp	.-8      	; 0x153e <_ZN9task_user3runEv+0x49c>
    1546:	08 be       	out	0x38, r0	; 56
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <_ZN9task_user3runEv+0x4a6>
    154a:	f7 01       	movw	r30, r14
    154c:	86 85       	ldd	r24, Z+14	; 0x0e
    154e:	97 85       	ldd	r25, Z+15	; 0x0f
    1550:	a0 89       	ldd	r26, Z+16	; 0x10
    1552:	b1 89       	ldd	r27, Z+17	; 0x11
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	a1 1d       	adc	r26, r1
    1558:	b1 1d       	adc	r27, r1
    155a:	86 87       	std	Z+14, r24	; 0x0e
    155c:	97 87       	std	Z+15, r25	; 0x0f
    155e:	a0 8b       	std	Z+16, r26	; 0x10
    1560:	b1 8b       	std	Z+17, r27	; 0x11
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <vTaskDelay>
    156e:	c3 cd       	rjmp	.-1146   	; 0x10f6 <_ZN9task_user3runEv+0x54>

00001570 <_ZN18task_motor_encoder3runEv>:
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	00 d0       	rcall	.+0      	; 0x1576 <_ZN18task_motor_encoder3runEv+0x6>
    1576:	1f 92       	push	r1
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	6c 01       	movw	r12, r24
    157e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <xTaskGetTickCount>
    1582:	69 83       	std	Y+1, r22	; 0x01
    1584:	7a 83       	std	Y+2, r23	; 0x02
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	e0 e8       	ldi	r30, 0x80	; 128
    158c:	f6 e0       	ldi	r31, 0x06	; 6
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	82 83       	std	Z+2, r24	; 0x02
    1592:	82 89       	ldd	r24, Z+18	; 0x12
    1594:	83 60       	ori	r24, 0x03	; 3
    1596:	82 8b       	std	Z+18, r24	; 0x12
    1598:	83 89       	ldd	r24, Z+19	; 0x13
    159a:	83 60       	ori	r24, 0x03	; 3
    159c:	83 8b       	std	Z+19, r24	; 0x13
    159e:	e0 e8       	ldi	r30, 0x80	; 128
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	82 e7       	ldi	r24, 0x72	; 114
    15a4:	80 83       	st	Z, r24
    15a6:	89 e0       	ldi	r24, 0x09	; 9
    15a8:	80 87       	std	Z+8, r24	; 0x08
    15aa:	e0 e0       	ldi	r30, 0x00	; 0
    15ac:	f9 e0       	ldi	r31, 0x09	; 9
    15ae:	88 e6       	ldi	r24, 0x68	; 104
    15b0:	83 83       	std	Z+3, r24	; 0x03
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	86 a3       	std	Z+38, r24	; 0x26
    15b8:	97 a3       	std	Z+39, r25	; 0x27
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
    15be:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_offset>
    15c2:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_offset+0x1>
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	0f 92       	push	r0
    15cc:	10 82       	st	Z, r1
    15ce:	11 82       	std	Z+1, r1	; 0x01
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 2e       	mov	r0, r31
    15d6:	81 2c       	mov	r8, r1
    15d8:	f9 e0       	ldi	r31, 0x09	; 9
    15da:	9f 2e       	mov	r9, r31
    15dc:	f0 2d       	mov	r31, r0
    15de:	0f 2e       	mov	r0, r31
    15e0:	f4 e6       	ldi	r31, 0x64	; 100
    15e2:	2f 2e       	mov	r2, r31
    15e4:	31 2c       	mov	r3, r1
    15e6:	f0 2d       	mov	r31, r0
    15e8:	0f 2e       	mov	r0, r31
    15ea:	f4 e6       	ldi	r31, 0x64	; 100
    15ec:	4f 2e       	mov	r4, r31
    15ee:	51 2c       	mov	r5, r1
    15f0:	61 2c       	mov	r6, r1
    15f2:	71 2c       	mov	r7, r1
    15f4:	f0 2d       	mov	r31, r0
    15f6:	f4 01       	movw	r30, r8
    15f8:	00 a1       	ldd	r16, Z+32	; 0x20
    15fa:	11 a1       	ldd	r17, Z+33	; 0x21
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	0f 92       	push	r0
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	c8 01       	movw	r24, r16
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	80 0f       	add	r24, r16
    160e:	91 1f       	adc	r25, r17
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	b1 01       	movw	r22, r2
    1616:	0e 94 ce 1c 	call	0x399c	; 0x399c <__divmodhi4>
    161a:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <linear_offset>
    161e:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <linear_offset+0x1>
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	7b 01       	movw	r14, r22
    1628:	e8 1a       	sub	r14, r24
    162a:	f9 0a       	sbc	r15, r25
    162c:	e0 91 f8 20 	lds	r30, 0x20F8	; 0x8020f8 <linear_position>
    1630:	f0 91 f9 20 	lds	r31, 0x20F9	; 0x8020f9 <linear_position+0x1>
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	0f 92       	push	r0
    163a:	e0 82       	st	Z, r14
    163c:	f1 82       	std	Z+1, r15	; 0x01
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	e0 91 f6 20 	lds	r30, 0x20F6	; 0x8020f6 <thdMotor>
    1646:	f0 91 f7 20 	lds	r31, 0x20F7	; 0x8020f7 <thdMotor+0x1>
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	0f 92       	push	r0
    1650:	c8 01       	movw	r24, r16
    1652:	8a 19       	sub	r24, r10
    1654:	9b 09       	sbc	r25, r11
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	f6 01       	movw	r30, r12
    1660:	66 85       	ldd	r22, Z+14	; 0x0e
    1662:	77 85       	ldd	r23, Z+15	; 0x0f
    1664:	80 89       	ldd	r24, Z+16	; 0x10
    1666:	91 89       	ldd	r25, Z+17	; 0x11
    1668:	a3 01       	movw	r20, r6
    166a:	92 01       	movw	r18, r4
    166c:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
    1670:	67 2b       	or	r22, r23
    1672:	68 2b       	or	r22, r24
    1674:	69 2b       	or	r22, r25
    1676:	21 f5       	brne	.+72     	; 0x16c0 <_ZN18task_motor_encoder3runEv+0x150>
    1678:	f6 01       	movw	r30, r12
    167a:	a6 80       	ldd	r10, Z+6	; 0x06
    167c:	b7 80       	ldd	r11, Z+7	; 0x07
    167e:	6e e6       	ldi	r22, 0x6E	; 110
    1680:	70 e2       	ldi	r23, 0x20	; 32
    1682:	c5 01       	movw	r24, r10
    1684:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1688:	b8 01       	movw	r22, r16
    168a:	c5 01       	movw	r24, r10
    168c:	0e 94 62 05 	call	0xac4	; 0xac4 <_ZN8emstreamlsEi>
    1690:	66 e0       	ldi	r22, 0x06	; 6
    1692:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1696:	f6 01       	movw	r30, r12
    1698:	a6 80       	ldd	r10, Z+6	; 0x06
    169a:	b7 80       	ldd	r11, Z+7	; 0x07
    169c:	6f e7       	ldi	r22, 0x7F	; 127
    169e:	70 e2       	ldi	r23, 0x20	; 32
    16a0:	c5 01       	movw	r24, r10
    16a2:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    16a6:	b7 01       	movw	r22, r14
    16a8:	c5 01       	movw	r24, r10
    16aa:	0e 94 62 05 	call	0xac4	; 0xac4 <_ZN8emstreamlsEi>
    16ae:	7c 01       	movw	r14, r24
    16b0:	60 e9       	ldi	r22, 0x90	; 144
    16b2:	70 e2       	ldi	r23, 0x20	; 32
    16b4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    16b8:	66 e0       	ldi	r22, 0x06	; 6
    16ba:	c7 01       	movw	r24, r14
    16bc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    16c0:	f6 01       	movw	r30, r12
    16c2:	86 85       	ldd	r24, Z+14	; 0x0e
    16c4:	97 85       	ldd	r25, Z+15	; 0x0f
    16c6:	a0 89       	ldd	r26, Z+16	; 0x10
    16c8:	b1 89       	ldd	r27, Z+17	; 0x11
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	a1 1d       	adc	r26, r1
    16ce:	b1 1d       	adc	r27, r1
    16d0:	86 87       	std	Z+14, r24	; 0x0e
    16d2:	97 87       	std	Z+15, r25	; 0x0f
    16d4:	a0 8b       	std	Z+16, r26	; 0x10
    16d6:	b1 8b       	std	Z+17, r27	; 0x11
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskDelayUntil>
    16e8:	58 01       	movw	r10, r16
    16ea:	85 cf       	rjmp	.-246    	; 0x15f6 <_ZN18task_motor_encoder3runEv+0x86>

000016ec <_ZN8frt_taskC2EPKchjP8emstream>:
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	2a 97       	sbiw	r28, 0x0a	; 10
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	4c 01       	movw	r8, r24
    1718:	29 01       	movw	r4, r18
    171a:	38 01       	movw	r6, r16
    171c:	8a e0       	ldi	r24, 0x0A	; 10
    171e:	90 e2       	ldi	r25, 0x20	; 32
    1720:	f4 01       	movw	r30, r8
    1722:	80 83       	st	Z, r24
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	fb 01       	movw	r30, r22
    1728:	80 81       	ld	r24, Z
    172a:	88 23       	and	r24, r24
    172c:	69 f0       	breq	.+26     	; 0x1748 <_ZN8frt_taskC2EPKchjP8emstream+0x5c>
    172e:	de 01       	movw	r26, r28
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	31 96       	adiw	r30, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <_ZN8frt_taskC2EPKchjP8emstream+0x50>
    1738:	99 30       	cpi	r25, 0x09	; 9
    173a:	39 f0       	breq	.+14     	; 0x174a <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    173c:	9f 5f       	subi	r25, 0xFF	; 255
    173e:	8d 93       	st	X+, r24
    1740:	81 91       	ld	r24, Z+
    1742:	81 11       	cpse	r24, r1
    1744:	f9 cf       	rjmp	.-14     	; 0x1738 <_ZN8frt_taskC2EPKchjP8emstream+0x4c>
    1746:	01 c0       	rjmp	.+2      	; 0x174a <_ZN8frt_taskC2EPKchjP8emstream+0x5e>
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	e1 e0       	ldi	r30, 0x01	; 1
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	ec 0f       	add	r30, r28
    1750:	fd 1f       	adc	r31, r29
    1752:	e9 0f       	add	r30, r25
    1754:	f1 1d       	adc	r31, r1
    1756:	10 82       	st	Z, r1
    1758:	74 01       	movw	r14, r8
    175a:	f2 e0       	ldi	r31, 0x02	; 2
    175c:	ef 0e       	add	r14, r31
    175e:	f1 1c       	adc	r15, r1
    1760:	a1 2c       	mov	r10, r1
    1762:	b1 2c       	mov	r11, r1
    1764:	c1 2c       	mov	r12, r1
    1766:	d1 2c       	mov	r13, r1
    1768:	04 2f       	mov	r16, r20
    176a:	94 01       	movw	r18, r8
    176c:	a2 01       	movw	r20, r4
    176e:	be 01       	movw	r22, r28
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8c e3       	ldi	r24, 0x3C	; 60
    1776:	93 e0       	ldi	r25, 0x03	; 3
    1778:	0e 94 80 16 	call	0x2d00	; 0x2d00 <xTaskGenericCreate>
    177c:	f4 01       	movw	r30, r8
    177e:	66 82       	std	Z+6, r6	; 0x06
    1780:	77 82       	std	Z+7, r7	; 0x07
    1782:	40 86       	std	Z+8, r4	; 0x08
    1784:	51 86       	std	Z+9, r5	; 0x09
    1786:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <last_created_task_pointer>
    178a:	30 91 f1 20 	lds	r19, 0x20F1	; 0x8020f1 <last_created_task_pointer+0x1>
    178e:	24 83       	std	Z+4, r18	; 0x04
    1790:	35 83       	std	Z+5, r19	; 0x05
    1792:	80 92 f0 20 	sts	0x20F0, r8	; 0x8020f0 <last_created_task_pointer>
    1796:	90 92 f1 20 	sts	0x20F1, r9	; 0x8020f1 <last_created_task_pointer+0x1>
    179a:	14 86       	std	Z+12, r1	; 0x0c
    179c:	15 86       	std	Z+13, r1	; 0x0d
    179e:	40 90 96 31 	lds	r4, 0x3196	; 0x803196 <portStackTopForTask>
    17a2:	50 90 97 31 	lds	r5, 0x3197	; 0x803197 <portStackTopForTask+0x1>
    17a6:	ff ef       	ldi	r31, 0xFF	; 255
    17a8:	4f 1a       	sub	r4, r31
    17aa:	5f 0a       	sbc	r5, r31
    17ac:	40 92 96 31 	sts	0x3196, r4	; 0x803196 <portStackTopForTask>
    17b0:	50 92 97 31 	sts	0x3197, r5	; 0x803197 <portStackTopForTask+0x1>
    17b4:	f4 01       	movw	r30, r8
    17b6:	42 86       	std	Z+10, r4	; 0x0a
    17b8:	53 86       	std	Z+11, r5	; 0x0b
    17ba:	16 86       	std	Z+14, r1	; 0x0e
    17bc:	17 86       	std	Z+15, r1	; 0x0f
    17be:	10 8a       	std	Z+16, r1	; 0x10
    17c0:	11 8a       	std	Z+17, r1	; 0x11
    17c2:	61 14       	cp	r6, r1
    17c4:	71 04       	cpc	r7, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <_ZN8frt_taskC2EPKchjP8emstream+0xde>
    17c8:	44 c0       	rjmp	.+136    	; 0x1852 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	79 f5       	brne	.+94     	; 0x182c <_ZN8frt_taskC2EPKchjP8emstream+0x140>
    17ce:	6a e0       	ldi	r22, 0x0A	; 10
    17d0:	c3 01       	movw	r24, r6
    17d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    17d6:	7c 01       	movw	r14, r24
    17d8:	6e ef       	ldi	r22, 0xFE	; 254
    17da:	74 e0       	ldi	r23, 0x04	; 4
    17dc:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    17e0:	be 01       	movw	r22, r28
    17e2:	6f 5f       	subi	r22, 0xFF	; 255
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	c7 01       	movw	r24, r14
    17e8:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    17ec:	6a e0       	ldi	r22, 0x0A	; 10
    17ee:	c7 01       	movw	r24, r14
    17f0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    17f4:	7c 01       	movw	r14, r24
    17f6:	65 ef       	ldi	r22, 0xF5	; 245
    17f8:	74 e0       	ldi	r23, 0x04	; 4
    17fa:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    17fe:	6a e0       	ldi	r22, 0x0A	; 10
    1800:	c7 01       	movw	r24, r14
    1802:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1806:	7c 01       	movw	r14, r24
    1808:	67 ee       	ldi	r22, 0xE7	; 231
    180a:	74 e0       	ldi	r23, 0x04	; 4
    180c:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1810:	63 e0       	ldi	r22, 0x03	; 3
    1812:	c7 01       	movw	r24, r14
    1814:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1818:	b2 01       	movw	r22, r4
    181a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN8emstreamlsEj>
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1824:	66 e0       	ldi	r22, 0x06	; 6
    1826:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <_ZN8frt_taskC2EPKchjP8emstream+0x166>
    182c:	6a e0       	ldi	r22, 0x0A	; 10
    182e:	c3 01       	movw	r24, r6
    1830:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1834:	4c 01       	movw	r8, r24
    1836:	62 ed       	ldi	r22, 0xD2	; 210
    1838:	74 e0       	ldi	r23, 0x04	; 4
    183a:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    183e:	be 01       	movw	r22, r28
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	c4 01       	movw	r24, r8
    1846:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	c4 01       	movw	r24, r8
    184e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1852:	2a 96       	adiw	r28, 0x0a	; 10
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	bf 90       	pop	r11
    186a:	af 90       	pop	r10
    186c:	9f 90       	pop	r9
    186e:	8f 90       	pop	r8
    1870:	7f 90       	pop	r7
    1872:	6f 90       	pop	r6
    1874:	5f 90       	pop	r5
    1876:	4f 90       	pop	r4
    1878:	08 95       	ret

0000187a <_ZN5rs23212clear_screenEv>:
    187a:	dc 01       	movw	r26, r24
    187c:	ed 91       	ld	r30, X+
    187e:	fc 91       	ld	r31, X
    1880:	02 80       	ldd	r0, Z+2	; 0x02
    1882:	f3 81       	ldd	r31, Z+3	; 0x03
    1884:	e0 2d       	mov	r30, r0
    1886:	6c e0       	ldi	r22, 0x0C	; 12
    1888:	19 95       	eicall
    188a:	08 95       	ret

0000188c <_ZN5rs23214check_for_charEv>:
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
    1892:	a9 8d       	ldd	r26, Y+25	; 0x19
    1894:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1896:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1898:	fc 8d       	ldd	r31, Y+28	; 0x1c
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	4d 91       	ld	r20, X+
    189e:	5c 91       	ld	r21, X
    18a0:	20 81       	ld	r18, Z
    18a2:	31 81       	ldd	r19, Z+1	; 0x01
    18a4:	42 17       	cp	r20, r18
    18a6:	53 07       	cpc	r21, r19
    18a8:	09 f4       	brne	.+2      	; 0x18ac <_ZN5rs23214check_for_charEv+0x20>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <_ZN5rs2327getcharEv>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	fc 01       	movw	r30, r24
    18b8:	c1 8d       	ldd	r28, Z+25	; 0x19
    18ba:	d2 8d       	ldd	r29, Z+26	; 0x1a
    18bc:	28 81       	ld	r18, Y
    18be:	39 81       	ldd	r19, Y+1	; 0x01
    18c0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    18c2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    18c4:	4d 91       	ld	r20, X+
    18c6:	5c 91       	ld	r21, X
    18c8:	24 17       	cp	r18, r20
    18ca:	35 07       	cpc	r19, r21
    18cc:	e9 f3       	breq	.-6      	; 0x18c8 <_ZN5rs2327getcharEv+0x16>
    18ce:	a7 89       	ldd	r26, Z+23	; 0x17
    18d0:	b0 8d       	ldd	r27, Z+24	; 0x18
    18d2:	0d 90       	ld	r0, X+
    18d4:	bc 91       	ld	r27, X
    18d6:	a0 2d       	mov	r26, r0
    18d8:	a2 0f       	add	r26, r18
    18da:	b3 1f       	adc	r27, r19
    18dc:	8c 91       	ld	r24, X
    18de:	2f 5f       	subi	r18, 0xFF	; 255
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	28 83       	st	Y, r18
    18e4:	39 83       	std	Y+1, r19	; 0x01
    18e6:	24 36       	cpi	r18, 0x64	; 100
    18e8:	31 05       	cpc	r19, r1
    18ea:	28 f0       	brcs	.+10     	; 0x18f6 <_ZN5rs2327getcharEv+0x44>
    18ec:	01 8c       	ldd	r0, Z+25	; 0x19
    18ee:	f2 8d       	ldd	r31, Z+26	; 0x1a
    18f0:	e0 2d       	mov	r30, r0
    18f2:	10 82       	st	Z, r1
    18f4:	11 82       	std	Z+1, r1	; 0x01
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <_ZN5rs2327putcharEc>:
    18fe:	dc 01       	movw	r26, r24
    1900:	50 96       	adiw	r26, 0x10	; 16
    1902:	ed 91       	ld	r30, X+
    1904:	fc 91       	ld	r31, X
    1906:	51 97       	sbiw	r26, 0x11	; 17
    1908:	80 81       	ld	r24, Z
    190a:	54 96       	adiw	r26, 0x14	; 20
    190c:	4c 91       	ld	r20, X
    190e:	54 97       	sbiw	r26, 0x14	; 20
    1910:	84 23       	and	r24, r20
    1912:	29 f0       	breq	.+10     	; 0x191e <_ZN5rs2327putcharEc+0x20>
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <_ZN5rs2327putcharEc+0x2a>
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	31 09       	sbc	r19, r1
    191a:	19 f4       	brne	.+6      	; 0x1922 <_ZN5rs2327putcharEc+0x24>
    191c:	12 c0       	rjmp	.+36     	; 0x1942 <_ZN5rs2327putcharEc+0x44>
    191e:	21 e2       	ldi	r18, 0x21	; 33
    1920:	3e e4       	ldi	r19, 0x4E	; 78
    1922:	90 81       	ld	r25, Z
    1924:	94 23       	and	r25, r20
    1926:	b9 f3       	breq	.-18     	; 0x1916 <_ZN5rs2327putcharEc+0x18>
    1928:	90 81       	ld	r25, Z
    192a:	56 96       	adiw	r26, 0x16	; 22
    192c:	8c 91       	ld	r24, X
    192e:	56 97       	sbiw	r26, 0x16	; 22
    1930:	89 2b       	or	r24, r25
    1932:	80 83       	st	Z, r24
    1934:	1e 96       	adiw	r26, 0x0e	; 14
    1936:	ed 91       	ld	r30, X+
    1938:	fc 91       	ld	r31, X
    193a:	1f 97       	sbiw	r26, 0x0f	; 15
    193c:	60 83       	st	Z, r22
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	08 95       	ret
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret

00001946 <_GLOBAL__sub_I_counter>:
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ce ef       	ldi	r28, 0xFE	; 254
    194c:	d0 e2       	ldi	r29, 0x20	; 32
    194e:	8a e0       	ldi	r24, 0x0A	; 10
    1950:	8a 83       	std	Y+2, r24	; 0x02
    1952:	1b 82       	std	Y+3, r1	; 0x03
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	1c 82       	std	Y+4, r1	; 0x04
    195a:	1e 82       	std	Y+6, r1	; 0x06
    195c:	1f 82       	std	Y+7, r1	; 0x07
    195e:	82 e6       	ldi	r24, 0x62	; 98
    1960:	90 e2       	ldi	r25, 0x20	; 32
    1962:	88 83       	st	Y, r24
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	1e 86       	std	Y+14, r1	; 0x0e
    1968:	1f 86       	std	Y+15, r1	; 0x0f
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	80 e2       	ldi	r24, 0x20	; 32
    1970:	0e 94 95 14 	call	0x292a	; 0x292a <xQueueGenericCreate>
    1974:	88 87       	std	Y+8, r24	; 0x08
    1976:	99 87       	std	Y+9, r25	; 0x09
    1978:	8a e0       	ldi	r24, 0x0A	; 10
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	8a 87       	std	Y+10, r24	; 0x0a
    1982:	9b 87       	std	Y+11, r25	; 0x0b
    1984:	ac 87       	std	Y+12, r26	; 0x0c
    1986:	bd 87       	std	Y+13, r27	; 0x0d
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <main>:
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	6e 97       	sbiw	r28, 0x1e	; 30
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	e0 e6       	ldi	r30, 0x60	; 96
    19ac:	f6 e0       	ldi	r31, 0x06	; 6
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	81 83       	std	Z+1, r24	; 0x01
    19b2:	85 83       	std	Z+5, r24	; 0x05
    19b4:	f8 94       	cli
    19b6:	e0 e5       	ldi	r30, 0x50	; 80
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	80 83       	st	Z, r24
    19c0:	81 81       	ldd	r24, Z+1	; 0x01
    19c2:	81 ff       	sbrs	r24, 1
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <main+0x32>
    19c6:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    19ca:	9f b7       	in	r25, 0x3f	; 63
    19cc:	9e 8f       	std	Y+30, r25	; 0x1e
    19ce:	f8 94       	cli
    19d0:	1b be       	out	0x3b, r1	; 59
    19d2:	88 7f       	andi	r24, 0xF8	; 248
    19d4:	81 60       	ori	r24, 0x01	; 1
    19d6:	20 e4       	ldi	r18, 0x40	; 64
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	f9 01       	movw	r30, r18
    19dc:	08 ed       	ldi	r16, 0xD8	; 216
    19de:	04 bf       	out	0x34, r16	; 52
    19e0:	80 83       	st	Z, r24
    19e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19e4:	8f bf       	out	0x3f, r24	; 63
    19e6:	e0 e5       	ldi	r30, 0x50	; 80
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	80 83       	st	Z, r24
    19f0:	9d ef       	ldi	r25, 0xFD	; 253
    19f2:	88 ed       	ldi	r24, 0xD8	; 216
    19f4:	08 b6       	in	r0, 0x38	; 56
    19f6:	18 be       	out	0x38, r1	; 56
    19f8:	84 bf       	out	0x34, r24	; 52
    19fa:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    19fe:	08 be       	out	0x38, r0	; 56
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a08:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <leftLimitSwitch>
    1a0c:	90 93 fd 20 	sts	0x20FD, r25	; 0x8020fd <leftLimitSwitch+0x1>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a18:	80 93 fa 20 	sts	0x20FA, r24	; 0x8020fa <rightLimitSwitch>
    1a1c:	90 93 fb 20 	sts	0x20FB, r25	; 0x8020fb <rightLimitSwitch+0x1>
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a28:	80 93 f8 20 	sts	0x20F8, r24	; 0x8020f8 <linear_position>
    1a2c:	90 93 f9 20 	sts	0x20F9, r25	; 0x8020f9 <linear_position+0x1>
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a40:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <thdMotor>
    1a44:	90 93 f7 20 	sts	0x20F7, r25	; 0x8020f7 <thdMotor+0x1>
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a50:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <pendulum_encoder>
    1a54:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <pendulum_encoder+0x1>
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1a60:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <linear_offset>
    1a64:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <linear_offset+0x1>
    1a68:	82 e5       	ldi	r24, 0x52	; 82
    1a6a:	90 e2       	ldi	r25, 0x20	; 32
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	8a e0       	ldi	r24, 0x0A	; 10
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	1c 82       	std	Y+4, r1	; 0x04
    1a76:	43 e0       	ldi	r20, 0x03	; 3
    1a78:	4e 83       	std	Y+6, r20	; 0x06
    1a7a:	1d 82       	std	Y+5, r1	; 0x05
    1a7c:	1f 82       	std	Y+7, r1	; 0x07
    1a7e:	18 86       	std	Y+8, r1	; 0x08
    1a80:	a0 e4       	ldi	r26, 0x40	; 64
    1a82:	b6 e0       	ldi	r27, 0x06	; 6
    1a84:	ab 87       	std	Y+11, r26	; 0x0b
    1a86:	bc 87       	std	Y+12, r27	; 0x0c
    1a88:	86 e0       	ldi	r24, 0x06	; 6
    1a8a:	8d 87       	std	Y+13, r24	; 0x0d
    1a8c:	0f 2e       	mov	r0, r31
    1a8e:	f7 e0       	ldi	r31, 0x07	; 7
    1a90:	df 2e       	mov	r13, r31
    1a92:	f0 2d       	mov	r31, r0
    1a94:	de 86       	std	Y+14, r13	; 0x0e
    1a96:	e0 eb       	ldi	r30, 0xB0	; 176
    1a98:	f8 e0       	ldi	r31, 0x08	; 8
    1a9a:	ef 87       	std	Y+15, r30	; 0x0f
    1a9c:	f8 8b       	std	Y+16, r31	; 0x10
    1a9e:	81 eb       	ldi	r24, 0xB1	; 177
    1aa0:	98 e0       	ldi	r25, 0x08	; 8
    1aa2:	89 8b       	std	Y+17, r24	; 0x11
    1aa4:	9a 8b       	std	Y+18, r25	; 0x12
    1aa6:	84 eb       	ldi	r24, 0xB4	; 180
    1aa8:	98 e0       	ldi	r25, 0x08	; 8
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ab0:	14 96       	adiw	r26, 0x04	; 4
    1ab2:	5c 91       	ld	r21, X
    1ab4:	14 97       	sbiw	r26, 0x04	; 4
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	bc 01       	movw	r22, r24
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <main+0x134>
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	2a 95       	dec	r18
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <main+0x130>
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	25 2b       	or	r18, r21
    1aca:	14 96       	adiw	r26, 0x04	; 4
    1acc:	2c 93       	st	X, r18
    1ace:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ad0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ad2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ad4:	5c 91       	ld	r21, X
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <main+0x150>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	2a 95       	dec	r18
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <main+0x14c>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	25 2b       	or	r18, r21
    1ae6:	2c 93       	st	X, r18
    1ae8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aea:	ab 85       	ldd	r26, Y+11	; 0x0b
    1aec:	bc 85       	ldd	r27, Y+12	; 0x0c
    1aee:	2c 91       	ld	r18, X
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <main+0x168>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	3a 95       	dec	r19
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <main+0x164>
    1afa:	80 95       	com	r24
    1afc:	90 95       	com	r25
    1afe:	82 23       	and	r24, r18
    1b00:	8c 93       	st	X, r24
    1b02:	80 e1       	ldi	r24, 0x10	; 16
    1b04:	83 83       	std	Z+3, r24	; 0x03
    1b06:	45 83       	std	Z+5, r20	; 0x05
    1b08:	80 ef       	ldi	r24, 0xF0	; 240
    1b0a:	87 83       	std	Z+7, r24	; 0x07
    1b0c:	81 e2       	ldi	r24, 0x21	; 33
    1b0e:	86 83       	std	Z+6, r24	; 0x06
    1b10:	88 e1       	ldi	r24, 0x18	; 24
    1b12:	84 83       	std	Z+4, r24	; 0x04
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	8e 8b       	std	Y+22, r24	; 0x16
    1b18:	80 e4       	ldi	r24, 0x40	; 64
    1b1a:	8f 8b       	std	Y+23, r24	; 0x17
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	8d 8b       	std	Y+21, r24	; 0x15
    1b20:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b22:	f8 89       	ldd	r31, Y+16	; 0x10
    1b24:	80 81       	ld	r24, Z
    1b26:	80 81       	ld	r24, Z
    1b28:	82 e1       	ldi	r24, 0x12	; 18
    1b2a:	90 e2       	ldi	r25, 0x20	; 32
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	84 e2       	ldi	r24, 0x24	; 36
    1b32:	91 e2       	ldi	r25, 0x21	; 33
    1b34:	88 8f       	std	Y+24, r24	; 0x18
    1b36:	99 8f       	std	Y+25, r25	; 0x19
    1b38:	82 e2       	ldi	r24, 0x22	; 34
    1b3a:	91 e2       	ldi	r25, 0x21	; 33
    1b3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b3e:	9b 8f       	std	Y+27, r25	; 0x1b
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	91 e2       	ldi	r25, 0x21	; 33
    1b44:	8c 8f       	std	Y+28, r24	; 0x1c
    1b46:	9d 8f       	std	Y+29, r25	; 0x1d
    1b48:	84 e6       	ldi	r24, 0x64	; 100
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1b50:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <rcvC1_buffer>
    1b54:	90 93 25 21 	sts	0x2125, r25	; 0x802125 <rcvC1_buffer+0x1>
    1b58:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b5a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1b5c:	10 82       	st	Z, r1
    1b5e:	11 82       	std	Z+1, r1	; 0x01
    1b60:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1b62:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1b64:	10 82       	st	Z, r1
    1b66:	11 82       	std	Z+1, r1	; 0x01
    1b68:	67 e0       	ldi	r22, 0x07	; 7
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1b72:	7c 01       	movw	r14, r24
    1b74:	66 e9       	ldi	r22, 0x96	; 150
    1b76:	70 e2       	ldi	r23, 0x20	; 32
    1b78:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    1b7c:	66 e0       	ldi	r22, 0x06	; 6
    1b7e:	c7 01       	movw	r24, r14
    1b80:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1b84:	66 e0       	ldi	r22, 0x06	; 6
    1b86:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8emstreamlsE15ser_manipulator>
    1b8a:	82 e1       	ldi	r24, 0x12	; 18
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1b92:	7c 01       	movw	r14, r24
    1b94:	8e 01       	movw	r16, r28
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	24 e0       	ldi	r18, 0x04	; 4
    1b9c:	31 e0       	ldi	r19, 0x01	; 1
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	65 eb       	ldi	r22, 0xB5	; 181
    1ba2:	70 e2       	ldi	r23, 0x20	; 32
    1ba4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1ba8:	82 e2       	ldi	r24, 0x22	; 34
    1baa:	90 e2       	ldi	r25, 0x20	; 32
    1bac:	f7 01       	movw	r30, r14
    1bae:	80 83       	st	Z, r24
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	83 e1       	ldi	r24, 0x13	; 19
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1bba:	7c 01       	movw	r14, r24
    1bbc:	24 e0       	ldi	r18, 0x04	; 4
    1bbe:	31 e0       	ldi	r19, 0x01	; 1
    1bc0:	44 e0       	ldi	r20, 0x04	; 4
    1bc2:	6d eb       	ldi	r22, 0xBD	; 189
    1bc4:	70 e2       	ldi	r23, 0x20	; 32
    1bc6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1bca:	0f 2e       	mov	r0, r31
    1bcc:	fa e2       	ldi	r31, 0x2A	; 42
    1bce:	af 2e       	mov	r10, r31
    1bd0:	f0 e2       	ldi	r31, 0x20	; 32
    1bd2:	bf 2e       	mov	r11, r31
    1bd4:	f0 2d       	mov	r31, r0
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	a0 82       	st	Z, r10
    1bda:	b1 82       	std	Z+1, r11	; 0x01
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	82 8b       	std	Z+18, r24	; 0x12
    1be0:	83 e1       	ldi	r24, 0x13	; 19
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1be8:	7c 01       	movw	r14, r24
    1bea:	24 e0       	ldi	r18, 0x04	; 4
    1bec:	31 e0       	ldi	r19, 0x01	; 1
    1bee:	44 e0       	ldi	r20, 0x04	; 4
    1bf0:	64 ec       	ldi	r22, 0xC4	; 196
    1bf2:	70 e2       	ldi	r23, 0x20	; 32
    1bf4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	a0 82       	st	Z, r10
    1bfc:	b1 82       	std	Z+1, r11	; 0x01
    1bfe:	84 e0       	ldi	r24, 0x04	; 4
    1c00:	82 8b       	std	Z+18, r24	; 0x12
    1c02:	82 e1       	ldi	r24, 0x12	; 18
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1c0a:	7c 01       	movw	r14, r24
    1c0c:	24 e0       	ldi	r18, 0x04	; 4
    1c0e:	31 e0       	ldi	r19, 0x01	; 1
    1c10:	44 e0       	ldi	r20, 0x04	; 4
    1c12:	6c ec       	ldi	r22, 0xCC	; 204
    1c14:	70 e2       	ldi	r23, 0x20	; 32
    1c16:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1c1a:	82 e3       	ldi	r24, 0x32	; 50
    1c1c:	90 e2       	ldi	r25, 0x20	; 32
    1c1e:	f7 01       	movw	r30, r14
    1c20:	80 83       	st	Z, r24
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	82 e1       	ldi	r24, 0x12	; 18
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	24 e0       	ldi	r18, 0x04	; 4
    1c30:	31 e0       	ldi	r19, 0x01	; 1
    1c32:	43 e0       	ldi	r20, 0x03	; 3
    1c34:	63 ed       	ldi	r22, 0xD3	; 211
    1c36:	70 e2       	ldi	r23, 0x20	; 32
    1c38:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1c3c:	8a e3       	ldi	r24, 0x3A	; 58
    1c3e:	90 e2       	ldi	r25, 0x20	; 32
    1c40:	f7 01       	movw	r30, r14
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	82 e1       	ldi	r24, 0x12	; 18
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1c4e:	7c 01       	movw	r14, r24
    1c50:	24 e0       	ldi	r18, 0x04	; 4
    1c52:	31 e0       	ldi	r19, 0x01	; 1
    1c54:	42 e0       	ldi	r20, 0x02	; 2
    1c56:	6a ed       	ldi	r22, 0xDA	; 218
    1c58:	70 e2       	ldi	r23, 0x20	; 32
    1c5a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1c5e:	82 e4       	ldi	r24, 0x42	; 66
    1c60:	90 e2       	ldi	r25, 0x20	; 32
    1c62:	f7 01       	movw	r30, r14
    1c64:	80 83       	st	Z, r24
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	82 e1       	ldi	r24, 0x12	; 18
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    1c70:	7c 01       	movw	r14, r24
    1c72:	24 e0       	ldi	r18, 0x04	; 4
    1c74:	31 e0       	ldi	r19, 0x01	; 1
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	62 ee       	ldi	r22, 0xE2	; 226
    1c7a:	70 e2       	ldi	r23, 0x20	; 32
    1c7c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8frt_taskC2EPKchjP8emstream>
    1c80:	8a e4       	ldi	r24, 0x4A	; 74
    1c82:	90 e2       	ldi	r25, 0x20	; 32
    1c84:	f7 01       	movw	r30, r14
    1c86:	80 83       	st	Z, r24
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c8e:	78 94       	sei
    1c90:	0e 94 90 17 	call	0x2f20	; 0x2f20 <vTaskStartScheduler>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	6e 96       	adiw	r28, 0x1e	; 30
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	bf 90       	pop	r11
    1cae:	af 90       	pop	r10
    1cb0:	08 95       	ret

00001cb2 <__vector_58>:
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	08 b6       	in	r0, 0x38	; 56
    1cbe:	0f 92       	push	r0
    1cc0:	18 be       	out	0x38, r1	; 56
    1cc2:	0b b6       	in	r0, 0x3b	; 59
    1cc4:	0f 92       	push	r0
    1cc6:	1b be       	out	0x3b, r1	; 59
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	ef 93       	push	r30
    1cd2:	ff 93       	push	r31
    1cd4:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1cd8:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <rcvE0_buffer>
    1cdc:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <rcvE0_buffer+0x1>
    1ce0:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvE0_write_index>
    1ce4:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvE0_write_index+0x1>
    1ce8:	e8 0f       	add	r30, r24
    1cea:	f9 1f       	adc	r31, r25
    1cec:	20 83       	st	Z, r18
    1cee:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <rcvE0_write_index>
    1cf2:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <rcvE0_write_index+0x1>
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	84 36       	cpi	r24, 0x64	; 100
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	60 f4       	brcc	.+24     	; 0x1d16 <__vector_58+0x64>
    1cfe:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <rcvE0_write_index>
    1d02:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <rcvE0_write_index+0x1>
    1d06:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <rcvE0_read_index>
    1d0a:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <rcvE0_read_index+0x1>
    1d0e:	82 17       	cp	r24, r18
    1d10:	93 07       	cpc	r25, r19
    1d12:	f1 f4       	brne	.+60     	; 0x1d50 <__vector_58+0x9e>
    1d14:	0c c0       	rjmp	.+24     	; 0x1d2e <__vector_58+0x7c>
    1d16:	10 92 0e 21 	sts	0x210E, r1	; 0x80210e <rcvE0_write_index>
    1d1a:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <rcvE0_write_index+0x1>
    1d1e:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <rcvE0_read_index>
    1d22:	90 91 11 21 	lds	r25, 0x2111	; 0x802111 <rcvE0_read_index+0x1>
    1d26:	18 16       	cp	r1, r24
    1d28:	19 06       	cpc	r1, r25
    1d2a:	91 f4       	brne	.+36     	; 0x1d50 <__vector_58+0x9e>
    1d2c:	0e c0       	rjmp	.+28     	; 0x1d4a <__vector_58+0x98>
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	84 36       	cpi	r24, 0x64	; 100
    1d32:	91 05       	cpc	r25, r1
    1d34:	28 f4       	brcc	.+10     	; 0x1d40 <__vector_58+0x8e>
    1d36:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <rcvE0_read_index>
    1d3a:	90 93 11 21 	sts	0x2111, r25	; 0x802111 <rcvE0_read_index+0x1>
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <__vector_58+0x9e>
    1d40:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <rcvE0_read_index>
    1d44:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <rcvE0_read_index+0x1>
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <__vector_58+0x9e>
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	f3 cf       	rjmp	.-26     	; 0x1d36 <__vector_58+0x84>
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	3f 91       	pop	r19
    1d5a:	2f 91       	pop	r18
    1d5c:	0f 90       	pop	r0
    1d5e:	0b be       	out	0x3b, r0	; 59
    1d60:	0f 90       	pop	r0
    1d62:	08 be       	out	0x38, r0	; 56
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_91>:
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	08 b6       	in	r0, 0x38	; 56
    1d7a:	0f 92       	push	r0
    1d7c:	18 be       	out	0x38, r1	; 56
    1d7e:	0b b6       	in	r0, 0x3b	; 59
    1d80:	0f 92       	push	r0
    1d82:	1b be       	out	0x3b, r1	; 59
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    1d94:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <rcvD1_buffer>
    1d98:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <rcvD1_buffer+0x1>
    1d9c:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvD1_write_index>
    1da0:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvD1_write_index+0x1>
    1da4:	e8 0f       	add	r30, r24
    1da6:	f9 1f       	adc	r31, r25
    1da8:	20 83       	st	Z, r18
    1daa:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <rcvD1_write_index>
    1dae:	90 91 15 21 	lds	r25, 0x2115	; 0x802115 <rcvD1_write_index+0x1>
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	84 36       	cpi	r24, 0x64	; 100
    1db6:	91 05       	cpc	r25, r1
    1db8:	60 f4       	brcc	.+24     	; 0x1dd2 <__vector_91+0x64>
    1dba:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <rcvD1_write_index>
    1dbe:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <rcvD1_write_index+0x1>
    1dc2:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <rcvD1_read_index>
    1dc6:	30 91 17 21 	lds	r19, 0x2117	; 0x802117 <rcvD1_read_index+0x1>
    1dca:	82 17       	cp	r24, r18
    1dcc:	93 07       	cpc	r25, r19
    1dce:	f1 f4       	brne	.+60     	; 0x1e0c <__vector_91+0x9e>
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <__vector_91+0x7c>
    1dd2:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <rcvD1_write_index>
    1dd6:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <rcvD1_write_index+0x1>
    1dda:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <rcvD1_read_index>
    1dde:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <rcvD1_read_index+0x1>
    1de2:	18 16       	cp	r1, r24
    1de4:	19 06       	cpc	r1, r25
    1de6:	91 f4       	brne	.+36     	; 0x1e0c <__vector_91+0x9e>
    1de8:	0e c0       	rjmp	.+28     	; 0x1e06 <__vector_91+0x98>
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	84 36       	cpi	r24, 0x64	; 100
    1dee:	91 05       	cpc	r25, r1
    1df0:	28 f4       	brcc	.+10     	; 0x1dfc <__vector_91+0x8e>
    1df2:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <rcvD1_read_index>
    1df6:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <rcvD1_read_index+0x1>
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <__vector_91+0x9e>
    1dfc:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <rcvD1_read_index>
    1e00:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <rcvD1_read_index+0x1>
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <__vector_91+0x9e>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	f3 cf       	rjmp	.-26     	; 0x1df2 <__vector_91+0x84>
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0b be       	out	0x3b, r0	; 59
    1e1c:	0f 90       	pop	r0
    1e1e:	08 be       	out	0x38, r0	; 56
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <__vector_88>:
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	08 b6       	in	r0, 0x38	; 56
    1e36:	0f 92       	push	r0
    1e38:	18 be       	out	0x38, r1	; 56
    1e3a:	0b b6       	in	r0, 0x3b	; 59
    1e3c:	0f 92       	push	r0
    1e3e:	1b be       	out	0x3b, r1	; 59
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
    1e4c:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1e50:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <rcvD0_buffer>
    1e54:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <rcvD0_buffer+0x1>
    1e58:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <rcvC0_write_index>
    1e5c:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <rcvC0_write_index+0x1>
    1e60:	e8 0f       	add	r30, r24
    1e62:	f9 1f       	adc	r31, r25
    1e64:	20 83       	st	Z, r18
    1e66:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <rcvD0_write_index>
    1e6a:	90 91 1b 21 	lds	r25, 0x211B	; 0x80211b <rcvD0_write_index+0x1>
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	84 36       	cpi	r24, 0x64	; 100
    1e72:	91 05       	cpc	r25, r1
    1e74:	60 f4       	brcc	.+24     	; 0x1e8e <__vector_88+0x64>
    1e76:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <rcvD0_write_index>
    1e7a:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <rcvD0_write_index+0x1>
    1e7e:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <rcvD0_read_index>
    1e82:	30 91 1d 21 	lds	r19, 0x211D	; 0x80211d <rcvD0_read_index+0x1>
    1e86:	82 17       	cp	r24, r18
    1e88:	93 07       	cpc	r25, r19
    1e8a:	f1 f4       	brne	.+60     	; 0x1ec8 <__vector_88+0x9e>
    1e8c:	0c c0       	rjmp	.+24     	; 0x1ea6 <__vector_88+0x7c>
    1e8e:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <rcvD0_write_index>
    1e92:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <rcvD0_write_index+0x1>
    1e96:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <rcvD0_read_index>
    1e9a:	90 91 1d 21 	lds	r25, 0x211D	; 0x80211d <rcvD0_read_index+0x1>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	19 06       	cpc	r1, r25
    1ea2:	91 f4       	brne	.+36     	; 0x1ec8 <__vector_88+0x9e>
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <__vector_88+0x98>
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	84 36       	cpi	r24, 0x64	; 100
    1eaa:	91 05       	cpc	r25, r1
    1eac:	28 f4       	brcc	.+10     	; 0x1eb8 <__vector_88+0x8e>
    1eae:	80 93 1c 21 	sts	0x211C, r24	; 0x80211c <rcvD0_read_index>
    1eb2:	90 93 1d 21 	sts	0x211D, r25	; 0x80211d <rcvD0_read_index+0x1>
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <__vector_88+0x9e>
    1eb8:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <rcvD0_read_index>
    1ebc:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <rcvD0_read_index+0x1>
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <__vector_88+0x9e>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	f3 cf       	rjmp	.-26     	; 0x1eae <__vector_88+0x84>
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	3f 91       	pop	r19
    1ed2:	2f 91       	pop	r18
    1ed4:	0f 90       	pop	r0
    1ed6:	0b be       	out	0x3b, r0	; 59
    1ed8:	0f 90       	pop	r0
    1eda:	08 be       	out	0x38, r0	; 56
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_28>:
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	08 b6       	in	r0, 0x38	; 56
    1ef2:	0f 92       	push	r0
    1ef4:	18 be       	out	0x38, r1	; 56
    1ef6:	0b b6       	in	r0, 0x3b	; 59
    1ef8:	0f 92       	push	r0
    1efa:	1b be       	out	0x3b, r1	; 59
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1f0c:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <rcvC1_buffer>
    1f10:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <rcvC1_buffer+0x1>
    1f14:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC1_write_index>
    1f18:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC1_write_index+0x1>
    1f1c:	e8 0f       	add	r30, r24
    1f1e:	f9 1f       	adc	r31, r25
    1f20:	20 83       	st	Z, r18
    1f22:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <rcvC1_write_index>
    1f26:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <rcvC1_write_index+0x1>
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	84 36       	cpi	r24, 0x64	; 100
    1f2e:	91 05       	cpc	r25, r1
    1f30:	60 f4       	brcc	.+24     	; 0x1f4a <__vector_28+0x64>
    1f32:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <rcvC1_write_index>
    1f36:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <rcvC1_write_index+0x1>
    1f3a:	20 91 22 21 	lds	r18, 0x2122	; 0x802122 <rcvC1_read_index>
    1f3e:	30 91 23 21 	lds	r19, 0x2123	; 0x802123 <rcvC1_read_index+0x1>
    1f42:	82 17       	cp	r24, r18
    1f44:	93 07       	cpc	r25, r19
    1f46:	f1 f4       	brne	.+60     	; 0x1f84 <__vector_28+0x9e>
    1f48:	0c c0       	rjmp	.+24     	; 0x1f62 <__vector_28+0x7c>
    1f4a:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <rcvC1_write_index>
    1f4e:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <rcvC1_write_index+0x1>
    1f52:	80 91 22 21 	lds	r24, 0x2122	; 0x802122 <rcvC1_read_index>
    1f56:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <rcvC1_read_index+0x1>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	19 06       	cpc	r1, r25
    1f5e:	91 f4       	brne	.+36     	; 0x1f84 <__vector_28+0x9e>
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <__vector_28+0x98>
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	84 36       	cpi	r24, 0x64	; 100
    1f66:	91 05       	cpc	r25, r1
    1f68:	28 f4       	brcc	.+10     	; 0x1f74 <__vector_28+0x8e>
    1f6a:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <rcvC1_read_index>
    1f6e:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <rcvC1_read_index+0x1>
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <__vector_28+0x9e>
    1f74:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <rcvC1_read_index>
    1f78:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <rcvC1_read_index+0x1>
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <__vector_28+0x9e>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	f3 cf       	rjmp	.-26     	; 0x1f6a <__vector_28+0x84>
    1f84:	ff 91       	pop	r31
    1f86:	ef 91       	pop	r30
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	3f 91       	pop	r19
    1f8e:	2f 91       	pop	r18
    1f90:	0f 90       	pop	r0
    1f92:	0b be       	out	0x3b, r0	; 59
    1f94:	0f 90       	pop	r0
    1f96:	08 be       	out	0x38, r0	; 56
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <__vector_25>:
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	08 b6       	in	r0, 0x38	; 56
    1fae:	0f 92       	push	r0
    1fb0:	18 be       	out	0x38, r1	; 56
    1fb2:	0b b6       	in	r0, 0x3b	; 59
    1fb4:	0f 92       	push	r0
    1fb6:	1b be       	out	0x3b, r1	; 59
    1fb8:	2f 93       	push	r18
    1fba:	3f 93       	push	r19
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
    1fc4:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1fc8:	e0 91 2a 21 	lds	r30, 0x212A	; 0x80212a <rcvC0_buffer>
    1fcc:	f0 91 2b 21 	lds	r31, 0x212B	; 0x80212b <rcvC0_buffer+0x1>
    1fd0:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <rcvC0_write_index>
    1fd4:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <rcvC0_write_index+0x1>
    1fd8:	e8 0f       	add	r30, r24
    1fda:	f9 1f       	adc	r31, r25
    1fdc:	20 83       	st	Z, r18
    1fde:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <rcvC0_write_index>
    1fe2:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <rcvC0_write_index+0x1>
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	84 36       	cpi	r24, 0x64	; 100
    1fea:	91 05       	cpc	r25, r1
    1fec:	60 f4       	brcc	.+24     	; 0x2006 <__vector_25+0x64>
    1fee:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <rcvC0_write_index>
    1ff2:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <rcvC0_write_index+0x1>
    1ff6:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <rcvC0_read_index>
    1ffa:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <rcvC0_read_index+0x1>
    1ffe:	82 17       	cp	r24, r18
    2000:	93 07       	cpc	r25, r19
    2002:	f1 f4       	brne	.+60     	; 0x2040 <__vector_25+0x9e>
    2004:	0c c0       	rjmp	.+24     	; 0x201e <__vector_25+0x7c>
    2006:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <rcvC0_write_index>
    200a:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <rcvC0_write_index+0x1>
    200e:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <rcvC0_read_index>
    2012:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <rcvC0_read_index+0x1>
    2016:	18 16       	cp	r1, r24
    2018:	19 06       	cpc	r1, r25
    201a:	91 f4       	brne	.+36     	; 0x2040 <__vector_25+0x9e>
    201c:	0e c0       	rjmp	.+28     	; 0x203a <__vector_25+0x98>
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	84 36       	cpi	r24, 0x64	; 100
    2022:	91 05       	cpc	r25, r1
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__vector_25+0x8e>
    2026:	80 93 28 21 	sts	0x2128, r24	; 0x802128 <rcvC0_read_index>
    202a:	90 93 29 21 	sts	0x2129, r25	; 0x802129 <rcvC0_read_index+0x1>
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <__vector_25+0x9e>
    2030:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <rcvC0_read_index>
    2034:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <rcvC0_read_index+0x1>
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <__vector_25+0x9e>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	f3 cf       	rjmp	.-26     	; 0x2026 <__vector_25+0x84>
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	3f 91       	pop	r19
    204a:	2f 91       	pop	r18
    204c:	0f 90       	pop	r0
    204e:	0b be       	out	0x3b, r0	; 59
    2050:	0f 90       	pop	r0
    2052:	08 be       	out	0x38, r0	; 56
    2054:	0f 90       	pop	r0
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	0f 90       	pop	r0
    205a:	1f 90       	pop	r1
    205c:	18 95       	reti

0000205e <_ZN8emstreamlsEh>:
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	29 97       	sbiw	r28, 0x09	; 9
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	8c 01       	movw	r16, r24
    207a:	e6 2e       	mov	r14, r22
    207c:	dc 01       	movw	r26, r24
    207e:	13 96       	adiw	r26, 0x03	; 3
    2080:	8c 91       	ld	r24, X
    2082:	13 97       	sbiw	r26, 0x03	; 3
    2084:	88 23       	and	r24, r24
    2086:	41 f0       	breq	.+16     	; 0x2098 <_ZN8emstreamlsEh+0x3a>
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	02 80       	ldd	r0, Z+2	; 0x02
    208e:	f3 81       	ldd	r31, Z+3	; 0x03
    2090:	e0 2d       	mov	r30, r0
    2092:	c8 01       	movw	r24, r16
    2094:	19 95       	eicall
    2096:	56 c0       	rjmp	.+172    	; 0x2144 <_ZN8emstreamlsEh+0xe6>
    2098:	f8 01       	movw	r30, r16
    209a:	42 81       	ldd	r20, Z+2	; 0x02
    209c:	42 30       	cpi	r20, 0x02	; 2
    209e:	19 f5       	brne	.+70     	; 0x20e6 <_ZN8emstreamlsEh+0x88>
    20a0:	68 94       	set
    20a2:	cc 24       	eor	r12, r12
    20a4:	c3 f8       	bld	r12, 3
    20a6:	d1 2c       	mov	r13, r1
    20a8:	68 94       	set
    20aa:	ff 24       	eor	r15, r15
    20ac:	f7 f8       	bld	r15, 7
    20ae:	8e 2d       	mov	r24, r14
    20b0:	8f 21       	and	r24, r15
    20b2:	51 f0       	breq	.+20     	; 0x20c8 <_ZN8emstreamlsEh+0x6a>
    20b4:	d8 01       	movw	r26, r16
    20b6:	ed 91       	ld	r30, X+
    20b8:	fc 91       	ld	r31, X
    20ba:	02 80       	ldd	r0, Z+2	; 0x02
    20bc:	f3 81       	ldd	r31, Z+3	; 0x03
    20be:	e0 2d       	mov	r30, r0
    20c0:	61 e3       	ldi	r22, 0x31	; 49
    20c2:	c8 01       	movw	r24, r16
    20c4:	19 95       	eicall
    20c6:	09 c0       	rjmp	.+18     	; 0x20da <_ZN8emstreamlsEh+0x7c>
    20c8:	d8 01       	movw	r26, r16
    20ca:	ed 91       	ld	r30, X+
    20cc:	fc 91       	ld	r31, X
    20ce:	02 80       	ldd	r0, Z+2	; 0x02
    20d0:	f3 81       	ldd	r31, Z+3	; 0x03
    20d2:	e0 2d       	mov	r30, r0
    20d4:	60 e3       	ldi	r22, 0x30	; 48
    20d6:	c8 01       	movw	r24, r16
    20d8:	19 95       	eicall
    20da:	f6 94       	lsr	r15
    20dc:	b1 e0       	ldi	r27, 0x01	; 1
    20de:	cb 1a       	sub	r12, r27
    20e0:	d1 08       	sbc	r13, r1
    20e2:	29 f7       	brne	.-54     	; 0x20ae <_ZN8emstreamlsEh+0x50>
    20e4:	2f c0       	rjmp	.+94     	; 0x2144 <_ZN8emstreamlsEh+0xe6>
    20e6:	40 31       	cpi	r20, 0x10	; 16
    20e8:	f9 f4       	brne	.+62     	; 0x2128 <_ZN8emstreamlsEh+0xca>
    20ea:	62 95       	swap	r22
    20ec:	6f 70       	andi	r22, 0x0F	; 15
    20ee:	01 90       	ld	r0, Z+
    20f0:	f0 81       	ld	r31, Z
    20f2:	e0 2d       	mov	r30, r0
    20f4:	02 80       	ldd	r0, Z+2	; 0x02
    20f6:	f3 81       	ldd	r31, Z+3	; 0x03
    20f8:	e0 2d       	mov	r30, r0
    20fa:	6a 30       	cpi	r22, 0x0A	; 10
    20fc:	10 f0       	brcs	.+4      	; 0x2102 <_ZN8emstreamlsEh+0xa4>
    20fe:	69 5c       	subi	r22, 0xC9	; 201
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <_ZN8emstreamlsEh+0xa6>
    2102:	60 5d       	subi	r22, 0xD0	; 208
    2104:	c8 01       	movw	r24, r16
    2106:	19 95       	eicall
    2108:	6e 2d       	mov	r22, r14
    210a:	6f 70       	andi	r22, 0x0F	; 15
    210c:	d8 01       	movw	r26, r16
    210e:	ed 91       	ld	r30, X+
    2110:	fc 91       	ld	r31, X
    2112:	02 80       	ldd	r0, Z+2	; 0x02
    2114:	f3 81       	ldd	r31, Z+3	; 0x03
    2116:	e0 2d       	mov	r30, r0
    2118:	6a 30       	cpi	r22, 0x0A	; 10
    211a:	10 f0       	brcs	.+4      	; 0x2120 <_ZN8emstreamlsEh+0xc2>
    211c:	69 5c       	subi	r22, 0xC9	; 201
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <_ZN8emstreamlsEh+0xc4>
    2120:	60 5d       	subi	r22, 0xD0	; 208
    2122:	c8 01       	movw	r24, r16
    2124:	19 95       	eicall
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <_ZN8emstreamlsEh+0xe6>
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	be 01       	movw	r22, r28
    212c:	6f 5f       	subi	r22, 0xFF	; 255
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	8e 2d       	mov	r24, r14
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 89 1c 	call	0x3912	; 0x3912 <utoa>
    2138:	be 01       	movw	r22, r28
    213a:	6f 5f       	subi	r22, 0xFF	; 255
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	c8 01       	movw	r24, r16
    2140:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN8emstream4putsEPKc>
    2144:	c8 01       	movw	r24, r16
    2146:	29 96       	adiw	r28, 0x09	; 9
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	cf 90       	pop	r12
    215c:	08 95       	ret

0000215e <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    2168:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    216c:	80 91 2c 21 	lds	r24, 0x212C	; 0x80212c <xHeapHasBeenInitialised.4150>
    2170:	81 11       	cpse	r24, r1
    2172:	1d c0       	rjmp	.+58     	; 0x21ae <pvPortMalloc+0x50>
		{
			prvHeapInit();
    2174:	a1 e3       	ldi	r26, 0x31	; 49
    2176:	b1 e2       	ldi	r27, 0x21	; 33
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f1 e2       	ldi	r31, 0x21	; 33
    217c:	ed 93       	st	X+, r30
    217e:	fc 93       	st	X, r31
    2180:	11 97       	sbiw	r26, 0x01	; 1
    2182:	12 96       	adiw	r26, 0x02	; 2
    2184:	1d 92       	st	X+, r1
    2186:	1c 92       	st	X, r1
    2188:	13 97       	sbiw	r26, 0x03	; 3
    218a:	ad e2       	ldi	r26, 0x2D	; 45
    218c:	b1 e2       	ldi	r27, 0x21	; 33
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	9f e0       	ldi	r25, 0x0F	; 15
    2192:	12 96       	adiw	r26, 0x02	; 2
    2194:	8d 93       	st	X+, r24
    2196:	9c 93       	st	X, r25
    2198:	13 97       	sbiw	r26, 0x03	; 3
    219a:	1d 92       	st	X+, r1
    219c:	1c 92       	st	X, r1
    219e:	11 97       	sbiw	r26, 0x01	; 1
    21a0:	82 83       	std	Z+2, r24	; 0x02
    21a2:	93 83       	std	Z+3, r25	; 0x03
    21a4:	a0 83       	st	Z, r26
    21a6:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	80 93 2c 21 	sts	0x212C, r24	; 0x80212c <xHeapHasBeenInitialised.4150>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    21ae:	20 97       	sbiw	r28, 0x00	; 0
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <pvPortMalloc+0x56>
    21b2:	5f c0       	rjmp	.+190    	; 0x2272 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
    21b4:	9e 01       	movw	r18, r28
    21b6:	2b 5f       	subi	r18, 0xFB	; 251
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    21ba:	24 96       	adiw	r28, 0x04	; 4
    21bc:	ce 3f       	cpi	r28, 0xFE	; 254
    21be:	df 40       	sbci	r29, 0x0F	; 15
    21c0:	08 f0       	brcs	.+2      	; 0x21c4 <pvPortMalloc+0x66>
    21c2:	5a c0       	rjmp	.+180    	; 0x2278 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    21c4:	e0 91 31 21 	lds	r30, 0x2131	; 0x802131 <xStart>
    21c8:	f0 91 32 21 	lds	r31, 0x2132	; 0x802132 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    21cc:	a1 e3       	ldi	r26, 0x31	; 49
    21ce:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <pvPortMalloc+0x78>
    21d2:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
    21d4:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	82 17       	cp	r24, r18
    21dc:	93 07       	cpc	r25, r19
    21de:	20 f4       	brcc	.+8      	; 0x21e8 <pvPortMalloc+0x8a>
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	a9 f7       	brne	.-22     	; 0x21d2 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    21e8:	c1 e2       	ldi	r28, 0x21	; 33
    21ea:	ed 32       	cpi	r30, 0x2D	; 45
    21ec:	fc 07       	cpc	r31, r28
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <pvPortMalloc+0x94>
    21f0:	46 c0       	rjmp	.+140    	; 0x227e <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    21f2:	cd 91       	ld	r28, X+
    21f4:	dc 91       	ld	r29, X
    21f6:	11 97       	sbiw	r26, 0x01	; 1
    21f8:	8e 01       	movw	r16, r28
    21fa:	0b 5f       	subi	r16, 0xFB	; 251
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	8d 93       	st	X+, r24
    2204:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	93 81       	ldd	r25, Z+3	; 0x03
    220a:	82 1b       	sub	r24, r18
    220c:	93 0b       	sbc	r25, r19
    220e:	8b 30       	cpi	r24, 0x0B	; 11
    2210:	91 05       	cpc	r25, r1
    2212:	10 f1       	brcs	.+68     	; 0x2258 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    2214:	bf 01       	movw	r22, r30
    2216:	62 0f       	add	r22, r18
    2218:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    221a:	db 01       	movw	r26, r22
    221c:	12 96       	adiw	r26, 0x02	; 2
    221e:	8d 93       	st	X+, r24
    2220:	9c 93       	st	X, r25
    2222:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    2224:	22 83       	std	Z+2, r18	; 0x02
    2226:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2228:	12 96       	adiw	r26, 0x02	; 2
    222a:	4d 91       	ld	r20, X+
    222c:	5c 91       	ld	r21, X
    222e:	13 97       	sbiw	r26, 0x03	; 3
    2230:	81 e3       	ldi	r24, 0x31	; 49
    2232:	91 e2       	ldi	r25, 0x21	; 33
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <pvPortMalloc+0xda>
    2236:	cd 01       	movw	r24, r26
    2238:	ec 01       	movw	r28, r24
    223a:	a8 81       	ld	r26, Y
    223c:	b9 81       	ldd	r27, Y+1	; 0x01
    223e:	12 96       	adiw	r26, 0x02	; 2
    2240:	2d 91       	ld	r18, X+
    2242:	3c 91       	ld	r19, X
    2244:	13 97       	sbiw	r26, 0x03	; 3
    2246:	24 17       	cp	r18, r20
    2248:	35 07       	cpc	r19, r21
    224a:	a8 f3       	brcs	.-22     	; 0x2236 <pvPortMalloc+0xd8>
    224c:	eb 01       	movw	r28, r22
    224e:	a8 83       	st	Y, r26
    2250:	b9 83       	std	Y+1, r27	; 0x01
    2252:	dc 01       	movw	r26, r24
    2254:	6d 93       	st	X+, r22
    2256:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    2258:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    225c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2260:	22 81       	ldd	r18, Z+2	; 0x02
    2262:	33 81       	ldd	r19, Z+3	; 0x03
    2264:	82 1b       	sub	r24, r18
    2266:	93 0b       	sbc	r25, r19
    2268:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    226c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <pvPortMalloc+0x124>
    2278:	00 e0       	ldi	r16, 0x00	; 0
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <pvPortMalloc+0x124>
    227e:	00 e0       	ldi	r16, 0x00	; 0
    2280:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
    2282:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2286:	c8 01       	movw	r24, r16
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret

00002292 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	41 f1       	breq	.+80     	; 0x22ee <vPortFree+0x5c>
    229e:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    22a0:	8c 01       	movw	r16, r24
    22a2:	05 50       	subi	r16, 0x05	; 5
    22a4:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    22a6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    22aa:	f8 01       	movw	r30, r16
    22ac:	42 81       	ldd	r20, Z+2	; 0x02
    22ae:	53 81       	ldd	r21, Z+3	; 0x03
    22b0:	a1 e3       	ldi	r26, 0x31	; 49
    22b2:	b1 e2       	ldi	r27, 0x21	; 33
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <vPortFree+0x26>
    22b6:	df 01       	movw	r26, r30
    22b8:	ed 91       	ld	r30, X+
    22ba:	fc 91       	ld	r31, X
    22bc:	11 97       	sbiw	r26, 0x01	; 1
    22be:	22 81       	ldd	r18, Z+2	; 0x02
    22c0:	33 81       	ldd	r19, Z+3	; 0x03
    22c2:	24 17       	cp	r18, r20
    22c4:	35 07       	cpc	r19, r21
    22c6:	b8 f3       	brcs	.-18     	; 0x22b6 <vPortFree+0x24>
    22c8:	25 97       	sbiw	r28, 0x05	; 5
    22ca:	e8 83       	st	Y, r30
    22cc:	f9 83       	std	Y+1, r31	; 0x01
    22ce:	0d 93       	st	X+, r16
    22d0:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
    22d2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    22d6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    22e6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
		xTaskResumeAll();
    22ea:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
	}
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    22f8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    22fc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2300:	08 95       	ret

00002302 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2302:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2304:	03 96       	adiw	r24, 0x03	; 3
    2306:	81 83       	std	Z+1, r24	; 0x01
    2308:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    230a:	4f ef       	ldi	r20, 0xFF	; 255
    230c:	5f ef       	ldi	r21, 0xFF	; 255
    230e:	ba 01       	movw	r22, r20
    2310:	43 83       	std	Z+3, r20	; 0x03
    2312:	54 83       	std	Z+4, r21	; 0x04
    2314:	65 83       	std	Z+5, r22	; 0x05
    2316:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2318:	87 83       	std	Z+7, r24	; 0x07
    231a:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    231c:	81 87       	std	Z+9, r24	; 0x09
    231e:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2320:	10 82       	st	Z, r1
    2322:	08 95       	ret

00002324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2324:	fc 01       	movw	r30, r24
    2326:	12 86       	std	Z+10, r1	; 0x0a
    2328:	13 86       	std	Z+11, r1	; 0x0b
    232a:	08 95       	ret

0000232c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	fc 01       	movw	r30, r24
    2332:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2334:	21 81       	ldd	r18, Z+1	; 0x01
    2336:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    2338:	e9 01       	movw	r28, r18
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	14 96       	adiw	r26, 0x04	; 4
    2340:	8d 93       	st	X+, r24
    2342:	9c 93       	st	X, r25
    2344:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	92 81       	ldd	r25, Z+2	; 0x02
    234a:	16 96       	adiw	r26, 0x06	; 6
    234c:	8d 93       	st	X+, r24
    234e:	9c 93       	st	X, r25
    2350:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	9d 81       	ldd	r25, Y+5	; 0x05
    2356:	ec 01       	movw	r28, r24
    2358:	6e 83       	std	Y+6, r22	; 0x06
    235a:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    235c:	e9 01       	movw	r28, r18
    235e:	6c 83       	std	Y+4, r22	; 0x04
    2360:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2362:	61 83       	std	Z+1, r22	; 0x01
    2364:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2366:	1a 96       	adiw	r26, 0x0a	; 10
    2368:	ed 93       	st	X+, r30
    236a:	fc 93       	st	X, r31
    236c:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
    236e:	80 81       	ld	r24, Z
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	80 83       	st	Z, r24
}
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2384:	08 81       	ld	r16, Y
    2386:	19 81       	ldd	r17, Y+1	; 0x01
    2388:	2a 81       	ldd	r18, Y+2	; 0x02
    238a:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    238c:	0f 3f       	cpi	r16, 0xFF	; 255
    238e:	4f ef       	ldi	r20, 0xFF	; 255
    2390:	14 07       	cpc	r17, r20
    2392:	24 07       	cpc	r18, r20
    2394:	34 07       	cpc	r19, r20
    2396:	31 f4       	brne	.+12     	; 0x23a4 <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2398:	dc 01       	movw	r26, r24
    239a:	19 96       	adiw	r26, 0x09	; 9
    239c:	ed 91       	ld	r30, X+
    239e:	fc 91       	ld	r31, X
    23a0:	1a 97       	sbiw	r26, 0x0a	; 10
    23a2:	1f c0       	rjmp	.+62     	; 0x23e2 <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    23a4:	fc 01       	movw	r30, r24
    23a6:	33 96       	adiw	r30, 0x03	; 3
    23a8:	dc 01       	movw	r26, r24
    23aa:	17 96       	adiw	r26, 0x07	; 7
    23ac:	4d 91       	ld	r20, X+
    23ae:	5c 91       	ld	r21, X
    23b0:	18 97       	sbiw	r26, 0x08	; 8
    23b2:	da 01       	movw	r26, r20
    23b4:	4d 91       	ld	r20, X+
    23b6:	5d 91       	ld	r21, X+
    23b8:	6d 91       	ld	r22, X+
    23ba:	7c 91       	ld	r23, X
    23bc:	04 17       	cp	r16, r20
    23be:	15 07       	cpc	r17, r21
    23c0:	26 07       	cpc	r18, r22
    23c2:	37 07       	cpc	r19, r23
    23c4:	70 f0       	brcs	.+28     	; 0x23e2 <vListInsert+0x68>
    23c6:	04 80       	ldd	r0, Z+4	; 0x04
    23c8:	f5 81       	ldd	r31, Z+5	; 0x05
    23ca:	e0 2d       	mov	r30, r0
    23cc:	a4 81       	ldd	r26, Z+4	; 0x04
    23ce:	b5 81       	ldd	r27, Z+5	; 0x05
    23d0:	4d 91       	ld	r20, X+
    23d2:	5d 91       	ld	r21, X+
    23d4:	6d 91       	ld	r22, X+
    23d6:	7c 91       	ld	r23, X
    23d8:	04 17       	cp	r16, r20
    23da:	15 07       	cpc	r17, r21
    23dc:	26 07       	cpc	r18, r22
    23de:	37 07       	cpc	r19, r23
    23e0:	90 f7       	brcc	.-28     	; 0x23c6 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    23e2:	a4 81       	ldd	r26, Z+4	; 0x04
    23e4:	b5 81       	ldd	r27, Z+5	; 0x05
    23e6:	ac 83       	std	Y+4, r26	; 0x04
    23e8:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    23ea:	16 96       	adiw	r26, 0x06	; 6
    23ec:	cd 93       	st	X+, r28
    23ee:	dc 93       	st	X, r29
    23f0:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
    23f2:	ee 83       	std	Y+6, r30	; 0x06
    23f4:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    23f6:	c4 83       	std	Z+4, r28	; 0x04
    23f8:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    23fa:	8a 87       	std	Y+10, r24	; 0x0a
    23fc:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
    23fe:	fc 01       	movw	r30, r24
    2400:	20 81       	ld	r18, Z
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	20 83       	st	Z, r18
}
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	08 95       	ret

00002410 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2410:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2412:	a4 81       	ldd	r26, Z+4	; 0x04
    2414:	b5 81       	ldd	r27, Z+5	; 0x05
    2416:	86 81       	ldd	r24, Z+6	; 0x06
    2418:	97 81       	ldd	r25, Z+7	; 0x07
    241a:	16 96       	adiw	r26, 0x06	; 6
    241c:	8d 93       	st	X+, r24
    241e:	9c 93       	st	X, r25
    2420:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2422:	a6 81       	ldd	r26, Z+6	; 0x06
    2424:	b7 81       	ldd	r27, Z+7	; 0x07
    2426:	84 81       	ldd	r24, Z+4	; 0x04
    2428:	95 81       	ldd	r25, Z+5	; 0x05
    242a:	14 96       	adiw	r26, 0x04	; 4
    242c:	8d 93       	st	X+, r24
    242e:	9c 93       	st	X, r25
    2430:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2432:	a2 85       	ldd	r26, Z+10	; 0x0a
    2434:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	8d 91       	ld	r24, X+
    243a:	9c 91       	ld	r25, X
    243c:	12 97       	sbiw	r26, 0x02	; 2
    243e:	e8 17       	cp	r30, r24
    2440:	f9 07       	cpc	r31, r25
    2442:	31 f4       	brne	.+12     	; 0x2450 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2444:	86 81       	ldd	r24, Z+6	; 0x06
    2446:	97 81       	ldd	r25, Z+7	; 0x07
    2448:	11 96       	adiw	r26, 0x01	; 1
    244a:	8d 93       	st	X+, r24
    244c:	9c 93       	st	X, r25
    244e:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
    2450:	12 86       	std	Z+10, r1	; 0x0a
    2452:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    2454:	8c 91       	ld	r24, X
    2456:	81 50       	subi	r24, 0x01	; 1
    2458:	8c 93       	st	X, r24
    245a:	08 95       	ret

0000245c <pxPortInitialiseStack>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    245c:	80 93 96 31 	sts	0x3196, r24	; 0x803196 <portStackTopForTask>
    2460:	90 93 97 31 	sts	0x3197, r25	; 0x803197 <portStackTopForTask+0x1>
    2464:	31 e1       	ldi	r19, 0x11	; 17
    2466:	fc 01       	movw	r30, r24
    2468:	30 83       	st	Z, r19
    246a:	31 97       	sbiw	r30, 0x01	; 1
    246c:	22 e2       	ldi	r18, 0x22	; 34
    246e:	20 83       	st	Z, r18
    2470:	31 97       	sbiw	r30, 0x01	; 1
    2472:	a3 e3       	ldi	r26, 0x33	; 51
    2474:	a0 83       	st	Z, r26
    2476:	31 97       	sbiw	r30, 0x01	; 1
    2478:	60 83       	st	Z, r22
    247a:	31 97       	sbiw	r30, 0x01	; 1
    247c:	70 83       	st	Z, r23
    247e:	31 97       	sbiw	r30, 0x01	; 1
    2480:	10 82       	st	Z, r1
    2482:	31 97       	sbiw	r30, 0x01	; 1
    2484:	10 82       	st	Z, r1
    2486:	31 97       	sbiw	r30, 0x01	; 1
    2488:	60 e8       	ldi	r22, 0x80	; 128
    248a:	60 83       	st	Z, r22
    248c:	31 97       	sbiw	r30, 0x01	; 1
    248e:	10 82       	st	Z, r1
    2490:	31 97       	sbiw	r30, 0x01	; 1
    2492:	10 82       	st	Z, r1
    2494:	31 97       	sbiw	r30, 0x01	; 1
    2496:	10 82       	st	Z, r1
    2498:	31 97       	sbiw	r30, 0x01	; 1
    249a:	62 e0       	ldi	r22, 0x02	; 2
    249c:	60 83       	st	Z, r22
    249e:	31 97       	sbiw	r30, 0x01	; 1
    24a0:	63 e0       	ldi	r22, 0x03	; 3
    24a2:	60 83       	st	Z, r22
    24a4:	31 97       	sbiw	r30, 0x01	; 1
    24a6:	64 e0       	ldi	r22, 0x04	; 4
    24a8:	60 83       	st	Z, r22
    24aa:	31 97       	sbiw	r30, 0x01	; 1
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	60 83       	st	Z, r22
    24b0:	31 97       	sbiw	r30, 0x01	; 1
    24b2:	66 e0       	ldi	r22, 0x06	; 6
    24b4:	60 83       	st	Z, r22
    24b6:	31 97       	sbiw	r30, 0x01	; 1
    24b8:	67 e0       	ldi	r22, 0x07	; 7
    24ba:	60 83       	st	Z, r22
    24bc:	31 97       	sbiw	r30, 0x01	; 1
    24be:	68 e0       	ldi	r22, 0x08	; 8
    24c0:	60 83       	st	Z, r22
    24c2:	31 97       	sbiw	r30, 0x01	; 1
    24c4:	69 e0       	ldi	r22, 0x09	; 9
    24c6:	60 83       	st	Z, r22
    24c8:	31 97       	sbiw	r30, 0x01	; 1
    24ca:	60 e1       	ldi	r22, 0x10	; 16
    24cc:	60 83       	st	Z, r22
    24ce:	31 97       	sbiw	r30, 0x01	; 1
    24d0:	30 83       	st	Z, r19
    24d2:	31 97       	sbiw	r30, 0x01	; 1
    24d4:	32 e1       	ldi	r19, 0x12	; 18
    24d6:	30 83       	st	Z, r19
    24d8:	31 97       	sbiw	r30, 0x01	; 1
    24da:	33 e1       	ldi	r19, 0x13	; 19
    24dc:	30 83       	st	Z, r19
    24de:	31 97       	sbiw	r30, 0x01	; 1
    24e0:	34 e1       	ldi	r19, 0x14	; 20
    24e2:	30 83       	st	Z, r19
    24e4:	31 97       	sbiw	r30, 0x01	; 1
    24e6:	35 e1       	ldi	r19, 0x15	; 21
    24e8:	30 83       	st	Z, r19
    24ea:	31 97       	sbiw	r30, 0x01	; 1
    24ec:	36 e1       	ldi	r19, 0x16	; 22
    24ee:	30 83       	st	Z, r19
    24f0:	31 97       	sbiw	r30, 0x01	; 1
    24f2:	37 e1       	ldi	r19, 0x17	; 23
    24f4:	30 83       	st	Z, r19
    24f6:	31 97       	sbiw	r30, 0x01	; 1
    24f8:	38 e1       	ldi	r19, 0x18	; 24
    24fa:	30 83       	st	Z, r19
    24fc:	31 97       	sbiw	r30, 0x01	; 1
    24fe:	39 e1       	ldi	r19, 0x19	; 25
    2500:	30 83       	st	Z, r19
    2502:	31 97       	sbiw	r30, 0x01	; 1
    2504:	30 e2       	ldi	r19, 0x20	; 32
    2506:	30 83       	st	Z, r19
    2508:	31 97       	sbiw	r30, 0x01	; 1
    250a:	31 e2       	ldi	r19, 0x21	; 33
    250c:	30 83       	st	Z, r19
    250e:	31 97       	sbiw	r30, 0x01	; 1
    2510:	20 83       	st	Z, r18
    2512:	31 97       	sbiw	r30, 0x01	; 1
    2514:	23 e2       	ldi	r18, 0x23	; 35
    2516:	20 83       	st	Z, r18
    2518:	31 97       	sbiw	r30, 0x01	; 1
    251a:	40 83       	st	Z, r20
    251c:	31 97       	sbiw	r30, 0x01	; 1
    251e:	50 83       	st	Z, r21
    2520:	31 97       	sbiw	r30, 0x01	; 1
    2522:	26 e2       	ldi	r18, 0x26	; 38
    2524:	20 83       	st	Z, r18
    2526:	31 97       	sbiw	r30, 0x01	; 1
    2528:	27 e2       	ldi	r18, 0x27	; 39
    252a:	20 83       	st	Z, r18
    252c:	31 97       	sbiw	r30, 0x01	; 1
    252e:	28 e2       	ldi	r18, 0x28	; 40
    2530:	20 83       	st	Z, r18
    2532:	31 97       	sbiw	r30, 0x01	; 1
    2534:	29 e2       	ldi	r18, 0x29	; 41
    2536:	20 83       	st	Z, r18
    2538:	31 97       	sbiw	r30, 0x01	; 1
    253a:	20 e3       	ldi	r18, 0x30	; 48
    253c:	20 83       	st	Z, r18
    253e:	31 97       	sbiw	r30, 0x01	; 1
    2540:	21 e3       	ldi	r18, 0x31	; 49
    2542:	20 83       	st	Z, r18
    2544:	89 97       	sbiw	r24, 0x29	; 41
    2546:	08 95       	ret

00002548 <xPortStartScheduler>:
    2548:	8c e7       	ldi	r24, 0x7C	; 124
    254a:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    255a:	91 e1       	ldi	r25, 0x11	; 17
    255c:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    2560:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <__TEXT_REGION_LENGTH__+0x700a07>
    2564:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    2568:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    256c:	cd 91       	ld	r28, X+
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	dd 91       	ld	r29, X+
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	ff 91       	pop	r31
    2576:	ef 91       	pop	r30
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	bf 91       	pop	r27
    257e:	af 91       	pop	r26
    2580:	9f 91       	pop	r25
    2582:	8f 91       	pop	r24
    2584:	7f 91       	pop	r23
    2586:	6f 91       	pop	r22
    2588:	5f 91       	pop	r21
    258a:	4f 91       	pop	r20
    258c:	3f 91       	pop	r19
    258e:	2f 91       	pop	r18
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	9f 90       	pop	r9
    25a2:	8f 90       	pop	r8
    25a4:	7f 90       	pop	r7
    25a6:	6f 90       	pop	r6
    25a8:	5f 90       	pop	r5
    25aa:	4f 90       	pop	r4
    25ac:	3f 90       	pop	r3
    25ae:	2f 90       	pop	r2
    25b0:	1f 90       	pop	r1
    25b2:	0f 90       	pop	r0
    25b4:	0c be       	out	0x3c, r0	; 60
    25b6:	0f 90       	pop	r0
    25b8:	0b be       	out	0x3b, r0	; 59
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	0f 90       	pop	r0
    25c0:	08 95       	ret
    25c2:	08 95       	ret

000025c4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    25c4:	0f 92       	push	r0
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	0f 92       	push	r0
    25cc:	0b b6       	in	r0, 0x3b	; 59
    25ce:	0f 92       	push	r0
    25d0:	0c b6       	in	r0, 0x3c	; 60
    25d2:	0f 92       	push	r0
    25d4:	1f 92       	push	r1
    25d6:	11 24       	eor	r1, r1
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    2618:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    261c:	0d b6       	in	r0, 0x3d	; 61
    261e:	0d 92       	st	X+, r0
    2620:	0e b6       	in	r0, 0x3e	; 62
    2622:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2624:	0e 94 02 1a 	call	0x3404	; 0x3404 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2628:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    262c:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2630:	cd 91       	ld	r28, X+
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	dd 91       	ld	r29, X+
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	cf 90       	pop	r12
    2660:	bf 90       	pop	r11
    2662:	af 90       	pop	r10
    2664:	9f 90       	pop	r9
    2666:	8f 90       	pop	r8
    2668:	7f 90       	pop	r7
    266a:	6f 90       	pop	r6
    266c:	5f 90       	pop	r5
    266e:	4f 90       	pop	r4
    2670:	3f 90       	pop	r3
    2672:	2f 90       	pop	r2
    2674:	1f 90       	pop	r1
    2676:	0f 90       	pop	r0
    2678:	0c be       	out	0x3c, r0	; 60
    267a:	0f 90       	pop	r0
    267c:	0b be       	out	0x3b, r0	; 59
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2684:	08 95       	ret

00002686 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	0f 92       	push	r0
    268e:	0b b6       	in	r0, 0x3b	; 59
    2690:	0f 92       	push	r0
    2692:	0c b6       	in	r0, 0x3c	; 60
    2694:	0f 92       	push	r0
    2696:	1f 92       	push	r1
    2698:	11 24       	eor	r1, r1
    269a:	2f 92       	push	r2
    269c:	3f 92       	push	r3
    269e:	4f 92       	push	r4
    26a0:	5f 92       	push	r5
    26a2:	6f 92       	push	r6
    26a4:	7f 92       	push	r7
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	2f 93       	push	r18
    26bc:	3f 93       	push	r19
    26be:	4f 93       	push	r20
    26c0:	5f 93       	push	r21
    26c2:	6f 93       	push	r22
    26c4:	7f 93       	push	r23
    26c6:	8f 93       	push	r24
    26c8:	9f 93       	push	r25
    26ca:	af 93       	push	r26
    26cc:	bf 93       	push	r27
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
    26d6:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    26da:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    26de:	0d b6       	in	r0, 0x3d	; 61
    26e0:	0d 92       	st	X+, r0
    26e2:	0e b6       	in	r0, 0x3e	; 62
    26e4:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    26e6:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <vTaskIncrementTick>
	vTaskSwitchContext();
    26ea:	0e 94 02 1a 	call	0x3404	; 0x3404 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    26ee:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    26f2:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    26f6:	cd 91       	ld	r28, X+
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	dd 91       	ld	r29, X+
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	ff 91       	pop	r31
    2700:	ef 91       	pop	r30
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	bf 91       	pop	r27
    2708:	af 91       	pop	r26
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	7f 91       	pop	r23
    2710:	6f 91       	pop	r22
    2712:	5f 91       	pop	r21
    2714:	4f 91       	pop	r20
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	df 90       	pop	r13
    2724:	cf 90       	pop	r12
    2726:	bf 90       	pop	r11
    2728:	af 90       	pop	r10
    272a:	9f 90       	pop	r9
    272c:	8f 90       	pop	r8
    272e:	7f 90       	pop	r7
    2730:	6f 90       	pop	r6
    2732:	5f 90       	pop	r5
    2734:	4f 90       	pop	r4
    2736:	3f 90       	pop	r3
    2738:	2f 90       	pop	r2
    273a:	1f 90       	pop	r1
    273c:	0f 90       	pop	r0
    273e:	0c be       	out	0x3c, r0	; 60
    2740:	0f 90       	pop	r0
    2742:	0b be       	out	0x3b, r0	; 59
    2744:	0f 90       	pop	r0
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	0f 90       	pop	r0

	asm volatile ( "ret" );
    274a:	08 95       	ret

0000274c <__vector_49>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
    274c:	0e 94 43 13 	call	0x2686	; 0x2686 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2750:	18 95       	reti

00002752 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	ec 01       	movw	r28, r24
    2758:	88 a1       	ldd	r24, Y+32	; 0x20
    275a:	81 11       	cpse	r24, r1
    275c:	0b c0       	rjmp	.+22     	; 0x2774 <prvCopyDataToQueue+0x22>
    275e:	88 81       	ld	r24, Y
    2760:	99 81       	ldd	r25, Y+1	; 0x01
    2762:	89 2b       	or	r24, r25
    2764:	e1 f5       	brne	.+120    	; 0x27de <prvCopyDataToQueue+0x8c>
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	0e 94 bd 1b 	call	0x377a	; 0x377a <vTaskPriorityDisinherit>
    276e:	1a 82       	std	Y+2, r1	; 0x02
    2770:	1b 82       	std	Y+3, r1	; 0x03
    2772:	35 c0       	rjmp	.+106    	; 0x27de <prvCopyDataToQueue+0x8c>
    2774:	41 11       	cpse	r20, r1
    2776:	17 c0       	rjmp	.+46     	; 0x27a6 <prvCopyDataToQueue+0x54>
    2778:	48 2f       	mov	r20, r24
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	9d 81       	ldd	r25, Y+5	; 0x05
    2780:	0e 94 32 1c 	call	0x3864	; 0x3864 <memcpy>
    2784:	28 a1       	ldd	r18, Y+32	; 0x20
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	9d 81       	ldd	r25, Y+5	; 0x05
    278a:	82 0f       	add	r24, r18
    278c:	91 1d       	adc	r25, r1
    278e:	8c 83       	std	Y+4, r24	; 0x04
    2790:	9d 83       	std	Y+5, r25	; 0x05
    2792:	2a 81       	ldd	r18, Y+2	; 0x02
    2794:	3b 81       	ldd	r19, Y+3	; 0x03
    2796:	82 17       	cp	r24, r18
    2798:	93 07       	cpc	r25, r19
    279a:	08 f1       	brcs	.+66     	; 0x27de <prvCopyDataToQueue+0x8c>
    279c:	88 81       	ld	r24, Y
    279e:	99 81       	ldd	r25, Y+1	; 0x01
    27a0:	8c 83       	std	Y+4, r24	; 0x04
    27a2:	9d 83       	std	Y+5, r25	; 0x05
    27a4:	1c c0       	rjmp	.+56     	; 0x27de <prvCopyDataToQueue+0x8c>
    27a6:	48 2f       	mov	r20, r24
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	8e 81       	ldd	r24, Y+6	; 0x06
    27ac:	9f 81       	ldd	r25, Y+7	; 0x07
    27ae:	0e 94 32 1c 	call	0x3864	; 0x3864 <memcpy>
    27b2:	88 a1       	ldd	r24, Y+32	; 0x20
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	91 95       	neg	r25
    27b8:	81 95       	neg	r24
    27ba:	91 09       	sbc	r25, r1
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	28 0f       	add	r18, r24
    27c2:	39 1f       	adc	r19, r25
    27c4:	2e 83       	std	Y+6, r18	; 0x06
    27c6:	3f 83       	std	Y+7, r19	; 0x07
    27c8:	48 81       	ld	r20, Y
    27ca:	59 81       	ldd	r21, Y+1	; 0x01
    27cc:	24 17       	cp	r18, r20
    27ce:	35 07       	cpc	r19, r21
    27d0:	30 f4       	brcc	.+12     	; 0x27de <prvCopyDataToQueue+0x8c>
    27d2:	2a 81       	ldd	r18, Y+2	; 0x02
    27d4:	3b 81       	ldd	r19, Y+3	; 0x03
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	8e 83       	std	Y+6, r24	; 0x06
    27dc:	9f 83       	std	Y+7, r25	; 0x07
    27de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	8e 8f       	std	Y+30, r24	; 0x1e
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <prvCopyDataFromQueue>:
    27ea:	fc 01       	movw	r30, r24
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	a1 f0       	breq	.+40     	; 0x281c <prvCopyDataFromQueue+0x32>
    27f4:	40 a1       	ldd	r20, Z+32	; 0x20
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	26 81       	ldd	r18, Z+6	; 0x06
    27fa:	37 81       	ldd	r19, Z+7	; 0x07
    27fc:	24 0f       	add	r18, r20
    27fe:	35 1f       	adc	r19, r21
    2800:	26 83       	std	Z+6, r18	; 0x06
    2802:	37 83       	std	Z+7, r19	; 0x07
    2804:	a2 81       	ldd	r26, Z+2	; 0x02
    2806:	b3 81       	ldd	r27, Z+3	; 0x03
    2808:	2a 17       	cp	r18, r26
    280a:	3b 07       	cpc	r19, r27
    280c:	10 f0       	brcs	.+4      	; 0x2812 <prvCopyDataFromQueue+0x28>
    280e:	86 83       	std	Z+6, r24	; 0x06
    2810:	97 83       	std	Z+7, r25	; 0x07
    2812:	cb 01       	movw	r24, r22
    2814:	66 81       	ldd	r22, Z+6	; 0x06
    2816:	77 81       	ldd	r23, Z+7	; 0x07
    2818:	0e 94 32 1c 	call	0x3864	; 0x3864 <memcpy>
    281c:	08 95       	ret

0000281e <prvUnlockQueue>:
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	ec 01       	movw	r28, r24
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	0f 92       	push	r0
    282e:	8a a1       	ldd	r24, Y+34	; 0x22
    2830:	18 16       	cp	r1, r24
    2832:	b4 f4       	brge	.+44     	; 0x2860 <prvUnlockQueue+0x42>
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	81 11       	cpse	r24, r1
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <prvUnlockQueue+0x26>
    283a:	12 c0       	rjmp	.+36     	; 0x2860 <prvUnlockQueue+0x42>
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	81 11       	cpse	r24, r1
    2840:	04 c0       	rjmp	.+8      	; 0x284a <prvUnlockQueue+0x2c>
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <prvUnlockQueue+0x42>
    2844:	8e 01       	movw	r16, r28
    2846:	0d 5e       	subi	r16, 0xED	; 237
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 89 1a 	call	0x3512	; 0x3512 <xTaskRemoveFromEventList>
    2850:	81 11       	cpse	r24, r1
    2852:	0e 94 46 1b 	call	0x368c	; 0x368c <vTaskMissedYield>
    2856:	8a a1       	ldd	r24, Y+34	; 0x22
    2858:	81 50       	subi	r24, 0x01	; 1
    285a:	8a a3       	std	Y+34, r24	; 0x22
    285c:	18 16       	cp	r1, r24
    285e:	74 f3       	brlt	.-36     	; 0x283c <prvUnlockQueue+0x1e>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	8a a3       	std	Y+34, r24	; 0x22
    2864:	0f 90       	pop	r0
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	0f 92       	push	r0
    286e:	89 a1       	ldd	r24, Y+33	; 0x21
    2870:	18 16       	cp	r1, r24
    2872:	b4 f4       	brge	.+44     	; 0x28a0 <prvUnlockQueue+0x82>
    2874:	88 85       	ldd	r24, Y+8	; 0x08
    2876:	81 11       	cpse	r24, r1
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <prvUnlockQueue+0x66>
    287a:	12 c0       	rjmp	.+36     	; 0x28a0 <prvUnlockQueue+0x82>
    287c:	88 85       	ldd	r24, Y+8	; 0x08
    287e:	81 11       	cpse	r24, r1
    2880:	04 c0       	rjmp	.+8      	; 0x288a <prvUnlockQueue+0x6c>
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <prvUnlockQueue+0x82>
    2884:	8e 01       	movw	r16, r28
    2886:	08 5f       	subi	r16, 0xF8	; 248
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	c8 01       	movw	r24, r16
    288c:	0e 94 89 1a 	call	0x3512	; 0x3512 <xTaskRemoveFromEventList>
    2890:	81 11       	cpse	r24, r1
    2892:	0e 94 46 1b 	call	0x368c	; 0x368c <vTaskMissedYield>
    2896:	89 a1       	ldd	r24, Y+33	; 0x21
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	89 a3       	std	Y+33, r24	; 0x21
    289c:	18 16       	cp	r1, r24
    289e:	74 f3       	brlt	.-36     	; 0x287c <prvUnlockQueue+0x5e>
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	89 a3       	std	Y+33, r24	; 0x21
    28a4:	0f 90       	pop	r0
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <xQueueGenericReset>:
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	61 30       	cpi	r22, 0x01	; 1
    28ba:	59 f0       	breq	.+22     	; 0x28d2 <xQueueGenericReset+0x20>
    28bc:	fc 01       	movw	r30, r24
    28be:	23 89       	ldd	r18, Z+19	; 0x13
    28c0:	30 85       	ldd	r19, Z+8	; 0x08
    28c2:	31 11       	cpse	r19, r1
    28c4:	2c c0       	rjmp	.+88     	; 0x291e <xQueueGenericReset+0x6c>
    28c6:	11 e0       	ldi	r17, 0x01	; 1
    28c8:	21 11       	cpse	r18, r1
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	21 11       	cpse	r18, r1
    28ce:	28 c0       	rjmp	.+80     	; 0x2920 <xQueueGenericReset+0x6e>
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <xQueueGenericReset+0x22>
    28d2:	11 e0       	ldi	r17, 0x01	; 1
    28d4:	ec 01       	movw	r28, r24
    28d6:	48 81       	ld	r20, Y
    28d8:	59 81       	ldd	r21, Y+1	; 0x01
    28da:	28 a1       	ldd	r18, Y+32	; 0x20
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28e0:	62 9f       	mul	r22, r18
    28e2:	c0 01       	movw	r24, r0
    28e4:	63 9f       	mul	r22, r19
    28e6:	90 0d       	add	r25, r0
    28e8:	11 24       	eor	r1, r1
    28ea:	ba 01       	movw	r22, r20
    28ec:	68 0f       	add	r22, r24
    28ee:	79 1f       	adc	r23, r25
    28f0:	6a 83       	std	Y+2, r22	; 0x02
    28f2:	7b 83       	std	Y+3, r23	; 0x03
    28f4:	1e 8e       	std	Y+30, r1	; 0x1e
    28f6:	4c 83       	std	Y+4, r20	; 0x04
    28f8:	5d 83       	std	Y+5, r21	; 0x05
    28fa:	82 1b       	sub	r24, r18
    28fc:	93 0b       	sbc	r25, r19
    28fe:	84 0f       	add	r24, r20
    2900:	95 1f       	adc	r25, r21
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	9f 83       	std	Y+7, r25	; 0x07
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	89 a3       	std	Y+33, r24	; 0x21
    290a:	8a a3       	std	Y+34, r24	; 0x22
    290c:	ce 01       	movw	r24, r28
    290e:	08 96       	adiw	r24, 0x08	; 8
    2910:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2914:	ce 01       	movw	r24, r28
    2916:	43 96       	adiw	r24, 0x13	; 19
    2918:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <xQueueGenericReset+0x6e>
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	81 2f       	mov	r24, r17
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	1f 91       	pop	r17
    2928:	08 95       	ret

0000292a <xQueueGenericCreate>:
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	88 23       	and	r24, r24
    2934:	01 f1       	breq	.+64     	; 0x2976 <xQueueGenericCreate+0x4c>
    2936:	06 2f       	mov	r16, r22
    2938:	18 2f       	mov	r17, r24
    293a:	83 e2       	ldi	r24, 0x23	; 35
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    2942:	ec 01       	movw	r28, r24
    2944:	89 2b       	or	r24, r25
    2946:	c9 f0       	breq	.+50     	; 0x297a <xQueueGenericCreate+0x50>
    2948:	10 9f       	mul	r17, r16
    294a:	c0 01       	movw	r24, r0
    294c:	11 24       	eor	r1, r1
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    2954:	88 83       	st	Y, r24
    2956:	99 83       	std	Y+1, r25	; 0x01
    2958:	89 2b       	or	r24, r25
    295a:	39 f0       	breq	.+14     	; 0x296a <xQueueGenericCreate+0x40>
    295c:	1f 8f       	std	Y+31, r17	; 0x1f
    295e:	08 a3       	std	Y+32, r16	; 0x20
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	ce 01       	movw	r24, r28
    2964:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xQueueGenericReset>
    2968:	08 c0       	rjmp	.+16     	; 0x297a <xQueueGenericCreate+0x50>
    296a:	ce 01       	movw	r24, r28
    296c:	0e 94 49 11 	call	0x2292	; 0x2292 <vPortFree>
    2970:	c0 e0       	ldi	r28, 0x00	; 0
    2972:	d0 e0       	ldi	r29, 0x00	; 0
    2974:	02 c0       	rjmp	.+4      	; 0x297a <xQueueGenericCreate+0x50>
    2976:	c0 e0       	ldi	r28, 0x00	; 0
    2978:	d0 e0       	ldi	r29, 0x00	; 0
    297a:	ce 01       	movw	r24, r28
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	08 95       	ret

00002986 <xQueueGenericSend>:
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	29 97       	sbiw	r28, 0x09	; 9
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	7c 01       	movw	r14, r24
    29a6:	5b 01       	movw	r10, r22
    29a8:	2e 83       	std	Y+6, r18	; 0x06
    29aa:	3f 83       	std	Y+7, r19	; 0x07
    29ac:	48 87       	std	Y+8, r20	; 0x08
    29ae:	59 87       	std	Y+9, r21	; 0x09
    29b0:	10 e0       	ldi	r17, 0x00	; 0
    29b2:	6c 01       	movw	r12, r24
    29b4:	88 e0       	ldi	r24, 0x08	; 8
    29b6:	c8 0e       	add	r12, r24
    29b8:	d1 1c       	adc	r13, r1
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	0f 92       	push	r0
    29c0:	f7 01       	movw	r30, r14
    29c2:	96 8d       	ldd	r25, Z+30	; 0x1e
    29c4:	87 8d       	ldd	r24, Z+31	; 0x1f
    29c6:	98 17       	cp	r25, r24
    29c8:	a8 f4       	brcc	.+42     	; 0x29f4 <xQueueGenericSend+0x6e>
    29ca:	40 2f       	mov	r20, r16
    29cc:	b5 01       	movw	r22, r10
    29ce:	c7 01       	movw	r24, r14
    29d0:	0e 94 a9 13 	call	0x2752	; 0x2752 <prvCopyDataToQueue>
    29d4:	f7 01       	movw	r30, r14
    29d6:	83 89       	ldd	r24, Z+19	; 0x13
    29d8:	88 23       	and	r24, r24
    29da:	41 f0       	breq	.+16     	; 0x29ec <xQueueGenericSend+0x66>
    29dc:	c7 01       	movw	r24, r14
    29de:	43 96       	adiw	r24, 0x13	; 19
    29e0:	0e 94 89 1a 	call	0x3512	; 0x3512 <xTaskRemoveFromEventList>
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	11 f4       	brne	.+4      	; 0x29ec <xQueueGenericSend+0x66>
    29e8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    29ec:	0f 90       	pop	r0
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	56 c0       	rjmp	.+172    	; 0x2aa0 <xQueueGenericSend+0x11a>
    29f4:	8e 81       	ldd	r24, Y+6	; 0x06
    29f6:	9f 81       	ldd	r25, Y+7	; 0x07
    29f8:	a8 85       	ldd	r26, Y+8	; 0x08
    29fa:	b9 85       	ldd	r27, Y+9	; 0x09
    29fc:	89 2b       	or	r24, r25
    29fe:	8a 2b       	or	r24, r26
    2a00:	8b 2b       	or	r24, r27
    2a02:	21 f4       	brne	.+8      	; 0x2a0c <xQueueGenericSend+0x86>
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	4a c0       	rjmp	.+148    	; 0x2aa0 <xQueueGenericSend+0x11a>
    2a0c:	11 11       	cpse	r17, r1
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <xQueueGenericSend+0x94>
    2a10:	ce 01       	movw	r24, r28
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	0e 94 c8 1a 	call	0x3590	; 0x3590 <vTaskSetTimeOutState>
    2a18:	11 e0       	ldi	r17, 0x01	; 1
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	0f 92       	push	r0
    2a28:	f7 01       	movw	r30, r14
    2a2a:	81 a1       	ldd	r24, Z+33	; 0x21
    2a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <xQueueGenericSend+0xac>
    2a30:	11 a2       	std	Z+33, r1	; 0x21
    2a32:	f7 01       	movw	r30, r14
    2a34:	82 a1       	ldd	r24, Z+34	; 0x22
    2a36:	8f 3f       	cpi	r24, 0xFF	; 255
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <xQueueGenericSend+0xb6>
    2a3a:	12 a2       	std	Z+34, r1	; 0x22
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	be 01       	movw	r22, r28
    2a42:	6a 5f       	subi	r22, 0xFA	; 250
    2a44:	7f 4f       	sbci	r23, 0xFF	; 255
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <xTaskCheckForTimeOut>
    2a4e:	81 11       	cpse	r24, r1
    2a50:	21 c0       	rjmp	.+66     	; 0x2a94 <xQueueGenericSend+0x10e>
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	0f 92       	push	r0
    2a58:	f7 01       	movw	r30, r14
    2a5a:	96 8d       	ldd	r25, Z+30	; 0x1e
    2a5c:	0f 90       	pop	r0
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	87 8d       	ldd	r24, Z+31	; 0x1f
    2a62:	98 13       	cpse	r25, r24
    2a64:	11 c0       	rjmp	.+34     	; 0x2a88 <xQueueGenericSend+0x102>
    2a66:	4e 81       	ldd	r20, Y+6	; 0x06
    2a68:	5f 81       	ldd	r21, Y+7	; 0x07
    2a6a:	68 85       	ldd	r22, Y+8	; 0x08
    2a6c:	79 85       	ldd	r23, Y+9	; 0x09
    2a6e:	c6 01       	movw	r24, r12
    2a70:	0e 94 5f 1a 	call	0x34be	; 0x34be <vTaskPlaceOnEventList>
    2a74:	c7 01       	movw	r24, r14
    2a76:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2a7a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2a7e:	81 11       	cpse	r24, r1
    2a80:	9c cf       	rjmp	.-200    	; 0x29ba <xQueueGenericSend+0x34>
    2a82:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2a86:	99 cf       	rjmp	.-206    	; 0x29ba <xQueueGenericSend+0x34>
    2a88:	c7 01       	movw	r24, r14
    2a8a:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2a8e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2a92:	93 cf       	rjmp	.-218    	; 0x29ba <xQueueGenericSend+0x34>
    2a94:	c7 01       	movw	r24, r14
    2a96:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2a9a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	29 96       	adiw	r28, 0x09	; 9
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	ff 90       	pop	r15
    2ab0:	ef 90       	pop	r14
    2ab2:	df 90       	pop	r13
    2ab4:	cf 90       	pop	r12
    2ab6:	bf 90       	pop	r11
    2ab8:	af 90       	pop	r10
    2aba:	08 95       	ret

00002abc <xQueueGenericReceive>:
    2abc:	af 92       	push	r10
    2abe:	bf 92       	push	r11
    2ac0:	cf 92       	push	r12
    2ac2:	df 92       	push	r13
    2ac4:	ef 92       	push	r14
    2ac6:	ff 92       	push	r15
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	29 97       	sbiw	r28, 0x09	; 9
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	7c 01       	movw	r14, r24
    2adc:	5b 01       	movw	r10, r22
    2ade:	2e 83       	std	Y+6, r18	; 0x06
    2ae0:	3f 83       	std	Y+7, r19	; 0x07
    2ae2:	48 87       	std	Y+8, r20	; 0x08
    2ae4:	59 87       	std	Y+9, r21	; 0x09
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	6c 01       	movw	r12, r24
    2aea:	83 e1       	ldi	r24, 0x13	; 19
    2aec:	c8 0e       	add	r12, r24
    2aee:	d1 1c       	adc	r13, r1
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	0f 92       	push	r0
    2af6:	f7 01       	movw	r30, r14
    2af8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2afa:	88 23       	and	r24, r24
    2afc:	99 f1       	breq	.+102    	; 0x2b64 <xQueueGenericReceive+0xa8>
    2afe:	c6 80       	ldd	r12, Z+6	; 0x06
    2b00:	d7 80       	ldd	r13, Z+7	; 0x07
    2b02:	b5 01       	movw	r22, r10
    2b04:	c7 01       	movw	r24, r14
    2b06:	0e 94 f5 13 	call	0x27ea	; 0x27ea <prvCopyDataFromQueue>
    2b0a:	01 11       	cpse	r16, r1
    2b0c:	1a c0       	rjmp	.+52     	; 0x2b42 <xQueueGenericReceive+0x86>
    2b0e:	f7 01       	movw	r30, r14
    2b10:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b12:	81 50       	subi	r24, 0x01	; 1
    2b14:	86 8f       	std	Z+30, r24	; 0x1e
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	89 2b       	or	r24, r25
    2b1c:	29 f4       	brne	.+10     	; 0x2b28 <xQueueGenericReceive+0x6c>
    2b1e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <xTaskGetCurrentTaskHandle>
    2b22:	f7 01       	movw	r30, r14
    2b24:	82 83       	std	Z+2, r24	; 0x02
    2b26:	93 83       	std	Z+3, r25	; 0x03
    2b28:	f7 01       	movw	r30, r14
    2b2a:	80 85       	ldd	r24, Z+8	; 0x08
    2b2c:	88 23       	and	r24, r24
    2b2e:	b1 f0       	breq	.+44     	; 0x2b5c <xQueueGenericReceive+0xa0>
    2b30:	c7 01       	movw	r24, r14
    2b32:	08 96       	adiw	r24, 0x08	; 8
    2b34:	0e 94 89 1a 	call	0x3512	; 0x3512 <xTaskRemoveFromEventList>
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	81 f4       	brne	.+32     	; 0x2b5c <xQueueGenericReceive+0xa0>
    2b3c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <xQueueGenericReceive+0xa0>
    2b42:	f7 01       	movw	r30, r14
    2b44:	c6 82       	std	Z+6, r12	; 0x06
    2b46:	d7 82       	std	Z+7, r13	; 0x07
    2b48:	83 89       	ldd	r24, Z+19	; 0x13
    2b4a:	88 23       	and	r24, r24
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <xQueueGenericReceive+0xa0>
    2b4e:	c7 01       	movw	r24, r14
    2b50:	43 96       	adiw	r24, 0x13	; 19
    2b52:	0e 94 89 1a 	call	0x3512	; 0x3512 <xTaskRemoveFromEventList>
    2b56:	81 11       	cpse	r24, r1
    2b58:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	62 c0       	rjmp	.+196    	; 0x2c28 <xQueueGenericReceive+0x16c>
    2b64:	8e 81       	ldd	r24, Y+6	; 0x06
    2b66:	9f 81       	ldd	r25, Y+7	; 0x07
    2b68:	a8 85       	ldd	r26, Y+8	; 0x08
    2b6a:	b9 85       	ldd	r27, Y+9	; 0x09
    2b6c:	89 2b       	or	r24, r25
    2b6e:	8a 2b       	or	r24, r26
    2b70:	8b 2b       	or	r24, r27
    2b72:	21 f4       	brne	.+8      	; 0x2b7c <xQueueGenericReceive+0xc0>
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	56 c0       	rjmp	.+172    	; 0x2c28 <xQueueGenericReceive+0x16c>
    2b7c:	11 11       	cpse	r17, r1
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <xQueueGenericReceive+0xce>
    2b80:	ce 01       	movw	r24, r28
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	0e 94 c8 1a 	call	0x3590	; 0x3590 <vTaskSetTimeOutState>
    2b88:	11 e0       	ldi	r17, 0x01	; 1
    2b8a:	0f 90       	pop	r0
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	0f 92       	push	r0
    2b98:	f7 01       	movw	r30, r14
    2b9a:	81 a1       	ldd	r24, Z+33	; 0x21
    2b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <xQueueGenericReceive+0xe6>
    2ba0:	11 a2       	std	Z+33, r1	; 0x21
    2ba2:	f7 01       	movw	r30, r14
    2ba4:	82 a1       	ldd	r24, Z+34	; 0x22
    2ba6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <xQueueGenericReceive+0xf0>
    2baa:	12 a2       	std	Z+34, r1	; 0x22
    2bac:	0f 90       	pop	r0
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	be 01       	movw	r22, r28
    2bb2:	6a 5f       	subi	r22, 0xFA	; 250
    2bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <xTaskCheckForTimeOut>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	2d c0       	rjmp	.+90     	; 0x2c1c <xQueueGenericReceive+0x160>
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	0f 92       	push	r0
    2bc8:	f7 01       	movw	r30, r14
    2bca:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bcc:	0f 90       	pop	r0
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	81 11       	cpse	r24, r1
    2bd2:	1e c0       	rjmp	.+60     	; 0x2c10 <xQueueGenericReceive+0x154>
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	89 2b       	or	r24, r25
    2bda:	49 f4       	brne	.+18     	; 0x2bee <xQueueGenericReceive+0x132>
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	0f 92       	push	r0
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <vTaskPriorityInherit>
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	4e 81       	ldd	r20, Y+6	; 0x06
    2bf0:	5f 81       	ldd	r21, Y+7	; 0x07
    2bf2:	68 85       	ldd	r22, Y+8	; 0x08
    2bf4:	79 85       	ldd	r23, Y+9	; 0x09
    2bf6:	c6 01       	movw	r24, r12
    2bf8:	0e 94 5f 1a 	call	0x34be	; 0x34be <vTaskPlaceOnEventList>
    2bfc:	c7 01       	movw	r24, r14
    2bfe:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2c02:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2c06:	81 11       	cpse	r24, r1
    2c08:	73 cf       	rjmp	.-282    	; 0x2af0 <xQueueGenericReceive+0x34>
    2c0a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2c0e:	70 cf       	rjmp	.-288    	; 0x2af0 <xQueueGenericReceive+0x34>
    2c10:	c7 01       	movw	r24, r14
    2c12:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2c16:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2c1a:	6a cf       	rjmp	.-300    	; 0x2af0 <xQueueGenericReceive+0x34>
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	0e 94 0f 14 	call	0x281e	; 0x281e <prvUnlockQueue>
    2c22:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	29 96       	adiw	r28, 0x09	; 9
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	ff 90       	pop	r15
    2c38:	ef 90       	pop	r14
    2c3a:	df 90       	pop	r13
    2c3c:	cf 90       	pop	r12
    2c3e:	bf 90       	pop	r11
    2c40:	af 90       	pop	r10
    2c42:	08 95       	ret

00002c44 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    2c52:	08 95       	ret

00002c54 <prvIdleTask>:
unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
}
    2c54:	c8 e6       	ldi	r28, 0x68	; 104
    2c56:	d1 e3       	ldi	r29, 0x31	; 49
    2c58:	88 81       	ld	r24, Y
    2c5a:	82 30       	cpi	r24, 0x02	; 2
    2c5c:	e8 f3       	brcs	.-6      	; 0x2c58 <prvIdleTask+0x4>
    2c5e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2c62:	fa cf       	rjmp	.-12     	; 0x2c58 <prvIdleTask+0x4>

00002c64 <prvAddCurrentTaskToDelayedList>:
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	6b 01       	movw	r12, r22
    2c6e:	7c 01       	movw	r14, r24
    2c70:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    2c74:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2c78:	62 83       	std	Z+2, r22	; 0x02
    2c7a:	73 83       	std	Z+3, r23	; 0x03
    2c7c:	84 83       	std	Z+4, r24	; 0x04
    2c7e:	95 83       	std	Z+5, r25	; 0x05
    2c80:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    2c84:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    2c88:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    2c8c:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    2c90:	c8 16       	cp	r12, r24
    2c92:	d9 06       	cpc	r13, r25
    2c94:	ea 06       	cpc	r14, r26
    2c96:	fb 06       	cpc	r15, r27
    2c98:	68 f4       	brcc	.+26     	; 0x2cb4 <prvAddCurrentTaskToDelayedList+0x50>
    2c9a:	60 91 94 31 	lds	r22, 0x3194	; 0x803194 <pxCurrentTCB>
    2c9e:	70 91 95 31 	lds	r23, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2ca2:	80 91 4e 31 	lds	r24, 0x314E	; 0x80314e <pxOverflowDelayedTaskList>
    2ca6:	90 91 4f 31 	lds	r25, 0x314F	; 0x80314f <pxOverflowDelayedTaskList+0x1>
    2caa:	6e 5f       	subi	r22, 0xFE	; 254
    2cac:	7f 4f       	sbci	r23, 0xFF	; 255
    2cae:	0e 94 bd 11 	call	0x237a	; 0x237a <vListInsert>
    2cb2:	21 c0       	rjmp	.+66     	; 0x2cf6 <prvAddCurrentTaskToDelayedList+0x92>
    2cb4:	60 91 94 31 	lds	r22, 0x3194	; 0x803194 <pxCurrentTCB>
    2cb8:	70 91 95 31 	lds	r23, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2cbc:	80 91 50 31 	lds	r24, 0x3150	; 0x803150 <pxDelayedTaskList>
    2cc0:	90 91 51 31 	lds	r25, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    2cc4:	6e 5f       	subi	r22, 0xFE	; 254
    2cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc8:	0e 94 bd 11 	call	0x237a	; 0x237a <vListInsert>
    2ccc:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    2cd0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    2cd4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    2cd8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    2cdc:	c8 16       	cp	r12, r24
    2cde:	d9 06       	cpc	r13, r25
    2ce0:	ea 06       	cpc	r14, r26
    2ce2:	fb 06       	cpc	r15, r27
    2ce4:	40 f4       	brcc	.+16     	; 0x2cf6 <prvAddCurrentTaskToDelayedList+0x92>
    2ce6:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    2cea:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    2cee:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    2cf2:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    2cf6:	ff 90       	pop	r15
    2cf8:	ef 90       	pop	r14
    2cfa:	df 90       	pop	r13
    2cfc:	cf 90       	pop	r12
    2cfe:	08 95       	ret

00002d00 <xTaskGenericCreate>:
    2d00:	4f 92       	push	r4
    2d02:	5f 92       	push	r5
    2d04:	6f 92       	push	r6
    2d06:	7f 92       	push	r7
    2d08:	8f 92       	push	r8
    2d0a:	9f 92       	push	r9
    2d0c:	af 92       	push	r10
    2d0e:	bf 92       	push	r11
    2d10:	cf 92       	push	r12
    2d12:	df 92       	push	r13
    2d14:	ef 92       	push	r14
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	5c 01       	movw	r10, r24
    2d22:	4b 01       	movw	r8, r22
    2d24:	3a 01       	movw	r6, r20
    2d26:	29 01       	movw	r4, r18
    2d28:	88 e2       	ldi	r24, 0x28	; 40
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    2d30:	ec 01       	movw	r28, r24
    2d32:	89 2b       	or	r24, r25
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <xTaskGenericCreate+0x38>
    2d36:	d4 c0       	rjmp	.+424    	; 0x2ee0 <xTaskGenericCreate+0x1e0>
    2d38:	c1 14       	cp	r12, r1
    2d3a:	d1 04       	cpc	r13, r1
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <xTaskGenericCreate+0x40>
    2d3e:	cc c0       	rjmp	.+408    	; 0x2ed8 <xTaskGenericCreate+0x1d8>
    2d40:	c3 01       	movw	r24, r6
    2d42:	0e 94 af 10 	call	0x215e	; 0x215e <pvPortMalloc>
    2d46:	8b 8f       	std	Y+27, r24	; 0x1b
    2d48:	9c 8f       	std	Y+28, r25	; 0x1c
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	21 f4       	brne	.+8      	; 0x2d56 <xTaskGenericCreate+0x56>
    2d4e:	ce 01       	movw	r24, r28
    2d50:	0e 94 49 11 	call	0x2292	; 0x2292 <vPortFree>
    2d54:	c5 c0       	rjmp	.+394    	; 0x2ee0 <xTaskGenericCreate+0x1e0>
    2d56:	a3 01       	movw	r20, r6
    2d58:	61 e1       	ldi	r22, 0x11	; 17
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <memset>
    2d60:	93 01       	movw	r18, r6
    2d62:	21 50       	subi	r18, 0x01	; 1
    2d64:	31 09       	sbc	r19, r1
    2d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6a:	3c 01       	movw	r6, r24
    2d6c:	62 0e       	add	r6, r18
    2d6e:	73 1e       	adc	r7, r19
    2d70:	4a e0       	ldi	r20, 0x0A	; 10
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	b4 01       	movw	r22, r8
    2d76:	ce 01       	movw	r24, r28
    2d78:	4d 96       	adiw	r24, 0x1d	; 29
    2d7a:	0e 94 42 1c 	call	0x3884	; 0x3884 <strncpy>
    2d7e:	1e a2       	std	Y+38, r1	; 0x26
    2d80:	10 2f       	mov	r17, r16
    2d82:	04 30       	cpi	r16, 0x04	; 4
    2d84:	08 f0       	brcs	.+2      	; 0x2d88 <xTaskGenericCreate+0x88>
    2d86:	13 e0       	ldi	r17, 0x03	; 3
    2d88:	1a 8f       	std	Y+26, r17	; 0x1a
    2d8a:	1f a3       	std	Y+39, r17	; 0x27
    2d8c:	6e 01       	movw	r12, r28
    2d8e:	22 e0       	ldi	r18, 0x02	; 2
    2d90:	c2 0e       	add	r12, r18
    2d92:	d1 1c       	adc	r13, r1
    2d94:	c6 01       	movw	r24, r12
    2d96:	0e 94 92 11 	call	0x2324	; 0x2324 <vListInitialiseItem>
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	0e 96       	adiw	r24, 0x0e	; 14
    2d9e:	0e 94 92 11 	call	0x2324	; 0x2324 <vListInitialiseItem>
    2da2:	ca 87       	std	Y+10, r28	; 0x0a
    2da4:	db 87       	std	Y+11, r29	; 0x0b
    2da6:	84 e0       	ldi	r24, 0x04	; 4
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e0       	ldi	r26, 0x00	; 0
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	81 1b       	sub	r24, r17
    2db0:	91 09       	sbc	r25, r1
    2db2:	a1 09       	sbc	r26, r1
    2db4:	b1 09       	sbc	r27, r1
    2db6:	8e 87       	std	Y+14, r24	; 0x0e
    2db8:	9f 87       	std	Y+15, r25	; 0x0f
    2dba:	a8 8b       	std	Y+16, r26	; 0x10
    2dbc:	b9 8b       	std	Y+17, r27	; 0x11
    2dbe:	ce 8b       	std	Y+22, r28	; 0x16
    2dc0:	df 8b       	std	Y+23, r29	; 0x17
    2dc2:	a2 01       	movw	r20, r4
    2dc4:	b5 01       	movw	r22, r10
    2dc6:	c3 01       	movw	r24, r6
    2dc8:	0e 94 2e 12 	call	0x245c	; 0x245c <pxPortInitialiseStack>
    2dcc:	88 83       	st	Y, r24
    2dce:	99 83       	std	Y+1, r25	; 0x01
    2dd0:	e1 14       	cp	r14, r1
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	19 f0       	breq	.+6      	; 0x2ddc <xTaskGenericCreate+0xdc>
    2dd6:	f7 01       	movw	r30, r14
    2dd8:	c0 83       	st	Z, r28
    2dda:	d1 83       	std	Z+1, r29	; 0x01
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	0f 92       	push	r0
    2de2:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <uxCurrentNumberOfTasks>
    2de6:	8f 5f       	subi	r24, 0xFF	; 255
    2de8:	80 93 40 31 	sts	0x3140, r24	; 0x803140 <uxCurrentNumberOfTasks>
    2dec:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    2df0:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2df4:	89 2b       	or	r24, r25
    2df6:	89 f5       	brne	.+98     	; 0x2e5a <xTaskGenericCreate+0x15a>
    2df8:	c0 93 94 31 	sts	0x3194, r28	; 0x803194 <pxCurrentTCB>
    2dfc:	d0 93 95 31 	sts	0x3195, r29	; 0x803195 <pxCurrentTCB+0x1>
    2e00:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <uxCurrentNumberOfTasks>
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	c1 f5       	brne	.+112    	; 0x2e78 <xTaskGenericCreate+0x178>
    2e08:	88 e6       	ldi	r24, 0x68	; 104
    2e0a:	91 e3       	ldi	r25, 0x31	; 49
    2e0c:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e10:	83 e7       	ldi	r24, 0x73	; 115
    2e12:	91 e3       	ldi	r25, 0x31	; 49
    2e14:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e18:	8e e7       	ldi	r24, 0x7E	; 126
    2e1a:	91 e3       	ldi	r25, 0x31	; 49
    2e1c:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e20:	89 e8       	ldi	r24, 0x89	; 137
    2e22:	91 e3       	ldi	r25, 0x31	; 49
    2e24:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e28:	8d e5       	ldi	r24, 0x5D	; 93
    2e2a:	91 e3       	ldi	r25, 0x31	; 49
    2e2c:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e30:	82 e5       	ldi	r24, 0x52	; 82
    2e32:	91 e3       	ldi	r25, 0x31	; 49
    2e34:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e38:	83 e4       	ldi	r24, 0x43	; 67
    2e3a:	91 e3       	ldi	r25, 0x31	; 49
    2e3c:	0e 94 81 11 	call	0x2302	; 0x2302 <vListInitialise>
    2e40:	8d e5       	ldi	r24, 0x5D	; 93
    2e42:	91 e3       	ldi	r25, 0x31	; 49
    2e44:	80 93 50 31 	sts	0x3150, r24	; 0x803150 <pxDelayedTaskList>
    2e48:	90 93 51 31 	sts	0x3151, r25	; 0x803151 <pxDelayedTaskList+0x1>
    2e4c:	82 e5       	ldi	r24, 0x52	; 82
    2e4e:	91 e3       	ldi	r25, 0x31	; 49
    2e50:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <pxOverflowDelayedTaskList>
    2e54:	90 93 4f 31 	sts	0x314F, r25	; 0x80314f <pxOverflowDelayedTaskList+0x1>
    2e58:	0f c0       	rjmp	.+30     	; 0x2e78 <xTaskGenericCreate+0x178>
    2e5a:	80 91 39 31 	lds	r24, 0x3139	; 0x803139 <xSchedulerRunning>
    2e5e:	81 11       	cpse	r24, r1
    2e60:	0b c0       	rjmp	.+22     	; 0x2e78 <xTaskGenericCreate+0x178>
    2e62:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    2e66:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2e6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e6c:	08 17       	cp	r16, r24
    2e6e:	20 f0       	brcs	.+8      	; 0x2e78 <xTaskGenericCreate+0x178>
    2e70:	c0 93 94 31 	sts	0x3194, r28	; 0x803194 <pxCurrentTCB>
    2e74:	d0 93 95 31 	sts	0x3195, r29	; 0x803195 <pxCurrentTCB+0x1>
    2e78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e7a:	90 91 3b 31 	lds	r25, 0x313B	; 0x80313b <uxTopUsedPriority>
    2e7e:	98 17       	cp	r25, r24
    2e80:	10 f4       	brcc	.+4      	; 0x2e86 <xTaskGenericCreate+0x186>
    2e82:	80 93 3b 31 	sts	0x313B, r24	; 0x80313b <uxTopUsedPriority>
    2e86:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <uxTaskNumber>
    2e8a:	9f 5f       	subi	r25, 0xFF	; 255
    2e8c:	90 93 34 31 	sts	0x3134, r25	; 0x803134 <uxTaskNumber>
    2e90:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    2e94:	98 17       	cp	r25, r24
    2e96:	10 f4       	brcc	.+4      	; 0x2e9c <xTaskGenericCreate+0x19c>
    2e98:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    2e9c:	fb e0       	ldi	r31, 0x0B	; 11
    2e9e:	8f 9f       	mul	r24, r31
    2ea0:	c0 01       	movw	r24, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	b6 01       	movw	r22, r12
    2ea6:	88 59       	subi	r24, 0x98	; 152
    2ea8:	9e 4c       	sbci	r25, 0xCE	; 206
    2eaa:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	80 91 39 31 	lds	r24, 0x3139	; 0x803139 <xSchedulerRunning>
    2eb6:	88 23       	and	r24, r24
    2eb8:	59 f0       	breq	.+22     	; 0x2ed0 <xTaskGenericCreate+0x1d0>
    2eba:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    2ebe:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ec4:	80 17       	cp	r24, r16
    2ec6:	30 f4       	brcc	.+12     	; 0x2ed4 <xTaskGenericCreate+0x1d4>
    2ec8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	09 c0       	rjmp	.+18     	; 0x2ee2 <xTaskGenericCreate+0x1e2>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	07 c0       	rjmp	.+14     	; 0x2ee2 <xTaskGenericCreate+0x1e2>
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <xTaskGenericCreate+0x1e2>
    2ed8:	cb 8e       	std	Y+27, r12	; 0x1b
    2eda:	dc 8e       	std	Y+28, r13	; 0x1c
    2edc:	c6 01       	movw	r24, r12
    2ede:	3b cf       	rjmp	.-394    	; 0x2d56 <xTaskGenericCreate+0x56>
    2ee0:	8f ef       	ldi	r24, 0xFF	; 255
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	bf 90       	pop	r11
    2ef4:	af 90       	pop	r10
    2ef6:	9f 90       	pop	r9
    2ef8:	8f 90       	pop	r8
    2efa:	7f 90       	pop	r7
    2efc:	6f 90       	pop	r6
    2efe:	5f 90       	pop	r5
    2f00:	4f 90       	pop	r4
    2f02:	08 95       	ret

00002f04 <uxTaskPriorityGet>:
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	0f 92       	push	r0
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	21 f4       	brne	.+8      	; 0x2f16 <uxTaskPriorityGet+0x12>
    2f0e:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    2f12:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f1e:	08 95       	ret

00002f20 <vTaskStartScheduler>:
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	a1 2c       	mov	r10, r1
    2f30:	b1 2c       	mov	r11, r1
    2f32:	c1 2c       	mov	r12, r1
    2f34:	d1 2c       	mov	r13, r1
    2f36:	0f 2e       	mov	r0, r31
    2f38:	f1 e4       	ldi	r31, 0x41	; 65
    2f3a:	ef 2e       	mov	r14, r31
    2f3c:	f1 e3       	ldi	r31, 0x31	; 49
    2f3e:	ff 2e       	mov	r15, r31
    2f40:	f0 2d       	mov	r31, r0
    2f42:	00 e0       	ldi	r16, 0x00	; 0
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	44 e6       	ldi	r20, 0x64	; 100
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	69 ee       	ldi	r22, 0xE9	; 233
    2f4e:	70 e2       	ldi	r23, 0x20	; 32
    2f50:	8a e2       	ldi	r24, 0x2A	; 42
    2f52:	96 e1       	ldi	r25, 0x16	; 22
    2f54:	0e 94 80 16 	call	0x2d00	; 0x2d00 <xTaskGenericCreate>
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	69 f4       	brne	.+26     	; 0x2f76 <vTaskStartScheduler+0x56>
    2f5c:	f8 94       	cli
    2f5e:	80 93 39 31 	sts	0x3139, r24	; 0x803139 <xSchedulerRunning>
    2f62:	10 92 3c 31 	sts	0x313C, r1	; 0x80313c <xTickCount>
    2f66:	10 92 3d 31 	sts	0x313D, r1	; 0x80313d <xTickCount+0x1>
    2f6a:	10 92 3e 31 	sts	0x313E, r1	; 0x80313e <xTickCount+0x2>
    2f6e:	10 92 3f 31 	sts	0x313F, r1	; 0x80313f <xTickCount+0x3>
    2f72:	0e 94 a4 12 	call	0x2548	; 0x2548 <xPortStartScheduler>
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	08 95       	ret

00002f86 <vTaskSuspendAll>:
    2f86:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 38 31 	sts	0x3138, r24	; 0x803138 <uxSchedulerSuspended>
    2f90:	08 95       	ret

00002f92 <xTaskGetTickCount>:
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	0f 92       	push	r0
    2f98:	60 91 3c 31 	lds	r22, 0x313C	; 0x80313c <xTickCount>
    2f9c:	70 91 3d 31 	lds	r23, 0x313D	; 0x80313d <xTickCount+0x1>
    2fa0:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <xTickCount+0x2>
    2fa4:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <xTickCount+0x3>
    2fa8:	0f 90       	pop	r0
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	08 95       	ret

00002fae <pcTaskGetTaskName>:
	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
	{
	tskTCB *pxTCB;

		/* If null is passed in here then the name of the calling task is being queried. */
		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	21 f4       	brne	.+8      	; 0x2fba <pcTaskGetTaskName+0xc>
    2fb2:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    2fb6:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
		configASSERT( pxTCB );
		return &( pxTCB->pcTaskName[ 0 ] );
	}
    2fba:	4d 96       	adiw	r24, 0x1d	; 29
    2fbc:	08 95       	ret

00002fbe <xTaskGetIdleTaskHandle>:
	{
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
		return xIdleTaskHandle;
	}
    2fbe:	80 91 41 31 	lds	r24, 0x3141	; 0x803141 <xIdleTaskHandle>
    2fc2:	90 91 42 31 	lds	r25, 0x3142	; 0x803142 <xIdleTaskHandle+0x1>
    2fc6:	08 95       	ret

00002fc8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2fd2:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	ed c0       	rjmp	.+474    	; 0x31b4 <vTaskIncrementTick+0x1ec>
	{
		++xTickCount;
    2fda:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    2fde:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    2fe2:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    2fe6:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	a1 1d       	adc	r26, r1
    2fee:	b1 1d       	adc	r27, r1
    2ff0:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <xTickCount>
    2ff4:	90 93 3d 31 	sts	0x313D, r25	; 0x80313d <xTickCount+0x1>
    2ff8:	a0 93 3e 31 	sts	0x313E, r26	; 0x80313e <xTickCount+0x2>
    2ffc:	b0 93 3f 31 	sts	0x313F, r27	; 0x80313f <xTickCount+0x3>
		if( xTickCount == ( portTickType ) 0U )
    3000:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    3004:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    3008:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    300c:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    3010:	89 2b       	or	r24, r25
    3012:	8a 2b       	or	r24, r26
    3014:	8b 2b       	or	r24, r27
    3016:	f1 f5       	brne	.+124    	; 0x3094 <vTaskIncrementTick+0xcc>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3018:	80 91 50 31 	lds	r24, 0x3150	; 0x803150 <pxDelayedTaskList>
    301c:	90 91 51 31 	lds	r25, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3020:	20 91 4e 31 	lds	r18, 0x314E	; 0x80314e <pxOverflowDelayedTaskList>
    3024:	30 91 4f 31 	lds	r19, 0x314F	; 0x80314f <pxOverflowDelayedTaskList+0x1>
    3028:	20 93 50 31 	sts	0x3150, r18	; 0x803150 <pxDelayedTaskList>
    302c:	30 93 51 31 	sts	0x3151, r19	; 0x803151 <pxDelayedTaskList+0x1>
			pxOverflowDelayedTaskList = pxTemp;
    3030:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <pxOverflowDelayedTaskList>
    3034:	90 93 4f 31 	sts	0x314F, r25	; 0x80314f <pxOverflowDelayedTaskList+0x1>
			xNumOfOverflows++;
    3038:	80 91 35 31 	lds	r24, 0x3135	; 0x803135 <xNumOfOverflows>
    303c:	8f 5f       	subi	r24, 0xFF	; 255
    303e:	80 93 35 31 	sts	0x3135, r24	; 0x803135 <xNumOfOverflows>
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3042:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    3046:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    304a:	80 81       	ld	r24, Z
    304c:	81 11       	cpse	r24, r1
    304e:	0c c0       	rjmp	.+24     	; 0x3068 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3050:	8f ef       	ldi	r24, 0xFF	; 255
    3052:	9f ef       	ldi	r25, 0xFF	; 255
    3054:	dc 01       	movw	r26, r24
    3056:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    305a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    305e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3062:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3066:	16 c0       	rjmp	.+44     	; 0x3094 <vTaskIncrementTick+0xcc>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3068:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    306c:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    3070:	07 80       	ldd	r0, Z+7	; 0x07
    3072:	f0 85       	ldd	r31, Z+8	; 0x08
    3074:	e0 2d       	mov	r30, r0
    3076:	00 84       	ldd	r0, Z+8	; 0x08
    3078:	f1 85       	ldd	r31, Z+9	; 0x09
    307a:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	a4 81       	ldd	r26, Z+4	; 0x04
    3082:	b5 81       	ldd	r27, Z+5	; 0x05
    3084:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3088:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    308c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3090:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3094:	40 91 3c 31 	lds	r20, 0x313C	; 0x80313c <xTickCount>
    3098:	50 91 3d 31 	lds	r21, 0x313D	; 0x80313d <xTickCount+0x1>
    309c:	60 91 3e 31 	lds	r22, 0x313E	; 0x80313e <xTickCount+0x2>
    30a0:	70 91 3f 31 	lds	r23, 0x313F	; 0x80313f <xTickCount+0x3>
    30a4:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    30a8:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    30ac:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    30b0:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    30b4:	48 17       	cp	r20, r24
    30b6:	59 07       	cpc	r21, r25
    30b8:	6a 07       	cpc	r22, r26
    30ba:	7b 07       	cpc	r23, r27
    30bc:	08 f4       	brcc	.+2      	; 0x30c0 <vTaskIncrementTick+0xf8>
    30be:	7f c0       	rjmp	.+254    	; 0x31be <vTaskIncrementTick+0x1f6>
    30c0:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    30c4:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    30c8:	80 81       	ld	r24, Z
    30ca:	88 23       	and	r24, r24
    30cc:	f9 f0       	breq	.+62     	; 0x310c <vTaskIncrementTick+0x144>
    30ce:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    30d2:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    30d6:	07 80       	ldd	r0, Z+7	; 0x07
    30d8:	f0 85       	ldd	r31, Z+8	; 0x08
    30da:	e0 2d       	mov	r30, r0
    30dc:	c0 85       	ldd	r28, Z+8	; 0x08
    30de:	d1 85       	ldd	r29, Z+9	; 0x09
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	9b 81       	ldd	r25, Y+3	; 0x03
    30e4:	ac 81       	ldd	r26, Y+4	; 0x04
    30e6:	bd 81       	ldd	r27, Y+5	; 0x05
    30e8:	40 91 3c 31 	lds	r20, 0x313C	; 0x80313c <xTickCount>
    30ec:	50 91 3d 31 	lds	r21, 0x313D	; 0x80313d <xTickCount+0x1>
    30f0:	60 91 3e 31 	lds	r22, 0x313E	; 0x80313e <xTickCount+0x2>
    30f4:	70 91 3f 31 	lds	r23, 0x313F	; 0x80313f <xTickCount+0x3>
    30f8:	48 17       	cp	r20, r24
    30fa:	59 07       	cpc	r21, r25
    30fc:	6a 07       	cpc	r22, r26
    30fe:	7b 07       	cpc	r23, r27
    3100:	58 f1       	brcs	.+86     	; 0x3158 <vTaskIncrementTick+0x190>
    3102:	0f 2e       	mov	r0, r31
    3104:	fb e0       	ldi	r31, 0x0B	; 11
    3106:	ff 2e       	mov	r15, r31
    3108:	f0 2d       	mov	r31, r0
    310a:	2f c0       	rjmp	.+94     	; 0x316a <vTaskIncrementTick+0x1a2>
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	9f ef       	ldi	r25, 0xFF	; 255
    3110:	dc 01       	movw	r26, r24
    3112:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3116:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    311a:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    311e:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3122:	4d c0       	rjmp	.+154    	; 0x31be <vTaskIncrementTick+0x1f6>
    3124:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    3128:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    312c:	07 80       	ldd	r0, Z+7	; 0x07
    312e:	f0 85       	ldd	r31, Z+8	; 0x08
    3130:	e0 2d       	mov	r30, r0
    3132:	c0 85       	ldd	r28, Z+8	; 0x08
    3134:	d1 85       	ldd	r29, Z+9	; 0x09
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	ac 81       	ldd	r26, Y+4	; 0x04
    313c:	bd 81       	ldd	r27, Y+5	; 0x05
    313e:	40 91 3c 31 	lds	r20, 0x313C	; 0x80313c <xTickCount>
    3142:	50 91 3d 31 	lds	r21, 0x313D	; 0x80313d <xTickCount+0x1>
    3146:	60 91 3e 31 	lds	r22, 0x313E	; 0x80313e <xTickCount+0x2>
    314a:	70 91 3f 31 	lds	r23, 0x313F	; 0x80313f <xTickCount+0x3>
    314e:	48 17       	cp	r20, r24
    3150:	59 07       	cpc	r21, r25
    3152:	6a 07       	cpc	r22, r26
    3154:	7b 07       	cpc	r23, r27
    3156:	48 f4       	brcc	.+18     	; 0x316a <vTaskIncrementTick+0x1a2>
    3158:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    315c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3160:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3164:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3168:	2a c0       	rjmp	.+84     	; 0x31be <vTaskIncrementTick+0x1f6>
    316a:	8e 01       	movw	r16, r28
    316c:	0e 5f       	subi	r16, 0xFE	; 254
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	c8 01       	movw	r24, r16
    3172:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
    3176:	88 8d       	ldd	r24, Y+24	; 0x18
    3178:	99 8d       	ldd	r25, Y+25	; 0x19
    317a:	89 2b       	or	r24, r25
    317c:	21 f0       	breq	.+8      	; 0x3186 <vTaskIncrementTick+0x1be>
    317e:	ce 01       	movw	r24, r28
    3180:	0e 96       	adiw	r24, 0x0e	; 14
    3182:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
    3186:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3188:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    318c:	98 17       	cp	r25, r24
    318e:	10 f4       	brcc	.+4      	; 0x3194 <vTaskIncrementTick+0x1cc>
    3190:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    3194:	f8 9e       	mul	r15, r24
    3196:	c0 01       	movw	r24, r0
    3198:	11 24       	eor	r1, r1
    319a:	b8 01       	movw	r22, r16
    319c:	88 59       	subi	r24, 0x98	; 152
    319e:	9e 4c       	sbci	r25, 0xCE	; 206
    31a0:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
    31a4:	e0 91 50 31 	lds	r30, 0x3150	; 0x803150 <pxDelayedTaskList>
    31a8:	f0 91 51 31 	lds	r31, 0x3151	; 0x803151 <pxDelayedTaskList+0x1>
    31ac:	80 81       	ld	r24, Z
    31ae:	81 11       	cpse	r24, r1
    31b0:	b9 cf       	rjmp	.-142    	; 0x3124 <vTaskIncrementTick+0x15c>
    31b2:	ac cf       	rjmp	.-168    	; 0x310c <vTaskIncrementTick+0x144>
	}
	else
	{
		++uxMissedTicks;
    31b4:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <uxMissedTicks>
    31b8:	8f 5f       	subi	r24, 0xFF	; 255
    31ba:	80 93 37 31 	sts	0x3137, r24	; 0x803137 <uxMissedTicks>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	08 95       	ret

000031ca <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    31ca:	cf 92       	push	r12
    31cc:	df 92       	push	r13
    31ce:	ef 92       	push	r14
    31d0:	ff 92       	push	r15
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    31e0:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    31e4:	81 50       	subi	r24, 0x01	; 1
    31e6:	80 93 38 31 	sts	0x3138, r24	; 0x803138 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    31ea:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    31ee:	81 11       	cpse	r24, r1
    31f0:	60 c0       	rjmp	.+192    	; 0x32b2 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    31f2:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <uxCurrentNumberOfTasks>
    31f6:	81 11       	cpse	r24, r1
    31f8:	2c c0       	rjmp	.+88     	; 0x3252 <xTaskResumeAll+0x88>
    31fa:	5e c0       	rjmp	.+188    	; 0x32b8 <xTaskResumeAll+0xee>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    31fc:	d7 01       	movw	r26, r14
    31fe:	17 96       	adiw	r26, 0x07	; 7
    3200:	ed 91       	ld	r30, X+
    3202:	fc 91       	ld	r31, X
    3204:	18 97       	sbiw	r26, 0x08	; 8
    3206:	c0 85       	ldd	r28, Z+8	; 0x08
    3208:	d1 85       	ldd	r29, Z+9	; 0x09
					vListRemove( &( pxTCB->xEventListItem ) );
    320a:	ce 01       	movw	r24, r28
    320c:	0e 96       	adiw	r24, 0x0e	; 14
    320e:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3212:	8e 01       	movw	r16, r28
    3214:	0e 5f       	subi	r16, 0xFE	; 254
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	c8 01       	movw	r24, r16
    321a:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    321e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3220:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    3224:	98 17       	cp	r25, r24
    3226:	10 f4       	brcc	.+4      	; 0x322c <xTaskResumeAll+0x62>
    3228:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    322c:	d8 9e       	mul	r13, r24
    322e:	c0 01       	movw	r24, r0
    3230:	11 24       	eor	r1, r1
    3232:	b8 01       	movw	r22, r16
    3234:	88 59       	subi	r24, 0x98	; 152
    3236:	9e 4c       	sbci	r25, 0xCE	; 206
    3238:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    323c:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    3240:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    3244:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3246:	82 8d       	ldd	r24, Z+26	; 0x1a
    3248:	98 17       	cp	r25, r24
    324a:	70 f0       	brcs	.+28     	; 0x3268 <xTaskResumeAll+0x9e>
					{
						xYieldRequired = pdTRUE;
    324c:	cc 24       	eor	r12, r12
    324e:	c3 94       	inc	r12
    3250:	0b c0       	rjmp	.+22     	; 0x3268 <xTaskResumeAll+0x9e>
    3252:	c1 2c       	mov	r12, r1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3254:	0f 2e       	mov	r0, r31
    3256:	f3 e4       	ldi	r31, 0x43	; 67
    3258:	ef 2e       	mov	r14, r31
    325a:	f1 e3       	ldi	r31, 0x31	; 49
    325c:	ff 2e       	mov	r15, r31
    325e:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3260:	0f 2e       	mov	r0, r31
    3262:	fb e0       	ldi	r31, 0x0B	; 11
    3264:	df 2e       	mov	r13, r31
    3266:	f0 2d       	mov	r31, r0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3268:	f7 01       	movw	r30, r14
    326a:	80 81       	ld	r24, Z
    326c:	81 11       	cpse	r24, r1
    326e:	c6 cf       	rjmp	.-116    	; 0x31fc <xTaskResumeAll+0x32>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3270:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <uxMissedTicks>
    3274:	88 23       	and	r24, r24
    3276:	81 f0       	breq	.+32     	; 0x3298 <xTaskResumeAll+0xce>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3278:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <uxMissedTicks>
    327c:	88 23       	and	r24, r24
    327e:	99 f0       	breq	.+38     	; 0x32a6 <xTaskResumeAll+0xdc>
					{
						vTaskIncrementTick();
    3280:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <vTaskIncrementTick>
						--uxMissedTicks;
    3284:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <uxMissedTicks>
    3288:	81 50       	subi	r24, 0x01	; 1
    328a:	80 93 37 31 	sts	0x3137, r24	; 0x803137 <uxMissedTicks>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    328e:	80 91 37 31 	lds	r24, 0x3137	; 0x803137 <uxMissedTicks>
    3292:	81 11       	cpse	r24, r1
    3294:	f5 cf       	rjmp	.-22     	; 0x3280 <xTaskResumeAll+0xb6>
    3296:	07 c0       	rjmp	.+14     	; 0x32a6 <xTaskResumeAll+0xdc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3298:	f1 e0       	ldi	r31, 0x01	; 1
    329a:	cf 16       	cp	r12, r31
    329c:	21 f0       	breq	.+8      	; 0x32a6 <xTaskResumeAll+0xdc>
    329e:	80 91 36 31 	lds	r24, 0x3136	; 0x803136 <xMissedYield>
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	41 f4       	brne	.+16     	; 0x32b6 <xTaskResumeAll+0xec>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    32a6:	10 92 36 31 	sts	0x3136, r1	; 0x803136 <xMissedYield>
					portYIELD_WITHIN_API();
    32aa:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <xTaskResumeAll+0xee>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	01 c0       	rjmp	.+2      	; 0x32b8 <xTaskResumeAll+0xee>
    32b6:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    32b8:	0f 90       	pop	r0
    32ba:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	df 90       	pop	r13
    32ca:	cf 90       	pop	r12
    32cc:	08 95       	ret

000032ce <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	ec 01       	movw	r28, r24
    32dc:	6a 01       	movw	r12, r20
    32de:	7b 01       	movw	r14, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    32e0:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    32e4:	88 81       	ld	r24, Y
    32e6:	99 81       	ldd	r25, Y+1	; 0x01
    32e8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ea:	bb 81       	ldd	r27, Y+3	; 0x03
    32ec:	c8 0e       	add	r12, r24
    32ee:	d9 1e       	adc	r13, r25
    32f0:	ea 1e       	adc	r14, r26
    32f2:	fb 1e       	adc	r15, r27

			if( xTickCount < *pxPreviousWakeTime )
    32f4:	40 91 3c 31 	lds	r20, 0x313C	; 0x80313c <xTickCount>
    32f8:	50 91 3d 31 	lds	r21, 0x313D	; 0x80313d <xTickCount+0x1>
    32fc:	60 91 3e 31 	lds	r22, 0x313E	; 0x80313e <xTickCount+0x2>
    3300:	70 91 3f 31 	lds	r23, 0x313F	; 0x80313f <xTickCount+0x3>
    3304:	48 17       	cp	r20, r24
    3306:	59 07       	cpc	r21, r25
    3308:	6a 07       	cpc	r22, r26
    330a:	7b 07       	cpc	r23, r27
    330c:	b8 f4       	brcc	.+46     	; 0x333c <vTaskDelayUntil+0x6e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    330e:	c8 16       	cp	r12, r24
    3310:	d9 06       	cpc	r13, r25
    3312:	ea 06       	cpc	r14, r26
    3314:	fb 06       	cpc	r15, r27
    3316:	e0 f5       	brcc	.+120    	; 0x3390 <vTaskDelayUntil+0xc2>
    3318:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    331c:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    3320:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    3324:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3328:	c8 82       	st	Y, r12
    332a:	d9 82       	std	Y+1, r13	; 0x01
    332c:	ea 82       	std	Y+2, r14	; 0x02
    332e:	fb 82       	std	Y+3, r15	; 0x03

			if( xShouldDelay != pdFALSE )
    3330:	8c 15       	cp	r24, r12
    3332:	9d 05       	cpc	r25, r13
    3334:	ae 05       	cpc	r26, r14
    3336:	bf 05       	cpc	r27, r15
    3338:	f8 f4       	brcc	.+62     	; 0x3378 <vTaskDelayUntil+0xaa>
    333a:	13 c0       	rjmp	.+38     	; 0x3362 <vTaskDelayUntil+0x94>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    333c:	c8 16       	cp	r12, r24
    333e:	d9 06       	cpc	r13, r25
    3340:	ea 06       	cpc	r14, r26
    3342:	fb 06       	cpc	r15, r27
    3344:	00 f1       	brcs	.+64     	; 0x3386 <vTaskDelayUntil+0xb8>
    3346:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    334a:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    334e:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    3352:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    3356:	8c 15       	cp	r24, r12
    3358:	9d 05       	cpc	r25, r13
    335a:	ae 05       	cpc	r26, r14
    335c:	bf 05       	cpc	r27, r15
    335e:	98 f0       	brcs	.+38     	; 0x3386 <vTaskDelayUntil+0xb8>
    3360:	17 c0       	rjmp	.+46     	; 0x3390 <vTaskDelayUntil+0xc2>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3362:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    3366:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    336a:	02 96       	adiw	r24, 0x02	; 2
    336c:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3370:	c7 01       	movw	r24, r14
    3372:	b6 01       	movw	r22, r12
    3374:	0e 94 32 16 	call	0x2c64	; 0x2c64 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3378:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    337c:	81 11       	cpse	r24, r1
    337e:	0d c0       	rjmp	.+26     	; 0x339a <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
    3380:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
		}
	}
    3384:	0a c0       	rjmp	.+20     	; 0x339a <vTaskDelayUntil+0xcc>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3386:	c8 82       	st	Y, r12
    3388:	d9 82       	std	Y+1, r13	; 0x01
    338a:	ea 82       	std	Y+2, r14	; 0x02
    338c:	fb 82       	std	Y+3, r15	; 0x03
    338e:	e9 cf       	rjmp	.-46     	; 0x3362 <vTaskDelayUntil+0x94>
    3390:	c8 82       	st	Y, r12
    3392:	d9 82       	std	Y+1, r13	; 0x01
    3394:	ea 82       	std	Y+2, r14	; 0x02
    3396:	fb 82       	std	Y+3, r15	; 0x03
    3398:	ef cf       	rjmp	.-34     	; 0x3378 <vTaskDelayUntil+0xaa>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	08 95       	ret

000033a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    33a8:	cf 92       	push	r12
    33aa:	df 92       	push	r13
    33ac:	ef 92       	push	r14
    33ae:	ff 92       	push	r15
    33b0:	6b 01       	movw	r12, r22
    33b2:	7c 01       	movw	r14, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    33b4:	67 2b       	or	r22, r23
    33b6:	68 2b       	or	r22, r24
    33b8:	69 2b       	or	r22, r25
    33ba:	e9 f0       	breq	.+58     	; 0x33f6 <vTaskDelay+0x4e>
		{
			vTaskSuspendAll();
    33bc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    33c0:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    33c4:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    33c8:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    33cc:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    33d0:	c8 0e       	add	r12, r24
    33d2:	d9 1e       	adc	r13, r25
    33d4:	ea 1e       	adc	r14, r26
    33d6:	fb 1e       	adc	r15, r27

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    33d8:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    33dc:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    33e0:	02 96       	adiw	r24, 0x02	; 2
    33e2:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    33e6:	c7 01       	movw	r24, r14
    33e8:	b6 01       	movw	r22, r12
    33ea:	0e 94 32 16 	call	0x2c64	; 0x2c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    33ee:	0e 94 e5 18 	call	0x31ca	; 0x31ca <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    33f2:	81 11       	cpse	r24, r1
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    33f6:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vPortYield>
		}
	}
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	df 90       	pop	r13
    3400:	cf 90       	pop	r12
    3402:	08 95       	ret

00003404 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3404:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    3408:	81 11       	cpse	r24, r1
    340a:	0c c0       	rjmp	.+24     	; 0x3424 <vTaskSwitchContext+0x20>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    340c:	e0 91 3a 31 	lds	r30, 0x313A	; 0x80313a <uxTopReadyPriority>
    3410:	4b e0       	ldi	r20, 0x0B	; 11
    3412:	e4 9f       	mul	r30, r20
    3414:	f0 01       	movw	r30, r0
    3416:	11 24       	eor	r1, r1
    3418:	e8 59       	subi	r30, 0x98	; 152
    341a:	fe 4c       	sbci	r31, 0xCE	; 206
    341c:	80 81       	ld	r24, Z
    341e:	88 23       	and	r24, r24
    3420:	29 f0       	breq	.+10     	; 0x342c <vTaskSwitchContext+0x28>
    3422:	14 c0       	rjmp	.+40     	; 0x344c <vTaskSwitchContext+0x48>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <xMissedYield>
    342a:	08 95       	ret
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    342c:	9b e0       	ldi	r25, 0x0B	; 11
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    342e:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxTopReadyPriority>
    3432:	81 50       	subi	r24, 0x01	; 1
    3434:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3438:	e0 91 3a 31 	lds	r30, 0x313A	; 0x80313a <uxTopReadyPriority>
    343c:	9e 9f       	mul	r25, r30
    343e:	f0 01       	movw	r30, r0
    3440:	11 24       	eor	r1, r1
    3442:	e8 59       	subi	r30, 0x98	; 152
    3444:	fe 4c       	sbci	r31, 0xCE	; 206
    3446:	80 81       	ld	r24, Z
    3448:	88 23       	and	r24, r24
    344a:	89 f3       	breq	.-30     	; 0x342e <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    344c:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <uxTopReadyPriority>
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4b e0       	ldi	r20, 0x0B	; 11
    3456:	84 9f       	mul	r24, r20
    3458:	c0 01       	movw	r24, r0
    345a:	11 24       	eor	r1, r1
    345c:	dc 01       	movw	r26, r24
    345e:	a8 59       	subi	r26, 0x98	; 152
    3460:	be 4c       	sbci	r27, 0xCE	; 206
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	ed 91       	ld	r30, X+
    3466:	fc 91       	ld	r31, X
    3468:	12 97       	sbiw	r26, 0x02	; 2
    346a:	04 80       	ldd	r0, Z+4	; 0x04
    346c:	f5 81       	ldd	r31, Z+5	; 0x05
    346e:	e0 2d       	mov	r30, r0
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	ed 93       	st	X+, r30
    3474:	fc 93       	st	X, r31
    3476:	12 97       	sbiw	r26, 0x02	; 2
    3478:	85 59       	subi	r24, 0x95	; 149
    347a:	9e 4c       	sbci	r25, 0xCE	; 206
    347c:	e8 17       	cp	r30, r24
    347e:	f9 07       	cpc	r31, r25
    3480:	61 f4       	brne	.+24     	; 0x349a <vTaskSwitchContext+0x96>
    3482:	84 81       	ldd	r24, Z+4	; 0x04
    3484:	95 81       	ldd	r25, Z+5	; 0x05
    3486:	4b e0       	ldi	r20, 0x0B	; 11
    3488:	42 9f       	mul	r20, r18
    348a:	f0 01       	movw	r30, r0
    348c:	43 9f       	mul	r20, r19
    348e:	f0 0d       	add	r31, r0
    3490:	11 24       	eor	r1, r1
    3492:	e8 59       	subi	r30, 0x98	; 152
    3494:	fe 4c       	sbci	r31, 0xCE	; 206
    3496:	81 83       	std	Z+1, r24	; 0x01
    3498:	92 83       	std	Z+2, r25	; 0x02
    349a:	8b e0       	ldi	r24, 0x0B	; 11
    349c:	82 9f       	mul	r24, r18
    349e:	f0 01       	movw	r30, r0
    34a0:	83 9f       	mul	r24, r19
    34a2:	f0 0d       	add	r31, r0
    34a4:	11 24       	eor	r1, r1
    34a6:	e8 59       	subi	r30, 0x98	; 152
    34a8:	fe 4c       	sbci	r31, 0xCE	; 206
    34aa:	01 80       	ldd	r0, Z+1	; 0x01
    34ac:	f2 81       	ldd	r31, Z+2	; 0x02
    34ae:	e0 2d       	mov	r30, r0
    34b0:	80 85       	ldd	r24, Z+8	; 0x08
    34b2:	91 85       	ldd	r25, Z+9	; 0x09
    34b4:	80 93 94 31 	sts	0x3194, r24	; 0x803194 <pxCurrentTCB>
    34b8:	90 93 95 31 	sts	0x3195, r25	; 0x803195 <pxCurrentTCB+0x1>
    34bc:	08 95       	ret

000034be <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	6a 01       	movw	r12, r20
    34c8:	7b 01       	movw	r14, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    34ca:	60 91 94 31 	lds	r22, 0x3194	; 0x803194 <pxCurrentTCB>
    34ce:	70 91 95 31 	lds	r23, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    34d2:	62 5f       	subi	r22, 0xF2	; 242
    34d4:	7f 4f       	sbci	r23, 0xFF	; 255
    34d6:	0e 94 bd 11 	call	0x237a	; 0x237a <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    34da:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    34de:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    34e2:	02 96       	adiw	r24, 0x02	; 2
    34e4:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    34e8:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    34ec:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    34f0:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    34f4:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	6c 0d       	add	r22, r12
    34fe:	7d 1d       	adc	r23, r13
    3500:	8e 1d       	adc	r24, r14
    3502:	9f 1d       	adc	r25, r15
    3504:	0e 94 32 16 	call	0x2c64	; 0x2c64 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	df 90       	pop	r13
    350e:	cf 90       	pop	r12
    3510:	08 95       	ret

00003512 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    351a:	dc 01       	movw	r26, r24
    351c:	17 96       	adiw	r26, 0x07	; 7
    351e:	ed 91       	ld	r30, X+
    3520:	fc 91       	ld	r31, X
    3522:	18 97       	sbiw	r26, 0x08	; 8
    3524:	c0 85       	ldd	r28, Z+8	; 0x08
    3526:	d1 85       	ldd	r29, Z+9	; 0x09
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3528:	8e 01       	movw	r16, r28
    352a:	02 5f       	subi	r16, 0xF2	; 242
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	c8 01       	movw	r24, r16
    3530:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3534:	80 91 38 31 	lds	r24, 0x3138	; 0x803138 <uxSchedulerSuspended>
    3538:	81 11       	cpse	r24, r1
    353a:	16 c0       	rjmp	.+44     	; 0x3568 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    353c:	0c 50       	subi	r16, 0x0C	; 12
    353e:	11 09       	sbc	r17, r1
    3540:	c8 01       	movw	r24, r16
    3542:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3546:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3548:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    354c:	98 17       	cp	r25, r24
    354e:	10 f4       	brcc	.+4      	; 0x3554 <xTaskRemoveFromEventList+0x42>
    3550:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    3554:	bb e0       	ldi	r27, 0x0B	; 11
    3556:	8b 9f       	mul	r24, r27
    3558:	c0 01       	movw	r24, r0
    355a:	11 24       	eor	r1, r1
    355c:	b8 01       	movw	r22, r16
    355e:	88 59       	subi	r24, 0x98	; 152
    3560:	9e 4c       	sbci	r25, 0xCE	; 206
    3562:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
    3566:	05 c0       	rjmp	.+10     	; 0x3572 <xTaskRemoveFromEventList+0x60>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3568:	b8 01       	movw	r22, r16
    356a:	83 e4       	ldi	r24, 0x43	; 67
    356c:	91 e3       	ldi	r25, 0x31	; 49
    356e:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3572:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    3576:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    357e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3580:	29 17       	cp	r18, r25
    3582:	08 f4       	brcc	.+2      	; 0x3586 <xTaskRemoveFromEventList+0x74>
    3584:	80 e0       	ldi	r24, 0x00	; 0
}
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3590:	20 91 35 31 	lds	r18, 0x3135	; 0x803135 <xNumOfOverflows>
    3594:	fc 01       	movw	r30, r24
    3596:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    3598:	40 91 3c 31 	lds	r20, 0x313C	; 0x80313c <xTickCount>
    359c:	50 91 3d 31 	lds	r21, 0x313D	; 0x80313d <xTickCount+0x1>
    35a0:	60 91 3e 31 	lds	r22, 0x313E	; 0x80313e <xTickCount+0x2>
    35a4:	70 91 3f 31 	lds	r23, 0x313F	; 0x80313f <xTickCount+0x3>
    35a8:	41 83       	std	Z+1, r20	; 0x01
    35aa:	52 83       	std	Z+2, r21	; 0x02
    35ac:	63 83       	std	Z+3, r22	; 0x03
    35ae:	74 83       	std	Z+4, r23	; 0x04
    35b0:	08 95       	ret

000035b2 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    35b2:	8f 92       	push	r8
    35b4:	9f 92       	push	r9
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	fc 01       	movw	r30, r24
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    35d2:	80 91 35 31 	lds	r24, 0x3135	; 0x803135 <xNumOfOverflows>
    35d6:	90 81       	ld	r25, Z
    35d8:	98 17       	cp	r25, r24
    35da:	89 f0       	breq	.+34     	; 0x35fe <xTaskCheckForTimeOut+0x4c>
    35dc:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    35e0:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    35e4:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    35e8:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    35ec:	01 81       	ldd	r16, Z+1	; 0x01
    35ee:	12 81       	ldd	r17, Z+2	; 0x02
    35f0:	23 81       	ldd	r18, Z+3	; 0x03
    35f2:	34 81       	ldd	r19, Z+4	; 0x04
    35f4:	80 17       	cp	r24, r16
    35f6:	91 07       	cpc	r25, r17
    35f8:	a2 07       	cpc	r26, r18
    35fa:	b3 07       	cpc	r27, r19
    35fc:	a8 f5       	brcc	.+106    	; 0x3668 <xTaskCheckForTimeOut+0xb6>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    35fe:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <xTickCount>
    3602:	90 91 3d 31 	lds	r25, 0x313D	; 0x80313d <xTickCount+0x1>
    3606:	a0 91 3e 31 	lds	r26, 0x313E	; 0x80313e <xTickCount+0x2>
    360a:	b0 91 3f 31 	lds	r27, 0x313F	; 0x80313f <xTickCount+0x3>
    360e:	c1 80       	ldd	r12, Z+1	; 0x01
    3610:	d2 80       	ldd	r13, Z+2	; 0x02
    3612:	e3 80       	ldd	r14, Z+3	; 0x03
    3614:	f4 80       	ldd	r15, Z+4	; 0x04
    3616:	eb 01       	movw	r28, r22
    3618:	08 81       	ld	r16, Y
    361a:	19 81       	ldd	r17, Y+1	; 0x01
    361c:	2a 81       	ldd	r18, Y+2	; 0x02
    361e:	3b 81       	ldd	r19, Y+3	; 0x03
    3620:	8c 19       	sub	r24, r12
    3622:	9d 09       	sbc	r25, r13
    3624:	ae 09       	sbc	r26, r14
    3626:	bf 09       	sbc	r27, r15
    3628:	80 17       	cp	r24, r16
    362a:	91 07       	cpc	r25, r17
    362c:	a2 07       	cpc	r26, r18
    362e:	b3 07       	cpc	r27, r19
    3630:	e8 f4       	brcc	.+58     	; 0x366c <xTaskCheckForTimeOut+0xba>
    3632:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3634:	80 90 3c 31 	lds	r8, 0x313C	; 0x80313c <xTickCount>
    3638:	90 90 3d 31 	lds	r9, 0x313D	; 0x80313d <xTickCount+0x1>
    363c:	a0 90 3e 31 	lds	r10, 0x313E	; 0x80313e <xTickCount+0x2>
    3640:	b0 90 3f 31 	lds	r11, 0x313F	; 0x80313f <xTickCount+0x3>
    3644:	b5 01       	movw	r22, r10
    3646:	a4 01       	movw	r20, r8
    3648:	4c 19       	sub	r20, r12
    364a:	5d 09       	sbc	r21, r13
    364c:	6e 09       	sbc	r22, r14
    364e:	7f 09       	sbc	r23, r15
    3650:	04 1b       	sub	r16, r20
    3652:	15 0b       	sbc	r17, r21
    3654:	26 0b       	sbc	r18, r22
    3656:	37 0b       	sbc	r19, r23
    3658:	08 83       	st	Y, r16
    365a:	19 83       	std	Y+1, r17	; 0x01
    365c:	2a 83       	std	Y+2, r18	; 0x02
    365e:	3b 83       	std	Y+3, r19	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    3660:	0e 94 c8 1a 	call	0x3590	; 0x3590 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	03 c0       	rjmp	.+6      	; 0x366e <xTaskCheckForTimeOut+0xbc>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	01 c0       	rjmp	.+2      	; 0x366e <xTaskCheckForTimeOut+0xbc>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    366c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	bf 90       	pop	r11
    3684:	af 90       	pop	r10
    3686:	9f 90       	pop	r9
    3688:	8f 90       	pop	r8
    368a:	08 95       	ret

0000368c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	80 93 36 31 	sts	0x3136, r24	; 0x803136 <xMissedYield>
    3692:	08 95       	ret

00003694 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	21 f4       	brne	.+8      	; 0x36a0 <uxTaskGetStackHighWaterMark+0xc>
    3698:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    369c:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    36a0:	dc 01       	movw	r26, r24
    36a2:	5b 96       	adiw	r26, 0x1b	; 27
    36a4:	ed 91       	ld	r30, X+
    36a6:	fc 91       	ld	r31, X
    36a8:	5c 97       	sbiw	r26, 0x1c	; 28

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    36aa:	80 81       	ld	r24, Z
    36ac:	81 31       	cpi	r24, 0x11	; 17
    36ae:	41 f4       	brne	.+16     	; 0x36c0 <uxTaskGetStackHighWaterMark+0x2c>
    36b0:	31 96       	adiw	r30, 0x01	; 1
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    36b6:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    36b8:	21 91       	ld	r18, Z+
    36ba:	21 31       	cpi	r18, 0x11	; 17
    36bc:	e1 f3       	breq	.-8      	; 0x36b6 <uxTaskGetStackHighWaterMark+0x22>
    36be:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    36c4:	08 95       	ret

000036c6 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    36c6:	80 91 94 31 	lds	r24, 0x3194	; 0x803194 <pxCurrentTCB>
    36ca:	90 91 95 31 	lds	r25, 0x3195	; 0x803195 <pxCurrentTCB+0x1>

		return xReturn;
	}
    36ce:	08 95       	ret

000036d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    36da:	22 8d       	ldd	r18, Z+26	; 0x1a
    36dc:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    36e0:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    36e4:	5a 96       	adiw	r26, 0x1a	; 26
    36e6:	8c 91       	ld	r24, X
    36e8:	28 17       	cp	r18, r24
    36ea:	08 f0       	brcs	.+2      	; 0x36ee <vTaskPriorityInherit+0x1e>
    36ec:	41 c0       	rjmp	.+130    	; 0x3770 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    36ee:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    36f2:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    36f6:	5a 96       	adiw	r26, 0x1a	; 26
    36f8:	3c 91       	ld	r19, X
    36fa:	84 e0       	ldi	r24, 0x04	; 4
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e0       	ldi	r26, 0x00	; 0
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	83 1b       	sub	r24, r19
    3704:	91 09       	sbc	r25, r1
    3706:	a1 09       	sbc	r26, r1
    3708:	b1 09       	sbc	r27, r1
    370a:	86 87       	std	Z+14, r24	; 0x0e
    370c:	97 87       	std	Z+15, r25	; 0x0f
    370e:	a0 8b       	std	Z+16, r26	; 0x10
    3710:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3712:	8b e0       	ldi	r24, 0x0B	; 11
    3714:	28 9f       	mul	r18, r24
    3716:	90 01       	movw	r18, r0
    3718:	11 24       	eor	r1, r1
    371a:	28 59       	subi	r18, 0x98	; 152
    371c:	3e 4c       	sbci	r19, 0xCE	; 206
    371e:	84 85       	ldd	r24, Z+12	; 0x0c
    3720:	95 85       	ldd	r25, Z+13	; 0x0d
    3722:	82 17       	cp	r24, r18
    3724:	93 07       	cpc	r25, r19
    3726:	e9 f4       	brne	.+58     	; 0x3762 <vTaskPriorityInherit+0x92>
    3728:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    372a:	ef 01       	movw	r28, r30
    372c:	22 96       	adiw	r28, 0x02	; 2
    372e:	ce 01       	movw	r24, r28
    3730:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3734:	e0 91 94 31 	lds	r30, 0x3194	; 0x803194 <pxCurrentTCB>
    3738:	f0 91 95 31 	lds	r31, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    373c:	82 8d       	ldd	r24, Z+26	; 0x1a
    373e:	f8 01       	movw	r30, r16
    3740:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    3742:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    3746:	98 17       	cp	r25, r24
    3748:	10 f4       	brcc	.+4      	; 0x374e <vTaskPriorityInherit+0x7e>
    374a:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    374e:	fb e0       	ldi	r31, 0x0B	; 11
    3750:	8f 9f       	mul	r24, r31
    3752:	c0 01       	movw	r24, r0
    3754:	11 24       	eor	r1, r1
    3756:	be 01       	movw	r22, r28
    3758:	88 59       	subi	r24, 0x98	; 152
    375a:	9e 4c       	sbci	r25, 0xCE	; 206
    375c:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
    3760:	07 c0       	rjmp	.+14     	; 0x3770 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3762:	a0 91 94 31 	lds	r26, 0x3194	; 0x803194 <pxCurrentTCB>
    3766:	b0 91 95 31 	lds	r27, 0x3195	; 0x803195 <pxCurrentTCB+0x1>
    376a:	5a 96       	adiw	r26, 0x1a	; 26
    376c:	8c 91       	ld	r24, X
    376e:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	08 95       	ret

0000377a <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	49 f1       	breq	.+82     	; 0x37d8 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3786:	fc 01       	movw	r30, r24
    3788:	32 8d       	ldd	r19, Z+26	; 0x1a
    378a:	27 a1       	ldd	r18, Z+39	; 0x27
    378c:	32 17       	cp	r19, r18
    378e:	21 f1       	breq	.+72     	; 0x37d8 <vTaskPriorityDisinherit+0x5e>
    3790:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3792:	8c 01       	movw	r16, r24
    3794:	0e 5f       	subi	r16, 0xFE	; 254
    3796:	1f 4f       	sbci	r17, 0xFF	; 255
    3798:	c8 01       	movw	r24, r16
    379a:	0e 94 08 12 	call	0x2410	; 0x2410 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    379e:	8f a1       	ldd	r24, Y+39	; 0x27
    37a0:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    37a2:	44 e0       	ldi	r20, 0x04	; 4
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	48 1b       	sub	r20, r24
    37ac:	51 09       	sbc	r21, r1
    37ae:	61 09       	sbc	r22, r1
    37b0:	71 09       	sbc	r23, r1
    37b2:	4e 87       	std	Y+14, r20	; 0x0e
    37b4:	5f 87       	std	Y+15, r21	; 0x0f
    37b6:	68 8b       	std	Y+16, r22	; 0x10
    37b8:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    37ba:	90 91 3a 31 	lds	r25, 0x313A	; 0x80313a <uxTopReadyPriority>
    37be:	98 17       	cp	r25, r24
    37c0:	10 f4       	brcc	.+4      	; 0x37c6 <vTaskPriorityDisinherit+0x4c>
    37c2:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <uxTopReadyPriority>
    37c6:	fb e0       	ldi	r31, 0x0B	; 11
    37c8:	8f 9f       	mul	r24, r31
    37ca:	c0 01       	movw	r24, r0
    37cc:	11 24       	eor	r1, r1
    37ce:	b8 01       	movw	r22, r16
    37d0:	88 59       	subi	r24, 0x98	; 152
    37d2:	9e 4c       	sbci	r25, 0xCE	; 206
    37d4:	0e 94 96 11 	call	0x232c	; 0x232c <vListInsertEnd>
			}
		}
	}
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	08 95       	ret

000037e2 <__divmodsi4>:
    37e2:	05 2e       	mov	r0, r21
    37e4:	97 fb       	bst	r25, 7
    37e6:	1e f4       	brtc	.+6      	; 0x37ee <__divmodsi4+0xc>
    37e8:	00 94       	com	r0
    37ea:	0e 94 08 1c 	call	0x3810	; 0x3810 <__negsi2>
    37ee:	57 fd       	sbrc	r21, 7
    37f0:	07 d0       	rcall	.+14     	; 0x3800 <__divmodsi4_neg2>
    37f2:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
    37f6:	07 fc       	sbrc	r0, 7
    37f8:	03 d0       	rcall	.+6      	; 0x3800 <__divmodsi4_neg2>
    37fa:	4e f4       	brtc	.+18     	; 0x380e <__divmodsi4_exit>
    37fc:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <__negsi2>

00003800 <__divmodsi4_neg2>:
    3800:	50 95       	com	r21
    3802:	40 95       	com	r20
    3804:	30 95       	com	r19
    3806:	21 95       	neg	r18
    3808:	3f 4f       	sbci	r19, 0xFF	; 255
    380a:	4f 4f       	sbci	r20, 0xFF	; 255
    380c:	5f 4f       	sbci	r21, 0xFF	; 255

0000380e <__divmodsi4_exit>:
    380e:	08 95       	ret

00003810 <__negsi2>:
    3810:	90 95       	com	r25
    3812:	80 95       	com	r24
    3814:	70 95       	com	r23
    3816:	61 95       	neg	r22
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	08 95       	ret

00003820 <__udivmodsi4>:
    3820:	a1 e2       	ldi	r26, 0x21	; 33
    3822:	1a 2e       	mov	r1, r26
    3824:	aa 1b       	sub	r26, r26
    3826:	bb 1b       	sub	r27, r27
    3828:	fd 01       	movw	r30, r26
    382a:	0d c0       	rjmp	.+26     	; 0x3846 <__udivmodsi4_ep>

0000382c <__udivmodsi4_loop>:
    382c:	aa 1f       	adc	r26, r26
    382e:	bb 1f       	adc	r27, r27
    3830:	ee 1f       	adc	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	a2 17       	cp	r26, r18
    3836:	b3 07       	cpc	r27, r19
    3838:	e4 07       	cpc	r30, r20
    383a:	f5 07       	cpc	r31, r21
    383c:	20 f0       	brcs	.+8      	; 0x3846 <__udivmodsi4_ep>
    383e:	a2 1b       	sub	r26, r18
    3840:	b3 0b       	sbc	r27, r19
    3842:	e4 0b       	sbc	r30, r20
    3844:	f5 0b       	sbc	r31, r21

00003846 <__udivmodsi4_ep>:
    3846:	66 1f       	adc	r22, r22
    3848:	77 1f       	adc	r23, r23
    384a:	88 1f       	adc	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	1a 94       	dec	r1
    3850:	69 f7       	brne	.-38     	; 0x382c <__udivmodsi4_loop>
    3852:	60 95       	com	r22
    3854:	70 95       	com	r23
    3856:	80 95       	com	r24
    3858:	90 95       	com	r25
    385a:	9b 01       	movw	r18, r22
    385c:	ac 01       	movw	r20, r24
    385e:	bd 01       	movw	r22, r26
    3860:	cf 01       	movw	r24, r30
    3862:	08 95       	ret

00003864 <memcpy>:
    3864:	fb 01       	movw	r30, r22
    3866:	dc 01       	movw	r26, r24
    3868:	02 c0       	rjmp	.+4      	; 0x386e <memcpy+0xa>
    386a:	01 90       	ld	r0, Z+
    386c:	0d 92       	st	X+, r0
    386e:	41 50       	subi	r20, 0x01	; 1
    3870:	50 40       	sbci	r21, 0x00	; 0
    3872:	d8 f7       	brcc	.-10     	; 0x386a <memcpy+0x6>
    3874:	08 95       	ret

00003876 <memset>:
    3876:	dc 01       	movw	r26, r24
    3878:	01 c0       	rjmp	.+2      	; 0x387c <memset+0x6>
    387a:	6d 93       	st	X+, r22
    387c:	41 50       	subi	r20, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	e0 f7       	brcc	.-8      	; 0x387a <memset+0x4>
    3882:	08 95       	ret

00003884 <strncpy>:
    3884:	fb 01       	movw	r30, r22
    3886:	dc 01       	movw	r26, r24
    3888:	41 50       	subi	r20, 0x01	; 1
    388a:	50 40       	sbci	r21, 0x00	; 0
    388c:	48 f0       	brcs	.+18     	; 0x38a0 <strncpy+0x1c>
    388e:	01 90       	ld	r0, Z+
    3890:	0d 92       	st	X+, r0
    3892:	00 20       	and	r0, r0
    3894:	c9 f7       	brne	.-14     	; 0x3888 <strncpy+0x4>
    3896:	01 c0       	rjmp	.+2      	; 0x389a <strncpy+0x16>
    3898:	1d 92       	st	X+, r1
    389a:	41 50       	subi	r20, 0x01	; 1
    389c:	50 40       	sbci	r21, 0x00	; 0
    389e:	e0 f7       	brcc	.-8      	; 0x3898 <strncpy+0x14>
    38a0:	08 95       	ret

000038a2 <__itoa_ncheck>:
    38a2:	bb 27       	eor	r27, r27
    38a4:	4a 30       	cpi	r20, 0x0A	; 10
    38a6:	31 f4       	brne	.+12     	; 0x38b4 <__itoa_ncheck+0x12>
    38a8:	99 23       	and	r25, r25
    38aa:	22 f4       	brpl	.+8      	; 0x38b4 <__itoa_ncheck+0x12>
    38ac:	bd e2       	ldi	r27, 0x2D	; 45
    38ae:	90 95       	com	r25
    38b0:	81 95       	neg	r24
    38b2:	9f 4f       	sbci	r25, 0xFF	; 255
    38b4:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__utoa_common>

000038b8 <ultoa>:
    38b8:	25 32       	cpi	r18, 0x25	; 37
    38ba:	31 05       	cpc	r19, r1
    38bc:	20 f4       	brcc	.+8      	; 0x38c6 <ultoa+0xe>
    38be:	22 30       	cpi	r18, 0x02	; 2
    38c0:	10 f0       	brcs	.+4      	; 0x38c6 <ultoa+0xe>
    38c2:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__ultoa_ncheck>
    38c6:	fa 01       	movw	r30, r20
    38c8:	10 82       	st	Z, r1
    38ca:	ca 01       	movw	r24, r20
    38cc:	08 95       	ret

000038ce <__ultoa_ncheck>:
    38ce:	bb 27       	eor	r27, r27

000038d0 <__ultoa_common>:
    38d0:	fa 01       	movw	r30, r20
    38d2:	a6 2f       	mov	r26, r22
    38d4:	62 17       	cp	r22, r18
    38d6:	71 05       	cpc	r23, r1
    38d8:	81 05       	cpc	r24, r1
    38da:	91 05       	cpc	r25, r1
    38dc:	33 0b       	sbc	r19, r19
    38de:	30 fb       	bst	r19, 0
    38e0:	66 f0       	brts	.+24     	; 0x38fa <__ultoa_common+0x2a>
    38e2:	aa 27       	eor	r26, r26
    38e4:	66 0f       	add	r22, r22
    38e6:	77 1f       	adc	r23, r23
    38e8:	88 1f       	adc	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	aa 1f       	adc	r26, r26
    38ee:	a2 17       	cp	r26, r18
    38f0:	10 f0       	brcs	.+4      	; 0x38f6 <__ultoa_common+0x26>
    38f2:	a2 1b       	sub	r26, r18
    38f4:	63 95       	inc	r22
    38f6:	38 50       	subi	r19, 0x08	; 8
    38f8:	a9 f7       	brne	.-22     	; 0x38e4 <__ultoa_common+0x14>
    38fa:	a0 5d       	subi	r26, 0xD0	; 208
    38fc:	aa 33       	cpi	r26, 0x3A	; 58
    38fe:	08 f0       	brcs	.+2      	; 0x3902 <__ultoa_common+0x32>
    3900:	a9 5d       	subi	r26, 0xD9	; 217
    3902:	a1 93       	st	Z+, r26
    3904:	36 f7       	brtc	.-52     	; 0x38d2 <__ultoa_common+0x2>
    3906:	b1 11       	cpse	r27, r1
    3908:	b1 93       	st	Z+, r27
    390a:	10 82       	st	Z, r1
    390c:	ca 01       	movw	r24, r20
    390e:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <strrev>

00003912 <utoa>:
    3912:	45 32       	cpi	r20, 0x25	; 37
    3914:	51 05       	cpc	r21, r1
    3916:	20 f4       	brcc	.+8      	; 0x3920 <utoa+0xe>
    3918:	42 30       	cpi	r20, 0x02	; 2
    391a:	10 f0       	brcs	.+4      	; 0x3920 <utoa+0xe>
    391c:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__utoa_ncheck>
    3920:	fb 01       	movw	r30, r22
    3922:	10 82       	st	Z, r1
    3924:	cb 01       	movw	r24, r22
    3926:	08 95       	ret

00003928 <__utoa_ncheck>:
    3928:	bb 27       	eor	r27, r27

0000392a <__utoa_common>:
    392a:	fb 01       	movw	r30, r22
    392c:	55 27       	eor	r21, r21
    392e:	aa 27       	eor	r26, r26
    3930:	88 0f       	add	r24, r24
    3932:	99 1f       	adc	r25, r25
    3934:	aa 1f       	adc	r26, r26
    3936:	a4 17       	cp	r26, r20
    3938:	10 f0       	brcs	.+4      	; 0x393e <__utoa_common+0x14>
    393a:	a4 1b       	sub	r26, r20
    393c:	83 95       	inc	r24
    393e:	50 51       	subi	r21, 0x10	; 16
    3940:	b9 f7       	brne	.-18     	; 0x3930 <__utoa_common+0x6>
    3942:	a0 5d       	subi	r26, 0xD0	; 208
    3944:	aa 33       	cpi	r26, 0x3A	; 58
    3946:	08 f0       	brcs	.+2      	; 0x394a <__utoa_common+0x20>
    3948:	a9 5d       	subi	r26, 0xD9	; 217
    394a:	a1 93       	st	Z+, r26
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	79 f7       	brne	.-34     	; 0x392e <__utoa_common+0x4>
    3950:	b1 11       	cpse	r27, r1
    3952:	b1 93       	st	Z+, r27
    3954:	11 92       	st	Z+, r1
    3956:	cb 01       	movw	r24, r22
    3958:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <strrev>

0000395c <strrev>:
    395c:	dc 01       	movw	r26, r24
    395e:	fc 01       	movw	r30, r24
    3960:	67 2f       	mov	r22, r23
    3962:	71 91       	ld	r23, Z+
    3964:	77 23       	and	r23, r23
    3966:	e1 f7       	brne	.-8      	; 0x3960 <strrev+0x4>
    3968:	32 97       	sbiw	r30, 0x02	; 2
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <strrev+0x18>
    396c:	7c 91       	ld	r23, X
    396e:	6d 93       	st	X+, r22
    3970:	70 83       	st	Z, r23
    3972:	62 91       	ld	r22, -Z
    3974:	ae 17       	cp	r26, r30
    3976:	bf 07       	cpc	r27, r31
    3978:	c8 f3       	brcs	.-14     	; 0x396c <strrev+0x10>
    397a:	08 95       	ret

0000397c <__mulsi3>:
    397c:	db 01       	movw	r26, r22
    397e:	8f 93       	push	r24
    3980:	9f 93       	push	r25
    3982:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__muluhisi3>
    3986:	bf 91       	pop	r27
    3988:	af 91       	pop	r26
    398a:	a2 9f       	mul	r26, r18
    398c:	80 0d       	add	r24, r0
    398e:	91 1d       	adc	r25, r1
    3990:	a3 9f       	mul	r26, r19
    3992:	90 0d       	add	r25, r0
    3994:	b2 9f       	mul	r27, r18
    3996:	90 0d       	add	r25, r0
    3998:	11 24       	eor	r1, r1
    399a:	08 95       	ret

0000399c <__divmodhi4>:
    399c:	97 fb       	bst	r25, 7
    399e:	07 2e       	mov	r0, r23
    39a0:	16 f4       	brtc	.+4      	; 0x39a6 <__divmodhi4+0xa>
    39a2:	00 94       	com	r0
    39a4:	07 d0       	rcall	.+14     	; 0x39b4 <__divmodhi4_neg1>
    39a6:	77 fd       	sbrc	r23, 7
    39a8:	09 d0       	rcall	.+18     	; 0x39bc <__divmodhi4_neg2>
    39aa:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__udivmodhi4>
    39ae:	07 fc       	sbrc	r0, 7
    39b0:	05 d0       	rcall	.+10     	; 0x39bc <__divmodhi4_neg2>
    39b2:	3e f4       	brtc	.+14     	; 0x39c2 <__divmodhi4_exit>

000039b4 <__divmodhi4_neg1>:
    39b4:	90 95       	com	r25
    39b6:	81 95       	neg	r24
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	08 95       	ret

000039bc <__divmodhi4_neg2>:
    39bc:	70 95       	com	r23
    39be:	61 95       	neg	r22
    39c0:	7f 4f       	sbci	r23, 0xFF	; 255

000039c2 <__divmodhi4_exit>:
    39c2:	08 95       	ret

000039c4 <__tablejump2__>:
    39c4:	ee 0f       	add	r30, r30
    39c6:	ff 1f       	adc	r31, r31
    39c8:	88 1f       	adc	r24, r24
    39ca:	8b bf       	out	0x3b, r24	; 59
    39cc:	07 90       	elpm	r0, Z+
    39ce:	f6 91       	elpm	r31, Z
    39d0:	e0 2d       	mov	r30, r0
    39d2:	1b be       	out	0x3b, r1	; 59
    39d4:	19 94       	eijmp

000039d6 <__muluhisi3>:
    39d6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__umulhisi3>
    39da:	a5 9f       	mul	r26, r21
    39dc:	90 0d       	add	r25, r0
    39de:	b4 9f       	mul	r27, r20
    39e0:	90 0d       	add	r25, r0
    39e2:	a4 9f       	mul	r26, r20
    39e4:	80 0d       	add	r24, r0
    39e6:	91 1d       	adc	r25, r1
    39e8:	11 24       	eor	r1, r1
    39ea:	08 95       	ret

000039ec <__udivmodhi4>:
    39ec:	aa 1b       	sub	r26, r26
    39ee:	bb 1b       	sub	r27, r27
    39f0:	51 e1       	ldi	r21, 0x11	; 17
    39f2:	07 c0       	rjmp	.+14     	; 0x3a02 <__udivmodhi4_ep>

000039f4 <__udivmodhi4_loop>:
    39f4:	aa 1f       	adc	r26, r26
    39f6:	bb 1f       	adc	r27, r27
    39f8:	a6 17       	cp	r26, r22
    39fa:	b7 07       	cpc	r27, r23
    39fc:	10 f0       	brcs	.+4      	; 0x3a02 <__udivmodhi4_ep>
    39fe:	a6 1b       	sub	r26, r22
    3a00:	b7 0b       	sbc	r27, r23

00003a02 <__udivmodhi4_ep>:
    3a02:	88 1f       	adc	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	5a 95       	dec	r21
    3a08:	a9 f7       	brne	.-22     	; 0x39f4 <__udivmodhi4_loop>
    3a0a:	80 95       	com	r24
    3a0c:	90 95       	com	r25
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	08 95       	ret

00003a14 <__umulhisi3>:
    3a14:	a2 9f       	mul	r26, r18
    3a16:	b0 01       	movw	r22, r0
    3a18:	b3 9f       	mul	r27, r19
    3a1a:	c0 01       	movw	r24, r0
    3a1c:	a3 9f       	mul	r26, r19
    3a1e:	70 0d       	add	r23, r0
    3a20:	81 1d       	adc	r24, r1
    3a22:	11 24       	eor	r1, r1
    3a24:	91 1d       	adc	r25, r1
    3a26:	b2 9f       	mul	r27, r18
    3a28:	70 0d       	add	r23, r0
    3a2a:	81 1d       	adc	r24, r1
    3a2c:	11 24       	eor	r1, r1
    3a2e:	91 1d       	adc	r25, r1
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>
